
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800c7b8  0800c7b8  0001c7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cac0  0800cac0  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800cac0  0800cac0  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cac0  0800cac0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cac0  0800cac0  0001cac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cac4  0800cac4  0001cac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800cac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000098  0800cb60  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  0800cb60  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015493  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c16  00000000  00000000  00035554  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d8  00000000  00000000  00038170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  00039548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003809  00000000  00000000  0003a810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff54  00000000  00000000  0003e019  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000918e6  00000000  00000000  0004df6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df853  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da8  00000000  00000000  000df8d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c79c 	.word	0x0800c79c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	0800c79c 	.word	0x0800c79c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	d1ed      	bne.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2iz>:
 80010dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30f      	bcc.n	8001106 <__aeabi_f2iz+0x2a>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d90d      	bls.n	800110c <__aeabi_f2iz+0x30>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	bf18      	it	ne
 8001102:	4240      	negne	r0, r0
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2iz+0x3a>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d105      	bne.n	8001122 <__aeabi_f2iz+0x46>
 8001116:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800111a:	bf08      	it	eq
 800111c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr

08001128 <__aeabi_f2uiz>:
 8001128:	0042      	lsls	r2, r0, #1
 800112a:	d20e      	bcs.n	800114a <__aeabi_f2uiz+0x22>
 800112c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001130:	d30b      	bcc.n	800114a <__aeabi_f2uiz+0x22>
 8001132:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001136:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800113a:	d409      	bmi.n	8001150 <__aeabi_f2uiz+0x28>
 800113c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	4770      	bx	lr
 800114a:	f04f 0000 	mov.w	r0, #0
 800114e:	4770      	bx	lr
 8001150:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001154:	d101      	bne.n	800115a <__aeabi_f2uiz+0x32>
 8001156:	0242      	lsls	r2, r0, #9
 8001158:	d102      	bne.n	8001160 <__aeabi_f2uiz+0x38>
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	4770      	bx	lr
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <crc16_floating>:
        crc = (crc << 8) ^ crc16tab[(((crc >> 8) ^ (*((uint8_t *)(buf++)))) & 0x00FF)];
    return crc;
}

uint16_t crc16_floating(uint8_t next, uint16_t seed)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	80bb      	strh	r3, [r7, #4]
    return (seed << 8) ^ crc16tab[((seed >> 8) ^ next) & 0x00FF];
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	b29b      	uxth	r3, r3
 8001184:	4619      	mov	r1, r3
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	404b      	eors	r3, r1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4905      	ldr	r1, [pc, #20]	; (80011a4 <crc16_floating+0x3c>)
 800118e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4053      	eors	r3, r2
 8001196:	b21b      	sxth	r3, r3
 8001198:	b29b      	uxth	r3, r3
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	0800c7ec 	.word	0x0800c7ec

080011a8 <SendFrameData>:

#include "frame_uart.h"
#include "crc.h"

void SendFrameData(uint8_t *pu8Src, uint16_t u16Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	460b      	mov	r3, r1
 80011b6:	817b      	strh	r3, [r7, #10]
    const uint8_t *pu8Src_end = pu8Src + u16Src_len;
 80011b8:	897b      	ldrh	r3, [r7, #10]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
    const uint8_t *pu8Dest_start = pu8Dest;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	83fb      	strh	r3, [r7, #30]

    *(pu8Dest++) = START_BYTE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	2245      	movs	r2, #69	; 0x45
 80011d0:	701a      	strb	r2, [r3, #0]
    while (pu8Src < pu8Src_end)
 80011d2:	e029      	b.n	8001228 <SendFrameData+0x80>
    {
        if (*pu8Src == START_BYTE || *pu8Src == CHECK_BYTE || *pu8Src == STOP_BYTE)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b45      	cmp	r3, #69	; 0x45
 80011da:	d007      	beq.n	80011ec <SendFrameData+0x44>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b60      	cmp	r3, #96	; 0x60
 80011e2:	d003      	beq.n	80011ec <SendFrameData+0x44>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2bc4      	cmp	r3, #196	; 0xc4
 80011ea:	d10b      	bne.n	8001204 <SendFrameData+0x5c>
        {
            *(pu8Dest++) = CHECK_BYTE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	2260      	movs	r2, #96	; 0x60
 80011f4:	701a      	strb	r2, [r3, #0]
            *(pu8Dest++) = *pu8Src;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e005      	b.n	8001210 <SendFrameData+0x68>
        }
        else
        {
            *(pu8Dest++) = *pu8Src;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	701a      	strb	r2, [r3, #0]
        }
        crc = crc16_floating(*pu8Src, crc);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	8bfa      	ldrh	r2, [r7, #30]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ffa5 	bl	8001168 <crc16_floating>
 800121e:	4603      	mov	r3, r0
 8001220:	83fb      	strh	r3, [r7, #30]
        pu8Src++;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
    while (pu8Src < pu8Src_end)
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3d1      	bcc.n	80011d4 <SendFrameData+0x2c>
    }
    *(pu8Dest) = (char)(crc >> 8);
 8001230:	8bfb      	ldrh	r3, [r7, #30]
 8001232:	0a1b      	lsrs	r3, r3, #8
 8001234:	b29b      	uxth	r3, r3
 8001236:	b2da      	uxtb	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	607b      	str	r3, [r7, #4]
    *(pu8Dest) = (char)crc;
 8001242:	8bfb      	ldrh	r3, [r7, #30]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3301      	adds	r3, #1
 800124e:	607b      	str	r3, [r7, #4]
    *(pu8Dest++) = STOP_BYTE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	22c4      	movs	r2, #196	; 0xc4
 8001258:	701a      	strb	r2, [r3, #0]
    *(pu16Dest_len) = pu8Dest - pu8Dest_start;
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29a      	uxth	r2, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	801a      	strh	r2, [r3, #0]
}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <receive_value>:
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
  return len;
}

void receive_value(uint8_t *data_dest, uint8_t *data, uint8_t length)
{
 800126e:	b480      	push	{r7}
 8001270:	b087      	sub	sp, #28
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	4613      	mov	r3, r2
 800127a:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < length; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e00a      	b.n	8001298 <receive_value+0x2a>
    *data++ = *data_dest++;
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	1c53      	adds	r3, r2, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c59      	adds	r1, r3, #1
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	dbf0      	blt.n	8001282 <receive_value+0x14>
}
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
	...

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f005 f80e 	bl	80062d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f878 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f000 fa5c 	bl	8001774 <MX_GPIO_Init>
  MX_DMA_Init();
 80012bc:	f000 fa3c 	bl	8001738 <MX_DMA_Init>
  MX_I2C1_Init();
 80012c0:	f000 f8b8 	bl	8001434 <MX_I2C1_Init>
  MX_SPI2_Init();
 80012c4:	f000 f8e4 	bl	8001490 <MX_SPI2_Init>
  MX_TIM3_Init();
 80012c8:	f000 f918 	bl	80014fc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012cc:	f000 f9e0 	bl	8001690 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012d0:	f000 fa08 	bl	80016e4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80012d4:	f000 f98e 	bl	80015f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012d8:	2100      	movs	r1, #0
 80012da:	4829      	ldr	r0, [pc, #164]	; (8001380 <main+0xd4>)
 80012dc:	f007 fd7c 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012e0:	2104      	movs	r1, #4
 80012e2:	4827      	ldr	r0, [pc, #156]	; (8001380 <main+0xd4>)
 80012e4:	f007 fd78 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80012e8:	2108      	movs	r1, #8
 80012ea:	4825      	ldr	r0, [pc, #148]	; (8001380 <main+0xd4>)
 80012ec:	f007 fd74 	bl	8008dd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80012f0:	210c      	movs	r1, #12
 80012f2:	4823      	ldr	r0, [pc, #140]	; (8001380 <main+0xd4>)
 80012f4:	f007 fd70 	bl	8008dd8 <HAL_TIM_PWM_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
 80012f8:	2224      	movs	r2, #36	; 0x24
 80012fa:	4922      	ldr	r1, [pc, #136]	; (8001384 <main+0xd8>)
 80012fc:	4822      	ldr	r0, [pc, #136]	; (8001388 <main+0xdc>)
 80012fe:	f008 fca2 	bl	8009c46 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <main+0xe0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <main+0xe0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0204 	bic.w	r2, r2, #4
 8001310:	601a      	str	r2, [r3, #0]

  runRadio();
 8001312:	f004 fce1 	bl	8005cd8 <runRadio>

  while (MPU9255_Init(&hi2c1) == 1)
 8001316:	e006      	b.n	8001326 <main+0x7a>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001318:	2110      	movs	r1, #16
 800131a:	481d      	ldr	r0, [pc, #116]	; (8001390 <main+0xe4>)
 800131c:	f005 fd7a 	bl	8006e14 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8001320:	2064      	movs	r0, #100	; 0x64
 8001322:	f005 f837 	bl	8006394 <HAL_Delay>
  while (MPU9255_Init(&hi2c1) == 1)
 8001326:	481b      	ldr	r0, [pc, #108]	; (8001394 <main+0xe8>)
 8001328:	f000 fca4 	bl	8001c74 <MPU9255_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b01      	cmp	r3, #1
 8001330:	d0f2      	beq.n	8001318 <main+0x6c>
  }

  HAL_Delay(3000);
 8001332:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001336:	f005 f82d 	bl	8006394 <HAL_Delay>
  while (payload_packet.throttle > 1050)
 800133a:	e004      	b.n	8001346 <main+0x9a>
  {
    // Read again
    RX_data();
 800133c:	f004 fd04 	bl	8005d48 <RX_data>
    HAL_Delay(20);
 8001340:	2014      	movs	r0, #20
 8001342:	f005 f827 	bl	8006394 <HAL_Delay>
  while (payload_packet.throttle > 1050)
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <main+0xec>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f240 421a 	movw	r2, #1050	; 0x41a
 800134e:	4293      	cmp	r3, r2
 8001350:	d8f4      	bhi.n	800133c <main+0x90>
  }

  start_time = HAL_GetTick();
 8001352:	f005 f815 	bl	8006380 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <main+0xf0>)
 800135a:	601a      	str	r2, [r3, #0]
  while ((HAL_GetTick() - start_time) < 4000)
 800135c:	e003      	b.n	8001366 <main+0xba>
  {
    readAll(&hi2c1, &MPU9255);
 800135e:	4910      	ldr	r1, [pc, #64]	; (80013a0 <main+0xf4>)
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <main+0xe8>)
 8001362:	f000 fced 	bl	8001d40 <readAll>
  while ((HAL_GetTick() - start_time) < 4000)
 8001366:	f005 f80b 	bl	8006380 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <main+0xf0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001376:	d3f2      	bcc.n	800135e <main+0xb2>
  }

  //  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
  //  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  HAL_TIM_Base_Start_IT(&htim4);
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <main+0xf8>)
 800137a:	f007 fc8b 	bl	8008c94 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800137e:	e7fe      	b.n	800137e <main+0xd2>
 8001380:	200002a8 	.word	0x200002a8
 8001384:	200003d0 	.word	0x200003d0
 8001388:	20000338 	.word	0x20000338
 800138c:	200002f4 	.word	0x200002f4
 8001390:	40010c00 	.word	0x40010c00
 8001394:	20000254 	.word	0x20000254
 8001398:	2000053c 	.word	0x2000053c
 800139c:	200000b4 	.word	0x200000b4
 80013a0:	20000158 	.word	0x20000158
 80013a4:	200001ec 	.word	0x200001ec

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b090      	sub	sp, #64	; 0x40
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0318 	add.w	r3, r7, #24
 80013b2:	2228      	movs	r2, #40	; 0x28
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f009 f9e0 	bl	800a77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4618      	mov	r0, r3
 80013f2:	f006 fd17 	bl	8007e24 <HAL_RCC_OscConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013fc:	f000 fb36 	bl	8001a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001400:	230f      	movs	r3, #15
 8001402:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001404:	2302      	movs	r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2102      	movs	r1, #2
 800141a:	4618      	mov	r0, r3
 800141c:	f006 ff82 	bl	8008324 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001426:	f000 fb21 	bl	8001a6c <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3740      	adds	r7, #64	; 0x40
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C1_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <MX_I2C1_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_I2C1_Init+0x50>)
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_I2C1_Init+0x58>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_I2C1_Init+0x50>)
 8001452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C1_Init+0x50>)
 8001472:	f005 fce9 	bl	8006e48 <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800147c:	f000 faf6 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000254 	.word	0x20000254
 8001488:	40005400 	.word	0x40005400
 800148c:	000186a0 	.word	0x000186a0

08001490 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_SPI2_Init+0x64>)
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <MX_SPI2_Init+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_SPI2_Init+0x64>)
 800149c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014dc:	220a      	movs	r2, #10
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014e2:	f007 f8bb 	bl	800865c <HAL_SPI_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014ec:	f000 fabe 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000188 	.word	0x20000188
 80014f8:	40003800 	.word	0x40003800

080014fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001520:	4a33      	ldr	r2, [pc, #204]	; (80015f0 <MX_TIM3_Init+0xf4>)
 8001522:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001526:	2247      	movs	r2, #71	; 0x47
 8001528:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <MX_TIM3_Init+0xf0>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001530:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001532:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001536:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <MX_TIM3_Init+0xf0>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001544:	4829      	ldr	r0, [pc, #164]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001546:	f007 fbf7 	bl	8008d38 <HAL_TIM_PWM_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001550:	f000 fa8c 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4619      	mov	r1, r3
 8001562:	4822      	ldr	r0, [pc, #136]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001564:	f008 fa20 	bl	80099a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800156e:	f000 fa7d 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001572:	2360      	movs	r3, #96	; 0x60
 8001574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	4619      	mov	r1, r3
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <MX_TIM3_Init+0xf0>)
 800158c:	f007 fdce 	bl	800912c <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001596:	f000 fa69 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2204      	movs	r2, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4812      	ldr	r0, [pc, #72]	; (80015ec <MX_TIM3_Init+0xf0>)
 80015a2:	f007 fdc3 	bl	800912c <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80015ac:	f000 fa5e 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2208      	movs	r2, #8
 80015b4:	4619      	mov	r1, r3
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <MX_TIM3_Init+0xf0>)
 80015b8:	f007 fdb8 	bl	800912c <HAL_TIM_PWM_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80015c2:	f000 fa53 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	220c      	movs	r2, #12
 80015ca:	4619      	mov	r1, r3
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM3_Init+0xf0>)
 80015ce:	f007 fdad 	bl	800912c <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80015d8:	f000 fa48 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM3_Init+0xf0>)
 80015de:	f004 fccd 	bl	8005f7c <HAL_TIM_MspPostInit>

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002a8 	.word	0x200002a8
 80015f0:	40000400 	.word	0x40000400

080015f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_TIM4_Init+0x94>)
 8001612:	4a1e      	ldr	r2, [pc, #120]	; (800168c <MX_TIM4_Init+0x98>)
 8001614:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_TIM4_Init+0x94>)
 8001618:	f240 22cf 	movw	r2, #719	; 0x2cf
 800161c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_TIM4_Init+0x94>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <MX_TIM4_Init+0x94>)
 8001626:	f240 32e7 	movw	r2, #999	; 0x3e7
 800162a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_TIM4_Init+0x94>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_TIM4_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001638:	4813      	ldr	r0, [pc, #76]	; (8001688 <MX_TIM4_Init+0x94>)
 800163a:	f007 fadb 	bl	8008bf4 <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001644:	f000 fa12 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4619      	mov	r1, r3
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <MX_TIM4_Init+0x94>)
 8001656:	f007 fe27 	bl	80092a8 <HAL_TIM_ConfigClockSource>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001660:	f000 fa04 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_TIM4_Init+0x94>)
 8001672:	f008 f999 	bl	80099a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800167c:	f000 f9f6 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200001ec 	.word	0x200001ec
 800168c:	40000800 	.word	0x40000800

08001690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_USART1_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016c8:	f008 f9de 	bl	8009a88 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f000 f9cb 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000338 	.word	0x20000338
 80016e0:	40013800 	.word	0x40013800

080016e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <MX_USART2_UART_Init+0x50>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 800171c:	f008 f9b4 	bl	8009a88 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001726:	f000 f9a1 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000384 	.word	0x20000384
 8001734:	40004400 	.word	0x40004400

08001738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_DMA_Init+0x38>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <MX_DMA_Init+0x38>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6153      	str	r3, [r2, #20]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_DMA_Init+0x38>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	200f      	movs	r0, #15
 800175c:	f004 ff13 	bl	8006586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001760:	200f      	movs	r0, #15
 8001762:	f004 ff2c 	bl	80065be <HAL_NVIC_EnableIRQ>

}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001788:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <MX_GPIO_Init+0xd4>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a2e      	ldr	r2, [pc, #184]	; (8001848 <MX_GPIO_Init+0xd4>)
 800178e:	f043 0320 	orr.w	r3, r3, #32
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <MX_GPIO_Init+0xd4>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b29      	ldr	r3, [pc, #164]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a28      	ldr	r2, [pc, #160]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b26      	ldr	r3, [pc, #152]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a22      	ldr	r2, [pc, #136]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CSN_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f241 0130 	movw	r1, #4144	; 0x1030
 80017d6:	481d      	ldr	r0, [pc, #116]	; (800184c <MX_GPIO_Init+0xd8>)
 80017d8:	f005 fb04 	bl	8006de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e2:	481b      	ldr	r0, [pc, #108]	; (8001850 <MX_GPIO_Init+0xdc>)
 80017e4:	f005 fafe 	bl	8006de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CSN_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|LED2_Pin|LED1_Pin;
 80017e8:	f241 0330 	movw	r3, #4144	; 0x1030
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4619      	mov	r1, r3
 8001800:	4812      	ldr	r0, [pc, #72]	; (800184c <MX_GPIO_Init+0xd8>)
 8001802:	f005 f995 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8001806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2302      	movs	r3, #2
 8001816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <MX_GPIO_Init+0xdc>)
 8001820:	f005 f986 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin;
 8001824:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4619      	mov	r1, r3
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_GPIO_Init+0xd8>)
 800183a:	f005 f979 	bl	8006b30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40010c00 	.word	0x40010c00
 8001850:	40010800 	.word	0x40010800

08001854 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af02      	add	r7, sp, #8
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t start = HAL_GetTick();
 800185c:	f004 fd90 	bl	8006380 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

  if (htim->Instance == htim4.Instance)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d173      	bne.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x102>
  {
    RX_data();
 800186e:	f004 fa6b 	bl	8005d48 <RX_data>
    readAll(&hi2c1, &MPU9255);
 8001872:	493f      	ldr	r1, [pc, #252]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001874:	483f      	ldr	r0, [pc, #252]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001876:	f000 fa63 	bl	8001d40 <readAll>

    pid_roll(payload_packet.roll, MPU9255.roll, MPU9255.GyroX, &pid);
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	b298      	uxth	r0, r3
 8001880:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001882:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001884:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	4b3c      	ldr	r3, [pc, #240]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800188a:	f004 f829 	bl	80058e0 <pid_roll>
    pid_pitch(payload_packet.pitch, MPU9255.pitch, MPU9255.GyroY, &pid);
 800188e:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	b298      	uxth	r0, r3
 8001894:	4b36      	ldr	r3, [pc, #216]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001896:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001898:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800189e:	f004 f8cf 	bl	8005a40 <pid_pitch>
    pid_yaw(payload_packet.yaw, MPU9255.GyroZ, &pid);
 80018a2:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	b298      	uxth	r0, r3
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	4a33      	ldr	r2, [pc, #204]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80018ae:	4619      	mov	r1, r3
 80018b0:	f004 f976 	bl	8005ba0 <pid_yaw>

    // value PWM
    calculate_motor_output(&esc_right, &esc_left, &servo_right, &servo_left, payload_packet.throttle, &pid);
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	4a30      	ldr	r2, [pc, #192]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80018bc:	9201      	str	r2, [sp, #4]
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80018c2:	4a30      	ldr	r2, [pc, #192]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80018c4:	4930      	ldr	r1, [pc, #192]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80018c6:	4831      	ldr	r0, [pc, #196]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80018c8:	f000 f900 	bl	8001acc <calculate_motor_output>

     htim3.Instance->CCR1 = servo_right;
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80018ce:	881a      	ldrh	r2, [r3, #0]
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
     htim3.Instance->CCR2 = servo_left;
 80018d6:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80018d8:	881a      	ldrh	r2, [r3, #0]
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	639a      	str	r2, [r3, #56]	; 0x38
     htim3.Instance->CCR3 = esc_right; // trang
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	63da      	str	r2, [r3, #60]	; 0x3c
     htim3.Instance->CCR4 = esc_left;  // vang
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80018ec:	881a      	ldrh	r2, [r3, #0]
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40

    // send to GUI
   // q_Roll_angle = MPU9255.pitch + 2000;
      q_Roll_angle = MPU9255.GyroY+ 2000 ;
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	4926      	ldr	r1, [pc, #152]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f90a 	bl	8000b14 <__addsf3>
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001906:	601a      	str	r2, [r3, #0]

    sprintf((char *)f_trans, "%d%d", (uint16_t)(2000+set_point), (uint16_t)q_Roll_angle);
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4921      	ldr	r1, [pc, #132]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f900 	bl	8000b14 <__addsf3>
 8001914:	4603      	mov	r3, r0
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fc06 	bl	8001128 <__aeabi_f2uiz>
 800191c:	4603      	mov	r3, r0
 800191e:	b29b      	uxth	r3, r3
 8001920:	461c      	mov	r4, r3
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fbfe 	bl	8001128 <__aeabi_f2uiz>
 800192c:	4603      	mov	r3, r0
 800192e:	b29b      	uxth	r3, r3
 8001930:	4622      	mov	r2, r4
 8001932:	491b      	ldr	r1, [pc, #108]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001934:	481b      	ldr	r0, [pc, #108]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001936:	f008 ff29 	bl	800a78c <siprintf>
    SendFrameData(f_trans, FRAME_DATA_TX, f_dest_trans, &f_dest_len_t);
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800193c:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 800193e:	2108      	movs	r1, #8
 8001940:	4818      	ldr	r0, [pc, #96]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001942:	f7ff fc31 	bl	80011a8 <SendFrameData>
    HAL_UART_Transmit(&huart1, f_dest_trans, f_dest_len_t, 1000);
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	4917      	ldr	r1, [pc, #92]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001950:	4817      	ldr	r0, [pc, #92]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001952:	f008 f8e6 	bl	8009b22 <HAL_UART_Transmit>
  }
  uint32_t time = HAL_GetTick() - start;
 8001956:	f004 fd13 	bl	8006380 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	60bb      	str	r3, [r7, #8]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	200001ec 	.word	0x200001ec
 8001970:	20000158 	.word	0x20000158
 8001974:	20000254 	.word	0x20000254
 8001978:	2000053c 	.word	0x2000053c
 800197c:	200001e0 	.word	0x200001e0
 8001980:	200002f0 	.word	0x200002f0
 8001984:	2000037e 	.word	0x2000037e
 8001988:	2000037c 	.word	0x2000037c
 800198c:	20000382 	.word	0x20000382
 8001990:	200002a8 	.word	0x200002a8
 8001994:	44fa0000 	.word	0x44fa0000
 8001998:	200000fc 	.word	0x200000fc
 800199c:	200000f4 	.word	0x200000f4
 80019a0:	0800c7b8 	.word	0x0800c7b8
 80019a4:	200003c8 	.word	0x200003c8
 80019a8:	200000f8 	.word	0x200000f8
 80019ac:	20000234 	.word	0x20000234
 80019b0:	20000338 	.word	0x20000338

080019b4 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
 80019c0:	2224      	movs	r2, #36	; 0x24
 80019c2:	491d      	ldr	r1, [pc, #116]	; (8001a38 <HAL_UARTEx_RxEventCallback+0x84>)
 80019c4:	481d      	ldr	r0, [pc, #116]	; (8001a3c <HAL_UARTEx_RxEventCallback+0x88>)
 80019c6:	f008 f93e 	bl	8009c46 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x8c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x8c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0204 	bic.w	r2, r2, #4
 80019d8:	601a      	str	r2, [r3, #0]
  receive_value(f_recei, (uint8_t *)&pid_para, Size);
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	4918      	ldr	r1, [pc, #96]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 80019e2:	4815      	ldr	r0, [pc, #84]	; (8001a38 <HAL_UARTEx_RxEventCallback+0x84>)
 80019e4:	f7ff fc43 	bl	800126e <receive_value>

  Kp_rate_pitch = pid_para.Kp_p;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <HAL_UARTEx_RxEventCallback+0x94>)
 80019ee:	6013      	str	r3, [r2, #0]
  Ki_rate_pitch = pid_para.Ki_p;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <HAL_UARTEx_RxEventCallback+0x98>)
 80019f6:	6013      	str	r3, [r2, #0]
  Kd_rate_pitch = pid_para.Kd_p;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <HAL_UARTEx_RxEventCallback+0x9c>)
 80019fe:	6013      	str	r3, [r2, #0]

  Kp_angle_pitch = pid_para.Kp_r;
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001a06:	6013      	str	r3, [r2, #0]
  Ki_angle_pitch = pid_para.Ki_r;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001a0e:	6013      	str	r3, [r2, #0]
  Kd_angle_pitch = pid_para.Kd_r;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_UARTEx_RxEventCallback+0xa8>)
 8001a16:	6013      	str	r3, [r2, #0]

  MOTOR_LEFT_OFFSET = pid_para.off_motor_l;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_UARTEx_RxEventCallback+0xac>)
 8001a1e:	6013      	str	r3, [r2, #0]
  MOTOR_RIGHT_OFFSET = pid_para.off_motor_r;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001a26:	6013      	str	r3, [r2, #0]
  set_point =  pid_para.setpoint;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001a2e:	6013      	str	r3, [r2, #0]
  //  f_dest_len_r = Size;
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200003d0 	.word	0x200003d0
 8001a3c:	20000338 	.word	0x20000338
 8001a40:	200002f4 	.word	0x200002f4
 8001a44:	200003f4 	.word	0x200003f4
 8001a48:	200000d0 	.word	0x200000d0
 8001a4c:	200000d4 	.word	0x200000d4
 8001a50:	200000d8 	.word	0x200000d8
 8001a54:	200000b8 	.word	0x200000b8
 8001a58:	200000bc 	.word	0x200000bc
 8001a5c:	200000c0 	.word	0x200000c0
 8001a60:	20000004 	.word	0x20000004
 8001a64:	20000000 	.word	0x20000000
 8001a68:	200000f4 	.word	0x200000f4

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <Error_Handler+0x6>

08001a74 <map>:
extern volatile float MOTOR_RIGHT_OFFSET ;
extern volatile float MOTOR_LEFT_OFFSET ;
#endif

static int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
 8001a74:	b490      	push	{r4, r7}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	80fb      	strh	r3, [r7, #6]
 8001a86:	4603      	mov	r3, r0
 8001a88:	80bb      	strh	r3, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	807b      	strh	r3, [r7, #2]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001aa0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001aa4:	1a8a      	subs	r2, r1, r2
 8001aa6:	fb02 f203 	mul.w	r2, r2, r3
 8001aaa:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001aae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ab2:	1acb      	subs	r3, r1, r3
 8001ab4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	883b      	ldrh	r3, [r7, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b21b      	sxth	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc90      	pop	{r4, r7}
 8001aca:	4770      	bx	lr

08001acc <calculate_motor_output>:

void calculate_motor_output(uint16_t *esc_right, uint16_t *esc_left, uint16_t *servo_right, uint16_t *servo_left, uint16_t throttle_rc, PID_t *pid)
{
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]

    // value PWM
	throttle_rc = 1150;
 8001ada:	f240 437e 	movw	r3, #1150	; 0x47e
 8001ade:	843b      	strh	r3, [r7, #32]
    *esc_right = throttle_rc - pid->PID_pitch_out  ;
 8001ae0:	8c3b      	ldrh	r3, [r7, #32]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f8ca 	bl	8000c7c <__aeabi_i2f>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f7ff f80d 	bl	8000b10 <__aeabi_fsub>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fb15 	bl	8001128 <__aeabi_f2uiz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	801a      	strh	r2, [r3, #0]
    *esc_left = throttle_rc + pid->PID_pitch_out ;
 8001b06:	8c3b      	ldrh	r3, [r7, #32]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f8b7 	bl	8000c7c <__aeabi_i2f>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f7fe fffc 	bl	8000b14 <__addsf3>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fb02 	bl	8001128 <__aeabi_f2uiz>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	801a      	strh	r2, [r3, #0]
    *servo_right = 1500 + pid->PID_roll_out - pid->PID_yaw_out;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	494b      	ldr	r1, [pc, #300]	; (8001c60 <calculate_motor_output+0x194>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe ffee 	bl	8000b14 <__addsf3>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f7fe ffe4 	bl	8000b10 <__aeabi_fsub>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff faec 	bl	8001128 <__aeabi_f2uiz>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	801a      	strh	r2, [r3, #0]
    *servo_left = 1450 - pid->PID_roll_out - pid->PID_yaw_out;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4841      	ldr	r0, [pc, #260]	; (8001c64 <calculate_motor_output+0x198>)
 8001b60:	f7fe ffd6 	bl	8000b10 <__aeabi_fsub>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f7fe ffce 	bl	8000b10 <__aeabi_fsub>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fad6 	bl	8001128 <__aeabi_f2uiz>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	801a      	strh	r2, [r3, #0]

    if (*esc_right < 1000)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b8c:	d203      	bcs.n	8001b96 <calculate_motor_output+0xca>
    {
        *esc_right = 1000;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b94:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_right > 2000)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b9e:	d903      	bls.n	8001ba8 <calculate_motor_output+0xdc>
    {
        *esc_right = 2000;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ba6:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left < 1000)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb0:	d203      	bcs.n	8001bba <calculate_motor_output+0xee>
    {
        *esc_left = 1000;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb8:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left > 2000)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001bc2:	d903      	bls.n	8001bcc <calculate_motor_output+0x100>
    {
        *esc_left = 2000;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bca:	801a      	strh	r2, [r3, #0]
    }

    //Gioi han Servo


    *esc_right = map(*esc_right, 1000, 2000, MOTOR_RIGHT_OFFSET, MOTOR_RIGHT_OFFSET+900); // limited rate of motors
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b21c      	sxth	r4, r3
 8001bd2:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <calculate_motor_output+0x19c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fa80 	bl	80010dc <__aeabi_f2iz>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b21d      	sxth	r5, r3
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <calculate_motor_output+0x19c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4921      	ldr	r1, [pc, #132]	; (8001c6c <calculate_motor_output+0x1a0>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe ff94 	bl	8000b14 <__addsf3>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fa74 	bl	80010dc <__aeabi_f2iz>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff ff35 	bl	8001a74 <map>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	801a      	strh	r2, [r3, #0]
    *esc_left = map(*esc_left, 1000, 2000, MOTOR_LEFT_OFFSET, MOTOR_LEFT_OFFSET + 900);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b21c      	sxth	r4, r3
 8001c18:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <calculate_motor_output+0x1a4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fa5d 	bl	80010dc <__aeabi_f2iz>
 8001c22:	4603      	mov	r3, r0
 8001c24:	b21d      	sxth	r5, r3
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <calculate_motor_output+0x1a4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4910      	ldr	r1, [pc, #64]	; (8001c6c <calculate_motor_output+0x1a0>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe ff71 	bl	8000b14 <__addsf3>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fa51 	bl	80010dc <__aeabi_f2iz>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	462b      	mov	r3, r5
 8001c42:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff ff12 	bl	8001a74 <map>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	801a      	strh	r2, [r3, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c60:	44bb8000 	.word	0x44bb8000
 8001c64:	44b54000 	.word	0x44b54000
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	44610000 	.word	0x44610000
 8001c70:	20000004 	.word	0x20000004

08001c74 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af04      	add	r7, sp, #16
 8001c7a:	6078      	str	r0, [r7, #4]
	printf("**************************** \r\n");
	printf("MPU9250 STM32 Implementation \r\n");
	printf("**************************** \r\n");
	#endif
	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 8001c7c:	2364      	movs	r3, #100	; 0x64
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	2301      	movs	r3, #1
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	f107 030f 	add.w	r3, r7, #15
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	2275      	movs	r2, #117	; 0x75
 8001c8e:	21d0      	movs	r1, #208	; 0xd0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f005 fb0b 	bl	80072ac <HAL_I2C_Mem_Read>

#if DEBUG_MPU
		printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);
#endif

	if (readData == 113) {
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b71      	cmp	r3, #113	; 0x71
 8001c9a:	d13e      	bne.n	8001d1a <MPU9255_Init+0xa6>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 8001c9c:	4921      	ldr	r1, [pc, #132]	; (8001d24 <MPU9255_Init+0xb0>)
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f001 fca6 	bl	80035f0 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 8001ca4:	4a20      	ldr	r2, [pc, #128]	; (8001d28 <MPU9255_Init+0xb4>)
 8001ca6:	4921      	ldr	r1, [pc, #132]	; (8001d2c <MPU9255_Init+0xb8>)
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f001 f86b 	bl	8002d84 <calibrateMPU9250>
		HAL_Delay(1000);
 8001cae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb2:	f004 fb6f 	bl	8006394 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 ff82 	bl	8002bc0 <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 8001cbc:	2322      	movs	r3, #34	; 0x22
 8001cbe:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 8001cc0:	2364      	movs	r3, #100	; 0x64
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	f107 030e 	add.w	r3, r7, #14
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	2237      	movs	r2, #55	; 0x37
 8001cd2:	21d0      	movs	r1, #208	; 0xd0
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f005 f9ef 	bl	80070b8 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 8001cda:	2364      	movs	r3, #100	; 0x64
 8001cdc:	9302      	str	r3, [sp, #8]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	f107 030f 	add.w	r3, r7, #15
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2301      	movs	r3, #1
 8001cea:	2200      	movs	r2, #0
 8001cec:	2118      	movs	r1, #24
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f005 fadc 	bl	80072ac <HAL_I2C_Mem_Read>
#if (DEBUG_MPU)
		printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);
#endif
		HAL_Delay(1000);
 8001cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf8:	f004 fb4c 	bl	8006394 <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <MPU9255_Init+0xbc>)
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fd16 	bl	8002730 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 8001d04:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <MPU9255_Init+0xc0>)
 8001d06:	490c      	ldr	r1, [pc, #48]	; (8001d38 <MPU9255_Init+0xc4>)
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fde7 	bl	80028dc <calibrateMag>

		HAL_Delay(1000);
 8001d0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d12:	f004 fb3f 	bl	8006394 <HAL_Delay>
		return 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <MPU9255_Init+0xa8>
	}
	return 1; // Loop forever if communication doesn't happen
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000438 	.word	0x20000438
 8001d28:	20000118 	.word	0x20000118
 8001d2c:	2000010c 	.word	0x2000010c
 8001d30:	20000100 	.word	0x20000100
 8001d34:	20000130 	.word	0x20000130
 8001d38:	20000124 	.word	0x20000124
 8001d3c:	00000000 	.word	0x00000000

08001d40 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 8001d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d44:	b08b      	sub	sp, #44	; 0x2c
 8001d46:	af06      	add	r7, sp, #24
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2301      	movs	r3, #1
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	f107 030f 	add.w	r3, r7, #15
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	223a      	movs	r2, #58	; 0x3a
 8001d5e:	21d0      	movs	r1, #208	; 0xd0
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f005 faa3 	bl	80072ac <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8123 	beq.w	8001fb8 <readAll+0x278>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 8001d72:	4997      	ldr	r1, [pc, #604]	; (8001fd0 <readAll+0x290>)
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fc29 	bl	80025cc <readAccelData>
		getAres();
 8001d7a:	f000 fbf9 	bl	8002570 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 8001d7e:	4b94      	ldr	r3, [pc, #592]	; (8001fd0 <readAll+0x290>)
 8001d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe ff79 	bl	8000c7c <__aeabi_i2f>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b91      	ldr	r3, [pc, #580]	; (8001fd4 <readAll+0x294>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f7fe ffc6 	bl	8000d24 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <readAll+0x298>)
 8001d9e:	601a      	str	r2, [r3, #0]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 8001da0:	4b8b      	ldr	r3, [pc, #556]	; (8001fd0 <readAll+0x290>)
 8001da2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ff68 	bl	8000c7c <__aeabi_i2f>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b89      	ldr	r3, [pc, #548]	; (8001fd4 <readAll+0x294>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	4610      	mov	r0, r2
 8001db6:	f7fe ffb5 	bl	8000d24 <__aeabi_fmul>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b87      	ldr	r3, [pc, #540]	; (8001fdc <readAll+0x29c>)
 8001dc0:	601a      	str	r2, [r3, #0]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 8001dc2:	4b83      	ldr	r3, [pc, #524]	; (8001fd0 <readAll+0x290>)
 8001dc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe ff57 	bl	8000c7c <__aeabi_i2f>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b80      	ldr	r3, [pc, #512]	; (8001fd4 <readAll+0x294>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7fe ffa4 	bl	8000d24 <__aeabi_fmul>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <readAll+0x2a0>)
 8001de2:	601a      	str	r2, [r3, #0]

		DataStruct->AccelX = ax;
 8001de4:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <readAll+0x298>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8001dec:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <readAll+0x29c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8001df4:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <readAll+0x2a0>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 8001dfc:	4979      	ldr	r1, [pc, #484]	; (8001fe4 <readAll+0x2a4>)
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fc17 	bl	8002632 <readGyroData>
		getGres();
 8001e04:	f000 fb82 	bl	800250c <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8001e08:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <readAll+0x2a4>)
 8001e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe ff34 	bl	8000c7c <__aeabi_i2f>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b74      	ldr	r3, [pc, #464]	; (8001fe8 <readAll+0x2a8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f7fe ff81 	bl	8000d24 <__aeabi_fmul>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b71      	ldr	r3, [pc, #452]	; (8001fec <readAll+0x2ac>)
 8001e28:	601a      	str	r2, [r3, #0]
		gy = (float)gyroCount[1]*gRes;
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <readAll+0x2a4>)
 8001e2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe ff23 	bl	8000c7c <__aeabi_i2f>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b6b      	ldr	r3, [pc, #428]	; (8001fe8 <readAll+0x2a8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f7fe ff70 	bl	8000d24 <__aeabi_fmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <readAll+0x2b0>)
 8001e4a:	601a      	str	r2, [r3, #0]
		gz = (float)gyroCount[2]*gRes;
 8001e4c:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <readAll+0x2a4>)
 8001e4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe ff12 	bl	8000c7c <__aeabi_i2f>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b63      	ldr	r3, [pc, #396]	; (8001fe8 <readAll+0x2a8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f7fe ff5f 	bl	8000d24 <__aeabi_fmul>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b62      	ldr	r3, [pc, #392]	; (8001ff4 <readAll+0x2b4>)
 8001e6c:	601a      	str	r2, [r3, #0]

		DataStruct->GyroX = gx;
 8001e6e:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <readAll+0x2ac>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 8001e76:	4b5e      	ldr	r3, [pc, #376]	; (8001ff0 <readAll+0x2b0>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <readAll+0x2b4>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 8001e86:	495c      	ldr	r1, [pc, #368]	; (8001ff8 <readAll+0x2b8>)
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fc05 	bl	8002698 <readMagData>
		getMres();
 8001e8e:	f000 fb1f 	bl	80024d0 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <readAll+0x2b8>)
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe feef 	bl	8000c7c <__aeabi_i2f>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	4b56      	ldr	r3, [pc, #344]	; (8001ffc <readAll+0x2bc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f7fe ff3c 	bl	8000d24 <__aeabi_fmul>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b53      	ldr	r3, [pc, #332]	; (8002000 <readAll+0x2c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f7fe ff34 	bl	8000d24 <__aeabi_fmul>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b50      	ldr	r3, [pc, #320]	; (8002004 <readAll+0x2c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f7fe fe22 	bl	8000b10 <__aeabi_fsub>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <readAll+0x2c8>)
 8001ed2:	601a      	str	r2, [r3, #0]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <readAll+0x2b8>)
 8001ed6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fece 	bl	8000c7c <__aeabi_i2f>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <readAll+0x2bc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f7fe ff1b 	bl	8000d24 <__aeabi_fmul>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b43      	ldr	r3, [pc, #268]	; (8002000 <readAll+0x2c0>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f7fe ff13 	bl	8000d24 <__aeabi_fmul>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b40      	ldr	r3, [pc, #256]	; (8002004 <readAll+0x2c4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7fe fe01 	bl	8000b10 <__aeabi_fsub>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <readAll+0x2cc>)
 8001f14:	601a      	str	r2, [r3, #0]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <readAll+0x2b8>)
 8001f18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fead 	bl	8000c7c <__aeabi_i2f>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <readAll+0x2bc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f7fe fefa 	bl	8000d24 <__aeabi_fmul>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <readAll+0x2c0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f7fe fef2 	bl	8000d24 <__aeabi_fmul>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <readAll+0x2c4>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f7fe fde0 	bl	8000b10 <__aeabi_fsub>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <readAll+0x2d0>)
 8001f56:	601a      	str	r2, [r3, #0]
		mx *= magScale[0];
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <readAll+0x2d4>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <readAll+0x2c8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f7fe fede 	bl	8000d24 <__aeabi_fmul>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b26      	ldr	r3, [pc, #152]	; (8002008 <readAll+0x2c8>)
 8001f6e:	601a      	str	r2, [r3, #0]
		my *= magScale[1];
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <readAll+0x2d4>)
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <readAll+0x2cc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f7fe fed2 	bl	8000d24 <__aeabi_fmul>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <readAll+0x2cc>)
 8001f86:	601a      	str	r2, [r3, #0]
		mz *= magScale[2];
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <readAll+0x2d4>)
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <readAll+0x2d0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f7fe fec6 	bl	8000d24 <__aeabi_fmul>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <readAll+0x2d0>)
 8001f9e:	601a      	str	r2, [r3, #0]

		DataStruct->MagX = mx;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <readAll+0x2c8>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <readAll+0x2cc>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <readAll+0x2d0>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8001fb8:	f004 f9e2 	bl	8006380 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <readAll+0x2d8>)
 8001fc0:	601a      	str	r2, [r3, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <readAll+0x2d8>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <readAll+0x2dc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	e027      	b.n	8002020 <readAll+0x2e0>
 8001fd0:	20000430 	.word	0x20000430
 8001fd4:	2000046c 	.word	0x2000046c
 8001fd8:	20000468 	.word	0x20000468
 8001fdc:	200004b0 	.word	0x200004b0
 8001fe0:	20000454 	.word	0x20000454
 8001fe4:	20000458 	.word	0x20000458
 8001fe8:	20000488 	.word	0x20000488
 8001fec:	200004ac 	.word	0x200004ac
 8001ff0:	20000450 	.word	0x20000450
 8001ff4:	20000480 	.word	0x20000480
 8001ff8:	20000498 	.word	0x20000498
 8001ffc:	200004a8 	.word	0x200004a8
 8002000:	20000100 	.word	0x20000100
 8002004:	20000124 	.word	0x20000124
 8002008:	200004b4 	.word	0x200004b4
 800200c:	20000460 	.word	0x20000460
 8002010:	2000048c 	.word	0x2000048c
 8002014:	20000130 	.word	0x20000130
 8002018:	20000148 	.word	0x20000148
 800201c:	20000144 	.word	0x20000144
 8002020:	f7fe fe28 	bl	8000c74 <__aeabi_ui2f>
 8002024:	4603      	mov	r3, r0
 8002026:	499c      	ldr	r1, [pc, #624]	; (8002298 <readAll+0x558>)
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe ff2f 	bl	8000e8c <__aeabi_fdiv>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	4b9a      	ldr	r3, [pc, #616]	; (800229c <readAll+0x55c>)
 8002034:	601a      	str	r2, [r3, #0]
	lastUpdate = Now;
 8002036:	4b9a      	ldr	r3, [pc, #616]	; (80022a0 <readAll+0x560>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a9a      	ldr	r2, [pc, #616]	; (80022a4 <readAll+0x564>)
 800203c:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 800203e:	4b9a      	ldr	r3, [pc, #616]	; (80022a8 <readAll+0x568>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b96      	ldr	r3, [pc, #600]	; (800229c <readAll+0x55c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f7fe fd63 	bl	8000b14 <__addsf3>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b95      	ldr	r3, [pc, #596]	; (80022a8 <readAll+0x568>)
 8002054:	601a      	str	r2, [r3, #0]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 8002056:	4b95      	ldr	r3, [pc, #596]	; (80022ac <readAll+0x56c>)
 8002058:	681c      	ldr	r4, [r3, #0]
 800205a:	4b95      	ldr	r3, [pc, #596]	; (80022b0 <readAll+0x570>)
 800205c:	681d      	ldr	r5, [r3, #0]
 800205e:	4b95      	ldr	r3, [pc, #596]	; (80022b4 <readAll+0x574>)
 8002060:	681e      	ldr	r6, [r3, #0]
 8002062:	4b95      	ldr	r3, [pc, #596]	; (80022b8 <readAll+0x578>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f9d6 	bl	8000418 <__aeabi_f2d>
 800206c:	a388      	add	r3, pc, #544	; (adr r3, 8002290 <readAll+0x550>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fa29 	bl	80004c8 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b8e      	ldr	r3, [pc, #568]	; (80022bc <readAll+0x57c>)
 8002084:	f7fe fb4a 	bl	800071c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fcea 	bl	8000a68 <__aeabi_d2f>
 8002094:	4681      	mov	r9, r0
 8002096:	4b8a      	ldr	r3, [pc, #552]	; (80022c0 <readAll+0x580>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe f9bc 	bl	8000418 <__aeabi_f2d>
 80020a0:	a37b      	add	r3, pc, #492	; (adr r3, 8002290 <readAll+0x550>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe fa0f 	bl	80004c8 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b81      	ldr	r3, [pc, #516]	; (80022bc <readAll+0x57c>)
 80020b8:	f7fe fb30 	bl	800071c <__aeabi_ddiv>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fcd0 	bl	8000a68 <__aeabi_d2f>
 80020c8:	4680      	mov	r8, r0
 80020ca:	4b7e      	ldr	r3, [pc, #504]	; (80022c4 <readAll+0x584>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe f9a2 	bl	8000418 <__aeabi_f2d>
 80020d4:	a36e      	add	r3, pc, #440	; (adr r3, 8002290 <readAll+0x550>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe f9f5 	bl	80004c8 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b74      	ldr	r3, [pc, #464]	; (80022bc <readAll+0x57c>)
 80020ec:	f7fe fb16 	bl	800071c <__aeabi_ddiv>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fcb6 	bl	8000a68 <__aeabi_d2f>
 80020fc:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <readAll+0x588>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a72      	ldr	r2, [pc, #456]	; (80022cc <readAll+0x58c>)
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	4972      	ldr	r1, [pc, #456]	; (80022d0 <readAll+0x590>)
 8002106:	6809      	ldr	r1, [r1, #0]
 8002108:	9104      	str	r1, [sp, #16]
 800210a:	9203      	str	r2, [sp, #12]
 800210c:	9302      	str	r3, [sp, #8]
 800210e:	9001      	str	r0, [sp, #4]
 8002110:	f8cd 8000 	str.w	r8, [sp]
 8002114:	464b      	mov	r3, r9
 8002116:	4632      	mov	r2, r6
 8002118:	4629      	mov	r1, r5
 800211a:	4620      	mov	r0, r4
 800211c:	f001 ff44 	bl	8003fa8 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8002120:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <readAll+0x594>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4b6b      	ldr	r3, [pc, #428]	; (80022d4 <readAll+0x594>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4619      	mov	r1, r3
 800212a:	4610      	mov	r0, r2
 800212c:	f7fe fdfa 	bl	8000d24 <__aeabi_fmul>
 8002130:	4603      	mov	r3, r0
 8002132:	461c      	mov	r4, r3
 8002134:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <readAll+0x594>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <readAll+0x594>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f7fe fdf0 	bl	8000d24 <__aeabi_fmul>
 8002144:	4603      	mov	r3, r0
 8002146:	4619      	mov	r1, r3
 8002148:	4620      	mov	r0, r4
 800214a:	f7fe fce3 	bl	8000b14 <__addsf3>
 800214e:	4603      	mov	r3, r0
 8002150:	4619      	mov	r1, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fcde 	bl	8000b14 <__addsf3>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	4b5e      	ldr	r3, [pc, #376]	; (80022d8 <readAll+0x598>)
 800215e:	601a      	str	r2, [r3, #0]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8002160:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <readAll+0x594>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b5b      	ldr	r3, [pc, #364]	; (80022d4 <readAll+0x594>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f7fe fdda 	bl	8000d24 <__aeabi_fmul>
 8002170:	4603      	mov	r3, r0
 8002172:	461c      	mov	r4, r3
 8002174:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <readAll+0x594>)
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <readAll+0x594>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f7fe fdd0 	bl	8000d24 <__aeabi_fmul>
 8002184:	4603      	mov	r3, r0
 8002186:	4619      	mov	r1, r3
 8002188:	4620      	mov	r0, r4
 800218a:	f7fe fcc3 	bl	8000b14 <__addsf3>
 800218e:	4603      	mov	r3, r0
 8002190:	461c      	mov	r4, r3
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <readAll+0x594>)
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <readAll+0x594>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	4619      	mov	r1, r3
 800219c:	4610      	mov	r0, r2
 800219e:	f7fe fdc1 	bl	8000d24 <__aeabi_fmul>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4619      	mov	r1, r3
 80021a6:	4620      	mov	r0, r4
 80021a8:	f7fe fcb2 	bl	8000b10 <__aeabi_fsub>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461c      	mov	r4, r3
 80021b0:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <readAll+0x594>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <readAll+0x594>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f7fe fdb2 	bl	8000d24 <__aeabi_fmul>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7fe fca3 	bl	8000b10 <__aeabi_fsub>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <readAll+0x59c>)
 80021d0:	601a      	str	r2, [r3, #0]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 80021d2:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <readAll+0x594>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <readAll+0x594>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f7fe fda1 	bl	8000d24 <__aeabi_fmul>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461c      	mov	r4, r3
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <readAll+0x594>)
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <readAll+0x594>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7fe fd97 	bl	8000d24 <__aeabi_fmul>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4619      	mov	r1, r3
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7fe fc8a 	bl	8000b14 <__addsf3>
 8002200:	4603      	mov	r3, r0
 8002202:	4619      	mov	r1, r3
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fc85 	bl	8000b14 <__addsf3>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <readAll+0x5a0>)
 8002210:	601a      	str	r2, [r3, #0]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <readAll+0x594>)
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <readAll+0x594>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4619      	mov	r1, r3
 800221c:	4610      	mov	r0, r2
 800221e:	f7fe fd81 	bl	8000d24 <__aeabi_fmul>
 8002222:	4603      	mov	r3, r0
 8002224:	461c      	mov	r4, r3
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <readAll+0x594>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <readAll+0x594>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	4619      	mov	r1, r3
 8002230:	4610      	mov	r0, r2
 8002232:	f7fe fd77 	bl	8000d24 <__aeabi_fmul>
 8002236:	4603      	mov	r3, r0
 8002238:	4619      	mov	r1, r3
 800223a:	4620      	mov	r0, r4
 800223c:	f7fe fc68 	bl	8000b10 <__aeabi_fsub>
 8002240:	4603      	mov	r3, r0
 8002242:	4619      	mov	r1, r3
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fc65 	bl	8000b14 <__addsf3>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <readAll+0x5a4>)
 8002250:	601a      	str	r2, [r3, #0]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <readAll+0x594>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <readAll+0x594>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4619      	mov	r1, r3
 800225c:	4610      	mov	r0, r2
 800225e:	f7fe fd61 	bl	8000d24 <__aeabi_fmul>
 8002262:	4603      	mov	r3, r0
 8002264:	461c      	mov	r4, r3
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <readAll+0x594>)
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <readAll+0x594>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4619      	mov	r1, r3
 8002270:	4610      	mov	r0, r2
 8002272:	f7fe fd57 	bl	8000d24 <__aeabi_fmul>
 8002276:	4603      	mov	r3, r0
 8002278:	4619      	mov	r1, r3
 800227a:	4620      	mov	r0, r4
 800227c:	f7fe fc48 	bl	8000b10 <__aeabi_fsub>
 8002280:	4603      	mov	r3, r0
 8002282:	461c      	mov	r4, r3
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <readAll+0x594>)
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <readAll+0x594>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	e02c      	b.n	80022e8 <readAll+0x5a8>
 800228e:	bf00      	nop
 8002290:	35f80991 	.word	0x35f80991
 8002294:	40092492 	.word	0x40092492
 8002298:	447a0000 	.word	0x447a0000
 800229c:	2000013c 	.word	0x2000013c
 80022a0:	20000148 	.word	0x20000148
 80022a4:	20000144 	.word	0x20000144
 80022a8:	20000140 	.word	0x20000140
 80022ac:	20000468 	.word	0x20000468
 80022b0:	200004b0 	.word	0x200004b0
 80022b4:	20000454 	.word	0x20000454
 80022b8:	200004ac 	.word	0x200004ac
 80022bc:	40668000 	.word	0x40668000
 80022c0:	20000450 	.word	0x20000450
 80022c4:	20000480 	.word	0x20000480
 80022c8:	20000460 	.word	0x20000460
 80022cc:	200004b4 	.word	0x200004b4
 80022d0:	2000048c 	.word	0x2000048c
 80022d4:	20000010 	.word	0x20000010
 80022d8:	20000470 	.word	0x20000470
 80022dc:	20000474 	.word	0x20000474
 80022e0:	20000478 	.word	0x20000478
 80022e4:	2000047c 	.word	0x2000047c
 80022e8:	4619      	mov	r1, r3
 80022ea:	4610      	mov	r0, r2
 80022ec:	f7fe fd1a 	bl	8000d24 <__aeabi_fmul>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7fe fc0b 	bl	8000b10 <__aeabi_fsub>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461c      	mov	r4, r3
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <readAll+0x748>)
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	4b61      	ldr	r3, [pc, #388]	; (8002488 <readAll+0x748>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f7fe fd0b 	bl	8000d24 <__aeabi_fmul>
 800230e:	4603      	mov	r3, r0
 8002310:	4619      	mov	r1, r3
 8002312:	4620      	mov	r0, r4
 8002314:	f7fe fbfe 	bl	8000b14 <__addsf3>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	4b5b      	ldr	r3, [pc, #364]	; (800248c <readAll+0x74c>)
 800231e:	601a      	str	r2, [r3, #0]

	pitch = -asinf(a32);
 8002320:	4b5b      	ldr	r3, [pc, #364]	; (8002490 <readAll+0x750>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f008 ff9f 	bl	800b268 <asinf>
 800232a:	4603      	mov	r3, r0
 800232c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002330:	4a58      	ldr	r2, [pc, #352]	; (8002494 <readAll+0x754>)
 8002332:	6013      	str	r3, [r2, #0]
	roll  = atan2f(a31, a33);
 8002334:	4b58      	ldr	r3, [pc, #352]	; (8002498 <readAll+0x758>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b54      	ldr	r3, [pc, #336]	; (800248c <readAll+0x74c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f008 ffe0 	bl	800b304 <atan2f>
 8002344:	4602      	mov	r2, r0
 8002346:	4b55      	ldr	r3, [pc, #340]	; (800249c <readAll+0x75c>)
 8002348:	601a      	str	r2, [r3, #0]
	yaw   = atan2f(a12, a22);
 800234a:	4b55      	ldr	r3, [pc, #340]	; (80024a0 <readAll+0x760>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b55      	ldr	r3, [pc, #340]	; (80024a4 <readAll+0x764>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4619      	mov	r1, r3
 8002354:	4610      	mov	r0, r2
 8002356:	f008 ffd5 	bl	800b304 <atan2f>
 800235a:	4602      	mov	r2, r0
 800235c:	4b52      	ldr	r3, [pc, #328]	; (80024a8 <readAll+0x768>)
 800235e:	601a      	str	r2, [r3, #0]
	pitch *= 180.0f / PI;
 8002360:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <readAll+0x754>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f857 	bl	8000418 <__aeabi_f2d>
 800236a:	a345      	add	r3, pc, #276	; (adr r3, 8002480 <readAll+0x740>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f8aa 	bl	80004c8 <__aeabi_dmul>
 8002374:	4603      	mov	r3, r0
 8002376:	460c      	mov	r4, r1
 8002378:	4618      	mov	r0, r3
 800237a:	4621      	mov	r1, r4
 800237c:	f7fe fb74 	bl	8000a68 <__aeabi_d2f>
 8002380:	4602      	mov	r2, r0
 8002382:	4b44      	ldr	r3, [pc, #272]	; (8002494 <readAll+0x754>)
 8002384:	601a      	str	r2, [r3, #0]
	yaw   *= 180.0f / PI;
 8002386:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <readAll+0x768>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f844 	bl	8000418 <__aeabi_f2d>
 8002390:	a33b      	add	r3, pc, #236	; (adr r3, 8002480 <readAll+0x740>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fe f897 	bl	80004c8 <__aeabi_dmul>
 800239a:	4603      	mov	r3, r0
 800239c:	460c      	mov	r4, r1
 800239e:	4618      	mov	r0, r3
 80023a0:	4621      	mov	r1, r4
 80023a2:	f7fe fb61 	bl	8000a68 <__aeabi_d2f>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <readAll+0x768>)
 80023aa:	601a      	str	r2, [r3, #0]
	yaw   += 5.53f; // Declination
 80023ac:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <readAll+0x768>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	493e      	ldr	r1, [pc, #248]	; (80024ac <readAll+0x76c>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fbae 	bl	8000b14 <__addsf3>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <readAll+0x768>)
 80023be:	601a      	str	r2, [r3, #0]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <readAll+0x768>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f04f 0100 	mov.w	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fe49 	bl	8001060 <__aeabi_fcmplt>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <readAll+0x6a8>
 80023d4:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <readAll+0x768>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4935      	ldr	r1, [pc, #212]	; (80024b0 <readAll+0x770>)
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fb9a 	bl	8000b14 <__addsf3>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <readAll+0x768>)
 80023e6:	601a      	str	r2, [r3, #0]
	roll  *= 180.0f / PI;
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <readAll+0x75c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f813 	bl	8000418 <__aeabi_f2d>
 80023f2:	a323      	add	r3, pc, #140	; (adr r3, 8002480 <readAll+0x740>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fe f866 	bl	80004c8 <__aeabi_dmul>
 80023fc:	4603      	mov	r3, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	4618      	mov	r0, r3
 8002402:	4621      	mov	r1, r4
 8002404:	f7fe fb30 	bl	8000a68 <__aeabi_d2f>
 8002408:	4602      	mov	r2, r0
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <readAll+0x75c>)
 800240c:	601a      	str	r2, [r3, #0]
	lin_ax = ax + a31;
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <readAll+0x774>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <readAll+0x758>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f7fe fb7b 	bl	8000b14 <__addsf3>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <readAll+0x778>)
 8002424:	601a      	str	r2, [r3, #0]
	lin_ay = ay + a32;
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <readAll+0x77c>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <readAll+0x750>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	4610      	mov	r0, r2
 8002432:	f7fe fb6f 	bl	8000b14 <__addsf3>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <readAll+0x780>)
 800243c:	601a      	str	r2, [r3, #0]
	lin_az = az - a33;
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <readAll+0x784>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <readAll+0x74c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f7fe fb61 	bl	8000b10 <__aeabi_fsub>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <readAll+0x788>)
 8002454:	601a      	str	r2, [r3, #0]


	DataStruct->yaw = yaw;
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <readAll+0x768>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <readAll+0x754>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <readAll+0x75c>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
#if DEBUG_MPU
//	printf("Roll: %f		Pitch: %f		Yaz: %f\n",roll,pitch,yaw);
#endif
	sum = 0;
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <readAll+0x78c>)
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
	}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002480:	d0051a32 	.word	0xd0051a32
 8002484:	404ca2e8 	.word	0x404ca2e8
 8002488:	20000010 	.word	0x20000010
 800248c:	2000042c 	.word	0x2000042c
 8002490:	2000047c 	.word	0x2000047c
 8002494:	200004a0 	.word	0x200004a0
 8002498:	20000478 	.word	0x20000478
 800249c:	200004a4 	.word	0x200004a4
 80024a0:	20000470 	.word	0x20000470
 80024a4:	20000474 	.word	0x20000474
 80024a8:	20000494 	.word	0x20000494
 80024ac:	40b0f5c3 	.word	0x40b0f5c3
 80024b0:	43b40000 	.word	0x43b40000
 80024b4:	20000468 	.word	0x20000468
 80024b8:	20000484 	.word	0x20000484
 80024bc:	200004b0 	.word	0x200004b0
 80024c0:	20000464 	.word	0x20000464
 80024c4:	20000454 	.word	0x20000454
 80024c8:	20000490 	.word	0x20000490
 80024cc:	20000140 	.word	0x20000140

080024d0 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  switch (Mscale)
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <getMres+0x2c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <getMres+0x12>
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d004      	beq.n	80024ea <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 80024e0:	e007      	b.n	80024f2 <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <getMres+0x30>)
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <getMres+0x34>)
 80024e6:	601a      	str	r2, [r3, #0]
          break;
 80024e8:	e003      	b.n	80024f2 <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <getMres+0x30>)
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <getMres+0x38>)
 80024ee:	601a      	str	r2, [r3, #0]
          break;
 80024f0:	bf00      	nop
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	2000000a 	.word	0x2000000a
 8002500:	200004a8 	.word	0x200004a8
 8002504:	40bfebff 	.word	0x40bfebff
 8002508:	3fbfebff 	.word	0x3fbfebff

0800250c <getGres>:

void getGres() {
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  switch (Gscale)
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <getGres+0x4c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d81b      	bhi.n	8002550 <getGres+0x44>
 8002518:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <getGres+0x14>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	08002531 	.word	0x08002531
 8002524:	08002539 	.word	0x08002539
 8002528:	08002541 	.word	0x08002541
 800252c:	08002549 	.word	0x08002549
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <getGres+0x50>)
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <getGres+0x54>)
 8002534:	601a      	str	r2, [r3, #0]
          break;
 8002536:	e00b      	b.n	8002550 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <getGres+0x50>)
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <getGres+0x58>)
 800253c:	601a      	str	r2, [r3, #0]
          break;
 800253e:	e007      	b.n	8002550 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <getGres+0x50>)
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <getGres+0x5c>)
 8002544:	601a      	str	r2, [r3, #0]
          break;
 8002546:	e003      	b.n	8002550 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <getGres+0x50>)
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <getGres+0x60>)
 800254c:	601a      	str	r2, [r3, #0]
          break;
 800254e:	bf00      	nop
  }
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20000008 	.word	0x20000008
 800255c:	20000488 	.word	0x20000488
 8002560:	3bfa0000 	.word	0x3bfa0000
 8002564:	3c7a0000 	.word	0x3c7a0000
 8002568:	3cfa0000 	.word	0x3cfa0000
 800256c:	3d7a0000 	.word	0x3d7a0000

08002570 <getAres>:

void getAres() {
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  switch (Ascale)
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <getAres+0x54>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d81f      	bhi.n	80025bc <getAres+0x4c>
 800257c:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <getAres+0x14>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	08002595 	.word	0x08002595
 8002588:	0800259f 	.word	0x0800259f
 800258c:	080025a9 	.word	0x080025a9
 8002590:	080025b3 	.word	0x080025b3
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <getAres+0x58>)
 8002596:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800259a:	601a      	str	r2, [r3, #0]
          break;
 800259c:	e00e      	b.n	80025bc <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <getAres+0x58>)
 80025a0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80025a4:	601a      	str	r2, [r3, #0]
          break;
 80025a6:	e009      	b.n	80025bc <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <getAres+0x58>)
 80025aa:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80025ae:	601a      	str	r2, [r3, #0]
          break;
 80025b0:	e004      	b.n	80025bc <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <getAres+0x58>)
 80025b4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80025b8:	601a      	str	r2, [r3, #0]
          break;
 80025ba:	bf00      	nop
  }
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	20000009 	.word	0x20000009
 80025c8:	2000046c 	.word	0x2000046c

080025cc <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af04      	add	r7, sp, #16
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 80025d6:	2364      	movs	r3, #100	; 0x64
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2306      	movs	r3, #6
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2301      	movs	r3, #1
 80025e6:	223b      	movs	r2, #59	; 0x3b
 80025e8:	21d0      	movs	r1, #208	; 0xd0
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f004 fe5e 	bl	80072ac <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80025f0:	7a3b      	ldrb	r3, [r7, #8]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	b21a      	sxth	r2, r3
 80025f6:	7a7b      	ldrb	r3, [r7, #9]
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	b21a      	sxth	r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8002602:	7abb      	ldrb	r3, [r7, #10]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	b219      	sxth	r1, r3
 8002608:	7afb      	ldrb	r3, [r7, #11]
 800260a:	b21a      	sxth	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3302      	adds	r3, #2
 8002610:	430a      	orrs	r2, r1
 8002612:	b212      	sxth	r2, r2
 8002614:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8002616:	7b3b      	ldrb	r3, [r7, #12]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	b219      	sxth	r1, r3
 800261c:	7b7b      	ldrb	r3, [r7, #13]
 800261e:	b21a      	sxth	r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	3304      	adds	r3, #4
 8002624:	430a      	orrs	r2, r1
 8002626:	b212      	sxth	r2, r2
 8002628:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8002632:	b580      	push	{r7, lr}
 8002634:	b088      	sub	sp, #32
 8002636:	af04      	add	r7, sp, #16
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 800263c:	2364      	movs	r3, #100	; 0x64
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	2306      	movs	r3, #6
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2301      	movs	r3, #1
 800264c:	2243      	movs	r2, #67	; 0x43
 800264e:	21d0      	movs	r1, #208	; 0xd0
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f004 fe2b 	bl	80072ac <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8002656:	7a3b      	ldrb	r3, [r7, #8]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	b21a      	sxth	r2, r3
 800265c:	7a7b      	ldrb	r3, [r7, #9]
 800265e:	b21b      	sxth	r3, r3
 8002660:	4313      	orrs	r3, r2
 8002662:	b21a      	sxth	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8002668:	7abb      	ldrb	r3, [r7, #10]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	b219      	sxth	r1, r3
 800266e:	7afb      	ldrb	r3, [r7, #11]
 8002670:	b21a      	sxth	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	3302      	adds	r3, #2
 8002676:	430a      	orrs	r2, r1
 8002678:	b212      	sxth	r2, r2
 800267a:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 800267c:	7b3b      	ldrb	r3, [r7, #12]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	b219      	sxth	r1, r3
 8002682:	7b7b      	ldrb	r3, [r7, #13]
 8002684:	b21a      	sxth	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	3304      	adds	r3, #4
 800268a:	430a      	orrs	r2, r1
 800268c:	b212      	sxth	r2, r2
 800268e:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af04      	add	r7, sp, #16
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 80026a2:	2364      	movs	r3, #100	; 0x64
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	2301      	movs	r3, #1
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	f107 0316 	add.w	r3, r7, #22
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2301      	movs	r3, #1
 80026b2:	2202      	movs	r2, #2
 80026b4:	2118      	movs	r1, #24
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f004 fdf8 	bl	80072ac <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 80026bc:	7dbb      	ldrb	r3, [r7, #22]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d030      	beq.n	8002728 <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 80026c6:	2364      	movs	r3, #100	; 0x64
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	2307      	movs	r3, #7
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2301      	movs	r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	2118      	movs	r1, #24
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f004 fde6 	bl	80072ac <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 80026e0:	7cbb      	ldrb	r3, [r7, #18]
 80026e2:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11c      	bne.n	8002728 <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 80026ee:	7b7b      	ldrb	r3, [r7, #13]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	b21a      	sxth	r2, r3
 80026f4:	7b3b      	ldrb	r3, [r7, #12]
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	b219      	sxth	r1, r3
 8002706:	7bbb      	ldrb	r3, [r7, #14]
 8002708:	b21a      	sxth	r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	3302      	adds	r3, #2
 800270e:	430a      	orrs	r2, r1
 8002710:	b212      	sxth	r2, r2
 8002712:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 8002714:	7c7b      	ldrb	r3, [r7, #17]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	b219      	sxth	r1, r3
 800271a:	7c3b      	ldrb	r3, [r7, #16]
 800271c:	b21a      	sxth	r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	3304      	adds	r3, #4
 8002722:	430a      	orrs	r2, r1
 8002724:	b212      	sxth	r2, r2
 8002726:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 8002728:	bf00      	nop
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af04      	add	r7, sp, #16
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 800273e:	2364      	movs	r3, #100	; 0x64
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2301      	movs	r3, #1
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	f107 030f 	add.w	r3, r7, #15
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	220a      	movs	r2, #10
 8002750:	2118      	movs	r1, #24
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f004 fcb0 	bl	80070b8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8002758:	2064      	movs	r0, #100	; 0x64
 800275a:	f003 fe1b 	bl	8006394 <HAL_Delay>

  writeData = 0x0F;
 800275e:	230f      	movs	r3, #15
 8002760:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 8002762:	2364      	movs	r3, #100	; 0x64
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	2301      	movs	r3, #1
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	f107 030f 	add.w	r3, r7, #15
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2301      	movs	r3, #1
 8002772:	220a      	movs	r2, #10
 8002774:	2118      	movs	r1, #24
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f004 fc9e 	bl	80070b8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 800277c:	2064      	movs	r0, #100	; 0x64
 800277e:	f003 fe09 	bl	8006394 <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 8002782:	2364      	movs	r3, #100	; 0x64
 8002784:	9302      	str	r3, [sp, #8]
 8002786:	2303      	movs	r3, #3
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2301      	movs	r3, #1
 8002792:	2210      	movs	r2, #16
 8002794:	2118      	movs	r1, #24
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f004 fd88 	bl	80072ac <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 800279c:	7b3b      	ldrb	r3, [r7, #12]
 800279e:	3b80      	subs	r3, #128	; 0x80
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fa6b 	bl	8000c7c <__aeabi_i2f>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fe35 	bl	8000418 <__aeabi_f2d>
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <initAK8963+0x19c>)
 80027b4:	f7fd ffb2 	bl	800071c <__aeabi_ddiv>
 80027b8:	4603      	mov	r3, r0
 80027ba:	460c      	mov	r4, r1
 80027bc:	4618      	mov	r0, r3
 80027be:	4621      	mov	r1, r4
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <initAK8963+0x1a0>)
 80027c6:	f7fd fcc9 	bl	800015c <__adddf3>
 80027ca:	4603      	mov	r3, r0
 80027cc:	460c      	mov	r4, r1
 80027ce:	4618      	mov	r0, r3
 80027d0:	4621      	mov	r1, r4
 80027d2:	f7fe f949 	bl	8000a68 <__aeabi_d2f>
 80027d6:	4602      	mov	r2, r0
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 80027dc:	7b7b      	ldrb	r3, [r7, #13]
 80027de:	3b80      	subs	r3, #128	; 0x80
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fa4b 	bl	8000c7c <__aeabi_i2f>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe15 	bl	8000418 <__aeabi_f2d>
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b36      	ldr	r3, [pc, #216]	; (80028cc <initAK8963+0x19c>)
 80027f4:	f7fd ff92 	bl	800071c <__aeabi_ddiv>
 80027f8:	4603      	mov	r3, r0
 80027fa:	460c      	mov	r4, r1
 80027fc:	4618      	mov	r0, r3
 80027fe:	4621      	mov	r1, r4
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <initAK8963+0x1a0>)
 8002806:	f7fd fca9 	bl	800015c <__adddf3>
 800280a:	4603      	mov	r3, r0
 800280c:	460c      	mov	r4, r1
 800280e:	4619      	mov	r1, r3
 8002810:	4622      	mov	r2, r4
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	1d1c      	adds	r4, r3, #4
 8002816:	4608      	mov	r0, r1
 8002818:	4611      	mov	r1, r2
 800281a:	f7fe f925 	bl	8000a68 <__aeabi_d2f>
 800281e:	4603      	mov	r3, r0
 8002820:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 8002822:	7bbb      	ldrb	r3, [r7, #14]
 8002824:	3b80      	subs	r3, #128	; 0x80
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fa28 	bl	8000c7c <__aeabi_i2f>
 800282c:	4603      	mov	r3, r0
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fdf2 	bl	8000418 <__aeabi_f2d>
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <initAK8963+0x19c>)
 800283a:	f7fd ff6f 	bl	800071c <__aeabi_ddiv>
 800283e:	4603      	mov	r3, r0
 8002840:	460c      	mov	r4, r1
 8002842:	4618      	mov	r0, r3
 8002844:	4621      	mov	r1, r4
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <initAK8963+0x1a0>)
 800284c:	f7fd fc86 	bl	800015c <__adddf3>
 8002850:	4603      	mov	r3, r0
 8002852:	460c      	mov	r4, r1
 8002854:	4619      	mov	r1, r3
 8002856:	4622      	mov	r2, r4
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f103 0408 	add.w	r4, r3, #8
 800285e:	4608      	mov	r0, r1
 8002860:	4611      	mov	r1, r2
 8002862:	f7fe f901 	bl	8000a68 <__aeabi_d2f>
 8002866:	4603      	mov	r3, r0
 8002868:	6023      	str	r3, [r4, #0]
	printf("Mag cal off Y: %f\r\n", destination[1]);
	printf("Mag cal off Z: %f\r\n", destination[2]);
	printf("-------------------------\r\n");
#endif

  writeData = 0x00;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 800286e:	2364      	movs	r3, #100	; 0x64
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	2301      	movs	r3, #1
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	f107 030f 	add.w	r3, r7, #15
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	220a      	movs	r2, #10
 8002880:	2118      	movs	r1, #24
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f004 fc18 	bl	80070b8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8002888:	2064      	movs	r0, #100	; 0x64
 800288a:	f003 fd83 	bl	8006394 <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <initAK8963+0x1a4>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	b25a      	sxtb	r2, r3
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <initAK8963+0x1a8>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b25b      	sxtb	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 80028a4:	2364      	movs	r3, #100	; 0x64
 80028a6:	9302      	str	r3, [sp, #8]
 80028a8:	2301      	movs	r3, #1
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	f107 030f 	add.w	r3, r7, #15
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2301      	movs	r3, #1
 80028b4:	220a      	movs	r2, #10
 80028b6:	2118      	movs	r1, #24
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f004 fbfd 	bl	80070b8 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 80028be:	200a      	movs	r0, #10
 80028c0:	f003 fd68 	bl	8006394 <HAL_Delay>

#if(DEBUG_MPU)
  printf("MAG Init Succesful! \r\n");
#endif
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd90      	pop	{r4, r7, pc}
 80028cc:	40700000 	.word	0x40700000
 80028d0:	3ff00000 	.word	0x3ff00000
 80028d4:	2000000a 	.word	0x2000000a
 80028d8:	2000000b 	.word	0x2000000b

080028dc <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b095      	sub	sp, #84	; 0x54
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 80028f4:	2300      	movs	r3, #0
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028f8:	2300      	movs	r3, #0
 80028fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028fc:	2300      	movs	r3, #0
 80028fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002900:	2300      	movs	r3, #0
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002904:	2300      	movs	r3, #0
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
 8002908:	2300      	movs	r3, #0
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 800290c:	4aa6      	ldr	r2, [pc, #664]	; (8002ba8 <calibrateMag+0x2cc>)
 800290e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002916:	6018      	str	r0, [r3, #0]
 8002918:	3304      	adds	r3, #4
 800291a:	8019      	strh	r1, [r3, #0]
 800291c:	4aa3      	ldr	r2, [pc, #652]	; (8002bac <calibrateMag+0x2d0>)
 800291e:	f107 031c 	add.w	r3, r7, #28
 8002922:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002926:	6018      	str	r0, [r3, #0]
 8002928:	3304      	adds	r3, #4
 800292a:	8019      	strh	r1, [r3, #0]
 800292c:	2300      	movs	r3, #0
 800292e:	82bb      	strh	r3, [r7, #20]
 8002930:	2300      	movs	r3, #0
 8002932:	82fb      	strh	r3, [r7, #22]
 8002934:	2300      	movs	r3, #0
 8002936:	833b      	strh	r3, [r7, #24]

#if (DEBUG_MPU)
  printf("Mag Calibration: Wave device in a figure eight until done!\r\n");
#endif
  HAL_Delay(4000);
 8002938:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800293c:	f003 fd2a 	bl	8006394 <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8002940:	4b9b      	ldr	r3, [pc, #620]	; (8002bb0 <calibrateMag+0x2d4>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d102      	bne.n	800294e <calibrateMag+0x72>
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 800294e:	4b98      	ldr	r3, [pc, #608]	; (8002bb0 <calibrateMag+0x2d4>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b06      	cmp	r3, #6
 8002954:	d103      	bne.n	800295e <calibrateMag+0x82>
 8002956:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800295a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 800295e:	2300      	movs	r3, #0
 8002960:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002964:	e05d      	b.n	8002a22 <calibrateMag+0x146>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff fe93 	bl	8002698 <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 8002972:	2300      	movs	r3, #0
 8002974:	64bb      	str	r3, [r7, #72]	; 0x48
 8002976:	e03e      	b.n	80029f6 <calibrateMag+0x11a>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8002978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002980:	4413      	add	r3, r2
 8002982:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8002986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800298e:	440b      	add	r3, r1
 8002990:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002994:	429a      	cmp	r2, r3
 8002996:	dd0d      	ble.n	80029b4 <calibrateMag+0xd8>
 8002998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029a0:	4413      	add	r3, r2
 80029a2:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80029a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80029ae:	440b      	add	r3, r1
 80029b0:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80029b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029bc:	4413      	add	r3, r2
 80029be:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80029c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80029ca:	440b      	add	r3, r1
 80029cc:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	da0d      	bge.n	80029f0 <calibrateMag+0x114>
 80029d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029dc:	4413      	add	r3, r2
 80029de:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80029e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80029ea:	440b      	add	r3, r1
 80029ec:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 80029f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f2:	3301      	adds	r3, #1
 80029f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80029f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	ddbd      	ble.n	8002978 <calibrateMag+0x9c>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 80029fc:	4b6c      	ldr	r3, [pc, #432]	; (8002bb0 <calibrateMag+0x2d4>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d102      	bne.n	8002a0a <calibrateMag+0x12e>
 8002a04:	2087      	movs	r0, #135	; 0x87
 8002a06:	f003 fcc5 	bl	8006394 <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 8002a0a:	4b69      	ldr	r3, [pc, #420]	; (8002bb0 <calibrateMag+0x2d4>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d102      	bne.n	8002a18 <calibrateMag+0x13c>
 8002a12:	200c      	movs	r0, #12
 8002a14:	f003 fcbe 	bl	8006394 <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 8002a18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002a26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d39b      	bcc.n	8002966 <calibrateMag+0x8a>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8002a2e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002a32:	461a      	mov	r2, r3
 8002a34:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a38:	4413      	add	r3, r2
 8002a3a:	0fda      	lsrs	r2, r3, #31
 8002a3c:	4413      	add	r3, r2
 8002a3e:	105b      	asrs	r3, r3, #1
 8002a40:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8002a42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002a46:	461a      	mov	r2, r3
 8002a48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	0fda      	lsrs	r2, r3, #31
 8002a50:	4413      	add	r3, r2
 8002a52:	105b      	asrs	r3, r3, #1
 8002a54:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8002a56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002a60:	4413      	add	r3, r2
 8002a62:	0fda      	lsrs	r2, r3, #31
 8002a64:	4413      	add	r3, r2
 8002a66:	105b      	asrs	r3, r3, #1
 8002a68:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe f905 	bl	8000c7c <__aeabi_i2f>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <calibrateMag+0x2d8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f7fe f952 	bl	8000d24 <__aeabi_fmul>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b4c      	ldr	r3, [pc, #304]	; (8002bb8 <calibrateMag+0x2dc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f7fe f94a 	bl	8000d24 <__aeabi_fmul>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8002a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe f8ee 	bl	8000c7c <__aeabi_i2f>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <calibrateMag+0x2d8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7fe f93b 	bl	8000d24 <__aeabi_fmul>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <calibrateMag+0x2dc>)
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1d1c      	adds	r4, r3, #4
 8002aba:	4611      	mov	r1, r2
 8002abc:	f7fe f932 	bl	8000d24 <__aeabi_fmul>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8002ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe f8d8 	bl	8000c7c <__aeabi_i2f>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <calibrateMag+0x2d8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f7fe f925 	bl	8000d24 <__aeabi_fmul>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4618      	mov	r0, r3
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <calibrateMag+0x2dc>)
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f103 0408 	add.w	r4, r3, #8
 8002ae8:	4611      	mov	r1, r2
 8002aea:	f7fe f91b 	bl	8000d24 <__aeabi_fmul>
 8002aee:	4603      	mov	r3, r0
 8002af0:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8002af2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002af6:	461a      	mov	r2, r3
 8002af8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	0fda      	lsrs	r2, r3, #31
 8002b00:	4413      	add	r3, r2
 8002b02:	105b      	asrs	r3, r3, #1
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8002b06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	0fda      	lsrs	r2, r3, #31
 8002b14:	4413      	add	r3, r2
 8002b16:	105b      	asrs	r3, r3, #1
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8002b1a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	0fda      	lsrs	r2, r3, #31
 8002b28:	4413      	add	r3, r2
 8002b2a:	105b      	asrs	r3, r3, #1
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8002b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	441a      	add	r2, r3
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	4413      	add	r3, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe f89f 	bl	8000c7c <__aeabi_i2f>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	647b      	str	r3, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 8002b42:	491e      	ldr	r1, [pc, #120]	; (8002bbc <calibrateMag+0x2e0>)
 8002b44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b46:	f7fe f9a1 	bl	8000e8c <__aeabi_fdiv>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	647b      	str	r3, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f893 	bl	8000c7c <__aeabi_i2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b5c:	f7fe f996 	bl	8000e8c <__aeabi_fdiv>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe f886 	bl	8000c7c <__aeabi_i2f>
 8002b70:	4602      	mov	r2, r0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	1d1c      	adds	r4, r3, #4
 8002b76:	4611      	mov	r1, r2
 8002b78:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b7a:	f7fe f987 	bl	8000e8c <__aeabi_fdiv>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f879 	bl	8000c7c <__aeabi_i2f>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f103 0408 	add.w	r4, r3, #8
 8002b92:	4611      	mov	r1, r2
 8002b94:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b96:	f7fe f979 	bl	8000e8c <__aeabi_fdiv>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6023      	str	r3, [r4, #0]

#if (DEBUG_MPU)
    printf("Mag Calibration done!\r\n");
#endif
}
 8002b9e:	bf00      	nop
 8002ba0:	3754      	adds	r7, #84	; 0x54
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	0800c7c0 	.word	0x0800c7c0
 8002bac:	0800c7c8 	.word	0x0800c7c8
 8002bb0:	2000000b 	.word	0x2000000b
 8002bb4:	200004a8 	.word	0x200004a8
 8002bb8:	20000100 	.word	0x20000100
 8002bbc:	40400000 	.word	0x40400000

08002bc0 <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af04      	add	r7, sp, #16
 8002bc6:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8002bcc:	2364      	movs	r3, #100	; 0x64
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	f107 030e 	add.w	r3, r7, #14
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2301      	movs	r3, #1
 8002bdc:	226b      	movs	r2, #107	; 0x6b
 8002bde:	21d0      	movs	r1, #208	; 0xd0
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f004 fa69 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002be6:	2064      	movs	r0, #100	; 0x64
 8002be8:	f003 fbd4 	bl	8006394 <HAL_Delay>

	writeData = 0x01;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8002bf0:	2364      	movs	r3, #100	; 0x64
 8002bf2:	9302      	str	r3, [sp, #8]
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	f107 030e 	add.w	r3, r7, #14
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	226b      	movs	r2, #107	; 0x6b
 8002c02:	21d0      	movs	r1, #208	; 0xd0
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f004 fa57 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002c0a:	2064      	movs	r0, #100	; 0x64
 8002c0c:	f003 fbc2 	bl	8006394 <HAL_Delay>

	writeData = 0x03;
 8002c10:	2303      	movs	r3, #3
 8002c12:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8002c14:	2364      	movs	r3, #100	; 0x64
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	f107 030e 	add.w	r3, r7, #14
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2301      	movs	r3, #1
 8002c24:	221a      	movs	r2, #26
 8002c26:	21d0      	movs	r1, #208	; 0xd0
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f004 fa45 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002c2e:	2064      	movs	r0, #100	; 0x64
 8002c30:	f003 fbb0 	bl	8006394 <HAL_Delay>

	writeData = 0x04;
 8002c34:	2304      	movs	r3, #4
 8002c36:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8002c38:	2364      	movs	r3, #100	; 0x64
 8002c3a:	9302      	str	r3, [sp, #8]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	f107 030e 	add.w	r3, r7, #14
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2301      	movs	r3, #1
 8002c48:	2219      	movs	r2, #25
 8002c4a:	21d0      	movs	r1, #208	; 0xd0
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f004 fa33 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002c52:	2064      	movs	r0, #100	; 0x64
 8002c54:	f003 fb9e 	bl	8006394 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8002c58:	2364      	movs	r3, #100	; 0x64
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	f107 030f 	add.w	r3, r7, #15
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2301      	movs	r3, #1
 8002c68:	221b      	movs	r2, #27
 8002c6a:	21d0      	movs	r1, #208	; 0xd0
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f004 fb1d 	bl	80072ac <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	f023 0303 	bic.w	r3, r3, #3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	f023 0318 	bic.w	r3, r3, #24
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <initMPU9250+0x1bc>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	b25a      	sxtb	r2, r3
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	4313      	orrs	r3, r2
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8002c9a:	2064      	movs	r0, #100	; 0x64
 8002c9c:	f003 fb7a 	bl	8006394 <HAL_Delay>

	writeData = readData;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8002ca4:	2364      	movs	r3, #100	; 0x64
 8002ca6:	9302      	str	r3, [sp, #8]
 8002ca8:	2301      	movs	r3, #1
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	f107 030e 	add.w	r3, r7, #14
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	221b      	movs	r2, #27
 8002cb6:	21d0      	movs	r1, #208	; 0xd0
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f004 f9fd 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002cbe:	2064      	movs	r0, #100	; 0x64
 8002cc0:	f003 fb68 	bl	8006394 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8002cc4:	2364      	movs	r3, #100	; 0x64
 8002cc6:	9302      	str	r3, [sp, #8]
 8002cc8:	2301      	movs	r3, #1
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	f107 030f 	add.w	r3, r7, #15
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	221c      	movs	r2, #28
 8002cd6:	21d0      	movs	r1, #208	; 0xd0
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f004 fae7 	bl	80072ac <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	f023 0318 	bic.w	r3, r3, #24
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <initMPU9250+0x1c0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	b25a      	sxtb	r2, r3
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	b25b      	sxtb	r3, r3
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	b25b      	sxtb	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8002d00:	2364      	movs	r3, #100	; 0x64
 8002d02:	9302      	str	r3, [sp, #8]
 8002d04:	2301      	movs	r3, #1
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	f107 030e 	add.w	r3, r7, #14
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2301      	movs	r3, #1
 8002d10:	221c      	movs	r2, #28
 8002d12:	21d0      	movs	r1, #208	; 0xd0
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f004 f9cf 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002d1a:	2064      	movs	r0, #100	; 0x64
 8002d1c:	f003 fb3a 	bl	8006394 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8002d20:	2364      	movs	r3, #100	; 0x64
 8002d22:	9302      	str	r3, [sp, #8]
 8002d24:	2301      	movs	r3, #1
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	f107 030f 	add.w	r3, r7, #15
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2301      	movs	r3, #1
 8002d30:	221d      	movs	r2, #29
 8002d32:	21d0      	movs	r1, #208	; 0xd0
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f004 fab9 	bl	80072ac <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	f023 030f 	bic.w	r3, r3, #15
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	f043 0303 	orr.w	r3, r3, #3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8002d52:	2364      	movs	r3, #100	; 0x64
 8002d54:	9302      	str	r3, [sp, #8]
 8002d56:	2301      	movs	r3, #1
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	f107 030e 	add.w	r3, r7, #14
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2301      	movs	r3, #1
 8002d62:	221d      	movs	r2, #29
 8002d64:	21d0      	movs	r1, #208	; 0xd0
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f004 f9a6 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002d6c:	2064      	movs	r0, #100	; 0x64
 8002d6e:	f003 fb11 	bl	8006394 <HAL_Delay>

#if(DEBUG_MPU)
	printf("MPU Init Succesful! \r\n");
#endif
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000008 	.word	0x20000008
 8002d80:	20000009 	.word	0x20000009

08002d84 <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	b09e      	sub	sp, #120	; 0x78
 8002d88:	af04      	add	r7, sp, #16
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8002d90:	2300      	movs	r3, #0
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d94:	2300      	movs	r3, #0
 8002d96:	643b      	str	r3, [r7, #64]	; 0x40
 8002d98:	2300      	movs	r3, #0
 8002d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8002da0:	2300      	movs	r3, #0
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
 8002da4:	2300      	movs	r3, #0
 8002da6:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 8002dae:	2364      	movs	r3, #100	; 0x64
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	2301      	movs	r3, #1
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	226b      	movs	r2, #107	; 0x6b
 8002dc0:	21d0      	movs	r1, #208	; 0xd0
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f004 f978 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002dc8:	2064      	movs	r0, #100	; 0x64
 8002dca:	f003 fae3 	bl	8006394 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8002dd4:	2364      	movs	r3, #100	; 0x64
 8002dd6:	9302      	str	r3, [sp, #8]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2301      	movs	r3, #1
 8002de4:	226b      	movs	r2, #107	; 0x6b
 8002de6:	21d0      	movs	r1, #208	; 0xd0
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f004 f965 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8002df4:	2364      	movs	r3, #100	; 0x64
 8002df6:	9302      	str	r3, [sp, #8]
 8002df8:	2301      	movs	r3, #1
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2301      	movs	r3, #1
 8002e04:	226c      	movs	r2, #108	; 0x6c
 8002e06:	21d0      	movs	r1, #208	; 0xd0
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f004 f955 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002e0e:	20c8      	movs	r0, #200	; 0xc8
 8002e10:	f003 fac0 	bl	8006394 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8002e1a:	2364      	movs	r3, #100	; 0x64
 8002e1c:	9302      	str	r3, [sp, #8]
 8002e1e:	2301      	movs	r3, #1
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	2238      	movs	r2, #56	; 0x38
 8002e2c:	21d0      	movs	r1, #208	; 0xd0
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f004 f942 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8002e3a:	2364      	movs	r3, #100	; 0x64
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	2301      	movs	r3, #1
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	2223      	movs	r2, #35	; 0x23
 8002e4c:	21d0      	movs	r1, #208	; 0xd0
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f004 f932 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8002e5a:	2364      	movs	r3, #100	; 0x64
 8002e5c:	9302      	str	r3, [sp, #8]
 8002e5e:	2301      	movs	r3, #1
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2301      	movs	r3, #1
 8002e6a:	226b      	movs	r2, #107	; 0x6b
 8002e6c:	21d0      	movs	r1, #208	; 0xd0
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f004 f922 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8002e7a:	2364      	movs	r3, #100	; 0x64
 8002e7c:	9302      	str	r3, [sp, #8]
 8002e7e:	2301      	movs	r3, #1
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2301      	movs	r3, #1
 8002e8a:	2224      	movs	r2, #36	; 0x24
 8002e8c:	21d0      	movs	r1, #208	; 0xd0
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f004 f912 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8002e9a:	2364      	movs	r3, #100	; 0x64
 8002e9c:	9302      	str	r3, [sp, #8]
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	226a      	movs	r2, #106	; 0x6a
 8002eac:	21d0      	movs	r1, #208	; 0xd0
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f004 f902 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8002eba:	2364      	movs	r3, #100	; 0x64
 8002ebc:	9302      	str	r3, [sp, #8]
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	226a      	movs	r2, #106	; 0x6a
 8002ecc:	21d0      	movs	r1, #208	; 0xd0
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f004 f8f2 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8002ed4:	200f      	movs	r0, #15
 8002ed6:	f003 fa5d 	bl	8006394 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8002ee0:	2364      	movs	r3, #100	; 0x64
 8002ee2:	9302      	str	r3, [sp, #8]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	221a      	movs	r2, #26
 8002ef2:	21d0      	movs	r1, #208	; 0xd0
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f004 f8df 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8002f00:	2364      	movs	r3, #100	; 0x64
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	2301      	movs	r3, #1
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	2301      	movs	r3, #1
 8002f10:	2219      	movs	r2, #25
 8002f12:	21d0      	movs	r1, #208	; 0xd0
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f004 f8cf 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8002f20:	2364      	movs	r3, #100	; 0x64
 8002f22:	9302      	str	r3, [sp, #8]
 8002f24:	2301      	movs	r3, #1
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2301      	movs	r3, #1
 8002f30:	221b      	movs	r2, #27
 8002f32:	21d0      	movs	r1, #208	; 0xd0
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f004 f8bf 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8002f40:	2364      	movs	r3, #100	; 0x64
 8002f42:	9302      	str	r3, [sp, #8]
 8002f44:	2301      	movs	r3, #1
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2301      	movs	r3, #1
 8002f50:	221c      	movs	r2, #28
 8002f52:	21d0      	movs	r1, #208	; 0xd0
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f004 f8af 	bl	80070b8 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8002f5a:	2383      	movs	r3, #131	; 0x83
 8002f5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8002f60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f64:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8002f68:	2340      	movs	r3, #64	; 0x40
 8002f6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8002f6e:	2364      	movs	r3, #100	; 0x64
 8002f70:	9302      	str	r3, [sp, #8]
 8002f72:	2301      	movs	r3, #1
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	226a      	movs	r2, #106	; 0x6a
 8002f80:	21d0      	movs	r1, #208	; 0xd0
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f004 f898 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8002f88:	2378      	movs	r3, #120	; 0x78
 8002f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8002f8e:	2364      	movs	r3, #100	; 0x64
 8002f90:	9302      	str	r3, [sp, #8]
 8002f92:	2301      	movs	r3, #1
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	2223      	movs	r2, #35	; 0x23
 8002fa0:	21d0      	movs	r1, #208	; 0xd0
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f004 f888 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8002fa8:	2028      	movs	r0, #40	; 0x28
 8002faa:	f003 f9f3 	bl	8006394 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8002fb4:	2364      	movs	r3, #100	; 0x64
 8002fb6:	9302      	str	r3, [sp, #8]
 8002fb8:	2301      	movs	r3, #1
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	2223      	movs	r2, #35	; 0x23
 8002fc6:	21d0      	movs	r1, #208	; 0xd0
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f004 f875 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8002fce:	2364      	movs	r3, #100	; 0x64
 8002fd0:	9302      	str	r3, [sp, #8]
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2301      	movs	r3, #1
 8002fde:	2272      	movs	r2, #114	; 0x72
 8002fe0:	21d0      	movs	r1, #208	; 0xd0
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f004 f962 	bl	80072ac <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8002fe8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	b21a      	sxth	r2, r3
 8002ff0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002ff4:	b21b      	sxth	r3, r3
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8002ffe:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003002:	4a5a      	ldr	r2, [pc, #360]	; (800316c <calibrateMPU9250+0x3e8>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	08db      	lsrs	r3, r3, #3
 800300a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 800300e:	2300      	movs	r3, #0
 8003010:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003014:	e077      	b.n	8003106 <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8003016:	2300      	movs	r3, #0
 8003018:	833b      	strh	r3, [r7, #24]
 800301a:	2300      	movs	r3, #0
 800301c:	837b      	strh	r3, [r7, #26]
 800301e:	2300      	movs	r3, #0
 8003020:	83bb      	strh	r3, [r7, #28]
 8003022:	2300      	movs	r3, #0
 8003024:	823b      	strh	r3, [r7, #16]
 8003026:	2300      	movs	r3, #0
 8003028:	827b      	strh	r3, [r7, #18]
 800302a:	2300      	movs	r3, #0
 800302c:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 800302e:	2364      	movs	r3, #100	; 0x64
 8003030:	9302      	str	r3, [sp, #8]
 8003032:	230c      	movs	r3, #12
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2301      	movs	r3, #1
 800303e:	2274      	movs	r2, #116	; 0x74
 8003040:	21d0      	movs	r1, #208	; 0xd0
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f004 f932 	bl	80072ac <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8003048:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	b21a      	sxth	r2, r3
 8003050:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003054:	b21b      	sxth	r3, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	b21b      	sxth	r3, r3
 800305a:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 800305c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	b21a      	sxth	r2, r3
 8003064:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003068:	b21b      	sxth	r3, r3
 800306a:	4313      	orrs	r3, r2
 800306c:	b21b      	sxth	r3, r3
 800306e:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8003070:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	b21a      	sxth	r2, r3
 8003078:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800307c:	b21b      	sxth	r3, r3
 800307e:	4313      	orrs	r3, r2
 8003080:	b21b      	sxth	r3, r3
 8003082:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8003084:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	b21a      	sxth	r2, r3
 800308c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003090:	b21b      	sxth	r3, r3
 8003092:	4313      	orrs	r3, r2
 8003094:	b21b      	sxth	r3, r3
 8003096:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8003098:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	b21a      	sxth	r2, r3
 80030a0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	b21b      	sxth	r3, r3
 80030aa:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 80030ac:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	b21a      	sxth	r2, r3
 80030b4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80030b8:	b21b      	sxth	r3, r3
 80030ba:	4313      	orrs	r3, r2
 80030bc:	b21b      	sxth	r3, r3
 80030be:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80030c6:	4413      	add	r3, r2
 80030c8:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 80030ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030cc:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80030d0:	4413      	add	r3, r2
 80030d2:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 80030d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80030da:	4413      	add	r3, r2
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 80030de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80030e4:	4413      	add	r3, r2
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 80030e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80030ee:	4413      	add	r3, r2
 80030f0:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 80030f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80030f8:	4413      	add	r3, r2
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 80030fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003100:	3301      	adds	r3, #1
 8003102:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003106:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800310a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800310e:	429a      	cmp	r2, r3
 8003110:	d381      	bcc.n	8003016 <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003118:	fb92 f3f3 	sdiv	r3, r2, r3
 800311c:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 800311e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003120:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003124:	fb92 f3f3 	sdiv	r3, r2, r3
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 800312a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800312c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003130:	fb92 f3f3 	sdiv	r3, r2, r3
 8003134:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8003136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003138:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800313c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003140:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8003142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003144:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003148:	fb92 f3f3 	sdiv	r3, r2, r3
 800314c:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 800314e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003150:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003154:	fb92 f3f3 	sdiv	r3, r2, r3
 8003158:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	2b00      	cmp	r3, #0
 800315e:	dd07      	ble.n	8003170 <calibrateMPU9250+0x3ec>
 8003160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003162:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	63bb      	str	r3, [r7, #56]	; 0x38
 800316a:	e006      	b.n	800317a <calibrateMPU9250+0x3f6>
 800316c:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8003170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003172:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003176:	4413      	add	r3, r2
 8003178:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800317a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317c:	425b      	negs	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	da00      	bge.n	8003184 <calibrateMPU9250+0x400>
 8003182:	3303      	adds	r3, #3
 8003184:	109b      	asrs	r3, r3, #2
 8003186:	121b      	asrs	r3, r3, #8
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800318e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003190:	425b      	negs	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	da00      	bge.n	8003198 <calibrateMPU9250+0x414>
 8003196:	3303      	adds	r3, #3
 8003198:	109b      	asrs	r3, r3, #2
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80031a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a2:	425b      	negs	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	da00      	bge.n	80031aa <calibrateMPU9250+0x426>
 80031a8:	3303      	adds	r3, #3
 80031aa:	109b      	asrs	r3, r3, #2
 80031ac:	121b      	asrs	r3, r3, #8
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 80031b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b6:	425b      	negs	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da00      	bge.n	80031be <calibrateMPU9250+0x43a>
 80031bc:	3303      	adds	r3, #3
 80031be:	109b      	asrs	r3, r3, #2
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80031c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c8:	425b      	negs	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	da00      	bge.n	80031d0 <calibrateMPU9250+0x44c>
 80031ce:	3303      	adds	r3, #3
 80031d0:	109b      	asrs	r3, r3, #2
 80031d2:	121b      	asrs	r3, r3, #8
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 80031da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031dc:	425b      	negs	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	da00      	bge.n	80031e4 <calibrateMPU9250+0x460>
 80031e2:	3303      	adds	r3, #3
 80031e4:	109b      	asrs	r3, r3, #2
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 80031ec:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80031f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80031f4:	2364      	movs	r3, #100	; 0x64
 80031f6:	9302      	str	r3, [sp, #8]
 80031f8:	2301      	movs	r3, #1
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2301      	movs	r3, #1
 8003204:	2213      	movs	r2, #19
 8003206:	21d0      	movs	r1, #208	; 0xd0
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f003 ff55 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 800320e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8003216:	2364      	movs	r3, #100	; 0x64
 8003218:	9302      	str	r3, [sp, #8]
 800321a:	2301      	movs	r3, #1
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2301      	movs	r3, #1
 8003226:	2214      	movs	r2, #20
 8003228:	21d0      	movs	r1, #208	; 0xd0
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f003 ff44 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8003230:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8003238:	2364      	movs	r3, #100	; 0x64
 800323a:	9302      	str	r3, [sp, #8]
 800323c:	2301      	movs	r3, #1
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2301      	movs	r3, #1
 8003248:	2215      	movs	r2, #21
 800324a:	21d0      	movs	r1, #208	; 0xd0
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f003 ff33 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8003252:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003256:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800325a:	2364      	movs	r3, #100	; 0x64
 800325c:	9302      	str	r3, [sp, #8]
 800325e:	2301      	movs	r3, #1
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	2301      	movs	r3, #1
 800326a:	2216      	movs	r2, #22
 800326c:	21d0      	movs	r1, #208	; 0xd0
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f003 ff22 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8003274:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800327c:	2364      	movs	r3, #100	; 0x64
 800327e:	9302      	str	r3, [sp, #8]
 8003280:	2301      	movs	r3, #1
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2301      	movs	r3, #1
 800328c:	2217      	movs	r2, #23
 800328e:	21d0      	movs	r1, #208	; 0xd0
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f003 ff11 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8003296:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800329a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800329e:	2364      	movs	r3, #100	; 0x64
 80032a0:	9302      	str	r3, [sp, #8]
 80032a2:	2301      	movs	r3, #1
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2301      	movs	r3, #1
 80032ae:	2218      	movs	r2, #24
 80032b0:	21d0      	movs	r1, #208	; 0xd0
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f003 ff00 	bl	80070b8 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80032b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd fcde 	bl	8000c7c <__aeabi_i2f>
 80032c0:	4604      	mov	r4, r0
 80032c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fcd4 	bl	8000c74 <__aeabi_ui2f>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4619      	mov	r1, r3
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7fd fddb 	bl	8000e8c <__aeabi_fdiv>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80032de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd fccb 	bl	8000c7c <__aeabi_i2f>
 80032e6:	4605      	mov	r5, r0
 80032e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd fcc1 	bl	8000c74 <__aeabi_ui2f>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	1d1c      	adds	r4, r3, #4
 80032f8:	4611      	mov	r1, r2
 80032fa:	4628      	mov	r0, r5
 80032fc:	f7fd fdc6 	bl	8000e8c <__aeabi_fdiv>
 8003300:	4603      	mov	r3, r0
 8003302:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8003304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fcb8 	bl	8000c7c <__aeabi_i2f>
 800330c:	4605      	mov	r5, r0
 800330e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fcae 	bl	8000c74 <__aeabi_ui2f>
 8003318:	4602      	mov	r2, r0
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f103 0408 	add.w	r4, r3, #8
 8003320:	4611      	mov	r1, r2
 8003322:	4628      	mov	r0, r5
 8003324:	f7fd fdb2 	bl	8000e8c <__aeabi_fdiv>
 8003328:	4603      	mov	r3, r0
 800332a:	6023      	str	r3, [r4, #0]

		printf("-------------------------\r\n");
#endif

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
 8003330:	2300      	movs	r3, #0
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
 8003334:	2300      	movs	r3, #0
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8003338:	2364      	movs	r3, #100	; 0x64
 800333a:	9302      	str	r3, [sp, #8]
 800333c:	2302      	movs	r3, #2
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2301      	movs	r3, #1
 8003348:	2277      	movs	r2, #119	; 0x77
 800334a:	21d0      	movs	r1, #208	; 0xd0
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f003 ffad 	bl	80072ac <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8003352:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800335c:	4313      	orrs	r3, r2
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8003360:	2364      	movs	r3, #100	; 0x64
 8003362:	9302      	str	r3, [sp, #8]
 8003364:	2302      	movs	r3, #2
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2301      	movs	r3, #1
 8003370:	227a      	movs	r2, #122	; 0x7a
 8003372:	21d0      	movs	r1, #208	; 0xd0
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f003 ff99 	bl	80072ac <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800337a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003384:	4313      	orrs	r3, r2
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8003388:	2364      	movs	r3, #100	; 0x64
 800338a:	9302      	str	r3, [sp, #8]
 800338c:	2302      	movs	r3, #2
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	2301      	movs	r3, #1
 8003398:	227d      	movs	r2, #125	; 0x7d
 800339a:	21d0      	movs	r1, #208	; 0xd0
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f003 ff85 	bl	80072ac <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80033a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80033ac:	4313      	orrs	r3, r2
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 80033b0:	2301      	movs	r3, #1
 80033b2:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 3020 	strb.w	r3, [r7, #32]
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80033c0:	2300      	movs	r3, #0
 80033c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for(ii = 0; ii < 3; ii++) {
 80033c6:	2300      	movs	r3, #0
 80033c8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80033cc:	e019      	b.n	8003402 <calibrateMPU9250+0x67e>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 80033ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80033d8:	4413      	add	r3, r2
 80033da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80033de:	461a      	mov	r2, r3
 80033e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <calibrateMPU9250+0x674>
 80033e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80033ec:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80033f0:	4413      	add	r3, r2
 80033f2:	2201      	movs	r2, #1
 80033f4:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 80033f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80033fc:	3301      	adds	r3, #1
 80033fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003402:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003406:	2b02      	cmp	r3, #2
 8003408:	d9e1      	bls.n	80033ce <calibrateMPU9250+0x64a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	2b00      	cmp	r3, #0
 8003410:	da00      	bge.n	8003414 <calibrateMPU9250+0x690>
 8003412:	3307      	adds	r3, #7
 8003414:	10db      	asrs	r3, r3, #3
 8003416:	425b      	negs	r3, r3
 8003418:	4413      	add	r3, r2
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 800341c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003420:	2b00      	cmp	r3, #0
 8003422:	da00      	bge.n	8003426 <calibrateMPU9250+0x6a2>
 8003424:	3307      	adds	r3, #7
 8003426:	10db      	asrs	r3, r3, #3
 8003428:	425b      	negs	r3, r3
 800342a:	4413      	add	r3, r2
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 800342e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	2b00      	cmp	r3, #0
 8003434:	da00      	bge.n	8003438 <calibrateMPU9250+0x6b4>
 8003436:	3307      	adds	r3, #7
 8003438:	10db      	asrs	r3, r3, #3
 800343a:	425b      	negs	r3, r3
 800343c:	4413      	add	r3, r2
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	121b      	asrs	r3, r3, #8
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003452:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003456:	f897 3020 	ldrb.w	r3, [r7, #32]
 800345a:	4313      	orrs	r3, r2
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	121b      	asrs	r3, r3, #8
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003474:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003478:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800347c:	4313      	orrs	r3, r2
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	121b      	asrs	r3, r3, #8
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003496:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800349a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800349e:	4313      	orrs	r3, r2
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 80034a6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80034aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80034ae:	2364      	movs	r3, #100	; 0x64
 80034b0:	9302      	str	r3, [sp, #8]
 80034b2:	2301      	movs	r3, #1
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2301      	movs	r3, #1
 80034be:	2277      	movs	r2, #119	; 0x77
 80034c0:	21d0      	movs	r1, #208	; 0xd0
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f003 fdf8 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 80034c8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80034cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80034d0:	2364      	movs	r3, #100	; 0x64
 80034d2:	9302      	str	r3, [sp, #8]
 80034d4:	2301      	movs	r3, #1
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2301      	movs	r3, #1
 80034e0:	2278      	movs	r2, #120	; 0x78
 80034e2:	21d0      	movs	r1, #208	; 0xd0
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f003 fde7 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 80034ea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80034ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80034f2:	2364      	movs	r3, #100	; 0x64
 80034f4:	9302      	str	r3, [sp, #8]
 80034f6:	2301      	movs	r3, #1
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2301      	movs	r3, #1
 8003502:	227a      	movs	r2, #122	; 0x7a
 8003504:	21d0      	movs	r1, #208	; 0xd0
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f003 fdd6 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 800350c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003510:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8003514:	2364      	movs	r3, #100	; 0x64
 8003516:	9302      	str	r3, [sp, #8]
 8003518:	2301      	movs	r3, #1
 800351a:	9301      	str	r3, [sp, #4]
 800351c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2301      	movs	r3, #1
 8003524:	227b      	movs	r2, #123	; 0x7b
 8003526:	21d0      	movs	r1, #208	; 0xd0
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f003 fdc5 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 800352e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003532:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8003536:	2364      	movs	r3, #100	; 0x64
 8003538:	9302      	str	r3, [sp, #8]
 800353a:	2301      	movs	r3, #1
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2301      	movs	r3, #1
 8003546:	227d      	movs	r2, #125	; 0x7d
 8003548:	21d0      	movs	r1, #208	; 0xd0
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f003 fdb4 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8003550:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8003558:	2364      	movs	r3, #100	; 0x64
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	2301      	movs	r3, #1
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2301      	movs	r3, #1
 8003568:	227e      	movs	r2, #126	; 0x7e
 800356a:	21d0      	movs	r1, #208	; 0xd0
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f003 fda3 	bl	80070b8 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd fb81 	bl	8000c7c <__aeabi_i2f>
 800357a:	4604      	mov	r4, r0
 800357c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003580:	4618      	mov	r0, r3
 8003582:	f7fd fb77 	bl	8000c74 <__aeabi_ui2f>
 8003586:	4603      	mov	r3, r0
 8003588:	4619      	mov	r1, r3
 800358a:	4620      	mov	r0, r4
 800358c:	f7fd fc7e 	bl	8000e8c <__aeabi_fdiv>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	601a      	str	r2, [r3, #0]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fb6e 	bl	8000c7c <__aeabi_i2f>
 80035a0:	4605      	mov	r5, r0
 80035a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd fb64 	bl	8000c74 <__aeabi_ui2f>
 80035ac:	4602      	mov	r2, r0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	1d1c      	adds	r4, r3, #4
 80035b2:	4611      	mov	r1, r2
 80035b4:	4628      	mov	r0, r5
 80035b6:	f7fd fc69 	bl	8000e8c <__aeabi_fdiv>
 80035ba:	4603      	mov	r3, r0
 80035bc:	6023      	str	r3, [r4, #0]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd fb5b 	bl	8000c7c <__aeabi_i2f>
 80035c6:	4605      	mov	r5, r0
 80035c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fd fb51 	bl	8000c74 <__aeabi_ui2f>
 80035d2:	4602      	mov	r2, r0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f103 0408 	add.w	r4, r3, #8
 80035da:	4611      	mov	r1, r2
 80035dc:	4628      	mov	r0, r5
 80035de:	f7fd fc55 	bl	8000e8c <__aeabi_fdiv>
 80035e2:	4603      	mov	r3, r0
 80035e4:	6023      	str	r3, [r4, #0]
		printf("Accel bias Y: %f\r\n", accelBiasY);
		printf("Accel bias Z: %f\r\n", accelBiasZ);

		printf("-------------------------\r\n");
#endif
}
 80035e6:	bf00      	nop
 80035e8:	3768      	adds	r7, #104	; 0x68
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bdb0      	pop	{r4, r5, r7, pc}
 80035ee:	bf00      	nop

080035f0 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b0a8      	sub	sp, #160	; 0xa0
 80035f4:	af04      	add	r7, sp, #16
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 80035fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8003604:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 800363a:	2300      	movs	r3, #0
 800363c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 8003640:	2364      	movs	r3, #100	; 0x64
 8003642:	9302      	str	r3, [sp, #8]
 8003644:	2301      	movs	r3, #1
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2301      	movs	r3, #1
 8003650:	2219      	movs	r2, #25
 8003652:	21d0      	movs	r1, #208	; 0xd0
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f003 fd2f 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 800365a:	2302      	movs	r3, #2
 800365c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8003660:	2364      	movs	r3, #100	; 0x64
 8003662:	9302      	str	r3, [sp, #8]
 8003664:	2301      	movs	r3, #1
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2301      	movs	r3, #1
 8003670:	221a      	movs	r2, #26
 8003672:	21d0      	movs	r1, #208	; 0xd0
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f003 fd1f 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 800367a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8003686:	2364      	movs	r3, #100	; 0x64
 8003688:	9302      	str	r3, [sp, #8]
 800368a:	2301      	movs	r3, #1
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2301      	movs	r3, #1
 8003696:	221b      	movs	r2, #27
 8003698:	21d0      	movs	r1, #208	; 0xd0
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f003 fd0c 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 80036a0:	2302      	movs	r3, #2
 80036a2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80036a6:	2364      	movs	r3, #100	; 0x64
 80036a8:	9302      	str	r3, [sp, #8]
 80036aa:	2301      	movs	r3, #1
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2301      	movs	r3, #1
 80036b6:	221d      	movs	r2, #29
 80036b8:	21d0      	movs	r1, #208	; 0xd0
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f003 fcfc 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 80036c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 80036cc:	2364      	movs	r3, #100	; 0x64
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	2301      	movs	r3, #1
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2301      	movs	r3, #1
 80036dc:	221c      	movs	r2, #28
 80036de:	21d0      	movs	r1, #208	; 0xd0
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f003 fce9 	bl	80070b8 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80036ec:	e066      	b.n	80037bc <MPU9250SelfTest+0x1cc>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 80036ee:	2364      	movs	r3, #100	; 0x64
 80036f0:	9302      	str	r3, [sp, #8]
 80036f2:	2306      	movs	r3, #6
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2301      	movs	r3, #1
 80036fe:	223b      	movs	r2, #59	; 0x3b
 8003700:	21d0      	movs	r1, #208	; 0xd0
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f003 fdd2 	bl	80072ac <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370a:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800370e:	0212      	lsls	r2, r2, #8
 8003710:	b211      	sxth	r1, r2
 8003712:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003716:	b212      	sxth	r2, r2
 8003718:	430a      	orrs	r2, r1
 800371a:	b212      	sxth	r2, r2
 800371c:	4413      	add	r3, r2
 800371e:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003722:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003726:	0212      	lsls	r2, r2, #8
 8003728:	b211      	sxth	r1, r2
 800372a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800372e:	b212      	sxth	r2, r2
 8003730:	430a      	orrs	r2, r1
 8003732:	b212      	sxth	r2, r2
 8003734:	4413      	add	r3, r2
 8003736:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800373a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800373e:	0212      	lsls	r2, r2, #8
 8003740:	b211      	sxth	r1, r2
 8003742:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003746:	b212      	sxth	r2, r2
 8003748:	430a      	orrs	r2, r1
 800374a:	b212      	sxth	r2, r2
 800374c:	4413      	add	r3, r2
 800374e:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8003750:	2364      	movs	r3, #100	; 0x64
 8003752:	9302      	str	r3, [sp, #8]
 8003754:	2306      	movs	r3, #6
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2301      	movs	r3, #1
 8003760:	2243      	movs	r2, #67	; 0x43
 8003762:	21d0      	movs	r1, #208	; 0xd0
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f003 fda1 	bl	80072ac <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800376a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376c:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8003770:	0212      	lsls	r2, r2, #8
 8003772:	b211      	sxth	r1, r2
 8003774:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003778:	b212      	sxth	r2, r2
 800377a:	430a      	orrs	r2, r1
 800377c:	b212      	sxth	r2, r2
 800377e:	4413      	add	r3, r2
 8003780:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003784:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003788:	0212      	lsls	r2, r2, #8
 800378a:	b211      	sxth	r1, r2
 800378c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8003790:	b212      	sxth	r2, r2
 8003792:	430a      	orrs	r2, r1
 8003794:	b212      	sxth	r2, r2
 8003796:	4413      	add	r3, r2
 8003798:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800379a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800379c:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80037a0:	0212      	lsls	r2, r2, #8
 80037a2:	b211      	sxth	r1, r2
 80037a4:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80037a8:	b212      	sxth	r2, r2
 80037aa:	430a      	orrs	r2, r1
 80037ac:	b212      	sxth	r2, r2
 80037ae:	4413      	add	r3, r2
 80037b0:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 80037b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b6:	3301      	adds	r3, #1
 80037b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80037bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037c0:	2bc7      	cmp	r3, #199	; 0xc7
 80037c2:	dd94      	ble.n	80036ee <MPU9250SelfTest+0xfe>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037ca:	e030      	b.n	800382e <MPU9250SelfTest+0x23e>
		aAvg[ii] /= 200;
 80037cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80037d6:	4413      	add	r3, r2
 80037d8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80037dc:	4a61      	ldr	r2, [pc, #388]	; (8003964 <MPU9250SelfTest+0x374>)
 80037de:	fb82 1203 	smull	r1, r2, r2, r3
 80037e2:	1192      	asrs	r2, r2, #6
 80037e4:	17db      	asrs	r3, r3, #31
 80037e6:	1ad2      	subs	r2, r2, r3
 80037e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80037f2:	440b      	add	r3, r1
 80037f4:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 80037f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003802:	4413      	add	r3, r2
 8003804:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003808:	4a56      	ldr	r2, [pc, #344]	; (8003964 <MPU9250SelfTest+0x374>)
 800380a:	fb82 1203 	smull	r1, r2, r2, r3
 800380e:	1192      	asrs	r2, r2, #6
 8003810:	17db      	asrs	r3, r3, #31
 8003812:	1ad2      	subs	r2, r2, r3
 8003814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800381e:	440b      	add	r3, r1
 8003820:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 8003824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003828:	3301      	adds	r3, #1
 800382a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800382e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003832:	2b02      	cmp	r3, #2
 8003834:	ddca      	ble.n	80037cc <MPU9250SelfTest+0x1dc>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 8003836:	23e0      	movs	r3, #224	; 0xe0
 8003838:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 800383c:	2364      	movs	r3, #100	; 0x64
 800383e:	9302      	str	r3, [sp, #8]
 8003840:	2301      	movs	r3, #1
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2301      	movs	r3, #1
 800384c:	221c      	movs	r2, #28
 800384e:	21d0      	movs	r1, #208	; 0xd0
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f003 fc31 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 8003856:	23e0      	movs	r3, #224	; 0xe0
 8003858:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 800385c:	2364      	movs	r3, #100	; 0x64
 800385e:	9302      	str	r3, [sp, #8]
 8003860:	2301      	movs	r3, #1
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	2301      	movs	r3, #1
 800386c:	221b      	movs	r2, #27
 800386e:	21d0      	movs	r1, #208	; 0xd0
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f003 fc21 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8003876:	2019      	movs	r0, #25
 8003878:	f002 fd8c 	bl	8006394 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003882:	e066      	b.n	8003952 <MPU9250SelfTest+0x362>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8003884:	2364      	movs	r3, #100	; 0x64
 8003886:	9302      	str	r3, [sp, #8]
 8003888:	2306      	movs	r3, #6
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2301      	movs	r3, #1
 8003894:	223b      	movs	r2, #59	; 0x3b
 8003896:	21d0      	movs	r1, #208	; 0xd0
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f003 fd07 	bl	80072ac <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800389e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a0:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80038a4:	0212      	lsls	r2, r2, #8
 80038a6:	b211      	sxth	r1, r2
 80038a8:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80038ac:	b212      	sxth	r2, r2
 80038ae:	430a      	orrs	r2, r1
 80038b0:	b212      	sxth	r2, r2
 80038b2:	4413      	add	r3, r2
 80038b4:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80038b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b8:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80038bc:	0212      	lsls	r2, r2, #8
 80038be:	b211      	sxth	r1, r2
 80038c0:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80038c4:	b212      	sxth	r2, r2
 80038c6:	430a      	orrs	r2, r1
 80038c8:	b212      	sxth	r2, r2
 80038ca:	4413      	add	r3, r2
 80038cc:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80038ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d0:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80038d4:	0212      	lsls	r2, r2, #8
 80038d6:	b211      	sxth	r1, r2
 80038d8:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80038dc:	b212      	sxth	r2, r2
 80038de:	430a      	orrs	r2, r1
 80038e0:	b212      	sxth	r2, r2
 80038e2:	4413      	add	r3, r2
 80038e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80038e6:	2364      	movs	r3, #100	; 0x64
 80038e8:	9302      	str	r3, [sp, #8]
 80038ea:	2306      	movs	r3, #6
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2301      	movs	r3, #1
 80038f6:	2243      	movs	r2, #67	; 0x43
 80038f8:	21d0      	movs	r1, #208	; 0xd0
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f003 fcd6 	bl	80072ac <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8003906:	0212      	lsls	r2, r2, #8
 8003908:	b211      	sxth	r1, r2
 800390a:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800390e:	b212      	sxth	r2, r2
 8003910:	430a      	orrs	r2, r1
 8003912:	b212      	sxth	r2, r2
 8003914:	4413      	add	r3, r2
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800391e:	0212      	lsls	r2, r2, #8
 8003920:	b211      	sxth	r1, r2
 8003922:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8003926:	b212      	sxth	r2, r2
 8003928:	430a      	orrs	r2, r1
 800392a:	b212      	sxth	r2, r2
 800392c:	4413      	add	r3, r2
 800392e:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003932:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8003936:	0212      	lsls	r2, r2, #8
 8003938:	b211      	sxth	r1, r2
 800393a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800393e:	b212      	sxth	r2, r2
 8003940:	430a      	orrs	r2, r1
 8003942:	b212      	sxth	r2, r2
 8003944:	4413      	add	r3, r2
 8003946:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 8003948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800394c:	3301      	adds	r3, #1
 800394e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003956:	2bc7      	cmp	r3, #199	; 0xc7
 8003958:	dd94      	ble.n	8003884 <MPU9250SelfTest+0x294>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003960:	e033      	b.n	80039ca <MPU9250SelfTest+0x3da>
 8003962:	bf00      	nop
 8003964:	51eb851f 	.word	0x51eb851f
		aSTAvg[ii] /= 200;
 8003968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003972:	4413      	add	r3, r2
 8003974:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003978:	4ad7      	ldr	r2, [pc, #860]	; (8003cd8 <MPU9250SelfTest+0x6e8>)
 800397a:	fb82 1203 	smull	r1, r2, r2, r3
 800397e:	1192      	asrs	r2, r2, #6
 8003980:	17db      	asrs	r3, r3, #31
 8003982:	1ad2      	subs	r2, r2, r3
 8003984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800398e:	440b      	add	r3, r1
 8003990:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 8003994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800399e:	4413      	add	r3, r2
 80039a0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80039a4:	4acc      	ldr	r2, [pc, #816]	; (8003cd8 <MPU9250SelfTest+0x6e8>)
 80039a6:	fb82 1203 	smull	r1, r2, r2, r3
 80039aa:	1192      	asrs	r2, r2, #6
 80039ac:	17db      	asrs	r3, r3, #31
 80039ae:	1ad2      	subs	r2, r2, r3
 80039b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80039ba:	440b      	add	r3, r1
 80039bc:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 80039c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039c4:	3301      	adds	r3, #1
 80039c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	ddca      	ble.n	8003968 <MPU9250SelfTest+0x378>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 80039d8:	2364      	movs	r3, #100	; 0x64
 80039da:	9302      	str	r3, [sp, #8]
 80039dc:	2301      	movs	r3, #1
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2301      	movs	r3, #1
 80039e8:	221c      	movs	r2, #28
 80039ea:	21d0      	movs	r1, #208	; 0xd0
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f003 fb63 	bl	80070b8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80039f8:	2364      	movs	r3, #100	; 0x64
 80039fa:	9302      	str	r3, [sp, #8]
 80039fc:	2301      	movs	r3, #1
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2301      	movs	r3, #1
 8003a08:	221b      	movs	r2, #27
 8003a0a:	21d0      	movs	r1, #208	; 0xd0
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f003 fb53 	bl	80070b8 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8003a12:	2019      	movs	r0, #25
 8003a14:	f002 fcbe 	bl	8006394 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 8003a18:	2364      	movs	r3, #100	; 0x64
 8003a1a:	9302      	str	r3, [sp, #8]
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2301      	movs	r3, #1
 8003a28:	220d      	movs	r2, #13
 8003a2a:	21d0      	movs	r1, #208	; 0xd0
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f003 fc3d 	bl	80072ac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 8003a32:	2364      	movs	r3, #100	; 0x64
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	2301      	movs	r3, #1
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a3e:	3301      	adds	r3, #1
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2301      	movs	r3, #1
 8003a44:	220e      	movs	r2, #14
 8003a46:	21d0      	movs	r1, #208	; 0xd0
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f003 fc2f 	bl	80072ac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 8003a4e:	2364      	movs	r3, #100	; 0x64
 8003a50:	9302      	str	r3, [sp, #8]
 8003a52:	2301      	movs	r3, #1
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	220f      	movs	r2, #15
 8003a62:	21d0      	movs	r1, #208	; 0xd0
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f003 fc21 	bl	80072ac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 8003a6a:	2364      	movs	r3, #100	; 0x64
 8003a6c:	9302      	str	r3, [sp, #8]
 8003a6e:	2301      	movs	r3, #1
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a76:	3303      	adds	r3, #3
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	21d0      	movs	r1, #208	; 0xd0
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f003 fc13 	bl	80072ac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8003a86:	2364      	movs	r3, #100	; 0x64
 8003a88:	9302      	str	r3, [sp, #8]
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a92:	3304      	adds	r3, #4
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	2301      	movs	r3, #1
 8003a98:	2201      	movs	r2, #1
 8003a9a:	21d0      	movs	r1, #208	; 0xd0
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f003 fc05 	bl	80072ac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8003aa2:	2364      	movs	r3, #100	; 0x64
 8003aa4:	9302      	str	r3, [sp, #8]
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003aae:	3305      	adds	r3, #5
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	21d0      	movs	r1, #208	; 0xd0
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f003 fbf7 	bl	80072ac <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8003abe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003ac2:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd f8d6 	bl	8000c7c <__aeabi_i2f>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fc fca0 	bl	8000418 <__aeabi_f2d>
 8003ad8:	4604      	mov	r4, r0
 8003ada:	460d      	mov	r5, r1
 8003adc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd f8c7 	bl	8000c74 <__aeabi_ui2f>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fc fc95 	bl	8000418 <__aeabi_f2d>
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	4b7a      	ldr	r3, [pc, #488]	; (8003cdc <MPU9250SelfTest+0x6ec>)
 8003af4:	f7fc fb30 	bl	8000158 <__aeabi_dsub>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	a174      	add	r1, pc, #464	; (adr r1, 8003cd0 <MPU9250SelfTest+0x6e0>)
 8003afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b02:	f007 fa55 	bl	800afb0 <pow>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	f7fc fcdb 	bl	80004c8 <__aeabi_dmul>
 8003b12:	4603      	mov	r3, r0
 8003b14:	460c      	mov	r4, r1
 8003b16:	4618      	mov	r0, r3
 8003b18:	4621      	mov	r1, r4
 8003b1a:	f7fc ffa5 	bl	8000a68 <__aeabi_d2f>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	623b      	str	r3, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8003b22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b26:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd f8a4 	bl	8000c7c <__aeabi_i2f>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fc fc6e 	bl	8000418 <__aeabi_f2d>
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	460d      	mov	r5, r1
 8003b40:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fd f895 	bl	8000c74 <__aeabi_ui2f>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fc fc63 	bl	8000418 <__aeabi_f2d>
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	4b61      	ldr	r3, [pc, #388]	; (8003cdc <MPU9250SelfTest+0x6ec>)
 8003b58:	f7fc fafe 	bl	8000158 <__aeabi_dsub>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	a15b      	add	r1, pc, #364	; (adr r1, 8003cd0 <MPU9250SelfTest+0x6e0>)
 8003b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b66:	f007 fa23 	bl	800afb0 <pow>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4620      	mov	r0, r4
 8003b70:	4629      	mov	r1, r5
 8003b72:	f7fc fca9 	bl	80004c8 <__aeabi_dmul>
 8003b76:	4603      	mov	r3, r0
 8003b78:	460c      	mov	r4, r1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	f7fc ff73 	bl	8000a68 <__aeabi_d2f>
 8003b82:	4603      	mov	r3, r0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8003b86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b8a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd f872 	bl	8000c7c <__aeabi_i2f>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc fc3c 	bl	8000418 <__aeabi_f2d>
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	460d      	mov	r5, r1
 8003ba4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fd f863 	bl	8000c74 <__aeabi_ui2f>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fc fc31 	bl	8000418 <__aeabi_f2d>
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <MPU9250SelfTest+0x6ec>)
 8003bbc:	f7fc facc 	bl	8000158 <__aeabi_dsub>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	a142      	add	r1, pc, #264	; (adr r1, 8003cd0 <MPU9250SelfTest+0x6e0>)
 8003bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bca:	f007 f9f1 	bl	800afb0 <pow>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	f7fc fc77 	bl	80004c8 <__aeabi_dmul>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	460c      	mov	r4, r1
 8003bde:	4618      	mov	r0, r3
 8003be0:	4621      	mov	r1, r4
 8003be2:	f7fc ff41 	bl	8000a68 <__aeabi_d2f>
 8003be6:	4603      	mov	r3, r0
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8003bea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003bee:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd f840 	bl	8000c7c <__aeabi_i2f>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fc fc0a 	bl	8000418 <__aeabi_f2d>
 8003c04:	4604      	mov	r4, r0
 8003c06:	460d      	mov	r5, r1
 8003c08:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fd f831 	bl	8000c74 <__aeabi_ui2f>
 8003c12:	4603      	mov	r3, r0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fc fbff 	bl	8000418 <__aeabi_f2d>
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	4b2f      	ldr	r3, [pc, #188]	; (8003cdc <MPU9250SelfTest+0x6ec>)
 8003c20:	f7fc fa9a 	bl	8000158 <__aeabi_dsub>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	a129      	add	r1, pc, #164	; (adr r1, 8003cd0 <MPU9250SelfTest+0x6e0>)
 8003c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c2e:	f007 f9bf 	bl	800afb0 <pow>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4620      	mov	r0, r4
 8003c38:	4629      	mov	r1, r5
 8003c3a:	f7fc fc45 	bl	80004c8 <__aeabi_dmul>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	460c      	mov	r4, r1
 8003c42:	4618      	mov	r0, r3
 8003c44:	4621      	mov	r1, r4
 8003c46:	f7fc ff0f 	bl	8000a68 <__aeabi_d2f>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8003c4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003c52:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fd f80e 	bl	8000c7c <__aeabi_i2f>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fc fbd8 	bl	8000418 <__aeabi_f2d>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	460d      	mov	r5, r1
 8003c6c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fc ffff 	bl	8000c74 <__aeabi_ui2f>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fbcd 	bl	8000418 <__aeabi_f2d>
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <MPU9250SelfTest+0x6ec>)
 8003c84:	f7fc fa68 	bl	8000158 <__aeabi_dsub>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	a110      	add	r1, pc, #64	; (adr r1, 8003cd0 <MPU9250SelfTest+0x6e0>)
 8003c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c92:	f007 f98d 	bl	800afb0 <pow>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	f7fc fc13 	bl	80004c8 <__aeabi_dmul>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	4621      	mov	r1, r4
 8003caa:	f7fc fedd 	bl	8000a68 <__aeabi_d2f>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8003cb2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003cb6:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc ffdc 	bl	8000c7c <__aeabi_i2f>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	e00a      	b.n	8003ce0 <MPU9250SelfTest+0x6f0>
 8003cca:	bf00      	nop
 8003ccc:	f3af 8000 	nop.w
 8003cd0:	c28f5c29 	.word	0xc28f5c29
 8003cd4:	3ff028f5 	.word	0x3ff028f5
 8003cd8:	51eb851f 	.word	0x51eb851f
 8003cdc:	3ff00000 	.word	0x3ff00000
 8003ce0:	f7fc fb9a 	bl	8000418 <__aeabi_f2d>
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	460d      	mov	r5, r1
 8003ce8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc ffc1 	bl	8000c74 <__aeabi_ui2f>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fc fb8f 	bl	8000418 <__aeabi_f2d>
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	4ba8      	ldr	r3, [pc, #672]	; (8003fa0 <MPU9250SelfTest+0x9b0>)
 8003d00:	f7fc fa2a 	bl	8000158 <__aeabi_dsub>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	a1a3      	add	r1, pc, #652	; (adr r1, 8003f98 <MPU9250SelfTest+0x9a8>)
 8003d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d0e:	f007 f94f 	bl	800afb0 <pow>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4620      	mov	r0, r4
 8003d18:	4629      	mov	r1, r5
 8003d1a:	f7fc fbd5 	bl	80004c8 <__aeabi_dmul>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460c      	mov	r4, r1
 8003d22:	4618      	mov	r0, r3
 8003d24:	4621      	mov	r1, r4
 8003d26:	f7fc fe9f 	bl	8000a68 <__aeabi_d2f>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8003d2e:	2300      	movs	r3, #0
 8003d30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d32:	e092      	b.n	8003e5a <MPU9250SelfTest+0x86a>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8003d34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8003d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc ff92 	bl	8000c7c <__aeabi_i2f>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fc fb5c 	bl	8000418 <__aeabi_f2d>
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	4b8f      	ldr	r3, [pc, #572]	; (8003fa4 <MPU9250SelfTest+0x9b4>)
 8003d66:	f7fc fbaf 	bl	80004c8 <__aeabi_dmul>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	4625      	mov	r5, r4
 8003d70:	461c      	mov	r4, r3
 8003d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc fb49 	bl	8000418 <__aeabi_f2d>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f7fc fcc5 	bl	800071c <__aeabi_ddiv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	460c      	mov	r4, r1
 8003d96:	4618      	mov	r0, r3
 8003d98:	4621      	mov	r1, r4
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	4b81      	ldr	r3, [pc, #516]	; (8003fa4 <MPU9250SelfTest+0x9b4>)
 8003da0:	f7fc f9da 	bl	8000158 <__aeabi_dsub>
 8003da4:	4603      	mov	r3, r0
 8003da6:	460c      	mov	r4, r1
 8003da8:	4618      	mov	r0, r3
 8003daa:	4621      	mov	r1, r4
 8003dac:	f7fc fe3c 	bl	8000a28 <__aeabi_d2uiz>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003dba:	440b      	add	r3, r1
 8003dbc:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8003dc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003dc8:	4413      	add	r3, r2
 8003dca:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8003dce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc ff4c 	bl	8000c7c <__aeabi_i2f>
 8003de4:	4603      	mov	r3, r0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fc fb16 	bl	8000418 <__aeabi_f2d>
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	4b6c      	ldr	r3, [pc, #432]	; (8003fa4 <MPU9250SelfTest+0x9b4>)
 8003df2:	f7fc fb69 	bl	80004c8 <__aeabi_dmul>
 8003df6:	4603      	mov	r3, r0
 8003df8:	460c      	mov	r4, r1
 8003dfa:	4625      	mov	r5, r4
 8003dfc:	461c      	mov	r4, r3
 8003dfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e00:	3303      	adds	r3, #3
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003e08:	4413      	add	r3, r2
 8003e0a:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc fb02 	bl	8000418 <__aeabi_f2d>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4620      	mov	r0, r4
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	f7fc fc7e 	bl	800071c <__aeabi_ddiv>
 8003e20:	4603      	mov	r3, r0
 8003e22:	460c      	mov	r4, r1
 8003e24:	4618      	mov	r0, r3
 8003e26:	4621      	mov	r1, r4
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	4b5d      	ldr	r3, [pc, #372]	; (8003fa4 <MPU9250SelfTest+0x9b4>)
 8003e2e:	f7fc f993 	bl	8000158 <__aeabi_dsub>
 8003e32:	4603      	mov	r3, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	4619      	mov	r1, r3
 8003e38:	4622      	mov	r2, r4
 8003e3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e3c:	1cdc      	adds	r4, r3, #3
 8003e3e:	4608      	mov	r0, r1
 8003e40:	4611      	mov	r1, r2
 8003e42:	f7fc fdf1 	bl	8000a28 <__aeabi_d2uiz>
 8003e46:	4602      	mov	r2, r0
 8003e48:	00a3      	lsls	r3, r4, #2
 8003e4a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003e4e:	440b      	add	r3, r1
 8003e50:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 8003e54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e56:	3301      	adds	r3, #1
 8003e58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f77f af69 	ble.w	8003d34 <MPU9250SelfTest+0x744>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");
#endif

   for (int i = 0; i < 3; i++) {
 8003e62:	2300      	movs	r3, #0
 8003e64:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e66:	e08c      	b.n	8003f82 <MPU9250SelfTest+0x992>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8003e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003e70:	4413      	add	r3, r2
 8003e72:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8003e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003e7e:	440b      	add	r3, r1
 8003e80:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc fef8 	bl	8000c7c <__aeabi_i2f>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc fac2 	bl	8000418 <__aeabi_f2d>
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <MPU9250SelfTest+0x9b4>)
 8003e9a:	f7fc fb15 	bl	80004c8 <__aeabi_dmul>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	4625      	mov	r5, r4
 8003ea4:	461c      	mov	r4, r3
 8003ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003eae:	4413      	add	r3, r2
 8003eb0:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc faaf 	bl	8000418 <__aeabi_f2d>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	f7fc fc2b 	bl	800071c <__aeabi_ddiv>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	460c      	mov	r4, r1
 8003eca:	4618      	mov	r0, r3
 8003ecc:	4621      	mov	r1, r4
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <MPU9250SelfTest+0x9b4>)
 8003ed4:	f7fc f940 	bl	8000158 <__aeabi_dsub>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	4618      	mov	r0, r3
 8003ede:	4621      	mov	r1, r4
 8003ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	18d4      	adds	r4, r2, r3
 8003ee8:	f7fc fdbe 	bl	8000a68 <__aeabi_d2f>
 8003eec:	4603      	mov	r3, r0
 8003eee:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8003ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003ef8:	4413      	add	r3, r2
 8003efa:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8003efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003f06:	440b      	add	r3, r1
 8003f08:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc feb4 	bl	8000c7c <__aeabi_i2f>
 8003f14:	4603      	mov	r3, r0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fa7e 	bl	8000418 <__aeabi_f2d>
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <MPU9250SelfTest+0x9b4>)
 8003f22:	f7fc fad1 	bl	80004c8 <__aeabi_dmul>
 8003f26:	4603      	mov	r3, r0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	4625      	mov	r5, r4
 8003f2c:	461c      	mov	r4, r3
 8003f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f30:	3303      	adds	r3, #3
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003f38:	4413      	add	r3, r2
 8003f3a:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fa6a 	bl	8000418 <__aeabi_f2d>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4620      	mov	r0, r4
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	f7fc fbe6 	bl	800071c <__aeabi_ddiv>
 8003f50:	4603      	mov	r3, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4618      	mov	r0, r3
 8003f56:	4621      	mov	r1, r4
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <MPU9250SelfTest+0x9b4>)
 8003f5e:	f7fc f8fb 	bl	8000158 <__aeabi_dsub>
 8003f62:	4603      	mov	r3, r0
 8003f64:	460c      	mov	r4, r1
 8003f66:	4618      	mov	r0, r3
 8003f68:	4621      	mov	r1, r4
 8003f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f6c:	3303      	adds	r3, #3
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	18d4      	adds	r4, r2, r3
 8003f74:	f7fc fd78 	bl	8000a68 <__aeabi_d2f>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8003f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f7e:	3301      	adds	r3, #1
 8003f80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	f77f af6f 	ble.w	8003e68 <MPU9250SelfTest+0x878>
   }
}
 8003f8a:	bf00      	nop
 8003f8c:	3790      	adds	r7, #144	; 0x90
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bdb0      	pop	{r4, r5, r7, pc}
 8003f92:	bf00      	nop
 8003f94:	f3af 8000 	nop.w
 8003f98:	c28f5c29 	.word	0xc28f5c29
 8003f9c:	3ff028f5 	.word	0x3ff028f5
 8003fa0:	3ff00000 	.word	0x3ff00000
 8003fa4:	40590000 	.word	0x40590000

08003fa8 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003faa:	b0ad      	sub	sp, #180	; 0xb4
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8003fb6:	4b8a      	ldr	r3, [pc, #552]	; (80041e0 <QuaternionUpdate+0x238>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <QuaternionUpdate+0x238>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fc6:	4b86      	ldr	r3, [pc, #536]	; (80041e0 <QuaternionUpdate+0x238>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003fce:	4b84      	ldr	r3, [pc, #528]	; (80041e0 <QuaternionUpdate+0x238>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8003fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc fd99 	bl	8000b14 <__addsf3>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float _2q2 = 2.0f * q2;
 8003fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fec:	4619      	mov	r1, r3
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc fd90 	bl	8000b14 <__addsf3>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float _2q3 = 2.0f * q3;
 8003ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc fd87 	bl	8000b14 <__addsf3>
 8004006:	4603      	mov	r3, r0
 8004008:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float _2q4 = 2.0f * q4;
 800400c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004010:	4619      	mov	r1, r3
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fd7e 	bl	8000b14 <__addsf3>
 8004018:	4603      	mov	r3, r0
 800401a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 800401e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004022:	4619      	mov	r1, r3
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc fd75 	bl	8000b14 <__addsf3>
 800402a:	4603      	mov	r3, r0
 800402c:	4619      	mov	r1, r3
 800402e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004032:	f7fc fe77 	bl	8000d24 <__aeabi_fmul>
 8004036:	4603      	mov	r3, r0
 8004038:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 800403c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004040:	4619      	mov	r1, r3
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc fd66 	bl	8000b14 <__addsf3>
 8004048:	4603      	mov	r3, r0
 800404a:	4619      	mov	r1, r3
 800404c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004050:	f7fc fe68 	bl	8000d24 <__aeabi_fmul>
 8004054:	4603      	mov	r3, r0
 8004056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 800405a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800405e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004062:	f7fc fe5f 	bl	8000d24 <__aeabi_fmul>
 8004066:	4603      	mov	r3, r0
 8004068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 800406c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004070:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004074:	f7fc fe56 	bl	8000d24 <__aeabi_fmul>
 8004078:	4603      	mov	r3, r0
 800407a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 800407e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004082:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004086:	f7fc fe4d 	bl	8000d24 <__aeabi_fmul>
 800408a:	4603      	mov	r3, r0
 800408c:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1q4 = q1 * q4;
 800408e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004092:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004096:	f7fc fe45 	bl	8000d24 <__aeabi_fmul>
 800409a:	4603      	mov	r3, r0
 800409c:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2q2 = q2 * q2;
 800409e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80040a2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80040a6:	f7fc fe3d 	bl	8000d24 <__aeabi_fmul>
 80040aa:	4603      	mov	r3, r0
 80040ac:	677b      	str	r3, [r7, #116]	; 0x74
    float q2q3 = q2 * q3;
 80040ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040b2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80040b6:	f7fc fe35 	bl	8000d24 <__aeabi_fmul>
 80040ba:	4603      	mov	r3, r0
 80040bc:	673b      	str	r3, [r7, #112]	; 0x70
    float q2q4 = q2 * q4;
 80040be:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80040c2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80040c6:	f7fc fe2d 	bl	8000d24 <__aeabi_fmul>
 80040ca:	4603      	mov	r3, r0
 80040cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    float q3q3 = q3 * q3;
 80040ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040d2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80040d6:	f7fc fe25 	bl	8000d24 <__aeabi_fmul>
 80040da:	4603      	mov	r3, r0
 80040dc:	66bb      	str	r3, [r7, #104]	; 0x68
    float q3q4 = q3 * q4;
 80040de:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80040e2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80040e6:	f7fc fe1d 	bl	8000d24 <__aeabi_fmul>
 80040ea:	4603      	mov	r3, r0
 80040ec:	667b      	str	r3, [r7, #100]	; 0x64
    float q4q4 = q4 * q4;
 80040ee:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80040f2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80040f6:	f7fc fe15 	bl	8000d24 <__aeabi_fmul>
 80040fa:	4603      	mov	r3, r0
 80040fc:	663b      	str	r3, [r7, #96]	; 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7fc fe0f 	bl	8000d24 <__aeabi_fmul>
 8004106:	4603      	mov	r3, r0
 8004108:	461c      	mov	r4, r3
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	68b8      	ldr	r0, [r7, #8]
 800410e:	f7fc fe09 	bl	8000d24 <__aeabi_fmul>
 8004112:	4603      	mov	r3, r0
 8004114:	4619      	mov	r1, r3
 8004116:	4620      	mov	r0, r4
 8004118:	f7fc fcfc 	bl	8000b14 <__addsf3>
 800411c:	4603      	mov	r3, r0
 800411e:	461c      	mov	r4, r3
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fc fdfe 	bl	8000d24 <__aeabi_fmul>
 8004128:	4603      	mov	r3, r0
 800412a:	4619      	mov	r1, r3
 800412c:	4620      	mov	r0, r4
 800412e:	f7fc fcf1 	bl	8000b14 <__addsf3>
 8004132:	4603      	mov	r3, r0
 8004134:	4618      	mov	r0, r3
 8004136:	f007 f8e7 	bl	800b308 <sqrtf>
 800413a:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 800413c:	f04f 0100 	mov.w	r1, #0
 8004140:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004142:	f7fc ff83 	bl	800104c <__aeabi_fcmpeq>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 87e3 	bne.w	8005114 <QuaternionUpdate+0x116c>
    norm = 1.0f/norm;
 800414e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004150:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004154:	f7fc fe9a 	bl	8000e8c <__aeabi_fdiv>
 8004158:	4603      	mov	r3, r0
 800415a:	65fb      	str	r3, [r7, #92]	; 0x5c
    ax *= norm;
 800415c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7fc fde0 	bl	8000d24 <__aeabi_fmul>
 8004164:	4603      	mov	r3, r0
 8004166:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 8004168:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800416a:	68b8      	ldr	r0, [r7, #8]
 800416c:	f7fc fdda 	bl	8000d24 <__aeabi_fmul>
 8004170:	4603      	mov	r3, r0
 8004172:	60bb      	str	r3, [r7, #8]
    az *= norm;
 8004174:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fc fdd4 	bl	8000d24 <__aeabi_fmul>
 800417c:	4603      	mov	r3, r0
 800417e:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8004180:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004184:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004188:	f7fc fdcc 	bl	8000d24 <__aeabi_fmul>
 800418c:	4603      	mov	r3, r0
 800418e:	461c      	mov	r4, r3
 8004190:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004194:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004198:	f7fc fdc4 	bl	8000d24 <__aeabi_fmul>
 800419c:	4603      	mov	r3, r0
 800419e:	4619      	mov	r1, r3
 80041a0:	4620      	mov	r0, r4
 80041a2:	f7fc fcb7 	bl	8000b14 <__addsf3>
 80041a6:	4603      	mov	r3, r0
 80041a8:	461c      	mov	r4, r3
 80041aa:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80041ae:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80041b2:	f7fc fdb7 	bl	8000d24 <__aeabi_fmul>
 80041b6:	4603      	mov	r3, r0
 80041b8:	4619      	mov	r1, r3
 80041ba:	4620      	mov	r0, r4
 80041bc:	f7fc fcaa 	bl	8000b14 <__addsf3>
 80041c0:	4603      	mov	r3, r0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f007 f8a0 	bl	800b308 <sqrtf>
 80041c8:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 80041ca:	f04f 0100 	mov.w	r1, #0
 80041ce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80041d0:	f7fc ff3c 	bl	800104c <__aeabi_fcmpeq>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f040 879e 	bne.w	8005118 <QuaternionUpdate+0x1170>
 80041dc:	e002      	b.n	80041e4 <QuaternionUpdate+0x23c>
 80041de:	bf00      	nop
 80041e0:	20000010 	.word	0x20000010
    norm = 1.0f/norm;
 80041e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80041e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80041ea:	f7fc fe4f 	bl	8000e8c <__aeabi_fdiv>
 80041ee:	4603      	mov	r3, r0
 80041f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    mx *= norm;
 80041f2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80041f4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80041f8:	f7fc fd94 	bl	8000d24 <__aeabi_fmul>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    my *= norm;
 8004202:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004204:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004208:	f7fc fd8c 	bl	8000d24 <__aeabi_fmul>
 800420c:	4603      	mov	r3, r0
 800420e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mz *= norm;
 8004212:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004214:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8004218:	f7fc fd84 	bl	8000d24 <__aeabi_fmul>
 800421c:	4603      	mov	r3, r0
 800421e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 8004222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004226:	4619      	mov	r1, r3
 8004228:	4618      	mov	r0, r3
 800422a:	f7fc fc73 	bl	8000b14 <__addsf3>
 800422e:	4603      	mov	r3, r0
 8004230:	4619      	mov	r1, r3
 8004232:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004236:	f7fc fd75 	bl	8000d24 <__aeabi_fmul>
 800423a:	4603      	mov	r3, r0
 800423c:	65bb      	str	r3, [r7, #88]	; 0x58
    _2q1my = 2.0f * q1 * my;
 800423e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004242:	4619      	mov	r1, r3
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc fc65 	bl	8000b14 <__addsf3>
 800424a:	4603      	mov	r3, r0
 800424c:	4619      	mov	r1, r3
 800424e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004252:	f7fc fd67 	bl	8000d24 <__aeabi_fmul>
 8004256:	4603      	mov	r3, r0
 8004258:	657b      	str	r3, [r7, #84]	; 0x54
    _2q1mz = 2.0f * q1 * mz;
 800425a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800425e:	4619      	mov	r1, r3
 8004260:	4618      	mov	r0, r3
 8004262:	f7fc fc57 	bl	8000b14 <__addsf3>
 8004266:	4603      	mov	r3, r0
 8004268:	4619      	mov	r1, r3
 800426a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800426e:	f7fc fd59 	bl	8000d24 <__aeabi_fmul>
 8004272:	4603      	mov	r3, r0
 8004274:	653b      	str	r3, [r7, #80]	; 0x50
    _2q2mx = 2.0f * q2 * mx;
 8004276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800427a:	4619      	mov	r1, r3
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc fc49 	bl	8000b14 <__addsf3>
 8004282:	4603      	mov	r3, r0
 8004284:	4619      	mov	r1, r3
 8004286:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800428a:	f7fc fd4b 	bl	8000d24 <__aeabi_fmul>
 800428e:	4603      	mov	r3, r0
 8004290:	64fb      	str	r3, [r7, #76]	; 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8004292:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004296:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800429a:	f7fc fd43 	bl	8000d24 <__aeabi_fmul>
 800429e:	4603      	mov	r3, r0
 80042a0:	461c      	mov	r4, r3
 80042a2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80042a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80042a8:	f7fc fd3c 	bl	8000d24 <__aeabi_fmul>
 80042ac:	4603      	mov	r3, r0
 80042ae:	4619      	mov	r1, r3
 80042b0:	4620      	mov	r0, r4
 80042b2:	f7fc fc2d 	bl	8000b10 <__aeabi_fsub>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461c      	mov	r4, r3
 80042ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80042c0:	f7fc fd30 	bl	8000d24 <__aeabi_fmul>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4619      	mov	r1, r3
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7fc fc23 	bl	8000b14 <__addsf3>
 80042ce:	4603      	mov	r3, r0
 80042d0:	461c      	mov	r4, r3
 80042d2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80042d4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80042d8:	f7fc fd24 	bl	8000d24 <__aeabi_fmul>
 80042dc:	4603      	mov	r3, r0
 80042de:	4619      	mov	r1, r3
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7fc fc17 	bl	8000b14 <__addsf3>
 80042e6:	4603      	mov	r3, r0
 80042e8:	461c      	mov	r4, r3
 80042ea:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80042ee:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80042f2:	f7fc fd17 	bl	8000d24 <__aeabi_fmul>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc fd11 	bl	8000d24 <__aeabi_fmul>
 8004302:	4603      	mov	r3, r0
 8004304:	4619      	mov	r1, r3
 8004306:	4620      	mov	r0, r4
 8004308:	f7fc fc04 	bl	8000b14 <__addsf3>
 800430c:	4603      	mov	r3, r0
 800430e:	461c      	mov	r4, r3
 8004310:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004314:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004318:	f7fc fd04 	bl	8000d24 <__aeabi_fmul>
 800431c:	4603      	mov	r3, r0
 800431e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004322:	4618      	mov	r0, r3
 8004324:	f7fc fcfe 	bl	8000d24 <__aeabi_fmul>
 8004328:	4603      	mov	r3, r0
 800432a:	4619      	mov	r1, r3
 800432c:	4620      	mov	r0, r4
 800432e:	f7fc fbf1 	bl	8000b14 <__addsf3>
 8004332:	4603      	mov	r3, r0
 8004334:	461c      	mov	r4, r3
 8004336:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004338:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800433c:	f7fc fcf2 	bl	8000d24 <__aeabi_fmul>
 8004340:	4603      	mov	r3, r0
 8004342:	4619      	mov	r1, r3
 8004344:	4620      	mov	r0, r4
 8004346:	f7fc fbe3 	bl	8000b10 <__aeabi_fsub>
 800434a:	4603      	mov	r3, r0
 800434c:	461c      	mov	r4, r3
 800434e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004350:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004354:	f7fc fce6 	bl	8000d24 <__aeabi_fmul>
 8004358:	4603      	mov	r3, r0
 800435a:	4619      	mov	r1, r3
 800435c:	4620      	mov	r0, r4
 800435e:	f7fc fbd7 	bl	8000b10 <__aeabi_fsub>
 8004362:	4603      	mov	r3, r0
 8004364:	64bb      	str	r3, [r7, #72]	; 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8004366:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800436a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800436c:	f7fc fcda 	bl	8000d24 <__aeabi_fmul>
 8004370:	4603      	mov	r3, r0
 8004372:	461c      	mov	r4, r3
 8004374:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004378:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800437c:	f7fc fcd2 	bl	8000d24 <__aeabi_fmul>
 8004380:	4603      	mov	r3, r0
 8004382:	4619      	mov	r1, r3
 8004384:	4620      	mov	r0, r4
 8004386:	f7fc fbc5 	bl	8000b14 <__addsf3>
 800438a:	4603      	mov	r3, r0
 800438c:	461c      	mov	r4, r3
 800438e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004392:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004394:	f7fc fcc6 	bl	8000d24 <__aeabi_fmul>
 8004398:	4603      	mov	r3, r0
 800439a:	4619      	mov	r1, r3
 800439c:	4620      	mov	r0, r4
 800439e:	f7fc fbb7 	bl	8000b10 <__aeabi_fsub>
 80043a2:	4603      	mov	r3, r0
 80043a4:	461c      	mov	r4, r3
 80043a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80043ac:	f7fc fcba 	bl	8000d24 <__aeabi_fmul>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4619      	mov	r1, r3
 80043b4:	4620      	mov	r0, r4
 80043b6:	f7fc fbad 	bl	8000b14 <__addsf3>
 80043ba:	4603      	mov	r3, r0
 80043bc:	461c      	mov	r4, r3
 80043be:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80043c0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80043c4:	f7fc fcae 	bl	8000d24 <__aeabi_fmul>
 80043c8:	4603      	mov	r3, r0
 80043ca:	4619      	mov	r1, r3
 80043cc:	4620      	mov	r0, r4
 80043ce:	f7fc fb9f 	bl	8000b10 <__aeabi_fsub>
 80043d2:	4603      	mov	r3, r0
 80043d4:	461c      	mov	r4, r3
 80043d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043d8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80043dc:	f7fc fca2 	bl	8000d24 <__aeabi_fmul>
 80043e0:	4603      	mov	r3, r0
 80043e2:	4619      	mov	r1, r3
 80043e4:	4620      	mov	r0, r4
 80043e6:	f7fc fb95 	bl	8000b14 <__addsf3>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461c      	mov	r4, r3
 80043ee:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80043f2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80043f6:	f7fc fc95 	bl	8000d24 <__aeabi_fmul>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004400:	4618      	mov	r0, r3
 8004402:	f7fc fc8f 	bl	8000d24 <__aeabi_fmul>
 8004406:	4603      	mov	r3, r0
 8004408:	4619      	mov	r1, r3
 800440a:	4620      	mov	r0, r4
 800440c:	f7fc fb82 	bl	8000b14 <__addsf3>
 8004410:	4603      	mov	r3, r0
 8004412:	461c      	mov	r4, r3
 8004414:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004416:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800441a:	f7fc fc83 	bl	8000d24 <__aeabi_fmul>
 800441e:	4603      	mov	r3, r0
 8004420:	4619      	mov	r1, r3
 8004422:	4620      	mov	r0, r4
 8004424:	f7fc fb74 	bl	8000b10 <__aeabi_fsub>
 8004428:	4603      	mov	r3, r0
 800442a:	647b      	str	r3, [r7, #68]	; 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 800442c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800442e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004430:	f7fc fc78 	bl	8000d24 <__aeabi_fmul>
 8004434:	4603      	mov	r3, r0
 8004436:	461c      	mov	r4, r3
 8004438:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800443a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800443c:	f7fc fc72 	bl	8000d24 <__aeabi_fmul>
 8004440:	4603      	mov	r3, r0
 8004442:	4619      	mov	r1, r3
 8004444:	4620      	mov	r0, r4
 8004446:	f7fc fb65 	bl	8000b14 <__addsf3>
 800444a:	4603      	mov	r3, r0
 800444c:	4618      	mov	r0, r3
 800444e:	f006 ff5b 	bl	800b308 <sqrtf>
 8004452:	6438      	str	r0, [r7, #64]	; 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8004454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004456:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800445a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc fc60 	bl	8000d24 <__aeabi_fmul>
 8004464:	4603      	mov	r3, r0
 8004466:	461c      	mov	r4, r3
 8004468:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800446c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800446e:	f7fc fc59 	bl	8000d24 <__aeabi_fmul>
 8004472:	4603      	mov	r3, r0
 8004474:	4619      	mov	r1, r3
 8004476:	4620      	mov	r0, r4
 8004478:	f7fc fb4c 	bl	8000b14 <__addsf3>
 800447c:	4603      	mov	r3, r0
 800447e:	461c      	mov	r4, r3
 8004480:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004484:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8004488:	f7fc fc4c 	bl	8000d24 <__aeabi_fmul>
 800448c:	4603      	mov	r3, r0
 800448e:	4619      	mov	r1, r3
 8004490:	4620      	mov	r0, r4
 8004492:	f7fc fb3f 	bl	8000b14 <__addsf3>
 8004496:	4603      	mov	r3, r0
 8004498:	461c      	mov	r4, r3
 800449a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800449e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80044a0:	f7fc fc40 	bl	8000d24 <__aeabi_fmul>
 80044a4:	4603      	mov	r3, r0
 80044a6:	4619      	mov	r1, r3
 80044a8:	4620      	mov	r0, r4
 80044aa:	f7fc fb33 	bl	8000b14 <__addsf3>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461c      	mov	r4, r3
 80044b2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80044b4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80044b8:	f7fc fc34 	bl	8000d24 <__aeabi_fmul>
 80044bc:	4603      	mov	r3, r0
 80044be:	4619      	mov	r1, r3
 80044c0:	4620      	mov	r0, r4
 80044c2:	f7fc fb25 	bl	8000b10 <__aeabi_fsub>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461c      	mov	r4, r3
 80044ca:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80044ce:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80044d2:	f7fc fc27 	bl	8000d24 <__aeabi_fmul>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fc fc21 	bl	8000d24 <__aeabi_fmul>
 80044e2:	4603      	mov	r3, r0
 80044e4:	4619      	mov	r1, r3
 80044e6:	4620      	mov	r0, r4
 80044e8:	f7fc fb14 	bl	8000b14 <__addsf3>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461c      	mov	r4, r3
 80044f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044f2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80044f6:	f7fc fc15 	bl	8000d24 <__aeabi_fmul>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4619      	mov	r1, r3
 80044fe:	4620      	mov	r0, r4
 8004500:	f7fc fb06 	bl	8000b10 <__aeabi_fsub>
 8004504:	4603      	mov	r3, r0
 8004506:	461c      	mov	r4, r3
 8004508:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800450a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800450e:	f7fc fc09 	bl	8000d24 <__aeabi_fmul>
 8004512:	4603      	mov	r3, r0
 8004514:	4619      	mov	r1, r3
 8004516:	4620      	mov	r0, r4
 8004518:	f7fc fafc 	bl	8000b14 <__addsf3>
 800451c:	4603      	mov	r3, r0
 800451e:	63fb      	str	r3, [r7, #60]	; 0x3c
    _4bx = 2.0f * _2bx;
 8004520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004522:	4619      	mov	r1, r3
 8004524:	4618      	mov	r0, r3
 8004526:	f7fc faf5 	bl	8000b14 <__addsf3>
 800452a:	4603      	mov	r3, r0
 800452c:	63bb      	str	r3, [r7, #56]	; 0x38
    _4bz = 2.0f * _2bz;
 800452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004530:	4619      	mov	r1, r3
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc faee 	bl	8000b14 <__addsf3>
 8004538:	4603      	mov	r3, r0
 800453a:	637b      	str	r3, [r7, #52]	; 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800453c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004540:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8004544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004546:	4619      	mov	r1, r3
 8004548:	4618      	mov	r0, r3
 800454a:	f7fc fae3 	bl	8000b14 <__addsf3>
 800454e:	4603      	mov	r3, r0
 8004550:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004554:	4618      	mov	r0, r3
 8004556:	f7fc fadb 	bl	8000b10 <__aeabi_fsub>
 800455a:	4603      	mov	r3, r0
 800455c:	68f9      	ldr	r1, [r7, #12]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fc fad6 	bl	8000b10 <__aeabi_fsub>
 8004564:	4603      	mov	r3, r0
 8004566:	4619      	mov	r1, r3
 8004568:	4620      	mov	r0, r4
 800456a:	f7fc fbdb 	bl	8000d24 <__aeabi_fmul>
 800456e:	4603      	mov	r3, r0
 8004570:	461c      	mov	r4, r3
 8004572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004576:	4619      	mov	r1, r3
 8004578:	4618      	mov	r0, r3
 800457a:	f7fc facb 	bl	8000b14 <__addsf3>
 800457e:	4603      	mov	r3, r0
 8004580:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004584:	4618      	mov	r0, r3
 8004586:	f7fc fac5 	bl	8000b14 <__addsf3>
 800458a:	4603      	mov	r3, r0
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fc fabe 	bl	8000b10 <__aeabi_fsub>
 8004594:	4603      	mov	r3, r0
 8004596:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800459a:	4618      	mov	r0, r3
 800459c:	f7fc fbc2 	bl	8000d24 <__aeabi_fmul>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4619      	mov	r1, r3
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7fc fab5 	bl	8000b14 <__addsf3>
 80045aa:	4603      	mov	r3, r0
 80045ac:	461c      	mov	r4, r3
 80045ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80045b4:	f7fc fbb6 	bl	8000d24 <__aeabi_fmul>
 80045b8:	4603      	mov	r3, r0
 80045ba:	461d      	mov	r5, r3
 80045bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045be:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80045c2:	f7fc faa5 	bl	8000b10 <__aeabi_fsub>
 80045c6:	4603      	mov	r3, r0
 80045c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fc faa0 	bl	8000b10 <__aeabi_fsub>
 80045d0:	4603      	mov	r3, r0
 80045d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fc fba5 	bl	8000d24 <__aeabi_fmul>
 80045da:	4603      	mov	r3, r0
 80045dc:	461e      	mov	r6, r3
 80045de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045e2:	f7fc fa95 	bl	8000b10 <__aeabi_fsub>
 80045e6:	4603      	mov	r3, r0
 80045e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fb9a 	bl	8000d24 <__aeabi_fmul>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4619      	mov	r1, r3
 80045f4:	4630      	mov	r0, r6
 80045f6:	f7fc fa8d 	bl	8000b14 <__addsf3>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004600:	4618      	mov	r0, r3
 8004602:	f7fc fa85 	bl	8000b10 <__aeabi_fsub>
 8004606:	4603      	mov	r3, r0
 8004608:	4619      	mov	r1, r3
 800460a:	4628      	mov	r0, r5
 800460c:	f7fc fb8a 	bl	8000d24 <__aeabi_fmul>
 8004610:	4603      	mov	r3, r0
 8004612:	4619      	mov	r1, r3
 8004614:	4620      	mov	r0, r4
 8004616:	f7fc fa7b 	bl	8000b10 <__aeabi_fsub>
 800461a:	4603      	mov	r3, r0
 800461c:	461c      	mov	r4, r3
 800461e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004620:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004624:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004628:	4618      	mov	r0, r3
 800462a:	f7fc fb7b 	bl	8000d24 <__aeabi_fmul>
 800462e:	4603      	mov	r3, r0
 8004630:	461d      	mov	r5, r3
 8004632:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004636:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004638:	f7fc fb74 	bl	8000d24 <__aeabi_fmul>
 800463c:	4603      	mov	r3, r0
 800463e:	4619      	mov	r1, r3
 8004640:	4628      	mov	r0, r5
 8004642:	f7fc fa67 	bl	8000b14 <__addsf3>
 8004646:	4603      	mov	r3, r0
 8004648:	461d      	mov	r5, r3
 800464a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800464c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800464e:	f7fc fa5f 	bl	8000b10 <__aeabi_fsub>
 8004652:	4603      	mov	r3, r0
 8004654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004656:	4618      	mov	r0, r3
 8004658:	f7fc fb64 	bl	8000d24 <__aeabi_fmul>
 800465c:	4603      	mov	r3, r0
 800465e:	461e      	mov	r6, r3
 8004660:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004662:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004666:	f7fc fa55 	bl	8000b14 <__addsf3>
 800466a:	4603      	mov	r3, r0
 800466c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800466e:	4618      	mov	r0, r3
 8004670:	f7fc fb58 	bl	8000d24 <__aeabi_fmul>
 8004674:	4603      	mov	r3, r0
 8004676:	4619      	mov	r1, r3
 8004678:	4630      	mov	r0, r6
 800467a:	f7fc fa4b 	bl	8000b14 <__addsf3>
 800467e:	4603      	mov	r3, r0
 8004680:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004684:	4618      	mov	r0, r3
 8004686:	f7fc fa43 	bl	8000b10 <__aeabi_fsub>
 800468a:	4603      	mov	r3, r0
 800468c:	4619      	mov	r1, r3
 800468e:	4628      	mov	r0, r5
 8004690:	f7fc fb48 	bl	8000d24 <__aeabi_fmul>
 8004694:	4603      	mov	r3, r0
 8004696:	4619      	mov	r1, r3
 8004698:	4620      	mov	r0, r4
 800469a:	f7fc fa3b 	bl	8000b14 <__addsf3>
 800469e:	4603      	mov	r3, r0
 80046a0:	461c      	mov	r4, r3
 80046a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80046a8:	f7fc fb3c 	bl	8000d24 <__aeabi_fmul>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461d      	mov	r5, r3
 80046b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80046b2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80046b4:	f7fc fa2e 	bl	8000b14 <__addsf3>
 80046b8:	4603      	mov	r3, r0
 80046ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fc fb31 	bl	8000d24 <__aeabi_fmul>
 80046c2:	4603      	mov	r3, r0
 80046c4:	461e      	mov	r6, r3
 80046c6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80046c8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80046cc:	f7fc fa20 	bl	8000b10 <__aeabi_fsub>
 80046d0:	4603      	mov	r3, r0
 80046d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fc fa1b 	bl	8000b10 <__aeabi_fsub>
 80046da:	4603      	mov	r3, r0
 80046dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc fb20 	bl	8000d24 <__aeabi_fmul>
 80046e4:	4603      	mov	r3, r0
 80046e6:	4619      	mov	r1, r3
 80046e8:	4630      	mov	r0, r6
 80046ea:	f7fc fa13 	bl	8000b14 <__addsf3>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fc fa0b 	bl	8000b10 <__aeabi_fsub>
 80046fa:	4603      	mov	r3, r0
 80046fc:	4619      	mov	r1, r3
 80046fe:	4628      	mov	r0, r5
 8004700:	f7fc fb10 	bl	8000d24 <__aeabi_fmul>
 8004704:	4603      	mov	r3, r0
 8004706:	4619      	mov	r1, r3
 8004708:	4620      	mov	r0, r4
 800470a:	f7fc fa03 	bl	8000b14 <__addsf3>
 800470e:	4603      	mov	r3, r0
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	4619      	mov	r1, r3
 8004716:	4618      	mov	r0, r3
 8004718:	f7fc f9fc 	bl	8000b14 <__addsf3>
 800471c:	4603      	mov	r3, r0
 800471e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004722:	4618      	mov	r0, r3
 8004724:	f7fc f9f4 	bl	8000b10 <__aeabi_fsub>
 8004728:	4603      	mov	r3, r0
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fc f9ef 	bl	8000b10 <__aeabi_fsub>
 8004732:	4603      	mov	r3, r0
 8004734:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004738:	4618      	mov	r0, r3
 800473a:	f7fc faf3 	bl	8000d24 <__aeabi_fmul>
 800473e:	4603      	mov	r3, r0
 8004740:	461c      	mov	r4, r3
 8004742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004746:	4619      	mov	r1, r3
 8004748:	4618      	mov	r0, r3
 800474a:	f7fc f9e3 	bl	8000b14 <__addsf3>
 800474e:	4603      	mov	r3, r0
 8004750:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc f9dd 	bl	8000b14 <__addsf3>
 800475a:	4603      	mov	r3, r0
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fc f9d6 	bl	8000b10 <__aeabi_fsub>
 8004764:	4603      	mov	r3, r0
 8004766:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800476a:	4618      	mov	r0, r3
 800476c:	f7fc fada 	bl	8000d24 <__aeabi_fmul>
 8004770:	4603      	mov	r3, r0
 8004772:	4619      	mov	r1, r3
 8004774:	4620      	mov	r0, r4
 8004776:	f7fc f9cd 	bl	8000b14 <__addsf3>
 800477a:	4603      	mov	r3, r0
 800477c:	461c      	mov	r4, r3
 800477e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004782:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004786:	f7fc facd 	bl	8000d24 <__aeabi_fmul>
 800478a:	4603      	mov	r3, r0
 800478c:	461d      	mov	r5, r3
 800478e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004790:	4619      	mov	r1, r3
 8004792:	4618      	mov	r0, r3
 8004794:	f7fc f9be 	bl	8000b14 <__addsf3>
 8004798:	4603      	mov	r3, r0
 800479a:	4619      	mov	r1, r3
 800479c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80047a0:	f7fc f9b6 	bl	8000b10 <__aeabi_fsub>
 80047a4:	4603      	mov	r3, r0
 80047a6:	461e      	mov	r6, r3
 80047a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047aa:	4619      	mov	r1, r3
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fc f9b1 	bl	8000b14 <__addsf3>
 80047b2:	4603      	mov	r3, r0
 80047b4:	4619      	mov	r1, r3
 80047b6:	4630      	mov	r0, r6
 80047b8:	f7fc f9aa 	bl	8000b10 <__aeabi_fsub>
 80047bc:	4603      	mov	r3, r0
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fc f9a5 	bl	8000b10 <__aeabi_fsub>
 80047c6:	4603      	mov	r3, r0
 80047c8:	4619      	mov	r1, r3
 80047ca:	4628      	mov	r0, r5
 80047cc:	f7fc faaa 	bl	8000d24 <__aeabi_fmul>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4619      	mov	r1, r3
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7fc f99b 	bl	8000b10 <__aeabi_fsub>
 80047da:	4603      	mov	r3, r0
 80047dc:	461c      	mov	r4, r3
 80047de:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80047e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80047e4:	f7fc fa9e 	bl	8000d24 <__aeabi_fmul>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461d      	mov	r5, r3
 80047ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047ee:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80047f2:	f7fc f98d 	bl	8000b10 <__aeabi_fsub>
 80047f6:	4603      	mov	r3, r0
 80047f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc f988 	bl	8000b10 <__aeabi_fsub>
 8004800:	4603      	mov	r3, r0
 8004802:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc fa8d 	bl	8000d24 <__aeabi_fmul>
 800480a:	4603      	mov	r3, r0
 800480c:	461e      	mov	r6, r3
 800480e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004810:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004812:	f7fc f97d 	bl	8000b10 <__aeabi_fsub>
 8004816:	4603      	mov	r3, r0
 8004818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc fa82 	bl	8000d24 <__aeabi_fmul>
 8004820:	4603      	mov	r3, r0
 8004822:	4619      	mov	r1, r3
 8004824:	4630      	mov	r0, r6
 8004826:	f7fc f975 	bl	8000b14 <__addsf3>
 800482a:	4603      	mov	r3, r0
 800482c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004830:	4618      	mov	r0, r3
 8004832:	f7fc f96d 	bl	8000b10 <__aeabi_fsub>
 8004836:	4603      	mov	r3, r0
 8004838:	4619      	mov	r1, r3
 800483a:	4628      	mov	r0, r5
 800483c:	f7fc fa72 	bl	8000d24 <__aeabi_fmul>
 8004840:	4603      	mov	r3, r0
 8004842:	4619      	mov	r1, r3
 8004844:	4620      	mov	r0, r4
 8004846:	f7fc f965 	bl	8000b14 <__addsf3>
 800484a:	4603      	mov	r3, r0
 800484c:	461c      	mov	r4, r3
 800484e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004852:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004854:	f7fc fa66 	bl	8000d24 <__aeabi_fmul>
 8004858:	4603      	mov	r3, r0
 800485a:	461d      	mov	r5, r3
 800485c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004860:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004862:	f7fc fa5f 	bl	8000d24 <__aeabi_fmul>
 8004866:	4603      	mov	r3, r0
 8004868:	4619      	mov	r1, r3
 800486a:	4628      	mov	r0, r5
 800486c:	f7fc f952 	bl	8000b14 <__addsf3>
 8004870:	4603      	mov	r3, r0
 8004872:	461d      	mov	r5, r3
 8004874:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004876:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004878:	f7fc f94a 	bl	8000b10 <__aeabi_fsub>
 800487c:	4603      	mov	r3, r0
 800487e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004880:	4618      	mov	r0, r3
 8004882:	f7fc fa4f 	bl	8000d24 <__aeabi_fmul>
 8004886:	4603      	mov	r3, r0
 8004888:	461e      	mov	r6, r3
 800488a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800488c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004890:	f7fc f940 	bl	8000b14 <__addsf3>
 8004894:	4603      	mov	r3, r0
 8004896:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004898:	4618      	mov	r0, r3
 800489a:	f7fc fa43 	bl	8000d24 <__aeabi_fmul>
 800489e:	4603      	mov	r3, r0
 80048a0:	4619      	mov	r1, r3
 80048a2:	4630      	mov	r0, r6
 80048a4:	f7fc f936 	bl	8000b14 <__addsf3>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fc f92e 	bl	8000b10 <__aeabi_fsub>
 80048b4:	4603      	mov	r3, r0
 80048b6:	4619      	mov	r1, r3
 80048b8:	4628      	mov	r0, r5
 80048ba:	f7fc fa33 	bl	8000d24 <__aeabi_fmul>
 80048be:	4603      	mov	r3, r0
 80048c0:	4619      	mov	r1, r3
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7fc f926 	bl	8000b14 <__addsf3>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461c      	mov	r4, r3
 80048cc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80048d0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80048d2:	f7fc fa27 	bl	8000d24 <__aeabi_fmul>
 80048d6:	4603      	mov	r3, r0
 80048d8:	461d      	mov	r5, r3
 80048da:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80048de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048e0:	f7fc fa20 	bl	8000d24 <__aeabi_fmul>
 80048e4:	4603      	mov	r3, r0
 80048e6:	4619      	mov	r1, r3
 80048e8:	4628      	mov	r0, r5
 80048ea:	f7fc f911 	bl	8000b10 <__aeabi_fsub>
 80048ee:	4603      	mov	r3, r0
 80048f0:	461d      	mov	r5, r3
 80048f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80048f4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80048f6:	f7fc f90d 	bl	8000b14 <__addsf3>
 80048fa:	4603      	mov	r3, r0
 80048fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc fa10 	bl	8000d24 <__aeabi_fmul>
 8004904:	4603      	mov	r3, r0
 8004906:	461e      	mov	r6, r3
 8004908:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800490a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800490e:	f7fc f8ff 	bl	8000b10 <__aeabi_fsub>
 8004912:	4603      	mov	r3, r0
 8004914:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc f8fa 	bl	8000b10 <__aeabi_fsub>
 800491c:	4603      	mov	r3, r0
 800491e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004920:	4618      	mov	r0, r3
 8004922:	f7fc f9ff 	bl	8000d24 <__aeabi_fmul>
 8004926:	4603      	mov	r3, r0
 8004928:	4619      	mov	r1, r3
 800492a:	4630      	mov	r0, r6
 800492c:	f7fc f8f2 	bl	8000b14 <__addsf3>
 8004930:	4603      	mov	r3, r0
 8004932:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004936:	4618      	mov	r0, r3
 8004938:	f7fc f8ea 	bl	8000b10 <__aeabi_fsub>
 800493c:	4603      	mov	r3, r0
 800493e:	4619      	mov	r1, r3
 8004940:	4628      	mov	r0, r5
 8004942:	f7fc f9ef 	bl	8000d24 <__aeabi_fmul>
 8004946:	4603      	mov	r3, r0
 8004948:	4619      	mov	r1, r3
 800494a:	4620      	mov	r0, r4
 800494c:	f7fc f8e2 	bl	8000b14 <__addsf3>
 8004950:	4603      	mov	r3, r0
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004958:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800495c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495e:	4619      	mov	r1, r3
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc f8d7 	bl	8000b14 <__addsf3>
 8004966:	4603      	mov	r3, r0
 8004968:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800496c:	4618      	mov	r0, r3
 800496e:	f7fc f8cf 	bl	8000b10 <__aeabi_fsub>
 8004972:	4603      	mov	r3, r0
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	4618      	mov	r0, r3
 8004978:	f7fc f8ca 	bl	8000b10 <__aeabi_fsub>
 800497c:	4603      	mov	r3, r0
 800497e:	4619      	mov	r1, r3
 8004980:	4620      	mov	r0, r4
 8004982:	f7fc f9cf 	bl	8000d24 <__aeabi_fmul>
 8004986:	4603      	mov	r3, r0
 8004988:	461c      	mov	r4, r3
 800498a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800498e:	4619      	mov	r1, r3
 8004990:	4618      	mov	r0, r3
 8004992:	f7fc f8bf 	bl	8000b14 <__addsf3>
 8004996:	4603      	mov	r3, r0
 8004998:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800499c:	4618      	mov	r0, r3
 800499e:	f7fc f8b9 	bl	8000b14 <__addsf3>
 80049a2:	4603      	mov	r3, r0
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc f8b2 	bl	8000b10 <__aeabi_fsub>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fc f9b6 	bl	8000d24 <__aeabi_fmul>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4619      	mov	r1, r3
 80049bc:	4620      	mov	r0, r4
 80049be:	f7fc f8a9 	bl	8000b14 <__addsf3>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461c      	mov	r4, r3
 80049c6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80049ca:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80049ce:	f7fc f9a9 	bl	8000d24 <__aeabi_fmul>
 80049d2:	4603      	mov	r3, r0
 80049d4:	461d      	mov	r5, r3
 80049d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d8:	4619      	mov	r1, r3
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fc f89a 	bl	8000b14 <__addsf3>
 80049e0:	4603      	mov	r3, r0
 80049e2:	4619      	mov	r1, r3
 80049e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80049e8:	f7fc f892 	bl	8000b10 <__aeabi_fsub>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461e      	mov	r6, r3
 80049f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049f2:	4619      	mov	r1, r3
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fc f88d 	bl	8000b14 <__addsf3>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4619      	mov	r1, r3
 80049fe:	4630      	mov	r0, r6
 8004a00:	f7fc f886 	bl	8000b10 <__aeabi_fsub>
 8004a04:	4603      	mov	r3, r0
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fc f881 	bl	8000b10 <__aeabi_fsub>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4619      	mov	r1, r3
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7fc f986 	bl	8000d24 <__aeabi_fmul>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f7fc f877 	bl	8000b10 <__aeabi_fsub>
 8004a22:	4603      	mov	r3, r0
 8004a24:	461c      	mov	r4, r3
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004a2c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fc f977 	bl	8000d24 <__aeabi_fmul>
 8004a36:	4603      	mov	r3, r0
 8004a38:	461d      	mov	r5, r3
 8004a3a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004a3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a40:	f7fc f970 	bl	8000d24 <__aeabi_fmul>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4619      	mov	r1, r3
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f7fc f861 	bl	8000b10 <__aeabi_fsub>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	461d      	mov	r5, r3
 8004a52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a54:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004a58:	f7fc f85a 	bl	8000b10 <__aeabi_fsub>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fc f855 	bl	8000b10 <__aeabi_fsub>
 8004a66:	4603      	mov	r3, r0
 8004a68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fc f95a 	bl	8000d24 <__aeabi_fmul>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461e      	mov	r6, r3
 8004a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a78:	f7fc f84a 	bl	8000b10 <__aeabi_fsub>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fc f94f 	bl	8000d24 <__aeabi_fmul>
 8004a86:	4603      	mov	r3, r0
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	f7fc f842 	bl	8000b14 <__addsf3>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fc f83a 	bl	8000b10 <__aeabi_fsub>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f7fc f93f 	bl	8000d24 <__aeabi_fmul>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7fc f832 	bl	8000b14 <__addsf3>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	461c      	mov	r4, r3
 8004ab4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004ab8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004aba:	f7fc f933 	bl	8000d24 <__aeabi_fmul>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	461d      	mov	r5, r3
 8004ac2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004ac6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ac8:	f7fc f92c 	bl	8000d24 <__aeabi_fmul>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f7fc f81f 	bl	8000b14 <__addsf3>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	461d      	mov	r5, r3
 8004ada:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004adc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004ade:	f7fc f817 	bl	8000b10 <__aeabi_fsub>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fc f91c 	bl	8000d24 <__aeabi_fmul>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461e      	mov	r6, r3
 8004af0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004af2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004af6:	f7fc f80d 	bl	8000b14 <__addsf3>
 8004afa:	4603      	mov	r3, r0
 8004afc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fc f910 	bl	8000d24 <__aeabi_fmul>
 8004b04:	4603      	mov	r3, r0
 8004b06:	4619      	mov	r1, r3
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f7fc f803 	bl	8000b14 <__addsf3>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fb fffb 	bl	8000b10 <__aeabi_fsub>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f7fc f900 	bl	8000d24 <__aeabi_fmul>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4619      	mov	r1, r3
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f7fb fff3 	bl	8000b14 <__addsf3>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	461c      	mov	r4, r3
 8004b32:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004b36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004b38:	f7fc f8f4 	bl	8000d24 <__aeabi_fmul>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461d      	mov	r5, r3
 8004b40:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b46:	f7fc f8ed 	bl	8000d24 <__aeabi_fmul>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7fb ffde 	bl	8000b10 <__aeabi_fsub>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461d      	mov	r5, r3
 8004b58:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004b5a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004b5c:	f7fb ffda 	bl	8000b14 <__addsf3>
 8004b60:	4603      	mov	r3, r0
 8004b62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fc f8dd 	bl	8000d24 <__aeabi_fmul>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	461e      	mov	r6, r3
 8004b6e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004b70:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004b74:	f7fb ffcc 	bl	8000b10 <__aeabi_fsub>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fb ffc7 	bl	8000b10 <__aeabi_fsub>
 8004b82:	4603      	mov	r3, r0
 8004b84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fc f8cc 	bl	8000d24 <__aeabi_fmul>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4630      	mov	r0, r6
 8004b92:	f7fb ffbf 	bl	8000b14 <__addsf3>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fb ffb7 	bl	8000b10 <__aeabi_fsub>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f7fc f8bc 	bl	8000d24 <__aeabi_fmul>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7fb ffaf 	bl	8000b14 <__addsf3>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fb ffa8 	bl	8000b14 <__addsf3>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fb ffa0 	bl	8000b10 <__aeabi_fsub>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fb ff9b 	bl	8000b10 <__aeabi_fsub>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fc f89f 	bl	8000d24 <__aeabi_fmul>
 8004be6:	4603      	mov	r3, r0
 8004be8:	461c      	mov	r4, r3
 8004bea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fb ff8f 	bl	8000b14 <__addsf3>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fb ff89 	bl	8000b14 <__addsf3>
 8004c02:	4603      	mov	r3, r0
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fb ff82 	bl	8000b10 <__aeabi_fsub>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fc f886 	bl	8000d24 <__aeabi_fmul>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f7fb ff79 	bl	8000b14 <__addsf3>
 8004c22:	4603      	mov	r3, r0
 8004c24:	461c      	mov	r4, r3
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004c2c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fc f877 	bl	8000d24 <__aeabi_fmul>
 8004c36:	4603      	mov	r3, r0
 8004c38:	461d      	mov	r5, r3
 8004c3a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004c3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c40:	f7fc f870 	bl	8000d24 <__aeabi_fmul>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4619      	mov	r1, r3
 8004c48:	4628      	mov	r0, r5
 8004c4a:	f7fb ff63 	bl	8000b14 <__addsf3>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461d      	mov	r5, r3
 8004c52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c54:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004c58:	f7fb ff5a 	bl	8000b10 <__aeabi_fsub>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fb ff55 	bl	8000b10 <__aeabi_fsub>
 8004c66:	4603      	mov	r3, r0
 8004c68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fc f85a 	bl	8000d24 <__aeabi_fmul>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461e      	mov	r6, r3
 8004c74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c78:	f7fb ff4a 	bl	8000b10 <__aeabi_fsub>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fc f84f 	bl	8000d24 <__aeabi_fmul>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7fb ff42 	bl	8000b14 <__addsf3>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fb ff3a 	bl	8000b10 <__aeabi_fsub>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f7fc f83f 	bl	8000d24 <__aeabi_fmul>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7fb ff32 	bl	8000b14 <__addsf3>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461c      	mov	r4, r3
 8004cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004cba:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fc f830 	bl	8000d24 <__aeabi_fmul>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ccc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004cce:	f7fc f829 	bl	8000d24 <__aeabi_fmul>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f7fb ff1c 	bl	8000b14 <__addsf3>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	461d      	mov	r5, r3
 8004ce0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004ce2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004ce4:	f7fb ff14 	bl	8000b10 <__aeabi_fsub>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fc f819 	bl	8000d24 <__aeabi_fmul>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461e      	mov	r6, r3
 8004cf6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004cf8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004cfc:	f7fb ff0a 	bl	8000b14 <__addsf3>
 8004d00:	4603      	mov	r3, r0
 8004d02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fc f80d 	bl	8000d24 <__aeabi_fmul>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f7fb ff00 	bl	8000b14 <__addsf3>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fb fef8 	bl	8000b10 <__aeabi_fsub>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4619      	mov	r1, r3
 8004d24:	4628      	mov	r0, r5
 8004d26:	f7fb fffd 	bl	8000d24 <__aeabi_fmul>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f7fb fef0 	bl	8000b14 <__addsf3>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461c      	mov	r4, r3
 8004d38:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004d3c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d3e:	f7fb fff1 	bl	8000d24 <__aeabi_fmul>
 8004d42:	4603      	mov	r3, r0
 8004d44:	461d      	mov	r5, r3
 8004d46:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004d48:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004d4a:	f7fb fee3 	bl	8000b14 <__addsf3>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb ffe6 	bl	8000d24 <__aeabi_fmul>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	461e      	mov	r6, r3
 8004d5c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004d5e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004d62:	f7fb fed5 	bl	8000b10 <__aeabi_fsub>
 8004d66:	4603      	mov	r3, r0
 8004d68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fb fed0 	bl	8000b10 <__aeabi_fsub>
 8004d70:	4603      	mov	r3, r0
 8004d72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fb ffd5 	bl	8000d24 <__aeabi_fmul>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f7fb fec8 	bl	8000b14 <__addsf3>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fb fec0 	bl	8000b10 <__aeabi_fsub>
 8004d90:	4603      	mov	r3, r0
 8004d92:	4619      	mov	r1, r3
 8004d94:	4628      	mov	r0, r5
 8004d96:	f7fb ffc5 	bl	8000d24 <__aeabi_fmul>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7fb feb8 	bl	8000b14 <__addsf3>
 8004da4:	4603      	mov	r3, r0
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8004da8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dac:	f7fb ffba 	bl	8000d24 <__aeabi_fmul>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461c      	mov	r4, r3
 8004db4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004db8:	f7fb ffb4 	bl	8000d24 <__aeabi_fmul>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7fb fea7 	bl	8000b14 <__addsf3>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461c      	mov	r4, r3
 8004dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dce:	f7fb ffa9 	bl	8000d24 <__aeabi_fmul>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f7fb fe9c 	bl	8000b14 <__addsf3>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	461c      	mov	r4, r3
 8004de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004de2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004de4:	f7fb ff9e 	bl	8000d24 <__aeabi_fmul>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4619      	mov	r1, r3
 8004dec:	4620      	mov	r0, r4
 8004dee:	f7fb fe91 	bl	8000b14 <__addsf3>
 8004df2:	4603      	mov	r3, r0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f006 fa87 	bl	800b308 <sqrtf>
 8004dfa:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 8004dfc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004dfe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004e02:	f7fc f843 	bl	8000e8c <__aeabi_fdiv>
 8004e06:	4603      	mov	r3, r0
 8004e08:	65fb      	str	r3, [r7, #92]	; 0x5c
    s1 *= norm;
 8004e0a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e0e:	f7fb ff89 	bl	8000d24 <__aeabi_fmul>
 8004e12:	4603      	mov	r3, r0
 8004e14:	633b      	str	r3, [r7, #48]	; 0x30
    s2 *= norm;
 8004e16:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e1a:	f7fb ff83 	bl	8000d24 <__aeabi_fmul>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 *= norm;
 8004e22:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e26:	f7fb ff7d 	bl	8000d24 <__aeabi_fmul>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 *= norm;
 8004e2e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e32:	f7fb ff77 	bl	8000d24 <__aeabi_fmul>
 8004e36:	4603      	mov	r3, r0
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8004e3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb ff6d 	bl	8000d24 <__aeabi_fmul>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461c      	mov	r4, r3
 8004e4e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004e52:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004e56:	f7fb ff65 	bl	8000d24 <__aeabi_fmul>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f7fb fe56 	bl	8000b10 <__aeabi_fsub>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461c      	mov	r4, r3
 8004e68:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004e6c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004e70:	f7fb ff58 	bl	8000d24 <__aeabi_fmul>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4619      	mov	r1, r3
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f7fb fe49 	bl	8000b10 <__aeabi_fsub>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb ff4d 	bl	8000d24 <__aeabi_fmul>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	461c      	mov	r4, r3
 8004e8e:	4ba4      	ldr	r3, [pc, #656]	; (8005120 <QuaternionUpdate+0x1178>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fb ff45 	bl	8000d24 <__aeabi_fmul>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f7fb fe36 	bl	8000b10 <__aeabi_fsub>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004eae:	f7fb ff39 	bl	8000d24 <__aeabi_fmul>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	461c      	mov	r4, r3
 8004eb6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004eba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004ebe:	f7fb ff31 	bl	8000d24 <__aeabi_fmul>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7fb fe24 	bl	8000b14 <__addsf3>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461c      	mov	r4, r3
 8004ed0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004ed4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004ed8:	f7fb ff24 	bl	8000d24 <__aeabi_fmul>
 8004edc:	4603      	mov	r3, r0
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f7fb fe15 	bl	8000b10 <__aeabi_fsub>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fb ff19 	bl	8000d24 <__aeabi_fmul>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	461c      	mov	r4, r3
 8004ef6:	4b8a      	ldr	r3, [pc, #552]	; (8005120 <QuaternionUpdate+0x1178>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fb ff11 	bl	8000d24 <__aeabi_fmul>
 8004f02:	4603      	mov	r3, r0
 8004f04:	4619      	mov	r1, r3
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7fb fe02 	bl	8000b10 <__aeabi_fsub>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8004f10:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004f14:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004f18:	f7fb ff04 	bl	8000d24 <__aeabi_fmul>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461c      	mov	r4, r3
 8004f20:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004f24:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004f28:	f7fb fefc 	bl	8000d24 <__aeabi_fmul>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4620      	mov	r0, r4
 8004f32:	f7fb fded 	bl	8000b10 <__aeabi_fsub>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461c      	mov	r4, r3
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004f40:	f7fb fef0 	bl	8000d24 <__aeabi_fmul>
 8004f44:	4603      	mov	r3, r0
 8004f46:	4619      	mov	r1, r3
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f7fb fde3 	bl	8000b14 <__addsf3>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fb fee5 	bl	8000d24 <__aeabi_fmul>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	461c      	mov	r4, r3
 8004f5e:	4b70      	ldr	r3, [pc, #448]	; (8005120 <QuaternionUpdate+0x1178>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fb fedd 	bl	8000d24 <__aeabi_fmul>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f7fb fdce 	bl	8000b10 <__aeabi_fsub>
 8004f74:	4603      	mov	r3, r0
 8004f76:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8004f78:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004f7c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004f80:	f7fb fed0 	bl	8000d24 <__aeabi_fmul>
 8004f84:	4603      	mov	r3, r0
 8004f86:	461c      	mov	r4, r3
 8004f88:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004f8c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004f90:	f7fb fec8 	bl	8000d24 <__aeabi_fmul>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4619      	mov	r1, r3
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f7fb fdbb 	bl	8000b14 <__addsf3>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461c      	mov	r4, r3
 8004fa2:	6839      	ldr	r1, [r7, #0]
 8004fa4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004fa8:	f7fb febc 	bl	8000d24 <__aeabi_fmul>
 8004fac:	4603      	mov	r3, r0
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f7fb fdad 	bl	8000b10 <__aeabi_fsub>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fb feb1 	bl	8000d24 <__aeabi_fmul>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	461c      	mov	r4, r3
 8004fc6:	4b56      	ldr	r3, [pc, #344]	; (8005120 <QuaternionUpdate+0x1178>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fb fea9 	bl	8000d24 <__aeabi_fmul>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7fb fd9a 	bl	8000b10 <__aeabi_fsub>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8004fe0:	4b50      	ldr	r3, [pc, #320]	; (8005124 <QuaternionUpdate+0x117c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a39      	ldr	r1, [r7, #32]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fb fe9c 	bl	8000d24 <__aeabi_fmul>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004ff4:	f7fb fd8e 	bl	8000b14 <__addsf3>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q2 += qDot2 * deltat;
 8004ffe:	4b49      	ldr	r3, [pc, #292]	; (8005124 <QuaternionUpdate+0x117c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69f9      	ldr	r1, [r7, #28]
 8005004:	4618      	mov	r0, r3
 8005006:	f7fb fe8d 	bl	8000d24 <__aeabi_fmul>
 800500a:	4603      	mov	r3, r0
 800500c:	4619      	mov	r1, r3
 800500e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8005012:	f7fb fd7f 	bl	8000b14 <__addsf3>
 8005016:	4603      	mov	r3, r0
 8005018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q3 += qDot3 * deltat;
 800501c:	4b41      	ldr	r3, [pc, #260]	; (8005124 <QuaternionUpdate+0x117c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69b9      	ldr	r1, [r7, #24]
 8005022:	4618      	mov	r0, r3
 8005024:	f7fb fe7e 	bl	8000d24 <__aeabi_fmul>
 8005028:	4603      	mov	r3, r0
 800502a:	4619      	mov	r1, r3
 800502c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8005030:	f7fb fd70 	bl	8000b14 <__addsf3>
 8005034:	4603      	mov	r3, r0
 8005036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q4 += qDot4 * deltat;
 800503a:	4b3a      	ldr	r3, [pc, #232]	; (8005124 <QuaternionUpdate+0x117c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6979      	ldr	r1, [r7, #20]
 8005040:	4618      	mov	r0, r3
 8005042:	f7fb fe6f 	bl	8000d24 <__aeabi_fmul>
 8005046:	4603      	mov	r3, r0
 8005048:	4619      	mov	r1, r3
 800504a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800504e:	f7fb fd61 	bl	8000b14 <__addsf3>
 8005052:	4603      	mov	r3, r0
 8005054:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8005058:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800505c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005060:	f7fb fe60 	bl	8000d24 <__aeabi_fmul>
 8005064:	4603      	mov	r3, r0
 8005066:	461c      	mov	r4, r3
 8005068:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800506c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8005070:	f7fb fe58 	bl	8000d24 <__aeabi_fmul>
 8005074:	4603      	mov	r3, r0
 8005076:	4619      	mov	r1, r3
 8005078:	4620      	mov	r0, r4
 800507a:	f7fb fd4b 	bl	8000b14 <__addsf3>
 800507e:	4603      	mov	r3, r0
 8005080:	461c      	mov	r4, r3
 8005082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005086:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800508a:	f7fb fe4b 	bl	8000d24 <__aeabi_fmul>
 800508e:	4603      	mov	r3, r0
 8005090:	4619      	mov	r1, r3
 8005092:	4620      	mov	r0, r4
 8005094:	f7fb fd3e 	bl	8000b14 <__addsf3>
 8005098:	4603      	mov	r3, r0
 800509a:	461c      	mov	r4, r3
 800509c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80050a0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80050a4:	f7fb fe3e 	bl	8000d24 <__aeabi_fmul>
 80050a8:	4603      	mov	r3, r0
 80050aa:	4619      	mov	r1, r3
 80050ac:	4620      	mov	r0, r4
 80050ae:	f7fb fd31 	bl	8000b14 <__addsf3>
 80050b2:	4603      	mov	r3, r0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f006 f927 	bl	800b308 <sqrtf>
 80050ba:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 80050bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80050be:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80050c2:	f7fb fee3 	bl	8000e8c <__aeabi_fdiv>
 80050c6:	4603      	mov	r3, r0
 80050c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    q[0] = q1 * norm;
 80050ca:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80050cc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80050d0:	f7fb fe28 	bl	8000d24 <__aeabi_fmul>
 80050d4:	4603      	mov	r3, r0
 80050d6:	461a      	mov	r2, r3
 80050d8:	4b13      	ldr	r3, [pc, #76]	; (8005128 <QuaternionUpdate+0x1180>)
 80050da:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 80050dc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80050de:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80050e2:	f7fb fe1f 	bl	8000d24 <__aeabi_fmul>
 80050e6:	4603      	mov	r3, r0
 80050e8:	461a      	mov	r2, r3
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <QuaternionUpdate+0x1180>)
 80050ec:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 80050ee:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80050f0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80050f4:	f7fb fe16 	bl	8000d24 <__aeabi_fmul>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <QuaternionUpdate+0x1180>)
 80050fe:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 8005100:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005102:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8005106:	f7fb fe0d 	bl	8000d24 <__aeabi_fmul>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <QuaternionUpdate+0x1180>)
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	e002      	b.n	800511a <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8005114:	bf00      	nop
 8005116:	e000      	b.n	800511a <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8005118:	bf00      	nop

}
 800511a:	37b4      	adds	r7, #180	; 0xb4
 800511c:	46bd      	mov	sp, r7
 800511e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005120:	2000000c 	.word	0x2000000c
 8005124:	2000013c 	.word	0x2000013c
 8005128:	20000010 	.word	0x20000010

0800512c <nRF24_CSN_L>:
{
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L()
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8005130:	2200      	movs	r2, #0
 8005132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005136:	4802      	ldr	r0, [pc, #8]	; (8005140 <nRF24_CSN_L+0x14>)
 8005138:	f001 fe54 	bl	8006de4 <HAL_GPIO_WritePin>
}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40010c00 	.word	0x40010c00

08005144 <nRF24_CSN_H>:

static inline void nRF24_CSN_H()
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8005148:	2201      	movs	r2, #1
 800514a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800514e:	4802      	ldr	r0, [pc, #8]	; (8005158 <nRF24_CSN_H+0x14>)
 8005150:	f001 fe48 	bl	8006de4 <HAL_GPIO_WritePin>
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40010c00 	.word	0x40010c00

0800515c <nRF24_LL_RW>:

static inline uint8_t nRF24_LL_RW(uint8_t data)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af02      	add	r7, sp, #8
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if (HAL_SPI_TransmitReceive(&hspi2, &data, &result, 1, 2000) != HAL_OK)
 8005166:	f107 020f 	add.w	r2, r7, #15
 800516a:	1df9      	adds	r1, r7, #7
 800516c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	2301      	movs	r3, #1
 8005174:	4806      	ldr	r0, [pc, #24]	; (8005190 <nRF24_LL_RW+0x34>)
 8005176:	f003 faf5 	bl	8008764 <HAL_SPI_TransmitReceive>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <nRF24_LL_RW+0x28>
    {
        Error_Handler();
 8005180:	f7fc fc74 	bl	8001a6c <Error_Handler>
    };
    return result;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000188 	.word	0x20000188

08005194 <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800519e:	f7ff ffc5 	bl	800512c <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff ffd6 	bl	800515c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80051b0:	20ff      	movs	r0, #255	; 0xff
 80051b2:	f7ff ffd3 	bl	800515c <nRF24_LL_RW>
 80051b6:	4603      	mov	r3, r0
 80051b8:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80051ba:	f7ff ffc3 	bl	8005144 <nRF24_CSN_H>

	return value;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	460a      	mov	r2, r1
 80051d2:	71fb      	strb	r3, [r7, #7]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80051d8:	f7ff ffa8 	bl	800512c <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	2b1f      	cmp	r3, #31
 80051e0:	d810      	bhi.n	8005204 <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80051e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	b25b      	sxtb	r3, r3
 80051ec:	f043 0320 	orr.w	r3, r3, #32
 80051f0:	b25b      	sxtb	r3, r3
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff ffb1 	bl	800515c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80051fa:	79bb      	ldrb	r3, [r7, #6]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff ffad 	bl	800515c <nRF24_LL_RW>
 8005202:	e013      	b.n	800522c <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff ffa8 	bl	800515c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	2be1      	cmp	r3, #225	; 0xe1
 8005210:	d00c      	beq.n	800522c <nRF24_WriteReg+0x64>
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	2be2      	cmp	r3, #226	; 0xe2
 8005216:	d009      	beq.n	800522c <nRF24_WriteReg+0x64>
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	2be3      	cmp	r3, #227	; 0xe3
 800521c:	d006      	beq.n	800522c <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	2bff      	cmp	r3, #255	; 0xff
 8005222:	d003      	beq.n	800522c <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 8005224:	79bb      	ldrb	r3, [r7, #6]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff ff98 	bl	800515c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800522c:	f7ff ff8a 	bl	8005144 <nRF24_CSN_H>
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8005238:	b590      	push	{r4, r7, lr}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	6039      	str	r1, [r7, #0]
 8005242:	71fb      	strb	r3, [r7, #7]
 8005244:	4613      	mov	r3, r2
 8005246:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8005248:	f7ff ff70 	bl	800512c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff ff84 	bl	800515c <nRF24_LL_RW>
	while (count--)
 8005254:	e007      	b.n	8005266 <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8005256:	683c      	ldr	r4, [r7, #0]
 8005258:	1c63      	adds	r3, r4, #1
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	20ff      	movs	r0, #255	; 0xff
 800525e:	f7ff ff7d 	bl	800515c <nRF24_LL_RW>
 8005262:	4603      	mov	r3, r0
 8005264:	7023      	strb	r3, [r4, #0]
	while (count--)
 8005266:	79bb      	ldrb	r3, [r7, #6]
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	71ba      	strb	r2, [r7, #6]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f2      	bne.n	8005256 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8005270:	f7ff ff68 	bl	8005144 <nRF24_CSN_H>
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	bd90      	pop	{r4, r7, pc}

0800527c <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	6039      	str	r1, [r7, #0]
 8005286:	71fb      	strb	r3, [r7, #7]
 8005288:	4613      	mov	r3, r2
 800528a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800528c:	f7ff ff4e 	bl	800512c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ff62 	bl	800515c <nRF24_LL_RW>
	while (count--)
 8005298:	e006      	b.n	80052a8 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	603a      	str	r2, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff ff5a 	bl	800515c <nRF24_LL_RW>
	while (count--)
 80052a8:	79bb      	ldrb	r3, [r7, #6]
 80052aa:	1e5a      	subs	r2, r3, #1
 80052ac:	71ba      	strb	r2, [r7, #6]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f3      	bne.n	800529a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80052b2:	f7ff ff47 	bl	8005144 <nRF24_CSN_H>
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 80052c2:	2108      	movs	r1, #8
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7ff ff7f 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 80052ca:	213f      	movs	r1, #63	; 0x3f
 80052cc:	2001      	movs	r0, #1
 80052ce:	f7ff ff7b 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 80052d2:	2103      	movs	r1, #3
 80052d4:	2002      	movs	r0, #2
 80052d6:	f7ff ff77 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 80052da:	2103      	movs	r1, #3
 80052dc:	2003      	movs	r0, #3
 80052de:	f7ff ff73 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 80052e2:	2103      	movs	r1, #3
 80052e4:	2004      	movs	r0, #4
 80052e6:	f7ff ff6f 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 80052ea:	2102      	movs	r1, #2
 80052ec:	2005      	movs	r0, #5
 80052ee:	f7ff ff6b 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 80052f2:	210e      	movs	r1, #14
 80052f4:	2006      	movs	r0, #6
 80052f6:	f7ff ff67 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80052fa:	2100      	movs	r1, #0
 80052fc:	2007      	movs	r0, #7
 80052fe:	f7ff ff63 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8005302:	2100      	movs	r1, #0
 8005304:	2011      	movs	r0, #17
 8005306:	f7ff ff5f 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800530a:	2100      	movs	r1, #0
 800530c:	2012      	movs	r0, #18
 800530e:	f7ff ff5b 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8005312:	2100      	movs	r1, #0
 8005314:	2013      	movs	r0, #19
 8005316:	f7ff ff57 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800531a:	2100      	movs	r1, #0
 800531c:	2014      	movs	r0, #20
 800531e:	f7ff ff53 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8005322:	2100      	movs	r1, #0
 8005324:	2015      	movs	r0, #21
 8005326:	f7ff ff4f 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800532a:	2100      	movs	r1, #0
 800532c:	2016      	movs	r0, #22
 800532e:	f7ff ff4b 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8005332:	2100      	movs	r1, #0
 8005334:	201c      	movs	r0, #28
 8005336:	f7ff ff47 	bl	80051c8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800533a:	2100      	movs	r1, #0
 800533c:	201d      	movs	r0, #29
 800533e:	f7ff ff43 	bl	80051c8 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 8005342:	f000 f9a4 	bl	800568e <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 8005346:	f000 f99a 	bl	800567e <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 800534a:	f000 f9a8 	bl	800569e <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 800534e:	f7ff fef9 	bl	8005144 <nRF24_CSN_H>
}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800535e:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <nRF24_Check+0x58>)
 8005360:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8005362:	2205      	movs	r2, #5
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	2030      	movs	r0, #48	; 0x30
 8005368:	f7ff ff88 	bl	800527c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 800536c:	463b      	mov	r3, r7
 800536e:	2205      	movs	r2, #5
 8005370:	4619      	mov	r1, r3
 8005372:	2010      	movs	r0, #16
 8005374:	f7ff ff60 	bl	8005238 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 8005378:	2300      	movs	r3, #0
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e010      	b.n	80053a0 <nRF24_Check+0x48>
	{
		if (rxbuf[i] != *ptr++)
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	f107 0210 	add.w	r2, r7, #16
 8005384:	4413      	add	r3, r2
 8005386:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	1c59      	adds	r1, r3, #1
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d001      	beq.n	800539a <nRF24_Check+0x42>
			return 0;
 8005396:	2300      	movs	r3, #0
 8005398:	e006      	b.n	80053a8 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++)
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	3301      	adds	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d9eb      	bls.n	800537e <nRF24_Check+0x26>
	}

	return 1;
 80053a6:	2301      	movs	r3, #1
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	0800c7d0 	.word	0x0800c7d0

080053b4 <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80053be:	2000      	movs	r0, #0
 80053c0:	f7ff fee8 	bl	8005194 <nRF24_ReadReg>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d104      	bne.n	80053d8 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	f043 0302 	orr.w	r3, r3, #2
 80053d4:	73fb      	strb	r3, [r7, #15]
 80053d6:	e003      	b.n	80053e0 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	f023 0302 	bic.w	r3, r3, #2
 80053de:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	4619      	mov	r1, r3
 80053e4:	2000      	movs	r0, #0
 80053e6:	f7ff feef 	bl	80051c8 <nRF24_WriteReg>
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	4603      	mov	r3, r0
 80053fa:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80053fc:	2000      	movs	r0, #0
 80053fe:	f7ff fec9 	bl	8005194 <nRF24_ReadReg>
 8005402:	4603      	mov	r3, r0
 8005404:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800540e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	b25a      	sxtb	r2, r3
 8005418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541c:	4313      	orrs	r3, r2
 800541e:	b25b      	sxtb	r3, r3
 8005420:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	4619      	mov	r1, r3
 8005426:	2000      	movs	r0, #0
 8005428:	f7ff fece 	bl	80051c8 <nRF24_WriteReg>
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800543e:	2000      	movs	r0, #0
 8005440:	f7ff fea8 	bl	8005194 <nRF24_ReadReg>
 8005444:	4603      	mov	r3, r0
 8005446:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	f023 030c 	bic.w	r3, r3, #12
 800544e:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8005450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005454:	f003 030c 	and.w	r3, r3, #12
 8005458:	b25a      	sxtb	r2, r3
 800545a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800545e:	4313      	orrs	r3, r2
 8005460:	b25b      	sxtb	r3, r3
 8005462:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	4619      	mov	r1, r3
 8005468:	2000      	movs	r0, #0
 800546a:	f7ff fead 	bl	80051c8 <nRF24_WriteReg>
}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	4603      	mov	r3, r0
 800547e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	4619      	mov	r1, r3
 8005484:	2005      	movs	r0, #5
 8005486:	f7ff fe9f 	bl	80051c8 <nRF24_WriteReg>
}
 800548a:	bf00      	nop
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	4603      	mov	r3, r0
 800549a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	3b02      	subs	r3, #2
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	4619      	mov	r1, r3
 80054a4:	2003      	movs	r0, #3
 80054a6:	f7ff fe8f 	bl	80051c8 <nRF24_WriteReg>
}
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	4603      	mov	r3, r0
 80054bc:	6039      	str	r1, [r7, #0]
 80054be:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	d83e      	bhi.n	8005544 <nRF24_SetAddr+0x90>
 80054c6:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <nRF24_SetAddr+0x18>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	080054e9 	.word	0x080054e9
 80054d0:	080054e9 	.word	0x080054e9
 80054d4:	08005531 	.word	0x08005531
 80054d8:	08005531 	.word	0x08005531
 80054dc:	08005531 	.word	0x08005531
 80054e0:	08005531 	.word	0x08005531
 80054e4:	080054e9 	.word	0x080054e9
	{
	case nRF24_PIPETX:
	case nRF24_PIPE0:
	case nRF24_PIPE1:
		// Lấy độ dài address
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80054e8:	2003      	movs	r0, #3
 80054ea:	f7ff fe53 	bl	8005194 <nRF24_ReadReg>
 80054ee:	4603      	mov	r3, r0
 80054f0:	3301      	adds	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]

		addr += addr_width;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	4413      	add	r3, r2
 80054fa:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 80054fc:	f7ff fe16 	bl	800512c <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	4a13      	ldr	r2, [pc, #76]	; (8005550 <nRF24_SetAddr+0x9c>)
 8005504:	5cd3      	ldrb	r3, [r2, r3]
 8005506:	f043 0320 	orr.w	r3, r3, #32
 800550a:	b2db      	uxtb	r3, r3
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fe25 	bl	800515c <nRF24_LL_RW>
		do
		{
			nRF24_LL_RW(*addr--);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	1e5a      	subs	r2, r3, #1
 8005516:	603a      	str	r2, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fe1e 	bl	800515c <nRF24_LL_RW>
		} while (addr_width--);
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	1e5a      	subs	r2, r3, #1
 8005524:	73fa      	strb	r2, [r7, #15]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f3      	bne.n	8005512 <nRF24_SetAddr+0x5e>
		nRF24_CSN_H();
 800552a:	f7ff fe0b 	bl	8005144 <nRF24_CSN_H>
		break;
 800552e:	e00a      	b.n	8005546 <nRF24_SetAddr+0x92>
	case nRF24_PIPE2:
	case nRF24_PIPE3:
	case nRF24_PIPE4:
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	4a07      	ldr	r2, [pc, #28]	; (8005550 <nRF24_SetAddr+0x9c>)
 8005534:	5cd2      	ldrb	r2, [r2, r3]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f7ff fe43 	bl	80051c8 <nRF24_WriteReg>
		break;
 8005542:	e000      	b.n	8005546 <nRF24_SetAddr+0x92>
	default:
		break;
 8005544:	bf00      	nop
	}
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	0800c9f4 	.word	0x0800c9f4

08005554 <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800555e:	2006      	movs	r0, #6
 8005560:	f7ff fe18 	bl	8005194 <nRF24_ReadReg>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	f023 0306 	bic.w	r3, r3, #6
 800556e:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8005570:	7bfa      	ldrb	r2, [r7, #15]
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	4313      	orrs	r3, r2
 8005576:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	4619      	mov	r1, r3
 800557c:	2006      	movs	r0, #6
 800557e:	f7ff fe23 	bl	80051c8 <nRF24_WriteReg>
}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	4603      	mov	r3, r0
 8005592:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8005594:	2006      	movs	r0, #6
 8005596:	f7ff fdfd 	bl	8005194 <nRF24_ReadReg>
 800559a:	4603      	mov	r3, r0
 800559c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80055a4:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80055a6:	7bfa      	ldrb	r2, [r7, #15]
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	4619      	mov	r1, r3
 80055b2:	2006      	movs	r0, #6
 80055b4:	f7ff fe08 	bl	80051c8 <nRF24_WriteReg>
}
 80055b8:	bf00      	nop
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <nRF24_SetRXPipe>:
 * @param pipe Pipe cần cấu hình
 * @param aa_state Bật phản hồi ACK hay không (nRF24_AA_ON or nRF24_AA_OFF)
 * @param payload_len độ dài của payload
 */
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
 80055ca:	460b      	mov	r3, r1
 80055cc:	71bb      	strb	r3, [r7, #6]
 80055ce:	4613      	mov	r3, r2
 80055d0:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80055d2:	2002      	movs	r0, #2
 80055d4:	f7ff fdde 	bl	8005194 <nRF24_ReadReg>
 80055d8:	4603      	mov	r3, r0
 80055da:	b25a      	sxtb	r2, r3
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	2101      	movs	r1, #1
 80055e0:	fa01 f303 	lsl.w	r3, r1, r3
 80055e4:	b25b      	sxtb	r3, r3
 80055e6:	4313      	orrs	r3, r2
 80055e8:	b25b      	sxtb	r3, r3
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055f0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	4619      	mov	r1, r3
 80055f6:	2002      	movs	r0, #2
 80055f8:	f7ff fde6 	bl	80051c8 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	4a19      	ldr	r2, [pc, #100]	; (8005664 <nRF24_SetRXPipe+0xa4>)
 8005600:	5cd2      	ldrb	r2, [r2, r3]
 8005602:	797b      	ldrb	r3, [r7, #5]
 8005604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005608:	b2db      	uxtb	r3, r3
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f7ff fddb 	bl	80051c8 <nRF24_WriteReg>

	// Set auto acknowledgment
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8005612:	2001      	movs	r0, #1
 8005614:	f7ff fdbe 	bl	8005194 <nRF24_ReadReg>
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON)
 800561c:	79bb      	ldrb	r3, [r7, #6]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d10a      	bne.n	8005638 <nRF24_SetRXPipe+0x78>
	{
		reg |= (1 << pipe);
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	2201      	movs	r2, #1
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	b25a      	sxtb	r2, r3
 800562c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005630:	4313      	orrs	r3, r2
 8005632:	b25b      	sxtb	r3, r3
 8005634:	73fb      	strb	r3, [r7, #15]
 8005636:	e00b      	b.n	8005650 <nRF24_SetRXPipe+0x90>
	}
	else
	{
		reg &= ~(1 << pipe);
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	2201      	movs	r2, #1
 800563c:	fa02 f303 	lsl.w	r3, r2, r3
 8005640:	b25b      	sxtb	r3, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	b25a      	sxtb	r2, r3
 8005646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800564a:	4013      	ands	r3, r2
 800564c:	b25b      	sxtb	r3, r3
 800564e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	4619      	mov	r1, r3
 8005654:	2001      	movs	r0, #1
 8005656:	f7ff fdb7 	bl	80051c8 <nRF24_WriteReg>
}
 800565a:	bf00      	nop
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	0800c9ec 	.word	0x0800c9ec

08005668 <nRF24_GetStatus_RXFIFO>:
 * @brief Lấy tastus RX FIFO
 *
 * @return uint8_t one of the nRF24_STATUS_RXFIFO_xx values
 */
uint8_t nRF24_GetStatus_RXFIFO(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 800566c:	2017      	movs	r0, #23
 800566e:	f7ff fd91 	bl	8005194 <nRF24_ReadReg>
 8005672:	4603      	mov	r3, r0
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	b2db      	uxtb	r3, r3
}
 800567a:	4618      	mov	r0, r3
 800567c:	bd80      	pop	{r7, pc}

0800567e <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8005682:	21ff      	movs	r1, #255	; 0xff
 8005684:	20e1      	movs	r0, #225	; 0xe1
 8005686:	f7ff fd9f 	bl	80051c8 <nRF24_WriteReg>
}
 800568a:	bf00      	nop
 800568c:	bd80      	pop	{r7, pc}

0800568e <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8005692:	21ff      	movs	r1, #255	; 0xff
 8005694:	20e2      	movs	r0, #226	; 0xe2
 8005696:	f7ff fd97 	bl	80051c8 <nRF24_WriteReg>
}
 800569a:	bf00      	nop
 800569c:	bd80      	pop	{r7, pc}

0800569e <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b082      	sub	sp, #8
 80056a2:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 80056a4:	2007      	movs	r0, #7
 80056a6:	f7ff fd75 	bl	8005194 <nRF24_ReadReg>
 80056aa:	4603      	mov	r3, r0
 80056ac:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80056b4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	4619      	mov	r1, r3
 80056ba:	2007      	movs	r0, #7
 80056bc:	f7ff fd84 	bl	80051c8 <nRF24_WriteReg>
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <nRF24_GetRxDplPayloadWidth>:
 * @brief đọc chiều dài của RX payload
 *
 * @return uint8_t độ dài
 */
static uint8_t nRF24_GetRxDplPayloadWidth()
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 80056ce:	f7ff fd2d 	bl	800512c <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 80056d2:	2060      	movs	r0, #96	; 0x60
 80056d4:	f7ff fd42 	bl	800515c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80056d8:	20ff      	movs	r0, #255	; 0xff
 80056da:	f7ff fd3f 	bl	800515c <nRF24_LL_RW>
 80056de:	4603      	mov	r3, r0
 80056e0:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 80056e2:	f7ff fd2f 	bl	8005144 <nRF24_CSN_H>

	return value;
 80056e6:	79fb      	ldrb	r3, [r7, #7]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80056fe:	2007      	movs	r0, #7
 8005700:	f7ff fd48 	bl	8005194 <nRF24_ReadReg>
 8005704:	4603      	mov	r3, r0
 8005706:	105b      	asrs	r3, r3, #1
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6)
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	2b05      	cmp	r3, #5
 8005714:	d829      	bhi.n	800576a <nRF24_ReadPayloadGeneric+0x7a>
	{
		// Get payload length
		if (dpl)
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00f      	beq.n	800573c <nRF24_ReadPayloadGeneric+0x4c>
		{
			*length = nRF24_GetRxDplPayloadWidth();
 800571c:	f7ff ffd4 	bl	80056c8 <nRF24_GetRxDplPayloadWidth>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	701a      	strb	r2, [r3, #0]
			if (*length > 32)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b20      	cmp	r3, #32
 800572e:	d90f      	bls.n	8005750 <nRF24_ReadPayloadGeneric+0x60>
			{ // broken packet
				*length = 0;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8005736:	f7ff ffaa 	bl	800568e <nRF24_FlushRX>
 800573a:	e009      	b.n	8005750 <nRF24_ReadPayloadGeneric+0x60>
			}
		}
		else
		{
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]); // đọc payload của pipe x
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	4a0f      	ldr	r2, [pc, #60]	; (800577c <nRF24_ReadPayloadGeneric+0x8c>)
 8005740:	5cd3      	ldrb	r3, [r2, r3]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fd26 	bl	8005194 <nRF24_ReadReg>
 8005748:	4603      	mov	r3, r0
 800574a:	461a      	mov	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	701a      	strb	r2, [r3, #0]
		}

		// đọc payload từ RX FIFO
		if (*length)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d006      	beq.n	8005766 <nRF24_ReadPayloadGeneric+0x76>
		{
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	2061      	movs	r0, #97	; 0x61
 8005762:	f7ff fd69 	bl	8005238 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	e003      	b.n	8005772 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8005770:	23ff      	movs	r3, #255	; 0xff
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	0800c9ec 	.word	0x0800c9ec

08005780 <nRF24_ReadPayload>:
 * @return   nRF24_RX_PIPEX - đã nhận được dữ liệu từ pipe x
 * @return	 nRF24_RX_EMPTY - the RX FIFO đéo có cc gì
 *
 */
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length, 0);
 800578a:	2200      	movs	r2, #0
 800578c:	6839      	ldr	r1, [r7, #0]
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff ffae 	bl	80056f0 <nRF24_ReadPayloadGeneric>
 8005794:	4603      	mov	r3, r0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <math_constrain>:
extern volatile float Kd_rate_yaw;

#endif

static float math_constrain(float value, float min, float max)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
    if (value > max)
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7fb fc75 	bl	800109c <__aeabi_fcmpgt>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <math_constrain+0x20>
        value = max;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e008      	b.n	80057d0 <math_constrain+0x32>
    else if (value < min)
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7fb fc4d 	bl	8001060 <__aeabi_fcmplt>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <math_constrain+0x32>
        value = min;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	60fb      	str	r3, [r7, #12]
    return value;
 80057d0:	68fb      	ldr	r3, [r7, #12]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	0000      	movs	r0, r0
 80057dc:	0000      	movs	r0, r0
	...

080057e0 <pid_calculate>:

void pid_calculate(float Error, float P, float I, float D, float PrevError, float PrevIterm)
{
 80057e0:	b5b0      	push	{r4, r5, r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
    float Pterm = P * Error;
 80057ee:	68f9      	ldr	r1, [r7, #12]
 80057f0:	68b8      	ldr	r0, [r7, #8]
 80057f2:	f7fb fa97 	bl	8000d24 <__aeabi_fmul>
 80057f6:	4603      	mov	r3, r0
 80057f8:	61fb      	str	r3, [r7, #28]
    float Iterm = PrevIterm + I * (Error + PrevError) * dt / 2;
 80057fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057fc:	f7fa fe0c 	bl	8000418 <__aeabi_f2d>
 8005800:	4604      	mov	r4, r0
 8005802:	460d      	mov	r5, r1
 8005804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7fb f984 	bl	8000b14 <__addsf3>
 800580c:	4603      	mov	r3, r0
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4618      	mov	r0, r3
 8005812:	f7fb fa87 	bl	8000d24 <__aeabi_fmul>
 8005816:	4603      	mov	r3, r0
 8005818:	4618      	mov	r0, r3
 800581a:	f7fa fdfd 	bl	8000418 <__aeabi_f2d>
 800581e:	a32a      	add	r3, pc, #168	; (adr r3, 80058c8 <pid_calculate+0xe8>)
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f7fa fe50 	bl	80004c8 <__aeabi_dmul>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005838:	f7fa ff70 	bl	800071c <__aeabi_ddiv>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4620      	mov	r0, r4
 8005842:	4629      	mov	r1, r5
 8005844:	f7fa fc8a 	bl	800015c <__adddf3>
 8005848:	4603      	mov	r3, r0
 800584a:	460c      	mov	r4, r1
 800584c:	4618      	mov	r0, r3
 800584e:	4621      	mov	r1, r4
 8005850:	f7fb f90a 	bl	8000a68 <__aeabi_d2f>
 8005854:	4603      	mov	r3, r0
 8005856:	61bb      	str	r3, [r7, #24]
    math_constrain(Iterm, -200, 200);
 8005858:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <pid_calculate+0xf0>)
 800585a:	491e      	ldr	r1, [pc, #120]	; (80058d4 <pid_calculate+0xf4>)
 800585c:	69b8      	ldr	r0, [r7, #24]
 800585e:	f7ff ff9e 	bl	800579e <math_constrain>
    float Dterm = D * (Error - PrevError) / dt;
 8005862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7fb f953 	bl	8000b10 <__aeabi_fsub>
 800586a:	4603      	mov	r3, r0
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f7fb fa58 	bl	8000d24 <__aeabi_fmul>
 8005874:	4603      	mov	r3, r0
 8005876:	4618      	mov	r0, r3
 8005878:	f7fa fdce 	bl	8000418 <__aeabi_f2d>
 800587c:	a312      	add	r3, pc, #72	; (adr r3, 80058c8 <pid_calculate+0xe8>)
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	f7fa ff4b 	bl	800071c <__aeabi_ddiv>
 8005886:	4603      	mov	r3, r0
 8005888:	460c      	mov	r4, r1
 800588a:	4618      	mov	r0, r3
 800588c:	4621      	mov	r1, r4
 800588e:	f7fb f8eb 	bl	8000a68 <__aeabi_d2f>
 8005892:	4603      	mov	r3, r0
 8005894:	617b      	str	r3, [r7, #20]
    float PIDOutput = Pterm + Iterm + Dterm;
 8005896:	69b9      	ldr	r1, [r7, #24]
 8005898:	69f8      	ldr	r0, [r7, #28]
 800589a:	f7fb f93b 	bl	8000b14 <__addsf3>
 800589e:	4603      	mov	r3, r0
 80058a0:	4619      	mov	r1, r3
 80058a2:	6978      	ldr	r0, [r7, #20]
 80058a4:	f7fb f936 	bl	8000b14 <__addsf3>
 80058a8:	4603      	mov	r3, r0
 80058aa:	613b      	str	r3, [r7, #16]


    PIDReturn[0] = PIDOutput;
 80058ac:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <pid_calculate+0xf8>)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6013      	str	r3, [r2, #0]
    PIDReturn[1] = Error;
 80058b2:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <pid_calculate+0xf8>)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6053      	str	r3, [r2, #4]
    PIDReturn[2] = Iterm;
 80058b8:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <pid_calculate+0xf8>)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	6093      	str	r3, [r2, #8]
}
 80058be:	bf00      	nop
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bdb0      	pop	{r4, r5, r7, pc}
 80058c6:	bf00      	nop
 80058c8:	47ae147b 	.word	0x47ae147b
 80058cc:	3f847ae1 	.word	0x3f847ae1
 80058d0:	43480000 	.word	0x43480000
 80058d4:	c3480000 	.word	0xc3480000
 80058d8:	2000051c 	.word	0x2000051c
 80058dc:	00000000 	.word	0x00000000

080058e0 <pid_roll>:

void pid_roll(uint16_t roll_rc, float roll_angle, float roll_rate, PID_t *PID_out)
{
 80058e0:	b5b0      	push	{r4, r5, r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4603      	mov	r3, r0
 80058ee:	81fb      	strh	r3, [r7, #14]
    if (roll_rc > 1500 || roll_rc < 1440)
 80058f0:	89fb      	ldrh	r3, [r7, #14]
 80058f2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d807      	bhi.n	800590a <pid_roll+0x2a>
 80058fa:	89fb      	ldrh	r3, [r7, #14]
 80058fc:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8005900:	d303      	bcc.n	800590a <pid_roll+0x2a>
    {
        roll_rc = roll_rc;
    }
    else
    {
        roll_rc = 1500;
 8005902:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005906:	81fb      	strh	r3, [r7, #14]
 8005908:	e000      	b.n	800590c <pid_roll+0x2c>
        roll_rc = roll_rc;
 800590a:	bf00      	nop
    }

    error = 0.08 * (roll_rc - 1500) - roll_angle;
 800590c:	89fb      	ldrh	r3, [r7, #14]
 800590e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005912:	4618      	mov	r0, r3
 8005914:	f7fa fd6e 	bl	80003f4 <__aeabi_i2d>
 8005918:	a337      	add	r3, pc, #220	; (adr r3, 80059f8 <pid_roll+0x118>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f7fa fdd3 	bl	80004c8 <__aeabi_dmul>
 8005922:	4603      	mov	r3, r0
 8005924:	460c      	mov	r4, r1
 8005926:	4625      	mov	r5, r4
 8005928:	461c      	mov	r4, r3
 800592a:	68b8      	ldr	r0, [r7, #8]
 800592c:	f7fa fd74 	bl	8000418 <__aeabi_f2d>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4620      	mov	r0, r4
 8005936:	4629      	mov	r1, r5
 8005938:	f7fa fc0e 	bl	8000158 <__aeabi_dsub>
 800593c:	4603      	mov	r3, r0
 800593e:	460c      	mov	r4, r1
 8005940:	4618      	mov	r0, r3
 8005942:	4621      	mov	r1, r4
 8005944:	f7fb f890 	bl	8000a68 <__aeabi_d2f>
 8005948:	4602      	mov	r2, r0
 800594a:	4b2d      	ldr	r3, [pc, #180]	; (8005a00 <pid_roll+0x120>)
 800594c:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_angle_roll, Ki_angle_roll, Kd_angle_roll, last_error_angle[0], last_Iterm_angle[0]);
 800594e:	4b2c      	ldr	r3, [pc, #176]	; (8005a00 <pid_roll+0x120>)
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	4b2c      	ldr	r3, [pc, #176]	; (8005a04 <pid_roll+0x124>)
 8005954:	6819      	ldr	r1, [r3, #0]
 8005956:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <pid_roll+0x128>)
 8005958:	681c      	ldr	r4, [r3, #0]
 800595a:	4b2c      	ldr	r3, [pc, #176]	; (8005a0c <pid_roll+0x12c>)
 800595c:	681d      	ldr	r5, [r3, #0]
 800595e:	4b2c      	ldr	r3, [pc, #176]	; (8005a10 <pid_roll+0x130>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <pid_roll+0x134>)
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	9201      	str	r2, [sp, #4]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	462b      	mov	r3, r5
 800596c:	4622      	mov	r2, r4
 800596e:	f7ff ff37 	bl	80057e0 <pid_calculate>
    setpoint_rate_roll = PIDReturn[0];
 8005972:	4b29      	ldr	r3, [pc, #164]	; (8005a18 <pid_roll+0x138>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a29      	ldr	r2, [pc, #164]	; (8005a1c <pid_roll+0x13c>)
 8005978:	6013      	str	r3, [r2, #0]
    last_error_angle[0] = PIDReturn[1];
 800597a:	4b27      	ldr	r3, [pc, #156]	; (8005a18 <pid_roll+0x138>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4a24      	ldr	r2, [pc, #144]	; (8005a10 <pid_roll+0x130>)
 8005980:	6013      	str	r3, [r2, #0]
    last_Iterm_angle[0] = PIDReturn[2];
 8005982:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <pid_roll+0x138>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	4a23      	ldr	r2, [pc, #140]	; (8005a14 <pid_roll+0x134>)
 8005988:	6013      	str	r3, [r2, #0]

    setpoint_rate_roll = math_constrain(setpoint_rate_roll, -50, 50);
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <pid_roll+0x13c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a24      	ldr	r2, [pc, #144]	; (8005a20 <pid_roll+0x140>)
 8005990:	4924      	ldr	r1, [pc, #144]	; (8005a24 <pid_roll+0x144>)
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff ff03 	bl	800579e <math_constrain>
 8005998:	4602      	mov	r2, r0
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <pid_roll+0x13c>)
 800599c:	601a      	str	r2, [r3, #0]

    error = setpoint_rate_roll - roll_rate;
 800599e:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <pid_roll+0x13c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fb f8b3 	bl	8000b10 <__aeabi_fsub>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461a      	mov	r2, r3
 80059ae:	4b14      	ldr	r3, [pc, #80]	; (8005a00 <pid_roll+0x120>)
 80059b0:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_rate_roll, Ki_rate_roll, Kd_rate_roll, last_error_rate[0], last_Iterm_rate[0]);
 80059b2:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <pid_roll+0x120>)
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <pid_roll+0x148>)
 80059b8:	6819      	ldr	r1, [r3, #0]
 80059ba:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <pid_roll+0x14c>)
 80059bc:	681c      	ldr	r4, [r3, #0]
 80059be:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <pid_roll+0x150>)
 80059c0:	681d      	ldr	r5, [r3, #0]
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <pid_roll+0x154>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <pid_roll+0x158>)
 80059c8:	6812      	ldr	r2, [r2, #0]
 80059ca:	9201      	str	r2, [sp, #4]
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	462b      	mov	r3, r5
 80059d0:	4622      	mov	r2, r4
 80059d2:	f7ff ff05 	bl	80057e0 <pid_calculate>
    PID_out->PID_roll_out = PIDReturn[0];
 80059d6:	4b10      	ldr	r3, [pc, #64]	; (8005a18 <pid_roll+0x138>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	601a      	str	r2, [r3, #0]
    last_error_rate[0] = PIDReturn[1];
 80059de:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <pid_roll+0x138>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <pid_roll+0x154>)
 80059e4:	6013      	str	r3, [r2, #0]
    last_Iterm_rate[0] = PIDReturn[2];
 80059e6:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <pid_roll+0x138>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <pid_roll+0x158>)
 80059ec:	6013      	str	r3, [r2, #0]

    // Gioi han PWM
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bdb0      	pop	{r4, r5, r7, pc}
 80059f6:	bf00      	nop
 80059f8:	47ae147b 	.word	0x47ae147b
 80059fc:	3fb47ae1 	.word	0x3fb47ae1
 8005a00:	20000510 	.word	0x20000510
 8005a04:	200000c4 	.word	0x200000c4
 8005a08:	200000c8 	.word	0x200000c8
 8005a0c:	200000cc 	.word	0x200000cc
 8005a10:	200004bc 	.word	0x200004bc
 8005a14:	200004e0 	.word	0x200004e0
 8005a18:	2000051c 	.word	0x2000051c
 8005a1c:	200004dc 	.word	0x200004dc
 8005a20:	42480000 	.word	0x42480000
 8005a24:	c2480000 	.word	0xc2480000
 8005a28:	200000dc 	.word	0x200000dc
 8005a2c:	200000e0 	.word	0x200000e0
 8005a30:	200000e4 	.word	0x200000e4
 8005a34:	200004cc 	.word	0x200004cc
 8005a38:	20000528 	.word	0x20000528
 8005a3c:	00000000 	.word	0x00000000

08005a40 <pid_pitch>:

void pid_pitch(uint16_t pitch_rc, float pitch_angle, float pitch_rate, PID_t *PID_out)
{
 8005a40:	b5b0      	push	{r4, r5, r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	81fb      	strh	r3, [r7, #14]
    if (pitch_rc > 1540 || pitch_rc < 1440)
 8005a50:	89fb      	ldrh	r3, [r7, #14]
 8005a52:	f240 6204 	movw	r2, #1540	; 0x604
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d807      	bhi.n	8005a6a <pid_pitch+0x2a>
 8005a5a:	89fb      	ldrh	r3, [r7, #14]
 8005a5c:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8005a60:	d303      	bcc.n	8005a6a <pid_pitch+0x2a>
    {
        pitch_rc = pitch_rc;
    }
    else
    {
        pitch_rc = 1500;
 8005a62:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005a66:	81fb      	strh	r3, [r7, #14]
 8005a68:	e000      	b.n	8005a6c <pid_pitch+0x2c>
        pitch_rc = pitch_rc;
 8005a6a:	bf00      	nop
    }

    error = 0.08 * (pitch_rc - 1500) - pitch_angle;
 8005a6c:	89fb      	ldrh	r3, [r7, #14]
 8005a6e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fa fcbe 	bl	80003f4 <__aeabi_i2d>
 8005a78:	a337      	add	r3, pc, #220	; (adr r3, 8005b58 <pid_pitch+0x118>)
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f7fa fd23 	bl	80004c8 <__aeabi_dmul>
 8005a82:	4603      	mov	r3, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	4625      	mov	r5, r4
 8005a88:	461c      	mov	r4, r3
 8005a8a:	68b8      	ldr	r0, [r7, #8]
 8005a8c:	f7fa fcc4 	bl	8000418 <__aeabi_f2d>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4620      	mov	r0, r4
 8005a96:	4629      	mov	r1, r5
 8005a98:	f7fa fb5e 	bl	8000158 <__aeabi_dsub>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	f7fa ffe0 	bl	8000a68 <__aeabi_d2f>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <pid_pitch+0x120>)
 8005aac:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_angle_pitch, Ki_angle_pitch, Kd_angle_pitch, last_error_angle[1], last_Iterm_angle[1]);
 8005aae:	4b2c      	ldr	r3, [pc, #176]	; (8005b60 <pid_pitch+0x120>)
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <pid_pitch+0x124>)
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	4b2c      	ldr	r3, [pc, #176]	; (8005b68 <pid_pitch+0x128>)
 8005ab8:	681c      	ldr	r4, [r3, #0]
 8005aba:	4b2c      	ldr	r3, [pc, #176]	; (8005b6c <pid_pitch+0x12c>)
 8005abc:	681d      	ldr	r5, [r3, #0]
 8005abe:	4b2c      	ldr	r3, [pc, #176]	; (8005b70 <pid_pitch+0x130>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4a2c      	ldr	r2, [pc, #176]	; (8005b74 <pid_pitch+0x134>)
 8005ac4:	6852      	ldr	r2, [r2, #4]
 8005ac6:	9201      	str	r2, [sp, #4]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	462b      	mov	r3, r5
 8005acc:	4622      	mov	r2, r4
 8005ace:	f7ff fe87 	bl	80057e0 <pid_calculate>
    setpoint_rate_pitch = PIDReturn[0];
 8005ad2:	4b29      	ldr	r3, [pc, #164]	; (8005b78 <pid_pitch+0x138>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a29      	ldr	r2, [pc, #164]	; (8005b7c <pid_pitch+0x13c>)
 8005ad8:	6013      	str	r3, [r2, #0]
    last_error_angle[1] = PIDReturn[1];
 8005ada:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <pid_pitch+0x138>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4a24      	ldr	r2, [pc, #144]	; (8005b70 <pid_pitch+0x130>)
 8005ae0:	6053      	str	r3, [r2, #4]
    last_Iterm_angle[1] = PIDReturn[2];
 8005ae2:	4b25      	ldr	r3, [pc, #148]	; (8005b78 <pid_pitch+0x138>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	4a23      	ldr	r2, [pc, #140]	; (8005b74 <pid_pitch+0x134>)
 8005ae8:	6053      	str	r3, [r2, #4]

    setpoint_rate_pitch = math_constrain(setpoint_rate_pitch, -50, 50);
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <pid_pitch+0x13c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a24      	ldr	r2, [pc, #144]	; (8005b80 <pid_pitch+0x140>)
 8005af0:	4924      	ldr	r1, [pc, #144]	; (8005b84 <pid_pitch+0x144>)
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fe53 	bl	800579e <math_constrain>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <pid_pitch+0x13c>)
 8005afc:	601a      	str	r2, [r3, #0]

    error = setpoint_rate_pitch - pitch_rate;
 8005afe:	4b1f      	ldr	r3, [pc, #124]	; (8005b7c <pid_pitch+0x13c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fb f803 	bl	8000b10 <__aeabi_fsub>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4b14      	ldr	r3, [pc, #80]	; (8005b60 <pid_pitch+0x120>)
 8005b10:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_rate_pitch, Ki_rate_pitch, Kd_rate_pitch, last_error_rate[1], last_Iterm_rate[1]);
 8005b12:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <pid_pitch+0x120>)
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	4b1c      	ldr	r3, [pc, #112]	; (8005b88 <pid_pitch+0x148>)
 8005b18:	6819      	ldr	r1, [r3, #0]
 8005b1a:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <pid_pitch+0x14c>)
 8005b1c:	681c      	ldr	r4, [r3, #0]
 8005b1e:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <pid_pitch+0x150>)
 8005b20:	681d      	ldr	r5, [r3, #0]
 8005b22:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <pid_pitch+0x154>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4a1c      	ldr	r2, [pc, #112]	; (8005b98 <pid_pitch+0x158>)
 8005b28:	6852      	ldr	r2, [r2, #4]
 8005b2a:	9201      	str	r2, [sp, #4]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	462b      	mov	r3, r5
 8005b30:	4622      	mov	r2, r4
 8005b32:	f7ff fe55 	bl	80057e0 <pid_calculate>
    PID_out->PID_pitch_out = PIDReturn[0];
 8005b36:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <pid_pitch+0x138>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
    last_error_rate[1] = PIDReturn[1];
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <pid_pitch+0x138>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4a14      	ldr	r2, [pc, #80]	; (8005b94 <pid_pitch+0x154>)
 8005b44:	6053      	str	r3, [r2, #4]
    last_Iterm_rate[1] = PIDReturn[2];
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <pid_pitch+0x138>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	4a13      	ldr	r2, [pc, #76]	; (8005b98 <pid_pitch+0x158>)
 8005b4c:	6053      	str	r3, [r2, #4]
}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bdb0      	pop	{r4, r5, r7, pc}
 8005b56:	bf00      	nop
 8005b58:	47ae147b 	.word	0x47ae147b
 8005b5c:	3fb47ae1 	.word	0x3fb47ae1
 8005b60:	20000510 	.word	0x20000510
 8005b64:	200000b8 	.word	0x200000b8
 8005b68:	200000bc 	.word	0x200000bc
 8005b6c:	200000c0 	.word	0x200000c0
 8005b70:	200004bc 	.word	0x200004bc
 8005b74:	200004e0 	.word	0x200004e0
 8005b78:	2000051c 	.word	0x2000051c
 8005b7c:	200004c8 	.word	0x200004c8
 8005b80:	42480000 	.word	0x42480000
 8005b84:	c2480000 	.word	0xc2480000
 8005b88:	200000d0 	.word	0x200000d0
 8005b8c:	200000d4 	.word	0x200000d4
 8005b90:	200000d8 	.word	0x200000d8
 8005b94:	200004cc 	.word	0x200004cc
 8005b98:	20000528 	.word	0x20000528
 8005b9c:	00000000 	.word	0x00000000

08005ba0 <pid_yaw>:

void pid_yaw(uint16_t yaw_rc, float yaw_rate, PID_t *PID_out)
{
 8005ba0:	b5b0      	push	{r4, r5, r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	81fb      	strh	r3, [r7, #14]
    // check again
    if (yaw_rc > 1540 || yaw_rc < 1440)
 8005bae:	89fb      	ldrh	r3, [r7, #14]
 8005bb0:	f240 6204 	movw	r2, #1540	; 0x604
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d807      	bhi.n	8005bc8 <pid_yaw+0x28>
 8005bb8:	89fb      	ldrh	r3, [r7, #14]
 8005bba:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8005bbe:	d303      	bcc.n	8005bc8 <pid_yaw+0x28>
    {
        yaw_rc = yaw_rc;
    }
    else
    {
        yaw_rc = 1500;
 8005bc0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005bc4:	81fb      	strh	r3, [r7, #14]
 8005bc6:	e000      	b.n	8005bca <pid_yaw+0x2a>
        yaw_rc = yaw_rc;
 8005bc8:	bf00      	nop
    }

    yaw_rc = 1800;
 8005bca:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8005bce:	81fb      	strh	r3, [r7, #14]

    error = 0.1 * (yaw_rc - 1500) - yaw_rate;
 8005bd0:	89fb      	ldrh	r3, [r7, #14]
 8005bd2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fa fc0c 	bl	80003f4 <__aeabi_i2d>
 8005bdc:	a31e      	add	r3, pc, #120	; (adr r3, 8005c58 <pid_yaw+0xb8>)
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	f7fa fc71 	bl	80004c8 <__aeabi_dmul>
 8005be6:	4603      	mov	r3, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	4625      	mov	r5, r4
 8005bec:	461c      	mov	r4, r3
 8005bee:	68b8      	ldr	r0, [r7, #8]
 8005bf0:	f7fa fc12 	bl	8000418 <__aeabi_f2d>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	f7fa faac 	bl	8000158 <__aeabi_dsub>
 8005c00:	4603      	mov	r3, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	4618      	mov	r0, r3
 8005c06:	4621      	mov	r1, r4
 8005c08:	f7fa ff2e 	bl	8000a68 <__aeabi_d2f>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <pid_yaw+0xc0>)
 8005c10:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_rate_yaw, Ki_rate_yaw, Kd_rate_yaw, last_error_rate[2], last_Iterm_rate[2]);
 8005c12:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <pid_yaw+0xc0>)
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <pid_yaw+0xc4>)
 8005c18:	6819      	ldr	r1, [r3, #0]
 8005c1a:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <pid_yaw+0xc8>)
 8005c1c:	681c      	ldr	r4, [r3, #0]
 8005c1e:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <pid_yaw+0xcc>)
 8005c20:	681d      	ldr	r5, [r3, #0]
 8005c22:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <pid_yaw+0xd0>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <pid_yaw+0xd4>)
 8005c28:	6892      	ldr	r2, [r2, #8]
 8005c2a:	9201      	str	r2, [sp, #4]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	462b      	mov	r3, r5
 8005c30:	4622      	mov	r2, r4
 8005c32:	f7ff fdd5 	bl	80057e0 <pid_calculate>
    PID_out->PID_yaw_out = PIDReturn[0];
 8005c36:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <pid_yaw+0xd8>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	609a      	str	r2, [r3, #8]
    last_error_rate[2] = PIDReturn[1];
 8005c3e:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <pid_yaw+0xd8>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	4a0b      	ldr	r2, [pc, #44]	; (8005c70 <pid_yaw+0xd0>)
 8005c44:	6093      	str	r3, [r2, #8]
    last_Iterm_rate[2] = PIDReturn[2];
 8005c46:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <pid_yaw+0xd8>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <pid_yaw+0xd4>)
 8005c4c:	6093      	str	r3, [r2, #8]
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bdb0      	pop	{r4, r5, r7, pc}
 8005c56:	bf00      	nop
 8005c58:	9999999a 	.word	0x9999999a
 8005c5c:	3fb99999 	.word	0x3fb99999
 8005c60:	20000510 	.word	0x20000510
 8005c64:	200000e8 	.word	0x200000e8
 8005c68:	200000ec 	.word	0x200000ec
 8005c6c:	200000f0 	.word	0x200000f0
 8005c70:	200004cc 	.word	0x200004cc
 8005c74:	20000528 	.word	0x20000528
 8005c78:	2000051c 	.word	0x2000051c

08005c7c <nRF24_CE_L>:
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8005c80:	2200      	movs	r2, #0
 8005c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c86:	4802      	ldr	r0, [pc, #8]	; (8005c90 <nRF24_CE_L+0x14>)
 8005c88:	f001 f8ac 	bl	8006de4 <HAL_GPIO_WritePin>
}
 8005c8c:	bf00      	nop
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40010800 	.word	0x40010800

08005c94 <nRF24_CE_H>:
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c9e:	4802      	ldr	r0, [pc, #8]	; (8005ca8 <nRF24_CE_H+0x14>)
 8005ca0:	f001 f8a0 	bl	8006de4 <HAL_GPIO_WritePin>
}
 8005ca4:	bf00      	nop
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40010800 	.word	0x40010800

08005cac <Delay_ms>:

static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fb6d 	bl	8006394 <HAL_Delay>
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <Toggle_LED>:

extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005cc8:	2120      	movs	r1, #32
 8005cca:	4802      	ldr	r0, [pc, #8]	; (8005cd4 <Toggle_LED+0x10>)
 8005ccc:	f001 f8a2 	bl	8006e14 <HAL_GPIO_TogglePin>
}
 8005cd0:	bf00      	nop
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40010c00 	.word	0x40010c00

08005cd8 <runRadio>:
}

#endif // DEMO_TX_

int runRadio(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
#if (DEBUG_RX)
    printf("\r\nSTM32 is online.\r\n");
#endif // debug
    nRF24_CE_L();
 8005cdc:	f7ff ffce 	bl	8005c7c <nRF24_CE_L>
#if (DEBUG_RX)
    printf("nRF24L01+ check: ");
#endif
    while (!nRF24_Check())
 8005ce0:	e004      	b.n	8005cec <runRadio+0x14>
    {
            Toggle_LED();
 8005ce2:	f7ff ffef 	bl	8005cc4 <Toggle_LED>
            Delay_ms(50);
 8005ce6:	2032      	movs	r0, #50	; 0x32
 8005ce8:	f7ff ffe0 	bl	8005cac <Delay_ms>
    while (!nRF24_Check())
 8005cec:	f7ff fb34 	bl	8005358 <nRF24_Check>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f5      	beq.n	8005ce2 <runRadio+0xa>
    }
    nRF24_Init();
 8005cf6:	f7ff fae2 	bl	80052be <nRF24_Init>
    // nRF24_CE_L();

/***************************************************************************/
#if (RX_SINGLE)

    nRF24_SetRFChannel(40);
 8005cfa:	2028      	movs	r0, #40	; 0x28
 8005cfc:	f7ff fbbb 	bl	8005476 <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8005d00:	2008      	movs	r0, #8
 8005d02:	f7ff fc42 	bl	800558a <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8005d06:	200c      	movs	r0, #12
 8005d08:	f7ff fb94 	bl	8005434 <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 8005d0c:	2003      	movs	r0, #3
 8005d0e:	f7ff fbc0 	bl	8005492 <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR);
 8005d12:	490c      	ldr	r1, [pc, #48]	; (8005d44 <runRadio+0x6c>)
 8005d14:	2001      	movs	r0, #1
 8005d16:	f7ff fbcd 	bl	80054b4 <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 24);
 8005d1a:	2218      	movs	r2, #24
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	2001      	movs	r0, #1
 8005d20:	f7ff fc4e 	bl	80055c0 <nRF24_SetRXPipe>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8005d24:	2006      	movs	r0, #6
 8005d26:	f7ff fc15 	bl	8005554 <nRF24_SetTXPower>
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	f7ff fb61 	bl	80053f2 <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 8005d30:	f7ff fcb5 	bl	800569e <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8005d34:	2002      	movs	r0, #2
 8005d36:	f7ff fb3d 	bl	80053b4 <nRF24_SetPowerMode>
    nRF24_CE_H();
 8005d3a:	f7ff ffab 	bl	8005c94 <nRF24_CE_H>
        Toggle_LED();
        Delay_ms(100);
    }

#endif // TX_SINGLE
}
 8005d3e:	bf00      	nop
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	0800c9fc 	.word	0x0800c9fc

08005d48 <RX_data>:

void RX_data(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0

    if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8005d4e:	f7ff fc8b 	bl	8005668 <nRF24_GetStatus_RXFIFO>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d009      	beq.n	8005d6c <RX_data+0x24>
    {
        nRF24_RXResult pipe = nRF24_ReadPayload((uint8_t *)&payload_packet, &payload_length);
 8005d58:	4906      	ldr	r1, [pc, #24]	; (8005d74 <RX_data+0x2c>)
 8005d5a:	4807      	ldr	r0, [pc, #28]	; (8005d78 <RX_data+0x30>)
 8005d5c:	f7ff fd10 	bl	8005780 <nRF24_ReadPayload>
 8005d60:	4603      	mov	r3, r0
 8005d62:	71fb      	strb	r3, [r7, #7]
        // Clear all pending IRQ flags
        nRF24_ClearIRQFlags();
 8005d64:	f7ff fc9b 	bl	800569e <nRF24_ClearIRQFlags>
        Toggle_LED();
 8005d68:	f7ff ffac 	bl	8005cc4 <Toggle_LED>
    }
    else
    {
        // todo:
    }
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000020 	.word	0x20000020
 8005d78:	2000053c 	.word	0x2000053c

08005d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <HAL_MspInit+0x5c>)
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	4a14      	ldr	r2, [pc, #80]	; (8005dd8 <HAL_MspInit+0x5c>)
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	6193      	str	r3, [r2, #24]
 8005d8e:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <HAL_MspInit+0x5c>)
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	60bb      	str	r3, [r7, #8]
 8005d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d9a:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <HAL_MspInit+0x5c>)
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	4a0e      	ldr	r2, [pc, #56]	; (8005dd8 <HAL_MspInit+0x5c>)
 8005da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da4:	61d3      	str	r3, [r2, #28]
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <HAL_MspInit+0x5c>)
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dae:	607b      	str	r3, [r7, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005db2:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <HAL_MspInit+0x60>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <HAL_MspInit+0x60>)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	40010000 	.word	0x40010000

08005de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de8:	f107 0310 	add.w	r3, r7, #16
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	605a      	str	r2, [r3, #4]
 8005df2:	609a      	str	r2, [r3, #8]
 8005df4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <HAL_I2C_MspInit+0x70>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d123      	bne.n	8005e48 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e00:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <HAL_I2C_MspInit+0x74>)
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <HAL_I2C_MspInit+0x74>)
 8005e06:	f043 0308 	orr.w	r3, r3, #8
 8005e0a:	6193      	str	r3, [r2, #24]
 8005e0c:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <HAL_I2C_MspInit+0x74>)
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e18:	23c0      	movs	r3, #192	; 0xc0
 8005e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e1c:	2312      	movs	r3, #18
 8005e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e20:	2303      	movs	r3, #3
 8005e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e24:	f107 0310 	add.w	r3, r7, #16
 8005e28:	4619      	mov	r1, r3
 8005e2a:	480b      	ldr	r0, [pc, #44]	; (8005e58 <HAL_I2C_MspInit+0x78>)
 8005e2c:	f000 fe80 	bl	8006b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e30:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <HAL_I2C_MspInit+0x74>)
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	4a07      	ldr	r2, [pc, #28]	; (8005e54 <HAL_I2C_MspInit+0x74>)
 8005e36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e3a:	61d3      	str	r3, [r2, #28]
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_I2C_MspInit+0x74>)
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005e48:	bf00      	nop
 8005e4a:	3720      	adds	r7, #32
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40005400 	.word	0x40005400
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40010c00 	.word	0x40010c00

08005e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e64:	f107 0310 	add.w	r3, r7, #16
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_SPI_MspInit+0x8c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d131      	bne.n	8005ee0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <HAL_SPI_MspInit+0x90>)
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	4a1a      	ldr	r2, [pc, #104]	; (8005eec <HAL_SPI_MspInit+0x90>)
 8005e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e86:	61d3      	str	r3, [r2, #28]
 8005e88:	4b18      	ldr	r3, [pc, #96]	; (8005eec <HAL_SPI_MspInit+0x90>)
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e94:	4b15      	ldr	r3, [pc, #84]	; (8005eec <HAL_SPI_MspInit+0x90>)
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	4a14      	ldr	r2, [pc, #80]	; (8005eec <HAL_SPI_MspInit+0x90>)
 8005e9a:	f043 0308 	orr.w	r3, r3, #8
 8005e9e:	6193      	str	r3, [r2, #24]
 8005ea0:	4b12      	ldr	r3, [pc, #72]	; (8005eec <HAL_SPI_MspInit+0x90>)
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 8005eac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005eb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eba:	f107 0310 	add.w	r3, r7, #16
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	480b      	ldr	r0, [pc, #44]	; (8005ef0 <HAL_SPI_MspInit+0x94>)
 8005ec2:	f000 fe35 	bl	8006b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8005ec6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8005ed4:	f107 0310 	add.w	r3, r7, #16
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <HAL_SPI_MspInit+0x94>)
 8005edc:	f000 fe28 	bl	8006b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005ee0:	bf00      	nop
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40003800 	.word	0x40003800
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40010c00 	.word	0x40010c00

08005ef4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <HAL_TIM_PWM_MspInit+0x34>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d10b      	bne.n	8005f1e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f06:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <HAL_TIM_PWM_MspInit+0x38>)
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <HAL_TIM_PWM_MspInit+0x38>)
 8005f0c:	f043 0302 	orr.w	r3, r3, #2
 8005f10:	61d3      	str	r3, [r2, #28]
 8005f12:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <HAL_TIM_PWM_MspInit+0x38>)
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005f1e:	bf00      	nop
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	40021000 	.word	0x40021000

08005f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <HAL_TIM_Base_MspInit+0x44>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d113      	bne.n	8005f6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005f42:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <HAL_TIM_Base_MspInit+0x48>)
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	4a0c      	ldr	r2, [pc, #48]	; (8005f78 <HAL_TIM_Base_MspInit+0x48>)
 8005f48:	f043 0304 	orr.w	r3, r3, #4
 8005f4c:	61d3      	str	r3, [r2, #28]
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <HAL_TIM_Base_MspInit+0x48>)
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2102      	movs	r1, #2
 8005f5e:	201e      	movs	r0, #30
 8005f60:	f000 fb11 	bl	8006586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005f64:	201e      	movs	r0, #30
 8005f66:	f000 fb2a 	bl	80065be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40021000 	.word	0x40021000

08005f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f84:	f107 0310 	add.w	r3, r7, #16
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	609a      	str	r2, [r3, #8]
 8005f90:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1b      	ldr	r2, [pc, #108]	; (8006004 <HAL_TIM_MspPostInit+0x88>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d12f      	bne.n	8005ffc <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <HAL_TIM_MspPostInit+0x8c>)
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	4a19      	ldr	r2, [pc, #100]	; (8006008 <HAL_TIM_MspPostInit+0x8c>)
 8005fa2:	f043 0304 	orr.w	r3, r3, #4
 8005fa6:	6193      	str	r3, [r2, #24]
 8005fa8:	4b17      	ldr	r3, [pc, #92]	; (8006008 <HAL_TIM_MspPostInit+0x8c>)
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fb4:	4b14      	ldr	r3, [pc, #80]	; (8006008 <HAL_TIM_MspPostInit+0x8c>)
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	4a13      	ldr	r2, [pc, #76]	; (8006008 <HAL_TIM_MspPostInit+0x8c>)
 8005fba:	f043 0308 	orr.w	r3, r3, #8
 8005fbe:	6193      	str	r3, [r2, #24]
 8005fc0:	4b11      	ldr	r3, [pc, #68]	; (8006008 <HAL_TIM_MspPostInit+0x8c>)
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005fcc:	23c0      	movs	r3, #192	; 0xc0
 8005fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd8:	f107 0310 	add.w	r3, r7, #16
 8005fdc:	4619      	mov	r1, r3
 8005fde:	480b      	ldr	r0, [pc, #44]	; (800600c <HAL_TIM_MspPostInit+0x90>)
 8005fe0:	f000 fda6 	bl	8006b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fec:	2302      	movs	r3, #2
 8005fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ff0:	f107 0310 	add.w	r3, r7, #16
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4806      	ldr	r0, [pc, #24]	; (8006010 <HAL_TIM_MspPostInit+0x94>)
 8005ff8:	f000 fd9a 	bl	8006b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005ffc:	bf00      	nop
 8005ffe:	3720      	adds	r7, #32
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40000400 	.word	0x40000400
 8006008:	40021000 	.word	0x40021000
 800600c:	40010800 	.word	0x40010800
 8006010:	40010c00 	.word	0x40010c00

08006014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800601c:	f107 0318 	add.w	r3, r7, #24
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	605a      	str	r2, [r3, #4]
 8006026:	609a      	str	r2, [r3, #8]
 8006028:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a4e      	ldr	r2, [pc, #312]	; (8006168 <HAL_UART_MspInit+0x154>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d160      	bne.n	80060f6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006034:	4b4d      	ldr	r3, [pc, #308]	; (800616c <HAL_UART_MspInit+0x158>)
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	4a4c      	ldr	r2, [pc, #304]	; (800616c <HAL_UART_MspInit+0x158>)
 800603a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800603e:	6193      	str	r3, [r2, #24]
 8006040:	4b4a      	ldr	r3, [pc, #296]	; (800616c <HAL_UART_MspInit+0x158>)
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800604c:	4b47      	ldr	r3, [pc, #284]	; (800616c <HAL_UART_MspInit+0x158>)
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	4a46      	ldr	r2, [pc, #280]	; (800616c <HAL_UART_MspInit+0x158>)
 8006052:	f043 0304 	orr.w	r3, r3, #4
 8006056:	6193      	str	r3, [r2, #24]
 8006058:	4b44      	ldr	r3, [pc, #272]	; (800616c <HAL_UART_MspInit+0x158>)
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800606a:	2302      	movs	r3, #2
 800606c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800606e:	2303      	movs	r3, #3
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006072:	f107 0318 	add.w	r3, r7, #24
 8006076:	4619      	mov	r1, r3
 8006078:	483d      	ldr	r0, [pc, #244]	; (8006170 <HAL_UART_MspInit+0x15c>)
 800607a:	f000 fd59 	bl	8006b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800607e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006084:	2300      	movs	r3, #0
 8006086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006088:	2300      	movs	r3, #0
 800608a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800608c:	f107 0318 	add.w	r3, r7, #24
 8006090:	4619      	mov	r1, r3
 8006092:	4837      	ldr	r0, [pc, #220]	; (8006170 <HAL_UART_MspInit+0x15c>)
 8006094:	f000 fd4c 	bl	8006b30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006098:	4b36      	ldr	r3, [pc, #216]	; (8006174 <HAL_UART_MspInit+0x160>)
 800609a:	4a37      	ldr	r2, [pc, #220]	; (8006178 <HAL_UART_MspInit+0x164>)
 800609c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800609e:	4b35      	ldr	r3, [pc, #212]	; (8006174 <HAL_UART_MspInit+0x160>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060a4:	4b33      	ldr	r3, [pc, #204]	; (8006174 <HAL_UART_MspInit+0x160>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060aa:	4b32      	ldr	r3, [pc, #200]	; (8006174 <HAL_UART_MspInit+0x160>)
 80060ac:	2280      	movs	r2, #128	; 0x80
 80060ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060b0:	4b30      	ldr	r3, [pc, #192]	; (8006174 <HAL_UART_MspInit+0x160>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060b6:	4b2f      	ldr	r3, [pc, #188]	; (8006174 <HAL_UART_MspInit+0x160>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80060bc:	4b2d      	ldr	r3, [pc, #180]	; (8006174 <HAL_UART_MspInit+0x160>)
 80060be:	2200      	movs	r2, #0
 80060c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80060c2:	4b2c      	ldr	r3, [pc, #176]	; (8006174 <HAL_UART_MspInit+0x160>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80060c8:	482a      	ldr	r0, [pc, #168]	; (8006174 <HAL_UART_MspInit+0x160>)
 80060ca:	f000 fa93 	bl	80065f4 <HAL_DMA_Init>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80060d4:	f7fb fcca 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a26      	ldr	r2, [pc, #152]	; (8006174 <HAL_UART_MspInit+0x160>)
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
 80060de:	4a25      	ldr	r2, [pc, #148]	; (8006174 <HAL_UART_MspInit+0x160>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80060e4:	2200      	movs	r2, #0
 80060e6:	2101      	movs	r1, #1
 80060e8:	2025      	movs	r0, #37	; 0x25
 80060ea:	f000 fa4c 	bl	8006586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80060ee:	2025      	movs	r0, #37	; 0x25
 80060f0:	f000 fa65 	bl	80065be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80060f4:	e034      	b.n	8006160 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a20      	ldr	r2, [pc, #128]	; (800617c <HAL_UART_MspInit+0x168>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d12f      	bne.n	8006160 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006100:	4b1a      	ldr	r3, [pc, #104]	; (800616c <HAL_UART_MspInit+0x158>)
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_UART_MspInit+0x158>)
 8006106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800610a:	61d3      	str	r3, [r2, #28]
 800610c:	4b17      	ldr	r3, [pc, #92]	; (800616c <HAL_UART_MspInit+0x158>)
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006118:	4b14      	ldr	r3, [pc, #80]	; (800616c <HAL_UART_MspInit+0x158>)
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <HAL_UART_MspInit+0x158>)
 800611e:	f043 0304 	orr.w	r3, r3, #4
 8006122:	6193      	str	r3, [r2, #24]
 8006124:	4b11      	ldr	r3, [pc, #68]	; (800616c <HAL_UART_MspInit+0x158>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	60bb      	str	r3, [r7, #8]
 800612e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006130:	2304      	movs	r3, #4
 8006132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006134:	2302      	movs	r3, #2
 8006136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006138:	2303      	movs	r3, #3
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800613c:	f107 0318 	add.w	r3, r7, #24
 8006140:	4619      	mov	r1, r3
 8006142:	480b      	ldr	r0, [pc, #44]	; (8006170 <HAL_UART_MspInit+0x15c>)
 8006144:	f000 fcf4 	bl	8006b30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006148:	2308      	movs	r3, #8
 800614a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800614c:	2300      	movs	r3, #0
 800614e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006150:	2300      	movs	r3, #0
 8006152:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006154:	f107 0318 	add.w	r3, r7, #24
 8006158:	4619      	mov	r1, r3
 800615a:	4805      	ldr	r0, [pc, #20]	; (8006170 <HAL_UART_MspInit+0x15c>)
 800615c:	f000 fce8 	bl	8006b30 <HAL_GPIO_Init>
}
 8006160:	bf00      	nop
 8006162:	3728      	adds	r7, #40	; 0x28
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40013800 	.word	0x40013800
 800616c:	40021000 	.word	0x40021000
 8006170:	40010800 	.word	0x40010800
 8006174:	200002f4 	.word	0x200002f4
 8006178:	40020058 	.word	0x40020058
 800617c:	40004400 	.word	0x40004400

08006180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006184:	e7fe      	b.n	8006184 <NMI_Handler+0x4>

08006186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006186:	b480      	push	{r7}
 8006188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800618a:	e7fe      	b.n	800618a <HardFault_Handler+0x4>

0800618c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006190:	e7fe      	b.n	8006190 <MemManage_Handler+0x4>

08006192 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006192:	b480      	push	{r7}
 8006194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006196:	e7fe      	b.n	8006196 <BusFault_Handler+0x4>

08006198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800619c:	e7fe      	b.n	800619c <UsageFault_Handler+0x4>

0800619e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800619e:	b480      	push	{r7}
 80061a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061a2:	bf00      	nop
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061aa:	b480      	push	{r7}
 80061ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061ae:	bf00      	nop
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr

080061b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061b6:	b480      	push	{r7}
 80061b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061ba:	bf00      	nop
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr

080061c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061c6:	f000 f8c9 	bl	800635c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061ca:	bf00      	nop
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80061d4:	4802      	ldr	r0, [pc, #8]	; (80061e0 <DMA1_Channel5_IRQHandler+0x10>)
 80061d6:	f000 fb77 	bl	80068c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80061da:	bf00      	nop
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	200002f4 	.word	0x200002f4

080061e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80061e8:	4802      	ldr	r0, [pc, #8]	; (80061f4 <TIM4_IRQHandler+0x10>)
 80061ea:	f002 fe97 	bl	8008f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80061ee:	bf00      	nop
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200001ec 	.word	0x200001ec

080061f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80061fc:	4802      	ldr	r0, [pc, #8]	; (8006208 <USART1_IRQHandler+0x10>)
 80061fe:	f003 fd71 	bl	8009ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006202:	bf00      	nop
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000338 	.word	0x20000338

0800620c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006214:	4a14      	ldr	r2, [pc, #80]	; (8006268 <_sbrk+0x5c>)
 8006216:	4b15      	ldr	r3, [pc, #84]	; (800626c <_sbrk+0x60>)
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006220:	4b13      	ldr	r3, [pc, #76]	; (8006270 <_sbrk+0x64>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006228:	4b11      	ldr	r3, [pc, #68]	; (8006270 <_sbrk+0x64>)
 800622a:	4a12      	ldr	r2, [pc, #72]	; (8006274 <_sbrk+0x68>)
 800622c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800622e:	4b10      	ldr	r3, [pc, #64]	; (8006270 <_sbrk+0x64>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	429a      	cmp	r2, r3
 800623a:	d207      	bcs.n	800624c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800623c:	f004 fa74 	bl	800a728 <__errno>
 8006240:	4602      	mov	r2, r0
 8006242:	230c      	movs	r3, #12
 8006244:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006246:	f04f 33ff 	mov.w	r3, #4294967295
 800624a:	e009      	b.n	8006260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800624c:	4b08      	ldr	r3, [pc, #32]	; (8006270 <_sbrk+0x64>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006252:	4b07      	ldr	r3, [pc, #28]	; (8006270 <_sbrk+0x64>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4413      	add	r3, r2
 800625a:	4a05      	ldr	r2, [pc, #20]	; (8006270 <_sbrk+0x64>)
 800625c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800625e:	68fb      	ldr	r3, [r7, #12]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20005000 	.word	0x20005000
 800626c:	00000400 	.word	0x00000400
 8006270:	2000014c 	.word	0x2000014c
 8006274:	20000560 	.word	0x20000560

08006278 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800627c:	bf00      	nop
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr

08006284 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006284:	480c      	ldr	r0, [pc, #48]	; (80062b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006286:	490d      	ldr	r1, [pc, #52]	; (80062bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006288:	4a0d      	ldr	r2, [pc, #52]	; (80062c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800628a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800628c:	e002      	b.n	8006294 <LoopCopyDataInit>

0800628e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800628e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006292:	3304      	adds	r3, #4

08006294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006298:	d3f9      	bcc.n	800628e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800629a:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800629c:	4c0a      	ldr	r4, [pc, #40]	; (80062c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800629e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062a0:	e001      	b.n	80062a6 <LoopFillZerobss>

080062a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062a4:	3204      	adds	r2, #4

080062a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062a8:	d3fb      	bcc.n	80062a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80062aa:	f7ff ffe5 	bl	8006278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062ae:	f004 fa41 	bl	800a734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80062b2:	f7fa fffb 	bl	80012ac <main>
  bx lr
 80062b6:	4770      	bx	lr
  ldr r0, =_sdata
 80062b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062bc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80062c0:	0800cac8 	.word	0x0800cac8
  ldr r2, =_sbss
 80062c4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80062c8:	2000055c 	.word	0x2000055c

080062cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80062cc:	e7fe      	b.n	80062cc <ADC1_2_IRQHandler>
	...

080062d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062d4:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <HAL_Init+0x28>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a07      	ldr	r2, [pc, #28]	; (80062f8 <HAL_Init+0x28>)
 80062da:	f043 0310 	orr.w	r3, r3, #16
 80062de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062e0:	2003      	movs	r0, #3
 80062e2:	f000 f945 	bl	8006570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062e6:	200f      	movs	r0, #15
 80062e8:	f000 f808 	bl	80062fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062ec:	f7ff fd46 	bl	8005d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40022000 	.word	0x40022000

080062fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006304:	4b12      	ldr	r3, [pc, #72]	; (8006350 <HAL_InitTick+0x54>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4b12      	ldr	r3, [pc, #72]	; (8006354 <HAL_InitTick+0x58>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	4619      	mov	r1, r3
 800630e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006312:	fbb3 f3f1 	udiv	r3, r3, r1
 8006316:	fbb2 f3f3 	udiv	r3, r2, r3
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f95d 	bl	80065da <HAL_SYSTICK_Config>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e00e      	b.n	8006348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b0f      	cmp	r3, #15
 800632e:	d80a      	bhi.n	8006346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006330:	2200      	movs	r2, #0
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	f000 f925 	bl	8006586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800633c:	4a06      	ldr	r2, [pc, #24]	; (8006358 <HAL_InitTick+0x5c>)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	e000      	b.n	8006348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	20000024 	.word	0x20000024
 8006354:	2000002c 	.word	0x2000002c
 8006358:	20000028 	.word	0x20000028

0800635c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_IncTick+0x1c>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	4b05      	ldr	r3, [pc, #20]	; (800637c <HAL_IncTick+0x20>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4413      	add	r3, r2
 800636c:	4a03      	ldr	r2, [pc, #12]	; (800637c <HAL_IncTick+0x20>)
 800636e:	6013      	str	r3, [r2, #0]
}
 8006370:	bf00      	nop
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr
 8006378:	2000002c 	.word	0x2000002c
 800637c:	20000554 	.word	0x20000554

08006380 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  return uwTick;
 8006384:	4b02      	ldr	r3, [pc, #8]	; (8006390 <HAL_GetTick+0x10>)
 8006386:	681b      	ldr	r3, [r3, #0]
}
 8006388:	4618      	mov	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr
 8006390:	20000554 	.word	0x20000554

08006394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800639c:	f7ff fff0 	bl	8006380 <HAL_GetTick>
 80063a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ac:	d005      	beq.n	80063ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80063ae:	4b09      	ldr	r3, [pc, #36]	; (80063d4 <HAL_Delay+0x40>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063ba:	bf00      	nop
 80063bc:	f7ff ffe0 	bl	8006380 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d8f7      	bhi.n	80063bc <HAL_Delay+0x28>
  {
  }
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	2000002c 	.word	0x2000002c

080063d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <__NVIC_SetPriorityGrouping+0x44>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063f4:	4013      	ands	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800640a:	4a04      	ldr	r2, [pc, #16]	; (800641c <__NVIC_SetPriorityGrouping+0x44>)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	60d3      	str	r3, [r2, #12]
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	e000ed00 	.word	0xe000ed00

08006420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006424:	4b04      	ldr	r3, [pc, #16]	; (8006438 <__NVIC_GetPriorityGrouping+0x18>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	f003 0307 	and.w	r3, r3, #7
}
 800642e:	4618      	mov	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	e000ed00 	.word	0xe000ed00

0800643c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644a:	2b00      	cmp	r3, #0
 800644c:	db0b      	blt.n	8006466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	f003 021f 	and.w	r2, r3, #31
 8006454:	4906      	ldr	r1, [pc, #24]	; (8006470 <__NVIC_EnableIRQ+0x34>)
 8006456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	2001      	movs	r0, #1
 800645e:	fa00 f202 	lsl.w	r2, r0, r2
 8006462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	bc80      	pop	{r7}
 800646e:	4770      	bx	lr
 8006470:	e000e100 	.word	0xe000e100

08006474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	6039      	str	r1, [r7, #0]
 800647e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006484:	2b00      	cmp	r3, #0
 8006486:	db0a      	blt.n	800649e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	490c      	ldr	r1, [pc, #48]	; (80064c0 <__NVIC_SetPriority+0x4c>)
 800648e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006492:	0112      	lsls	r2, r2, #4
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	440b      	add	r3, r1
 8006498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800649c:	e00a      	b.n	80064b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	4908      	ldr	r1, [pc, #32]	; (80064c4 <__NVIC_SetPriority+0x50>)
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	3b04      	subs	r3, #4
 80064ac:	0112      	lsls	r2, r2, #4
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	440b      	add	r3, r1
 80064b2:	761a      	strb	r2, [r3, #24]
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	e000e100 	.word	0xe000e100
 80064c4:	e000ed00 	.word	0xe000ed00

080064c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b089      	sub	sp, #36	; 0x24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f1c3 0307 	rsb	r3, r3, #7
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	bf28      	it	cs
 80064e6:	2304      	movcs	r3, #4
 80064e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	3304      	adds	r3, #4
 80064ee:	2b06      	cmp	r3, #6
 80064f0:	d902      	bls.n	80064f8 <NVIC_EncodePriority+0x30>
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	3b03      	subs	r3, #3
 80064f6:	e000      	b.n	80064fa <NVIC_EncodePriority+0x32>
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	43da      	mvns	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	401a      	ands	r2, r3
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006510:	f04f 31ff 	mov.w	r1, #4294967295
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	fa01 f303 	lsl.w	r3, r1, r3
 800651a:	43d9      	mvns	r1, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006520:	4313      	orrs	r3, r2
         );
}
 8006522:	4618      	mov	r0, r3
 8006524:	3724      	adds	r7, #36	; 0x24
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr

0800652c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3b01      	subs	r3, #1
 8006538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800653c:	d301      	bcc.n	8006542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800653e:	2301      	movs	r3, #1
 8006540:	e00f      	b.n	8006562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006542:	4a0a      	ldr	r2, [pc, #40]	; (800656c <SysTick_Config+0x40>)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3b01      	subs	r3, #1
 8006548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800654a:	210f      	movs	r1, #15
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	f7ff ff90 	bl	8006474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <SysTick_Config+0x40>)
 8006556:	2200      	movs	r2, #0
 8006558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800655a:	4b04      	ldr	r3, [pc, #16]	; (800656c <SysTick_Config+0x40>)
 800655c:	2207      	movs	r2, #7
 800655e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	e000e010 	.word	0xe000e010

08006570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ff2d 	bl	80063d8 <__NVIC_SetPriorityGrouping>
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006586:	b580      	push	{r7, lr}
 8006588:	b086      	sub	sp, #24
 800658a:	af00      	add	r7, sp, #0
 800658c:	4603      	mov	r3, r0
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
 8006592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006598:	f7ff ff42 	bl	8006420 <__NVIC_GetPriorityGrouping>
 800659c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	6978      	ldr	r0, [r7, #20]
 80065a4:	f7ff ff90 	bl	80064c8 <NVIC_EncodePriority>
 80065a8:	4602      	mov	r2, r0
 80065aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff ff5f 	bl	8006474 <__NVIC_SetPriority>
}
 80065b6:	bf00      	nop
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	4603      	mov	r3, r0
 80065c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ff35 	bl	800643c <__NVIC_EnableIRQ>
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff ffa2 	bl	800652c <SysTick_Config>
 80065e8:	4603      	mov	r3, r0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e043      	b.n	8006692 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	4b22      	ldr	r3, [pc, #136]	; (800669c <HAL_DMA_Init+0xa8>)
 8006612:	4413      	add	r3, r2
 8006614:	4a22      	ldr	r2, [pc, #136]	; (80066a0 <HAL_DMA_Init+0xac>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	009a      	lsls	r2, r3, #2
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <HAL_DMA_Init+0xb0>)
 8006626:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800663e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006642:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800664c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr
 800669c:	bffdfff8 	.word	0xbffdfff8
 80066a0:	cccccccd 	.word	0xcccccccd
 80066a4:	40020000 	.word	0x40020000

080066a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <HAL_DMA_Start_IT+0x20>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e04a      	b.n	800675e <HAL_DMA_Start_IT+0xb6>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d13a      	bne.n	8006750 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2202      	movs	r2, #2
 80066de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0201 	bic.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f9e8 	bl	8006ad4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 020e 	orr.w	r2, r2, #14
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e00f      	b.n	800673e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0204 	bic.w	r2, r2, #4
 800672c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 020a 	orr.w	r2, r2, #10
 800673c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e005      	b.n	800675c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006758:	2302      	movs	r3, #2
 800675a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800675c:	7dfb      	ldrb	r3, [r7, #23]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006778:	2b02      	cmp	r3, #2
 800677a:	d008      	beq.n	800678e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2204      	movs	r2, #4
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e020      	b.n	80067d0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 020e 	bic.w	r2, r2, #14
 800679c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	2101      	movs	r1, #1
 80067b8:	fa01 f202 	lsl.w	r2, r1, r2
 80067bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	4770      	bx	lr
	...

080067dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d005      	beq.n	80067fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2204      	movs	r2, #4
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
 80067fc:	e051      	b.n	80068a2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 020e 	bic.w	r2, r2, #14
 800680c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a22      	ldr	r2, [pc, #136]	; (80068ac <HAL_DMA_Abort_IT+0xd0>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d029      	beq.n	800687c <HAL_DMA_Abort_IT+0xa0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a20      	ldr	r2, [pc, #128]	; (80068b0 <HAL_DMA_Abort_IT+0xd4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d022      	beq.n	8006878 <HAL_DMA_Abort_IT+0x9c>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1f      	ldr	r2, [pc, #124]	; (80068b4 <HAL_DMA_Abort_IT+0xd8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d01a      	beq.n	8006872 <HAL_DMA_Abort_IT+0x96>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <HAL_DMA_Abort_IT+0xdc>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d012      	beq.n	800686c <HAL_DMA_Abort_IT+0x90>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <HAL_DMA_Abort_IT+0xe0>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00a      	beq.n	8006866 <HAL_DMA_Abort_IT+0x8a>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <HAL_DMA_Abort_IT+0xe4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d102      	bne.n	8006860 <HAL_DMA_Abort_IT+0x84>
 800685a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800685e:	e00e      	b.n	800687e <HAL_DMA_Abort_IT+0xa2>
 8006860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006864:	e00b      	b.n	800687e <HAL_DMA_Abort_IT+0xa2>
 8006866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800686a:	e008      	b.n	800687e <HAL_DMA_Abort_IT+0xa2>
 800686c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006870:	e005      	b.n	800687e <HAL_DMA_Abort_IT+0xa2>
 8006872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006876:	e002      	b.n	800687e <HAL_DMA_Abort_IT+0xa2>
 8006878:	2310      	movs	r3, #16
 800687a:	e000      	b.n	800687e <HAL_DMA_Abort_IT+0xa2>
 800687c:	2301      	movs	r3, #1
 800687e:	4a11      	ldr	r2, [pc, #68]	; (80068c4 <HAL_DMA_Abort_IT+0xe8>)
 8006880:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
    } 
  }
  return status;
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40020008 	.word	0x40020008
 80068b0:	4002001c 	.word	0x4002001c
 80068b4:	40020030 	.word	0x40020030
 80068b8:	40020044 	.word	0x40020044
 80068bc:	40020058 	.word	0x40020058
 80068c0:	4002006c 	.word	0x4002006c
 80068c4:	40020000 	.word	0x40020000

080068c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	2204      	movs	r2, #4
 80068e6:	409a      	lsls	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d04f      	beq.n	8006990 <HAL_DMA_IRQHandler+0xc8>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d04a      	beq.n	8006990 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d107      	bne.n	8006918 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0204 	bic.w	r2, r2, #4
 8006916:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a66      	ldr	r2, [pc, #408]	; (8006ab8 <HAL_DMA_IRQHandler+0x1f0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d029      	beq.n	8006976 <HAL_DMA_IRQHandler+0xae>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a65      	ldr	r2, [pc, #404]	; (8006abc <HAL_DMA_IRQHandler+0x1f4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d022      	beq.n	8006972 <HAL_DMA_IRQHandler+0xaa>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a63      	ldr	r2, [pc, #396]	; (8006ac0 <HAL_DMA_IRQHandler+0x1f8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01a      	beq.n	800696c <HAL_DMA_IRQHandler+0xa4>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a62      	ldr	r2, [pc, #392]	; (8006ac4 <HAL_DMA_IRQHandler+0x1fc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d012      	beq.n	8006966 <HAL_DMA_IRQHandler+0x9e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a60      	ldr	r2, [pc, #384]	; (8006ac8 <HAL_DMA_IRQHandler+0x200>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00a      	beq.n	8006960 <HAL_DMA_IRQHandler+0x98>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a5f      	ldr	r2, [pc, #380]	; (8006acc <HAL_DMA_IRQHandler+0x204>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d102      	bne.n	800695a <HAL_DMA_IRQHandler+0x92>
 8006954:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006958:	e00e      	b.n	8006978 <HAL_DMA_IRQHandler+0xb0>
 800695a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800695e:	e00b      	b.n	8006978 <HAL_DMA_IRQHandler+0xb0>
 8006960:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006964:	e008      	b.n	8006978 <HAL_DMA_IRQHandler+0xb0>
 8006966:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800696a:	e005      	b.n	8006978 <HAL_DMA_IRQHandler+0xb0>
 800696c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006970:	e002      	b.n	8006978 <HAL_DMA_IRQHandler+0xb0>
 8006972:	2340      	movs	r3, #64	; 0x40
 8006974:	e000      	b.n	8006978 <HAL_DMA_IRQHandler+0xb0>
 8006976:	2304      	movs	r3, #4
 8006978:	4a55      	ldr	r2, [pc, #340]	; (8006ad0 <HAL_DMA_IRQHandler+0x208>)
 800697a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8094 	beq.w	8006aae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800698e:	e08e      	b.n	8006aae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2202      	movs	r2, #2
 8006996:	409a      	lsls	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d056      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x186>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d051      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10b      	bne.n	80069d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 020a 	bic.w	r2, r2, #10
 80069c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a38      	ldr	r2, [pc, #224]	; (8006ab8 <HAL_DMA_IRQHandler+0x1f0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d029      	beq.n	8006a2e <HAL_DMA_IRQHandler+0x166>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a37      	ldr	r2, [pc, #220]	; (8006abc <HAL_DMA_IRQHandler+0x1f4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d022      	beq.n	8006a2a <HAL_DMA_IRQHandler+0x162>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a35      	ldr	r2, [pc, #212]	; (8006ac0 <HAL_DMA_IRQHandler+0x1f8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d01a      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x15c>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a34      	ldr	r2, [pc, #208]	; (8006ac4 <HAL_DMA_IRQHandler+0x1fc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d012      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x156>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a32      	ldr	r2, [pc, #200]	; (8006ac8 <HAL_DMA_IRQHandler+0x200>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00a      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x150>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a31      	ldr	r2, [pc, #196]	; (8006acc <HAL_DMA_IRQHandler+0x204>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d102      	bne.n	8006a12 <HAL_DMA_IRQHandler+0x14a>
 8006a0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006a10:	e00e      	b.n	8006a30 <HAL_DMA_IRQHandler+0x168>
 8006a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a16:	e00b      	b.n	8006a30 <HAL_DMA_IRQHandler+0x168>
 8006a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a1c:	e008      	b.n	8006a30 <HAL_DMA_IRQHandler+0x168>
 8006a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a22:	e005      	b.n	8006a30 <HAL_DMA_IRQHandler+0x168>
 8006a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a28:	e002      	b.n	8006a30 <HAL_DMA_IRQHandler+0x168>
 8006a2a:	2320      	movs	r3, #32
 8006a2c:	e000      	b.n	8006a30 <HAL_DMA_IRQHandler+0x168>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	4a27      	ldr	r2, [pc, #156]	; (8006ad0 <HAL_DMA_IRQHandler+0x208>)
 8006a32:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d034      	beq.n	8006aae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006a4c:	e02f      	b.n	8006aae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	2208      	movs	r2, #8
 8006a54:	409a      	lsls	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d028      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x1e8>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d023      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 020e 	bic.w	r2, r2, #14
 8006a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	2101      	movs	r1, #1
 8006a82:	fa01 f202 	lsl.w	r2, r1, r2
 8006a86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	4798      	blx	r3
    }
  }
  return;
 8006aae:	bf00      	nop
 8006ab0:	bf00      	nop
}
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40020008 	.word	0x40020008
 8006abc:	4002001c 	.word	0x4002001c
 8006ac0:	40020030 	.word	0x40020030
 8006ac4:	40020044 	.word	0x40020044
 8006ac8:	40020058 	.word	0x40020058
 8006acc:	4002006c 	.word	0x4002006c
 8006ad0:	40020000 	.word	0x40020000

08006ad4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aea:	2101      	movs	r1, #1
 8006aec:	fa01 f202 	lsl.w	r2, r1, r2
 8006af0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b10      	cmp	r3, #16
 8006b00:	d108      	bne.n	8006b14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b12:	e007      	b.n	8006b24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	60da      	str	r2, [r3, #12]
}
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr
	...

08006b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b08b      	sub	sp, #44	; 0x2c
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b42:	e127      	b.n	8006d94 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006b44:	2201      	movs	r2, #1
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	4013      	ands	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	f040 8116 	bne.w	8006d8e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b12      	cmp	r3, #18
 8006b68:	d034      	beq.n	8006bd4 <HAL_GPIO_Init+0xa4>
 8006b6a:	2b12      	cmp	r3, #18
 8006b6c:	d80d      	bhi.n	8006b8a <HAL_GPIO_Init+0x5a>
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d02b      	beq.n	8006bca <HAL_GPIO_Init+0x9a>
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d804      	bhi.n	8006b80 <HAL_GPIO_Init+0x50>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d031      	beq.n	8006bde <HAL_GPIO_Init+0xae>
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d01c      	beq.n	8006bb8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006b7e:	e048      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d043      	beq.n	8006c0c <HAL_GPIO_Init+0xdc>
 8006b84:	2b11      	cmp	r3, #17
 8006b86:	d01b      	beq.n	8006bc0 <HAL_GPIO_Init+0x90>
          break;
 8006b88:	e043      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006b8a:	4a89      	ldr	r2, [pc, #548]	; (8006db0 <HAL_GPIO_Init+0x280>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d026      	beq.n	8006bde <HAL_GPIO_Init+0xae>
 8006b90:	4a87      	ldr	r2, [pc, #540]	; (8006db0 <HAL_GPIO_Init+0x280>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d806      	bhi.n	8006ba4 <HAL_GPIO_Init+0x74>
 8006b96:	4a87      	ldr	r2, [pc, #540]	; (8006db4 <HAL_GPIO_Init+0x284>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d020      	beq.n	8006bde <HAL_GPIO_Init+0xae>
 8006b9c:	4a86      	ldr	r2, [pc, #536]	; (8006db8 <HAL_GPIO_Init+0x288>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d01d      	beq.n	8006bde <HAL_GPIO_Init+0xae>
          break;
 8006ba2:	e036      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006ba4:	4a85      	ldr	r2, [pc, #532]	; (8006dbc <HAL_GPIO_Init+0x28c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d019      	beq.n	8006bde <HAL_GPIO_Init+0xae>
 8006baa:	4a85      	ldr	r2, [pc, #532]	; (8006dc0 <HAL_GPIO_Init+0x290>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d016      	beq.n	8006bde <HAL_GPIO_Init+0xae>
 8006bb0:	4a84      	ldr	r2, [pc, #528]	; (8006dc4 <HAL_GPIO_Init+0x294>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d013      	beq.n	8006bde <HAL_GPIO_Init+0xae>
          break;
 8006bb6:	e02c      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	623b      	str	r3, [r7, #32]
          break;
 8006bbe:	e028      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	623b      	str	r3, [r7, #32]
          break;
 8006bc8:	e023      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	623b      	str	r3, [r7, #32]
          break;
 8006bd2:	e01e      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	623b      	str	r3, [r7, #32]
          break;
 8006bdc:	e019      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006be6:	2304      	movs	r3, #4
 8006be8:	623b      	str	r3, [r7, #32]
          break;
 8006bea:	e012      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d105      	bne.n	8006c00 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	611a      	str	r2, [r3, #16]
          break;
 8006bfe:	e008      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c00:	2308      	movs	r3, #8
 8006c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	615a      	str	r2, [r3, #20]
          break;
 8006c0a:	e002      	b.n	8006c12 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	623b      	str	r3, [r7, #32]
          break;
 8006c10:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2bff      	cmp	r3, #255	; 0xff
 8006c16:	d801      	bhi.n	8006c1c <HAL_GPIO_Init+0xec>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	e001      	b.n	8006c20 <HAL_GPIO_Init+0xf0>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2bff      	cmp	r3, #255	; 0xff
 8006c26:	d802      	bhi.n	8006c2e <HAL_GPIO_Init+0xfe>
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	e002      	b.n	8006c34 <HAL_GPIO_Init+0x104>
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	3b08      	subs	r3, #8
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	210f      	movs	r1, #15
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c42:	43db      	mvns	r3, r3
 8006c44:	401a      	ands	r2, r3
 8006c46:	6a39      	ldr	r1, [r7, #32]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 8096 	beq.w	8006d8e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006c62:	4b59      	ldr	r3, [pc, #356]	; (8006dc8 <HAL_GPIO_Init+0x298>)
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	4a58      	ldr	r2, [pc, #352]	; (8006dc8 <HAL_GPIO_Init+0x298>)
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	6193      	str	r3, [r2, #24]
 8006c6e:	4b56      	ldr	r3, [pc, #344]	; (8006dc8 <HAL_GPIO_Init+0x298>)
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	60bb      	str	r3, [r7, #8]
 8006c78:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006c7a:	4a54      	ldr	r2, [pc, #336]	; (8006dcc <HAL_GPIO_Init+0x29c>)
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	3302      	adds	r3, #2
 8006c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c86:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	220f      	movs	r2, #15
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a4b      	ldr	r2, [pc, #300]	; (8006dd0 <HAL_GPIO_Init+0x2a0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d013      	beq.n	8006cce <HAL_GPIO_Init+0x19e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a4a      	ldr	r2, [pc, #296]	; (8006dd4 <HAL_GPIO_Init+0x2a4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00d      	beq.n	8006cca <HAL_GPIO_Init+0x19a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a49      	ldr	r2, [pc, #292]	; (8006dd8 <HAL_GPIO_Init+0x2a8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d007      	beq.n	8006cc6 <HAL_GPIO_Init+0x196>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a48      	ldr	r2, [pc, #288]	; (8006ddc <HAL_GPIO_Init+0x2ac>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d101      	bne.n	8006cc2 <HAL_GPIO_Init+0x192>
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e006      	b.n	8006cd0 <HAL_GPIO_Init+0x1a0>
 8006cc2:	2304      	movs	r3, #4
 8006cc4:	e004      	b.n	8006cd0 <HAL_GPIO_Init+0x1a0>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	e002      	b.n	8006cd0 <HAL_GPIO_Init+0x1a0>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <HAL_GPIO_Init+0x1a0>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd2:	f002 0203 	and.w	r2, r2, #3
 8006cd6:	0092      	lsls	r2, r2, #2
 8006cd8:	4093      	lsls	r3, r2
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006ce0:	493a      	ldr	r1, [pc, #232]	; (8006dcc <HAL_GPIO_Init+0x29c>)
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	089b      	lsrs	r3, r3, #2
 8006ce6:	3302      	adds	r3, #2
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d006      	beq.n	8006d08 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006cfa:	4b39      	ldr	r3, [pc, #228]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4938      	ldr	r1, [pc, #224]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	600b      	str	r3, [r1, #0]
 8006d06:	e006      	b.n	8006d16 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006d08:	4b35      	ldr	r3, [pc, #212]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	43db      	mvns	r3, r3
 8006d10:	4933      	ldr	r1, [pc, #204]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d12:	4013      	ands	r3, r2
 8006d14:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d006      	beq.n	8006d30 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006d22:	4b2f      	ldr	r3, [pc, #188]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	492e      	ldr	r1, [pc, #184]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	604b      	str	r3, [r1, #4]
 8006d2e:	e006      	b.n	8006d3e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006d30:	4b2b      	ldr	r3, [pc, #172]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	43db      	mvns	r3, r3
 8006d38:	4929      	ldr	r1, [pc, #164]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d006      	beq.n	8006d58 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d4a:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	4924      	ldr	r1, [pc, #144]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
 8006d56:	e006      	b.n	8006d66 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006d58:	4b21      	ldr	r3, [pc, #132]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	43db      	mvns	r3, r3
 8006d60:	491f      	ldr	r1, [pc, #124]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d006      	beq.n	8006d80 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006d72:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	491a      	ldr	r1, [pc, #104]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60cb      	str	r3, [r1, #12]
 8006d7e:	e006      	b.n	8006d8e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006d80:	4b17      	ldr	r3, [pc, #92]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	43db      	mvns	r3, r3
 8006d88:	4915      	ldr	r1, [pc, #84]	; (8006de0 <HAL_GPIO_Init+0x2b0>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	3301      	adds	r3, #1
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f47f aed0 	bne.w	8006b44 <HAL_GPIO_Init+0x14>
  }
}
 8006da4:	bf00      	nop
 8006da6:	372c      	adds	r7, #44	; 0x2c
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	10210000 	.word	0x10210000
 8006db4:	10110000 	.word	0x10110000
 8006db8:	10120000 	.word	0x10120000
 8006dbc:	10310000 	.word	0x10310000
 8006dc0:	10320000 	.word	0x10320000
 8006dc4:	10220000 	.word	0x10220000
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40010800 	.word	0x40010800
 8006dd4:	40010c00 	.word	0x40010c00
 8006dd8:	40011000 	.word	0x40011000
 8006ddc:	40011400 	.word	0x40011400
 8006de0:	40010400 	.word	0x40010400

08006de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	807b      	strh	r3, [r7, #2]
 8006df0:	4613      	mov	r3, r2
 8006df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006df4:	787b      	ldrb	r3, [r7, #1]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dfa:	887a      	ldrh	r2, [r7, #2]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006e00:	e003      	b.n	8006e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006e02:	887b      	ldrh	r3, [r7, #2]
 8006e04:	041a      	lsls	r2, r3, #16
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	611a      	str	r2, [r3, #16]
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e26:	887a      	ldrh	r2, [r7, #2]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	041a      	lsls	r2, r3, #16
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	43d9      	mvns	r1, r3
 8006e32:	887b      	ldrh	r3, [r7, #2]
 8006e34:	400b      	ands	r3, r1
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	611a      	str	r2, [r3, #16]
}
 8006e3c:	bf00      	nop
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bc80      	pop	{r7}
 8006e44:	4770      	bx	lr
	...

08006e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e11f      	b.n	800709a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fe ffb6 	bl	8005de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2224      	movs	r2, #36	; 0x24
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0201 	bic.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006eac:	f001 fb90 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 8006eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4a7b      	ldr	r2, [pc, #492]	; (80070a4 <HAL_I2C_Init+0x25c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d807      	bhi.n	8006ecc <HAL_I2C_Init+0x84>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4a7a      	ldr	r2, [pc, #488]	; (80070a8 <HAL_I2C_Init+0x260>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	bf94      	ite	ls
 8006ec4:	2301      	movls	r3, #1
 8006ec6:	2300      	movhi	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	e006      	b.n	8006eda <HAL_I2C_Init+0x92>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4a77      	ldr	r2, [pc, #476]	; (80070ac <HAL_I2C_Init+0x264>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	bf94      	ite	ls
 8006ed4:	2301      	movls	r3, #1
 8006ed6:	2300      	movhi	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e0db      	b.n	800709a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4a72      	ldr	r2, [pc, #456]	; (80070b0 <HAL_I2C_Init+0x268>)
 8006ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eea:	0c9b      	lsrs	r3, r3, #18
 8006eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4a64      	ldr	r2, [pc, #400]	; (80070a4 <HAL_I2C_Init+0x25c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d802      	bhi.n	8006f1c <HAL_I2C_Init+0xd4>
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	e009      	b.n	8006f30 <HAL_I2C_Init+0xe8>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
 8006f26:	4a63      	ldr	r2, [pc, #396]	; (80070b4 <HAL_I2C_Init+0x26c>)
 8006f28:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2c:	099b      	lsrs	r3, r3, #6
 8006f2e:	3301      	adds	r3, #1
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	430b      	orrs	r3, r1
 8006f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4956      	ldr	r1, [pc, #344]	; (80070a4 <HAL_I2C_Init+0x25c>)
 8006f4c:	428b      	cmp	r3, r1
 8006f4e:	d80d      	bhi.n	8006f6c <HAL_I2C_Init+0x124>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	1e59      	subs	r1, r3, #1
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f5e:	3301      	adds	r3, #1
 8006f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	bf38      	it	cc
 8006f68:	2304      	movcc	r3, #4
 8006f6a:	e04f      	b.n	800700c <HAL_I2C_Init+0x1c4>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d111      	bne.n	8006f98 <HAL_I2C_Init+0x150>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	1e58      	subs	r0, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6859      	ldr	r1, [r3, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	440b      	add	r3, r1
 8006f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f86:	3301      	adds	r3, #1
 8006f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	bf0c      	ite	eq
 8006f90:	2301      	moveq	r3, #1
 8006f92:	2300      	movne	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	e012      	b.n	8006fbe <HAL_I2C_Init+0x176>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	1e58      	subs	r0, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6859      	ldr	r1, [r3, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	0099      	lsls	r1, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fae:	3301      	adds	r3, #1
 8006fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bf0c      	ite	eq
 8006fb8:	2301      	moveq	r3, #1
 8006fba:	2300      	movne	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_I2C_Init+0x17e>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e022      	b.n	800700c <HAL_I2C_Init+0x1c4>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10e      	bne.n	8006fec <HAL_I2C_Init+0x1a4>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1e58      	subs	r0, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6859      	ldr	r1, [r3, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	440b      	add	r3, r1
 8006fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fea:	e00f      	b.n	800700c <HAL_I2C_Init+0x1c4>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	1e58      	subs	r0, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6859      	ldr	r1, [r3, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	0099      	lsls	r1, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007002:	3301      	adds	r3, #1
 8007004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	6809      	ldr	r1, [r1, #0]
 8007010:	4313      	orrs	r3, r2
 8007012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69da      	ldr	r2, [r3, #28]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800703a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6911      	ldr	r1, [r2, #16]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	68d2      	ldr	r2, [r2, #12]
 8007046:	4311      	orrs	r1, r2
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	430b      	orrs	r3, r1
 800704e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695a      	ldr	r2, [r3, #20]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	000186a0 	.word	0x000186a0
 80070a8:	001e847f 	.word	0x001e847f
 80070ac:	003d08ff 	.word	0x003d08ff
 80070b0:	431bde83 	.word	0x431bde83
 80070b4:	10624dd3 	.word	0x10624dd3

080070b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af02      	add	r7, sp, #8
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	4608      	mov	r0, r1
 80070c2:	4611      	mov	r1, r2
 80070c4:	461a      	mov	r2, r3
 80070c6:	4603      	mov	r3, r0
 80070c8:	817b      	strh	r3, [r7, #10]
 80070ca:	460b      	mov	r3, r1
 80070cc:	813b      	strh	r3, [r7, #8]
 80070ce:	4613      	mov	r3, r2
 80070d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070d2:	f7ff f955 	bl	8006380 <HAL_GetTick>
 80070d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	f040 80d9 	bne.w	8007298 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	2319      	movs	r3, #25
 80070ec:	2201      	movs	r2, #1
 80070ee:	496d      	ldr	r1, [pc, #436]	; (80072a4 <HAL_I2C_Mem_Write+0x1ec>)
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fcbb 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80070fc:	2302      	movs	r3, #2
 80070fe:	e0cc      	b.n	800729a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_I2C_Mem_Write+0x56>
 800710a:	2302      	movs	r3, #2
 800710c:	e0c5      	b.n	800729a <HAL_I2C_Mem_Write+0x1e2>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b01      	cmp	r3, #1
 8007122:	d007      	beq.n	8007134 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0201 	orr.w	r2, r2, #1
 8007132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2221      	movs	r2, #33	; 0x21
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2240      	movs	r2, #64	; 0x40
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a3a      	ldr	r2, [r7, #32]
 800715e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a4d      	ldr	r2, [pc, #308]	; (80072a8 <HAL_I2C_Mem_Write+0x1f0>)
 8007174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007176:	88f8      	ldrh	r0, [r7, #6]
 8007178:	893a      	ldrh	r2, [r7, #8]
 800717a:	8979      	ldrh	r1, [r7, #10]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	4603      	mov	r3, r0
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 faf2 	bl	8007770 <I2C_RequestMemoryWrite>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d052      	beq.n	8007238 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e081      	b.n	800729a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 fd3c 	bl	8007c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00d      	beq.n	80071c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d107      	bne.n	80071be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e06b      	b.n	800729a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d11b      	bne.n	8007238 <HAL_I2C_Mem_Write+0x180>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007204:	2b00      	cmp	r3, #0
 8007206:	d017      	beq.n	8007238 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	781a      	ldrb	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1aa      	bne.n	8007196 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fd28 	bl	8007c9a <I2C_WaitOnBTFFlagUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00d      	beq.n	800726c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	2b04      	cmp	r3, #4
 8007256:	d107      	bne.n	8007268 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007266:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e016      	b.n	800729a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800727a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	e000      	b.n	800729a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007298:	2302      	movs	r3, #2
  }
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	00100002 	.word	0x00100002
 80072a8:	ffff0000 	.word	0xffff0000

080072ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08c      	sub	sp, #48	; 0x30
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	4608      	mov	r0, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	461a      	mov	r2, r3
 80072ba:	4603      	mov	r3, r0
 80072bc:	817b      	strh	r3, [r7, #10]
 80072be:	460b      	mov	r3, r1
 80072c0:	813b      	strh	r3, [r7, #8]
 80072c2:	4613      	mov	r3, r2
 80072c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072ca:	f7ff f859 	bl	8006380 <HAL_GetTick>
 80072ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b20      	cmp	r3, #32
 80072da:	f040 823d 	bne.w	8007758 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	2319      	movs	r3, #25
 80072e4:	2201      	movs	r2, #1
 80072e6:	4981      	ldr	r1, [pc, #516]	; (80074ec <HAL_I2C_Mem_Read+0x240>)
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 fbbf 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80072f4:	2302      	movs	r3, #2
 80072f6:	e230      	b.n	800775a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_I2C_Mem_Read+0x5a>
 8007302:	2302      	movs	r3, #2
 8007304:	e229      	b.n	800775a <HAL_I2C_Mem_Read+0x4ae>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b01      	cmp	r3, #1
 800731a:	d007      	beq.n	800732c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800733a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2222      	movs	r2, #34	; 0x22
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2240      	movs	r2, #64	; 0x40
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800735c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007362:	b29a      	uxth	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4a61      	ldr	r2, [pc, #388]	; (80074f0 <HAL_I2C_Mem_Read+0x244>)
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800736e:	88f8      	ldrh	r0, [r7, #6]
 8007370:	893a      	ldrh	r2, [r7, #8]
 8007372:	8979      	ldrh	r1, [r7, #10]
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	4603      	mov	r3, r0
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 fa8c 	bl	800789c <I2C_RequestMemoryRead>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e1e5      	b.n	800775a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007392:	2b00      	cmp	r3, #0
 8007394:	d113      	bne.n	80073be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007396:	2300      	movs	r3, #0
 8007398:	61fb      	str	r3, [r7, #28]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	e1b9      	b.n	8007732 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d11d      	bne.n	8007402 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073d8:	2300      	movs	r3, #0
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	61bb      	str	r3, [r7, #24]
 80073ec:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80073fe:	b662      	cpsie	i
 8007400:	e197      	b.n	8007732 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007406:	2b02      	cmp	r3, #2
 8007408:	d11d      	bne.n	8007446 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007418:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800741a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800741c:	2300      	movs	r3, #0
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007440:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007442:	b662      	cpsie	i
 8007444:	e175      	b.n	8007732 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007454:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007456:	2300      	movs	r3, #0
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	613b      	str	r3, [r7, #16]
 800746a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800746c:	e161      	b.n	8007732 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007472:	2b03      	cmp	r3, #3
 8007474:	f200 811a 	bhi.w	80076ac <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800747c:	2b01      	cmp	r3, #1
 800747e:	d123      	bne.n	80074c8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007482:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fc49 	bl	8007d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e162      	b.n	800775a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691a      	ldr	r2, [r3, #16]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074c6:	e134      	b.n	8007732 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d150      	bne.n	8007572 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	2200      	movs	r2, #0
 80074d8:	4906      	ldr	r1, [pc, #24]	; (80074f4 <HAL_I2C_Mem_Read+0x248>)
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 fac6 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d008      	beq.n	80074f8 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e137      	b.n	800775a <HAL_I2C_Mem_Read+0x4ae>
 80074ea:	bf00      	nop
 80074ec:	00100002 	.word	0x00100002
 80074f0:	ffff0000 	.word	0xffff0000
 80074f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80074f8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007508:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	b2d2      	uxtb	r2, r2
 8007516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800753c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	b2d2      	uxtb	r2, r2
 800754a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007570:	e0df      	b.n	8007732 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	2200      	movs	r2, #0
 800757a:	497a      	ldr	r1, [pc, #488]	; (8007764 <HAL_I2C_Mem_Read+0x4b8>)
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fa75 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e0e6      	b.n	800775a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800759a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800759c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691a      	ldr	r2, [r3, #16]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80075d0:	4b65      	ldr	r3, [pc, #404]	; (8007768 <HAL_I2C_Mem_Read+0x4bc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	08db      	lsrs	r3, r3, #3
 80075d6:	4a65      	ldr	r2, [pc, #404]	; (800776c <HAL_I2C_Mem_Read+0x4c0>)
 80075d8:	fba2 2303 	umull	r2, r3, r2, r3
 80075dc:	0a1a      	lsrs	r2, r3, #8
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	00da      	lsls	r2, r3, #3
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d117      	bne.n	8007626 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	f043 0220 	orr.w	r2, r3, #32
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007618:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e099      	b.n	800775a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b04      	cmp	r3, #4
 8007632:	d1da      	bne.n	80075ea <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007676:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691a      	ldr	r2, [r3, #16]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076aa:	e042      	b.n	8007732 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 fb33 	bl	8007d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e04c      	b.n	800775a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b04      	cmp	r3, #4
 80076fe:	d118      	bne.n	8007732 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691a      	ldr	r2, [r3, #16]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007736:	2b00      	cmp	r3, #0
 8007738:	f47f ae99 	bne.w	800746e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2220      	movs	r2, #32
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	e000      	b.n	800775a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8007758:	2302      	movs	r3, #2
  }
}
 800775a:	4618      	mov	r0, r3
 800775c:	3728      	adds	r7, #40	; 0x28
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	00010004 	.word	0x00010004
 8007768:	20000024 	.word	0x20000024
 800776c:	14f8b589 	.word	0x14f8b589

08007770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af02      	add	r7, sp, #8
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	4608      	mov	r0, r1
 800777a:	4611      	mov	r1, r2
 800777c:	461a      	mov	r2, r3
 800777e:	4603      	mov	r3, r0
 8007780:	817b      	strh	r3, [r7, #10]
 8007782:	460b      	mov	r3, r1
 8007784:	813b      	strh	r3, [r7, #8]
 8007786:	4613      	mov	r3, r2
 8007788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f960 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00d      	beq.n	80077ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c0:	d103      	bne.n	80077ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e05f      	b.n	800788e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077ce:	897b      	ldrh	r3, [r7, #10]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	6a3a      	ldr	r2, [r7, #32]
 80077e2:	492d      	ldr	r1, [pc, #180]	; (8007898 <I2C_RequestMemoryWrite+0x128>)
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 f998 	bl	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e04c      	b.n	800788e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077f4:	2300      	movs	r3, #0
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800780a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780c:	6a39      	ldr	r1, [r7, #32]
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 fa02 	bl	8007c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00d      	beq.n	8007836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	2b04      	cmp	r3, #4
 8007820:	d107      	bne.n	8007832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e02b      	b.n	800788e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d105      	bne.n	8007848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800783c:	893b      	ldrh	r3, [r7, #8]
 800783e:	b2da      	uxtb	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	611a      	str	r2, [r3, #16]
 8007846:	e021      	b.n	800788c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007848:	893b      	ldrh	r3, [r7, #8]
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	b29b      	uxth	r3, r3
 800784e:	b2da      	uxtb	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007858:	6a39      	ldr	r1, [r7, #32]
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f9dc 	bl	8007c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00d      	beq.n	8007882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	2b04      	cmp	r3, #4
 800786c:	d107      	bne.n	800787e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800787c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e005      	b.n	800788e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007882:	893b      	ldrh	r3, [r7, #8]
 8007884:	b2da      	uxtb	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	00010002 	.word	0x00010002

0800789c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	4608      	mov	r0, r1
 80078a6:	4611      	mov	r1, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	817b      	strh	r3, [r7, #10]
 80078ae:	460b      	mov	r3, r1
 80078b0:	813b      	strh	r3, [r7, #8]
 80078b2:	4613      	mov	r3, r2
 80078b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	2200      	movs	r2, #0
 80078de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f8c2 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00d      	beq.n	800790a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fc:	d103      	bne.n	8007906 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e0aa      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800790a:	897b      	ldrh	r3, [r7, #10]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	6a3a      	ldr	r2, [r7, #32]
 800791e:	4952      	ldr	r1, [pc, #328]	; (8007a68 <I2C_RequestMemoryRead+0x1cc>)
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 f8fa 	bl	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e097      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007948:	6a39      	ldr	r1, [r7, #32]
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f964 	bl	8007c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00d      	beq.n	8007972 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	2b04      	cmp	r3, #4
 800795c:	d107      	bne.n	800796e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e076      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d105      	bne.n	8007984 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007978:	893b      	ldrh	r3, [r7, #8]
 800797a:	b2da      	uxtb	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	611a      	str	r2, [r3, #16]
 8007982:	e021      	b.n	80079c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007984:	893b      	ldrh	r3, [r7, #8]
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	b29b      	uxth	r3, r3
 800798a:	b2da      	uxtb	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007994:	6a39      	ldr	r1, [r7, #32]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f93e 	bl	8007c18 <I2C_WaitOnTXEFlagUntilTimeout>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00d      	beq.n	80079be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d107      	bne.n	80079ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e050      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079be:	893b      	ldrh	r3, [r7, #8]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ca:	6a39      	ldr	r1, [r7, #32]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f923 	bl	8007c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00d      	beq.n	80079f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d107      	bne.n	80079f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e035      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f82b 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00d      	beq.n	8007a38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2a:	d103      	bne.n	8007a34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e013      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a38:	897b      	ldrh	r3, [r7, #10]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	6a3a      	ldr	r2, [r7, #32]
 8007a4c:	4906      	ldr	r1, [pc, #24]	; (8007a68 <I2C_RequestMemoryRead+0x1cc>)
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 f863 	bl	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e000      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	00010002 	.word	0x00010002

08007a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a7c:	e025      	b.n	8007aca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a84:	d021      	beq.n	8007aca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a86:	f7fe fc7b 	bl	8006380 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d302      	bcc.n	8007a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d116      	bne.n	8007aca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	f043 0220 	orr.w	r2, r3, #32
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e023      	b.n	8007b12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	0c1b      	lsrs	r3, r3, #16
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d10d      	bne.n	8007af0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	43da      	mvns	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bf0c      	ite	eq
 8007ae6:	2301      	moveq	r3, #1
 8007ae8:	2300      	movne	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	461a      	mov	r2, r3
 8007aee:	e00c      	b.n	8007b0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	43da      	mvns	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4013      	ands	r3, r2
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bf0c      	ite	eq
 8007b02:	2301      	moveq	r3, #1
 8007b04:	2300      	movne	r3, #0
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	461a      	mov	r2, r3
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d0b6      	beq.n	8007a7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	607a      	str	r2, [r7, #4]
 8007b26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b28:	e051      	b.n	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b38:	d123      	bne.n	8007b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	f043 0204 	orr.w	r2, r3, #4
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e046      	b.n	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d021      	beq.n	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8a:	f7fe fbf9 	bl	8006380 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d116      	bne.n	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f043 0220 	orr.w	r2, r3, #32
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e020      	b.n	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d10c      	bne.n	8007bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	43da      	mvns	r2, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4013      	ands	r3, r2
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bf14      	ite	ne
 8007bea:	2301      	movne	r3, #1
 8007bec:	2300      	moveq	r3, #0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	e00b      	b.n	8007c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	43da      	mvns	r2, r3
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bf14      	ite	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	2300      	moveq	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d18d      	bne.n	8007b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c24:	e02d      	b.n	8007c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 f8ce 	bl	8007dc8 <I2C_IsAcknowledgeFailed>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e02d      	b.n	8007c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d021      	beq.n	8007c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c3e:	f7fe fb9f 	bl	8006380 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d302      	bcc.n	8007c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d116      	bne.n	8007c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f043 0220 	orr.w	r2, r3, #32
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e007      	b.n	8007c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8c:	2b80      	cmp	r3, #128	; 0x80
 8007c8e:	d1ca      	bne.n	8007c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ca6:	e02d      	b.n	8007d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 f88d 	bl	8007dc8 <I2C_IsAcknowledgeFailed>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e02d      	b.n	8007d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d021      	beq.n	8007d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cc0:	f7fe fb5e 	bl	8006380 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d302      	bcc.n	8007cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d116      	bne.n	8007d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	f043 0220 	orr.w	r2, r3, #32
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e007      	b.n	8007d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d1ca      	bne.n	8007ca8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d28:	e042      	b.n	8007db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d119      	bne.n	8007d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0210 	mvn.w	r2, #16
 8007d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e029      	b.n	8007dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6c:	f7fe fb08 	bl	8006380 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d302      	bcc.n	8007d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d116      	bne.n	8007db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	f043 0220 	orr.w	r2, r3, #32
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e007      	b.n	8007dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dba:	2b40      	cmp	r3, #64	; 0x40
 8007dbc:	d1b5      	bne.n	8007d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dde:	d11b      	bne.n	8007e18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007de8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	f043 0204 	orr.w	r2, r3, #4
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e000      	b.n	8007e1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e26c      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 8087 	beq.w	8007f52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e44:	4b92      	ldr	r3, [pc, #584]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f003 030c 	and.w	r3, r3, #12
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d00c      	beq.n	8007e6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007e50:	4b8f      	ldr	r3, [pc, #572]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f003 030c 	and.w	r3, r3, #12
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d112      	bne.n	8007e82 <HAL_RCC_OscConfig+0x5e>
 8007e5c:	4b8c      	ldr	r3, [pc, #560]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e68:	d10b      	bne.n	8007e82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e6a:	4b89      	ldr	r3, [pc, #548]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d06c      	beq.n	8007f50 <HAL_RCC_OscConfig+0x12c>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d168      	bne.n	8007f50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e246      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e8a:	d106      	bne.n	8007e9a <HAL_RCC_OscConfig+0x76>
 8007e8c:	4b80      	ldr	r3, [pc, #512]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a7f      	ldr	r2, [pc, #508]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	e02e      	b.n	8007ef8 <HAL_RCC_OscConfig+0xd4>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10c      	bne.n	8007ebc <HAL_RCC_OscConfig+0x98>
 8007ea2:	4b7b      	ldr	r3, [pc, #492]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a7a      	ldr	r2, [pc, #488]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4b78      	ldr	r3, [pc, #480]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a77      	ldr	r2, [pc, #476]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	e01d      	b.n	8007ef8 <HAL_RCC_OscConfig+0xd4>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_RCC_OscConfig+0xbc>
 8007ec6:	4b72      	ldr	r3, [pc, #456]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a71      	ldr	r2, [pc, #452]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	4b6f      	ldr	r3, [pc, #444]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a6e      	ldr	r2, [pc, #440]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	e00b      	b.n	8007ef8 <HAL_RCC_OscConfig+0xd4>
 8007ee0:	4b6b      	ldr	r3, [pc, #428]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a6a      	ldr	r2, [pc, #424]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	4b68      	ldr	r3, [pc, #416]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a67      	ldr	r2, [pc, #412]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ef6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d013      	beq.n	8007f28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f00:	f7fe fa3e 	bl	8006380 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f08:	f7fe fa3a 	bl	8006380 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b64      	cmp	r3, #100	; 0x64
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e1fa      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f1a:	4b5d      	ldr	r3, [pc, #372]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0f0      	beq.n	8007f08 <HAL_RCC_OscConfig+0xe4>
 8007f26:	e014      	b.n	8007f52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f28:	f7fe fa2a 	bl	8006380 <HAL_GetTick>
 8007f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f30:	f7fe fa26 	bl	8006380 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b64      	cmp	r3, #100	; 0x64
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e1e6      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f42:	4b53      	ldr	r3, [pc, #332]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1f0      	bne.n	8007f30 <HAL_RCC_OscConfig+0x10c>
 8007f4e:	e000      	b.n	8007f52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d063      	beq.n	8008026 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f5e:	4b4c      	ldr	r3, [pc, #304]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f003 030c 	and.w	r3, r3, #12
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00b      	beq.n	8007f82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007f6a:	4b49      	ldr	r3, [pc, #292]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f003 030c 	and.w	r3, r3, #12
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d11c      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x18c>
 8007f76:	4b46      	ldr	r3, [pc, #280]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d116      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f82:	4b43      	ldr	r3, [pc, #268]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d005      	beq.n	8007f9a <HAL_RCC_OscConfig+0x176>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d001      	beq.n	8007f9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e1ba      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f9a:	4b3d      	ldr	r3, [pc, #244]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4939      	ldr	r1, [pc, #228]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fae:	e03a      	b.n	8008026 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d020      	beq.n	8007ffa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fb8:	4b36      	ldr	r3, [pc, #216]	; (8008094 <HAL_RCC_OscConfig+0x270>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fbe:	f7fe f9df 	bl	8006380 <HAL_GetTick>
 8007fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fc4:	e008      	b.n	8007fd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fc6:	f7fe f9db 	bl	8006380 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d901      	bls.n	8007fd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e19b      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fd8:	4b2d      	ldr	r3, [pc, #180]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0f0      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe4:	4b2a      	ldr	r3, [pc, #168]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	4927      	ldr	r1, [pc, #156]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	600b      	str	r3, [r1, #0]
 8007ff8:	e015      	b.n	8008026 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ffa:	4b26      	ldr	r3, [pc, #152]	; (8008094 <HAL_RCC_OscConfig+0x270>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008000:	f7fe f9be 	bl	8006380 <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008008:	f7fe f9ba 	bl	8006380 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b02      	cmp	r3, #2
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e17a      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800801a:	4b1d      	ldr	r3, [pc, #116]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1f0      	bne.n	8008008 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0308 	and.w	r3, r3, #8
 800802e:	2b00      	cmp	r3, #0
 8008030:	d03a      	beq.n	80080a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d019      	beq.n	800806e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800803a:	4b17      	ldr	r3, [pc, #92]	; (8008098 <HAL_RCC_OscConfig+0x274>)
 800803c:	2201      	movs	r2, #1
 800803e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008040:	f7fe f99e 	bl	8006380 <HAL_GetTick>
 8008044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008046:	e008      	b.n	800805a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008048:	f7fe f99a 	bl	8006380 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b02      	cmp	r3, #2
 8008054:	d901      	bls.n	800805a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e15a      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800805a:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <HAL_RCC_OscConfig+0x26c>)
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0f0      	beq.n	8008048 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008066:	2001      	movs	r0, #1
 8008068:	f000 fada 	bl	8008620 <RCC_Delay>
 800806c:	e01c      	b.n	80080a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800806e:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <HAL_RCC_OscConfig+0x274>)
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008074:	f7fe f984 	bl	8006380 <HAL_GetTick>
 8008078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800807a:	e00f      	b.n	800809c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800807c:	f7fe f980 	bl	8006380 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d908      	bls.n	800809c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e140      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
 800808e:	bf00      	nop
 8008090:	40021000 	.word	0x40021000
 8008094:	42420000 	.word	0x42420000
 8008098:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800809c:	4b9e      	ldr	r3, [pc, #632]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e9      	bne.n	800807c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 80a6 	beq.w	8008202 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080b6:	2300      	movs	r3, #0
 80080b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080ba:	4b97      	ldr	r3, [pc, #604]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10d      	bne.n	80080e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080c6:	4b94      	ldr	r3, [pc, #592]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	4a93      	ldr	r2, [pc, #588]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80080cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080d0:	61d3      	str	r3, [r2, #28]
 80080d2:	4b91      	ldr	r3, [pc, #580]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080da:	60bb      	str	r3, [r7, #8]
 80080dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080de:	2301      	movs	r3, #1
 80080e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080e2:	4b8e      	ldr	r3, [pc, #568]	; (800831c <HAL_RCC_OscConfig+0x4f8>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d118      	bne.n	8008120 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080ee:	4b8b      	ldr	r3, [pc, #556]	; (800831c <HAL_RCC_OscConfig+0x4f8>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a8a      	ldr	r2, [pc, #552]	; (800831c <HAL_RCC_OscConfig+0x4f8>)
 80080f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080fa:	f7fe f941 	bl	8006380 <HAL_GetTick>
 80080fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008100:	e008      	b.n	8008114 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008102:	f7fe f93d 	bl	8006380 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b64      	cmp	r3, #100	; 0x64
 800810e:	d901      	bls.n	8008114 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e0fd      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008114:	4b81      	ldr	r3, [pc, #516]	; (800831c <HAL_RCC_OscConfig+0x4f8>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0f0      	beq.n	8008102 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d106      	bne.n	8008136 <HAL_RCC_OscConfig+0x312>
 8008128:	4b7b      	ldr	r3, [pc, #492]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	4a7a      	ldr	r2, [pc, #488]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 800812e:	f043 0301 	orr.w	r3, r3, #1
 8008132:	6213      	str	r3, [r2, #32]
 8008134:	e02d      	b.n	8008192 <HAL_RCC_OscConfig+0x36e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10c      	bne.n	8008158 <HAL_RCC_OscConfig+0x334>
 800813e:	4b76      	ldr	r3, [pc, #472]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	4a75      	ldr	r2, [pc, #468]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008144:	f023 0301 	bic.w	r3, r3, #1
 8008148:	6213      	str	r3, [r2, #32]
 800814a:	4b73      	ldr	r3, [pc, #460]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	4a72      	ldr	r2, [pc, #456]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008150:	f023 0304 	bic.w	r3, r3, #4
 8008154:	6213      	str	r3, [r2, #32]
 8008156:	e01c      	b.n	8008192 <HAL_RCC_OscConfig+0x36e>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b05      	cmp	r3, #5
 800815e:	d10c      	bne.n	800817a <HAL_RCC_OscConfig+0x356>
 8008160:	4b6d      	ldr	r3, [pc, #436]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	4a6c      	ldr	r2, [pc, #432]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008166:	f043 0304 	orr.w	r3, r3, #4
 800816a:	6213      	str	r3, [r2, #32]
 800816c:	4b6a      	ldr	r3, [pc, #424]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	4a69      	ldr	r2, [pc, #420]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008172:	f043 0301 	orr.w	r3, r3, #1
 8008176:	6213      	str	r3, [r2, #32]
 8008178:	e00b      	b.n	8008192 <HAL_RCC_OscConfig+0x36e>
 800817a:	4b67      	ldr	r3, [pc, #412]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	4a66      	ldr	r2, [pc, #408]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	6213      	str	r3, [r2, #32]
 8008186:	4b64      	ldr	r3, [pc, #400]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	4a63      	ldr	r2, [pc, #396]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 800818c:	f023 0304 	bic.w	r3, r3, #4
 8008190:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d015      	beq.n	80081c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800819a:	f7fe f8f1 	bl	8006380 <HAL_GetTick>
 800819e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081a0:	e00a      	b.n	80081b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081a2:	f7fe f8ed 	bl	8006380 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d901      	bls.n	80081b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e0ab      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b8:	4b57      	ldr	r3, [pc, #348]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0ee      	beq.n	80081a2 <HAL_RCC_OscConfig+0x37e>
 80081c4:	e014      	b.n	80081f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081c6:	f7fe f8db 	bl	8006380 <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081cc:	e00a      	b.n	80081e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ce:	f7fe f8d7 	bl	8006380 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081dc:	4293      	cmp	r3, r2
 80081de:	d901      	bls.n	80081e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e095      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081e4:	4b4c      	ldr	r3, [pc, #304]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1ee      	bne.n	80081ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d105      	bne.n	8008202 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081f6:	4b48      	ldr	r3, [pc, #288]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	4a47      	ldr	r2, [pc, #284]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80081fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008200:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 8081 	beq.w	800830e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800820c:	4b42      	ldr	r3, [pc, #264]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f003 030c 	and.w	r3, r3, #12
 8008214:	2b08      	cmp	r3, #8
 8008216:	d061      	beq.n	80082dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d146      	bne.n	80082ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008220:	4b3f      	ldr	r3, [pc, #252]	; (8008320 <HAL_RCC_OscConfig+0x4fc>)
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008226:	f7fe f8ab 	bl	8006380 <HAL_GetTick>
 800822a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800822c:	e008      	b.n	8008240 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800822e:	f7fe f8a7 	bl	8006380 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e067      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008240:	4b35      	ldr	r3, [pc, #212]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f0      	bne.n	800822e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008254:	d108      	bne.n	8008268 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008256:	4b30      	ldr	r3, [pc, #192]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	492d      	ldr	r1, [pc, #180]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 8008264:	4313      	orrs	r3, r2
 8008266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008268:	4b2b      	ldr	r3, [pc, #172]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a19      	ldr	r1, [r3, #32]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	430b      	orrs	r3, r1
 800827a:	4927      	ldr	r1, [pc, #156]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 800827c:	4313      	orrs	r3, r2
 800827e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008280:	4b27      	ldr	r3, [pc, #156]	; (8008320 <HAL_RCC_OscConfig+0x4fc>)
 8008282:	2201      	movs	r2, #1
 8008284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008286:	f7fe f87b 	bl	8006380 <HAL_GetTick>
 800828a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800828c:	e008      	b.n	80082a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800828e:	f7fe f877 	bl	8006380 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e037      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80082a0:	4b1d      	ldr	r3, [pc, #116]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0f0      	beq.n	800828e <HAL_RCC_OscConfig+0x46a>
 80082ac:	e02f      	b.n	800830e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ae:	4b1c      	ldr	r3, [pc, #112]	; (8008320 <HAL_RCC_OscConfig+0x4fc>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b4:	f7fe f864 	bl	8006380 <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082bc:	f7fe f860 	bl	8006380 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e020      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082ce:	4b12      	ldr	r3, [pc, #72]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1f0      	bne.n	80082bc <HAL_RCC_OscConfig+0x498>
 80082da:	e018      	b.n	800830e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e013      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80082e8:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <HAL_RCC_OscConfig+0x4f4>)
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d106      	bne.n	800830a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008306:	429a      	cmp	r2, r3
 8008308:	d001      	beq.n	800830e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	40021000 	.word	0x40021000
 800831c:	40007000 	.word	0x40007000
 8008320:	42420060 	.word	0x42420060

08008324 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e0d0      	b.n	80084da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008338:	4b6a      	ldr	r3, [pc, #424]	; (80084e4 <HAL_RCC_ClockConfig+0x1c0>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	429a      	cmp	r2, r3
 8008344:	d910      	bls.n	8008368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008346:	4b67      	ldr	r3, [pc, #412]	; (80084e4 <HAL_RCC_ClockConfig+0x1c0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f023 0207 	bic.w	r2, r3, #7
 800834e:	4965      	ldr	r1, [pc, #404]	; (80084e4 <HAL_RCC_ClockConfig+0x1c0>)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	4313      	orrs	r3, r2
 8008354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008356:	4b63      	ldr	r3, [pc, #396]	; (80084e4 <HAL_RCC_ClockConfig+0x1c0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	429a      	cmp	r2, r3
 8008362:	d001      	beq.n	8008368 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e0b8      	b.n	80084da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b00      	cmp	r3, #0
 8008372:	d020      	beq.n	80083b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008380:	4b59      	ldr	r3, [pc, #356]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	4a58      	ldr	r2, [pc, #352]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008386:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800838a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0308 	and.w	r3, r3, #8
 8008394:	2b00      	cmp	r3, #0
 8008396:	d005      	beq.n	80083a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008398:	4b53      	ldr	r3, [pc, #332]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	4a52      	ldr	r2, [pc, #328]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 800839e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80083a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083a4:	4b50      	ldr	r3, [pc, #320]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	494d      	ldr	r1, [pc, #308]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d040      	beq.n	8008444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d107      	bne.n	80083da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083ca:	4b47      	ldr	r3, [pc, #284]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d115      	bne.n	8008402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e07f      	b.n	80084da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d107      	bne.n	80083f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083e2:	4b41      	ldr	r3, [pc, #260]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d109      	bne.n	8008402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e073      	b.n	80084da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083f2:	4b3d      	ldr	r3, [pc, #244]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e06b      	b.n	80084da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008402:	4b39      	ldr	r3, [pc, #228]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f023 0203 	bic.w	r2, r3, #3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	4936      	ldr	r1, [pc, #216]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008410:	4313      	orrs	r3, r2
 8008412:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008414:	f7fd ffb4 	bl	8006380 <HAL_GetTick>
 8008418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800841a:	e00a      	b.n	8008432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800841c:	f7fd ffb0 	bl	8006380 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	f241 3288 	movw	r2, #5000	; 0x1388
 800842a:	4293      	cmp	r3, r2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e053      	b.n	80084da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008432:	4b2d      	ldr	r3, [pc, #180]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f003 020c 	and.w	r2, r3, #12
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	429a      	cmp	r2, r3
 8008442:	d1eb      	bne.n	800841c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008444:	4b27      	ldr	r3, [pc, #156]	; (80084e4 <HAL_RCC_ClockConfig+0x1c0>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d210      	bcs.n	8008474 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008452:	4b24      	ldr	r3, [pc, #144]	; (80084e4 <HAL_RCC_ClockConfig+0x1c0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f023 0207 	bic.w	r2, r3, #7
 800845a:	4922      	ldr	r1, [pc, #136]	; (80084e4 <HAL_RCC_ClockConfig+0x1c0>)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	4313      	orrs	r3, r2
 8008460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008462:	4b20      	ldr	r3, [pc, #128]	; (80084e4 <HAL_RCC_ClockConfig+0x1c0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d001      	beq.n	8008474 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e032      	b.n	80084da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b00      	cmp	r3, #0
 800847e:	d008      	beq.n	8008492 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008480:	4b19      	ldr	r3, [pc, #100]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	4916      	ldr	r1, [pc, #88]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 800848e:	4313      	orrs	r3, r2
 8008490:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0308 	and.w	r3, r3, #8
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800849e:	4b12      	ldr	r3, [pc, #72]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	490e      	ldr	r1, [pc, #56]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80084b2:	f000 f821 	bl	80084f8 <HAL_RCC_GetSysClockFreq>
 80084b6:	4601      	mov	r1, r0
 80084b8:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <HAL_RCC_ClockConfig+0x1c4>)
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	091b      	lsrs	r3, r3, #4
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <HAL_RCC_ClockConfig+0x1c8>)
 80084c4:	5cd3      	ldrb	r3, [r2, r3]
 80084c6:	fa21 f303 	lsr.w	r3, r1, r3
 80084ca:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <HAL_RCC_ClockConfig+0x1cc>)
 80084cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80084ce:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <HAL_RCC_ClockConfig+0x1d0>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fd ff12 	bl	80062fc <HAL_InitTick>

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40022000 	.word	0x40022000
 80084e8:	40021000 	.word	0x40021000
 80084ec:	0800ca00 	.word	0x0800ca00
 80084f0:	20000024 	.word	0x20000024
 80084f4:	20000028 	.word	0x20000028

080084f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084f8:	b490      	push	{r4, r7}
 80084fa:	b08a      	sub	sp, #40	; 0x28
 80084fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80084fe:	4b2a      	ldr	r3, [pc, #168]	; (80085a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008500:	1d3c      	adds	r4, r7, #4
 8008502:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008508:	4b28      	ldr	r3, [pc, #160]	; (80085ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	2300      	movs	r3, #0
 8008514:	61bb      	str	r3, [r7, #24]
 8008516:	2300      	movs	r3, #0
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008522:	4b23      	ldr	r3, [pc, #140]	; (80085b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	f003 030c 	and.w	r3, r3, #12
 800852e:	2b04      	cmp	r3, #4
 8008530:	d002      	beq.n	8008538 <HAL_RCC_GetSysClockFreq+0x40>
 8008532:	2b08      	cmp	r3, #8
 8008534:	d003      	beq.n	800853e <HAL_RCC_GetSysClockFreq+0x46>
 8008536:	e02d      	b.n	8008594 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008538:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800853a:	623b      	str	r3, [r7, #32]
      break;
 800853c:	e02d      	b.n	800859a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	0c9b      	lsrs	r3, r3, #18
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800854a:	4413      	add	r3, r2
 800854c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008550:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d013      	beq.n	8008584 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800855c:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	0c5b      	lsrs	r3, r3, #17
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800856a:	4413      	add	r3, r2
 800856c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008570:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	4a0f      	ldr	r2, [pc, #60]	; (80085b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008576:	fb02 f203 	mul.w	r2, r2, r3
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
 8008582:	e004      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4a0c      	ldr	r2, [pc, #48]	; (80085b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008588:	fb02 f303 	mul.w	r3, r2, r3
 800858c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	623b      	str	r3, [r7, #32]
      break;
 8008592:	e002      	b.n	800859a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008594:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008596:	623b      	str	r3, [r7, #32]
      break;
 8008598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800859a:	6a3b      	ldr	r3, [r7, #32]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3728      	adds	r7, #40	; 0x28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bc90      	pop	{r4, r7}
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	0800c7d8 	.word	0x0800c7d8
 80085ac:	0800c7e8 	.word	0x0800c7e8
 80085b0:	40021000 	.word	0x40021000
 80085b4:	007a1200 	.word	0x007a1200
 80085b8:	003d0900 	.word	0x003d0900

080085bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085c0:	4b02      	ldr	r3, [pc, #8]	; (80085cc <HAL_RCC_GetHCLKFreq+0x10>)
 80085c2:	681b      	ldr	r3, [r3, #0]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr
 80085cc:	20000024 	.word	0x20000024

080085d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085d4:	f7ff fff2 	bl	80085bc <HAL_RCC_GetHCLKFreq>
 80085d8:	4601      	mov	r1, r0
 80085da:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	0a1b      	lsrs	r3, r3, #8
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	4a03      	ldr	r2, [pc, #12]	; (80085f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085e6:	5cd3      	ldrb	r3, [r2, r3]
 80085e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	40021000 	.word	0x40021000
 80085f4:	0800ca10 	.word	0x0800ca10

080085f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80085fc:	f7ff ffde 	bl	80085bc <HAL_RCC_GetHCLKFreq>
 8008600:	4601      	mov	r1, r0
 8008602:	4b05      	ldr	r3, [pc, #20]	; (8008618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	0adb      	lsrs	r3, r3, #11
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	4a03      	ldr	r2, [pc, #12]	; (800861c <HAL_RCC_GetPCLK2Freq+0x24>)
 800860e:	5cd3      	ldrb	r3, [r2, r3]
 8008610:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008614:	4618      	mov	r0, r3
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40021000 	.word	0x40021000
 800861c:	0800ca10 	.word	0x0800ca10

08008620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008628:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <RCC_Delay+0x34>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a0a      	ldr	r2, [pc, #40]	; (8008658 <RCC_Delay+0x38>)
 800862e:	fba2 2303 	umull	r2, r3, r2, r3
 8008632:	0a5b      	lsrs	r3, r3, #9
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	fb02 f303 	mul.w	r3, r2, r3
 800863a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800863c:	bf00      	nop
  }
  while (Delay --);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	1e5a      	subs	r2, r3, #1
 8008642:	60fa      	str	r2, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f9      	bne.n	800863c <RCC_Delay+0x1c>
}
 8008648:	bf00      	nop
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	20000024 	.word	0x20000024
 8008658:	10624dd3 	.word	0x10624dd3

0800865c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e076      	b.n	800875c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2b00      	cmp	r3, #0
 8008674:	d108      	bne.n	8008688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800867e:	d009      	beq.n	8008694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	61da      	str	r2, [r3, #28]
 8008686:	e005      	b.n	8008694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7fd fbd4 	bl	8005e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e6:	431a      	orrs	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	f003 0302 	and.w	r3, r3, #2
 80086f0:	431a      	orrs	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008704:	431a      	orrs	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008718:	ea42 0103 	orr.w	r1, r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008720:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	0c1a      	lsrs	r2, r3, #16
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f002 0204 	and.w	r2, r2, #4
 800873a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	69da      	ldr	r2, [r3, #28]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800874a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08c      	sub	sp, #48	; 0x30
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008772:	2301      	movs	r3, #1
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_SPI_TransmitReceive+0x26>
 8008786:	2302      	movs	r3, #2
 8008788:	e18a      	b.n	8008aa0 <HAL_SPI_TransmitReceive+0x33c>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008792:	f7fd fdf5 	bl	8006380 <HAL_GetTick>
 8008796:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800879e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80087a8:	887b      	ldrh	r3, [r7, #2]
 80087aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80087ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d00f      	beq.n	80087d4 <HAL_SPI_TransmitReceive+0x70>
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087ba:	d107      	bne.n	80087cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d103      	bne.n	80087cc <HAL_SPI_TransmitReceive+0x68>
 80087c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d003      	beq.n	80087d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80087cc:	2302      	movs	r3, #2
 80087ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80087d2:	e15b      	b.n	8008a8c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <HAL_SPI_TransmitReceive+0x82>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <HAL_SPI_TransmitReceive+0x82>
 80087e0:	887b      	ldrh	r3, [r7, #2]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d103      	bne.n	80087ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80087ec:	e14e      	b.n	8008a8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d003      	beq.n	8008802 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2205      	movs	r2, #5
 80087fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	887a      	ldrh	r2, [r7, #2]
 8008812:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	887a      	ldrh	r2, [r7, #2]
 8008818:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	887a      	ldrh	r2, [r7, #2]
 8008824:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	887a      	ldrh	r2, [r7, #2]
 800882a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008842:	2b40      	cmp	r3, #64	; 0x40
 8008844:	d007      	beq.n	8008856 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008854:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800885e:	d178      	bne.n	8008952 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <HAL_SPI_TransmitReceive+0x10a>
 8008868:	8b7b      	ldrh	r3, [r7, #26]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d166      	bne.n	800893c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	881a      	ldrh	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887e:	1c9a      	adds	r2, r3, #2
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008888:	b29b      	uxth	r3, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008892:	e053      	b.n	800893c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d11b      	bne.n	80088da <HAL_SPI_TransmitReceive+0x176>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d016      	beq.n	80088da <HAL_SPI_TransmitReceive+0x176>
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d113      	bne.n	80088da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	881a      	ldrh	r2, [r3, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	1c9a      	adds	r2, r3, #2
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	3b01      	subs	r3, #1
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d119      	bne.n	800891c <HAL_SPI_TransmitReceive+0x1b8>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d014      	beq.n	800891c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	b292      	uxth	r2, r2
 80088fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008904:	1c9a      	adds	r2, r3, #2
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008918:	2301      	movs	r3, #1
 800891a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800891c:	f7fd fd30 	bl	8006380 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008928:	429a      	cmp	r2, r3
 800892a:	d807      	bhi.n	800893c <HAL_SPI_TransmitReceive+0x1d8>
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008932:	d003      	beq.n	800893c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800893a:	e0a7      	b.n	8008a8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1a6      	bne.n	8008894 <HAL_SPI_TransmitReceive+0x130>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800894a:	b29b      	uxth	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1a1      	bne.n	8008894 <HAL_SPI_TransmitReceive+0x130>
 8008950:	e07c      	b.n	8008a4c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_SPI_TransmitReceive+0x1fc>
 800895a:	8b7b      	ldrh	r3, [r7, #26]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d16b      	bne.n	8008a38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	330c      	adds	r3, #12
 800896a:	7812      	ldrb	r2, [r2, #0]
 800896c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008986:	e057      	b.n	8008a38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b02      	cmp	r3, #2
 8008994:	d11c      	bne.n	80089d0 <HAL_SPI_TransmitReceive+0x26c>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d017      	beq.n	80089d0 <HAL_SPI_TransmitReceive+0x26c>
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d114      	bne.n	80089d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	330c      	adds	r3, #12
 80089b0:	7812      	ldrb	r2, [r2, #0]
 80089b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d119      	bne.n	8008a12 <HAL_SPI_TransmitReceive+0x2ae>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d014      	beq.n	8008a12 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f2:	b2d2      	uxtb	r2, r2
 80089f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	1c5a      	adds	r2, r3, #1
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a12:	f7fd fcb5 	bl	8006380 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d803      	bhi.n	8008a2a <HAL_SPI_TransmitReceive+0x2c6>
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d102      	bne.n	8008a30 <HAL_SPI_TransmitReceive+0x2cc>
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a36:	e029      	b.n	8008a8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1a2      	bne.n	8008988 <HAL_SPI_TransmitReceive+0x224>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d19d      	bne.n	8008988 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 f8b1 	bl	8008bb8 <SPI_EndRxTxTransaction>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d006      	beq.n	8008a6a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2220      	movs	r2, #32
 8008a66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008a68:	e010      	b.n	8008a8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10b      	bne.n	8008a8a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	617b      	str	r3, [r7, #20]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	617b      	str	r3, [r7, #20]
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	e000      	b.n	8008a8c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008a8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3730      	adds	r7, #48	; 0x30
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ab8:	f7fd fc62 	bl	8006380 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	1a9b      	subs	r3, r3, r2
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ac8:	f7fd fc5a 	bl	8006380 <HAL_GetTick>
 8008acc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ace:	4b39      	ldr	r3, [pc, #228]	; (8008bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	015b      	lsls	r3, r3, #5
 8008ad4:	0d1b      	lsrs	r3, r3, #20
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	fb02 f303 	mul.w	r3, r2, r3
 8008adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ade:	e054      	b.n	8008b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae6:	d050      	beq.n	8008b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ae8:	f7fd fc4a 	bl	8006380 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	69fa      	ldr	r2, [r7, #28]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d902      	bls.n	8008afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d13d      	bne.n	8008b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b16:	d111      	bne.n	8008b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b20:	d004      	beq.n	8008b2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b2a:	d107      	bne.n	8008b3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b44:	d10f      	bne.n	8008b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e017      	b.n	8008baa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4013      	ands	r3, r2
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	bf0c      	ite	eq
 8008b9a:	2301      	moveq	r3, #1
 8008b9c:	2300      	movne	r3, #0
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	79fb      	ldrb	r3, [r7, #7]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d19b      	bne.n	8008ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3720      	adds	r7, #32
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000024 	.word	0x20000024

08008bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af02      	add	r7, sp, #8
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2180      	movs	r1, #128	; 0x80
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f7ff ff6a 	bl	8008aa8 <SPI_WaitFlagStateUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d007      	beq.n	8008bea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bde:	f043 0220 	orr.w	r2, r3, #32
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e000      	b.n	8008bec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e041      	b.n	8008c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d106      	bne.n	8008c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7fd f988 	bl	8005f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4619      	mov	r1, r3
 8008c32:	4610      	mov	r0, r2
 8008c34:	f000 fc14 	bl	8009460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d001      	beq.n	8008cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e03a      	b.n	8008d22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a18      	ldr	r2, [pc, #96]	; (8008d2c <HAL_TIM_Base_Start_IT+0x98>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00e      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x58>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd6:	d009      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x58>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a14      	ldr	r2, [pc, #80]	; (8008d30 <HAL_TIM_Base_Start_IT+0x9c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d004      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x58>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a13      	ldr	r2, [pc, #76]	; (8008d34 <HAL_TIM_Base_Start_IT+0xa0>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d111      	bne.n	8008d10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b06      	cmp	r3, #6
 8008cfc:	d010      	beq.n	8008d20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0201 	orr.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d0e:	e007      	b.n	8008d20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr
 8008d2c:	40012c00 	.word	0x40012c00
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40000800 	.word	0x40000800

08008d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e041      	b.n	8008dce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d106      	bne.n	8008d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7fd f8c8 	bl	8005ef4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f000 fb72 	bl	8009460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d109      	bne.n	8008dfc <HAL_TIM_PWM_Start+0x24>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	bf14      	ite	ne
 8008df4:	2301      	movne	r3, #1
 8008df6:	2300      	moveq	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	e022      	b.n	8008e42 <HAL_TIM_PWM_Start+0x6a>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d109      	bne.n	8008e16 <HAL_TIM_PWM_Start+0x3e>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	bf14      	ite	ne
 8008e0e:	2301      	movne	r3, #1
 8008e10:	2300      	moveq	r3, #0
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	e015      	b.n	8008e42 <HAL_TIM_PWM_Start+0x6a>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d109      	bne.n	8008e30 <HAL_TIM_PWM_Start+0x58>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	bf14      	ite	ne
 8008e28:	2301      	movne	r3, #1
 8008e2a:	2300      	moveq	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	e008      	b.n	8008e42 <HAL_TIM_PWM_Start+0x6a>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	bf14      	ite	ne
 8008e3c:	2301      	movne	r3, #1
 8008e3e:	2300      	moveq	r3, #0
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e05e      	b.n	8008f08 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d104      	bne.n	8008e5a <HAL_TIM_PWM_Start+0x82>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e58:	e013      	b.n	8008e82 <HAL_TIM_PWM_Start+0xaa>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d104      	bne.n	8008e6a <HAL_TIM_PWM_Start+0x92>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e68:	e00b      	b.n	8008e82 <HAL_TIM_PWM_Start+0xaa>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d104      	bne.n	8008e7a <HAL_TIM_PWM_Start+0xa2>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e78:	e003      	b.n	8008e82 <HAL_TIM_PWM_Start+0xaa>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2201      	movs	r2, #1
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fd68 	bl	8009960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1e      	ldr	r2, [pc, #120]	; (8008f10 <HAL_TIM_PWM_Start+0x138>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d107      	bne.n	8008eaa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ea8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a18      	ldr	r2, [pc, #96]	; (8008f10 <HAL_TIM_PWM_Start+0x138>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00e      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0xfa>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ebc:	d009      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0xfa>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a14      	ldr	r2, [pc, #80]	; (8008f14 <HAL_TIM_PWM_Start+0x13c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d004      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0xfa>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a12      	ldr	r2, [pc, #72]	; (8008f18 <HAL_TIM_PWM_Start+0x140>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d111      	bne.n	8008ef6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b06      	cmp	r3, #6
 8008ee2:	d010      	beq.n	8008f06 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ef4:	e007      	b.n	8008f06 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f042 0201 	orr.w	r2, r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	40012c00 	.word	0x40012c00
 8008f14:	40000400 	.word	0x40000400
 8008f18:	40000800 	.word	0x40000800

08008f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d122      	bne.n	8008f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d11b      	bne.n	8008f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0202 	mvn.w	r2, #2
 8008f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa62 	bl	8009428 <HAL_TIM_IC_CaptureCallback>
 8008f64:	e005      	b.n	8008f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fa55 	bl	8009416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fa64 	bl	800943a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d122      	bne.n	8008fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d11b      	bne.n	8008fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f06f 0204 	mvn.w	r2, #4
 8008f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa38 	bl	8009428 <HAL_TIM_IC_CaptureCallback>
 8008fb8:	e005      	b.n	8008fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa2b 	bl	8009416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fa3a 	bl	800943a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	d122      	bne.n	8009020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f003 0308 	and.w	r3, r3, #8
 8008fe4:	2b08      	cmp	r3, #8
 8008fe6:	d11b      	bne.n	8009020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f06f 0208 	mvn.w	r2, #8
 8008ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2204      	movs	r2, #4
 8008ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa0e 	bl	8009428 <HAL_TIM_IC_CaptureCallback>
 800900c:	e005      	b.n	800901a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa01 	bl	8009416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fa10 	bl	800943a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0310 	and.w	r3, r3, #16
 800902a:	2b10      	cmp	r3, #16
 800902c:	d122      	bne.n	8009074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0310 	and.w	r3, r3, #16
 8009038:	2b10      	cmp	r3, #16
 800903a:	d11b      	bne.n	8009074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0210 	mvn.w	r2, #16
 8009044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2208      	movs	r2, #8
 800904a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f9e4 	bl	8009428 <HAL_TIM_IC_CaptureCallback>
 8009060:	e005      	b.n	800906e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f9d7 	bl	8009416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f9e6 	bl	800943a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b01      	cmp	r3, #1
 8009080:	d10e      	bne.n	80090a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b01      	cmp	r3, #1
 800908e:	d107      	bne.n	80090a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f06f 0201 	mvn.w	r2, #1
 8009098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7f8 fbda 	bl	8001854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090aa:	2b80      	cmp	r3, #128	; 0x80
 80090ac:	d10e      	bne.n	80090cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090b8:	2b80      	cmp	r3, #128	; 0x80
 80090ba:	d107      	bne.n	80090cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fcd5 	bl	8009a76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d6:	2b40      	cmp	r3, #64	; 0x40
 80090d8:	d10e      	bne.n	80090f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e4:	2b40      	cmp	r3, #64	; 0x40
 80090e6:	d107      	bne.n	80090f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9aa 	bl	800944c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	f003 0320 	and.w	r3, r3, #32
 8009102:	2b20      	cmp	r3, #32
 8009104:	d10e      	bne.n	8009124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b20      	cmp	r3, #32
 8009112:	d107      	bne.n	8009124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f06f 0220 	mvn.w	r2, #32
 800911c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fca0 	bl	8009a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009142:	2302      	movs	r3, #2
 8009144:	e0ac      	b.n	80092a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b0c      	cmp	r3, #12
 8009152:	f200 809f 	bhi.w	8009294 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009191 	.word	0x08009191
 8009160:	08009295 	.word	0x08009295
 8009164:	08009295 	.word	0x08009295
 8009168:	08009295 	.word	0x08009295
 800916c:	080091d1 	.word	0x080091d1
 8009170:	08009295 	.word	0x08009295
 8009174:	08009295 	.word	0x08009295
 8009178:	08009295 	.word	0x08009295
 800917c:	08009213 	.word	0x08009213
 8009180:	08009295 	.word	0x08009295
 8009184:	08009295 	.word	0x08009295
 8009188:	08009295 	.word	0x08009295
 800918c:	08009253 	.word	0x08009253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	4618      	mov	r0, r3
 8009198:	f000 f9c4 	bl	8009524 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699a      	ldr	r2, [r3, #24]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0208 	orr.w	r2, r2, #8
 80091aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0204 	bic.w	r2, r2, #4
 80091ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6999      	ldr	r1, [r3, #24]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	691a      	ldr	r2, [r3, #16]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	619a      	str	r2, [r3, #24]
      break;
 80091ce:	e062      	b.n	8009296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68b9      	ldr	r1, [r7, #8]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fa0a 	bl	80095f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	699a      	ldr	r2, [r3, #24]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	699a      	ldr	r2, [r3, #24]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6999      	ldr	r1, [r3, #24]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	021a      	lsls	r2, r3, #8
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	619a      	str	r2, [r3, #24]
      break;
 8009210:	e041      	b.n	8009296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fa53 	bl	80096c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	69da      	ldr	r2, [r3, #28]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f042 0208 	orr.w	r2, r2, #8
 800922c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69da      	ldr	r2, [r3, #28]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0204 	bic.w	r2, r2, #4
 800923c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	69d9      	ldr	r1, [r3, #28]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	691a      	ldr	r2, [r3, #16]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	61da      	str	r2, [r3, #28]
      break;
 8009250:	e021      	b.n	8009296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fa9d 	bl	8009798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	69da      	ldr	r2, [r3, #28]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800926c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	69da      	ldr	r2, [r3, #28]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800927c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	69d9      	ldr	r1, [r3, #28]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	021a      	lsls	r2, r3, #8
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	61da      	str	r2, [r3, #28]
      break;
 8009292:	e000      	b.n	8009296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009294:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d101      	bne.n	80092c0 <HAL_TIM_ConfigClockSource+0x18>
 80092bc:	2302      	movs	r3, #2
 80092be:	e0a6      	b.n	800940e <HAL_TIM_ConfigClockSource+0x166>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b40      	cmp	r3, #64	; 0x40
 80092f6:	d067      	beq.n	80093c8 <HAL_TIM_ConfigClockSource+0x120>
 80092f8:	2b40      	cmp	r3, #64	; 0x40
 80092fa:	d80b      	bhi.n	8009314 <HAL_TIM_ConfigClockSource+0x6c>
 80092fc:	2b10      	cmp	r3, #16
 80092fe:	d073      	beq.n	80093e8 <HAL_TIM_ConfigClockSource+0x140>
 8009300:	2b10      	cmp	r3, #16
 8009302:	d802      	bhi.n	800930a <HAL_TIM_ConfigClockSource+0x62>
 8009304:	2b00      	cmp	r3, #0
 8009306:	d06f      	beq.n	80093e8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009308:	e078      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800930a:	2b20      	cmp	r3, #32
 800930c:	d06c      	beq.n	80093e8 <HAL_TIM_ConfigClockSource+0x140>
 800930e:	2b30      	cmp	r3, #48	; 0x30
 8009310:	d06a      	beq.n	80093e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009312:	e073      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009314:	2b70      	cmp	r3, #112	; 0x70
 8009316:	d00d      	beq.n	8009334 <HAL_TIM_ConfigClockSource+0x8c>
 8009318:	2b70      	cmp	r3, #112	; 0x70
 800931a:	d804      	bhi.n	8009326 <HAL_TIM_ConfigClockSource+0x7e>
 800931c:	2b50      	cmp	r3, #80	; 0x50
 800931e:	d033      	beq.n	8009388 <HAL_TIM_ConfigClockSource+0xe0>
 8009320:	2b60      	cmp	r3, #96	; 0x60
 8009322:	d041      	beq.n	80093a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009324:	e06a      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932a:	d066      	beq.n	80093fa <HAL_TIM_ConfigClockSource+0x152>
 800932c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009330:	d017      	beq.n	8009362 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009332:	e063      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	6899      	ldr	r1, [r3, #8]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f000 faed 	bl	8009922 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009356:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	609a      	str	r2, [r3, #8]
      break;
 8009360:	e04c      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6818      	ldr	r0, [r3, #0]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	6899      	ldr	r1, [r3, #8]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f000 fad6 	bl	8009922 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009384:	609a      	str	r2, [r3, #8]
      break;
 8009386:	e039      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	6859      	ldr	r1, [r3, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	461a      	mov	r2, r3
 8009396:	f000 fa4d 	bl	8009834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2150      	movs	r1, #80	; 0x50
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 faa4 	bl	80098ee <TIM_ITRx_SetConfig>
      break;
 80093a6:	e029      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6818      	ldr	r0, [r3, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	6859      	ldr	r1, [r3, #4]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	461a      	mov	r2, r3
 80093b6:	f000 fa6b 	bl	8009890 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2160      	movs	r1, #96	; 0x60
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fa94 	bl	80098ee <TIM_ITRx_SetConfig>
      break;
 80093c6:	e019      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	6859      	ldr	r1, [r3, #4]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	461a      	mov	r2, r3
 80093d6:	f000 fa2d 	bl	8009834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2140      	movs	r1, #64	; 0x40
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fa84 	bl	80098ee <TIM_ITRx_SetConfig>
      break;
 80093e6:	e009      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4619      	mov	r1, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	f000 fa7b 	bl	80098ee <TIM_ITRx_SetConfig>
        break;
 80093f8:	e000      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80093fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009416:	b480      	push	{r7}
 8009418:	b083      	sub	sp, #12
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	bc80      	pop	{r7}
 8009426:	4770      	bx	lr

08009428 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	bc80      	pop	{r7}
 8009438:	4770      	bx	lr

0800943a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr

0800944c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	bc80      	pop	{r7}
 800945c:	4770      	bx	lr
	...

08009460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a29      	ldr	r2, [pc, #164]	; (8009518 <TIM_Base_SetConfig+0xb8>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00b      	beq.n	8009490 <TIM_Base_SetConfig+0x30>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800947e:	d007      	beq.n	8009490 <TIM_Base_SetConfig+0x30>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a26      	ldr	r2, [pc, #152]	; (800951c <TIM_Base_SetConfig+0xbc>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_Base_SetConfig+0x30>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a25      	ldr	r2, [pc, #148]	; (8009520 <TIM_Base_SetConfig+0xc0>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d108      	bne.n	80094a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a1c      	ldr	r2, [pc, #112]	; (8009518 <TIM_Base_SetConfig+0xb8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00b      	beq.n	80094c2 <TIM_Base_SetConfig+0x62>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094b0:	d007      	beq.n	80094c2 <TIM_Base_SetConfig+0x62>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a19      	ldr	r2, [pc, #100]	; (800951c <TIM_Base_SetConfig+0xbc>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d003      	beq.n	80094c2 <TIM_Base_SetConfig+0x62>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a18      	ldr	r2, [pc, #96]	; (8009520 <TIM_Base_SetConfig+0xc0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d108      	bne.n	80094d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a07      	ldr	r2, [pc, #28]	; (8009518 <TIM_Base_SetConfig+0xb8>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d103      	bne.n	8009508 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	691a      	ldr	r2, [r3, #16]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	615a      	str	r2, [r3, #20]
}
 800950e:	bf00      	nop
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	bc80      	pop	{r7}
 8009516:	4770      	bx	lr
 8009518:	40012c00 	.word	0x40012c00
 800951c:	40000400 	.word	0x40000400
 8009520:	40000800 	.word	0x40000800

08009524 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009524:	b480      	push	{r7}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	f023 0201 	bic.w	r2, r3, #1
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0303 	bic.w	r3, r3, #3
 800955a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f023 0302 	bic.w	r3, r3, #2
 800956c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	4313      	orrs	r3, r2
 8009576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a1c      	ldr	r2, [pc, #112]	; (80095ec <TIM_OC1_SetConfig+0xc8>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d10c      	bne.n	800959a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f023 0308 	bic.w	r3, r3, #8
 8009586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	4313      	orrs	r3, r2
 8009590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f023 0304 	bic.w	r3, r3, #4
 8009598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a13      	ldr	r2, [pc, #76]	; (80095ec <TIM_OC1_SetConfig+0xc8>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d111      	bne.n	80095c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	621a      	str	r2, [r3, #32]
}
 80095e0:	bf00      	nop
 80095e2:	371c      	adds	r7, #28
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bc80      	pop	{r7}
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	40012c00 	.word	0x40012c00

080095f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	f023 0210 	bic.w	r2, r3, #16
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	021b      	lsls	r3, r3, #8
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	4313      	orrs	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f023 0320 	bic.w	r3, r3, #32
 800963a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	4313      	orrs	r3, r2
 8009646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a1d      	ldr	r2, [pc, #116]	; (80096c0 <TIM_OC2_SetConfig+0xd0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d10d      	bne.n	800966c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	4313      	orrs	r3, r2
 8009662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800966a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a14      	ldr	r2, [pc, #80]	; (80096c0 <TIM_OC2_SetConfig+0xd0>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d113      	bne.n	800969c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800967a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	4313      	orrs	r3, r2
 800968e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	4313      	orrs	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	621a      	str	r2, [r3, #32]
}
 80096b6:	bf00      	nop
 80096b8:	371c      	adds	r7, #28
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bc80      	pop	{r7}
 80096be:	4770      	bx	lr
 80096c0:	40012c00 	.word	0x40012c00

080096c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800970c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a1d      	ldr	r2, [pc, #116]	; (8009794 <TIM_OC3_SetConfig+0xd0>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d10d      	bne.n	800973e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	021b      	lsls	r3, r3, #8
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	4313      	orrs	r3, r2
 8009734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800973c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a14      	ldr	r2, [pc, #80]	; (8009794 <TIM_OC3_SetConfig+0xd0>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d113      	bne.n	800976e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800974c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	621a      	str	r2, [r3, #32]
}
 8009788:	bf00      	nop
 800978a:	371c      	adds	r7, #28
 800978c:	46bd      	mov	sp, r7
 800978e:	bc80      	pop	{r7}
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	40012c00 	.word	0x40012c00

08009798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009798:	b480      	push	{r7}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	4313      	orrs	r3, r2
 80097da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	031b      	lsls	r3, r3, #12
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a0f      	ldr	r2, [pc, #60]	; (8009830 <TIM_OC4_SetConfig+0x98>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d109      	bne.n	800980c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	019b      	lsls	r3, r3, #6
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	4313      	orrs	r3, r2
 800980a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	621a      	str	r2, [r3, #32]
}
 8009826:	bf00      	nop
 8009828:	371c      	adds	r7, #28
 800982a:	46bd      	mov	sp, r7
 800982c:	bc80      	pop	{r7}
 800982e:	4770      	bx	lr
 8009830:	40012c00 	.word	0x40012c00

08009834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6a1b      	ldr	r3, [r3, #32]
 8009844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	f023 0201 	bic.w	r2, r3, #1
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800985e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4313      	orrs	r3, r2
 8009868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f023 030a 	bic.w	r3, r3, #10
 8009870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	4313      	orrs	r3, r2
 8009878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	621a      	str	r2, [r3, #32]
}
 8009886:	bf00      	nop
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	bc80      	pop	{r7}
 800988e:	4770      	bx	lr

08009890 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009890:	b480      	push	{r7}
 8009892:	b087      	sub	sp, #28
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	f023 0210 	bic.w	r2, r3, #16
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	031b      	lsls	r3, r3, #12
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	621a      	str	r2, [r3, #32]
}
 80098e4:	bf00      	nop
 80098e6:	371c      	adds	r7, #28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bc80      	pop	{r7}
 80098ec:	4770      	bx	lr

080098ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b085      	sub	sp, #20
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4313      	orrs	r3, r2
 800990c:	f043 0307 	orr.w	r3, r3, #7
 8009910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	609a      	str	r2, [r3, #8]
}
 8009918:	bf00      	nop
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	bc80      	pop	{r7}
 8009920:	4770      	bx	lr

08009922 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009922:	b480      	push	{r7}
 8009924:	b087      	sub	sp, #28
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
 800992e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800993c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	021a      	lsls	r2, r3, #8
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	431a      	orrs	r2, r3
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	4313      	orrs	r3, r2
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	4313      	orrs	r3, r2
 800994e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	609a      	str	r2, [r3, #8]
}
 8009956:	bf00      	nop
 8009958:	371c      	adds	r7, #28
 800995a:	46bd      	mov	sp, r7
 800995c:	bc80      	pop	{r7}
 800995e:	4770      	bx	lr

08009960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	f003 031f 	and.w	r3, r3, #31
 8009972:	2201      	movs	r2, #1
 8009974:	fa02 f303 	lsl.w	r3, r2, r3
 8009978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a1a      	ldr	r2, [r3, #32]
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	43db      	mvns	r3, r3
 8009982:	401a      	ands	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a1a      	ldr	r2, [r3, #32]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f003 031f 	and.w	r3, r3, #31
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	fa01 f303 	lsl.w	r3, r1, r3
 8009998:	431a      	orrs	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	621a      	str	r2, [r3, #32]
}
 800999e:	bf00      	nop
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bc80      	pop	{r7}
 80099a6:	4770      	bx	lr

080099a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d101      	bne.n	80099c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099bc:	2302      	movs	r3, #2
 80099be:	e046      	b.n	8009a4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a16      	ldr	r2, [pc, #88]	; (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00e      	beq.n	8009a22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0c:	d009      	beq.n	8009a22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a12      	ldr	r2, [pc, #72]	; (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d004      	beq.n	8009a22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a10      	ldr	r2, [pc, #64]	; (8009a60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d10c      	bne.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bc80      	pop	{r7}
 8009a56:	4770      	bx	lr
 8009a58:	40012c00 	.word	0x40012c00
 8009a5c:	40000400 	.word	0x40000400
 8009a60:	40000800 	.word	0x40000800

08009a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bc80      	pop	{r7}
 8009a74:	4770      	bx	lr

08009a76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a7e:	bf00      	nop
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bc80      	pop	{r7}
 8009a86:	4770      	bx	lr

08009a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e03f      	b.n	8009b1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d106      	bne.n	8009ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fc fab0 	bl	8006014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2224      	movs	r2, #36	; 0x24
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fd9d 	bl	800a60c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	691a      	ldr	r2, [r3, #16]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	695a      	ldr	r2, [r3, #20]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68da      	ldr	r2, [r3, #12]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b08a      	sub	sp, #40	; 0x28
 8009b26:	af02      	add	r7, sp, #8
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	603b      	str	r3, [r7, #0]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b20      	cmp	r3, #32
 8009b40:	d17c      	bne.n	8009c3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <HAL_UART_Transmit+0x2c>
 8009b48:	88fb      	ldrh	r3, [r7, #6]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e075      	b.n	8009c3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d101      	bne.n	8009b60 <HAL_UART_Transmit+0x3e>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	e06e      	b.n	8009c3e <HAL_UART_Transmit+0x11c>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2221      	movs	r2, #33	; 0x21
 8009b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b76:	f7fc fc03 	bl	8006380 <HAL_GetTick>
 8009b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	88fa      	ldrh	r2, [r7, #6]
 8009b80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	88fa      	ldrh	r2, [r7, #6]
 8009b86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b90:	d108      	bne.n	8009ba4 <HAL_UART_Transmit+0x82>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d104      	bne.n	8009ba4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	61bb      	str	r3, [r7, #24]
 8009ba2:	e003      	b.n	8009bac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009bb4:	e02a      	b.n	8009c0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2180      	movs	r1, #128	; 0x80
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fb0f 	bl	800a1e4 <UART_WaitOnFlagUntilTimeout>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e036      	b.n	8009c3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10b      	bne.n	8009bee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009be4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	3302      	adds	r3, #2
 8009bea:	61bb      	str	r3, [r7, #24]
 8009bec:	e007      	b.n	8009bfe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	3b01      	subs	r3, #1
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1cf      	bne.n	8009bb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2140      	movs	r1, #64	; 0x40
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 fadf 	bl	800a1e4 <UART_WaitOnFlagUntilTimeout>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e006      	b.n	8009c3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2220      	movs	r2, #32
 8009c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	e000      	b.n	8009c3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009c3c:	2302      	movs	r3, #2
  }
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3720      	adds	r7, #32
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b086      	sub	sp, #24
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	60f8      	str	r0, [r7, #12]
 8009c4e:	60b9      	str	r1, [r7, #8]
 8009c50:	4613      	mov	r3, r2
 8009c52:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b20      	cmp	r3, #32
 8009c5e:	d13c      	bne.n	8009cda <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009c66:	88fb      	ldrh	r3, [r7, #6]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e035      	b.n	8009cdc <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d101      	bne.n	8009c7e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	e02e      	b.n	8009cdc <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009c8c:	88fb      	ldrh	r3, [r7, #6]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	68b9      	ldr	r1, [r7, #8]
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 faf0 	bl	800a278 <UART_Start_Receive_DMA>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d119      	bne.n	8009cd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d113      	bne.n	8009cd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009caa:	2300      	movs	r3, #0
 8009cac:	613b      	str	r3, [r7, #16]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	613b      	str	r3, [r7, #16]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	613b      	str	r3, [r7, #16]
 8009cbe:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68da      	ldr	r2, [r3, #12]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f042 0210 	orr.w	r2, r2, #16
 8009cce:	60da      	str	r2, [r3, #12]
 8009cd0:	e001      	b.n	8009cd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	e000      	b.n	8009cdc <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8009cda:	2302      	movs	r3, #2
  }
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08a      	sub	sp, #40	; 0x28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	f003 030f 	and.w	r3, r3, #15
 8009d12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10d      	bne.n	8009d36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	f003 0320 	and.w	r3, r3, #32
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d008      	beq.n	8009d36 <HAL_UART_IRQHandler+0x52>
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fbc2 	bl	800a4b8 <UART_Receive_IT>
      return;
 8009d34:	e17c      	b.n	800a030 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 80b1 	beq.w	8009ea0 <HAL_UART_IRQHandler+0x1bc>
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	f003 0301 	and.w	r3, r3, #1
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d105      	bne.n	8009d54 <HAL_UART_IRQHandler+0x70>
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f000 80a6 	beq.w	8009ea0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <HAL_UART_IRQHandler+0x90>
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d005      	beq.n	8009d74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6c:	f043 0201 	orr.w	r2, r3, #1
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	f003 0304 	and.w	r3, r3, #4
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <HAL_UART_IRQHandler+0xb0>
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8c:	f043 0202 	orr.w	r2, r3, #2
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	f003 0302 	and.w	r3, r3, #2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <HAL_UART_IRQHandler+0xd0>
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d005      	beq.n	8009db4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dac:	f043 0204 	orr.w	r2, r3, #4
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	f003 0308 	and.w	r3, r3, #8
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00f      	beq.n	8009dde <HAL_UART_IRQHandler+0xfa>
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	f003 0320 	and.w	r3, r3, #32
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <HAL_UART_IRQHandler+0xee>
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d005      	beq.n	8009dde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	f043 0208 	orr.w	r2, r3, #8
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 811f 	beq.w	800a026 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	f003 0320 	and.w	r3, r3, #32
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d007      	beq.n	8009e02 <HAL_UART_IRQHandler+0x11e>
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	f003 0320 	and.w	r3, r3, #32
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fb5b 	bl	800a4b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	bf14      	ite	ne
 8009e10:	2301      	movne	r3, #1
 8009e12:	2300      	moveq	r3, #0
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1c:	f003 0308 	and.w	r3, r3, #8
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d102      	bne.n	8009e2a <HAL_UART_IRQHandler+0x146>
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d031      	beq.n	8009e8e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fa9d 	bl	800a36a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d023      	beq.n	8009e86 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	695a      	ldr	r2, [r3, #20]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d013      	beq.n	8009e7e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5a:	4a77      	ldr	r2, [pc, #476]	; (800a038 <HAL_UART_IRQHandler+0x354>)
 8009e5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fc fcba 	bl	80067dc <HAL_DMA_Abort_IT>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d016      	beq.n	8009e9c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e7c:	e00e      	b.n	8009e9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f8f7 	bl	800a072 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e84:	e00a      	b.n	8009e9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f8f3 	bl	800a072 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e8c:	e006      	b.n	8009e9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f8ef 	bl	800a072 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009e9a:	e0c4      	b.n	800a026 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e9c:	bf00      	nop
    return;
 8009e9e:	e0c2      	b.n	800a026 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	f040 80a1 	bne.w	8009fec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	f003 0310 	and.w	r3, r3, #16
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 809b 	beq.w	8009fec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	f003 0310 	and.w	r3, r3, #16
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 8095 	beq.w	8009fec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d04e      	beq.n	8009f84 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009ef0:	8a3b      	ldrh	r3, [r7, #16]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 8099 	beq.w	800a02a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009efc:	8a3a      	ldrh	r2, [r7, #16]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	f080 8093 	bcs.w	800a02a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	8a3a      	ldrh	r2, [r7, #16]
 8009f08:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b20      	cmp	r3, #32
 8009f12:	d02b      	beq.n	8009f6c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68da      	ldr	r2, [r3, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f22:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	695a      	ldr	r2, [r3, #20]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 0201 	bic.w	r2, r2, #1
 8009f32:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	695a      	ldr	r2, [r3, #20]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f42:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68da      	ldr	r2, [r3, #12]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 0210 	bic.w	r2, r2, #16
 8009f60:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fc fbfd 	bl	8006766 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7f7 fd19 	bl	80019b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009f82:	e052      	b.n	800a02a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d048      	beq.n	800a02e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8009f9c:	8a7b      	ldrh	r3, [r7, #18]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d045      	beq.n	800a02e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68da      	ldr	r2, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009fb0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	695a      	ldr	r2, [r3, #20]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 0201 	bic.w	r2, r2, #1
 8009fc0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f022 0210 	bic.w	r2, r2, #16
 8009fde:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fe0:	8a7b      	ldrh	r3, [r7, #18]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7f7 fce5 	bl	80019b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009fea:	e020      	b.n	800a02e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d008      	beq.n	800a008 <HAL_UART_IRQHandler+0x324>
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f9f2 	bl	800a3ea <UART_Transmit_IT>
    return;
 800a006:	e013      	b.n	800a030 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00e      	beq.n	800a030 <HAL_UART_IRQHandler+0x34c>
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fa33 	bl	800a488 <UART_EndTransmit_IT>
    return;
 800a022:	bf00      	nop
 800a024:	e004      	b.n	800a030 <HAL_UART_IRQHandler+0x34c>
    return;
 800a026:	bf00      	nop
 800a028:	e002      	b.n	800a030 <HAL_UART_IRQHandler+0x34c>
      return;
 800a02a:	bf00      	nop
 800a02c:	e000      	b.n	800a030 <HAL_UART_IRQHandler+0x34c>
      return;
 800a02e:	bf00      	nop
  }
}
 800a030:	3728      	adds	r7, #40	; 0x28
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	0800a3c3 	.word	0x0800a3c3

0800a03c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	bc80      	pop	{r7}
 800a04c:	4770      	bx	lr

0800a04e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a056:	bf00      	nop
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bc80      	pop	{r7}
 800a05e:	4770      	bx	lr

0800a060 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bc80      	pop	{r7}
 800a070:	4770      	bx	lr

0800a072 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a072:	b480      	push	{r7}
 800a074:	b083      	sub	sp, #12
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a07a:	bf00      	nop
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	bc80      	pop	{r7}
 800a082:	4770      	bx	lr

0800a084 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0320 	and.w	r3, r3, #32
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d12a      	bne.n	800a0f6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68da      	ldr	r2, [r3, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a0b4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	695a      	ldr	r2, [r3, #20]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f022 0201 	bic.w	r2, r2, #1
 800a0c4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	695a      	ldr	r2, [r3, #20]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0d4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2220      	movs	r2, #32
 800a0da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d107      	bne.n	800a0f6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f022 0210 	bic.w	r2, r2, #16
 800a0f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d106      	bne.n	800a10c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a102:	4619      	mov	r1, r3
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7f7 fc55 	bl	80019b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a10a:	e002      	b.n	800a112 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7ff ff9e 	bl	800a04e <HAL_UART_RxCpltCallback>
}
 800a112:	bf00      	nop
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d108      	bne.n	800a142 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a134:	085b      	lsrs	r3, r3, #1
 800a136:	b29b      	uxth	r3, r3
 800a138:	4619      	mov	r1, r3
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f7f7 fc3a 	bl	80019b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a140:	e002      	b.n	800a148 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7ff ff8c 	bl	800a060 <HAL_UART_RxHalfCpltCallback>
}
 800a148:	bf00      	nop
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a158:	2300      	movs	r3, #0
 800a15a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	bf14      	ite	ne
 800a170:	2301      	movne	r3, #1
 800a172:	2300      	moveq	r3, #0
 800a174:	b2db      	uxtb	r3, r3
 800a176:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b21      	cmp	r3, #33	; 0x21
 800a182:	d108      	bne.n	800a196 <UART_DMAError+0x46>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d005      	beq.n	800a196 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2200      	movs	r2, #0
 800a18e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a190:	68b8      	ldr	r0, [r7, #8]
 800a192:	f000 f8d5 	bl	800a340 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	bf14      	ite	ne
 800a1a4:	2301      	movne	r3, #1
 800a1a6:	2300      	moveq	r3, #0
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b22      	cmp	r3, #34	; 0x22
 800a1b6:	d108      	bne.n	800a1ca <UART_DMAError+0x7a>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a1c4:	68b8      	ldr	r0, [r7, #8]
 800a1c6:	f000 f8d0 	bl	800a36a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	f043 0210 	orr.w	r2, r3, #16
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1d6:	68b8      	ldr	r0, [r7, #8]
 800a1d8:	f7ff ff4b 	bl	800a072 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1dc:	bf00      	nop
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	603b      	str	r3, [r7, #0]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1f4:	e02c      	b.n	800a250 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fc:	d028      	beq.n	800a250 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d007      	beq.n	800a214 <UART_WaitOnFlagUntilTimeout+0x30>
 800a204:	f7fc f8bc 	bl	8006380 <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	429a      	cmp	r2, r3
 800a212:	d21d      	bcs.n	800a250 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a222:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	695a      	ldr	r2, [r3, #20]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 0201 	bic.w	r2, r2, #1
 800a232:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2220      	movs	r2, #32
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2220      	movs	r2, #32
 800a240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e00f      	b.n	800a270 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	4013      	ands	r3, r2
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	bf0c      	ite	eq
 800a260:	2301      	moveq	r3, #1
 800a262:	2300      	movne	r3, #0
 800a264:	b2db      	uxtb	r3, r3
 800a266:	461a      	mov	r2, r3
 800a268:	79fb      	ldrb	r3, [r7, #7]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d0c3      	beq.n	800a1f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	4613      	mov	r3, r2
 800a284:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	88fa      	ldrh	r2, [r7, #6]
 800a290:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2222      	movs	r2, #34	; 0x22
 800a29c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a4:	4a23      	ldr	r2, [pc, #140]	; (800a334 <UART_Start_Receive_DMA+0xbc>)
 800a2a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ac:	4a22      	ldr	r2, [pc, #136]	; (800a338 <UART_Start_Receive_DMA+0xc0>)
 800a2ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b4:	4a21      	ldr	r2, [pc, #132]	; (800a33c <UART_Start_Receive_DMA+0xc4>)
 800a2b6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2bc:	2200      	movs	r2, #0
 800a2be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a2c0:	f107 0308 	add.w	r3, r7, #8
 800a2c4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	f7fc f9e6 	bl	80066a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a2dc:	2300      	movs	r3, #0
 800a2de:	613b      	str	r3, [r7, #16]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	613b      	str	r3, [r7, #16]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	613b      	str	r3, [r7, #16]
 800a2f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68da      	ldr	r2, [r3, #12]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a308:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	695a      	ldr	r2, [r3, #20]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f042 0201 	orr.w	r2, r2, #1
 800a318:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	695a      	ldr	r2, [r3, #20]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a328:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	0800a085 	.word	0x0800a085
 800a338:	0800a11b 	.word	0x0800a11b
 800a33c:	0800a151 	.word	0x0800a151

0800a340 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a356:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	bc80      	pop	{r7}
 800a368:	4770      	bx	lr

0800a36a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a380:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	695a      	ldr	r2, [r3, #20]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f022 0201 	bic.w	r2, r2, #1
 800a390:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a396:	2b01      	cmp	r3, #1
 800a398:	d107      	bne.n	800a3aa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68da      	ldr	r2, [r3, #12]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f022 0210 	bic.w	r2, r2, #16
 800a3a8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bc80      	pop	{r7}
 800a3c0:	4770      	bx	lr

0800a3c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7ff fe48 	bl	800a072 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3e2:	bf00      	nop
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b085      	sub	sp, #20
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b21      	cmp	r3, #33	; 0x21
 800a3fc:	d13e      	bne.n	800a47c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a406:	d114      	bne.n	800a432 <UART_Transmit_IT+0x48>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d110      	bne.n	800a432 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	881b      	ldrh	r3, [r3, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a424:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	1c9a      	adds	r2, r3, #2
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	621a      	str	r2, [r3, #32]
 800a430:	e008      	b.n	800a444 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	1c59      	adds	r1, r3, #1
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	6211      	str	r1, [r2, #32]
 800a43c:	781a      	ldrb	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a448:	b29b      	uxth	r3, r3
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	4619      	mov	r1, r3
 800a452:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10f      	bne.n	800a478 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a466:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68da      	ldr	r2, [r3, #12]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a476:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	e000      	b.n	800a47e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a47c:	2302      	movs	r3, #2
  }
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	bc80      	pop	{r7}
 800a486:	4770      	bx	lr

0800a488 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a49e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2220      	movs	r2, #32
 800a4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7ff fdc7 	bl	800a03c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b22      	cmp	r3, #34	; 0x22
 800a4ca:	f040 8099 	bne.w	800a600 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d6:	d117      	bne.n	800a508 <UART_Receive_IT+0x50>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d113      	bne.n	800a508 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a500:	1c9a      	adds	r2, r3, #2
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	629a      	str	r2, [r3, #40]	; 0x28
 800a506:	e026      	b.n	800a556 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a50e:	2300      	movs	r3, #0
 800a510:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a51a:	d007      	beq.n	800a52c <UART_Receive_IT+0x74>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <UART_Receive_IT+0x82>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d106      	bne.n	800a53a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	b2da      	uxtb	r2, r3
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	701a      	strb	r2, [r3, #0]
 800a538:	e008      	b.n	800a54c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	b2db      	uxtb	r3, r3
 800a542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a546:	b2da      	uxtb	r2, r3
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	3b01      	subs	r3, #1
 800a55e:	b29b      	uxth	r3, r3
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	4619      	mov	r1, r3
 800a564:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a566:	2b00      	cmp	r3, #0
 800a568:	d148      	bne.n	800a5fc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68da      	ldr	r2, [r3, #12]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f022 0220 	bic.w	r2, r2, #32
 800a578:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68da      	ldr	r2, [r3, #12]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a588:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	695a      	ldr	r2, [r3, #20]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f022 0201 	bic.w	r2, r2, #1
 800a598:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d123      	bne.n	800a5f2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68da      	ldr	r2, [r3, #12]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0210 	bic.w	r2, r2, #16
 800a5be:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0310 	and.w	r3, r3, #16
 800a5ca:	2b10      	cmp	r3, #16
 800a5cc:	d10a      	bne.n	800a5e4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60fb      	str	r3, [r7, #12]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	60fb      	str	r3, [r7, #12]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7f7 f9e2 	bl	80019b4 <HAL_UARTEx_RxEventCallback>
 800a5f0:	e002      	b.n	800a5f8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff fd2b 	bl	800a04e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e002      	b.n	800a602 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	e000      	b.n	800a602 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a600:	2302      	movs	r3, #2
  }
}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68da      	ldr	r2, [r3, #12]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	689a      	ldr	r2, [r3, #8]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	431a      	orrs	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a646:	f023 030c 	bic.w	r3, r3, #12
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	430b      	orrs	r3, r1
 800a652:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	699a      	ldr	r2, [r3, #24]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a2c      	ldr	r2, [pc, #176]	; (800a720 <UART_SetConfig+0x114>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d103      	bne.n	800a67c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a674:	f7fd ffc0 	bl	80085f8 <HAL_RCC_GetPCLK2Freq>
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	e002      	b.n	800a682 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a67c:	f7fd ffa8 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800a680:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009a      	lsls	r2, r3, #2
 800a68c:	441a      	add	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	fbb2 f3f3 	udiv	r3, r2, r3
 800a698:	4a22      	ldr	r2, [pc, #136]	; (800a724 <UART_SetConfig+0x118>)
 800a69a:	fba2 2303 	umull	r2, r3, r2, r3
 800a69e:	095b      	lsrs	r3, r3, #5
 800a6a0:	0119      	lsls	r1, r3, #4
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009a      	lsls	r2, r3, #2
 800a6ac:	441a      	add	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6b8:	4b1a      	ldr	r3, [pc, #104]	; (800a724 <UART_SetConfig+0x118>)
 800a6ba:	fba3 0302 	umull	r0, r3, r3, r2
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	2064      	movs	r0, #100	; 0x64
 800a6c2:	fb00 f303 	mul.w	r3, r0, r3
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	011b      	lsls	r3, r3, #4
 800a6ca:	3332      	adds	r3, #50	; 0x32
 800a6cc:	4a15      	ldr	r2, [pc, #84]	; (800a724 <UART_SetConfig+0x118>)
 800a6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d2:	095b      	lsrs	r3, r3, #5
 800a6d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6d8:	4419      	add	r1, r3
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	009a      	lsls	r2, r3, #2
 800a6e4:	441a      	add	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6f0:	4b0c      	ldr	r3, [pc, #48]	; (800a724 <UART_SetConfig+0x118>)
 800a6f2:	fba3 0302 	umull	r0, r3, r3, r2
 800a6f6:	095b      	lsrs	r3, r3, #5
 800a6f8:	2064      	movs	r0, #100	; 0x64
 800a6fa:	fb00 f303 	mul.w	r3, r0, r3
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	011b      	lsls	r3, r3, #4
 800a702:	3332      	adds	r3, #50	; 0x32
 800a704:	4a07      	ldr	r2, [pc, #28]	; (800a724 <UART_SetConfig+0x118>)
 800a706:	fba2 2303 	umull	r2, r3, r2, r3
 800a70a:	095b      	lsrs	r3, r3, #5
 800a70c:	f003 020f 	and.w	r2, r3, #15
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	440a      	add	r2, r1
 800a716:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a718:	bf00      	nop
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	40013800 	.word	0x40013800
 800a724:	51eb851f 	.word	0x51eb851f

0800a728 <__errno>:
 800a728:	4b01      	ldr	r3, [pc, #4]	; (800a730 <__errno+0x8>)
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	20000030 	.word	0x20000030

0800a734 <__libc_init_array>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	2500      	movs	r5, #0
 800a738:	4e0c      	ldr	r6, [pc, #48]	; (800a76c <__libc_init_array+0x38>)
 800a73a:	4c0d      	ldr	r4, [pc, #52]	; (800a770 <__libc_init_array+0x3c>)
 800a73c:	1ba4      	subs	r4, r4, r6
 800a73e:	10a4      	asrs	r4, r4, #2
 800a740:	42a5      	cmp	r5, r4
 800a742:	d109      	bne.n	800a758 <__libc_init_array+0x24>
 800a744:	f002 f82a 	bl	800c79c <_init>
 800a748:	2500      	movs	r5, #0
 800a74a:	4e0a      	ldr	r6, [pc, #40]	; (800a774 <__libc_init_array+0x40>)
 800a74c:	4c0a      	ldr	r4, [pc, #40]	; (800a778 <__libc_init_array+0x44>)
 800a74e:	1ba4      	subs	r4, r4, r6
 800a750:	10a4      	asrs	r4, r4, #2
 800a752:	42a5      	cmp	r5, r4
 800a754:	d105      	bne.n	800a762 <__libc_init_array+0x2e>
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a75c:	4798      	blx	r3
 800a75e:	3501      	adds	r5, #1
 800a760:	e7ee      	b.n	800a740 <__libc_init_array+0xc>
 800a762:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a766:	4798      	blx	r3
 800a768:	3501      	adds	r5, #1
 800a76a:	e7f2      	b.n	800a752 <__libc_init_array+0x1e>
 800a76c:	0800cac0 	.word	0x0800cac0
 800a770:	0800cac0 	.word	0x0800cac0
 800a774:	0800cac0 	.word	0x0800cac0
 800a778:	0800cac4 	.word	0x0800cac4

0800a77c <memset>:
 800a77c:	4603      	mov	r3, r0
 800a77e:	4402      	add	r2, r0
 800a780:	4293      	cmp	r3, r2
 800a782:	d100      	bne.n	800a786 <memset+0xa>
 800a784:	4770      	bx	lr
 800a786:	f803 1b01 	strb.w	r1, [r3], #1
 800a78a:	e7f9      	b.n	800a780 <memset+0x4>

0800a78c <siprintf>:
 800a78c:	b40e      	push	{r1, r2, r3}
 800a78e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a792:	b500      	push	{lr}
 800a794:	b09c      	sub	sp, #112	; 0x70
 800a796:	ab1d      	add	r3, sp, #116	; 0x74
 800a798:	9002      	str	r0, [sp, #8]
 800a79a:	9006      	str	r0, [sp, #24]
 800a79c:	9107      	str	r1, [sp, #28]
 800a79e:	9104      	str	r1, [sp, #16]
 800a7a0:	4808      	ldr	r0, [pc, #32]	; (800a7c4 <siprintf+0x38>)
 800a7a2:	4909      	ldr	r1, [pc, #36]	; (800a7c8 <siprintf+0x3c>)
 800a7a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7a8:	9105      	str	r1, [sp, #20]
 800a7aa:	6800      	ldr	r0, [r0, #0]
 800a7ac:	a902      	add	r1, sp, #8
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	f000 f866 	bl	800a880 <_svfiprintf_r>
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	9b02      	ldr	r3, [sp, #8]
 800a7b8:	701a      	strb	r2, [r3, #0]
 800a7ba:	b01c      	add	sp, #112	; 0x70
 800a7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7c0:	b003      	add	sp, #12
 800a7c2:	4770      	bx	lr
 800a7c4:	20000030 	.word	0x20000030
 800a7c8:	ffff0208 	.word	0xffff0208

0800a7cc <__ssputs_r>:
 800a7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d0:	688e      	ldr	r6, [r1, #8]
 800a7d2:	4682      	mov	sl, r0
 800a7d4:	429e      	cmp	r6, r3
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	4690      	mov	r8, r2
 800a7da:	4699      	mov	r9, r3
 800a7dc:	d837      	bhi.n	800a84e <__ssputs_r+0x82>
 800a7de:	898a      	ldrh	r2, [r1, #12]
 800a7e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7e4:	d031      	beq.n	800a84a <__ssputs_r+0x7e>
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	6825      	ldr	r5, [r4, #0]
 800a7ea:	6909      	ldr	r1, [r1, #16]
 800a7ec:	1a6f      	subs	r7, r5, r1
 800a7ee:	6965      	ldr	r5, [r4, #20]
 800a7f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7f4:	fb95 f5f3 	sdiv	r5, r5, r3
 800a7f8:	f109 0301 	add.w	r3, r9, #1
 800a7fc:	443b      	add	r3, r7
 800a7fe:	429d      	cmp	r5, r3
 800a800:	bf38      	it	cc
 800a802:	461d      	movcc	r5, r3
 800a804:	0553      	lsls	r3, r2, #21
 800a806:	d530      	bpl.n	800a86a <__ssputs_r+0x9e>
 800a808:	4629      	mov	r1, r5
 800a80a:	f000 fb37 	bl	800ae7c <_malloc_r>
 800a80e:	4606      	mov	r6, r0
 800a810:	b950      	cbnz	r0, 800a828 <__ssputs_r+0x5c>
 800a812:	230c      	movs	r3, #12
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	f8ca 3000 	str.w	r3, [sl]
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a822:	81a3      	strh	r3, [r4, #12]
 800a824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a828:	463a      	mov	r2, r7
 800a82a:	6921      	ldr	r1, [r4, #16]
 800a82c:	f000 fab6 	bl	800ad9c <memcpy>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	6126      	str	r6, [r4, #16]
 800a83e:	443e      	add	r6, r7
 800a840:	6026      	str	r6, [r4, #0]
 800a842:	464e      	mov	r6, r9
 800a844:	6165      	str	r5, [r4, #20]
 800a846:	1bed      	subs	r5, r5, r7
 800a848:	60a5      	str	r5, [r4, #8]
 800a84a:	454e      	cmp	r6, r9
 800a84c:	d900      	bls.n	800a850 <__ssputs_r+0x84>
 800a84e:	464e      	mov	r6, r9
 800a850:	4632      	mov	r2, r6
 800a852:	4641      	mov	r1, r8
 800a854:	6820      	ldr	r0, [r4, #0]
 800a856:	f000 faac 	bl	800adb2 <memmove>
 800a85a:	68a3      	ldr	r3, [r4, #8]
 800a85c:	2000      	movs	r0, #0
 800a85e:	1b9b      	subs	r3, r3, r6
 800a860:	60a3      	str	r3, [r4, #8]
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	441e      	add	r6, r3
 800a866:	6026      	str	r6, [r4, #0]
 800a868:	e7dc      	b.n	800a824 <__ssputs_r+0x58>
 800a86a:	462a      	mov	r2, r5
 800a86c:	f000 fb60 	bl	800af30 <_realloc_r>
 800a870:	4606      	mov	r6, r0
 800a872:	2800      	cmp	r0, #0
 800a874:	d1e2      	bne.n	800a83c <__ssputs_r+0x70>
 800a876:	6921      	ldr	r1, [r4, #16]
 800a878:	4650      	mov	r0, sl
 800a87a:	f000 fab3 	bl	800ade4 <_free_r>
 800a87e:	e7c8      	b.n	800a812 <__ssputs_r+0x46>

0800a880 <_svfiprintf_r>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	461d      	mov	r5, r3
 800a886:	898b      	ldrh	r3, [r1, #12]
 800a888:	b09d      	sub	sp, #116	; 0x74
 800a88a:	061f      	lsls	r7, r3, #24
 800a88c:	4680      	mov	r8, r0
 800a88e:	460c      	mov	r4, r1
 800a890:	4616      	mov	r6, r2
 800a892:	d50f      	bpl.n	800a8b4 <_svfiprintf_r+0x34>
 800a894:	690b      	ldr	r3, [r1, #16]
 800a896:	b96b      	cbnz	r3, 800a8b4 <_svfiprintf_r+0x34>
 800a898:	2140      	movs	r1, #64	; 0x40
 800a89a:	f000 faef 	bl	800ae7c <_malloc_r>
 800a89e:	6020      	str	r0, [r4, #0]
 800a8a0:	6120      	str	r0, [r4, #16]
 800a8a2:	b928      	cbnz	r0, 800a8b0 <_svfiprintf_r+0x30>
 800a8a4:	230c      	movs	r3, #12
 800a8a6:	f8c8 3000 	str.w	r3, [r8]
 800a8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ae:	e0c8      	b.n	800aa42 <_svfiprintf_r+0x1c2>
 800a8b0:	2340      	movs	r3, #64	; 0x40
 800a8b2:	6163      	str	r3, [r4, #20]
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b8:	2320      	movs	r3, #32
 800a8ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8be:	2330      	movs	r3, #48	; 0x30
 800a8c0:	f04f 0b01 	mov.w	fp, #1
 800a8c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8c8:	9503      	str	r5, [sp, #12]
 800a8ca:	4637      	mov	r7, r6
 800a8cc:	463d      	mov	r5, r7
 800a8ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a8d2:	b10b      	cbz	r3, 800a8d8 <_svfiprintf_r+0x58>
 800a8d4:	2b25      	cmp	r3, #37	; 0x25
 800a8d6:	d13e      	bne.n	800a956 <_svfiprintf_r+0xd6>
 800a8d8:	ebb7 0a06 	subs.w	sl, r7, r6
 800a8dc:	d00b      	beq.n	800a8f6 <_svfiprintf_r+0x76>
 800a8de:	4653      	mov	r3, sl
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	f7ff ff71 	bl	800a7cc <__ssputs_r>
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	f000 80a4 	beq.w	800aa38 <_svfiprintf_r+0x1b8>
 800a8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f2:	4453      	add	r3, sl
 800a8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f6:	783b      	ldrb	r3, [r7, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 809d 	beq.w	800aa38 <_svfiprintf_r+0x1b8>
 800a8fe:	2300      	movs	r3, #0
 800a900:	f04f 32ff 	mov.w	r2, #4294967295
 800a904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a908:	9304      	str	r3, [sp, #16]
 800a90a:	9307      	str	r3, [sp, #28]
 800a90c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a910:	931a      	str	r3, [sp, #104]	; 0x68
 800a912:	462f      	mov	r7, r5
 800a914:	2205      	movs	r2, #5
 800a916:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a91a:	4850      	ldr	r0, [pc, #320]	; (800aa5c <_svfiprintf_r+0x1dc>)
 800a91c:	f000 fa30 	bl	800ad80 <memchr>
 800a920:	9b04      	ldr	r3, [sp, #16]
 800a922:	b9d0      	cbnz	r0, 800a95a <_svfiprintf_r+0xda>
 800a924:	06d9      	lsls	r1, r3, #27
 800a926:	bf44      	itt	mi
 800a928:	2220      	movmi	r2, #32
 800a92a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a92e:	071a      	lsls	r2, r3, #28
 800a930:	bf44      	itt	mi
 800a932:	222b      	movmi	r2, #43	; 0x2b
 800a934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a938:	782a      	ldrb	r2, [r5, #0]
 800a93a:	2a2a      	cmp	r2, #42	; 0x2a
 800a93c:	d015      	beq.n	800a96a <_svfiprintf_r+0xea>
 800a93e:	462f      	mov	r7, r5
 800a940:	2000      	movs	r0, #0
 800a942:	250a      	movs	r5, #10
 800a944:	9a07      	ldr	r2, [sp, #28]
 800a946:	4639      	mov	r1, r7
 800a948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a94c:	3b30      	subs	r3, #48	; 0x30
 800a94e:	2b09      	cmp	r3, #9
 800a950:	d94d      	bls.n	800a9ee <_svfiprintf_r+0x16e>
 800a952:	b1b8      	cbz	r0, 800a984 <_svfiprintf_r+0x104>
 800a954:	e00f      	b.n	800a976 <_svfiprintf_r+0xf6>
 800a956:	462f      	mov	r7, r5
 800a958:	e7b8      	b.n	800a8cc <_svfiprintf_r+0x4c>
 800a95a:	4a40      	ldr	r2, [pc, #256]	; (800aa5c <_svfiprintf_r+0x1dc>)
 800a95c:	463d      	mov	r5, r7
 800a95e:	1a80      	subs	r0, r0, r2
 800a960:	fa0b f000 	lsl.w	r0, fp, r0
 800a964:	4318      	orrs	r0, r3
 800a966:	9004      	str	r0, [sp, #16]
 800a968:	e7d3      	b.n	800a912 <_svfiprintf_r+0x92>
 800a96a:	9a03      	ldr	r2, [sp, #12]
 800a96c:	1d11      	adds	r1, r2, #4
 800a96e:	6812      	ldr	r2, [r2, #0]
 800a970:	9103      	str	r1, [sp, #12]
 800a972:	2a00      	cmp	r2, #0
 800a974:	db01      	blt.n	800a97a <_svfiprintf_r+0xfa>
 800a976:	9207      	str	r2, [sp, #28]
 800a978:	e004      	b.n	800a984 <_svfiprintf_r+0x104>
 800a97a:	4252      	negs	r2, r2
 800a97c:	f043 0302 	orr.w	r3, r3, #2
 800a980:	9207      	str	r2, [sp, #28]
 800a982:	9304      	str	r3, [sp, #16]
 800a984:	783b      	ldrb	r3, [r7, #0]
 800a986:	2b2e      	cmp	r3, #46	; 0x2e
 800a988:	d10c      	bne.n	800a9a4 <_svfiprintf_r+0x124>
 800a98a:	787b      	ldrb	r3, [r7, #1]
 800a98c:	2b2a      	cmp	r3, #42	; 0x2a
 800a98e:	d133      	bne.n	800a9f8 <_svfiprintf_r+0x178>
 800a990:	9b03      	ldr	r3, [sp, #12]
 800a992:	3702      	adds	r7, #2
 800a994:	1d1a      	adds	r2, r3, #4
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	9203      	str	r2, [sp, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	bfb8      	it	lt
 800a99e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9a2:	9305      	str	r3, [sp, #20]
 800a9a4:	4d2e      	ldr	r5, [pc, #184]	; (800aa60 <_svfiprintf_r+0x1e0>)
 800a9a6:	2203      	movs	r2, #3
 800a9a8:	7839      	ldrb	r1, [r7, #0]
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f000 f9e8 	bl	800ad80 <memchr>
 800a9b0:	b138      	cbz	r0, 800a9c2 <_svfiprintf_r+0x142>
 800a9b2:	2340      	movs	r3, #64	; 0x40
 800a9b4:	1b40      	subs	r0, r0, r5
 800a9b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a9ba:	9b04      	ldr	r3, [sp, #16]
 800a9bc:	3701      	adds	r7, #1
 800a9be:	4303      	orrs	r3, r0
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	7839      	ldrb	r1, [r7, #0]
 800a9c4:	2206      	movs	r2, #6
 800a9c6:	4827      	ldr	r0, [pc, #156]	; (800aa64 <_svfiprintf_r+0x1e4>)
 800a9c8:	1c7e      	adds	r6, r7, #1
 800a9ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9ce:	f000 f9d7 	bl	800ad80 <memchr>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d038      	beq.n	800aa48 <_svfiprintf_r+0x1c8>
 800a9d6:	4b24      	ldr	r3, [pc, #144]	; (800aa68 <_svfiprintf_r+0x1e8>)
 800a9d8:	bb13      	cbnz	r3, 800aa20 <_svfiprintf_r+0x1a0>
 800a9da:	9b03      	ldr	r3, [sp, #12]
 800a9dc:	3307      	adds	r3, #7
 800a9de:	f023 0307 	bic.w	r3, r3, #7
 800a9e2:	3308      	adds	r3, #8
 800a9e4:	9303      	str	r3, [sp, #12]
 800a9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e8:	444b      	add	r3, r9
 800a9ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ec:	e76d      	b.n	800a8ca <_svfiprintf_r+0x4a>
 800a9ee:	fb05 3202 	mla	r2, r5, r2, r3
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	460f      	mov	r7, r1
 800a9f6:	e7a6      	b.n	800a946 <_svfiprintf_r+0xc6>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	250a      	movs	r5, #10
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	3701      	adds	r7, #1
 800aa00:	9305      	str	r3, [sp, #20]
 800aa02:	4638      	mov	r0, r7
 800aa04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa08:	3a30      	subs	r2, #48	; 0x30
 800aa0a:	2a09      	cmp	r2, #9
 800aa0c:	d903      	bls.n	800aa16 <_svfiprintf_r+0x196>
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d0c8      	beq.n	800a9a4 <_svfiprintf_r+0x124>
 800aa12:	9105      	str	r1, [sp, #20]
 800aa14:	e7c6      	b.n	800a9a4 <_svfiprintf_r+0x124>
 800aa16:	fb05 2101 	mla	r1, r5, r1, r2
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	e7f0      	b.n	800aa02 <_svfiprintf_r+0x182>
 800aa20:	ab03      	add	r3, sp, #12
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	4622      	mov	r2, r4
 800aa26:	4b11      	ldr	r3, [pc, #68]	; (800aa6c <_svfiprintf_r+0x1ec>)
 800aa28:	a904      	add	r1, sp, #16
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	f3af 8000 	nop.w
 800aa30:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aa34:	4681      	mov	r9, r0
 800aa36:	d1d6      	bne.n	800a9e6 <_svfiprintf_r+0x166>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	065b      	lsls	r3, r3, #25
 800aa3c:	f53f af35 	bmi.w	800a8aa <_svfiprintf_r+0x2a>
 800aa40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa42:	b01d      	add	sp, #116	; 0x74
 800aa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa48:	ab03      	add	r3, sp, #12
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	4622      	mov	r2, r4
 800aa4e:	4b07      	ldr	r3, [pc, #28]	; (800aa6c <_svfiprintf_r+0x1ec>)
 800aa50:	a904      	add	r1, sp, #16
 800aa52:	4640      	mov	r0, r8
 800aa54:	f000 f882 	bl	800ab5c <_printf_i>
 800aa58:	e7ea      	b.n	800aa30 <_svfiprintf_r+0x1b0>
 800aa5a:	bf00      	nop
 800aa5c:	0800ca18 	.word	0x0800ca18
 800aa60:	0800ca1e 	.word	0x0800ca1e
 800aa64:	0800ca22 	.word	0x0800ca22
 800aa68:	00000000 	.word	0x00000000
 800aa6c:	0800a7cd 	.word	0x0800a7cd

0800aa70 <_printf_common>:
 800aa70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa74:	4691      	mov	r9, r2
 800aa76:	461f      	mov	r7, r3
 800aa78:	688a      	ldr	r2, [r1, #8]
 800aa7a:	690b      	ldr	r3, [r1, #16]
 800aa7c:	4606      	mov	r6, r0
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	bfb8      	it	lt
 800aa82:	4613      	movlt	r3, r2
 800aa84:	f8c9 3000 	str.w	r3, [r9]
 800aa88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa92:	b112      	cbz	r2, 800aa9a <_printf_common+0x2a>
 800aa94:	3301      	adds	r3, #1
 800aa96:	f8c9 3000 	str.w	r3, [r9]
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	0699      	lsls	r1, r3, #26
 800aa9e:	bf42      	ittt	mi
 800aaa0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800aaa4:	3302      	addmi	r3, #2
 800aaa6:	f8c9 3000 	strmi.w	r3, [r9]
 800aaaa:	6825      	ldr	r5, [r4, #0]
 800aaac:	f015 0506 	ands.w	r5, r5, #6
 800aab0:	d107      	bne.n	800aac2 <_printf_common+0x52>
 800aab2:	f104 0a19 	add.w	sl, r4, #25
 800aab6:	68e3      	ldr	r3, [r4, #12]
 800aab8:	f8d9 2000 	ldr.w	r2, [r9]
 800aabc:	1a9b      	subs	r3, r3, r2
 800aabe:	42ab      	cmp	r3, r5
 800aac0:	dc29      	bgt.n	800ab16 <_printf_common+0xa6>
 800aac2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aac6:	6822      	ldr	r2, [r4, #0]
 800aac8:	3300      	adds	r3, #0
 800aaca:	bf18      	it	ne
 800aacc:	2301      	movne	r3, #1
 800aace:	0692      	lsls	r2, r2, #26
 800aad0:	d42e      	bmi.n	800ab30 <_printf_common+0xc0>
 800aad2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aad6:	4639      	mov	r1, r7
 800aad8:	4630      	mov	r0, r6
 800aada:	47c0      	blx	r8
 800aadc:	3001      	adds	r0, #1
 800aade:	d021      	beq.n	800ab24 <_printf_common+0xb4>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	68e5      	ldr	r5, [r4, #12]
 800aae4:	f003 0306 	and.w	r3, r3, #6
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	bf18      	it	ne
 800aaec:	2500      	movne	r5, #0
 800aaee:	f8d9 2000 	ldr.w	r2, [r9]
 800aaf2:	f04f 0900 	mov.w	r9, #0
 800aaf6:	bf08      	it	eq
 800aaf8:	1aad      	subeq	r5, r5, r2
 800aafa:	68a3      	ldr	r3, [r4, #8]
 800aafc:	6922      	ldr	r2, [r4, #16]
 800aafe:	bf08      	it	eq
 800ab00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab04:	4293      	cmp	r3, r2
 800ab06:	bfc4      	itt	gt
 800ab08:	1a9b      	subgt	r3, r3, r2
 800ab0a:	18ed      	addgt	r5, r5, r3
 800ab0c:	341a      	adds	r4, #26
 800ab0e:	454d      	cmp	r5, r9
 800ab10:	d11a      	bne.n	800ab48 <_printf_common+0xd8>
 800ab12:	2000      	movs	r0, #0
 800ab14:	e008      	b.n	800ab28 <_printf_common+0xb8>
 800ab16:	2301      	movs	r3, #1
 800ab18:	4652      	mov	r2, sl
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	47c0      	blx	r8
 800ab20:	3001      	adds	r0, #1
 800ab22:	d103      	bne.n	800ab2c <_printf_common+0xbc>
 800ab24:	f04f 30ff 	mov.w	r0, #4294967295
 800ab28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab2c:	3501      	adds	r5, #1
 800ab2e:	e7c2      	b.n	800aab6 <_printf_common+0x46>
 800ab30:	2030      	movs	r0, #48	; 0x30
 800ab32:	18e1      	adds	r1, r4, r3
 800ab34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab3e:	4422      	add	r2, r4
 800ab40:	3302      	adds	r3, #2
 800ab42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab46:	e7c4      	b.n	800aad2 <_printf_common+0x62>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	4630      	mov	r0, r6
 800ab50:	47c0      	blx	r8
 800ab52:	3001      	adds	r0, #1
 800ab54:	d0e6      	beq.n	800ab24 <_printf_common+0xb4>
 800ab56:	f109 0901 	add.w	r9, r9, #1
 800ab5a:	e7d8      	b.n	800ab0e <_printf_common+0x9e>

0800ab5c <_printf_i>:
 800ab5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ab64:	460c      	mov	r4, r1
 800ab66:	7e09      	ldrb	r1, [r1, #24]
 800ab68:	b085      	sub	sp, #20
 800ab6a:	296e      	cmp	r1, #110	; 0x6e
 800ab6c:	4617      	mov	r7, r2
 800ab6e:	4606      	mov	r6, r0
 800ab70:	4698      	mov	r8, r3
 800ab72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab74:	f000 80b3 	beq.w	800acde <_printf_i+0x182>
 800ab78:	d822      	bhi.n	800abc0 <_printf_i+0x64>
 800ab7a:	2963      	cmp	r1, #99	; 0x63
 800ab7c:	d036      	beq.n	800abec <_printf_i+0x90>
 800ab7e:	d80a      	bhi.n	800ab96 <_printf_i+0x3a>
 800ab80:	2900      	cmp	r1, #0
 800ab82:	f000 80b9 	beq.w	800acf8 <_printf_i+0x19c>
 800ab86:	2958      	cmp	r1, #88	; 0x58
 800ab88:	f000 8083 	beq.w	800ac92 <_printf_i+0x136>
 800ab8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ab94:	e032      	b.n	800abfc <_printf_i+0xa0>
 800ab96:	2964      	cmp	r1, #100	; 0x64
 800ab98:	d001      	beq.n	800ab9e <_printf_i+0x42>
 800ab9a:	2969      	cmp	r1, #105	; 0x69
 800ab9c:	d1f6      	bne.n	800ab8c <_printf_i+0x30>
 800ab9e:	6820      	ldr	r0, [r4, #0]
 800aba0:	6813      	ldr	r3, [r2, #0]
 800aba2:	0605      	lsls	r5, r0, #24
 800aba4:	f103 0104 	add.w	r1, r3, #4
 800aba8:	d52a      	bpl.n	800ac00 <_printf_i+0xa4>
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6011      	str	r1, [r2, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	da03      	bge.n	800abba <_printf_i+0x5e>
 800abb2:	222d      	movs	r2, #45	; 0x2d
 800abb4:	425b      	negs	r3, r3
 800abb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800abba:	486f      	ldr	r0, [pc, #444]	; (800ad78 <_printf_i+0x21c>)
 800abbc:	220a      	movs	r2, #10
 800abbe:	e039      	b.n	800ac34 <_printf_i+0xd8>
 800abc0:	2973      	cmp	r1, #115	; 0x73
 800abc2:	f000 809d 	beq.w	800ad00 <_printf_i+0x1a4>
 800abc6:	d808      	bhi.n	800abda <_printf_i+0x7e>
 800abc8:	296f      	cmp	r1, #111	; 0x6f
 800abca:	d020      	beq.n	800ac0e <_printf_i+0xb2>
 800abcc:	2970      	cmp	r1, #112	; 0x70
 800abce:	d1dd      	bne.n	800ab8c <_printf_i+0x30>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	f043 0320 	orr.w	r3, r3, #32
 800abd6:	6023      	str	r3, [r4, #0]
 800abd8:	e003      	b.n	800abe2 <_printf_i+0x86>
 800abda:	2975      	cmp	r1, #117	; 0x75
 800abdc:	d017      	beq.n	800ac0e <_printf_i+0xb2>
 800abde:	2978      	cmp	r1, #120	; 0x78
 800abe0:	d1d4      	bne.n	800ab8c <_printf_i+0x30>
 800abe2:	2378      	movs	r3, #120	; 0x78
 800abe4:	4865      	ldr	r0, [pc, #404]	; (800ad7c <_printf_i+0x220>)
 800abe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abea:	e055      	b.n	800ac98 <_printf_i+0x13c>
 800abec:	6813      	ldr	r3, [r2, #0]
 800abee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abf2:	1d19      	adds	r1, r3, #4
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6011      	str	r1, [r2, #0]
 800abf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abfc:	2301      	movs	r3, #1
 800abfe:	e08c      	b.n	800ad1a <_printf_i+0x1be>
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac06:	6011      	str	r1, [r2, #0]
 800ac08:	bf18      	it	ne
 800ac0a:	b21b      	sxthne	r3, r3
 800ac0c:	e7cf      	b.n	800abae <_printf_i+0x52>
 800ac0e:	6813      	ldr	r3, [r2, #0]
 800ac10:	6825      	ldr	r5, [r4, #0]
 800ac12:	1d18      	adds	r0, r3, #4
 800ac14:	6010      	str	r0, [r2, #0]
 800ac16:	0628      	lsls	r0, r5, #24
 800ac18:	d501      	bpl.n	800ac1e <_printf_i+0xc2>
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	e002      	b.n	800ac24 <_printf_i+0xc8>
 800ac1e:	0668      	lsls	r0, r5, #25
 800ac20:	d5fb      	bpl.n	800ac1a <_printf_i+0xbe>
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	296f      	cmp	r1, #111	; 0x6f
 800ac26:	bf14      	ite	ne
 800ac28:	220a      	movne	r2, #10
 800ac2a:	2208      	moveq	r2, #8
 800ac2c:	4852      	ldr	r0, [pc, #328]	; (800ad78 <_printf_i+0x21c>)
 800ac2e:	2100      	movs	r1, #0
 800ac30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac34:	6865      	ldr	r5, [r4, #4]
 800ac36:	2d00      	cmp	r5, #0
 800ac38:	60a5      	str	r5, [r4, #8]
 800ac3a:	f2c0 8095 	blt.w	800ad68 <_printf_i+0x20c>
 800ac3e:	6821      	ldr	r1, [r4, #0]
 800ac40:	f021 0104 	bic.w	r1, r1, #4
 800ac44:	6021      	str	r1, [r4, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d13d      	bne.n	800acc6 <_printf_i+0x16a>
 800ac4a:	2d00      	cmp	r5, #0
 800ac4c:	f040 808e 	bne.w	800ad6c <_printf_i+0x210>
 800ac50:	4665      	mov	r5, ip
 800ac52:	2a08      	cmp	r2, #8
 800ac54:	d10b      	bne.n	800ac6e <_printf_i+0x112>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	07db      	lsls	r3, r3, #31
 800ac5a:	d508      	bpl.n	800ac6e <_printf_i+0x112>
 800ac5c:	6923      	ldr	r3, [r4, #16]
 800ac5e:	6862      	ldr	r2, [r4, #4]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	bfde      	ittt	le
 800ac64:	2330      	movle	r3, #48	; 0x30
 800ac66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac6e:	ebac 0305 	sub.w	r3, ip, r5
 800ac72:	6123      	str	r3, [r4, #16]
 800ac74:	f8cd 8000 	str.w	r8, [sp]
 800ac78:	463b      	mov	r3, r7
 800ac7a:	aa03      	add	r2, sp, #12
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f7ff fef6 	bl	800aa70 <_printf_common>
 800ac84:	3001      	adds	r0, #1
 800ac86:	d14d      	bne.n	800ad24 <_printf_i+0x1c8>
 800ac88:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8c:	b005      	add	sp, #20
 800ac8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac92:	4839      	ldr	r0, [pc, #228]	; (800ad78 <_printf_i+0x21c>)
 800ac94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ac98:	6813      	ldr	r3, [r2, #0]
 800ac9a:	6821      	ldr	r1, [r4, #0]
 800ac9c:	1d1d      	adds	r5, r3, #4
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6015      	str	r5, [r2, #0]
 800aca2:	060a      	lsls	r2, r1, #24
 800aca4:	d50b      	bpl.n	800acbe <_printf_i+0x162>
 800aca6:	07ca      	lsls	r2, r1, #31
 800aca8:	bf44      	itt	mi
 800acaa:	f041 0120 	orrmi.w	r1, r1, #32
 800acae:	6021      	strmi	r1, [r4, #0]
 800acb0:	b91b      	cbnz	r3, 800acba <_printf_i+0x15e>
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	f022 0220 	bic.w	r2, r2, #32
 800acb8:	6022      	str	r2, [r4, #0]
 800acba:	2210      	movs	r2, #16
 800acbc:	e7b7      	b.n	800ac2e <_printf_i+0xd2>
 800acbe:	064d      	lsls	r5, r1, #25
 800acc0:	bf48      	it	mi
 800acc2:	b29b      	uxthmi	r3, r3
 800acc4:	e7ef      	b.n	800aca6 <_printf_i+0x14a>
 800acc6:	4665      	mov	r5, ip
 800acc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800accc:	fb02 3311 	mls	r3, r2, r1, r3
 800acd0:	5cc3      	ldrb	r3, [r0, r3]
 800acd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800acd6:	460b      	mov	r3, r1
 800acd8:	2900      	cmp	r1, #0
 800acda:	d1f5      	bne.n	800acc8 <_printf_i+0x16c>
 800acdc:	e7b9      	b.n	800ac52 <_printf_i+0xf6>
 800acde:	6813      	ldr	r3, [r2, #0]
 800ace0:	6825      	ldr	r5, [r4, #0]
 800ace2:	1d18      	adds	r0, r3, #4
 800ace4:	6961      	ldr	r1, [r4, #20]
 800ace6:	6010      	str	r0, [r2, #0]
 800ace8:	0628      	lsls	r0, r5, #24
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	d501      	bpl.n	800acf2 <_printf_i+0x196>
 800acee:	6019      	str	r1, [r3, #0]
 800acf0:	e002      	b.n	800acf8 <_printf_i+0x19c>
 800acf2:	066a      	lsls	r2, r5, #25
 800acf4:	d5fb      	bpl.n	800acee <_printf_i+0x192>
 800acf6:	8019      	strh	r1, [r3, #0]
 800acf8:	2300      	movs	r3, #0
 800acfa:	4665      	mov	r5, ip
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	e7b9      	b.n	800ac74 <_printf_i+0x118>
 800ad00:	6813      	ldr	r3, [r2, #0]
 800ad02:	1d19      	adds	r1, r3, #4
 800ad04:	6011      	str	r1, [r2, #0]
 800ad06:	681d      	ldr	r5, [r3, #0]
 800ad08:	6862      	ldr	r2, [r4, #4]
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	f000 f837 	bl	800ad80 <memchr>
 800ad12:	b108      	cbz	r0, 800ad18 <_printf_i+0x1bc>
 800ad14:	1b40      	subs	r0, r0, r5
 800ad16:	6060      	str	r0, [r4, #4]
 800ad18:	6863      	ldr	r3, [r4, #4]
 800ad1a:	6123      	str	r3, [r4, #16]
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad22:	e7a7      	b.n	800ac74 <_printf_i+0x118>
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	462a      	mov	r2, r5
 800ad28:	4639      	mov	r1, r7
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	47c0      	blx	r8
 800ad2e:	3001      	adds	r0, #1
 800ad30:	d0aa      	beq.n	800ac88 <_printf_i+0x12c>
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	079b      	lsls	r3, r3, #30
 800ad36:	d413      	bmi.n	800ad60 <_printf_i+0x204>
 800ad38:	68e0      	ldr	r0, [r4, #12]
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	4298      	cmp	r0, r3
 800ad3e:	bfb8      	it	lt
 800ad40:	4618      	movlt	r0, r3
 800ad42:	e7a3      	b.n	800ac8c <_printf_i+0x130>
 800ad44:	2301      	movs	r3, #1
 800ad46:	464a      	mov	r2, r9
 800ad48:	4639      	mov	r1, r7
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	47c0      	blx	r8
 800ad4e:	3001      	adds	r0, #1
 800ad50:	d09a      	beq.n	800ac88 <_printf_i+0x12c>
 800ad52:	3501      	adds	r5, #1
 800ad54:	68e3      	ldr	r3, [r4, #12]
 800ad56:	9a03      	ldr	r2, [sp, #12]
 800ad58:	1a9b      	subs	r3, r3, r2
 800ad5a:	42ab      	cmp	r3, r5
 800ad5c:	dcf2      	bgt.n	800ad44 <_printf_i+0x1e8>
 800ad5e:	e7eb      	b.n	800ad38 <_printf_i+0x1dc>
 800ad60:	2500      	movs	r5, #0
 800ad62:	f104 0919 	add.w	r9, r4, #25
 800ad66:	e7f5      	b.n	800ad54 <_printf_i+0x1f8>
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1ac      	bne.n	800acc6 <_printf_i+0x16a>
 800ad6c:	7803      	ldrb	r3, [r0, #0]
 800ad6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad76:	e76c      	b.n	800ac52 <_printf_i+0xf6>
 800ad78:	0800ca29 	.word	0x0800ca29
 800ad7c:	0800ca3a 	.word	0x0800ca3a

0800ad80 <memchr>:
 800ad80:	b510      	push	{r4, lr}
 800ad82:	b2c9      	uxtb	r1, r1
 800ad84:	4402      	add	r2, r0
 800ad86:	4290      	cmp	r0, r2
 800ad88:	4603      	mov	r3, r0
 800ad8a:	d101      	bne.n	800ad90 <memchr+0x10>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e003      	b.n	800ad98 <memchr+0x18>
 800ad90:	781c      	ldrb	r4, [r3, #0]
 800ad92:	3001      	adds	r0, #1
 800ad94:	428c      	cmp	r4, r1
 800ad96:	d1f6      	bne.n	800ad86 <memchr+0x6>
 800ad98:	4618      	mov	r0, r3
 800ad9a:	bd10      	pop	{r4, pc}

0800ad9c <memcpy>:
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	1e43      	subs	r3, r0, #1
 800ada0:	440a      	add	r2, r1
 800ada2:	4291      	cmp	r1, r2
 800ada4:	d100      	bne.n	800ada8 <memcpy+0xc>
 800ada6:	bd10      	pop	{r4, pc}
 800ada8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adb0:	e7f7      	b.n	800ada2 <memcpy+0x6>

0800adb2 <memmove>:
 800adb2:	4288      	cmp	r0, r1
 800adb4:	b510      	push	{r4, lr}
 800adb6:	eb01 0302 	add.w	r3, r1, r2
 800adba:	d807      	bhi.n	800adcc <memmove+0x1a>
 800adbc:	1e42      	subs	r2, r0, #1
 800adbe:	4299      	cmp	r1, r3
 800adc0:	d00a      	beq.n	800add8 <memmove+0x26>
 800adc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adc6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800adca:	e7f8      	b.n	800adbe <memmove+0xc>
 800adcc:	4283      	cmp	r3, r0
 800adce:	d9f5      	bls.n	800adbc <memmove+0xa>
 800add0:	1881      	adds	r1, r0, r2
 800add2:	1ad2      	subs	r2, r2, r3
 800add4:	42d3      	cmn	r3, r2
 800add6:	d100      	bne.n	800adda <memmove+0x28>
 800add8:	bd10      	pop	{r4, pc}
 800adda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adde:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ade2:	e7f7      	b.n	800add4 <memmove+0x22>

0800ade4 <_free_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4605      	mov	r5, r0
 800ade8:	2900      	cmp	r1, #0
 800adea:	d043      	beq.n	800ae74 <_free_r+0x90>
 800adec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf0:	1f0c      	subs	r4, r1, #4
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	bfb8      	it	lt
 800adf6:	18e4      	addlt	r4, r4, r3
 800adf8:	f000 f8d0 	bl	800af9c <__malloc_lock>
 800adfc:	4a1e      	ldr	r2, [pc, #120]	; (800ae78 <_free_r+0x94>)
 800adfe:	6813      	ldr	r3, [r2, #0]
 800ae00:	4610      	mov	r0, r2
 800ae02:	b933      	cbnz	r3, 800ae12 <_free_r+0x2e>
 800ae04:	6063      	str	r3, [r4, #4]
 800ae06:	6014      	str	r4, [r2, #0]
 800ae08:	4628      	mov	r0, r5
 800ae0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae0e:	f000 b8c6 	b.w	800af9e <__malloc_unlock>
 800ae12:	42a3      	cmp	r3, r4
 800ae14:	d90b      	bls.n	800ae2e <_free_r+0x4a>
 800ae16:	6821      	ldr	r1, [r4, #0]
 800ae18:	1862      	adds	r2, r4, r1
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	bf01      	itttt	eq
 800ae1e:	681a      	ldreq	r2, [r3, #0]
 800ae20:	685b      	ldreq	r3, [r3, #4]
 800ae22:	1852      	addeq	r2, r2, r1
 800ae24:	6022      	streq	r2, [r4, #0]
 800ae26:	6063      	str	r3, [r4, #4]
 800ae28:	6004      	str	r4, [r0, #0]
 800ae2a:	e7ed      	b.n	800ae08 <_free_r+0x24>
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	b10a      	cbz	r2, 800ae36 <_free_r+0x52>
 800ae32:	42a2      	cmp	r2, r4
 800ae34:	d9fa      	bls.n	800ae2c <_free_r+0x48>
 800ae36:	6819      	ldr	r1, [r3, #0]
 800ae38:	1858      	adds	r0, r3, r1
 800ae3a:	42a0      	cmp	r0, r4
 800ae3c:	d10b      	bne.n	800ae56 <_free_r+0x72>
 800ae3e:	6820      	ldr	r0, [r4, #0]
 800ae40:	4401      	add	r1, r0
 800ae42:	1858      	adds	r0, r3, r1
 800ae44:	4282      	cmp	r2, r0
 800ae46:	6019      	str	r1, [r3, #0]
 800ae48:	d1de      	bne.n	800ae08 <_free_r+0x24>
 800ae4a:	6810      	ldr	r0, [r2, #0]
 800ae4c:	6852      	ldr	r2, [r2, #4]
 800ae4e:	4401      	add	r1, r0
 800ae50:	6019      	str	r1, [r3, #0]
 800ae52:	605a      	str	r2, [r3, #4]
 800ae54:	e7d8      	b.n	800ae08 <_free_r+0x24>
 800ae56:	d902      	bls.n	800ae5e <_free_r+0x7a>
 800ae58:	230c      	movs	r3, #12
 800ae5a:	602b      	str	r3, [r5, #0]
 800ae5c:	e7d4      	b.n	800ae08 <_free_r+0x24>
 800ae5e:	6820      	ldr	r0, [r4, #0]
 800ae60:	1821      	adds	r1, r4, r0
 800ae62:	428a      	cmp	r2, r1
 800ae64:	bf01      	itttt	eq
 800ae66:	6811      	ldreq	r1, [r2, #0]
 800ae68:	6852      	ldreq	r2, [r2, #4]
 800ae6a:	1809      	addeq	r1, r1, r0
 800ae6c:	6021      	streq	r1, [r4, #0]
 800ae6e:	6062      	str	r2, [r4, #4]
 800ae70:	605c      	str	r4, [r3, #4]
 800ae72:	e7c9      	b.n	800ae08 <_free_r+0x24>
 800ae74:	bd38      	pop	{r3, r4, r5, pc}
 800ae76:	bf00      	nop
 800ae78:	20000150 	.word	0x20000150

0800ae7c <_malloc_r>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	1ccd      	adds	r5, r1, #3
 800ae80:	f025 0503 	bic.w	r5, r5, #3
 800ae84:	3508      	adds	r5, #8
 800ae86:	2d0c      	cmp	r5, #12
 800ae88:	bf38      	it	cc
 800ae8a:	250c      	movcc	r5, #12
 800ae8c:	2d00      	cmp	r5, #0
 800ae8e:	4606      	mov	r6, r0
 800ae90:	db01      	blt.n	800ae96 <_malloc_r+0x1a>
 800ae92:	42a9      	cmp	r1, r5
 800ae94:	d903      	bls.n	800ae9e <_malloc_r+0x22>
 800ae96:	230c      	movs	r3, #12
 800ae98:	6033      	str	r3, [r6, #0]
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	f000 f87d 	bl	800af9c <__malloc_lock>
 800aea2:	4a21      	ldr	r2, [pc, #132]	; (800af28 <_malloc_r+0xac>)
 800aea4:	6814      	ldr	r4, [r2, #0]
 800aea6:	4621      	mov	r1, r4
 800aea8:	b991      	cbnz	r1, 800aed0 <_malloc_r+0x54>
 800aeaa:	4c20      	ldr	r4, [pc, #128]	; (800af2c <_malloc_r+0xb0>)
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	b91b      	cbnz	r3, 800aeb8 <_malloc_r+0x3c>
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f000 f863 	bl	800af7c <_sbrk_r>
 800aeb6:	6020      	str	r0, [r4, #0]
 800aeb8:	4629      	mov	r1, r5
 800aeba:	4630      	mov	r0, r6
 800aebc:	f000 f85e 	bl	800af7c <_sbrk_r>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d124      	bne.n	800af0e <_malloc_r+0x92>
 800aec4:	230c      	movs	r3, #12
 800aec6:	4630      	mov	r0, r6
 800aec8:	6033      	str	r3, [r6, #0]
 800aeca:	f000 f868 	bl	800af9e <__malloc_unlock>
 800aece:	e7e4      	b.n	800ae9a <_malloc_r+0x1e>
 800aed0:	680b      	ldr	r3, [r1, #0]
 800aed2:	1b5b      	subs	r3, r3, r5
 800aed4:	d418      	bmi.n	800af08 <_malloc_r+0x8c>
 800aed6:	2b0b      	cmp	r3, #11
 800aed8:	d90f      	bls.n	800aefa <_malloc_r+0x7e>
 800aeda:	600b      	str	r3, [r1, #0]
 800aedc:	18cc      	adds	r4, r1, r3
 800aede:	50cd      	str	r5, [r1, r3]
 800aee0:	4630      	mov	r0, r6
 800aee2:	f000 f85c 	bl	800af9e <__malloc_unlock>
 800aee6:	f104 000b 	add.w	r0, r4, #11
 800aeea:	1d23      	adds	r3, r4, #4
 800aeec:	f020 0007 	bic.w	r0, r0, #7
 800aef0:	1ac3      	subs	r3, r0, r3
 800aef2:	d0d3      	beq.n	800ae9c <_malloc_r+0x20>
 800aef4:	425a      	negs	r2, r3
 800aef6:	50e2      	str	r2, [r4, r3]
 800aef8:	e7d0      	b.n	800ae9c <_malloc_r+0x20>
 800aefa:	684b      	ldr	r3, [r1, #4]
 800aefc:	428c      	cmp	r4, r1
 800aefe:	bf16      	itet	ne
 800af00:	6063      	strne	r3, [r4, #4]
 800af02:	6013      	streq	r3, [r2, #0]
 800af04:	460c      	movne	r4, r1
 800af06:	e7eb      	b.n	800aee0 <_malloc_r+0x64>
 800af08:	460c      	mov	r4, r1
 800af0a:	6849      	ldr	r1, [r1, #4]
 800af0c:	e7cc      	b.n	800aea8 <_malloc_r+0x2c>
 800af0e:	1cc4      	adds	r4, r0, #3
 800af10:	f024 0403 	bic.w	r4, r4, #3
 800af14:	42a0      	cmp	r0, r4
 800af16:	d005      	beq.n	800af24 <_malloc_r+0xa8>
 800af18:	1a21      	subs	r1, r4, r0
 800af1a:	4630      	mov	r0, r6
 800af1c:	f000 f82e 	bl	800af7c <_sbrk_r>
 800af20:	3001      	adds	r0, #1
 800af22:	d0cf      	beq.n	800aec4 <_malloc_r+0x48>
 800af24:	6025      	str	r5, [r4, #0]
 800af26:	e7db      	b.n	800aee0 <_malloc_r+0x64>
 800af28:	20000150 	.word	0x20000150
 800af2c:	20000154 	.word	0x20000154

0800af30 <_realloc_r>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	4607      	mov	r7, r0
 800af34:	4614      	mov	r4, r2
 800af36:	460e      	mov	r6, r1
 800af38:	b921      	cbnz	r1, 800af44 <_realloc_r+0x14>
 800af3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af3e:	4611      	mov	r1, r2
 800af40:	f7ff bf9c 	b.w	800ae7c <_malloc_r>
 800af44:	b922      	cbnz	r2, 800af50 <_realloc_r+0x20>
 800af46:	f7ff ff4d 	bl	800ade4 <_free_r>
 800af4a:	4625      	mov	r5, r4
 800af4c:	4628      	mov	r0, r5
 800af4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af50:	f000 f826 	bl	800afa0 <_malloc_usable_size_r>
 800af54:	42a0      	cmp	r0, r4
 800af56:	d20f      	bcs.n	800af78 <_realloc_r+0x48>
 800af58:	4621      	mov	r1, r4
 800af5a:	4638      	mov	r0, r7
 800af5c:	f7ff ff8e 	bl	800ae7c <_malloc_r>
 800af60:	4605      	mov	r5, r0
 800af62:	2800      	cmp	r0, #0
 800af64:	d0f2      	beq.n	800af4c <_realloc_r+0x1c>
 800af66:	4631      	mov	r1, r6
 800af68:	4622      	mov	r2, r4
 800af6a:	f7ff ff17 	bl	800ad9c <memcpy>
 800af6e:	4631      	mov	r1, r6
 800af70:	4638      	mov	r0, r7
 800af72:	f7ff ff37 	bl	800ade4 <_free_r>
 800af76:	e7e9      	b.n	800af4c <_realloc_r+0x1c>
 800af78:	4635      	mov	r5, r6
 800af7a:	e7e7      	b.n	800af4c <_realloc_r+0x1c>

0800af7c <_sbrk_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	2300      	movs	r3, #0
 800af80:	4c05      	ldr	r4, [pc, #20]	; (800af98 <_sbrk_r+0x1c>)
 800af82:	4605      	mov	r5, r0
 800af84:	4608      	mov	r0, r1
 800af86:	6023      	str	r3, [r4, #0]
 800af88:	f7fb f940 	bl	800620c <_sbrk>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_sbrk_r+0x1a>
 800af90:	6823      	ldr	r3, [r4, #0]
 800af92:	b103      	cbz	r3, 800af96 <_sbrk_r+0x1a>
 800af94:	602b      	str	r3, [r5, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	20000558 	.word	0x20000558

0800af9c <__malloc_lock>:
 800af9c:	4770      	bx	lr

0800af9e <__malloc_unlock>:
 800af9e:	4770      	bx	lr

0800afa0 <_malloc_usable_size_r>:
 800afa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afa4:	1f18      	subs	r0, r3, #4
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bfbc      	itt	lt
 800afaa:	580b      	ldrlt	r3, [r1, r0]
 800afac:	18c0      	addlt	r0, r0, r3
 800afae:	4770      	bx	lr

0800afb0 <pow>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	b08f      	sub	sp, #60	; 0x3c
 800afb6:	461d      	mov	r5, r3
 800afb8:	4680      	mov	r8, r0
 800afba:	4689      	mov	r9, r1
 800afbc:	4614      	mov	r4, r2
 800afbe:	f000 f9ef 	bl	800b3a0 <__ieee754_pow>
 800afc2:	4fa1      	ldr	r7, [pc, #644]	; (800b248 <pow+0x298>)
 800afc4:	e9cd 0100 	strd	r0, r1, [sp]
 800afc8:	f997 3000 	ldrsb.w	r3, [r7]
 800afcc:	463e      	mov	r6, r7
 800afce:	9302      	str	r3, [sp, #8]
 800afd0:	3301      	adds	r3, #1
 800afd2:	d05f      	beq.n	800b094 <pow+0xe4>
 800afd4:	4622      	mov	r2, r4
 800afd6:	462b      	mov	r3, r5
 800afd8:	4620      	mov	r0, r4
 800afda:	4629      	mov	r1, r5
 800afdc:	f7f5 fd0e 	bl	80009fc <__aeabi_dcmpun>
 800afe0:	4682      	mov	sl, r0
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d156      	bne.n	800b094 <pow+0xe4>
 800afe6:	4642      	mov	r2, r8
 800afe8:	464b      	mov	r3, r9
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f7f5 fd05 	bl	80009fc <__aeabi_dcmpun>
 800aff2:	9003      	str	r0, [sp, #12]
 800aff4:	b1e8      	cbz	r0, 800b032 <pow+0x82>
 800aff6:	2200      	movs	r2, #0
 800aff8:	2300      	movs	r3, #0
 800affa:	4620      	mov	r0, r4
 800affc:	4629      	mov	r1, r5
 800affe:	f7f5 fccb 	bl	8000998 <__aeabi_dcmpeq>
 800b002:	2800      	cmp	r0, #0
 800b004:	d046      	beq.n	800b094 <pow+0xe4>
 800b006:	2301      	movs	r3, #1
 800b008:	2200      	movs	r2, #0
 800b00a:	9304      	str	r3, [sp, #16]
 800b00c:	4b8f      	ldr	r3, [pc, #572]	; (800b24c <pow+0x29c>)
 800b00e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b012:	9305      	str	r3, [sp, #20]
 800b014:	4b8e      	ldr	r3, [pc, #568]	; (800b250 <pow+0x2a0>)
 800b016:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b01a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b01e:	9b02      	ldr	r3, [sp, #8]
 800b020:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b024:	2b02      	cmp	r3, #2
 800b026:	d031      	beq.n	800b08c <pow+0xdc>
 800b028:	a804      	add	r0, sp, #16
 800b02a:	f001 f99e 	bl	800c36a <matherr>
 800b02e:	bb38      	cbnz	r0, 800b080 <pow+0xd0>
 800b030:	e058      	b.n	800b0e4 <pow+0x134>
 800b032:	f04f 0a00 	mov.w	sl, #0
 800b036:	f04f 0b00 	mov.w	fp, #0
 800b03a:	4652      	mov	r2, sl
 800b03c:	465b      	mov	r3, fp
 800b03e:	4640      	mov	r0, r8
 800b040:	4649      	mov	r1, r9
 800b042:	f7f5 fca9 	bl	8000998 <__aeabi_dcmpeq>
 800b046:	2800      	cmp	r0, #0
 800b048:	d051      	beq.n	800b0ee <pow+0x13e>
 800b04a:	4652      	mov	r2, sl
 800b04c:	465b      	mov	r3, fp
 800b04e:	4620      	mov	r0, r4
 800b050:	4629      	mov	r1, r5
 800b052:	f7f5 fca1 	bl	8000998 <__aeabi_dcmpeq>
 800b056:	4606      	mov	r6, r0
 800b058:	b308      	cbz	r0, 800b09e <pow+0xee>
 800b05a:	2301      	movs	r3, #1
 800b05c:	9304      	str	r3, [sp, #16]
 800b05e:	4b7b      	ldr	r3, [pc, #492]	; (800b24c <pow+0x29c>)
 800b060:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b064:	9305      	str	r3, [sp, #20]
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b06c:	930c      	str	r3, [sp, #48]	; 0x30
 800b06e:	9b02      	ldr	r3, [sp, #8]
 800b070:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b074:	2b00      	cmp	r3, #0
 800b076:	d0d7      	beq.n	800b028 <pow+0x78>
 800b078:	2200      	movs	r2, #0
 800b07a:	4b75      	ldr	r3, [pc, #468]	; (800b250 <pow+0x2a0>)
 800b07c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b082:	b11b      	cbz	r3, 800b08c <pow+0xdc>
 800b084:	f7ff fb50 	bl	800a728 <__errno>
 800b088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b08a:	6003      	str	r3, [r0, #0]
 800b08c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800b090:	e9cd 3400 	strd	r3, r4, [sp]
 800b094:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b098:	b00f      	add	sp, #60	; 0x3c
 800b09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09e:	4620      	mov	r0, r4
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	f001 f95c 	bl	800c35e <finite>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d0f4      	beq.n	800b094 <pow+0xe4>
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	465b      	mov	r3, fp
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	f7f5 fc7b 	bl	80009ac <__aeabi_dcmplt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d0ec      	beq.n	800b094 <pow+0xe4>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	9304      	str	r3, [sp, #16]
 800b0be:	4b63      	ldr	r3, [pc, #396]	; (800b24c <pow+0x29c>)
 800b0c0:	960c      	str	r6, [sp, #48]	; 0x30
 800b0c2:	9305      	str	r3, [sp, #20]
 800b0c4:	f997 3000 	ldrsb.w	r3, [r7]
 800b0c8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b0cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b0d0:	b913      	cbnz	r3, 800b0d8 <pow+0x128>
 800b0d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b0d6:	e7a7      	b.n	800b028 <pow+0x78>
 800b0d8:	2000      	movs	r0, #0
 800b0da:	495e      	ldr	r1, [pc, #376]	; (800b254 <pow+0x2a4>)
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b0e2:	d1a1      	bne.n	800b028 <pow+0x78>
 800b0e4:	f7ff fb20 	bl	800a728 <__errno>
 800b0e8:	2321      	movs	r3, #33	; 0x21
 800b0ea:	6003      	str	r3, [r0, #0]
 800b0ec:	e7c8      	b.n	800b080 <pow+0xd0>
 800b0ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0f2:	f001 f934 	bl	800c35e <finite>
 800b0f6:	9002      	str	r0, [sp, #8]
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d177      	bne.n	800b1ec <pow+0x23c>
 800b0fc:	4640      	mov	r0, r8
 800b0fe:	4649      	mov	r1, r9
 800b100:	f001 f92d 	bl	800c35e <finite>
 800b104:	2800      	cmp	r0, #0
 800b106:	d071      	beq.n	800b1ec <pow+0x23c>
 800b108:	4620      	mov	r0, r4
 800b10a:	4629      	mov	r1, r5
 800b10c:	f001 f927 	bl	800c35e <finite>
 800b110:	2800      	cmp	r0, #0
 800b112:	d06b      	beq.n	800b1ec <pow+0x23c>
 800b114:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b118:	4619      	mov	r1, r3
 800b11a:	4610      	mov	r0, r2
 800b11c:	f7f5 fc6e 	bl	80009fc <__aeabi_dcmpun>
 800b120:	f997 7000 	ldrsb.w	r7, [r7]
 800b124:	4b49      	ldr	r3, [pc, #292]	; (800b24c <pow+0x29c>)
 800b126:	b1a0      	cbz	r0, 800b152 <pow+0x1a2>
 800b128:	2201      	movs	r2, #1
 800b12a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b12e:	9b02      	ldr	r3, [sp, #8]
 800b130:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b134:	930c      	str	r3, [sp, #48]	; 0x30
 800b136:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b13a:	2f00      	cmp	r7, #0
 800b13c:	d0c9      	beq.n	800b0d2 <pow+0x122>
 800b13e:	4652      	mov	r2, sl
 800b140:	465b      	mov	r3, fp
 800b142:	4650      	mov	r0, sl
 800b144:	4659      	mov	r1, fp
 800b146:	f7f5 fae9 	bl	800071c <__aeabi_ddiv>
 800b14a:	2f02      	cmp	r7, #2
 800b14c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b150:	e7c7      	b.n	800b0e2 <pow+0x132>
 800b152:	2203      	movs	r2, #3
 800b154:	900c      	str	r0, [sp, #48]	; 0x30
 800b156:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b15a:	4620      	mov	r0, r4
 800b15c:	4629      	mov	r1, r5
 800b15e:	2200      	movs	r2, #0
 800b160:	4b3d      	ldr	r3, [pc, #244]	; (800b258 <pow+0x2a8>)
 800b162:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b166:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b16a:	f7f5 f9ad 	bl	80004c8 <__aeabi_dmul>
 800b16e:	4604      	mov	r4, r0
 800b170:	460d      	mov	r5, r1
 800b172:	bb17      	cbnz	r7, 800b1ba <pow+0x20a>
 800b174:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b178:	4b38      	ldr	r3, [pc, #224]	; (800b25c <pow+0x2ac>)
 800b17a:	4640      	mov	r0, r8
 800b17c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b180:	4649      	mov	r1, r9
 800b182:	4652      	mov	r2, sl
 800b184:	465b      	mov	r3, fp
 800b186:	f7f5 fc11 	bl	80009ac <__aeabi_dcmplt>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d054      	beq.n	800b238 <pow+0x288>
 800b18e:	4620      	mov	r0, r4
 800b190:	4629      	mov	r1, r5
 800b192:	f001 f8f3 	bl	800c37c <rint>
 800b196:	4622      	mov	r2, r4
 800b198:	462b      	mov	r3, r5
 800b19a:	f7f5 fbfd 	bl	8000998 <__aeabi_dcmpeq>
 800b19e:	b920      	cbnz	r0, 800b1aa <pow+0x1fa>
 800b1a0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b1a4:	4b2e      	ldr	r3, [pc, #184]	; (800b260 <pow+0x2b0>)
 800b1a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b1aa:	f996 3000 	ldrsb.w	r3, [r6]
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d142      	bne.n	800b238 <pow+0x288>
 800b1b2:	f7ff fab9 	bl	800a728 <__errno>
 800b1b6:	2322      	movs	r3, #34	; 0x22
 800b1b8:	e797      	b.n	800b0ea <pow+0x13a>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	4b29      	ldr	r3, [pc, #164]	; (800b264 <pow+0x2b4>)
 800b1be:	4640      	mov	r0, r8
 800b1c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b1c4:	4649      	mov	r1, r9
 800b1c6:	4652      	mov	r2, sl
 800b1c8:	465b      	mov	r3, fp
 800b1ca:	f7f5 fbef 	bl	80009ac <__aeabi_dcmplt>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d0eb      	beq.n	800b1aa <pow+0x1fa>
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	f001 f8d1 	bl	800c37c <rint>
 800b1da:	4622      	mov	r2, r4
 800b1dc:	462b      	mov	r3, r5
 800b1de:	f7f5 fbdb 	bl	8000998 <__aeabi_dcmpeq>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d1e1      	bne.n	800b1aa <pow+0x1fa>
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	4b1a      	ldr	r3, [pc, #104]	; (800b254 <pow+0x2a4>)
 800b1ea:	e7dc      	b.n	800b1a6 <pow+0x1f6>
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f7f5 fbd0 	bl	8000998 <__aeabi_dcmpeq>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	f43f af4b 	beq.w	800b094 <pow+0xe4>
 800b1fe:	4640      	mov	r0, r8
 800b200:	4649      	mov	r1, r9
 800b202:	f001 f8ac 	bl	800c35e <finite>
 800b206:	2800      	cmp	r0, #0
 800b208:	f43f af44 	beq.w	800b094 <pow+0xe4>
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f001 f8a5 	bl	800c35e <finite>
 800b214:	2800      	cmp	r0, #0
 800b216:	f43f af3d 	beq.w	800b094 <pow+0xe4>
 800b21a:	2304      	movs	r3, #4
 800b21c:	9304      	str	r3, [sp, #16]
 800b21e:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <pow+0x29c>)
 800b220:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b224:	9305      	str	r3, [sp, #20]
 800b226:	2300      	movs	r3, #0
 800b228:	2400      	movs	r4, #0
 800b22a:	930c      	str	r3, [sp, #48]	; 0x30
 800b22c:	2300      	movs	r3, #0
 800b22e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b232:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800b236:	e7b8      	b.n	800b1aa <pow+0x1fa>
 800b238:	a804      	add	r0, sp, #16
 800b23a:	f001 f896 	bl	800c36a <matherr>
 800b23e:	2800      	cmp	r0, #0
 800b240:	f47f af1e 	bne.w	800b080 <pow+0xd0>
 800b244:	e7b5      	b.n	800b1b2 <pow+0x202>
 800b246:	bf00      	nop
 800b248:	20000094 	.word	0x20000094
 800b24c:	0800ca4b 	.word	0x0800ca4b
 800b250:	3ff00000 	.word	0x3ff00000
 800b254:	fff00000 	.word	0xfff00000
 800b258:	3fe00000 	.word	0x3fe00000
 800b25c:	47efffff 	.word	0x47efffff
 800b260:	c7efffff 	.word	0xc7efffff
 800b264:	7ff00000 	.word	0x7ff00000

0800b268 <asinf>:
 800b268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b26a:	b08b      	sub	sp, #44	; 0x2c
 800b26c:	4604      	mov	r4, r0
 800b26e:	f000 fe4d 	bl	800bf0c <__ieee754_asinf>
 800b272:	4e21      	ldr	r6, [pc, #132]	; (800b2f8 <asinf+0x90>)
 800b274:	4605      	mov	r5, r0
 800b276:	f996 3000 	ldrsb.w	r3, [r6]
 800b27a:	3301      	adds	r3, #1
 800b27c:	d038      	beq.n	800b2f0 <asinf+0x88>
 800b27e:	4621      	mov	r1, r4
 800b280:	4620      	mov	r0, r4
 800b282:	f7f5 ff15 	bl	80010b0 <__aeabi_fcmpun>
 800b286:	4607      	mov	r7, r0
 800b288:	2800      	cmp	r0, #0
 800b28a:	d131      	bne.n	800b2f0 <asinf+0x88>
 800b28c:	4620      	mov	r0, r4
 800b28e:	f001 fa79 	bl	800c784 <fabsf>
 800b292:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b296:	f7f5 ff01 	bl	800109c <__aeabi_fcmpgt>
 800b29a:	b348      	cbz	r0, 800b2f0 <asinf+0x88>
 800b29c:	2301      	movs	r3, #1
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	4b16      	ldr	r3, [pc, #88]	; (800b2fc <asinf+0x94>)
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	9301      	str	r3, [sp, #4]
 800b2a6:	9708      	str	r7, [sp, #32]
 800b2a8:	f7f5 f8b6 	bl	8000418 <__aeabi_f2d>
 800b2ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2b4:	4812      	ldr	r0, [pc, #72]	; (800b300 <asinf+0x98>)
 800b2b6:	f001 f85b 	bl	800c370 <nan>
 800b2ba:	f996 3000 	ldrsb.w	r3, [r6]
 800b2be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d104      	bne.n	800b2d0 <asinf+0x68>
 800b2c6:	f7ff fa2f 	bl	800a728 <__errno>
 800b2ca:	2321      	movs	r3, #33	; 0x21
 800b2cc:	6003      	str	r3, [r0, #0]
 800b2ce:	e004      	b.n	800b2da <asinf+0x72>
 800b2d0:	4668      	mov	r0, sp
 800b2d2:	f001 f84a 	bl	800c36a <matherr>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d0f5      	beq.n	800b2c6 <asinf+0x5e>
 800b2da:	9b08      	ldr	r3, [sp, #32]
 800b2dc:	b11b      	cbz	r3, 800b2e6 <asinf+0x7e>
 800b2de:	f7ff fa23 	bl	800a728 <__errno>
 800b2e2:	9b08      	ldr	r3, [sp, #32]
 800b2e4:	6003      	str	r3, [r0, #0]
 800b2e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2ea:	f7f5 fbbd 	bl	8000a68 <__aeabi_d2f>
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	b00b      	add	sp, #44	; 0x2c
 800b2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	20000094 	.word	0x20000094
 800b2fc:	0800ca4f 	.word	0x0800ca4f
 800b300:	0800ca1d 	.word	0x0800ca1d

0800b304 <atan2f>:
 800b304:	f000 bf44 	b.w	800c190 <__ieee754_atan2f>

0800b308 <sqrtf>:
 800b308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b30a:	b08b      	sub	sp, #44	; 0x2c
 800b30c:	4604      	mov	r4, r0
 800b30e:	f000 ffcf 	bl	800c2b0 <__ieee754_sqrtf>
 800b312:	4b20      	ldr	r3, [pc, #128]	; (800b394 <sqrtf+0x8c>)
 800b314:	4606      	mov	r6, r0
 800b316:	f993 5000 	ldrsb.w	r5, [r3]
 800b31a:	1c6b      	adds	r3, r5, #1
 800b31c:	d02a      	beq.n	800b374 <sqrtf+0x6c>
 800b31e:	4621      	mov	r1, r4
 800b320:	4620      	mov	r0, r4
 800b322:	f7f5 fec5 	bl	80010b0 <__aeabi_fcmpun>
 800b326:	4607      	mov	r7, r0
 800b328:	bb20      	cbnz	r0, 800b374 <sqrtf+0x6c>
 800b32a:	2100      	movs	r1, #0
 800b32c:	4620      	mov	r0, r4
 800b32e:	f7f5 fe97 	bl	8001060 <__aeabi_fcmplt>
 800b332:	b1f8      	cbz	r0, 800b374 <sqrtf+0x6c>
 800b334:	2301      	movs	r3, #1
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	4b17      	ldr	r3, [pc, #92]	; (800b398 <sqrtf+0x90>)
 800b33a:	4620      	mov	r0, r4
 800b33c:	9301      	str	r3, [sp, #4]
 800b33e:	9708      	str	r7, [sp, #32]
 800b340:	f7f5 f86a 	bl	8000418 <__aeabi_f2d>
 800b344:	2200      	movs	r2, #0
 800b346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b34a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b34e:	2300      	movs	r3, #0
 800b350:	b99d      	cbnz	r5, 800b37a <sqrtf+0x72>
 800b352:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b356:	4668      	mov	r0, sp
 800b358:	f001 f807 	bl	800c36a <matherr>
 800b35c:	b1a8      	cbz	r0, 800b38a <sqrtf+0x82>
 800b35e:	9b08      	ldr	r3, [sp, #32]
 800b360:	b11b      	cbz	r3, 800b36a <sqrtf+0x62>
 800b362:	f7ff f9e1 	bl	800a728 <__errno>
 800b366:	9b08      	ldr	r3, [sp, #32]
 800b368:	6003      	str	r3, [r0, #0]
 800b36a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b36e:	f7f5 fb7b 	bl	8000a68 <__aeabi_d2f>
 800b372:	4606      	mov	r6, r0
 800b374:	4630      	mov	r0, r6
 800b376:	b00b      	add	sp, #44	; 0x2c
 800b378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b37a:	4610      	mov	r0, r2
 800b37c:	4619      	mov	r1, r3
 800b37e:	f7f5 f9cd 	bl	800071c <__aeabi_ddiv>
 800b382:	2d02      	cmp	r5, #2
 800b384:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b388:	d1e5      	bne.n	800b356 <sqrtf+0x4e>
 800b38a:	f7ff f9cd 	bl	800a728 <__errno>
 800b38e:	2321      	movs	r3, #33	; 0x21
 800b390:	6003      	str	r3, [r0, #0]
 800b392:	e7e4      	b.n	800b35e <sqrtf+0x56>
 800b394:	20000094 	.word	0x20000094
 800b398:	0800ca55 	.word	0x0800ca55
 800b39c:	00000000 	.word	0x00000000

0800b3a0 <__ieee754_pow>:
 800b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	b091      	sub	sp, #68	; 0x44
 800b3a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3aa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800b3ae:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b3b2:	ea55 0302 	orrs.w	r3, r5, r2
 800b3b6:	4607      	mov	r7, r0
 800b3b8:	4688      	mov	r8, r1
 800b3ba:	f000 84b7 	beq.w	800bd2c <__ieee754_pow+0x98c>
 800b3be:	4b80      	ldr	r3, [pc, #512]	; (800b5c0 <__ieee754_pow+0x220>)
 800b3c0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b3c4:	429c      	cmp	r4, r3
 800b3c6:	4689      	mov	r9, r1
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	dc09      	bgt.n	800b3e0 <__ieee754_pow+0x40>
 800b3cc:	d103      	bne.n	800b3d6 <__ieee754_pow+0x36>
 800b3ce:	b938      	cbnz	r0, 800b3e0 <__ieee754_pow+0x40>
 800b3d0:	42a5      	cmp	r5, r4
 800b3d2:	dc0d      	bgt.n	800b3f0 <__ieee754_pow+0x50>
 800b3d4:	e001      	b.n	800b3da <__ieee754_pow+0x3a>
 800b3d6:	429d      	cmp	r5, r3
 800b3d8:	dc02      	bgt.n	800b3e0 <__ieee754_pow+0x40>
 800b3da:	429d      	cmp	r5, r3
 800b3dc:	d10e      	bne.n	800b3fc <__ieee754_pow+0x5c>
 800b3de:	b16a      	cbz	r2, 800b3fc <__ieee754_pow+0x5c>
 800b3e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b3e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b3e8:	ea54 030a 	orrs.w	r3, r4, sl
 800b3ec:	f000 849e 	beq.w	800bd2c <__ieee754_pow+0x98c>
 800b3f0:	4874      	ldr	r0, [pc, #464]	; (800b5c4 <__ieee754_pow+0x224>)
 800b3f2:	b011      	add	sp, #68	; 0x44
 800b3f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	f000 bfba 	b.w	800c370 <nan>
 800b3fc:	f1b9 0f00 	cmp.w	r9, #0
 800b400:	da53      	bge.n	800b4aa <__ieee754_pow+0x10a>
 800b402:	4b71      	ldr	r3, [pc, #452]	; (800b5c8 <__ieee754_pow+0x228>)
 800b404:	429d      	cmp	r5, r3
 800b406:	dc4e      	bgt.n	800b4a6 <__ieee754_pow+0x106>
 800b408:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b40c:	429d      	cmp	r5, r3
 800b40e:	dd4c      	ble.n	800b4aa <__ieee754_pow+0x10a>
 800b410:	152b      	asrs	r3, r5, #20
 800b412:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b416:	2b14      	cmp	r3, #20
 800b418:	dd28      	ble.n	800b46c <__ieee754_pow+0xcc>
 800b41a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b41e:	fa22 f103 	lsr.w	r1, r2, r3
 800b422:	fa01 f303 	lsl.w	r3, r1, r3
 800b426:	4293      	cmp	r3, r2
 800b428:	d13f      	bne.n	800b4aa <__ieee754_pow+0x10a>
 800b42a:	f001 0101 	and.w	r1, r1, #1
 800b42e:	f1c1 0302 	rsb	r3, r1, #2
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	2a00      	cmp	r2, #0
 800b436:	d15c      	bne.n	800b4f2 <__ieee754_pow+0x152>
 800b438:	4b61      	ldr	r3, [pc, #388]	; (800b5c0 <__ieee754_pow+0x220>)
 800b43a:	429d      	cmp	r5, r3
 800b43c:	d126      	bne.n	800b48c <__ieee754_pow+0xec>
 800b43e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b442:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b446:	ea53 030a 	orrs.w	r3, r3, sl
 800b44a:	f000 846f 	beq.w	800bd2c <__ieee754_pow+0x98c>
 800b44e:	4b5f      	ldr	r3, [pc, #380]	; (800b5cc <__ieee754_pow+0x22c>)
 800b450:	429c      	cmp	r4, r3
 800b452:	dd2c      	ble.n	800b4ae <__ieee754_pow+0x10e>
 800b454:	2e00      	cmp	r6, #0
 800b456:	f280 846f 	bge.w	800bd38 <__ieee754_pow+0x998>
 800b45a:	f04f 0b00 	mov.w	fp, #0
 800b45e:	f04f 0c00 	mov.w	ip, #0
 800b462:	4658      	mov	r0, fp
 800b464:	4661      	mov	r1, ip
 800b466:	b011      	add	sp, #68	; 0x44
 800b468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46c:	2a00      	cmp	r2, #0
 800b46e:	d13e      	bne.n	800b4ee <__ieee754_pow+0x14e>
 800b470:	f1c3 0314 	rsb	r3, r3, #20
 800b474:	fa45 f103 	asr.w	r1, r5, r3
 800b478:	fa01 f303 	lsl.w	r3, r1, r3
 800b47c:	42ab      	cmp	r3, r5
 800b47e:	f040 8463 	bne.w	800bd48 <__ieee754_pow+0x9a8>
 800b482:	f001 0101 	and.w	r1, r1, #1
 800b486:	f1c1 0302 	rsb	r3, r1, #2
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	4b50      	ldr	r3, [pc, #320]	; (800b5d0 <__ieee754_pow+0x230>)
 800b48e:	429d      	cmp	r5, r3
 800b490:	d114      	bne.n	800b4bc <__ieee754_pow+0x11c>
 800b492:	2e00      	cmp	r6, #0
 800b494:	f280 8454 	bge.w	800bd40 <__ieee754_pow+0x9a0>
 800b498:	463a      	mov	r2, r7
 800b49a:	4643      	mov	r3, r8
 800b49c:	2000      	movs	r0, #0
 800b49e:	494c      	ldr	r1, [pc, #304]	; (800b5d0 <__ieee754_pow+0x230>)
 800b4a0:	f7f5 f93c 	bl	800071c <__aeabi_ddiv>
 800b4a4:	e013      	b.n	800b4ce <__ieee754_pow+0x12e>
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	e7c3      	b.n	800b432 <__ieee754_pow+0x92>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e7c1      	b.n	800b432 <__ieee754_pow+0x92>
 800b4ae:	2e00      	cmp	r6, #0
 800b4b0:	dad3      	bge.n	800b45a <__ieee754_pow+0xba>
 800b4b2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b4b6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b4ba:	e7d2      	b.n	800b462 <__ieee754_pow+0xc2>
 800b4bc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800b4c0:	d108      	bne.n	800b4d4 <__ieee754_pow+0x134>
 800b4c2:	463a      	mov	r2, r7
 800b4c4:	4643      	mov	r3, r8
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	4641      	mov	r1, r8
 800b4ca:	f7f4 fffd 	bl	80004c8 <__aeabi_dmul>
 800b4ce:	4683      	mov	fp, r0
 800b4d0:	468c      	mov	ip, r1
 800b4d2:	e7c6      	b.n	800b462 <__ieee754_pow+0xc2>
 800b4d4:	4b3f      	ldr	r3, [pc, #252]	; (800b5d4 <__ieee754_pow+0x234>)
 800b4d6:	429e      	cmp	r6, r3
 800b4d8:	d10b      	bne.n	800b4f2 <__ieee754_pow+0x152>
 800b4da:	f1b9 0f00 	cmp.w	r9, #0
 800b4de:	db08      	blt.n	800b4f2 <__ieee754_pow+0x152>
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	4641      	mov	r1, r8
 800b4e4:	b011      	add	sp, #68	; 0x44
 800b4e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ea:	f000 bc63 	b.w	800bdb4 <__ieee754_sqrt>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	4638      	mov	r0, r7
 800b4f4:	4641      	mov	r1, r8
 800b4f6:	f000 ff2e 	bl	800c356 <fabs>
 800b4fa:	4683      	mov	fp, r0
 800b4fc:	468c      	mov	ip, r1
 800b4fe:	f1ba 0f00 	cmp.w	sl, #0
 800b502:	d12b      	bne.n	800b55c <__ieee754_pow+0x1bc>
 800b504:	b124      	cbz	r4, 800b510 <__ieee754_pow+0x170>
 800b506:	4b32      	ldr	r3, [pc, #200]	; (800b5d0 <__ieee754_pow+0x230>)
 800b508:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d125      	bne.n	800b55c <__ieee754_pow+0x1bc>
 800b510:	2e00      	cmp	r6, #0
 800b512:	da07      	bge.n	800b524 <__ieee754_pow+0x184>
 800b514:	465a      	mov	r2, fp
 800b516:	4663      	mov	r3, ip
 800b518:	2000      	movs	r0, #0
 800b51a:	492d      	ldr	r1, [pc, #180]	; (800b5d0 <__ieee754_pow+0x230>)
 800b51c:	f7f5 f8fe 	bl	800071c <__aeabi_ddiv>
 800b520:	4683      	mov	fp, r0
 800b522:	468c      	mov	ip, r1
 800b524:	f1b9 0f00 	cmp.w	r9, #0
 800b528:	da9b      	bge.n	800b462 <__ieee754_pow+0xc2>
 800b52a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b52e:	9b00      	ldr	r3, [sp, #0]
 800b530:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b534:	4323      	orrs	r3, r4
 800b536:	d108      	bne.n	800b54a <__ieee754_pow+0x1aa>
 800b538:	465a      	mov	r2, fp
 800b53a:	4663      	mov	r3, ip
 800b53c:	4658      	mov	r0, fp
 800b53e:	4661      	mov	r1, ip
 800b540:	f7f4 fe0a 	bl	8000158 <__aeabi_dsub>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	e7aa      	b.n	800b4a0 <__ieee754_pow+0x100>
 800b54a:	9b00      	ldr	r3, [sp, #0]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d188      	bne.n	800b462 <__ieee754_pow+0xc2>
 800b550:	4658      	mov	r0, fp
 800b552:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b556:	4683      	mov	fp, r0
 800b558:	469c      	mov	ip, r3
 800b55a:	e782      	b.n	800b462 <__ieee754_pow+0xc2>
 800b55c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800b560:	f109 33ff 	add.w	r3, r9, #4294967295
 800b564:	930d      	str	r3, [sp, #52]	; 0x34
 800b566:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b568:	9b00      	ldr	r3, [sp, #0]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	d104      	bne.n	800b578 <__ieee754_pow+0x1d8>
 800b56e:	463a      	mov	r2, r7
 800b570:	4643      	mov	r3, r8
 800b572:	4638      	mov	r0, r7
 800b574:	4641      	mov	r1, r8
 800b576:	e7e3      	b.n	800b540 <__ieee754_pow+0x1a0>
 800b578:	4b17      	ldr	r3, [pc, #92]	; (800b5d8 <__ieee754_pow+0x238>)
 800b57a:	429d      	cmp	r5, r3
 800b57c:	f340 80fe 	ble.w	800b77c <__ieee754_pow+0x3dc>
 800b580:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b584:	429d      	cmp	r5, r3
 800b586:	dd0b      	ble.n	800b5a0 <__ieee754_pow+0x200>
 800b588:	4b10      	ldr	r3, [pc, #64]	; (800b5cc <__ieee754_pow+0x22c>)
 800b58a:	429c      	cmp	r4, r3
 800b58c:	dc0e      	bgt.n	800b5ac <__ieee754_pow+0x20c>
 800b58e:	2e00      	cmp	r6, #0
 800b590:	f6bf af63 	bge.w	800b45a <__ieee754_pow+0xba>
 800b594:	a308      	add	r3, pc, #32	; (adr r3, 800b5b8 <__ieee754_pow+0x218>)
 800b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59a:	4610      	mov	r0, r2
 800b59c:	4619      	mov	r1, r3
 800b59e:	e794      	b.n	800b4ca <__ieee754_pow+0x12a>
 800b5a0:	4b0e      	ldr	r3, [pc, #56]	; (800b5dc <__ieee754_pow+0x23c>)
 800b5a2:	429c      	cmp	r4, r3
 800b5a4:	ddf3      	ble.n	800b58e <__ieee754_pow+0x1ee>
 800b5a6:	4b0a      	ldr	r3, [pc, #40]	; (800b5d0 <__ieee754_pow+0x230>)
 800b5a8:	429c      	cmp	r4, r3
 800b5aa:	dd19      	ble.n	800b5e0 <__ieee754_pow+0x240>
 800b5ac:	2e00      	cmp	r6, #0
 800b5ae:	dcf1      	bgt.n	800b594 <__ieee754_pow+0x1f4>
 800b5b0:	e753      	b.n	800b45a <__ieee754_pow+0xba>
 800b5b2:	bf00      	nop
 800b5b4:	f3af 8000 	nop.w
 800b5b8:	8800759c 	.word	0x8800759c
 800b5bc:	7e37e43c 	.word	0x7e37e43c
 800b5c0:	7ff00000 	.word	0x7ff00000
 800b5c4:	0800ca1d 	.word	0x0800ca1d
 800b5c8:	433fffff 	.word	0x433fffff
 800b5cc:	3fefffff 	.word	0x3fefffff
 800b5d0:	3ff00000 	.word	0x3ff00000
 800b5d4:	3fe00000 	.word	0x3fe00000
 800b5d8:	41e00000 	.word	0x41e00000
 800b5dc:	3feffffe 	.word	0x3feffffe
 800b5e0:	4661      	mov	r1, ip
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	4b60      	ldr	r3, [pc, #384]	; (800b768 <__ieee754_pow+0x3c8>)
 800b5e6:	4658      	mov	r0, fp
 800b5e8:	f7f4 fdb6 	bl	8000158 <__aeabi_dsub>
 800b5ec:	a354      	add	r3, pc, #336	; (adr r3, 800b740 <__ieee754_pow+0x3a0>)
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	460d      	mov	r5, r1
 800b5f6:	f7f4 ff67 	bl	80004c8 <__aeabi_dmul>
 800b5fa:	a353      	add	r3, pc, #332	; (adr r3, 800b748 <__ieee754_pow+0x3a8>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	4606      	mov	r6, r0
 800b602:	460f      	mov	r7, r1
 800b604:	4620      	mov	r0, r4
 800b606:	4629      	mov	r1, r5
 800b608:	f7f4 ff5e 	bl	80004c8 <__aeabi_dmul>
 800b60c:	2200      	movs	r2, #0
 800b60e:	4682      	mov	sl, r0
 800b610:	468b      	mov	fp, r1
 800b612:	4b56      	ldr	r3, [pc, #344]	; (800b76c <__ieee754_pow+0x3cc>)
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f4 ff56 	bl	80004c8 <__aeabi_dmul>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	a14b      	add	r1, pc, #300	; (adr r1, 800b750 <__ieee754_pow+0x3b0>)
 800b622:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b626:	f7f4 fd97 	bl	8000158 <__aeabi_dsub>
 800b62a:	4622      	mov	r2, r4
 800b62c:	462b      	mov	r3, r5
 800b62e:	f7f4 ff4b 	bl	80004c8 <__aeabi_dmul>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	2000      	movs	r0, #0
 800b638:	494d      	ldr	r1, [pc, #308]	; (800b770 <__ieee754_pow+0x3d0>)
 800b63a:	f7f4 fd8d 	bl	8000158 <__aeabi_dsub>
 800b63e:	4622      	mov	r2, r4
 800b640:	462b      	mov	r3, r5
 800b642:	4680      	mov	r8, r0
 800b644:	4689      	mov	r9, r1
 800b646:	4620      	mov	r0, r4
 800b648:	4629      	mov	r1, r5
 800b64a:	f7f4 ff3d 	bl	80004c8 <__aeabi_dmul>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	4640      	mov	r0, r8
 800b654:	4649      	mov	r1, r9
 800b656:	f7f4 ff37 	bl	80004c8 <__aeabi_dmul>
 800b65a:	a33f      	add	r3, pc, #252	; (adr r3, 800b758 <__ieee754_pow+0x3b8>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f7f4 ff32 	bl	80004c8 <__aeabi_dmul>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4650      	mov	r0, sl
 800b66a:	4659      	mov	r1, fp
 800b66c:	f7f4 fd74 	bl	8000158 <__aeabi_dsub>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4604      	mov	r4, r0
 800b676:	460d      	mov	r5, r1
 800b678:	4630      	mov	r0, r6
 800b67a:	4639      	mov	r1, r7
 800b67c:	f7f4 fd6e 	bl	800015c <__adddf3>
 800b680:	2000      	movs	r0, #0
 800b682:	468b      	mov	fp, r1
 800b684:	4682      	mov	sl, r0
 800b686:	4632      	mov	r2, r6
 800b688:	463b      	mov	r3, r7
 800b68a:	f7f4 fd65 	bl	8000158 <__aeabi_dsub>
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 fd5f 	bl	8000158 <__aeabi_dsub>
 800b69a:	9b00      	ldr	r3, [sp, #0]
 800b69c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	f04f 0300 	mov.w	r3, #0
 800b6a6:	bf0c      	ite	eq
 800b6a8:	4c32      	ldreq	r4, [pc, #200]	; (800b774 <__ieee754_pow+0x3d4>)
 800b6aa:	4c2f      	ldrne	r4, [pc, #188]	; (800b768 <__ieee754_pow+0x3c8>)
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	e9cd 3400 	strd	r3, r4, [sp]
 800b6b2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b6b6:	2400      	movs	r4, #0
 800b6b8:	460f      	mov	r7, r1
 800b6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6be:	4622      	mov	r2, r4
 800b6c0:	462b      	mov	r3, r5
 800b6c2:	f7f4 fd49 	bl	8000158 <__aeabi_dsub>
 800b6c6:	4652      	mov	r2, sl
 800b6c8:	465b      	mov	r3, fp
 800b6ca:	f7f4 fefd 	bl	80004c8 <__aeabi_dmul>
 800b6ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6d2:	4680      	mov	r8, r0
 800b6d4:	4689      	mov	r9, r1
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	4639      	mov	r1, r7
 800b6da:	f7f4 fef5 	bl	80004c8 <__aeabi_dmul>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	4640      	mov	r0, r8
 800b6e4:	4649      	mov	r1, r9
 800b6e6:	f7f4 fd39 	bl	800015c <__adddf3>
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	4680      	mov	r8, r0
 800b6f0:	4689      	mov	r9, r1
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	4659      	mov	r1, fp
 800b6f6:	f7f4 fee7 	bl	80004c8 <__aeabi_dmul>
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	460d      	mov	r5, r1
 800b6fe:	460b      	mov	r3, r1
 800b700:	4602      	mov	r2, r0
 800b702:	4649      	mov	r1, r9
 800b704:	4640      	mov	r0, r8
 800b706:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b70a:	f7f4 fd27 	bl	800015c <__adddf3>
 800b70e:	4b1a      	ldr	r3, [pc, #104]	; (800b778 <__ieee754_pow+0x3d8>)
 800b710:	4682      	mov	sl, r0
 800b712:	4299      	cmp	r1, r3
 800b714:	460f      	mov	r7, r1
 800b716:	460e      	mov	r6, r1
 800b718:	f340 82e1 	ble.w	800bcde <__ieee754_pow+0x93e>
 800b71c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b720:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b724:	4303      	orrs	r3, r0
 800b726:	f000 81db 	beq.w	800bae0 <__ieee754_pow+0x740>
 800b72a:	a30d      	add	r3, pc, #52	; (adr r3, 800b760 <__ieee754_pow+0x3c0>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b734:	f7f4 fec8 	bl	80004c8 <__aeabi_dmul>
 800b738:	a309      	add	r3, pc, #36	; (adr r3, 800b760 <__ieee754_pow+0x3c0>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	e6c4      	b.n	800b4ca <__ieee754_pow+0x12a>
 800b740:	60000000 	.word	0x60000000
 800b744:	3ff71547 	.word	0x3ff71547
 800b748:	f85ddf44 	.word	0xf85ddf44
 800b74c:	3e54ae0b 	.word	0x3e54ae0b
 800b750:	55555555 	.word	0x55555555
 800b754:	3fd55555 	.word	0x3fd55555
 800b758:	652b82fe 	.word	0x652b82fe
 800b75c:	3ff71547 	.word	0x3ff71547
 800b760:	8800759c 	.word	0x8800759c
 800b764:	7e37e43c 	.word	0x7e37e43c
 800b768:	3ff00000 	.word	0x3ff00000
 800b76c:	3fd00000 	.word	0x3fd00000
 800b770:	3fe00000 	.word	0x3fe00000
 800b774:	bff00000 	.word	0xbff00000
 800b778:	408fffff 	.word	0x408fffff
 800b77c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b780:	f04f 0200 	mov.w	r2, #0
 800b784:	da08      	bge.n	800b798 <__ieee754_pow+0x3f8>
 800b786:	4658      	mov	r0, fp
 800b788:	4bcd      	ldr	r3, [pc, #820]	; (800bac0 <__ieee754_pow+0x720>)
 800b78a:	4661      	mov	r1, ip
 800b78c:	f7f4 fe9c 	bl	80004c8 <__aeabi_dmul>
 800b790:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b794:	4683      	mov	fp, r0
 800b796:	460c      	mov	r4, r1
 800b798:	1523      	asrs	r3, r4, #20
 800b79a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b79e:	4413      	add	r3, r2
 800b7a0:	930c      	str	r3, [sp, #48]	; 0x30
 800b7a2:	4bc8      	ldr	r3, [pc, #800]	; (800bac4 <__ieee754_pow+0x724>)
 800b7a4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b7a8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b7ac:	429c      	cmp	r4, r3
 800b7ae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b7b2:	dd08      	ble.n	800b7c6 <__ieee754_pow+0x426>
 800b7b4:	4bc4      	ldr	r3, [pc, #784]	; (800bac8 <__ieee754_pow+0x728>)
 800b7b6:	429c      	cmp	r4, r3
 800b7b8:	f340 815b 	ble.w	800ba72 <__ieee754_pow+0x6d2>
 800b7bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	930c      	str	r3, [sp, #48]	; 0x30
 800b7c6:	f04f 0800 	mov.w	r8, #0
 800b7ca:	4658      	mov	r0, fp
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	4bbf      	ldr	r3, [pc, #764]	; (800bacc <__ieee754_pow+0x72c>)
 800b7d0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800b7d4:	444b      	add	r3, r9
 800b7d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b7da:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	4623      	mov	r3, r4
 800b7e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b7e6:	f7f4 fcb7 	bl	8000158 <__aeabi_dsub>
 800b7ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	460f      	mov	r7, r1
 800b7f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7f6:	f7f4 fcb1 	bl	800015c <__adddf3>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	2000      	movs	r0, #0
 800b800:	49b3      	ldr	r1, [pc, #716]	; (800bad0 <__ieee754_pow+0x730>)
 800b802:	f7f4 ff8b 	bl	800071c <__aeabi_ddiv>
 800b806:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b80a:	4602      	mov	r2, r0
 800b80c:	460b      	mov	r3, r1
 800b80e:	4630      	mov	r0, r6
 800b810:	4639      	mov	r1, r7
 800b812:	f7f4 fe59 	bl	80004c8 <__aeabi_dmul>
 800b816:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b81a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b81e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b822:	2300      	movs	r3, #0
 800b824:	2200      	movs	r2, #0
 800b826:	106d      	asrs	r5, r5, #1
 800b828:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b82c:	9304      	str	r3, [sp, #16]
 800b82e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b832:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b836:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800b83a:	4650      	mov	r0, sl
 800b83c:	4659      	mov	r1, fp
 800b83e:	4614      	mov	r4, r2
 800b840:	461d      	mov	r5, r3
 800b842:	f7f4 fe41 	bl	80004c8 <__aeabi_dmul>
 800b846:	4602      	mov	r2, r0
 800b848:	460b      	mov	r3, r1
 800b84a:	4630      	mov	r0, r6
 800b84c:	4639      	mov	r1, r7
 800b84e:	f7f4 fc83 	bl	8000158 <__aeabi_dsub>
 800b852:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b856:	4606      	mov	r6, r0
 800b858:	460f      	mov	r7, r1
 800b85a:	4620      	mov	r0, r4
 800b85c:	4629      	mov	r1, r5
 800b85e:	f7f4 fc7b 	bl	8000158 <__aeabi_dsub>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b86a:	f7f4 fc75 	bl	8000158 <__aeabi_dsub>
 800b86e:	4652      	mov	r2, sl
 800b870:	465b      	mov	r3, fp
 800b872:	f7f4 fe29 	bl	80004c8 <__aeabi_dmul>
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	4630      	mov	r0, r6
 800b87c:	4639      	mov	r1, r7
 800b87e:	f7f4 fc6b 	bl	8000158 <__aeabi_dsub>
 800b882:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b886:	f7f4 fe1f 	bl	80004c8 <__aeabi_dmul>
 800b88a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b88e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b892:	4610      	mov	r0, r2
 800b894:	4619      	mov	r1, r3
 800b896:	f7f4 fe17 	bl	80004c8 <__aeabi_dmul>
 800b89a:	a377      	add	r3, pc, #476	; (adr r3, 800ba78 <__ieee754_pow+0x6d8>)
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	460d      	mov	r5, r1
 800b8a4:	f7f4 fe10 	bl	80004c8 <__aeabi_dmul>
 800b8a8:	a375      	add	r3, pc, #468	; (adr r3, 800ba80 <__ieee754_pow+0x6e0>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	f7f4 fc55 	bl	800015c <__adddf3>
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	f7f4 fe07 	bl	80004c8 <__aeabi_dmul>
 800b8ba:	a373      	add	r3, pc, #460	; (adr r3, 800ba88 <__ieee754_pow+0x6e8>)
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f7f4 fc4c 	bl	800015c <__adddf3>
 800b8c4:	4622      	mov	r2, r4
 800b8c6:	462b      	mov	r3, r5
 800b8c8:	f7f4 fdfe 	bl	80004c8 <__aeabi_dmul>
 800b8cc:	a370      	add	r3, pc, #448	; (adr r3, 800ba90 <__ieee754_pow+0x6f0>)
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f7f4 fc43 	bl	800015c <__adddf3>
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	462b      	mov	r3, r5
 800b8da:	f7f4 fdf5 	bl	80004c8 <__aeabi_dmul>
 800b8de:	a36e      	add	r3, pc, #440	; (adr r3, 800ba98 <__ieee754_pow+0x6f8>)
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	f7f4 fc3a 	bl	800015c <__adddf3>
 800b8e8:	4622      	mov	r2, r4
 800b8ea:	462b      	mov	r3, r5
 800b8ec:	f7f4 fdec 	bl	80004c8 <__aeabi_dmul>
 800b8f0:	a36b      	add	r3, pc, #428	; (adr r3, 800baa0 <__ieee754_pow+0x700>)
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	f7f4 fc31 	bl	800015c <__adddf3>
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	460f      	mov	r7, r1
 800b900:	462b      	mov	r3, r5
 800b902:	4620      	mov	r0, r4
 800b904:	4629      	mov	r1, r5
 800b906:	f7f4 fddf 	bl	80004c8 <__aeabi_dmul>
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	4630      	mov	r0, r6
 800b910:	4639      	mov	r1, r7
 800b912:	f7f4 fdd9 	bl	80004c8 <__aeabi_dmul>
 800b916:	4604      	mov	r4, r0
 800b918:	460d      	mov	r5, r1
 800b91a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b91e:	4652      	mov	r2, sl
 800b920:	465b      	mov	r3, fp
 800b922:	f7f4 fc1b 	bl	800015c <__adddf3>
 800b926:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b92a:	f7f4 fdcd 	bl	80004c8 <__aeabi_dmul>
 800b92e:	4622      	mov	r2, r4
 800b930:	462b      	mov	r3, r5
 800b932:	f7f4 fc13 	bl	800015c <__adddf3>
 800b936:	4652      	mov	r2, sl
 800b938:	4606      	mov	r6, r0
 800b93a:	460f      	mov	r7, r1
 800b93c:	465b      	mov	r3, fp
 800b93e:	4650      	mov	r0, sl
 800b940:	4659      	mov	r1, fp
 800b942:	f7f4 fdc1 	bl	80004c8 <__aeabi_dmul>
 800b946:	2200      	movs	r2, #0
 800b948:	4b62      	ldr	r3, [pc, #392]	; (800bad4 <__ieee754_pow+0x734>)
 800b94a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b94e:	f7f4 fc05 	bl	800015c <__adddf3>
 800b952:	4632      	mov	r2, r6
 800b954:	463b      	mov	r3, r7
 800b956:	f7f4 fc01 	bl	800015c <__adddf3>
 800b95a:	9804      	ldr	r0, [sp, #16]
 800b95c:	460d      	mov	r5, r1
 800b95e:	4604      	mov	r4, r0
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4650      	mov	r0, sl
 800b966:	4659      	mov	r1, fp
 800b968:	f7f4 fdae 	bl	80004c8 <__aeabi_dmul>
 800b96c:	2200      	movs	r2, #0
 800b96e:	4682      	mov	sl, r0
 800b970:	468b      	mov	fp, r1
 800b972:	4b58      	ldr	r3, [pc, #352]	; (800bad4 <__ieee754_pow+0x734>)
 800b974:	4620      	mov	r0, r4
 800b976:	4629      	mov	r1, r5
 800b978:	f7f4 fbee 	bl	8000158 <__aeabi_dsub>
 800b97c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b980:	f7f4 fbea 	bl	8000158 <__aeabi_dsub>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4630      	mov	r0, r6
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f4 fbe4 	bl	8000158 <__aeabi_dsub>
 800b990:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b994:	f7f4 fd98 	bl	80004c8 <__aeabi_dmul>
 800b998:	4622      	mov	r2, r4
 800b99a:	4606      	mov	r6, r0
 800b99c:	460f      	mov	r7, r1
 800b99e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9a2:	462b      	mov	r3, r5
 800b9a4:	f7f4 fd90 	bl	80004c8 <__aeabi_dmul>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	f7f4 fbd4 	bl	800015c <__adddf3>
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	460f      	mov	r7, r1
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4650      	mov	r0, sl
 800b9be:	4659      	mov	r1, fp
 800b9c0:	f7f4 fbcc 	bl	800015c <__adddf3>
 800b9c4:	a338      	add	r3, pc, #224	; (adr r3, 800baa8 <__ieee754_pow+0x708>)
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	9804      	ldr	r0, [sp, #16]
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	f7f4 fd7a 	bl	80004c8 <__aeabi_dmul>
 800b9d4:	4652      	mov	r2, sl
 800b9d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b9da:	465b      	mov	r3, fp
 800b9dc:	4620      	mov	r0, r4
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f7f4 fbba 	bl	8000158 <__aeabi_dsub>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	4639      	mov	r1, r7
 800b9ec:	f7f4 fbb4 	bl	8000158 <__aeabi_dsub>
 800b9f0:	a32f      	add	r3, pc, #188	; (adr r3, 800bab0 <__ieee754_pow+0x710>)
 800b9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f6:	f7f4 fd67 	bl	80004c8 <__aeabi_dmul>
 800b9fa:	a32f      	add	r3, pc, #188	; (adr r3, 800bab8 <__ieee754_pow+0x718>)
 800b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba00:	4606      	mov	r6, r0
 800ba02:	460f      	mov	r7, r1
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	f7f4 fd5e 	bl	80004c8 <__aeabi_dmul>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	4630      	mov	r0, r6
 800ba12:	4639      	mov	r1, r7
 800ba14:	f7f4 fba2 	bl	800015c <__adddf3>
 800ba18:	4b2f      	ldr	r3, [pc, #188]	; (800bad8 <__ieee754_pow+0x738>)
 800ba1a:	444b      	add	r3, r9
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	f7f4 fb9c 	bl	800015c <__adddf3>
 800ba24:	4604      	mov	r4, r0
 800ba26:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba28:	460d      	mov	r5, r1
 800ba2a:	f7f4 fce3 	bl	80003f4 <__aeabi_i2d>
 800ba2e:	4606      	mov	r6, r0
 800ba30:	460f      	mov	r7, r1
 800ba32:	4b2a      	ldr	r3, [pc, #168]	; (800badc <__ieee754_pow+0x73c>)
 800ba34:	4622      	mov	r2, r4
 800ba36:	444b      	add	r3, r9
 800ba38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba42:	f7f4 fb8b 	bl	800015c <__adddf3>
 800ba46:	4642      	mov	r2, r8
 800ba48:	464b      	mov	r3, r9
 800ba4a:	f7f4 fb87 	bl	800015c <__adddf3>
 800ba4e:	4632      	mov	r2, r6
 800ba50:	463b      	mov	r3, r7
 800ba52:	f7f4 fb83 	bl	800015c <__adddf3>
 800ba56:	9804      	ldr	r0, [sp, #16]
 800ba58:	4632      	mov	r2, r6
 800ba5a:	463b      	mov	r3, r7
 800ba5c:	4682      	mov	sl, r0
 800ba5e:	468b      	mov	fp, r1
 800ba60:	f7f4 fb7a 	bl	8000158 <__aeabi_dsub>
 800ba64:	4642      	mov	r2, r8
 800ba66:	464b      	mov	r3, r9
 800ba68:	f7f4 fb76 	bl	8000158 <__aeabi_dsub>
 800ba6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba70:	e60b      	b.n	800b68a <__ieee754_pow+0x2ea>
 800ba72:	f04f 0801 	mov.w	r8, #1
 800ba76:	e6a8      	b.n	800b7ca <__ieee754_pow+0x42a>
 800ba78:	4a454eef 	.word	0x4a454eef
 800ba7c:	3fca7e28 	.word	0x3fca7e28
 800ba80:	93c9db65 	.word	0x93c9db65
 800ba84:	3fcd864a 	.word	0x3fcd864a
 800ba88:	a91d4101 	.word	0xa91d4101
 800ba8c:	3fd17460 	.word	0x3fd17460
 800ba90:	518f264d 	.word	0x518f264d
 800ba94:	3fd55555 	.word	0x3fd55555
 800ba98:	db6fabff 	.word	0xdb6fabff
 800ba9c:	3fdb6db6 	.word	0x3fdb6db6
 800baa0:	33333303 	.word	0x33333303
 800baa4:	3fe33333 	.word	0x3fe33333
 800baa8:	e0000000 	.word	0xe0000000
 800baac:	3feec709 	.word	0x3feec709
 800bab0:	dc3a03fd 	.word	0xdc3a03fd
 800bab4:	3feec709 	.word	0x3feec709
 800bab8:	145b01f5 	.word	0x145b01f5
 800babc:	be3e2fe0 	.word	0xbe3e2fe0
 800bac0:	43400000 	.word	0x43400000
 800bac4:	0003988e 	.word	0x0003988e
 800bac8:	000bb679 	.word	0x000bb679
 800bacc:	0800ca60 	.word	0x0800ca60
 800bad0:	3ff00000 	.word	0x3ff00000
 800bad4:	40080000 	.word	0x40080000
 800bad8:	0800ca80 	.word	0x0800ca80
 800badc:	0800ca70 	.word	0x0800ca70
 800bae0:	a39b      	add	r3, pc, #620	; (adr r3, 800bd50 <__ieee754_pow+0x9b0>)
 800bae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae6:	4640      	mov	r0, r8
 800bae8:	4649      	mov	r1, r9
 800baea:	f7f4 fb37 	bl	800015c <__adddf3>
 800baee:	4622      	mov	r2, r4
 800baf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800baf4:	462b      	mov	r3, r5
 800baf6:	4650      	mov	r0, sl
 800baf8:	4639      	mov	r1, r7
 800bafa:	f7f4 fb2d 	bl	8000158 <__aeabi_dsub>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb06:	f7f4 ff6f 	bl	80009e8 <__aeabi_dcmpgt>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	f47f ae0d 	bne.w	800b72a <__ieee754_pow+0x38a>
 800bb10:	4aa3      	ldr	r2, [pc, #652]	; (800bda0 <__ieee754_pow+0xa00>)
 800bb12:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800bb16:	4293      	cmp	r3, r2
 800bb18:	f340 8103 	ble.w	800bd22 <__ieee754_pow+0x982>
 800bb1c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bb20:	2000      	movs	r0, #0
 800bb22:	151b      	asrs	r3, r3, #20
 800bb24:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bb28:	fa4a f303 	asr.w	r3, sl, r3
 800bb2c:	4433      	add	r3, r6
 800bb2e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bb32:	4f9c      	ldr	r7, [pc, #624]	; (800bda4 <__ieee754_pow+0xa04>)
 800bb34:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bb38:	4117      	asrs	r7, r2
 800bb3a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bb3e:	ea23 0107 	bic.w	r1, r3, r7
 800bb42:	f1c2 0214 	rsb	r2, r2, #20
 800bb46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bb4a:	fa4a fa02 	asr.w	sl, sl, r2
 800bb4e:	2e00      	cmp	r6, #0
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	bfb8      	it	lt
 800bb5a:	f1ca 0a00 	rsblt	sl, sl, #0
 800bb5e:	f7f4 fafb 	bl	8000158 <__aeabi_dsub>
 800bb62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6a:	4642      	mov	r2, r8
 800bb6c:	464b      	mov	r3, r9
 800bb6e:	f7f4 faf5 	bl	800015c <__adddf3>
 800bb72:	a379      	add	r3, pc, #484	; (adr r3, 800bd58 <__ieee754_pow+0x9b8>)
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	2000      	movs	r0, #0
 800bb7a:	460d      	mov	r5, r1
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	f7f4 fca3 	bl	80004c8 <__aeabi_dmul>
 800bb82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb86:	4606      	mov	r6, r0
 800bb88:	460f      	mov	r7, r1
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	f7f4 fae3 	bl	8000158 <__aeabi_dsub>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4640      	mov	r0, r8
 800bb98:	4649      	mov	r1, r9
 800bb9a:	f7f4 fadd 	bl	8000158 <__aeabi_dsub>
 800bb9e:	a370      	add	r3, pc, #448	; (adr r3, 800bd60 <__ieee754_pow+0x9c0>)
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	f7f4 fc90 	bl	80004c8 <__aeabi_dmul>
 800bba8:	a36f      	add	r3, pc, #444	; (adr r3, 800bd68 <__ieee754_pow+0x9c8>)
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	4680      	mov	r8, r0
 800bbb0:	4689      	mov	r9, r1
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	f7f4 fc87 	bl	80004c8 <__aeabi_dmul>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4640      	mov	r0, r8
 800bbc0:	4649      	mov	r1, r9
 800bbc2:	f7f4 facb 	bl	800015c <__adddf3>
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	460d      	mov	r5, r1
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	4630      	mov	r0, r6
 800bbd0:	4639      	mov	r1, r7
 800bbd2:	f7f4 fac3 	bl	800015c <__adddf3>
 800bbd6:	4632      	mov	r2, r6
 800bbd8:	463b      	mov	r3, r7
 800bbda:	4680      	mov	r8, r0
 800bbdc:	4689      	mov	r9, r1
 800bbde:	f7f4 fabb 	bl	8000158 <__aeabi_dsub>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	4629      	mov	r1, r5
 800bbea:	f7f4 fab5 	bl	8000158 <__aeabi_dsub>
 800bbee:	4642      	mov	r2, r8
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	460f      	mov	r7, r1
 800bbf4:	464b      	mov	r3, r9
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	4649      	mov	r1, r9
 800bbfa:	f7f4 fc65 	bl	80004c8 <__aeabi_dmul>
 800bbfe:	a35c      	add	r3, pc, #368	; (adr r3, 800bd70 <__ieee754_pow+0x9d0>)
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	4604      	mov	r4, r0
 800bc06:	460d      	mov	r5, r1
 800bc08:	f7f4 fc5e 	bl	80004c8 <__aeabi_dmul>
 800bc0c:	a35a      	add	r3, pc, #360	; (adr r3, 800bd78 <__ieee754_pow+0x9d8>)
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	f7f4 faa1 	bl	8000158 <__aeabi_dsub>
 800bc16:	4622      	mov	r2, r4
 800bc18:	462b      	mov	r3, r5
 800bc1a:	f7f4 fc55 	bl	80004c8 <__aeabi_dmul>
 800bc1e:	a358      	add	r3, pc, #352	; (adr r3, 800bd80 <__ieee754_pow+0x9e0>)
 800bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc24:	f7f4 fa9a 	bl	800015c <__adddf3>
 800bc28:	4622      	mov	r2, r4
 800bc2a:	462b      	mov	r3, r5
 800bc2c:	f7f4 fc4c 	bl	80004c8 <__aeabi_dmul>
 800bc30:	a355      	add	r3, pc, #340	; (adr r3, 800bd88 <__ieee754_pow+0x9e8>)
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	f7f4 fa8f 	bl	8000158 <__aeabi_dsub>
 800bc3a:	4622      	mov	r2, r4
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	f7f4 fc43 	bl	80004c8 <__aeabi_dmul>
 800bc42:	a353      	add	r3, pc, #332	; (adr r3, 800bd90 <__ieee754_pow+0x9f0>)
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	f7f4 fa88 	bl	800015c <__adddf3>
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	462b      	mov	r3, r5
 800bc50:	f7f4 fc3a 	bl	80004c8 <__aeabi_dmul>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4640      	mov	r0, r8
 800bc5a:	4649      	mov	r1, r9
 800bc5c:	f7f4 fa7c 	bl	8000158 <__aeabi_dsub>
 800bc60:	4604      	mov	r4, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4640      	mov	r0, r8
 800bc6a:	4649      	mov	r1, r9
 800bc6c:	f7f4 fc2c 	bl	80004c8 <__aeabi_dmul>
 800bc70:	2200      	movs	r2, #0
 800bc72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	f7f4 fa6b 	bl	8000158 <__aeabi_dsub>
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc8a:	f7f4 fd47 	bl	800071c <__aeabi_ddiv>
 800bc8e:	4632      	mov	r2, r6
 800bc90:	4604      	mov	r4, r0
 800bc92:	460d      	mov	r5, r1
 800bc94:	463b      	mov	r3, r7
 800bc96:	4640      	mov	r0, r8
 800bc98:	4649      	mov	r1, r9
 800bc9a:	f7f4 fc15 	bl	80004c8 <__aeabi_dmul>
 800bc9e:	4632      	mov	r2, r6
 800bca0:	463b      	mov	r3, r7
 800bca2:	f7f4 fa5b 	bl	800015c <__adddf3>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4620      	mov	r0, r4
 800bcac:	4629      	mov	r1, r5
 800bcae:	f7f4 fa53 	bl	8000158 <__aeabi_dsub>
 800bcb2:	4642      	mov	r2, r8
 800bcb4:	464b      	mov	r3, r9
 800bcb6:	f7f4 fa4f 	bl	8000158 <__aeabi_dsub>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	4939      	ldr	r1, [pc, #228]	; (800bda8 <__ieee754_pow+0xa08>)
 800bcc2:	f7f4 fa49 	bl	8000158 <__aeabi_dsub>
 800bcc6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bcca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bcce:	da2b      	bge.n	800bd28 <__ieee754_pow+0x988>
 800bcd0:	4652      	mov	r2, sl
 800bcd2:	f000 fbdd 	bl	800c490 <scalbn>
 800bcd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcda:	f7ff bbf6 	b.w	800b4ca <__ieee754_pow+0x12a>
 800bcde:	4b33      	ldr	r3, [pc, #204]	; (800bdac <__ieee754_pow+0xa0c>)
 800bce0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bce4:	429f      	cmp	r7, r3
 800bce6:	f77f af13 	ble.w	800bb10 <__ieee754_pow+0x770>
 800bcea:	4b31      	ldr	r3, [pc, #196]	; (800bdb0 <__ieee754_pow+0xa10>)
 800bcec:	440b      	add	r3, r1
 800bcee:	4303      	orrs	r3, r0
 800bcf0:	d00b      	beq.n	800bd0a <__ieee754_pow+0x96a>
 800bcf2:	a329      	add	r3, pc, #164	; (adr r3, 800bd98 <__ieee754_pow+0x9f8>)
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcfc:	f7f4 fbe4 	bl	80004c8 <__aeabi_dmul>
 800bd00:	a325      	add	r3, pc, #148	; (adr r3, 800bd98 <__ieee754_pow+0x9f8>)
 800bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd06:	f7ff bbe0 	b.w	800b4ca <__ieee754_pow+0x12a>
 800bd0a:	4622      	mov	r2, r4
 800bd0c:	462b      	mov	r3, r5
 800bd0e:	f7f4 fa23 	bl	8000158 <__aeabi_dsub>
 800bd12:	4642      	mov	r2, r8
 800bd14:	464b      	mov	r3, r9
 800bd16:	f7f4 fe5d 	bl	80009d4 <__aeabi_dcmpge>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	f43f aef8 	beq.w	800bb10 <__ieee754_pow+0x770>
 800bd20:	e7e7      	b.n	800bcf2 <__ieee754_pow+0x952>
 800bd22:	f04f 0a00 	mov.w	sl, #0
 800bd26:	e71e      	b.n	800bb66 <__ieee754_pow+0x7c6>
 800bd28:	4621      	mov	r1, r4
 800bd2a:	e7d4      	b.n	800bcd6 <__ieee754_pow+0x936>
 800bd2c:	f04f 0b00 	mov.w	fp, #0
 800bd30:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bda8 <__ieee754_pow+0xa08>
 800bd34:	f7ff bb95 	b.w	800b462 <__ieee754_pow+0xc2>
 800bd38:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800bd3c:	f7ff bb91 	b.w	800b462 <__ieee754_pow+0xc2>
 800bd40:	4638      	mov	r0, r7
 800bd42:	4641      	mov	r1, r8
 800bd44:	f7ff bbc3 	b.w	800b4ce <__ieee754_pow+0x12e>
 800bd48:	9200      	str	r2, [sp, #0]
 800bd4a:	f7ff bb9f 	b.w	800b48c <__ieee754_pow+0xec>
 800bd4e:	bf00      	nop
 800bd50:	652b82fe 	.word	0x652b82fe
 800bd54:	3c971547 	.word	0x3c971547
 800bd58:	00000000 	.word	0x00000000
 800bd5c:	3fe62e43 	.word	0x3fe62e43
 800bd60:	fefa39ef 	.word	0xfefa39ef
 800bd64:	3fe62e42 	.word	0x3fe62e42
 800bd68:	0ca86c39 	.word	0x0ca86c39
 800bd6c:	be205c61 	.word	0xbe205c61
 800bd70:	72bea4d0 	.word	0x72bea4d0
 800bd74:	3e663769 	.word	0x3e663769
 800bd78:	c5d26bf1 	.word	0xc5d26bf1
 800bd7c:	3ebbbd41 	.word	0x3ebbbd41
 800bd80:	af25de2c 	.word	0xaf25de2c
 800bd84:	3f11566a 	.word	0x3f11566a
 800bd88:	16bebd93 	.word	0x16bebd93
 800bd8c:	3f66c16c 	.word	0x3f66c16c
 800bd90:	5555553e 	.word	0x5555553e
 800bd94:	3fc55555 	.word	0x3fc55555
 800bd98:	c2f8f359 	.word	0xc2f8f359
 800bd9c:	01a56e1f 	.word	0x01a56e1f
 800bda0:	3fe00000 	.word	0x3fe00000
 800bda4:	000fffff 	.word	0x000fffff
 800bda8:	3ff00000 	.word	0x3ff00000
 800bdac:	4090cbff 	.word	0x4090cbff
 800bdb0:	3f6f3400 	.word	0x3f6f3400

0800bdb4 <__ieee754_sqrt>:
 800bdb4:	4b54      	ldr	r3, [pc, #336]	; (800bf08 <__ieee754_sqrt+0x154>)
 800bdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdba:	438b      	bics	r3, r1
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	460d      	mov	r5, r1
 800bdc0:	460a      	mov	r2, r1
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	d10f      	bne.n	800bde6 <__ieee754_sqrt+0x32>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	f7f4 fb7d 	bl	80004c8 <__aeabi_dmul>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	f7f4 f9c1 	bl	800015c <__adddf3>
 800bdda:	4606      	mov	r6, r0
 800bddc:	460d      	mov	r5, r1
 800bdde:	4630      	mov	r0, r6
 800bde0:	4629      	mov	r1, r5
 800bde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde6:	2900      	cmp	r1, #0
 800bde8:	4607      	mov	r7, r0
 800bdea:	4603      	mov	r3, r0
 800bdec:	dc0e      	bgt.n	800be0c <__ieee754_sqrt+0x58>
 800bdee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bdf2:	ea5c 0707 	orrs.w	r7, ip, r7
 800bdf6:	d0f2      	beq.n	800bdde <__ieee754_sqrt+0x2a>
 800bdf8:	b141      	cbz	r1, 800be0c <__ieee754_sqrt+0x58>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	f7f4 f9ab 	bl	8000158 <__aeabi_dsub>
 800be02:	4602      	mov	r2, r0
 800be04:	460b      	mov	r3, r1
 800be06:	f7f4 fc89 	bl	800071c <__aeabi_ddiv>
 800be0a:	e7e6      	b.n	800bdda <__ieee754_sqrt+0x26>
 800be0c:	1512      	asrs	r2, r2, #20
 800be0e:	d074      	beq.n	800befa <__ieee754_sqrt+0x146>
 800be10:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800be14:	07d5      	lsls	r5, r2, #31
 800be16:	f04f 0500 	mov.w	r5, #0
 800be1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800be1e:	bf48      	it	mi
 800be20:	0fd9      	lsrmi	r1, r3, #31
 800be22:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800be26:	bf44      	itt	mi
 800be28:	005b      	lslmi	r3, r3, #1
 800be2a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800be2e:	1051      	asrs	r1, r2, #1
 800be30:	0fda      	lsrs	r2, r3, #31
 800be32:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800be36:	4628      	mov	r0, r5
 800be38:	2216      	movs	r2, #22
 800be3a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	1987      	adds	r7, r0, r6
 800be42:	42a7      	cmp	r7, r4
 800be44:	bfde      	ittt	le
 800be46:	19b8      	addle	r0, r7, r6
 800be48:	1be4      	suble	r4, r4, r7
 800be4a:	19ad      	addle	r5, r5, r6
 800be4c:	0fdf      	lsrs	r7, r3, #31
 800be4e:	3a01      	subs	r2, #1
 800be50:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800be54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800be5c:	d1f0      	bne.n	800be40 <__ieee754_sqrt+0x8c>
 800be5e:	f04f 0c20 	mov.w	ip, #32
 800be62:	4696      	mov	lr, r2
 800be64:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800be68:	4284      	cmp	r4, r0
 800be6a:	eb06 070e 	add.w	r7, r6, lr
 800be6e:	dc02      	bgt.n	800be76 <__ieee754_sqrt+0xc2>
 800be70:	d112      	bne.n	800be98 <__ieee754_sqrt+0xe4>
 800be72:	429f      	cmp	r7, r3
 800be74:	d810      	bhi.n	800be98 <__ieee754_sqrt+0xe4>
 800be76:	2f00      	cmp	r7, #0
 800be78:	eb07 0e06 	add.w	lr, r7, r6
 800be7c:	da42      	bge.n	800bf04 <__ieee754_sqrt+0x150>
 800be7e:	f1be 0f00 	cmp.w	lr, #0
 800be82:	db3f      	blt.n	800bf04 <__ieee754_sqrt+0x150>
 800be84:	f100 0801 	add.w	r8, r0, #1
 800be88:	1a24      	subs	r4, r4, r0
 800be8a:	4640      	mov	r0, r8
 800be8c:	429f      	cmp	r7, r3
 800be8e:	bf88      	it	hi
 800be90:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800be94:	1bdb      	subs	r3, r3, r7
 800be96:	4432      	add	r2, r6
 800be98:	0064      	lsls	r4, r4, #1
 800be9a:	f1bc 0c01 	subs.w	ip, ip, #1
 800be9e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800bea2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bea6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800beaa:	d1dd      	bne.n	800be68 <__ieee754_sqrt+0xb4>
 800beac:	4323      	orrs	r3, r4
 800beae:	d006      	beq.n	800bebe <__ieee754_sqrt+0x10a>
 800beb0:	1c54      	adds	r4, r2, #1
 800beb2:	bf0b      	itete	eq
 800beb4:	4662      	moveq	r2, ip
 800beb6:	3201      	addne	r2, #1
 800beb8:	3501      	addeq	r5, #1
 800beba:	f022 0201 	bicne.w	r2, r2, #1
 800bebe:	106b      	asrs	r3, r5, #1
 800bec0:	0852      	lsrs	r2, r2, #1
 800bec2:	07e8      	lsls	r0, r5, #31
 800bec4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bec8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800becc:	bf48      	it	mi
 800bece:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bed2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800bed6:	4616      	mov	r6, r2
 800bed8:	e781      	b.n	800bdde <__ieee754_sqrt+0x2a>
 800beda:	0adc      	lsrs	r4, r3, #11
 800bedc:	3915      	subs	r1, #21
 800bede:	055b      	lsls	r3, r3, #21
 800bee0:	2c00      	cmp	r4, #0
 800bee2:	d0fa      	beq.n	800beda <__ieee754_sqrt+0x126>
 800bee4:	02e6      	lsls	r6, r4, #11
 800bee6:	d50a      	bpl.n	800befe <__ieee754_sqrt+0x14a>
 800bee8:	f1c2 0020 	rsb	r0, r2, #32
 800beec:	fa23 f000 	lsr.w	r0, r3, r0
 800bef0:	1e55      	subs	r5, r2, #1
 800bef2:	4093      	lsls	r3, r2
 800bef4:	4304      	orrs	r4, r0
 800bef6:	1b4a      	subs	r2, r1, r5
 800bef8:	e78a      	b.n	800be10 <__ieee754_sqrt+0x5c>
 800befa:	4611      	mov	r1, r2
 800befc:	e7f0      	b.n	800bee0 <__ieee754_sqrt+0x12c>
 800befe:	0064      	lsls	r4, r4, #1
 800bf00:	3201      	adds	r2, #1
 800bf02:	e7ef      	b.n	800bee4 <__ieee754_sqrt+0x130>
 800bf04:	4680      	mov	r8, r0
 800bf06:	e7bf      	b.n	800be88 <__ieee754_sqrt+0xd4>
 800bf08:	7ff00000 	.word	0x7ff00000

0800bf0c <__ieee754_asinf>:
 800bf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf10:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800bf14:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800bf18:	4604      	mov	r4, r0
 800bf1a:	4607      	mov	r7, r0
 800bf1c:	d10c      	bne.n	800bf38 <__ieee754_asinf+0x2c>
 800bf1e:	498c      	ldr	r1, [pc, #560]	; (800c150 <__ieee754_asinf+0x244>)
 800bf20:	f7f4 ff00 	bl	8000d24 <__aeabi_fmul>
 800bf24:	498b      	ldr	r1, [pc, #556]	; (800c154 <__ieee754_asinf+0x248>)
 800bf26:	4605      	mov	r5, r0
 800bf28:	4620      	mov	r0, r4
 800bf2a:	f7f4 fefb 	bl	8000d24 <__aeabi_fmul>
 800bf2e:	4601      	mov	r1, r0
 800bf30:	4628      	mov	r0, r5
 800bf32:	f7f4 fdef 	bl	8000b14 <__addsf3>
 800bf36:	e006      	b.n	800bf46 <__ieee754_asinf+0x3a>
 800bf38:	dd09      	ble.n	800bf4e <__ieee754_asinf+0x42>
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	f7f4 fde8 	bl	8000b10 <__aeabi_fsub>
 800bf40:	4601      	mov	r1, r0
 800bf42:	f7f4 ffa3 	bl	8000e8c <__aeabi_fdiv>
 800bf46:	4604      	mov	r4, r0
 800bf48:	4620      	mov	r0, r4
 800bf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800bf52:	da0b      	bge.n	800bf6c <__ieee754_asinf+0x60>
 800bf54:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800bf58:	da73      	bge.n	800c042 <__ieee754_asinf+0x136>
 800bf5a:	497f      	ldr	r1, [pc, #508]	; (800c158 <__ieee754_asinf+0x24c>)
 800bf5c:	f7f4 fdda 	bl	8000b14 <__addsf3>
 800bf60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bf64:	f7f5 f89a 	bl	800109c <__aeabi_fcmpgt>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d1ed      	bne.n	800bf48 <__ieee754_asinf+0x3c>
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 fc09 	bl	800c784 <fabsf>
 800bf72:	4601      	mov	r1, r0
 800bf74:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bf78:	f7f4 fdca 	bl	8000b10 <__aeabi_fsub>
 800bf7c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bf80:	f7f4 fed0 	bl	8000d24 <__aeabi_fmul>
 800bf84:	4604      	mov	r4, r0
 800bf86:	4975      	ldr	r1, [pc, #468]	; (800c15c <__ieee754_asinf+0x250>)
 800bf88:	f7f4 fecc 	bl	8000d24 <__aeabi_fmul>
 800bf8c:	4974      	ldr	r1, [pc, #464]	; (800c160 <__ieee754_asinf+0x254>)
 800bf8e:	f7f4 fdc1 	bl	8000b14 <__addsf3>
 800bf92:	4621      	mov	r1, r4
 800bf94:	f7f4 fec6 	bl	8000d24 <__aeabi_fmul>
 800bf98:	4972      	ldr	r1, [pc, #456]	; (800c164 <__ieee754_asinf+0x258>)
 800bf9a:	f7f4 fdb9 	bl	8000b10 <__aeabi_fsub>
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	f7f4 fec0 	bl	8000d24 <__aeabi_fmul>
 800bfa4:	4970      	ldr	r1, [pc, #448]	; (800c168 <__ieee754_asinf+0x25c>)
 800bfa6:	f7f4 fdb5 	bl	8000b14 <__addsf3>
 800bfaa:	4621      	mov	r1, r4
 800bfac:	f7f4 feba 	bl	8000d24 <__aeabi_fmul>
 800bfb0:	496e      	ldr	r1, [pc, #440]	; (800c16c <__ieee754_asinf+0x260>)
 800bfb2:	f7f4 fdad 	bl	8000b10 <__aeabi_fsub>
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	f7f4 feb4 	bl	8000d24 <__aeabi_fmul>
 800bfbc:	496c      	ldr	r1, [pc, #432]	; (800c170 <__ieee754_asinf+0x264>)
 800bfbe:	f7f4 fda9 	bl	8000b14 <__addsf3>
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	f7f4 feae 	bl	8000d24 <__aeabi_fmul>
 800bfc8:	496a      	ldr	r1, [pc, #424]	; (800c174 <__ieee754_asinf+0x268>)
 800bfca:	4680      	mov	r8, r0
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f7f4 fea9 	bl	8000d24 <__aeabi_fmul>
 800bfd2:	4969      	ldr	r1, [pc, #420]	; (800c178 <__ieee754_asinf+0x26c>)
 800bfd4:	f7f4 fd9c 	bl	8000b10 <__aeabi_fsub>
 800bfd8:	4621      	mov	r1, r4
 800bfda:	f7f4 fea3 	bl	8000d24 <__aeabi_fmul>
 800bfde:	4967      	ldr	r1, [pc, #412]	; (800c17c <__ieee754_asinf+0x270>)
 800bfe0:	f7f4 fd98 	bl	8000b14 <__addsf3>
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	f7f4 fe9d 	bl	8000d24 <__aeabi_fmul>
 800bfea:	4965      	ldr	r1, [pc, #404]	; (800c180 <__ieee754_asinf+0x274>)
 800bfec:	f7f4 fd90 	bl	8000b10 <__aeabi_fsub>
 800bff0:	4621      	mov	r1, r4
 800bff2:	f7f4 fe97 	bl	8000d24 <__aeabi_fmul>
 800bff6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bffa:	f7f4 fd8b 	bl	8000b14 <__addsf3>
 800bffe:	4681      	mov	r9, r0
 800c000:	4620      	mov	r0, r4
 800c002:	f000 f955 	bl	800c2b0 <__ieee754_sqrtf>
 800c006:	4b5f      	ldr	r3, [pc, #380]	; (800c184 <__ieee754_asinf+0x278>)
 800c008:	4606      	mov	r6, r0
 800c00a:	429d      	cmp	r5, r3
 800c00c:	dd63      	ble.n	800c0d6 <__ieee754_asinf+0x1ca>
 800c00e:	4649      	mov	r1, r9
 800c010:	4640      	mov	r0, r8
 800c012:	f7f4 ff3b 	bl	8000e8c <__aeabi_fdiv>
 800c016:	4631      	mov	r1, r6
 800c018:	f7f4 fe84 	bl	8000d24 <__aeabi_fmul>
 800c01c:	4631      	mov	r1, r6
 800c01e:	f7f4 fd79 	bl	8000b14 <__addsf3>
 800c022:	4601      	mov	r1, r0
 800c024:	f7f4 fd76 	bl	8000b14 <__addsf3>
 800c028:	4957      	ldr	r1, [pc, #348]	; (800c188 <__ieee754_asinf+0x27c>)
 800c02a:	f7f4 fd73 	bl	8000b14 <__addsf3>
 800c02e:	4601      	mov	r1, r0
 800c030:	4847      	ldr	r0, [pc, #284]	; (800c150 <__ieee754_asinf+0x244>)
 800c032:	f7f4 fd6d 	bl	8000b10 <__aeabi_fsub>
 800c036:	2f00      	cmp	r7, #0
 800c038:	4604      	mov	r4, r0
 800c03a:	bfd8      	it	le
 800c03c:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800c040:	e782      	b.n	800bf48 <__ieee754_asinf+0x3c>
 800c042:	4601      	mov	r1, r0
 800c044:	f7f4 fe6e 	bl	8000d24 <__aeabi_fmul>
 800c048:	4605      	mov	r5, r0
 800c04a:	4944      	ldr	r1, [pc, #272]	; (800c15c <__ieee754_asinf+0x250>)
 800c04c:	f7f4 fe6a 	bl	8000d24 <__aeabi_fmul>
 800c050:	4943      	ldr	r1, [pc, #268]	; (800c160 <__ieee754_asinf+0x254>)
 800c052:	f7f4 fd5f 	bl	8000b14 <__addsf3>
 800c056:	4629      	mov	r1, r5
 800c058:	f7f4 fe64 	bl	8000d24 <__aeabi_fmul>
 800c05c:	4941      	ldr	r1, [pc, #260]	; (800c164 <__ieee754_asinf+0x258>)
 800c05e:	f7f4 fd57 	bl	8000b10 <__aeabi_fsub>
 800c062:	4629      	mov	r1, r5
 800c064:	f7f4 fe5e 	bl	8000d24 <__aeabi_fmul>
 800c068:	493f      	ldr	r1, [pc, #252]	; (800c168 <__ieee754_asinf+0x25c>)
 800c06a:	f7f4 fd53 	bl	8000b14 <__addsf3>
 800c06e:	4629      	mov	r1, r5
 800c070:	f7f4 fe58 	bl	8000d24 <__aeabi_fmul>
 800c074:	493d      	ldr	r1, [pc, #244]	; (800c16c <__ieee754_asinf+0x260>)
 800c076:	f7f4 fd4b 	bl	8000b10 <__aeabi_fsub>
 800c07a:	4629      	mov	r1, r5
 800c07c:	f7f4 fe52 	bl	8000d24 <__aeabi_fmul>
 800c080:	493b      	ldr	r1, [pc, #236]	; (800c170 <__ieee754_asinf+0x264>)
 800c082:	f7f4 fd47 	bl	8000b14 <__addsf3>
 800c086:	4629      	mov	r1, r5
 800c088:	f7f4 fe4c 	bl	8000d24 <__aeabi_fmul>
 800c08c:	4939      	ldr	r1, [pc, #228]	; (800c174 <__ieee754_asinf+0x268>)
 800c08e:	4606      	mov	r6, r0
 800c090:	4628      	mov	r0, r5
 800c092:	f7f4 fe47 	bl	8000d24 <__aeabi_fmul>
 800c096:	4938      	ldr	r1, [pc, #224]	; (800c178 <__ieee754_asinf+0x26c>)
 800c098:	f7f4 fd3a 	bl	8000b10 <__aeabi_fsub>
 800c09c:	4629      	mov	r1, r5
 800c09e:	f7f4 fe41 	bl	8000d24 <__aeabi_fmul>
 800c0a2:	4936      	ldr	r1, [pc, #216]	; (800c17c <__ieee754_asinf+0x270>)
 800c0a4:	f7f4 fd36 	bl	8000b14 <__addsf3>
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	f7f4 fe3b 	bl	8000d24 <__aeabi_fmul>
 800c0ae:	4934      	ldr	r1, [pc, #208]	; (800c180 <__ieee754_asinf+0x274>)
 800c0b0:	f7f4 fd2e 	bl	8000b10 <__aeabi_fsub>
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	f7f4 fe35 	bl	8000d24 <__aeabi_fmul>
 800c0ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c0be:	f7f4 fd29 	bl	8000b14 <__addsf3>
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	f7f4 fee1 	bl	8000e8c <__aeabi_fdiv>
 800c0ca:	4621      	mov	r1, r4
 800c0cc:	f7f4 fe2a 	bl	8000d24 <__aeabi_fmul>
 800c0d0:	4601      	mov	r1, r0
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	e72d      	b.n	800bf32 <__ieee754_asinf+0x26>
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800c0dc:	f7f4 fd1a 	bl	8000b14 <__addsf3>
 800c0e0:	4649      	mov	r1, r9
 800c0e2:	4682      	mov	sl, r0
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	f7f4 fed1 	bl	8000e8c <__aeabi_fdiv>
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	4650      	mov	r0, sl
 800c0ee:	f7f4 fe19 	bl	8000d24 <__aeabi_fmul>
 800c0f2:	f025 050f 	bic.w	r5, r5, #15
 800c0f6:	4680      	mov	r8, r0
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f7f4 fe12 	bl	8000d24 <__aeabi_fmul>
 800c100:	4601      	mov	r1, r0
 800c102:	4620      	mov	r0, r4
 800c104:	f7f4 fd04 	bl	8000b10 <__aeabi_fsub>
 800c108:	4631      	mov	r1, r6
 800c10a:	4604      	mov	r4, r0
 800c10c:	4628      	mov	r0, r5
 800c10e:	f7f4 fd01 	bl	8000b14 <__addsf3>
 800c112:	4601      	mov	r1, r0
 800c114:	4620      	mov	r0, r4
 800c116:	f7f4 feb9 	bl	8000e8c <__aeabi_fdiv>
 800c11a:	4601      	mov	r1, r0
 800c11c:	f7f4 fcfa 	bl	8000b14 <__addsf3>
 800c120:	4601      	mov	r1, r0
 800c122:	480c      	ldr	r0, [pc, #48]	; (800c154 <__ieee754_asinf+0x248>)
 800c124:	f7f4 fcf4 	bl	8000b10 <__aeabi_fsub>
 800c128:	4601      	mov	r1, r0
 800c12a:	4640      	mov	r0, r8
 800c12c:	f7f4 fcf0 	bl	8000b10 <__aeabi_fsub>
 800c130:	4629      	mov	r1, r5
 800c132:	4604      	mov	r4, r0
 800c134:	4628      	mov	r0, r5
 800c136:	f7f4 fced 	bl	8000b14 <__addsf3>
 800c13a:	4601      	mov	r1, r0
 800c13c:	4813      	ldr	r0, [pc, #76]	; (800c18c <__ieee754_asinf+0x280>)
 800c13e:	f7f4 fce7 	bl	8000b10 <__aeabi_fsub>
 800c142:	4601      	mov	r1, r0
 800c144:	4620      	mov	r0, r4
 800c146:	f7f4 fce3 	bl	8000b10 <__aeabi_fsub>
 800c14a:	4601      	mov	r1, r0
 800c14c:	480f      	ldr	r0, [pc, #60]	; (800c18c <__ieee754_asinf+0x280>)
 800c14e:	e770      	b.n	800c032 <__ieee754_asinf+0x126>
 800c150:	3fc90fdb 	.word	0x3fc90fdb
 800c154:	b33bbd2e 	.word	0xb33bbd2e
 800c158:	7149f2ca 	.word	0x7149f2ca
 800c15c:	3811ef08 	.word	0x3811ef08
 800c160:	3a4f7f04 	.word	0x3a4f7f04
 800c164:	3d241146 	.word	0x3d241146
 800c168:	3e4e0aa8 	.word	0x3e4e0aa8
 800c16c:	3ea6b090 	.word	0x3ea6b090
 800c170:	3e2aaaab 	.word	0x3e2aaaab
 800c174:	3d9dc62e 	.word	0x3d9dc62e
 800c178:	3f303361 	.word	0x3f303361
 800c17c:	4001572d 	.word	0x4001572d
 800c180:	4019d139 	.word	0x4019d139
 800c184:	3f799999 	.word	0x3f799999
 800c188:	333bbd2e 	.word	0x333bbd2e
 800c18c:	3f490fdb 	.word	0x3f490fdb

0800c190 <__ieee754_atan2f>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c196:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c19a:	4603      	mov	r3, r0
 800c19c:	dc05      	bgt.n	800c1aa <__ieee754_atan2f+0x1a>
 800c19e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c1a2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c1a6:	4607      	mov	r7, r0
 800c1a8:	dd04      	ble.n	800c1b4 <__ieee754_atan2f+0x24>
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7f4 fcb2 	bl	8000b14 <__addsf3>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	e024      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c1b4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c1b8:	d103      	bne.n	800c1c2 <__ieee754_atan2f+0x32>
 800c1ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c1be:	f000 b9d5 	b.w	800c56c <atanf>
 800c1c2:	178c      	asrs	r4, r1, #30
 800c1c4:	f004 0402 	and.w	r4, r4, #2
 800c1c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c1cc:	b92a      	cbnz	r2, 800c1da <__ieee754_atan2f+0x4a>
 800c1ce:	2c02      	cmp	r4, #2
 800c1d0:	d057      	beq.n	800c282 <__ieee754_atan2f+0xf2>
 800c1d2:	2c03      	cmp	r4, #3
 800c1d4:	d113      	bne.n	800c1fe <__ieee754_atan2f+0x6e>
 800c1d6:	4b2d      	ldr	r3, [pc, #180]	; (800c28c <__ieee754_atan2f+0xfc>)
 800c1d8:	e011      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c1da:	b91e      	cbnz	r6, 800c1e4 <__ieee754_atan2f+0x54>
 800c1dc:	2f00      	cmp	r7, #0
 800c1de:	da52      	bge.n	800c286 <__ieee754_atan2f+0xf6>
 800c1e0:	4b2b      	ldr	r3, [pc, #172]	; (800c290 <__ieee754_atan2f+0x100>)
 800c1e2:	e00c      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c1e4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c1e8:	d11a      	bne.n	800c220 <__ieee754_atan2f+0x90>
 800c1ea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c1ee:	d10c      	bne.n	800c20a <__ieee754_atan2f+0x7a>
 800c1f0:	2c02      	cmp	r4, #2
 800c1f2:	d006      	beq.n	800c202 <__ieee754_atan2f+0x72>
 800c1f4:	2c03      	cmp	r4, #3
 800c1f6:	d006      	beq.n	800c206 <__ieee754_atan2f+0x76>
 800c1f8:	2c01      	cmp	r4, #1
 800c1fa:	d140      	bne.n	800c27e <__ieee754_atan2f+0xee>
 800c1fc:	4b25      	ldr	r3, [pc, #148]	; (800c294 <__ieee754_atan2f+0x104>)
 800c1fe:	4618      	mov	r0, r3
 800c200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c202:	4b25      	ldr	r3, [pc, #148]	; (800c298 <__ieee754_atan2f+0x108>)
 800c204:	e7fb      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c206:	4b25      	ldr	r3, [pc, #148]	; (800c29c <__ieee754_atan2f+0x10c>)
 800c208:	e7f9      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c20a:	2c02      	cmp	r4, #2
 800c20c:	d039      	beq.n	800c282 <__ieee754_atan2f+0xf2>
 800c20e:	2c03      	cmp	r4, #3
 800c210:	d0e1      	beq.n	800c1d6 <__ieee754_atan2f+0x46>
 800c212:	2c01      	cmp	r4, #1
 800c214:	d102      	bne.n	800c21c <__ieee754_atan2f+0x8c>
 800c216:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c21a:	e7f0      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c21c:	2300      	movs	r3, #0
 800c21e:	e7ee      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c220:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c224:	d0da      	beq.n	800c1dc <__ieee754_atan2f+0x4c>
 800c226:	1b92      	subs	r2, r2, r6
 800c228:	15d2      	asrs	r2, r2, #23
 800c22a:	2a3c      	cmp	r2, #60	; 0x3c
 800c22c:	dc17      	bgt.n	800c25e <__ieee754_atan2f+0xce>
 800c22e:	2900      	cmp	r1, #0
 800c230:	da01      	bge.n	800c236 <__ieee754_atan2f+0xa6>
 800c232:	323c      	adds	r2, #60	; 0x3c
 800c234:	db15      	blt.n	800c262 <__ieee754_atan2f+0xd2>
 800c236:	4618      	mov	r0, r3
 800c238:	f7f4 fe28 	bl	8000e8c <__aeabi_fdiv>
 800c23c:	f000 faa2 	bl	800c784 <fabsf>
 800c240:	f000 f994 	bl	800c56c <atanf>
 800c244:	4603      	mov	r3, r0
 800c246:	2c01      	cmp	r4, #1
 800c248:	d00d      	beq.n	800c266 <__ieee754_atan2f+0xd6>
 800c24a:	2c02      	cmp	r4, #2
 800c24c:	d00e      	beq.n	800c26c <__ieee754_atan2f+0xdc>
 800c24e:	2c00      	cmp	r4, #0
 800c250:	d0d5      	beq.n	800c1fe <__ieee754_atan2f+0x6e>
 800c252:	4913      	ldr	r1, [pc, #76]	; (800c2a0 <__ieee754_atan2f+0x110>)
 800c254:	4618      	mov	r0, r3
 800c256:	f7f4 fc5d 	bl	8000b14 <__addsf3>
 800c25a:	4912      	ldr	r1, [pc, #72]	; (800c2a4 <__ieee754_atan2f+0x114>)
 800c25c:	e00c      	b.n	800c278 <__ieee754_atan2f+0xe8>
 800c25e:	4b12      	ldr	r3, [pc, #72]	; (800c2a8 <__ieee754_atan2f+0x118>)
 800c260:	e7f1      	b.n	800c246 <__ieee754_atan2f+0xb6>
 800c262:	2300      	movs	r3, #0
 800c264:	e7ef      	b.n	800c246 <__ieee754_atan2f+0xb6>
 800c266:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c26a:	e7c8      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c26c:	490c      	ldr	r1, [pc, #48]	; (800c2a0 <__ieee754_atan2f+0x110>)
 800c26e:	4618      	mov	r0, r3
 800c270:	f7f4 fc50 	bl	8000b14 <__addsf3>
 800c274:	4601      	mov	r1, r0
 800c276:	480b      	ldr	r0, [pc, #44]	; (800c2a4 <__ieee754_atan2f+0x114>)
 800c278:	f7f4 fc4a 	bl	8000b10 <__aeabi_fsub>
 800c27c:	e798      	b.n	800c1b0 <__ieee754_atan2f+0x20>
 800c27e:	4b0b      	ldr	r3, [pc, #44]	; (800c2ac <__ieee754_atan2f+0x11c>)
 800c280:	e7bd      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c282:	4b08      	ldr	r3, [pc, #32]	; (800c2a4 <__ieee754_atan2f+0x114>)
 800c284:	e7bb      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c286:	4b08      	ldr	r3, [pc, #32]	; (800c2a8 <__ieee754_atan2f+0x118>)
 800c288:	e7b9      	b.n	800c1fe <__ieee754_atan2f+0x6e>
 800c28a:	bf00      	nop
 800c28c:	c0490fdb 	.word	0xc0490fdb
 800c290:	bfc90fdb 	.word	0xbfc90fdb
 800c294:	bf490fdb 	.word	0xbf490fdb
 800c298:	4016cbe4 	.word	0x4016cbe4
 800c29c:	c016cbe4 	.word	0xc016cbe4
 800c2a0:	33bbbd2e 	.word	0x33bbbd2e
 800c2a4:	40490fdb 	.word	0x40490fdb
 800c2a8:	3fc90fdb 	.word	0x3fc90fdb
 800c2ac:	3f490fdb 	.word	0x3f490fdb

0800c2b0 <__ieee754_sqrtf>:
 800c2b0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c2b4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c2b8:	b570      	push	{r4, r5, r6, lr}
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	4604      	mov	r4, r0
 800c2be:	d309      	bcc.n	800c2d4 <__ieee754_sqrtf+0x24>
 800c2c0:	4601      	mov	r1, r0
 800c2c2:	f7f4 fd2f 	bl	8000d24 <__aeabi_fmul>
 800c2c6:	4601      	mov	r1, r0
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f7f4 fc23 	bl	8000b14 <__addsf3>
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	bd70      	pop	{r4, r5, r6, pc}
 800c2d4:	2a00      	cmp	r2, #0
 800c2d6:	d0fb      	beq.n	800c2d0 <__ieee754_sqrtf+0x20>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	da06      	bge.n	800c2ea <__ieee754_sqrtf+0x3a>
 800c2dc:	4601      	mov	r1, r0
 800c2de:	f7f4 fc17 	bl	8000b10 <__aeabi_fsub>
 800c2e2:	4601      	mov	r1, r0
 800c2e4:	f7f4 fdd2 	bl	8000e8c <__aeabi_fdiv>
 800c2e8:	e7f1      	b.n	800c2ce <__ieee754_sqrtf+0x1e>
 800c2ea:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800c2ee:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800c2f2:	d32e      	bcc.n	800c352 <__ieee754_sqrtf+0xa2>
 800c2f4:	3c7f      	subs	r4, #127	; 0x7f
 800c2f6:	07e2      	lsls	r2, r4, #31
 800c2f8:	f04f 0200 	mov.w	r2, #0
 800c2fc:	ea4f 0164 	mov.w	r1, r4, asr #1
 800c300:	4616      	mov	r6, r2
 800c302:	f04f 0419 	mov.w	r4, #25
 800c306:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800c30a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c30e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c312:	bf48      	it	mi
 800c314:	005b      	lslmi	r3, r3, #1
 800c316:	005b      	lsls	r3, r3, #1
 800c318:	1835      	adds	r5, r6, r0
 800c31a:	429d      	cmp	r5, r3
 800c31c:	bfde      	ittt	le
 800c31e:	182e      	addle	r6, r5, r0
 800c320:	1b5b      	suble	r3, r3, r5
 800c322:	1812      	addle	r2, r2, r0
 800c324:	3c01      	subs	r4, #1
 800c326:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c32a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c32e:	d1f3      	bne.n	800c318 <__ieee754_sqrtf+0x68>
 800c330:	b113      	cbz	r3, 800c338 <__ieee754_sqrtf+0x88>
 800c332:	3201      	adds	r2, #1
 800c334:	f022 0201 	bic.w	r2, r2, #1
 800c338:	1054      	asrs	r4, r2, #1
 800c33a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c33e:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800c342:	e7c5      	b.n	800c2d0 <__ieee754_sqrtf+0x20>
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	3201      	adds	r2, #1
 800c348:	0219      	lsls	r1, r3, #8
 800c34a:	d5fb      	bpl.n	800c344 <__ieee754_sqrtf+0x94>
 800c34c:	3a01      	subs	r2, #1
 800c34e:	1aa4      	subs	r4, r4, r2
 800c350:	e7d0      	b.n	800c2f4 <__ieee754_sqrtf+0x44>
 800c352:	2200      	movs	r2, #0
 800c354:	e7f8      	b.n	800c348 <__ieee754_sqrtf+0x98>

0800c356 <fabs>:
 800c356:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c35a:	4619      	mov	r1, r3
 800c35c:	4770      	bx	lr

0800c35e <finite>:
 800c35e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c362:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800c366:	0fc0      	lsrs	r0, r0, #31
 800c368:	4770      	bx	lr

0800c36a <matherr>:
 800c36a:	2000      	movs	r0, #0
 800c36c:	4770      	bx	lr
	...

0800c370 <nan>:
 800c370:	2000      	movs	r0, #0
 800c372:	4901      	ldr	r1, [pc, #4]	; (800c378 <nan+0x8>)
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	7ff80000 	.word	0x7ff80000

0800c37c <rint>:
 800c37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c37e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c382:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800c386:	f1bc 0f13 	cmp.w	ip, #19
 800c38a:	4604      	mov	r4, r0
 800c38c:	460d      	mov	r5, r1
 800c38e:	460b      	mov	r3, r1
 800c390:	4606      	mov	r6, r0
 800c392:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800c396:	dc5a      	bgt.n	800c44e <rint+0xd2>
 800c398:	f1bc 0f00 	cmp.w	ip, #0
 800c39c:	da2b      	bge.n	800c3f6 <rint+0x7a>
 800c39e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c3a2:	4302      	orrs	r2, r0
 800c3a4:	d023      	beq.n	800c3ee <rint+0x72>
 800c3a6:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c3aa:	4302      	orrs	r2, r0
 800c3ac:	4256      	negs	r6, r2
 800c3ae:	4316      	orrs	r6, r2
 800c3b0:	0c4b      	lsrs	r3, r1, #17
 800c3b2:	0b36      	lsrs	r6, r6, #12
 800c3b4:	4934      	ldr	r1, [pc, #208]	; (800c488 <rint+0x10c>)
 800c3b6:	045b      	lsls	r3, r3, #17
 800c3b8:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800c3bc:	ea46 0503 	orr.w	r5, r6, r3
 800c3c0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	462b      	mov	r3, r5
 800c3c8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f7f3 fec4 	bl	800015c <__adddf3>
 800c3d4:	e9cd 0100 	strd	r0, r1, [sp]
 800c3d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3dc:	462b      	mov	r3, r5
 800c3de:	4622      	mov	r2, r4
 800c3e0:	f7f3 feba 	bl	8000158 <__aeabi_dsub>
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c3ea:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	b003      	add	sp, #12
 800c3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3f6:	4a25      	ldr	r2, [pc, #148]	; (800c48c <rint+0x110>)
 800c3f8:	fa42 f20c 	asr.w	r2, r2, ip
 800c3fc:	4011      	ands	r1, r2
 800c3fe:	4301      	orrs	r1, r0
 800c400:	d0f5      	beq.n	800c3ee <rint+0x72>
 800c402:	0852      	lsrs	r2, r2, #1
 800c404:	ea05 0102 	and.w	r1, r5, r2
 800c408:	ea50 0601 	orrs.w	r6, r0, r1
 800c40c:	d00c      	beq.n	800c428 <rint+0xac>
 800c40e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c412:	f1bc 0f13 	cmp.w	ip, #19
 800c416:	bf0c      	ite	eq
 800c418:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800c41c:	2600      	movne	r6, #0
 800c41e:	ea25 0202 	bic.w	r2, r5, r2
 800c422:	fa43 f30c 	asr.w	r3, r3, ip
 800c426:	4313      	orrs	r3, r2
 800c428:	4917      	ldr	r1, [pc, #92]	; (800c488 <rint+0x10c>)
 800c42a:	4632      	mov	r2, r6
 800c42c:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800c430:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c434:	4620      	mov	r0, r4
 800c436:	4629      	mov	r1, r5
 800c438:	f7f3 fe90 	bl	800015c <__adddf3>
 800c43c:	e9cd 0100 	strd	r0, r1, [sp]
 800c440:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c444:	4622      	mov	r2, r4
 800c446:	462b      	mov	r3, r5
 800c448:	f7f3 fe86 	bl	8000158 <__aeabi_dsub>
 800c44c:	e008      	b.n	800c460 <rint+0xe4>
 800c44e:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800c452:	dd08      	ble.n	800c466 <rint+0xea>
 800c454:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800c458:	d1c9      	bne.n	800c3ee <rint+0x72>
 800c45a:	4602      	mov	r2, r0
 800c45c:	f7f3 fe7e 	bl	800015c <__adddf3>
 800c460:	4604      	mov	r4, r0
 800c462:	460d      	mov	r5, r1
 800c464:	e7c3      	b.n	800c3ee <rint+0x72>
 800c466:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800c46a:	f04f 32ff 	mov.w	r2, #4294967295
 800c46e:	40ca      	lsrs	r2, r1
 800c470:	4210      	tst	r0, r2
 800c472:	d0bc      	beq.n	800c3ee <rint+0x72>
 800c474:	0852      	lsrs	r2, r2, #1
 800c476:	4210      	tst	r0, r2
 800c478:	bf1f      	itttt	ne
 800c47a:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800c47e:	ea20 0202 	bicne.w	r2, r0, r2
 800c482:	410e      	asrne	r6, r1
 800c484:	4316      	orrne	r6, r2
 800c486:	e7cf      	b.n	800c428 <rint+0xac>
 800c488:	0800ca90 	.word	0x0800ca90
 800c48c:	000fffff 	.word	0x000fffff

0800c490 <scalbn>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	4616      	mov	r6, r2
 800c494:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c498:	4604      	mov	r4, r0
 800c49a:	460d      	mov	r5, r1
 800c49c:	460b      	mov	r3, r1
 800c49e:	b982      	cbnz	r2, 800c4c2 <scalbn+0x32>
 800c4a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c4a4:	4303      	orrs	r3, r0
 800c4a6:	d034      	beq.n	800c512 <scalbn+0x82>
 800c4a8:	4b2d      	ldr	r3, [pc, #180]	; (800c560 <scalbn+0xd0>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f7f4 f80c 	bl	80004c8 <__aeabi_dmul>
 800c4b0:	4b2c      	ldr	r3, [pc, #176]	; (800c564 <scalbn+0xd4>)
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	429e      	cmp	r6, r3
 800c4b6:	460d      	mov	r5, r1
 800c4b8:	da0d      	bge.n	800c4d6 <scalbn+0x46>
 800c4ba:	a325      	add	r3, pc, #148	; (adr r3, 800c550 <scalbn+0xc0>)
 800c4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c0:	e01c      	b.n	800c4fc <scalbn+0x6c>
 800c4c2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c4c6:	42ba      	cmp	r2, r7
 800c4c8:	d109      	bne.n	800c4de <scalbn+0x4e>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	f7f3 fe46 	bl	800015c <__adddf3>
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	e01d      	b.n	800c512 <scalbn+0x82>
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4dc:	3a36      	subs	r2, #54	; 0x36
 800c4de:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c4e2:	4432      	add	r2, r6
 800c4e4:	428a      	cmp	r2, r1
 800c4e6:	dd0c      	ble.n	800c502 <scalbn+0x72>
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	462b      	mov	r3, r5
 800c4ec:	a11a      	add	r1, pc, #104	; (adr r1, 800c558 <scalbn+0xc8>)
 800c4ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4f2:	f000 f94a 	bl	800c78a <copysign>
 800c4f6:	a318      	add	r3, pc, #96	; (adr r3, 800c558 <scalbn+0xc8>)
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	f7f3 ffe4 	bl	80004c8 <__aeabi_dmul>
 800c500:	e7e6      	b.n	800c4d0 <scalbn+0x40>
 800c502:	2a00      	cmp	r2, #0
 800c504:	dd08      	ble.n	800c518 <scalbn+0x88>
 800c506:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c50a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c50e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c512:	4620      	mov	r0, r4
 800c514:	4629      	mov	r1, r5
 800c516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c518:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c51c:	da0b      	bge.n	800c536 <scalbn+0xa6>
 800c51e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c522:	429e      	cmp	r6, r3
 800c524:	4622      	mov	r2, r4
 800c526:	462b      	mov	r3, r5
 800c528:	dce0      	bgt.n	800c4ec <scalbn+0x5c>
 800c52a:	a109      	add	r1, pc, #36	; (adr r1, 800c550 <scalbn+0xc0>)
 800c52c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c530:	f000 f92b 	bl	800c78a <copysign>
 800c534:	e7c1      	b.n	800c4ba <scalbn+0x2a>
 800c536:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c53a:	3236      	adds	r2, #54	; 0x36
 800c53c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c540:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c544:	4620      	mov	r0, r4
 800c546:	4629      	mov	r1, r5
 800c548:	2200      	movs	r2, #0
 800c54a:	4b07      	ldr	r3, [pc, #28]	; (800c568 <scalbn+0xd8>)
 800c54c:	e7d6      	b.n	800c4fc <scalbn+0x6c>
 800c54e:	bf00      	nop
 800c550:	c2f8f359 	.word	0xc2f8f359
 800c554:	01a56e1f 	.word	0x01a56e1f
 800c558:	8800759c 	.word	0x8800759c
 800c55c:	7e37e43c 	.word	0x7e37e43c
 800c560:	43500000 	.word	0x43500000
 800c564:	ffff3cb0 	.word	0xffff3cb0
 800c568:	3c900000 	.word	0x3c900000

0800c56c <atanf>:
 800c56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c570:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c574:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c578:	4604      	mov	r4, r0
 800c57a:	4607      	mov	r7, r0
 800c57c:	db0e      	blt.n	800c59c <atanf+0x30>
 800c57e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c582:	dd04      	ble.n	800c58e <atanf+0x22>
 800c584:	4601      	mov	r1, r0
 800c586:	f7f4 fac5 	bl	8000b14 <__addsf3>
 800c58a:	4604      	mov	r4, r0
 800c58c:	e003      	b.n	800c596 <atanf+0x2a>
 800c58e:	2800      	cmp	r0, #0
 800c590:	f340 80cd 	ble.w	800c72e <atanf+0x1c2>
 800c594:	4c67      	ldr	r4, [pc, #412]	; (800c734 <atanf+0x1c8>)
 800c596:	4620      	mov	r0, r4
 800c598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c59c:	4b66      	ldr	r3, [pc, #408]	; (800c738 <atanf+0x1cc>)
 800c59e:	429d      	cmp	r5, r3
 800c5a0:	dc0e      	bgt.n	800c5c0 <atanf+0x54>
 800c5a2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c5a6:	da08      	bge.n	800c5ba <atanf+0x4e>
 800c5a8:	4964      	ldr	r1, [pc, #400]	; (800c73c <atanf+0x1d0>)
 800c5aa:	f7f4 fab3 	bl	8000b14 <__addsf3>
 800c5ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c5b2:	f7f4 fd73 	bl	800109c <__aeabi_fcmpgt>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d1ed      	bne.n	800c596 <atanf+0x2a>
 800c5ba:	f04f 36ff 	mov.w	r6, #4294967295
 800c5be:	e01c      	b.n	800c5fa <atanf+0x8e>
 800c5c0:	f000 f8e0 	bl	800c784 <fabsf>
 800c5c4:	4b5e      	ldr	r3, [pc, #376]	; (800c740 <atanf+0x1d4>)
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	429d      	cmp	r5, r3
 800c5ca:	dc7c      	bgt.n	800c6c6 <atanf+0x15a>
 800c5cc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c5d0:	429d      	cmp	r5, r3
 800c5d2:	dc67      	bgt.n	800c6a4 <atanf+0x138>
 800c5d4:	4601      	mov	r1, r0
 800c5d6:	f7f4 fa9d 	bl	8000b14 <__addsf3>
 800c5da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c5de:	f7f4 fa97 	bl	8000b10 <__aeabi_fsub>
 800c5e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f7f4 fa93 	bl	8000b14 <__addsf3>
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f7f4 fc4b 	bl	8000e8c <__aeabi_fdiv>
 800c5f6:	2600      	movs	r6, #0
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f7f4 fb91 	bl	8000d24 <__aeabi_fmul>
 800c602:	4601      	mov	r1, r0
 800c604:	4680      	mov	r8, r0
 800c606:	f7f4 fb8d 	bl	8000d24 <__aeabi_fmul>
 800c60a:	4605      	mov	r5, r0
 800c60c:	494d      	ldr	r1, [pc, #308]	; (800c744 <atanf+0x1d8>)
 800c60e:	f7f4 fb89 	bl	8000d24 <__aeabi_fmul>
 800c612:	494d      	ldr	r1, [pc, #308]	; (800c748 <atanf+0x1dc>)
 800c614:	f7f4 fa7e 	bl	8000b14 <__addsf3>
 800c618:	4629      	mov	r1, r5
 800c61a:	f7f4 fb83 	bl	8000d24 <__aeabi_fmul>
 800c61e:	494b      	ldr	r1, [pc, #300]	; (800c74c <atanf+0x1e0>)
 800c620:	f7f4 fa78 	bl	8000b14 <__addsf3>
 800c624:	4629      	mov	r1, r5
 800c626:	f7f4 fb7d 	bl	8000d24 <__aeabi_fmul>
 800c62a:	4949      	ldr	r1, [pc, #292]	; (800c750 <atanf+0x1e4>)
 800c62c:	f7f4 fa72 	bl	8000b14 <__addsf3>
 800c630:	4629      	mov	r1, r5
 800c632:	f7f4 fb77 	bl	8000d24 <__aeabi_fmul>
 800c636:	4947      	ldr	r1, [pc, #284]	; (800c754 <atanf+0x1e8>)
 800c638:	f7f4 fa6c 	bl	8000b14 <__addsf3>
 800c63c:	4629      	mov	r1, r5
 800c63e:	f7f4 fb71 	bl	8000d24 <__aeabi_fmul>
 800c642:	4945      	ldr	r1, [pc, #276]	; (800c758 <atanf+0x1ec>)
 800c644:	f7f4 fa66 	bl	8000b14 <__addsf3>
 800c648:	4641      	mov	r1, r8
 800c64a:	f7f4 fb6b 	bl	8000d24 <__aeabi_fmul>
 800c64e:	4943      	ldr	r1, [pc, #268]	; (800c75c <atanf+0x1f0>)
 800c650:	4680      	mov	r8, r0
 800c652:	4628      	mov	r0, r5
 800c654:	f7f4 fb66 	bl	8000d24 <__aeabi_fmul>
 800c658:	4941      	ldr	r1, [pc, #260]	; (800c760 <atanf+0x1f4>)
 800c65a:	f7f4 fa59 	bl	8000b10 <__aeabi_fsub>
 800c65e:	4629      	mov	r1, r5
 800c660:	f7f4 fb60 	bl	8000d24 <__aeabi_fmul>
 800c664:	493f      	ldr	r1, [pc, #252]	; (800c764 <atanf+0x1f8>)
 800c666:	f7f4 fa53 	bl	8000b10 <__aeabi_fsub>
 800c66a:	4629      	mov	r1, r5
 800c66c:	f7f4 fb5a 	bl	8000d24 <__aeabi_fmul>
 800c670:	493d      	ldr	r1, [pc, #244]	; (800c768 <atanf+0x1fc>)
 800c672:	f7f4 fa4d 	bl	8000b10 <__aeabi_fsub>
 800c676:	4629      	mov	r1, r5
 800c678:	f7f4 fb54 	bl	8000d24 <__aeabi_fmul>
 800c67c:	493b      	ldr	r1, [pc, #236]	; (800c76c <atanf+0x200>)
 800c67e:	f7f4 fa47 	bl	8000b10 <__aeabi_fsub>
 800c682:	4629      	mov	r1, r5
 800c684:	f7f4 fb4e 	bl	8000d24 <__aeabi_fmul>
 800c688:	4601      	mov	r1, r0
 800c68a:	4640      	mov	r0, r8
 800c68c:	f7f4 fa42 	bl	8000b14 <__addsf3>
 800c690:	4621      	mov	r1, r4
 800c692:	f7f4 fb47 	bl	8000d24 <__aeabi_fmul>
 800c696:	1c73      	adds	r3, r6, #1
 800c698:	4601      	mov	r1, r0
 800c69a:	d133      	bne.n	800c704 <atanf+0x198>
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7f4 fa37 	bl	8000b10 <__aeabi_fsub>
 800c6a2:	e772      	b.n	800c58a <atanf+0x1e>
 800c6a4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c6a8:	f7f4 fa32 	bl	8000b10 <__aeabi_fsub>
 800c6ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7f4 fa2e 	bl	8000b14 <__addsf3>
 800c6b8:	4601      	mov	r1, r0
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f7f4 fbe6 	bl	8000e8c <__aeabi_fdiv>
 800c6c0:	2601      	movs	r6, #1
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	e799      	b.n	800c5fa <atanf+0x8e>
 800c6c6:	4b2a      	ldr	r3, [pc, #168]	; (800c770 <atanf+0x204>)
 800c6c8:	429d      	cmp	r5, r3
 800c6ca:	dc14      	bgt.n	800c6f6 <atanf+0x18a>
 800c6cc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c6d0:	f7f4 fa1e 	bl	8000b10 <__aeabi_fsub>
 800c6d4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c6d8:	4605      	mov	r5, r0
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f7f4 fb22 	bl	8000d24 <__aeabi_fmul>
 800c6e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c6e4:	f7f4 fa16 	bl	8000b14 <__addsf3>
 800c6e8:	4601      	mov	r1, r0
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	f7f4 fbce 	bl	8000e8c <__aeabi_fdiv>
 800c6f0:	2602      	movs	r6, #2
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	e781      	b.n	800c5fa <atanf+0x8e>
 800c6f6:	4601      	mov	r1, r0
 800c6f8:	481e      	ldr	r0, [pc, #120]	; (800c774 <atanf+0x208>)
 800c6fa:	f7f4 fbc7 	bl	8000e8c <__aeabi_fdiv>
 800c6fe:	2603      	movs	r6, #3
 800c700:	4604      	mov	r4, r0
 800c702:	e77a      	b.n	800c5fa <atanf+0x8e>
 800c704:	4b1c      	ldr	r3, [pc, #112]	; (800c778 <atanf+0x20c>)
 800c706:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c70a:	f7f4 fa01 	bl	8000b10 <__aeabi_fsub>
 800c70e:	4621      	mov	r1, r4
 800c710:	f7f4 f9fe 	bl	8000b10 <__aeabi_fsub>
 800c714:	4b19      	ldr	r3, [pc, #100]	; (800c77c <atanf+0x210>)
 800c716:	4601      	mov	r1, r0
 800c718:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c71c:	f7f4 f9f8 	bl	8000b10 <__aeabi_fsub>
 800c720:	2f00      	cmp	r7, #0
 800c722:	4604      	mov	r4, r0
 800c724:	f6bf af37 	bge.w	800c596 <atanf+0x2a>
 800c728:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800c72c:	e733      	b.n	800c596 <atanf+0x2a>
 800c72e:	4c14      	ldr	r4, [pc, #80]	; (800c780 <atanf+0x214>)
 800c730:	e731      	b.n	800c596 <atanf+0x2a>
 800c732:	bf00      	nop
 800c734:	3fc90fdb 	.word	0x3fc90fdb
 800c738:	3edfffff 	.word	0x3edfffff
 800c73c:	7149f2ca 	.word	0x7149f2ca
 800c740:	3f97ffff 	.word	0x3f97ffff
 800c744:	3c8569d7 	.word	0x3c8569d7
 800c748:	3d4bda59 	.word	0x3d4bda59
 800c74c:	3d886b35 	.word	0x3d886b35
 800c750:	3dba2e6e 	.word	0x3dba2e6e
 800c754:	3e124925 	.word	0x3e124925
 800c758:	3eaaaaab 	.word	0x3eaaaaab
 800c75c:	bd15a221 	.word	0xbd15a221
 800c760:	3d6ef16b 	.word	0x3d6ef16b
 800c764:	3d9d8795 	.word	0x3d9d8795
 800c768:	3de38e38 	.word	0x3de38e38
 800c76c:	3e4ccccd 	.word	0x3e4ccccd
 800c770:	401bffff 	.word	0x401bffff
 800c774:	bf800000 	.word	0xbf800000
 800c778:	0800cab0 	.word	0x0800cab0
 800c77c:	0800caa0 	.word	0x0800caa0
 800c780:	bfc90fdb 	.word	0xbfc90fdb

0800c784 <fabsf>:
 800c784:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c788:	4770      	bx	lr

0800c78a <copysign>:
 800c78a:	b530      	push	{r4, r5, lr}
 800c78c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c794:	ea42 0503 	orr.w	r5, r2, r3
 800c798:	4629      	mov	r1, r5
 800c79a:	bd30      	pop	{r4, r5, pc}

0800c79c <_init>:
 800c79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79e:	bf00      	nop
 800c7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a2:	bc08      	pop	{r3}
 800c7a4:	469e      	mov	lr, r3
 800c7a6:	4770      	bx	lr

0800c7a8 <_fini>:
 800c7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7aa:	bf00      	nop
 800c7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ae:	bc08      	pop	{r3}
 800c7b0:	469e      	mov	lr, r3
 800c7b2:	4770      	bx	lr
