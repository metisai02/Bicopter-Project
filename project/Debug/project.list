
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c464  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800c578  0800c578  0001c578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c880  0800c880  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800c880  0800c880  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c880  0800c880  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c880  0800c880  0001c880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c884  0800c884  0001c884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000094  0800c91c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800c91c  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131a8  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce6  00000000  00000000  00033265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00035f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  00037328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003417  00000000  00000000  000385f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fea  00000000  00000000  0003ba07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009154e  00000000  00000000  000529f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3f3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f18  00000000  00000000  000e3f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c55c 	.word	0x0800c55c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	0800c55c 	.word	0x0800c55c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2iz>:
 80010dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30f      	bcc.n	8001106 <__aeabi_f2iz+0x2a>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d90d      	bls.n	800110c <__aeabi_f2iz+0x30>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	bf18      	it	ne
 8001102:	4240      	negne	r0, r0
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2iz+0x3a>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d105      	bne.n	8001122 <__aeabi_f2iz+0x46>
 8001116:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800111a:	bf08      	it	eq
 800111c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr

08001128 <__aeabi_f2uiz>:
 8001128:	0042      	lsls	r2, r0, #1
 800112a:	d20e      	bcs.n	800114a <__aeabi_f2uiz+0x22>
 800112c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001130:	d30b      	bcc.n	800114a <__aeabi_f2uiz+0x22>
 8001132:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001136:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800113a:	d409      	bmi.n	8001150 <__aeabi_f2uiz+0x28>
 800113c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	4770      	bx	lr
 800114a:	f04f 0000 	mov.w	r0, #0
 800114e:	4770      	bx	lr
 8001150:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001154:	d101      	bne.n	800115a <__aeabi_f2uiz+0x32>
 8001156:	0242      	lsls	r2, r0, #9
 8001158:	d102      	bne.n	8001160 <__aeabi_f2uiz+0x38>
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	4770      	bx	lr
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <crc16_floating>:
        crc = (crc << 8) ^ crc16tab[(((crc >> 8) ^ (*((uint8_t *)(buf++)))) & 0x00FF)];
    return crc;
}

uint16_t crc16_floating(uint8_t next, uint16_t seed)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	80bb      	strh	r3, [r7, #4]
    return (seed << 8) ^ crc16tab[((seed >> 8) ^ next) & 0x00FF];
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	b29b      	uxth	r3, r3
 8001184:	4619      	mov	r1, r3
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	404b      	eors	r3, r1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4905      	ldr	r1, [pc, #20]	; (80011a4 <crc16_floating+0x3c>)
 800118e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4053      	eors	r3, r2
 8001196:	b21b      	sxth	r3, r3
 8001198:	b29b      	uxth	r3, r3
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	0800c5b4 	.word	0x0800c5b4

080011a8 <SendFrameData>:

#include "frame_uart.h"
#include "crc.h"

void SendFrameData(uint8_t *pu8Src, uint16_t u16Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	460b      	mov	r3, r1
 80011b6:	817b      	strh	r3, [r7, #10]
    const uint8_t *pu8Src_end = pu8Src + u16Src_len;
 80011b8:	897b      	ldrh	r3, [r7, #10]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
    const uint8_t *pu8Dest_start = pu8Dest;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	83fb      	strh	r3, [r7, #30]

    *(pu8Dest++) = START_BYTE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	2245      	movs	r2, #69	; 0x45
 80011d0:	701a      	strb	r2, [r3, #0]
    while (pu8Src < pu8Src_end)
 80011d2:	e029      	b.n	8001228 <SendFrameData+0x80>
    {
        if (*pu8Src == START_BYTE || *pu8Src == CHECK_BYTE || *pu8Src == STOP_BYTE)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b45      	cmp	r3, #69	; 0x45
 80011da:	d007      	beq.n	80011ec <SendFrameData+0x44>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b60      	cmp	r3, #96	; 0x60
 80011e2:	d003      	beq.n	80011ec <SendFrameData+0x44>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2bc4      	cmp	r3, #196	; 0xc4
 80011ea:	d10b      	bne.n	8001204 <SendFrameData+0x5c>
        {
            *(pu8Dest++) = CHECK_BYTE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	2260      	movs	r2, #96	; 0x60
 80011f4:	701a      	strb	r2, [r3, #0]
            *(pu8Dest++) = *pu8Src;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e005      	b.n	8001210 <SendFrameData+0x68>
        }
        else
        {
            *(pu8Dest++) = *pu8Src;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	701a      	strb	r2, [r3, #0]
        }
        crc = crc16_floating(*pu8Src, crc);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	8bfa      	ldrh	r2, [r7, #30]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ffa5 	bl	8001168 <crc16_floating>
 800121e:	4603      	mov	r3, r0
 8001220:	83fb      	strh	r3, [r7, #30]
        pu8Src++;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
    while (pu8Src < pu8Src_end)
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3d1      	bcc.n	80011d4 <SendFrameData+0x2c>
    }
    *(pu8Dest) = (char)(crc >> 8);
 8001230:	8bfb      	ldrh	r3, [r7, #30]
 8001232:	0a1b      	lsrs	r3, r3, #8
 8001234:	b29b      	uxth	r3, r3
 8001236:	b2da      	uxtb	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	607b      	str	r3, [r7, #4]
    *(pu8Dest) = (char)crc;
 8001242:	8bfb      	ldrh	r3, [r7, #30]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3301      	adds	r3, #1
 800124e:	607b      	str	r3, [r7, #4]
    *(pu8Dest++) = STOP_BYTE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	22c4      	movs	r2, #196	; 0xc4
 8001258:	701a      	strb	r2, [r3, #0]
    *(pu16Dest_len) = pu8Dest - pu8Dest_start;
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29a      	uxth	r2, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	801a      	strh	r2, [r3, #0]
}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <receive_value>:
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
  return len;
}

void receive_value(uint8_t *data_dest, uint8_t *data, uint8_t length)
{
 800126e:	b480      	push	{r7}
 8001270:	b087      	sub	sp, #28
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	4613      	mov	r3, r2
 800127a:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < length; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e00a      	b.n	8001298 <receive_value+0x2a>
    *data++ = *data_dest++;
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	1c53      	adds	r3, r2, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c59      	adds	r1, r3, #1
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	dbf0      	blt.n	8001282 <receive_value+0x14>
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f004 ffe6 	bl	8006280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f878 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f000 fa5c 	bl	8001774 <MX_GPIO_Init>
  MX_DMA_Init();
 80012bc:	f000 fa3c 	bl	8001738 <MX_DMA_Init>
  MX_I2C1_Init();
 80012c0:	f000 f8b8 	bl	8001434 <MX_I2C1_Init>
  MX_SPI2_Init();
 80012c4:	f000 f8e4 	bl	8001490 <MX_SPI2_Init>
  MX_TIM3_Init();
 80012c8:	f000 f918 	bl	80014fc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012cc:	f000 f9e0 	bl	8001690 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012d0:	f000 fa08 	bl	80016e4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80012d4:	f000 f98e 	bl	80015f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012d8:	2100      	movs	r1, #0
 80012da:	4829      	ldr	r0, [pc, #164]	; (8001380 <main+0xd4>)
 80012dc:	f007 fd90 	bl	8008e00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012e0:	2104      	movs	r1, #4
 80012e2:	4827      	ldr	r0, [pc, #156]	; (8001380 <main+0xd4>)
 80012e4:	f007 fd8c 	bl	8008e00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80012e8:	2108      	movs	r1, #8
 80012ea:	4825      	ldr	r0, [pc, #148]	; (8001380 <main+0xd4>)
 80012ec:	f007 fd88 	bl	8008e00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80012f0:	210c      	movs	r1, #12
 80012f2:	4823      	ldr	r0, [pc, #140]	; (8001380 <main+0xd4>)
 80012f4:	f007 fd84 	bl	8008e00 <HAL_TIM_PWM_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
 80012f8:	2224      	movs	r2, #36	; 0x24
 80012fa:	4922      	ldr	r1, [pc, #136]	; (8001384 <main+0xd8>)
 80012fc:	4822      	ldr	r0, [pc, #136]	; (8001388 <main+0xdc>)
 80012fe:	f008 fcc2 	bl	8009c86 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <main+0xe0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <main+0xe0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0204 	bic.w	r2, r2, #4
 8001310:	601a      	str	r2, [r3, #0]

  runRadio();
 8001312:	f004 fcb9 	bl	8005c88 <runRadio>

  while (MPU9255_Init(&hi2c1) == 1)
 8001316:	e006      	b.n	8001326 <main+0x7a>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001318:	2110      	movs	r1, #16
 800131a:	481d      	ldr	r0, [pc, #116]	; (8001390 <main+0xe4>)
 800131c:	f005 fd7e 	bl	8006e1c <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8001320:	2064      	movs	r0, #100	; 0x64
 8001322:	f005 f80f 	bl	8006344 <HAL_Delay>
  while (MPU9255_Init(&hi2c1) == 1)
 8001326:	481b      	ldr	r0, [pc, #108]	; (8001394 <main+0xe8>)
 8001328:	f000 fca6 	bl	8001c78 <MPU9255_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b01      	cmp	r3, #1
 8001330:	d0f2      	beq.n	8001318 <main+0x6c>
  }

  HAL_Delay(3000);
 8001332:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001336:	f005 f805 	bl	8006344 <HAL_Delay>
  while (payload_packet.throttle > 1050)
 800133a:	e004      	b.n	8001346 <main+0x9a>
  {
    // Read again
    RX_data();
 800133c:	f004 fcdc 	bl	8005cf8 <RX_data>
    HAL_Delay(20);
 8001340:	2014      	movs	r0, #20
 8001342:	f004 ffff 	bl	8006344 <HAL_Delay>
  while (payload_packet.throttle > 1050)
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <main+0xec>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f240 421a 	movw	r2, #1050	; 0x41a
 800134e:	4293      	cmp	r3, r2
 8001350:	d8f4      	bhi.n	800133c <main+0x90>
  }

  start_time = HAL_GetTick();
 8001352:	f004 ffed 	bl	8006330 <HAL_GetTick>
 8001356:	4603      	mov	r3, r0
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <main+0xf0>)
 800135a:	6013      	str	r3, [r2, #0]
  while ((HAL_GetTick() - start_time) < 4000)
 800135c:	e003      	b.n	8001366 <main+0xba>
  {
    readAll(&hi2c1, &MPU9255);
 800135e:	4910      	ldr	r1, [pc, #64]	; (80013a0 <main+0xf4>)
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <main+0xe8>)
 8001362:	f000 fced 	bl	8001d40 <readAll>
  while ((HAL_GetTick() - start_time) < 4000)
 8001366:	f004 ffe3 	bl	8006330 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <main+0xf0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001376:	d3f2      	bcc.n	800135e <main+0xb2>
  }

  //  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
  //  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  HAL_TIM_Base_Start_IT(&htim4);
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <main+0xf8>)
 800137a:	f007 fc9f 	bl	8008cbc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800137e:	e7fe      	b.n	800137e <main+0xd2>
 8001380:	2000015c 	.word	0x2000015c
 8001384:	20000358 	.word	0x20000358
 8001388:	200001ec 	.word	0x200001ec
 800138c:	20000274 	.word	0x20000274
 8001390:	40010c00 	.word	0x40010c00
 8001394:	200000b0 	.word	0x200000b0
 8001398:	200004cc 	.word	0x200004cc
 800139c:	200002f4 	.word	0x200002f4
 80013a0:	200002b8 	.word	0x200002b8
 80013a4:	200001a4 	.word	0x200001a4

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b090      	sub	sp, #64	; 0x40
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0318 	add.w	r3, r7, #24
 80013b2:	2228      	movs	r2, #40	; 0x28
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f009 f9fe 	bl	800a7b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4618      	mov	r0, r3
 80013f2:	f006 fd2d 	bl	8007e50 <HAL_RCC_OscConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013fc:	f000 fb36 	bl	8001a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001400:	230f      	movs	r3, #15
 8001402:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001404:	2302      	movs	r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2102      	movs	r1, #2
 800141a:	4618      	mov	r0, r3
 800141c:	f006 ff9a 	bl	8008354 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001426:	f000 fb21 	bl	8001a6c <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3740      	adds	r7, #64	; 0x40
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C1_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <MX_I2C1_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_I2C1_Init+0x50>)
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_I2C1_Init+0x58>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_I2C1_Init+0x50>)
 8001452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C1_Init+0x50>)
 8001472:	f005 fced 	bl	8006e50 <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800147c:	f000 faf6 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200000b0 	.word	0x200000b0
 8001488:	40005400 	.word	0x40005400
 800148c:	000186a0 	.word	0x000186a0

08001490 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_SPI2_Init+0x64>)
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <MX_SPI2_Init+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_SPI2_Init+0x64>)
 800149c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014dc:	220a      	movs	r2, #10
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_SPI2_Init+0x64>)
 80014e2:	f007 f8cf 	bl	8008684 <HAL_SPI_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014ec:	f000 fabe 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000104 	.word	0x20000104
 80014f8:	40003800 	.word	0x40003800

080014fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001520:	4a33      	ldr	r2, [pc, #204]	; (80015f0 <MX_TIM3_Init+0xf4>)
 8001522:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001526:	2247      	movs	r2, #71	; 0x47
 8001528:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <MX_TIM3_Init+0xf0>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001530:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001532:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001536:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <MX_TIM3_Init+0xf0>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001544:	4829      	ldr	r0, [pc, #164]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001546:	f007 fc0b 	bl	8008d60 <HAL_TIM_PWM_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001550:	f000 fa8c 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4619      	mov	r1, r3
 8001562:	4822      	ldr	r0, [pc, #136]	; (80015ec <MX_TIM3_Init+0xf0>)
 8001564:	f008 fa40 	bl	80099e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800156e:	f000 fa7d 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001572:	2360      	movs	r3, #96	; 0x60
 8001574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	4619      	mov	r1, r3
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <MX_TIM3_Init+0xf0>)
 800158c:	f007 fde2 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001596:	f000 fa69 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2204      	movs	r2, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4812      	ldr	r0, [pc, #72]	; (80015ec <MX_TIM3_Init+0xf0>)
 80015a2:	f007 fdd7 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80015ac:	f000 fa5e 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2208      	movs	r2, #8
 80015b4:	4619      	mov	r1, r3
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <MX_TIM3_Init+0xf0>)
 80015b8:	f007 fdcc 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80015c2:	f000 fa53 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	220c      	movs	r2, #12
 80015ca:	4619      	mov	r1, r3
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM3_Init+0xf0>)
 80015ce:	f007 fdc1 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80015d8:	f000 fa48 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM3_Init+0xf0>)
 80015de:	f004 fca5 	bl	8005f2c <HAL_TIM_MspPostInit>

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000015c 	.word	0x2000015c
 80015f0:	40000400 	.word	0x40000400

080015f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_TIM4_Init+0x94>)
 8001612:	4a1e      	ldr	r2, [pc, #120]	; (800168c <MX_TIM4_Init+0x98>)
 8001614:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_TIM4_Init+0x94>)
 8001618:	f240 22cf 	movw	r2, #719	; 0x2cf
 800161c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_TIM4_Init+0x94>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <MX_TIM4_Init+0x94>)
 8001626:	f240 32e7 	movw	r2, #999	; 0x3e7
 800162a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_TIM4_Init+0x94>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_TIM4_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001638:	4813      	ldr	r0, [pc, #76]	; (8001688 <MX_TIM4_Init+0x94>)
 800163a:	f007 faef 	bl	8008c1c <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001644:	f000 fa12 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4619      	mov	r1, r3
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <MX_TIM4_Init+0x94>)
 8001656:	f007 fe3b 	bl	80092d0 <HAL_TIM_ConfigClockSource>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001660:	f000 fa04 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_TIM4_Init+0x94>)
 8001672:	f008 f9b9 	bl	80099e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800167c:	f000 f9f6 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200001a4 	.word	0x200001a4
 800168c:	40000800 	.word	0x40000800

08001690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_USART1_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART1_UART_Init+0x4c>)
 80016c8:	f008 f9fe 	bl	8009ac8 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f000 f9cb 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200001ec 	.word	0x200001ec
 80016e0:	40013800 	.word	0x40013800

080016e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <MX_USART2_UART_Init+0x50>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_USART2_UART_Init+0x4c>)
 800171c:	f008 f9d4 	bl	8009ac8 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001726:	f000 f9a1 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000230 	.word	0x20000230
 8001734:	40004400 	.word	0x40004400

08001738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_DMA_Init+0x38>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <MX_DMA_Init+0x38>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6153      	str	r3, [r2, #20]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_DMA_Init+0x38>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	200f      	movs	r0, #15
 800175c:	f004 feed 	bl	800653a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001760:	200f      	movs	r0, #15
 8001762:	f004 ff06 	bl	8006572 <HAL_NVIC_EnableIRQ>

}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001788:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <MX_GPIO_Init+0xd4>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a2e      	ldr	r2, [pc, #184]	; (8001848 <MX_GPIO_Init+0xd4>)
 800178e:	f043 0320 	orr.w	r3, r3, #32
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <MX_GPIO_Init+0xd4>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b29      	ldr	r3, [pc, #164]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a28      	ldr	r2, [pc, #160]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b26      	ldr	r3, [pc, #152]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a22      	ldr	r2, [pc, #136]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <MX_GPIO_Init+0xd4>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CSN_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f241 0130 	movw	r1, #4144	; 0x1030
 80017d6:	481d      	ldr	r0, [pc, #116]	; (800184c <MX_GPIO_Init+0xd8>)
 80017d8:	f005 fb08 	bl	8006dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e2:	481b      	ldr	r0, [pc, #108]	; (8001850 <MX_GPIO_Init+0xdc>)
 80017e4:	f005 fb02 	bl	8006dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CSN_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|LED2_Pin|LED1_Pin;
 80017e8:	f241 0330 	movw	r3, #4144	; 0x1030
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4619      	mov	r1, r3
 8001800:	4812      	ldr	r0, [pc, #72]	; (800184c <MX_GPIO_Init+0xd8>)
 8001802:	f005 f96f 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8001806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2302      	movs	r3, #2
 8001816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <MX_GPIO_Init+0xdc>)
 8001820:	f005 f960 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin;
 8001824:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4619      	mov	r1, r3
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_GPIO_Init+0xd8>)
 800183a:	f005 f953 	bl	8006ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40010c00 	.word	0x40010c00
 8001850:	40010800 	.word	0x40010800

08001854 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af02      	add	r7, sp, #8
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t start = HAL_GetTick();
 800185c:	f004 fd68 	bl	8006330 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

  if (htim->Instance == htim4.Instance)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d173      	bne.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x102>
  {
    RX_data();
 800186e:	f004 fa43 	bl	8005cf8 <RX_data>
    readAll(&hi2c1, &MPU9255);
 8001872:	493f      	ldr	r1, [pc, #252]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001874:	483f      	ldr	r0, [pc, #252]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001876:	f000 fa63 	bl	8001d40 <readAll>

    pid_roll(payload_packet.roll, MPU9255.roll, MPU9255.GyroX, &pid);
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	b298      	uxth	r0, r3
 8001880:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001882:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001884:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	4b3c      	ldr	r3, [pc, #240]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800188a:	f004 f801 	bl	8005890 <pid_roll>
    pid_pitch(payload_packet.pitch, MPU9255.pitch, MPU9255.GyroY, &pid);
 800188e:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	b298      	uxth	r0, r3
 8001894:	4b36      	ldr	r3, [pc, #216]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001896:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001898:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800189e:	f004 f8a7 	bl	80059f0 <pid_pitch>
    pid_yaw(payload_packet.yaw, MPU9255.GyroZ, &pid);
 80018a2:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4a31      	ldr	r2, [pc, #196]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80018aa:	6951      	ldr	r1, [r2, #20]
 80018ac:	4a33      	ldr	r2, [pc, #204]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f004 f94e 	bl	8005b50 <pid_yaw>

    // value PWM
    calculate_motor_output(&esc_right, &esc_left, &servo_right, &servo_left, payload_packet.throttle, &pid);
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	4a30      	ldr	r2, [pc, #192]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80018bc:	9201      	str	r2, [sp, #4]
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80018c2:	4a30      	ldr	r2, [pc, #192]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80018c4:	4930      	ldr	r1, [pc, #192]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80018c6:	4831      	ldr	r0, [pc, #196]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80018c8:	f000 f902 	bl	8001ad0 <calculate_motor_output>

     htim3.Instance->CCR1 = servo_right;
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80018ce:	881a      	ldrh	r2, [r3, #0]
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
     htim3.Instance->CCR2 = servo_left;
 80018d6:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80018d8:	881a      	ldrh	r2, [r3, #0]
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	639a      	str	r2, [r3, #56]	; 0x38
     htim3.Instance->CCR3 = esc_right; // trang
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	63da      	str	r2, [r3, #60]	; 0x3c
     htim3.Instance->CCR4 = esc_left;  // vang
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80018ec:	881a      	ldrh	r2, [r3, #0]
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40

    // send to GUI
   // q_Roll_angle = MPU9255.pitch + 2000;
      q_Roll_angle = MPU9255.GyroY+ 2000 ;
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	4926      	ldr	r1, [pc, #152]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f90a 	bl	8000b14 <__addsf3>
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001906:	601a      	str	r2, [r3, #0]

    sprintf((char *)f_trans, "%d%d", (uint16_t)(2000+set_point), (uint16_t)q_Roll_angle);
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4921      	ldr	r1, [pc, #132]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f900 	bl	8000b14 <__addsf3>
 8001914:	4603      	mov	r3, r0
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fc06 	bl	8001128 <__aeabi_f2uiz>
 800191c:	4603      	mov	r3, r0
 800191e:	b29b      	uxth	r3, r3
 8001920:	461c      	mov	r4, r3
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fbfe 	bl	8001128 <__aeabi_f2uiz>
 800192c:	4603      	mov	r3, r0
 800192e:	b29b      	uxth	r3, r3
 8001930:	4622      	mov	r2, r4
 8001932:	491b      	ldr	r1, [pc, #108]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001934:	481b      	ldr	r0, [pc, #108]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001936:	f008 ff47 	bl	800a7c8 <siprintf>
    SendFrameData(f_trans, FRAME_DATA_TX, f_dest_trans, &f_dest_len_t);
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800193c:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 800193e:	2108      	movs	r1, #8
 8001940:	4818      	ldr	r0, [pc, #96]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001942:	f7ff fc31 	bl	80011a8 <SendFrameData>
    HAL_UART_Transmit(&huart1, f_dest_trans, f_dest_len_t, 1000);
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	4917      	ldr	r1, [pc, #92]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001950:	4817      	ldr	r0, [pc, #92]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001952:	f008 f906 	bl	8009b62 <HAL_UART_Transmit>
  }
  uint32_t time = HAL_GetTick() - start;
 8001956:	f004 fceb 	bl	8006330 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	60bb      	str	r3, [r7, #8]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	200001a4 	.word	0x200001a4
 8001970:	200002b8 	.word	0x200002b8
 8001974:	200000b0 	.word	0x200000b0
 8001978:	200004cc 	.word	0x200004cc
 800197c:	200002e8 	.word	0x200002e8
 8001980:	200003a6 	.word	0x200003a6
 8001984:	200003a4 	.word	0x200003a4
 8001988:	200003aa 	.word	0x200003aa
 800198c:	200003a8 	.word	0x200003a8
 8001990:	2000015c 	.word	0x2000015c
 8001994:	44fa0000 	.word	0x44fa0000
 8001998:	2000037c 	.word	0x2000037c
 800199c:	20000334 	.word	0x20000334
 80019a0:	0800c578 	.word	0x0800c578
 80019a4:	20000338 	.word	0x20000338
 80019a8:	20000354 	.word	0x20000354
 80019ac:	20000340 	.word	0x20000340
 80019b0:	200001ec 	.word	0x200001ec

080019b4 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
 80019c0:	2224      	movs	r2, #36	; 0x24
 80019c2:	491d      	ldr	r1, [pc, #116]	; (8001a38 <HAL_UARTEx_RxEventCallback+0x84>)
 80019c4:	481d      	ldr	r0, [pc, #116]	; (8001a3c <HAL_UARTEx_RxEventCallback+0x88>)
 80019c6:	f008 f95e 	bl	8009c86 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x8c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_UARTEx_RxEventCallback+0x8c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0204 	bic.w	r2, r2, #4
 80019d8:	601a      	str	r2, [r3, #0]
  receive_value(f_recei, (uint8_t *)&pid_para, Size);
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	4918      	ldr	r1, [pc, #96]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 80019e2:	4815      	ldr	r0, [pc, #84]	; (8001a38 <HAL_UARTEx_RxEventCallback+0x84>)
 80019e4:	f7ff fc43 	bl	800126e <receive_value>

  Kp_rate_pitch = pid_para.Kp_p;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <HAL_UARTEx_RxEventCallback+0x94>)
 80019ee:	6013      	str	r3, [r2, #0]
  Ki_rate_pitch = pid_para.Ki_p;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <HAL_UARTEx_RxEventCallback+0x98>)
 80019f6:	6013      	str	r3, [r2, #0]
  Kd_rate_pitch = pid_para.Kd_p;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <HAL_UARTEx_RxEventCallback+0x9c>)
 80019fe:	6013      	str	r3, [r2, #0]

  Kp_angle_pitch = pid_para.Kp_r;
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001a06:	6013      	str	r3, [r2, #0]
  Ki_angle_pitch = pid_para.Ki_r;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001a0e:	6013      	str	r3, [r2, #0]
  Kd_angle_pitch = pid_para.Kd_r;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_UARTEx_RxEventCallback+0xa8>)
 8001a16:	6013      	str	r3, [r2, #0]

  MOTOR_LEFT_OFFSET = pid_para.off_motor_l;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_UARTEx_RxEventCallback+0xac>)
 8001a1e:	6013      	str	r3, [r2, #0]
  MOTOR_RIGHT_OFFSET = pid_para.off_motor_r;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001a26:	6013      	str	r3, [r2, #0]
  set_point =  pid_para.setpoint;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_UARTEx_RxEventCallback+0x90>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001a2e:	6013      	str	r3, [r2, #0]
  //  f_dest_len_r = Size;
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000358 	.word	0x20000358
 8001a3c:	200001ec 	.word	0x200001ec
 8001a40:	20000274 	.word	0x20000274
 8001a44:	20000380 	.word	0x20000380
 8001a48:	20000310 	.word	0x20000310
 8001a4c:	20000314 	.word	0x20000314
 8001a50:	20000318 	.word	0x20000318
 8001a54:	200002f8 	.word	0x200002f8
 8001a58:	200002fc 	.word	0x200002fc
 8001a5c:	20000300 	.word	0x20000300
 8001a60:	20000004 	.word	0x20000004
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000334 	.word	0x20000334

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <Error_Handler+0x8>

08001a76 <map>:
extern volatile float MOTOR_RIGHT_OFFSET ;
extern volatile float MOTOR_LEFT_OFFSET ;
#endif

static int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
 8001a76:	b490      	push	{r4, r7}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	4608      	mov	r0, r1
 8001a80:	4611      	mov	r1, r2
 8001a82:	461a      	mov	r2, r3
 8001a84:	4623      	mov	r3, r4
 8001a86:	80fb      	strh	r3, [r7, #6]
 8001a88:	4603      	mov	r3, r0
 8001a8a:	80bb      	strh	r3, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a94:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001aa2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001aa6:	1a8a      	subs	r2, r1, r2
 8001aa8:	fb03 f202 	mul.w	r2, r3, r2
 8001aac:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001ab0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ab4:	1acb      	subs	r3, r1, r3
 8001ab6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	883b      	ldrh	r3, [r7, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	b21b      	sxth	r3, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc90      	pop	{r4, r7}
 8001acc:	4770      	bx	lr
	...

08001ad0 <calculate_motor_output>:

void calculate_motor_output(uint16_t *esc_right, uint16_t *esc_left, uint16_t *servo_right, uint16_t *servo_left, uint16_t throttle_rc, PID_t *pid)
{
 8001ad0:	b5b0      	push	{r4, r5, r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]

    // value PWM
	throttle_rc = 1150;
 8001ade:	f240 437e 	movw	r3, #1150	; 0x47e
 8001ae2:	843b      	strh	r3, [r7, #32]
    *esc_right = throttle_rc - pid->PID_pitch_out  ;
 8001ae4:	8c3b      	ldrh	r3, [r7, #32]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f8c8 	bl	8000c7c <__aeabi_i2f>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7ff f80b 	bl	8000b10 <__aeabi_fsub>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fb13 	bl	8001128 <__aeabi_f2uiz>
 8001b02:	4603      	mov	r3, r0
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	801a      	strh	r2, [r3, #0]
    *esc_left = throttle_rc + pid->PID_pitch_out ;
 8001b0a:	8c3b      	ldrh	r3, [r7, #32]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f8b5 	bl	8000c7c <__aeabi_i2f>
 8001b12:	4602      	mov	r2, r0
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f7fe fffa 	bl	8000b14 <__addsf3>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fb00 	bl	8001128 <__aeabi_f2uiz>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	801a      	strh	r2, [r3, #0]
    *servo_right = 1500 + pid->PID_roll_out - pid->PID_yaw_out;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	494b      	ldr	r1, [pc, #300]	; (8001c64 <calculate_motor_output+0x194>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe ffec 	bl	8000b14 <__addsf3>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	4619      	mov	r1, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	f7fe ffe2 	bl	8000b10 <__aeabi_fsub>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff faea 	bl	8001128 <__aeabi_f2uiz>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	801a      	strh	r2, [r3, #0]
    *servo_left = 1450 - pid->PID_roll_out - pid->PID_yaw_out;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4841      	ldr	r0, [pc, #260]	; (8001c68 <calculate_motor_output+0x198>)
 8001b64:	f7fe ffd4 	bl	8000b10 <__aeabi_fsub>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7fe ffcc 	bl	8000b10 <__aeabi_fsub>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fad4 	bl	8001128 <__aeabi_f2uiz>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	801a      	strh	r2, [r3, #0]

    if (*esc_right < 1000)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b90:	d203      	bcs.n	8001b9a <calculate_motor_output+0xca>
    {
        *esc_right = 1000;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b98:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_right > 2000)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ba2:	d903      	bls.n	8001bac <calculate_motor_output+0xdc>
    {
        *esc_right = 2000;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001baa:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left < 1000)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb4:	d203      	bcs.n	8001bbe <calculate_motor_output+0xee>
    {
        *esc_left = 1000;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bbc:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left > 2000)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001bc6:	d903      	bls.n	8001bd0 <calculate_motor_output+0x100>
    {
        *esc_left = 2000;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bce:	801a      	strh	r2, [r3, #0]
    }

    //Gioi han Servo


    *esc_right = map(*esc_right, 1000, 2000, MOTOR_RIGHT_OFFSET, MOTOR_RIGHT_OFFSET+900); // limited rate of motors
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b21c      	sxth	r4, r3
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <calculate_motor_output+0x19c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fa7e 	bl	80010dc <__aeabi_f2iz>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b21d      	sxth	r5, r3
 8001be4:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <calculate_motor_output+0x19c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4921      	ldr	r1, [pc, #132]	; (8001c70 <calculate_motor_output+0x1a0>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe ff92 	bl	8000b14 <__addsf3>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fa72 	bl	80010dc <__aeabi_f2iz>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	462b      	mov	r3, r5
 8001c00:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f7ff ff34 	bl	8001a76 <map>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	801a      	strh	r2, [r3, #0]
    *esc_left = map(*esc_left, 1000, 2000, MOTOR_LEFT_OFFSET, MOTOR_LEFT_OFFSET + 900);
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	b21c      	sxth	r4, r3
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <calculate_motor_output+0x1a4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fa5b 	bl	80010dc <__aeabi_f2iz>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b21d      	sxth	r5, r3
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <calculate_motor_output+0x1a4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4910      	ldr	r1, [pc, #64]	; (8001c70 <calculate_motor_output+0x1a0>)
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe ff6f 	bl	8000b14 <__addsf3>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fa4f 	bl	80010dc <__aeabi_f2iz>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	462b      	mov	r3, r5
 8001c46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7ff ff11 	bl	8001a76 <map>
 8001c54:	4603      	mov	r3, r0
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	801a      	strh	r2, [r3, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bdb0      	pop	{r4, r5, r7, pc}
 8001c64:	44bb8000 	.word	0x44bb8000
 8001c68:	44b54000 	.word	0x44b54000
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	44610000 	.word	0x44610000
 8001c74:	20000004 	.word	0x20000004

08001c78 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af04      	add	r7, sp, #16
 8001c7e:	6078      	str	r0, [r7, #4]
	printf("**************************** \r\n");
	printf("MPU9250 STM32 Implementation \r\n");
	printf("**************************** \r\n");
	#endif
	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 8001c80:	2364      	movs	r3, #100	; 0x64
 8001c82:	9302      	str	r3, [sp, #8]
 8001c84:	2301      	movs	r3, #1
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	f107 030f 	add.w	r3, r7, #15
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2275      	movs	r2, #117	; 0x75
 8001c92:	21d0      	movs	r1, #208	; 0xd0
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f005 fb19 	bl	80072cc <HAL_I2C_Mem_Read>

#if DEBUG_MPU
		printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);
#endif

	if (readData == 113) {
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	2b71      	cmp	r3, #113	; 0x71
 8001c9e:	d13e      	bne.n	8001d1e <MPU9255_Init+0xa6>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 8001ca0:	4921      	ldr	r1, [pc, #132]	; (8001d28 <MPU9255_Init+0xb0>)
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f001 fc98 	bl	80035d8 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 8001ca8:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <MPU9255_Init+0xb4>)
 8001caa:	4921      	ldr	r1, [pc, #132]	; (8001d30 <MPU9255_Init+0xb8>)
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f001 f85d 	bl	8002d6c <calibrateMPU9250>
		HAL_Delay(1000);
 8001cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb6:	f004 fb45 	bl	8006344 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 ff74 	bl	8002ba8 <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 8001cc0:	2322      	movs	r3, #34	; 0x22
 8001cc2:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 8001cc4:	2364      	movs	r3, #100	; 0x64
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	f107 030e 	add.w	r3, r7, #14
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2237      	movs	r2, #55	; 0x37
 8001cd6:	21d0      	movs	r1, #208	; 0xd0
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f005 f9fd 	bl	80070d8 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 8001cde:	2364      	movs	r3, #100	; 0x64
 8001ce0:	9302      	str	r3, [sp, #8]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	f107 030f 	add.w	r3, r7, #15
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2301      	movs	r3, #1
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2118      	movs	r1, #24
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f005 faea 	bl	80072cc <HAL_I2C_Mem_Read>
#if (DEBUG_MPU)
		printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);
#endif
		HAL_Delay(1000);
 8001cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cfc:	f004 fb22 	bl	8006344 <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <MPU9255_Init+0xbc>)
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fd14 	bl	8002730 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 8001d08:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <MPU9255_Init+0xc0>)
 8001d0a:	490c      	ldr	r1, [pc, #48]	; (8001d3c <MPU9255_Init+0xc4>)
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fde1 	bl	80028d4 <calibrateMag>

		HAL_Delay(1000);
 8001d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d16:	f004 fb15 	bl	8006344 <HAL_Delay>
		return 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <MPU9255_Init+0xa8>
	}
	return 1; // Loop forever if communication doesn't happen
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000040c 	.word	0x2000040c
 8001d2c:	200003e8 	.word	0x200003e8
 8001d30:	200003dc 	.word	0x200003dc
 8001d34:	200003d0 	.word	0x200003d0
 8001d38:	20000400 	.word	0x20000400
 8001d3c:	200003f4 	.word	0x200003f4

08001d40 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 8001d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d44:	b08b      	sub	sp, #44	; 0x2c
 8001d46:	af06      	add	r7, sp, #24
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2301      	movs	r3, #1
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	f107 030f 	add.w	r3, r7, #15
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	223a      	movs	r2, #58	; 0x3a
 8001d5e:	21d0      	movs	r1, #208	; 0xd0
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f005 fab3 	bl	80072cc <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8123 	beq.w	8001fb8 <readAll+0x278>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 8001d72:	4997      	ldr	r1, [pc, #604]	; (8001fd0 <readAll+0x290>)
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fc29 	bl	80025cc <readAccelData>
		getAres();
 8001d7a:	f000 fbf9 	bl	8002570 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 8001d7e:	4b94      	ldr	r3, [pc, #592]	; (8001fd0 <readAll+0x290>)
 8001d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe ff79 	bl	8000c7c <__aeabi_i2f>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b91      	ldr	r3, [pc, #580]	; (8001fd4 <readAll+0x294>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f7fe ffc6 	bl	8000d24 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <readAll+0x298>)
 8001d9e:	601a      	str	r2, [r3, #0]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 8001da0:	4b8b      	ldr	r3, [pc, #556]	; (8001fd0 <readAll+0x290>)
 8001da2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ff68 	bl	8000c7c <__aeabi_i2f>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b89      	ldr	r3, [pc, #548]	; (8001fd4 <readAll+0x294>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	4610      	mov	r0, r2
 8001db6:	f7fe ffb5 	bl	8000d24 <__aeabi_fmul>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b87      	ldr	r3, [pc, #540]	; (8001fdc <readAll+0x29c>)
 8001dc0:	601a      	str	r2, [r3, #0]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 8001dc2:	4b83      	ldr	r3, [pc, #524]	; (8001fd0 <readAll+0x290>)
 8001dc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe ff57 	bl	8000c7c <__aeabi_i2f>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b80      	ldr	r3, [pc, #512]	; (8001fd4 <readAll+0x294>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7fe ffa4 	bl	8000d24 <__aeabi_fmul>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <readAll+0x2a0>)
 8001de2:	601a      	str	r2, [r3, #0]

		DataStruct->AccelX = ax;
 8001de4:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <readAll+0x298>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8001dec:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <readAll+0x29c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8001df4:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <readAll+0x2a0>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 8001dfc:	4979      	ldr	r1, [pc, #484]	; (8001fe4 <readAll+0x2a4>)
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fc17 	bl	8002632 <readGyroData>
		getGres();
 8001e04:	f000 fb82 	bl	800250c <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8001e08:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <readAll+0x2a4>)
 8001e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe ff34 	bl	8000c7c <__aeabi_i2f>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b74      	ldr	r3, [pc, #464]	; (8001fe8 <readAll+0x2a8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f7fe ff81 	bl	8000d24 <__aeabi_fmul>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b71      	ldr	r3, [pc, #452]	; (8001fec <readAll+0x2ac>)
 8001e28:	601a      	str	r2, [r3, #0]
		gy = (float)gyroCount[1]*gRes;
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <readAll+0x2a4>)
 8001e2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe ff23 	bl	8000c7c <__aeabi_i2f>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b6b      	ldr	r3, [pc, #428]	; (8001fe8 <readAll+0x2a8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f7fe ff70 	bl	8000d24 <__aeabi_fmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <readAll+0x2b0>)
 8001e4a:	601a      	str	r2, [r3, #0]
		gz = (float)gyroCount[2]*gRes;
 8001e4c:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <readAll+0x2a4>)
 8001e4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe ff12 	bl	8000c7c <__aeabi_i2f>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b63      	ldr	r3, [pc, #396]	; (8001fe8 <readAll+0x2a8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f7fe ff5f 	bl	8000d24 <__aeabi_fmul>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b62      	ldr	r3, [pc, #392]	; (8001ff4 <readAll+0x2b4>)
 8001e6c:	601a      	str	r2, [r3, #0]

		DataStruct->GyroX = gx;
 8001e6e:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <readAll+0x2ac>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 8001e76:	4b5e      	ldr	r3, [pc, #376]	; (8001ff0 <readAll+0x2b0>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <readAll+0x2b4>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 8001e86:	495c      	ldr	r1, [pc, #368]	; (8001ff8 <readAll+0x2b8>)
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fc05 	bl	8002698 <readMagData>
		getMres();
 8001e8e:	f000 fb1f 	bl	80024d0 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <readAll+0x2b8>)
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe feef 	bl	8000c7c <__aeabi_i2f>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	4b56      	ldr	r3, [pc, #344]	; (8001ffc <readAll+0x2bc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f7fe ff3c 	bl	8000d24 <__aeabi_fmul>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b53      	ldr	r3, [pc, #332]	; (8002000 <readAll+0x2c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f7fe ff34 	bl	8000d24 <__aeabi_fmul>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b50      	ldr	r3, [pc, #320]	; (8002004 <readAll+0x2c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f7fe fe22 	bl	8000b10 <__aeabi_fsub>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <readAll+0x2c8>)
 8001ed2:	601a      	str	r2, [r3, #0]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <readAll+0x2b8>)
 8001ed6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fece 	bl	8000c7c <__aeabi_i2f>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <readAll+0x2bc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f7fe ff1b 	bl	8000d24 <__aeabi_fmul>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b43      	ldr	r3, [pc, #268]	; (8002000 <readAll+0x2c0>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f7fe ff13 	bl	8000d24 <__aeabi_fmul>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b40      	ldr	r3, [pc, #256]	; (8002004 <readAll+0x2c4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7fe fe01 	bl	8000b10 <__aeabi_fsub>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <readAll+0x2cc>)
 8001f14:	601a      	str	r2, [r3, #0]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <readAll+0x2b8>)
 8001f18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fead 	bl	8000c7c <__aeabi_i2f>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <readAll+0x2bc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f7fe fefa 	bl	8000d24 <__aeabi_fmul>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <readAll+0x2c0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f7fe fef2 	bl	8000d24 <__aeabi_fmul>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <readAll+0x2c4>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f7fe fde0 	bl	8000b10 <__aeabi_fsub>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <readAll+0x2d0>)
 8001f56:	601a      	str	r2, [r3, #0]
		mx *= magScale[0];
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <readAll+0x2d4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2a      	ldr	r2, [pc, #168]	; (8002008 <readAll+0x2c8>)
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fede 	bl	8000d24 <__aeabi_fmul>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b26      	ldr	r3, [pc, #152]	; (8002008 <readAll+0x2c8>)
 8001f6e:	601a      	str	r2, [r3, #0]
		my *= magScale[1];
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <readAll+0x2d4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4a25      	ldr	r2, [pc, #148]	; (800200c <readAll+0x2cc>)
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fed2 	bl	8000d24 <__aeabi_fmul>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <readAll+0x2cc>)
 8001f86:	601a      	str	r2, [r3, #0]
		mz *= magScale[2];
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <readAll+0x2d4>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a20      	ldr	r2, [pc, #128]	; (8002010 <readAll+0x2d0>)
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fec6 	bl	8000d24 <__aeabi_fmul>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <readAll+0x2d0>)
 8001f9e:	601a      	str	r2, [r3, #0]

		DataStruct->MagX = mx;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <readAll+0x2c8>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <readAll+0x2cc>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <readAll+0x2d0>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8001fb8:	f004 f9ba 	bl	8006330 <HAL_GetTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a16      	ldr	r2, [pc, #88]	; (8002018 <readAll+0x2d8>)
 8001fc0:	6013      	str	r3, [r2, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <readAll+0x2d8>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <readAll+0x2dc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	e027      	b.n	8002020 <readAll+0x2e0>
 8001fd0:	200003b8 	.word	0x200003b8
 8001fd4:	200003ac 	.word	0x200003ac
 8001fd8:	20000440 	.word	0x20000440
 8001fdc:	20000444 	.word	0x20000444
 8001fe0:	20000448 	.word	0x20000448
 8001fe4:	200003c0 	.word	0x200003c0
 8001fe8:	200003b0 	.word	0x200003b0
 8001fec:	2000044c 	.word	0x2000044c
 8001ff0:	20000450 	.word	0x20000450
 8001ff4:	20000454 	.word	0x20000454
 8001ff8:	200003c8 	.word	0x200003c8
 8001ffc:	200003b4 	.word	0x200003b4
 8002000:	200003d0 	.word	0x200003d0
 8002004:	200003f4 	.word	0x200003f4
 8002008:	20000458 	.word	0x20000458
 800200c:	2000045c 	.word	0x2000045c
 8002010:	20000460 	.word	0x20000460
 8002014:	20000400 	.word	0x20000400
 8002018:	2000043c 	.word	0x2000043c
 800201c:	20000438 	.word	0x20000438
 8002020:	f7fe fe28 	bl	8000c74 <__aeabi_ui2f>
 8002024:	4603      	mov	r3, r0
 8002026:	499c      	ldr	r1, [pc, #624]	; (8002298 <readAll+0x558>)
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe ff2f 	bl	8000e8c <__aeabi_fdiv>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	4b9a      	ldr	r3, [pc, #616]	; (800229c <readAll+0x55c>)
 8002034:	601a      	str	r2, [r3, #0]
	lastUpdate = Now;
 8002036:	4b9a      	ldr	r3, [pc, #616]	; (80022a0 <readAll+0x560>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a9a      	ldr	r2, [pc, #616]	; (80022a4 <readAll+0x564>)
 800203c:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 800203e:	4b9a      	ldr	r3, [pc, #616]	; (80022a8 <readAll+0x568>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a96      	ldr	r2, [pc, #600]	; (800229c <readAll+0x55c>)
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fd63 	bl	8000b14 <__addsf3>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b95      	ldr	r3, [pc, #596]	; (80022a8 <readAll+0x568>)
 8002054:	601a      	str	r2, [r3, #0]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 8002056:	4b95      	ldr	r3, [pc, #596]	; (80022ac <readAll+0x56c>)
 8002058:	681c      	ldr	r4, [r3, #0]
 800205a:	4b95      	ldr	r3, [pc, #596]	; (80022b0 <readAll+0x570>)
 800205c:	681d      	ldr	r5, [r3, #0]
 800205e:	4b95      	ldr	r3, [pc, #596]	; (80022b4 <readAll+0x574>)
 8002060:	681e      	ldr	r6, [r3, #0]
 8002062:	4b95      	ldr	r3, [pc, #596]	; (80022b8 <readAll+0x578>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f9d6 	bl	8000418 <__aeabi_f2d>
 800206c:	a388      	add	r3, pc, #544	; (adr r3, 8002290 <readAll+0x550>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fa29 	bl	80004c8 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b8e      	ldr	r3, [pc, #568]	; (80022bc <readAll+0x57c>)
 8002084:	f7fe fb4a 	bl	800071c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fcea 	bl	8000a68 <__aeabi_d2f>
 8002094:	4681      	mov	r9, r0
 8002096:	4b8a      	ldr	r3, [pc, #552]	; (80022c0 <readAll+0x580>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe f9bc 	bl	8000418 <__aeabi_f2d>
 80020a0:	a37b      	add	r3, pc, #492	; (adr r3, 8002290 <readAll+0x550>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe fa0f 	bl	80004c8 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b81      	ldr	r3, [pc, #516]	; (80022bc <readAll+0x57c>)
 80020b8:	f7fe fb30 	bl	800071c <__aeabi_ddiv>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fcd0 	bl	8000a68 <__aeabi_d2f>
 80020c8:	4680      	mov	r8, r0
 80020ca:	4b7e      	ldr	r3, [pc, #504]	; (80022c4 <readAll+0x584>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe f9a2 	bl	8000418 <__aeabi_f2d>
 80020d4:	a36e      	add	r3, pc, #440	; (adr r3, 8002290 <readAll+0x550>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe f9f5 	bl	80004c8 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b74      	ldr	r3, [pc, #464]	; (80022bc <readAll+0x57c>)
 80020ec:	f7fe fb16 	bl	800071c <__aeabi_ddiv>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fcb6 	bl	8000a68 <__aeabi_d2f>
 80020fc:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <readAll+0x588>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a72      	ldr	r2, [pc, #456]	; (80022cc <readAll+0x58c>)
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	4972      	ldr	r1, [pc, #456]	; (80022d0 <readAll+0x590>)
 8002106:	6809      	ldr	r1, [r1, #0]
 8002108:	9104      	str	r1, [sp, #16]
 800210a:	9203      	str	r2, [sp, #12]
 800210c:	9302      	str	r3, [sp, #8]
 800210e:	9001      	str	r0, [sp, #4]
 8002110:	f8cd 8000 	str.w	r8, [sp]
 8002114:	464b      	mov	r3, r9
 8002116:	4632      	mov	r2, r6
 8002118:	4629      	mov	r1, r5
 800211a:	4620      	mov	r0, r4
 800211c:	f001 ff24 	bl	8003f68 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8002120:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <readAll+0x594>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a6b      	ldr	r2, [pc, #428]	; (80022d4 <readAll+0x594>)
 8002126:	6892      	ldr	r2, [r2, #8]
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fdfa 	bl	8000d24 <__aeabi_fmul>
 8002130:	4603      	mov	r3, r0
 8002132:	461c      	mov	r4, r3
 8002134:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <readAll+0x594>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a66      	ldr	r2, [pc, #408]	; (80022d4 <readAll+0x594>)
 800213a:	68d2      	ldr	r2, [r2, #12]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fdf0 	bl	8000d24 <__aeabi_fmul>
 8002144:	4603      	mov	r3, r0
 8002146:	4619      	mov	r1, r3
 8002148:	4620      	mov	r0, r4
 800214a:	f7fe fce3 	bl	8000b14 <__addsf3>
 800214e:	4603      	mov	r3, r0
 8002150:	4619      	mov	r1, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fcde 	bl	8000b14 <__addsf3>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	4b5e      	ldr	r3, [pc, #376]	; (80022d8 <readAll+0x598>)
 800215e:	601a      	str	r2, [r3, #0]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8002160:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <readAll+0x594>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <readAll+0x594>)
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fdda 	bl	8000d24 <__aeabi_fmul>
 8002170:	4603      	mov	r3, r0
 8002172:	461c      	mov	r4, r3
 8002174:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <readAll+0x594>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a56      	ldr	r2, [pc, #344]	; (80022d4 <readAll+0x594>)
 800217a:	6852      	ldr	r2, [r2, #4]
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fdd0 	bl	8000d24 <__aeabi_fmul>
 8002184:	4603      	mov	r3, r0
 8002186:	4619      	mov	r1, r3
 8002188:	4620      	mov	r0, r4
 800218a:	f7fe fcc3 	bl	8000b14 <__addsf3>
 800218e:	4603      	mov	r3, r0
 8002190:	461c      	mov	r4, r3
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <readAll+0x594>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4a4f      	ldr	r2, [pc, #316]	; (80022d4 <readAll+0x594>)
 8002198:	6892      	ldr	r2, [r2, #8]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fdc1 	bl	8000d24 <__aeabi_fmul>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4619      	mov	r1, r3
 80021a6:	4620      	mov	r0, r4
 80021a8:	f7fe fcb2 	bl	8000b10 <__aeabi_fsub>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461c      	mov	r4, r3
 80021b0:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <readAll+0x594>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a47      	ldr	r2, [pc, #284]	; (80022d4 <readAll+0x594>)
 80021b6:	68d2      	ldr	r2, [r2, #12]
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fdb2 	bl	8000d24 <__aeabi_fmul>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7fe fca3 	bl	8000b10 <__aeabi_fsub>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <readAll+0x59c>)
 80021d0:	601a      	str	r2, [r3, #0]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 80021d2:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <readAll+0x594>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a3f      	ldr	r2, [pc, #252]	; (80022d4 <readAll+0x594>)
 80021d8:	6852      	ldr	r2, [r2, #4]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fda1 	bl	8000d24 <__aeabi_fmul>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461c      	mov	r4, r3
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <readAll+0x594>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <readAll+0x594>)
 80021ec:	68d2      	ldr	r2, [r2, #12]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fd97 	bl	8000d24 <__aeabi_fmul>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4619      	mov	r1, r3
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7fe fc8a 	bl	8000b14 <__addsf3>
 8002200:	4603      	mov	r3, r0
 8002202:	4619      	mov	r1, r3
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fc85 	bl	8000b14 <__addsf3>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <readAll+0x5a0>)
 8002210:	601a      	str	r2, [r3, #0]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <readAll+0x594>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a2f      	ldr	r2, [pc, #188]	; (80022d4 <readAll+0x594>)
 8002218:	68d2      	ldr	r2, [r2, #12]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fd81 	bl	8000d24 <__aeabi_fmul>
 8002222:	4603      	mov	r3, r0
 8002224:	461c      	mov	r4, r3
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <readAll+0x594>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <readAll+0x594>)
 800222c:	6892      	ldr	r2, [r2, #8]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fd77 	bl	8000d24 <__aeabi_fmul>
 8002236:	4603      	mov	r3, r0
 8002238:	4619      	mov	r1, r3
 800223a:	4620      	mov	r0, r4
 800223c:	f7fe fc68 	bl	8000b10 <__aeabi_fsub>
 8002240:	4603      	mov	r3, r0
 8002242:	4619      	mov	r1, r3
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fc65 	bl	8000b14 <__addsf3>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <readAll+0x5a4>)
 8002250:	601a      	str	r2, [r3, #0]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <readAll+0x594>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <readAll+0x594>)
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fd61 	bl	8000d24 <__aeabi_fmul>
 8002262:	4603      	mov	r3, r0
 8002264:	461c      	mov	r4, r3
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <readAll+0x594>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <readAll+0x594>)
 800226c:	6852      	ldr	r2, [r2, #4]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fd57 	bl	8000d24 <__aeabi_fmul>
 8002276:	4603      	mov	r3, r0
 8002278:	4619      	mov	r1, r3
 800227a:	4620      	mov	r0, r4
 800227c:	f7fe fc48 	bl	8000b10 <__aeabi_fsub>
 8002280:	4603      	mov	r3, r0
 8002282:	461c      	mov	r4, r3
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <readAll+0x594>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <readAll+0x594>)
 800228a:	6892      	ldr	r2, [r2, #8]
 800228c:	e02c      	b.n	80022e8 <readAll+0x5a8>
 800228e:	bf00      	nop
 8002290:	35f80991 	.word	0x35f80991
 8002294:	40092492 	.word	0x40092492
 8002298:	447a0000 	.word	0x447a0000
 800229c:	20000430 	.word	0x20000430
 80022a0:	2000043c 	.word	0x2000043c
 80022a4:	20000438 	.word	0x20000438
 80022a8:	20000434 	.word	0x20000434
 80022ac:	20000440 	.word	0x20000440
 80022b0:	20000444 	.word	0x20000444
 80022b4:	20000448 	.word	0x20000448
 80022b8:	2000044c 	.word	0x2000044c
 80022bc:	40668000 	.word	0x40668000
 80022c0:	20000450 	.word	0x20000450
 80022c4:	20000454 	.word	0x20000454
 80022c8:	2000045c 	.word	0x2000045c
 80022cc:	20000458 	.word	0x20000458
 80022d0:	20000460 	.word	0x20000460
 80022d4:	20000010 	.word	0x20000010
 80022d8:	20000470 	.word	0x20000470
 80022dc:	20000474 	.word	0x20000474
 80022e0:	20000478 	.word	0x20000478
 80022e4:	2000047c 	.word	0x2000047c
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fd1a 	bl	8000d24 <__aeabi_fmul>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7fe fc0b 	bl	8000b10 <__aeabi_fsub>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461c      	mov	r4, r3
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <readAll+0x748>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	4a61      	ldr	r2, [pc, #388]	; (8002488 <readAll+0x748>)
 8002304:	68d2      	ldr	r2, [r2, #12]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe fd0b 	bl	8000d24 <__aeabi_fmul>
 800230e:	4603      	mov	r3, r0
 8002310:	4619      	mov	r1, r3
 8002312:	4620      	mov	r0, r4
 8002314:	f7fe fbfe 	bl	8000b14 <__addsf3>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	4b5b      	ldr	r3, [pc, #364]	; (800248c <readAll+0x74c>)
 800231e:	601a      	str	r2, [r3, #0]

	pitch = -asinf(a32);
 8002320:	4b5b      	ldr	r3, [pc, #364]	; (8002490 <readAll+0x750>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f008 ff31 	bl	800b18c <asinf>
 800232a:	4603      	mov	r3, r0
 800232c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002330:	4a58      	ldr	r2, [pc, #352]	; (8002494 <readAll+0x754>)
 8002332:	6013      	str	r3, [r2, #0]
	roll  = atan2f(a31, a33);
 8002334:	4b58      	ldr	r3, [pc, #352]	; (8002498 <readAll+0x758>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a54      	ldr	r2, [pc, #336]	; (800248c <readAll+0x74c>)
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f008 ff44 	bl	800b1cc <atan2f>
 8002344:	4603      	mov	r3, r0
 8002346:	4a55      	ldr	r2, [pc, #340]	; (800249c <readAll+0x75c>)
 8002348:	6013      	str	r3, [r2, #0]
	yaw   = atan2f(a12, a22);
 800234a:	4b55      	ldr	r3, [pc, #340]	; (80024a0 <readAll+0x760>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a55      	ldr	r2, [pc, #340]	; (80024a4 <readAll+0x764>)
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f008 ff39 	bl	800b1cc <atan2f>
 800235a:	4603      	mov	r3, r0
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <readAll+0x768>)
 800235e:	6013      	str	r3, [r2, #0]
	pitch *= 180.0f / PI;
 8002360:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <readAll+0x754>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f857 	bl	8000418 <__aeabi_f2d>
 800236a:	a345      	add	r3, pc, #276	; (adr r3, 8002480 <readAll+0x740>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f8aa 	bl	80004c8 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fb74 	bl	8000a68 <__aeabi_d2f>
 8002380:	4603      	mov	r3, r0
 8002382:	4a44      	ldr	r2, [pc, #272]	; (8002494 <readAll+0x754>)
 8002384:	6013      	str	r3, [r2, #0]
	yaw   *= 180.0f / PI;
 8002386:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <readAll+0x768>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f844 	bl	8000418 <__aeabi_f2d>
 8002390:	a33b      	add	r3, pc, #236	; (adr r3, 8002480 <readAll+0x740>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fe f897 	bl	80004c8 <__aeabi_dmul>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7fe fb61 	bl	8000a68 <__aeabi_d2f>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4a3f      	ldr	r2, [pc, #252]	; (80024a8 <readAll+0x768>)
 80023aa:	6013      	str	r3, [r2, #0]
	yaw   += 5.53f; // Declination
 80023ac:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <readAll+0x768>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	493e      	ldr	r1, [pc, #248]	; (80024ac <readAll+0x76c>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fbae 	bl	8000b14 <__addsf3>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <readAll+0x768>)
 80023be:	601a      	str	r2, [r3, #0]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <readAll+0x768>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f04f 0100 	mov.w	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fe49 	bl	8001060 <__aeabi_fcmplt>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <readAll+0x6a8>
 80023d4:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <readAll+0x768>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4935      	ldr	r1, [pc, #212]	; (80024b0 <readAll+0x770>)
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fb9a 	bl	8000b14 <__addsf3>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <readAll+0x768>)
 80023e6:	601a      	str	r2, [r3, #0]
	roll  *= 180.0f / PI;
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <readAll+0x75c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f813 	bl	8000418 <__aeabi_f2d>
 80023f2:	a323      	add	r3, pc, #140	; (adr r3, 8002480 <readAll+0x740>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fe f866 	bl	80004c8 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fb30 	bl	8000a68 <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	4a24      	ldr	r2, [pc, #144]	; (800249c <readAll+0x75c>)
 800240c:	6013      	str	r3, [r2, #0]
	lin_ax = ax + a31;
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <readAll+0x774>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <readAll+0x758>)
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fb7b 	bl	8000b14 <__addsf3>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <readAll+0x778>)
 8002424:	601a      	str	r2, [r3, #0]
	lin_ay = ay + a32;
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <readAll+0x77c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a19      	ldr	r2, [pc, #100]	; (8002490 <readAll+0x750>)
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fb6f 	bl	8000b14 <__addsf3>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <readAll+0x780>)
 800243c:	601a      	str	r2, [r3, #0]
	lin_az = az - a33;
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <readAll+0x784>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <readAll+0x74c>)
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fb61 	bl	8000b10 <__aeabi_fsub>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <readAll+0x788>)
 8002454:	601a      	str	r2, [r3, #0]


	DataStruct->yaw = yaw;
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <readAll+0x768>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <readAll+0x754>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <readAll+0x75c>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
#if DEBUG_MPU
//	printf("Roll: %f		Pitch: %f		Yaz: %f\n",roll,pitch,yaw);
#endif
	sum = 0;
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <readAll+0x78c>)
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
	}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002480:	d0051a32 	.word	0xd0051a32
 8002484:	404ca2e8 	.word	0x404ca2e8
 8002488:	20000010 	.word	0x20000010
 800248c:	20000480 	.word	0x20000480
 8002490:	2000047c 	.word	0x2000047c
 8002494:	20000424 	.word	0x20000424
 8002498:	20000478 	.word	0x20000478
 800249c:	2000042c 	.word	0x2000042c
 80024a0:	20000470 	.word	0x20000470
 80024a4:	20000474 	.word	0x20000474
 80024a8:	20000428 	.word	0x20000428
 80024ac:	40b0f5c3 	.word	0x40b0f5c3
 80024b0:	43b40000 	.word	0x43b40000
 80024b4:	20000440 	.word	0x20000440
 80024b8:	20000464 	.word	0x20000464
 80024bc:	20000444 	.word	0x20000444
 80024c0:	20000468 	.word	0x20000468
 80024c4:	20000448 	.word	0x20000448
 80024c8:	2000046c 	.word	0x2000046c
 80024cc:	20000434 	.word	0x20000434

080024d0 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  switch (Mscale)
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <getMres+0x2c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <getMres+0x12>
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d004      	beq.n	80024ea <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 80024e0:	e007      	b.n	80024f2 <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <getMres+0x30>)
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <getMres+0x34>)
 80024e6:	601a      	str	r2, [r3, #0]
          break;
 80024e8:	e003      	b.n	80024f2 <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <getMres+0x30>)
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <getMres+0x38>)
 80024ee:	601a      	str	r2, [r3, #0]
          break;
 80024f0:	bf00      	nop
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	2000000a 	.word	0x2000000a
 8002500:	200003b4 	.word	0x200003b4
 8002504:	40bfebff 	.word	0x40bfebff
 8002508:	3fbfebff 	.word	0x3fbfebff

0800250c <getGres>:

void getGres() {
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  switch (Gscale)
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <getGres+0x4c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d81b      	bhi.n	8002550 <getGres+0x44>
 8002518:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <getGres+0x14>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	08002531 	.word	0x08002531
 8002524:	08002539 	.word	0x08002539
 8002528:	08002541 	.word	0x08002541
 800252c:	08002549 	.word	0x08002549
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <getGres+0x50>)
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <getGres+0x54>)
 8002534:	601a      	str	r2, [r3, #0]
          break;
 8002536:	e00b      	b.n	8002550 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <getGres+0x50>)
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <getGres+0x58>)
 800253c:	601a      	str	r2, [r3, #0]
          break;
 800253e:	e007      	b.n	8002550 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <getGres+0x50>)
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <getGres+0x5c>)
 8002544:	601a      	str	r2, [r3, #0]
          break;
 8002546:	e003      	b.n	8002550 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <getGres+0x50>)
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <getGres+0x60>)
 800254c:	601a      	str	r2, [r3, #0]
          break;
 800254e:	bf00      	nop
  }
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20000008 	.word	0x20000008
 800255c:	200003b0 	.word	0x200003b0
 8002560:	3bfa0000 	.word	0x3bfa0000
 8002564:	3c7a0000 	.word	0x3c7a0000
 8002568:	3cfa0000 	.word	0x3cfa0000
 800256c:	3d7a0000 	.word	0x3d7a0000

08002570 <getAres>:

void getAres() {
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  switch (Ascale)
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <getAres+0x54>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d81f      	bhi.n	80025bc <getAres+0x4c>
 800257c:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <getAres+0x14>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	08002595 	.word	0x08002595
 8002588:	0800259f 	.word	0x0800259f
 800258c:	080025a9 	.word	0x080025a9
 8002590:	080025b3 	.word	0x080025b3
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <getAres+0x58>)
 8002596:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800259a:	601a      	str	r2, [r3, #0]
          break;
 800259c:	e00e      	b.n	80025bc <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <getAres+0x58>)
 80025a0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80025a4:	601a      	str	r2, [r3, #0]
          break;
 80025a6:	e009      	b.n	80025bc <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <getAres+0x58>)
 80025aa:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80025ae:	601a      	str	r2, [r3, #0]
          break;
 80025b0:	e004      	b.n	80025bc <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <getAres+0x58>)
 80025b4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80025b8:	601a      	str	r2, [r3, #0]
          break;
 80025ba:	bf00      	nop
  }
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	20000009 	.word	0x20000009
 80025c8:	200003ac 	.word	0x200003ac

080025cc <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af04      	add	r7, sp, #16
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 80025d6:	2364      	movs	r3, #100	; 0x64
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2306      	movs	r3, #6
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2301      	movs	r3, #1
 80025e6:	223b      	movs	r2, #59	; 0x3b
 80025e8:	21d0      	movs	r1, #208	; 0xd0
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f004 fe6e 	bl	80072cc <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80025f0:	7a3b      	ldrb	r3, [r7, #8]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	b21a      	sxth	r2, r3
 80025f6:	7a7b      	ldrb	r3, [r7, #9]
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	b21a      	sxth	r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8002602:	7abb      	ldrb	r3, [r7, #10]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	b219      	sxth	r1, r3
 8002608:	7afb      	ldrb	r3, [r7, #11]
 800260a:	b21a      	sxth	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3302      	adds	r3, #2
 8002610:	430a      	orrs	r2, r1
 8002612:	b212      	sxth	r2, r2
 8002614:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8002616:	7b3b      	ldrb	r3, [r7, #12]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	b219      	sxth	r1, r3
 800261c:	7b7b      	ldrb	r3, [r7, #13]
 800261e:	b21a      	sxth	r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	3304      	adds	r3, #4
 8002624:	430a      	orrs	r2, r1
 8002626:	b212      	sxth	r2, r2
 8002628:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8002632:	b580      	push	{r7, lr}
 8002634:	b088      	sub	sp, #32
 8002636:	af04      	add	r7, sp, #16
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 800263c:	2364      	movs	r3, #100	; 0x64
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	2306      	movs	r3, #6
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2301      	movs	r3, #1
 800264c:	2243      	movs	r2, #67	; 0x43
 800264e:	21d0      	movs	r1, #208	; 0xd0
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f004 fe3b 	bl	80072cc <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8002656:	7a3b      	ldrb	r3, [r7, #8]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	b21a      	sxth	r2, r3
 800265c:	7a7b      	ldrb	r3, [r7, #9]
 800265e:	b21b      	sxth	r3, r3
 8002660:	4313      	orrs	r3, r2
 8002662:	b21a      	sxth	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8002668:	7abb      	ldrb	r3, [r7, #10]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	b219      	sxth	r1, r3
 800266e:	7afb      	ldrb	r3, [r7, #11]
 8002670:	b21a      	sxth	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	3302      	adds	r3, #2
 8002676:	430a      	orrs	r2, r1
 8002678:	b212      	sxth	r2, r2
 800267a:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 800267c:	7b3b      	ldrb	r3, [r7, #12]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	b219      	sxth	r1, r3
 8002682:	7b7b      	ldrb	r3, [r7, #13]
 8002684:	b21a      	sxth	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	3304      	adds	r3, #4
 800268a:	430a      	orrs	r2, r1
 800268c:	b212      	sxth	r2, r2
 800268e:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af04      	add	r7, sp, #16
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 80026a2:	2364      	movs	r3, #100	; 0x64
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	2301      	movs	r3, #1
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	f107 0316 	add.w	r3, r7, #22
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2301      	movs	r3, #1
 80026b2:	2202      	movs	r2, #2
 80026b4:	2118      	movs	r1, #24
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f004 fe08 	bl	80072cc <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 80026bc:	7dbb      	ldrb	r3, [r7, #22]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d030      	beq.n	8002728 <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 80026c6:	2364      	movs	r3, #100	; 0x64
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	2307      	movs	r3, #7
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2301      	movs	r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	2118      	movs	r1, #24
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f004 fdf6 	bl	80072cc <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 80026e0:	7cbb      	ldrb	r3, [r7, #18]
 80026e2:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11c      	bne.n	8002728 <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 80026ee:	7b7b      	ldrb	r3, [r7, #13]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	b21a      	sxth	r2, r3
 80026f4:	7b3b      	ldrb	r3, [r7, #12]
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	b219      	sxth	r1, r3
 8002706:	7bbb      	ldrb	r3, [r7, #14]
 8002708:	b21a      	sxth	r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	3302      	adds	r3, #2
 800270e:	430a      	orrs	r2, r1
 8002710:	b212      	sxth	r2, r2
 8002712:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 8002714:	7c7b      	ldrb	r3, [r7, #17]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	b219      	sxth	r1, r3
 800271a:	7c3b      	ldrb	r3, [r7, #16]
 800271c:	b21a      	sxth	r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	3304      	adds	r3, #4
 8002722:	430a      	orrs	r2, r1
 8002724:	b212      	sxth	r2, r2
 8002726:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 8002728:	bf00      	nop
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af04      	add	r7, sp, #16
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 800273e:	2364      	movs	r3, #100	; 0x64
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2301      	movs	r3, #1
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	f107 030f 	add.w	r3, r7, #15
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	220a      	movs	r2, #10
 8002750:	2118      	movs	r1, #24
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f004 fcc0 	bl	80070d8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8002758:	2064      	movs	r0, #100	; 0x64
 800275a:	f003 fdf3 	bl	8006344 <HAL_Delay>

  writeData = 0x0F;
 800275e:	230f      	movs	r3, #15
 8002760:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 8002762:	2364      	movs	r3, #100	; 0x64
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	2301      	movs	r3, #1
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	f107 030f 	add.w	r3, r7, #15
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2301      	movs	r3, #1
 8002772:	220a      	movs	r2, #10
 8002774:	2118      	movs	r1, #24
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f004 fcae 	bl	80070d8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 800277c:	2064      	movs	r0, #100	; 0x64
 800277e:	f003 fde1 	bl	8006344 <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 8002782:	2364      	movs	r3, #100	; 0x64
 8002784:	9302      	str	r3, [sp, #8]
 8002786:	2303      	movs	r3, #3
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2301      	movs	r3, #1
 8002792:	2210      	movs	r2, #16
 8002794:	2118      	movs	r1, #24
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f004 fd98 	bl	80072cc <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 800279c:	7b3b      	ldrb	r3, [r7, #12]
 800279e:	3b80      	subs	r3, #128	; 0x80
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fa6b 	bl	8000c7c <__aeabi_i2f>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fe35 	bl	8000418 <__aeabi_f2d>
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b44      	ldr	r3, [pc, #272]	; (80028c4 <initAK8963+0x194>)
 80027b4:	f7fd ffb2 	bl	800071c <__aeabi_ddiv>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	4b40      	ldr	r3, [pc, #256]	; (80028c8 <initAK8963+0x198>)
 80027c6:	f7fd fcc9 	bl	800015c <__adddf3>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f7fe f949 	bl	8000a68 <__aeabi_d2f>
 80027d6:	4602      	mov	r2, r0
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 80027dc:	7b7b      	ldrb	r3, [r7, #13]
 80027de:	3b80      	subs	r3, #128	; 0x80
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fa4b 	bl	8000c7c <__aeabi_i2f>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe15 	bl	8000418 <__aeabi_f2d>
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <initAK8963+0x194>)
 80027f4:	f7fd ff92 	bl	800071c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <initAK8963+0x198>)
 8002806:	f7fd fca9 	bl	800015c <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	1d1c      	adds	r4, r3, #4
 8002816:	f7fe f927 	bl	8000a68 <__aeabi_d2f>
 800281a:	4603      	mov	r3, r0
 800281c:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 800281e:	7bbb      	ldrb	r3, [r7, #14]
 8002820:	3b80      	subs	r3, #128	; 0x80
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fa2a 	bl	8000c7c <__aeabi_i2f>
 8002828:	4603      	mov	r3, r0
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fdf4 	bl	8000418 <__aeabi_f2d>
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <initAK8963+0x194>)
 8002836:	f7fd ff71 	bl	800071c <__aeabi_ddiv>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <initAK8963+0x198>)
 8002848:	f7fd fc88 	bl	800015c <__adddf3>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	f103 0408 	add.w	r4, r3, #8
 800285a:	f7fe f905 	bl	8000a68 <__aeabi_d2f>
 800285e:	4603      	mov	r3, r0
 8002860:	6023      	str	r3, [r4, #0]
	printf("Mag cal off Y: %f\r\n", destination[1]);
	printf("Mag cal off Z: %f\r\n", destination[2]);
	printf("-------------------------\r\n");
#endif

  writeData = 0x00;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 8002866:	2364      	movs	r3, #100	; 0x64
 8002868:	9302      	str	r3, [sp, #8]
 800286a:	2301      	movs	r3, #1
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	f107 030f 	add.w	r3, r7, #15
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2301      	movs	r3, #1
 8002876:	220a      	movs	r2, #10
 8002878:	2118      	movs	r1, #24
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f004 fc2c 	bl	80070d8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8002880:	2064      	movs	r0, #100	; 0x64
 8002882:	f003 fd5f 	bl	8006344 <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <initAK8963+0x19c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	b25a      	sxtb	r2, r3
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <initAK8963+0x1a0>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b25b      	sxtb	r3, r3
 8002894:	4313      	orrs	r3, r2
 8002896:	b25b      	sxtb	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 800289c:	2364      	movs	r3, #100	; 0x64
 800289e:	9302      	str	r3, [sp, #8]
 80028a0:	2301      	movs	r3, #1
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	f107 030f 	add.w	r3, r7, #15
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2301      	movs	r3, #1
 80028ac:	220a      	movs	r2, #10
 80028ae:	2118      	movs	r1, #24
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f004 fc11 	bl	80070d8 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 80028b6:	200a      	movs	r0, #10
 80028b8:	f003 fd44 	bl	8006344 <HAL_Delay>

#if(DEBUG_MPU)
  printf("MAG Init Succesful! \r\n");
#endif
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	40700000 	.word	0x40700000
 80028c8:	3ff00000 	.word	0x3ff00000
 80028cc:	2000000a 	.word	0x2000000a
 80028d0:	2000000b 	.word	0x2000000b

080028d4 <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b095      	sub	sp, #84	; 0x54
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 80028ec:	2300      	movs	r3, #0
 80028ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80028f0:	2300      	movs	r3, #0
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f4:	2300      	movs	r3, #0
 80028f6:	643b      	str	r3, [r7, #64]	; 0x40
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028fc:	2300      	movs	r3, #0
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002900:	2300      	movs	r3, #0
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8002904:	4aa2      	ldr	r2, [pc, #648]	; (8002b90 <calibrateMag+0x2bc>)
 8002906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800290e:	6018      	str	r0, [r3, #0]
 8002910:	3304      	adds	r3, #4
 8002912:	8019      	strh	r1, [r3, #0]
 8002914:	4a9f      	ldr	r2, [pc, #636]	; (8002b94 <calibrateMag+0x2c0>)
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800291e:	6018      	str	r0, [r3, #0]
 8002920:	3304      	adds	r3, #4
 8002922:	8019      	strh	r1, [r3, #0]
 8002924:	2300      	movs	r3, #0
 8002926:	82bb      	strh	r3, [r7, #20]
 8002928:	2300      	movs	r3, #0
 800292a:	82fb      	strh	r3, [r7, #22]
 800292c:	2300      	movs	r3, #0
 800292e:	833b      	strh	r3, [r7, #24]

#if (DEBUG_MPU)
  printf("Mag Calibration: Wave device in a figure eight until done!\r\n");
#endif
  HAL_Delay(4000);
 8002930:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002934:	f003 fd06 	bl	8006344 <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8002938:	4b97      	ldr	r3, [pc, #604]	; (8002b98 <calibrateMag+0x2c4>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d102      	bne.n	8002946 <calibrateMag+0x72>
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 8002946:	4b94      	ldr	r3, [pc, #592]	; (8002b98 <calibrateMag+0x2c4>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b06      	cmp	r3, #6
 800294c:	d103      	bne.n	8002956 <calibrateMag+0x82>
 800294e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002952:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 8002956:	2300      	movs	r3, #0
 8002958:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800295c:	e055      	b.n	8002a0a <calibrateMag+0x136>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fe97 	bl	8002698 <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 800296a:	2300      	movs	r3, #0
 800296c:	64bb      	str	r3, [r7, #72]	; 0x48
 800296e:	e036      	b.n	80029de <calibrateMag+0x10a>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8002970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	3350      	adds	r3, #80	; 0x50
 8002976:	443b      	add	r3, r7
 8002978:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 800297c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	3350      	adds	r3, #80	; 0x50
 8002982:	443b      	add	r3, r7
 8002984:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002988:	429a      	cmp	r2, r3
 800298a:	dd0b      	ble.n	80029a4 <calibrateMag+0xd0>
 800298c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	3350      	adds	r3, #80	; 0x50
 8002992:	443b      	add	r3, r7
 8002994:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8002998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	3350      	adds	r3, #80	; 0x50
 800299e:	443b      	add	r3, r7
 80029a0:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80029a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	3350      	adds	r3, #80	; 0x50
 80029aa:	443b      	add	r3, r7
 80029ac:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80029b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	3350      	adds	r3, #80	; 0x50
 80029b6:	443b      	add	r3, r7
 80029b8:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 80029bc:	429a      	cmp	r2, r3
 80029be:	da0b      	bge.n	80029d8 <calibrateMag+0x104>
 80029c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	3350      	adds	r3, #80	; 0x50
 80029c6:	443b      	add	r3, r7
 80029c8:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80029cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	3350      	adds	r3, #80	; 0x50
 80029d2:	443b      	add	r3, r7
 80029d4:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 80029d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029da:	3301      	adds	r3, #1
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80029de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	ddc5      	ble.n	8002970 <calibrateMag+0x9c>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 80029e4:	4b6c      	ldr	r3, [pc, #432]	; (8002b98 <calibrateMag+0x2c4>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d102      	bne.n	80029f2 <calibrateMag+0x11e>
 80029ec:	2087      	movs	r0, #135	; 0x87
 80029ee:	f003 fca9 	bl	8006344 <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 80029f2:	4b69      	ldr	r3, [pc, #420]	; (8002b98 <calibrateMag+0x2c4>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d102      	bne.n	8002a00 <calibrateMag+0x12c>
 80029fa:	200c      	movs	r0, #12
 80029fc:	f003 fca2 	bl	8006344 <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 8002a00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a04:	3301      	adds	r3, #1
 8002a06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002a0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d3a3      	bcc.n	800295e <calibrateMag+0x8a>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8002a16:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	0fda      	lsrs	r2, r3, #31
 8002a24:	4413      	add	r3, r2
 8002a26:	105b      	asrs	r3, r3, #1
 8002a28:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8002a2a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a34:	4413      	add	r3, r2
 8002a36:	0fda      	lsrs	r2, r3, #31
 8002a38:	4413      	add	r3, r2
 8002a3a:	105b      	asrs	r3, r3, #1
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8002a3e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002a42:	461a      	mov	r2, r3
 8002a44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002a48:	4413      	add	r3, r2
 8002a4a:	0fda      	lsrs	r2, r3, #31
 8002a4c:	4413      	add	r3, r2
 8002a4e:	105b      	asrs	r3, r3, #1
 8002a50:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe f911 	bl	8000c7c <__aeabi_i2f>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b4f      	ldr	r3, [pc, #316]	; (8002b9c <calibrateMag+0x2c8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f7fe f95e 	bl	8000d24 <__aeabi_fmul>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <calibrateMag+0x2cc>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f7fe f956 	bl	8000d24 <__aeabi_fmul>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8002a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe f8fa 	bl	8000c7c <__aeabi_i2f>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b44      	ldr	r3, [pc, #272]	; (8002b9c <calibrateMag+0x2c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4610      	mov	r0, r2
 8002a92:	f7fe f947 	bl	8000d24 <__aeabi_fmul>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <calibrateMag+0x2cc>)
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1d1c      	adds	r4, r3, #4
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	f7fe f93e 	bl	8000d24 <__aeabi_fmul>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8002aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe f8e4 	bl	8000c7c <__aeabi_i2f>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <calibrateMag+0x2c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f7fe f931 	bl	8000d24 <__aeabi_fmul>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <calibrateMag+0x2cc>)
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f103 0408 	add.w	r4, r3, #8
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	f7fe f927 	bl	8000d24 <__aeabi_fmul>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8002ada:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	0fda      	lsrs	r2, r3, #31
 8002ae8:	4413      	add	r3, r2
 8002aea:	105b      	asrs	r3, r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8002aee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002af2:	461a      	mov	r2, r3
 8002af4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	0fda      	lsrs	r2, r3, #31
 8002afc:	4413      	add	r3, r2
 8002afe:	105b      	asrs	r3, r3, #1
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8002b02:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002b06:	461a      	mov	r2, r3
 8002b08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	0fda      	lsrs	r2, r3, #31
 8002b10:	4413      	add	r3, r2
 8002b12:	105b      	asrs	r3, r3, #1
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8002b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	441a      	add	r2, r3
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1e:	4413      	add	r3, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe f8ab 	bl	8000c7c <__aeabi_i2f>
 8002b26:	4603      	mov	r3, r0
 8002b28:	647b      	str	r3, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 8002b2a:	491e      	ldr	r1, [pc, #120]	; (8002ba4 <calibrateMag+0x2d0>)
 8002b2c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b2e:	f7fe f9ad 	bl	8000e8c <__aeabi_fdiv>
 8002b32:	4603      	mov	r3, r0
 8002b34:	647b      	str	r3, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe f89f 	bl	8000c7c <__aeabi_i2f>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4619      	mov	r1, r3
 8002b42:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b44:	f7fe f9a2 	bl	8000e8c <__aeabi_fdiv>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe f892 	bl	8000c7c <__aeabi_i2f>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	1d1c      	adds	r4, r3, #4
 8002b5e:	4611      	mov	r1, r2
 8002b60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b62:	f7fe f993 	bl	8000e8c <__aeabi_fdiv>
 8002b66:	4603      	mov	r3, r0
 8002b68:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe f885 	bl	8000c7c <__aeabi_i2f>
 8002b72:	4602      	mov	r2, r0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f103 0408 	add.w	r4, r3, #8
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b7e:	f7fe f985 	bl	8000e8c <__aeabi_fdiv>
 8002b82:	4603      	mov	r3, r0
 8002b84:	6023      	str	r3, [r4, #0]

#if (DEBUG_MPU)
    printf("Mag Calibration done!\r\n");
#endif
}
 8002b86:	bf00      	nop
 8002b88:	3754      	adds	r7, #84	; 0x54
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd90      	pop	{r4, r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	0800c580 	.word	0x0800c580
 8002b94:	0800c588 	.word	0x0800c588
 8002b98:	2000000b 	.word	0x2000000b
 8002b9c:	200003b4 	.word	0x200003b4
 8002ba0:	200003d0 	.word	0x200003d0
 8002ba4:	40400000 	.word	0x40400000

08002ba8 <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af04      	add	r7, sp, #16
 8002bae:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8002bb4:	2364      	movs	r3, #100	; 0x64
 8002bb6:	9302      	str	r3, [sp, #8]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	f107 030e 	add.w	r3, r7, #14
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	226b      	movs	r2, #107	; 0x6b
 8002bc6:	21d0      	movs	r1, #208	; 0xd0
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f004 fa85 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002bce:	2064      	movs	r0, #100	; 0x64
 8002bd0:	f003 fbb8 	bl	8006344 <HAL_Delay>

	writeData = 0x01;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8002bd8:	2364      	movs	r3, #100	; 0x64
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	f107 030e 	add.w	r3, r7, #14
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2301      	movs	r3, #1
 8002be8:	226b      	movs	r2, #107	; 0x6b
 8002bea:	21d0      	movs	r1, #208	; 0xd0
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f004 fa73 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002bf2:	2064      	movs	r0, #100	; 0x64
 8002bf4:	f003 fba6 	bl	8006344 <HAL_Delay>

	writeData = 0x03;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8002bfc:	2364      	movs	r3, #100	; 0x64
 8002bfe:	9302      	str	r3, [sp, #8]
 8002c00:	2301      	movs	r3, #1
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	f107 030e 	add.w	r3, r7, #14
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	221a      	movs	r2, #26
 8002c0e:	21d0      	movs	r1, #208	; 0xd0
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f004 fa61 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002c16:	2064      	movs	r0, #100	; 0x64
 8002c18:	f003 fb94 	bl	8006344 <HAL_Delay>

	writeData = 0x04;
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8002c20:	2364      	movs	r3, #100	; 0x64
 8002c22:	9302      	str	r3, [sp, #8]
 8002c24:	2301      	movs	r3, #1
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	f107 030e 	add.w	r3, r7, #14
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2301      	movs	r3, #1
 8002c30:	2219      	movs	r2, #25
 8002c32:	21d0      	movs	r1, #208	; 0xd0
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f004 fa4f 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002c3a:	2064      	movs	r0, #100	; 0x64
 8002c3c:	f003 fb82 	bl	8006344 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8002c40:	2364      	movs	r3, #100	; 0x64
 8002c42:	9302      	str	r3, [sp, #8]
 8002c44:	2301      	movs	r3, #1
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	f107 030f 	add.w	r3, r7, #15
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	2301      	movs	r3, #1
 8002c50:	221b      	movs	r2, #27
 8002c52:	21d0      	movs	r1, #208	; 0xd0
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f004 fb39 	bl	80072cc <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	f023 0303 	bic.w	r3, r3, #3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	f023 0318 	bic.w	r3, r3, #24
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <initMPU9250+0x1bc>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	b25a      	sxtb	r2, r3
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	b25b      	sxtb	r3, r3
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8002c82:	2064      	movs	r0, #100	; 0x64
 8002c84:	f003 fb5e 	bl	8006344 <HAL_Delay>

	writeData = readData;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8002c8c:	2364      	movs	r3, #100	; 0x64
 8002c8e:	9302      	str	r3, [sp, #8]
 8002c90:	2301      	movs	r3, #1
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	f107 030e 	add.w	r3, r7, #14
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	221b      	movs	r2, #27
 8002c9e:	21d0      	movs	r1, #208	; 0xd0
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f004 fa19 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002ca6:	2064      	movs	r0, #100	; 0x64
 8002ca8:	f003 fb4c 	bl	8006344 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8002cac:	2364      	movs	r3, #100	; 0x64
 8002cae:	9302      	str	r3, [sp, #8]
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	f107 030f 	add.w	r3, r7, #15
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	221c      	movs	r2, #28
 8002cbe:	21d0      	movs	r1, #208	; 0xd0
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f004 fb03 	bl	80072cc <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	f023 0318 	bic.w	r3, r3, #24
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <initMPU9250+0x1c0>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	b25a      	sxtb	r2, r3
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8002ce8:	2364      	movs	r3, #100	; 0x64
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	2301      	movs	r3, #1
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	f107 030e 	add.w	r3, r7, #14
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	221c      	movs	r2, #28
 8002cfa:	21d0      	movs	r1, #208	; 0xd0
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f004 f9eb 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002d02:	2064      	movs	r0, #100	; 0x64
 8002d04:	f003 fb1e 	bl	8006344 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8002d08:	2364      	movs	r3, #100	; 0x64
 8002d0a:	9302      	str	r3, [sp, #8]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	f107 030f 	add.w	r3, r7, #15
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2301      	movs	r3, #1
 8002d18:	221d      	movs	r2, #29
 8002d1a:	21d0      	movs	r1, #208	; 0xd0
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f004 fad5 	bl	80072cc <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	f023 030f 	bic.w	r3, r3, #15
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	f043 0303 	orr.w	r3, r3, #3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8002d3a:	2364      	movs	r3, #100	; 0x64
 8002d3c:	9302      	str	r3, [sp, #8]
 8002d3e:	2301      	movs	r3, #1
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	f107 030e 	add.w	r3, r7, #14
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	2301      	movs	r3, #1
 8002d4a:	221d      	movs	r2, #29
 8002d4c:	21d0      	movs	r1, #208	; 0xd0
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f004 f9c2 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002d54:	2064      	movs	r0, #100	; 0x64
 8002d56:	f003 faf5 	bl	8006344 <HAL_Delay>

#if(DEBUG_MPU)
	printf("MPU Init Succesful! \r\n");
#endif
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000008 	.word	0x20000008
 8002d68:	20000009 	.word	0x20000009

08002d6c <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b09e      	sub	sp, #120	; 0x78
 8002d70:	af04      	add	r7, sp, #16
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8002d78:	2300      	movs	r3, #0
 8002d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d80:	2300      	movs	r3, #0
 8002d82:	647b      	str	r3, [r7, #68]	; 0x44
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
 8002d88:	2300      	movs	r3, #0
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 8002d96:	2364      	movs	r3, #100	; 0x64
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2301      	movs	r3, #1
 8002da6:	226b      	movs	r2, #107	; 0x6b
 8002da8:	21d0      	movs	r1, #208	; 0xd0
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f004 f994 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002db0:	2064      	movs	r0, #100	; 0x64
 8002db2:	f003 fac7 	bl	8006344 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8002dbc:	2364      	movs	r3, #100	; 0x64
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	2301      	movs	r3, #1
 8002dcc:	226b      	movs	r2, #107	; 0x6b
 8002dce:	21d0      	movs	r1, #208	; 0xd0
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f004 f981 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8002ddc:	2364      	movs	r3, #100	; 0x64
 8002dde:	9302      	str	r3, [sp, #8]
 8002de0:	2301      	movs	r3, #1
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2301      	movs	r3, #1
 8002dec:	226c      	movs	r2, #108	; 0x6c
 8002dee:	21d0      	movs	r1, #208	; 0xd0
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f004 f971 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8002df6:	20c8      	movs	r0, #200	; 0xc8
 8002df8:	f003 faa4 	bl	8006344 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8002e02:	2364      	movs	r3, #100	; 0x64
 8002e04:	9302      	str	r3, [sp, #8]
 8002e06:	2301      	movs	r3, #1
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2301      	movs	r3, #1
 8002e12:	2238      	movs	r2, #56	; 0x38
 8002e14:	21d0      	movs	r1, #208	; 0xd0
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f004 f95e 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8002e22:	2364      	movs	r3, #100	; 0x64
 8002e24:	9302      	str	r3, [sp, #8]
 8002e26:	2301      	movs	r3, #1
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2301      	movs	r3, #1
 8002e32:	2223      	movs	r2, #35	; 0x23
 8002e34:	21d0      	movs	r1, #208	; 0xd0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f004 f94e 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8002e42:	2364      	movs	r3, #100	; 0x64
 8002e44:	9302      	str	r3, [sp, #8]
 8002e46:	2301      	movs	r3, #1
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2301      	movs	r3, #1
 8002e52:	226b      	movs	r2, #107	; 0x6b
 8002e54:	21d0      	movs	r1, #208	; 0xd0
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f004 f93e 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8002e62:	2364      	movs	r3, #100	; 0x64
 8002e64:	9302      	str	r3, [sp, #8]
 8002e66:	2301      	movs	r3, #1
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2301      	movs	r3, #1
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	21d0      	movs	r1, #208	; 0xd0
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f004 f92e 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8002e82:	2364      	movs	r3, #100	; 0x64
 8002e84:	9302      	str	r3, [sp, #8]
 8002e86:	2301      	movs	r3, #1
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2301      	movs	r3, #1
 8002e92:	226a      	movs	r2, #106	; 0x6a
 8002e94:	21d0      	movs	r1, #208	; 0xd0
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f004 f91e 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8002e9c:	230c      	movs	r3, #12
 8002e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8002ea2:	2364      	movs	r3, #100	; 0x64
 8002ea4:	9302      	str	r3, [sp, #8]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	226a      	movs	r2, #106	; 0x6a
 8002eb4:	21d0      	movs	r1, #208	; 0xd0
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f004 f90e 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8002ebc:	200f      	movs	r0, #15
 8002ebe:	f003 fa41 	bl	8006344 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8002ec8:	2364      	movs	r3, #100	; 0x64
 8002eca:	9302      	str	r3, [sp, #8]
 8002ecc:	2301      	movs	r3, #1
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	221a      	movs	r2, #26
 8002eda:	21d0      	movs	r1, #208	; 0xd0
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f004 f8fb 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8002ee8:	2364      	movs	r3, #100	; 0x64
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	2301      	movs	r3, #1
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	2219      	movs	r2, #25
 8002efa:	21d0      	movs	r1, #208	; 0xd0
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f004 f8eb 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8002f08:	2364      	movs	r3, #100	; 0x64
 8002f0a:	9302      	str	r3, [sp, #8]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2301      	movs	r3, #1
 8002f18:	221b      	movs	r2, #27
 8002f1a:	21d0      	movs	r1, #208	; 0xd0
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f004 f8db 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8002f28:	2364      	movs	r3, #100	; 0x64
 8002f2a:	9302      	str	r3, [sp, #8]
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2301      	movs	r3, #1
 8002f38:	221c      	movs	r2, #28
 8002f3a:	21d0      	movs	r1, #208	; 0xd0
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f004 f8cb 	bl	80070d8 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8002f42:	2383      	movs	r3, #131	; 0x83
 8002f44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8002f48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f4c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8002f50:	2340      	movs	r3, #64	; 0x40
 8002f52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8002f56:	2364      	movs	r3, #100	; 0x64
 8002f58:	9302      	str	r3, [sp, #8]
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2301      	movs	r3, #1
 8002f66:	226a      	movs	r2, #106	; 0x6a
 8002f68:	21d0      	movs	r1, #208	; 0xd0
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f004 f8b4 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8002f70:	2378      	movs	r3, #120	; 0x78
 8002f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8002f76:	2364      	movs	r3, #100	; 0x64
 8002f78:	9302      	str	r3, [sp, #8]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2301      	movs	r3, #1
 8002f86:	2223      	movs	r2, #35	; 0x23
 8002f88:	21d0      	movs	r1, #208	; 0xd0
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f004 f8a4 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8002f90:	2028      	movs	r0, #40	; 0x28
 8002f92:	f003 f9d7 	bl	8006344 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8002f9c:	2364      	movs	r3, #100	; 0x64
 8002f9e:	9302      	str	r3, [sp, #8]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2301      	movs	r3, #1
 8002fac:	2223      	movs	r2, #35	; 0x23
 8002fae:	21d0      	movs	r1, #208	; 0xd0
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f004 f891 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8002fb6:	2364      	movs	r3, #100	; 0x64
 8002fb8:	9302      	str	r3, [sp, #8]
 8002fba:	2302      	movs	r3, #2
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	2272      	movs	r2, #114	; 0x72
 8002fc8:	21d0      	movs	r1, #208	; 0xd0
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f004 f97e 	bl	80072cc <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8002fd0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	b21a      	sxth	r2, r3
 8002fd8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002fdc:	b21b      	sxth	r3, r3
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	b21b      	sxth	r3, r3
 8002fe2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8002fe6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002fea:	4a5a      	ldr	r2, [pc, #360]	; (8003154 <calibrateMPU9250+0x3e8>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	08db      	lsrs	r3, r3, #3
 8002ff2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002ffc:	e077      	b.n	80030ee <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8002ffe:	2300      	movs	r3, #0
 8003000:	833b      	strh	r3, [r7, #24]
 8003002:	2300      	movs	r3, #0
 8003004:	837b      	strh	r3, [r7, #26]
 8003006:	2300      	movs	r3, #0
 8003008:	83bb      	strh	r3, [r7, #28]
 800300a:	2300      	movs	r3, #0
 800300c:	823b      	strh	r3, [r7, #16]
 800300e:	2300      	movs	r3, #0
 8003010:	827b      	strh	r3, [r7, #18]
 8003012:	2300      	movs	r3, #0
 8003014:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8003016:	2364      	movs	r3, #100	; 0x64
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	230c      	movs	r3, #12
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2301      	movs	r3, #1
 8003026:	2274      	movs	r2, #116	; 0x74
 8003028:	21d0      	movs	r1, #208	; 0xd0
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f004 f94e 	bl	80072cc <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8003030:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	b21a      	sxth	r2, r3
 8003038:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800303c:	b21b      	sxth	r3, r3
 800303e:	4313      	orrs	r3, r2
 8003040:	b21b      	sxth	r3, r3
 8003042:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8003044:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	b21a      	sxth	r2, r3
 800304c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003050:	b21b      	sxth	r3, r3
 8003052:	4313      	orrs	r3, r2
 8003054:	b21b      	sxth	r3, r3
 8003056:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8003058:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	b21a      	sxth	r2, r3
 8003060:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003064:	b21b      	sxth	r3, r3
 8003066:	4313      	orrs	r3, r2
 8003068:	b21b      	sxth	r3, r3
 800306a:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 800306c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	b21a      	sxth	r2, r3
 8003074:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003078:	b21b      	sxth	r3, r3
 800307a:	4313      	orrs	r3, r2
 800307c:	b21b      	sxth	r3, r3
 800307e:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8003080:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	b21a      	sxth	r2, r3
 8003088:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800308c:	b21b      	sxth	r3, r3
 800308e:	4313      	orrs	r3, r2
 8003090:	b21b      	sxth	r3, r3
 8003092:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8003094:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	b21a      	sxth	r2, r3
 800309c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	4313      	orrs	r3, r2
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80030ae:	4413      	add	r3, r2
 80030b0:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80030b8:	4413      	add	r3, r2
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 80030c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80030cc:	4413      	add	r3, r2
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 80030d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80030d6:	4413      	add	r3, r2
 80030d8:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 80030da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80030e0:	4413      	add	r3, r2
 80030e2:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 80030e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80030e8:	3301      	adds	r3, #1
 80030ea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80030ee:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80030f2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d381      	bcc.n	8002ffe <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 80030fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003100:	fb92 f3f3 	sdiv	r3, r2, r3
 8003104:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8003106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003108:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800310c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8003112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003114:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003118:	fb92 f3f3 	sdiv	r3, r2, r3
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 800311e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003120:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003124:	fb92 f3f3 	sdiv	r3, r2, r3
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 800312a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800312c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003130:	fb92 f3f3 	sdiv	r3, r2, r3
 8003134:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8003136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003138:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800313c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003140:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	2b00      	cmp	r3, #0
 8003146:	dd07      	ble.n	8003158 <calibrateMPU9250+0x3ec>
 8003148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800314a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	63bb      	str	r3, [r7, #56]	; 0x38
 8003152:	e006      	b.n	8003162 <calibrateMPU9250+0x3f6>
 8003154:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8003158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800315a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800315e:	4413      	add	r3, r2
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8003162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003164:	425b      	negs	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	da00      	bge.n	800316c <calibrateMPU9250+0x400>
 800316a:	3303      	adds	r3, #3
 800316c:	109b      	asrs	r3, r3, #2
 800316e:	121b      	asrs	r3, r3, #8
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8003176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003178:	425b      	negs	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	da00      	bge.n	8003180 <calibrateMPU9250+0x414>
 800317e:	3303      	adds	r3, #3
 8003180:	109b      	asrs	r3, r3, #2
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8003188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318a:	425b      	negs	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	da00      	bge.n	8003192 <calibrateMPU9250+0x426>
 8003190:	3303      	adds	r3, #3
 8003192:	109b      	asrs	r3, r3, #2
 8003194:	121b      	asrs	r3, r3, #8
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 800319c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319e:	425b      	negs	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	da00      	bge.n	80031a6 <calibrateMPU9250+0x43a>
 80031a4:	3303      	adds	r3, #3
 80031a6:	109b      	asrs	r3, r3, #2
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80031ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b0:	425b      	negs	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da00      	bge.n	80031b8 <calibrateMPU9250+0x44c>
 80031b6:	3303      	adds	r3, #3
 80031b8:	109b      	asrs	r3, r3, #2
 80031ba:	121b      	asrs	r3, r3, #8
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 80031c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c4:	425b      	negs	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	da00      	bge.n	80031cc <calibrateMPU9250+0x460>
 80031ca:	3303      	adds	r3, #3
 80031cc:	109b      	asrs	r3, r3, #2
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 80031d4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80031d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80031dc:	2364      	movs	r3, #100	; 0x64
 80031de:	9302      	str	r3, [sp, #8]
 80031e0:	2301      	movs	r3, #1
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	2301      	movs	r3, #1
 80031ec:	2213      	movs	r2, #19
 80031ee:	21d0      	movs	r1, #208	; 0xd0
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f003 ff71 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 80031f6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80031fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80031fe:	2364      	movs	r3, #100	; 0x64
 8003200:	9302      	str	r3, [sp, #8]
 8003202:	2301      	movs	r3, #1
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2301      	movs	r3, #1
 800320e:	2214      	movs	r2, #20
 8003210:	21d0      	movs	r1, #208	; 0xd0
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f003 ff60 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8003218:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800321c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8003220:	2364      	movs	r3, #100	; 0x64
 8003222:	9302      	str	r3, [sp, #8]
 8003224:	2301      	movs	r3, #1
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2301      	movs	r3, #1
 8003230:	2215      	movs	r2, #21
 8003232:	21d0      	movs	r1, #208	; 0xd0
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f003 ff4f 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 800323a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800323e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8003242:	2364      	movs	r3, #100	; 0x64
 8003244:	9302      	str	r3, [sp, #8]
 8003246:	2301      	movs	r3, #1
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2301      	movs	r3, #1
 8003252:	2216      	movs	r2, #22
 8003254:	21d0      	movs	r1, #208	; 0xd0
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f003 ff3e 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 800325c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003260:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8003264:	2364      	movs	r3, #100	; 0x64
 8003266:	9302      	str	r3, [sp, #8]
 8003268:	2301      	movs	r3, #1
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	2301      	movs	r3, #1
 8003274:	2217      	movs	r2, #23
 8003276:	21d0      	movs	r1, #208	; 0xd0
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f003 ff2d 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 800327e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003282:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8003286:	2364      	movs	r3, #100	; 0x64
 8003288:	9302      	str	r3, [sp, #8]
 800328a:	2301      	movs	r3, #1
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2301      	movs	r3, #1
 8003296:	2218      	movs	r2, #24
 8003298:	21d0      	movs	r1, #208	; 0xd0
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f003 ff1c 	bl	80070d8 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80032a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd fcea 	bl	8000c7c <__aeabi_i2f>
 80032a8:	4604      	mov	r4, r0
 80032aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fce0 	bl	8000c74 <__aeabi_ui2f>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4619      	mov	r1, r3
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7fd fde7 	bl	8000e8c <__aeabi_fdiv>
 80032be:	4603      	mov	r3, r0
 80032c0:	461a      	mov	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80032c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fcd7 	bl	8000c7c <__aeabi_i2f>
 80032ce:	4605      	mov	r5, r0
 80032d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd fccd 	bl	8000c74 <__aeabi_ui2f>
 80032da:	4602      	mov	r2, r0
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	1d1c      	adds	r4, r3, #4
 80032e0:	4611      	mov	r1, r2
 80032e2:	4628      	mov	r0, r5
 80032e4:	f7fd fdd2 	bl	8000e8c <__aeabi_fdiv>
 80032e8:	4603      	mov	r3, r0
 80032ea:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80032ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd fcc4 	bl	8000c7c <__aeabi_i2f>
 80032f4:	4605      	mov	r5, r0
 80032f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd fcba 	bl	8000c74 <__aeabi_ui2f>
 8003300:	4602      	mov	r2, r0
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f103 0408 	add.w	r4, r3, #8
 8003308:	4611      	mov	r1, r2
 800330a:	4628      	mov	r0, r5
 800330c:	f7fd fdbe 	bl	8000e8c <__aeabi_fdiv>
 8003310:	4603      	mov	r3, r0
 8003312:	6023      	str	r3, [r4, #0]

		printf("-------------------------\r\n");
#endif

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
 8003318:	2300      	movs	r3, #0
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8003320:	2364      	movs	r3, #100	; 0x64
 8003322:	9302      	str	r3, [sp, #8]
 8003324:	2302      	movs	r3, #2
 8003326:	9301      	str	r3, [sp, #4]
 8003328:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2301      	movs	r3, #1
 8003330:	2277      	movs	r2, #119	; 0x77
 8003332:	21d0      	movs	r1, #208	; 0xd0
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f003 ffc9 	bl	80072cc <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800333a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003344:	4313      	orrs	r3, r2
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8003348:	2364      	movs	r3, #100	; 0x64
 800334a:	9302      	str	r3, [sp, #8]
 800334c:	2302      	movs	r3, #2
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2301      	movs	r3, #1
 8003358:	227a      	movs	r2, #122	; 0x7a
 800335a:	21d0      	movs	r1, #208	; 0xd0
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f003 ffb5 	bl	80072cc <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8003362:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800336c:	4313      	orrs	r3, r2
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8003370:	2364      	movs	r3, #100	; 0x64
 8003372:	9302      	str	r3, [sp, #8]
 8003374:	2302      	movs	r3, #2
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2301      	movs	r3, #1
 8003380:	227d      	movs	r2, #125	; 0x7d
 8003382:	21d0      	movs	r1, #208	; 0xd0
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f003 ffa1 	bl	80072cc <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800338a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003394:	4313      	orrs	r3, r2
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8003398:	2301      	movs	r3, #1
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 800339c:	4a8d      	ldr	r2, [pc, #564]	; (80035d4 <calibrateMPU9250+0x868>)
 800339e:	f107 0320 	add.w	r3, r7, #32
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	4611      	mov	r1, r2
 80033a6:	8019      	strh	r1, [r3, #0]
 80033a8:	3302      	adds	r3, #2
 80033aa:	0c12      	lsrs	r2, r2, #16
 80033ac:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80033b4:	e017      	b.n	80033e6 <calibrateMPU9250+0x67a>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 80033b6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	3368      	adds	r3, #104	; 0x68
 80033be:	443b      	add	r3, r7
 80033c0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80033c4:	461a      	mov	r2, r3
 80033c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d006      	beq.n	80033dc <calibrateMPU9250+0x670>
 80033ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80033d2:	3368      	adds	r3, #104	; 0x68
 80033d4:	443b      	add	r3, r7
 80033d6:	2201      	movs	r2, #1
 80033d8:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 80033dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80033e0:	3301      	adds	r3, #1
 80033e2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80033e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d9e3      	bls.n	80033b6 <calibrateMPU9250+0x64a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	da00      	bge.n	80033f8 <calibrateMPU9250+0x68c>
 80033f6:	3307      	adds	r3, #7
 80033f8:	10db      	asrs	r3, r3, #3
 80033fa:	425b      	negs	r3, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8003400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	2b00      	cmp	r3, #0
 8003406:	da00      	bge.n	800340a <calibrateMPU9250+0x69e>
 8003408:	3307      	adds	r3, #7
 800340a:	10db      	asrs	r3, r3, #3
 800340c:	425b      	negs	r3, r3
 800340e:	4413      	add	r3, r2
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8003412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	2b00      	cmp	r3, #0
 8003418:	da00      	bge.n	800341c <calibrateMPU9250+0x6b0>
 800341a:	3307      	adds	r3, #7
 800341c:	10db      	asrs	r3, r3, #3
 800341e:	425b      	negs	r3, r3
 8003420:	4413      	add	r3, r2
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	121b      	asrs	r3, r3, #8
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003436:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800343a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800343e:	4313      	orrs	r3, r2
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	121b      	asrs	r3, r3, #8
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003458:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800345c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003460:	4313      	orrs	r3, r2
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	121b      	asrs	r3, r3, #8
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800347a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800347e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003482:	4313      	orrs	r3, r2
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 800348a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800348e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8003492:	2364      	movs	r3, #100	; 0x64
 8003494:	9302      	str	r3, [sp, #8]
 8003496:	2301      	movs	r3, #1
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2301      	movs	r3, #1
 80034a2:	2277      	movs	r2, #119	; 0x77
 80034a4:	21d0      	movs	r1, #208	; 0xd0
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f003 fe16 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 80034ac:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80034b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80034b4:	2364      	movs	r3, #100	; 0x64
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	2301      	movs	r3, #1
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	2301      	movs	r3, #1
 80034c4:	2278      	movs	r2, #120	; 0x78
 80034c6:	21d0      	movs	r1, #208	; 0xd0
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f003 fe05 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 80034ce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80034d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80034d6:	2364      	movs	r3, #100	; 0x64
 80034d8:	9302      	str	r3, [sp, #8]
 80034da:	2301      	movs	r3, #1
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2301      	movs	r3, #1
 80034e6:	227a      	movs	r2, #122	; 0x7a
 80034e8:	21d0      	movs	r1, #208	; 0xd0
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f003 fdf4 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 80034f0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80034f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80034f8:	2364      	movs	r3, #100	; 0x64
 80034fa:	9302      	str	r3, [sp, #8]
 80034fc:	2301      	movs	r3, #1
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2301      	movs	r3, #1
 8003508:	227b      	movs	r2, #123	; 0x7b
 800350a:	21d0      	movs	r1, #208	; 0xd0
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f003 fde3 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8003512:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800351a:	2364      	movs	r3, #100	; 0x64
 800351c:	9302      	str	r3, [sp, #8]
 800351e:	2301      	movs	r3, #1
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2301      	movs	r3, #1
 800352a:	227d      	movs	r2, #125	; 0x7d
 800352c:	21d0      	movs	r1, #208	; 0xd0
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f003 fdd2 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8003534:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003538:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800353c:	2364      	movs	r3, #100	; 0x64
 800353e:	9302      	str	r3, [sp, #8]
 8003540:	2301      	movs	r3, #1
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2301      	movs	r3, #1
 800354c:	227e      	movs	r2, #126	; 0x7e
 800354e:	21d0      	movs	r1, #208	; 0xd0
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f003 fdc1 	bl	80070d8 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd fb8f 	bl	8000c7c <__aeabi_i2f>
 800355e:	4604      	mov	r4, r0
 8003560:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fb85 	bl	8000c74 <__aeabi_ui2f>
 800356a:	4603      	mov	r3, r0
 800356c:	4619      	mov	r1, r3
 800356e:	4620      	mov	r0, r4
 8003570:	f7fd fc8c 	bl	8000e8c <__aeabi_fdiv>
 8003574:	4603      	mov	r3, r0
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	601a      	str	r2, [r3, #0]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd fb7c 	bl	8000c7c <__aeabi_i2f>
 8003584:	4605      	mov	r5, r0
 8003586:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd fb72 	bl	8000c74 <__aeabi_ui2f>
 8003590:	4602      	mov	r2, r0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1d1c      	adds	r4, r3, #4
 8003596:	4611      	mov	r1, r2
 8003598:	4628      	mov	r0, r5
 800359a:	f7fd fc77 	bl	8000e8c <__aeabi_fdiv>
 800359e:	4603      	mov	r3, r0
 80035a0:	6023      	str	r3, [r4, #0]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 80035a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd fb69 	bl	8000c7c <__aeabi_i2f>
 80035aa:	4605      	mov	r5, r0
 80035ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fd fb5f 	bl	8000c74 <__aeabi_ui2f>
 80035b6:	4602      	mov	r2, r0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f103 0408 	add.w	r4, r3, #8
 80035be:	4611      	mov	r1, r2
 80035c0:	4628      	mov	r0, r5
 80035c2:	f7fd fc63 	bl	8000e8c <__aeabi_fdiv>
 80035c6:	4603      	mov	r3, r0
 80035c8:	6023      	str	r3, [r4, #0]
		printf("Accel bias Y: %f\r\n", accelBiasY);
		printf("Accel bias Z: %f\r\n", accelBiasZ);

		printf("-------------------------\r\n");
#endif
}
 80035ca:	bf00      	nop
 80035cc:	3768      	adds	r7, #104	; 0x68
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bdb0      	pop	{r4, r5, r7, pc}
 80035d2:	bf00      	nop
 80035d4:	0800c590 	.word	0x0800c590

080035d8 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	b0a8      	sub	sp, #160	; 0xa0
 80035dc:	af04      	add	r7, sp, #16
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 80035e2:	4aa2      	ldr	r2, [pc, #648]	; (800386c <MPU9250SelfTest+0x294>)
 80035e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ec:	6018      	str	r0, [r3, #0]
 80035ee:	3304      	adds	r3, #4
 80035f0:	8019      	strh	r1, [r3, #0]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80035f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 8003628:	2300      	movs	r3, #0
 800362a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 800362e:	2364      	movs	r3, #100	; 0x64
 8003630:	9302      	str	r3, [sp, #8]
 8003632:	2301      	movs	r3, #1
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2301      	movs	r3, #1
 800363e:	2219      	movs	r2, #25
 8003640:	21d0      	movs	r1, #208	; 0xd0
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f003 fd48 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8003648:	2302      	movs	r3, #2
 800364a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800364e:	2364      	movs	r3, #100	; 0x64
 8003650:	9302      	str	r3, [sp, #8]
 8003652:	2301      	movs	r3, #1
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2301      	movs	r3, #1
 800365e:	221a      	movs	r2, #26
 8003660:	21d0      	movs	r1, #208	; 0xd0
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f003 fd38 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8003668:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8003674:	2364      	movs	r3, #100	; 0x64
 8003676:	9302      	str	r3, [sp, #8]
 8003678:	2301      	movs	r3, #1
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2301      	movs	r3, #1
 8003684:	221b      	movs	r2, #27
 8003686:	21d0      	movs	r1, #208	; 0xd0
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f003 fd25 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 800368e:	2302      	movs	r3, #2
 8003690:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8003694:	2364      	movs	r3, #100	; 0x64
 8003696:	9302      	str	r3, [sp, #8]
 8003698:	2301      	movs	r3, #1
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2301      	movs	r3, #1
 80036a4:	221d      	movs	r2, #29
 80036a6:	21d0      	movs	r1, #208	; 0xd0
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f003 fd15 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 80036ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 80036ba:	2364      	movs	r3, #100	; 0x64
 80036bc:	9302      	str	r3, [sp, #8]
 80036be:	2301      	movs	r3, #1
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2301      	movs	r3, #1
 80036ca:	221c      	movs	r2, #28
 80036cc:	21d0      	movs	r1, #208	; 0xd0
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f003 fd02 	bl	80070d8 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80036da:	e066      	b.n	80037aa <MPU9250SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 80036dc:	2364      	movs	r3, #100	; 0x64
 80036de:	9302      	str	r3, [sp, #8]
 80036e0:	2306      	movs	r3, #6
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2301      	movs	r3, #1
 80036ec:	223b      	movs	r2, #59	; 0x3b
 80036ee:	21d0      	movs	r1, #208	; 0xd0
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f003 fdeb 	bl	80072cc <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80036f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80036fc:	0212      	lsls	r2, r2, #8
 80036fe:	b211      	sxth	r1, r2
 8003700:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003704:	b212      	sxth	r2, r2
 8003706:	430a      	orrs	r2, r1
 8003708:	b212      	sxth	r2, r2
 800370a:	4413      	add	r3, r2
 800370c:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 800370e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003710:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003714:	0212      	lsls	r2, r2, #8
 8003716:	b211      	sxth	r1, r2
 8003718:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800371c:	b212      	sxth	r2, r2
 800371e:	430a      	orrs	r2, r1
 8003720:	b212      	sxth	r2, r2
 8003722:	4413      	add	r3, r2
 8003724:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003728:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800372c:	0212      	lsls	r2, r2, #8
 800372e:	b211      	sxth	r1, r2
 8003730:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003734:	b212      	sxth	r2, r2
 8003736:	430a      	orrs	r2, r1
 8003738:	b212      	sxth	r2, r2
 800373a:	4413      	add	r3, r2
 800373c:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 800373e:	2364      	movs	r3, #100	; 0x64
 8003740:	9302      	str	r3, [sp, #8]
 8003742:	2306      	movs	r3, #6
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2301      	movs	r3, #1
 800374e:	2243      	movs	r2, #67	; 0x43
 8003750:	21d0      	movs	r1, #208	; 0xd0
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f003 fdba 	bl	80072cc <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8003758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800375a:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800375e:	0212      	lsls	r2, r2, #8
 8003760:	b211      	sxth	r1, r2
 8003762:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8003766:	b212      	sxth	r2, r2
 8003768:	430a      	orrs	r2, r1
 800376a:	b212      	sxth	r2, r2
 800376c:	4413      	add	r3, r2
 800376e:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003772:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003776:	0212      	lsls	r2, r2, #8
 8003778:	b211      	sxth	r1, r2
 800377a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800377e:	b212      	sxth	r2, r2
 8003780:	430a      	orrs	r2, r1
 8003782:	b212      	sxth	r2, r2
 8003784:	4413      	add	r3, r2
 8003786:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800378a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800378e:	0212      	lsls	r2, r2, #8
 8003790:	b211      	sxth	r1, r2
 8003792:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8003796:	b212      	sxth	r2, r2
 8003798:	430a      	orrs	r2, r1
 800379a:	b212      	sxth	r2, r2
 800379c:	4413      	add	r3, r2
 800379e:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 80037a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037a4:	3301      	adds	r3, #1
 80037a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80037aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ae:	2bc7      	cmp	r3, #199	; 0xc7
 80037b0:	dd94      	ble.n	80036dc <MPU9250SelfTest+0x104>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 80037b2:	2300      	movs	r3, #0
 80037b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037b8:	e02c      	b.n	8003814 <MPU9250SelfTest+0x23c>
		aAvg[ii] /= 200;
 80037ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	3390      	adds	r3, #144	; 0x90
 80037c2:	443b      	add	r3, r7
 80037c4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80037c8:	4a29      	ldr	r2, [pc, #164]	; (8003870 <MPU9250SelfTest+0x298>)
 80037ca:	fb82 1203 	smull	r1, r2, r2, r3
 80037ce:	1192      	asrs	r2, r2, #6
 80037d0:	17db      	asrs	r3, r3, #31
 80037d2:	1ad2      	subs	r2, r2, r3
 80037d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	3390      	adds	r3, #144	; 0x90
 80037dc:	443b      	add	r3, r7
 80037de:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 80037e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	3390      	adds	r3, #144	; 0x90
 80037ea:	443b      	add	r3, r7
 80037ec:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80037f0:	4a1f      	ldr	r2, [pc, #124]	; (8003870 <MPU9250SelfTest+0x298>)
 80037f2:	fb82 1203 	smull	r1, r2, r2, r3
 80037f6:	1192      	asrs	r2, r2, #6
 80037f8:	17db      	asrs	r3, r3, #31
 80037fa:	1ad2      	subs	r2, r2, r3
 80037fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	3390      	adds	r3, #144	; 0x90
 8003804:	443b      	add	r3, r7
 8003806:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 800380a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800380e:	3301      	adds	r3, #1
 8003810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003818:	2b02      	cmp	r3, #2
 800381a:	ddce      	ble.n	80037ba <MPU9250SelfTest+0x1e2>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 800381c:	23e0      	movs	r3, #224	; 0xe0
 800381e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8003822:	2364      	movs	r3, #100	; 0x64
 8003824:	9302      	str	r3, [sp, #8]
 8003826:	2301      	movs	r3, #1
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	2301      	movs	r3, #1
 8003832:	221c      	movs	r2, #28
 8003834:	21d0      	movs	r1, #208	; 0xd0
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f003 fc4e 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 800383c:	23e0      	movs	r3, #224	; 0xe0
 800383e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8003842:	2364      	movs	r3, #100	; 0x64
 8003844:	9302      	str	r3, [sp, #8]
 8003846:	2301      	movs	r3, #1
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	2301      	movs	r3, #1
 8003852:	221b      	movs	r2, #27
 8003854:	21d0      	movs	r1, #208	; 0xd0
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f003 fc3e 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 800385c:	2019      	movs	r0, #25
 800385e:	f002 fd71 	bl	8006344 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8003862:	2300      	movs	r3, #0
 8003864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003868:	e06b      	b.n	8003942 <MPU9250SelfTest+0x36a>
 800386a:	bf00      	nop
 800386c:	0800c594 	.word	0x0800c594
 8003870:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8003874:	2364      	movs	r3, #100	; 0x64
 8003876:	9302      	str	r3, [sp, #8]
 8003878:	2306      	movs	r3, #6
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	2301      	movs	r3, #1
 8003884:	223b      	movs	r2, #59	; 0x3b
 8003886:	21d0      	movs	r1, #208	; 0xd0
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f003 fd1f 	bl	80072cc <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800388e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003890:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8003894:	0212      	lsls	r2, r2, #8
 8003896:	b211      	sxth	r1, r2
 8003898:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800389c:	b212      	sxth	r2, r2
 800389e:	430a      	orrs	r2, r1
 80038a0:	b212      	sxth	r2, r2
 80038a2:	4413      	add	r3, r2
 80038a4:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80038a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a8:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80038ac:	0212      	lsls	r2, r2, #8
 80038ae:	b211      	sxth	r1, r2
 80038b0:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80038b4:	b212      	sxth	r2, r2
 80038b6:	430a      	orrs	r2, r1
 80038b8:	b212      	sxth	r2, r2
 80038ba:	4413      	add	r3, r2
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80038be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c0:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80038c4:	0212      	lsls	r2, r2, #8
 80038c6:	b211      	sxth	r1, r2
 80038c8:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80038cc:	b212      	sxth	r2, r2
 80038ce:	430a      	orrs	r2, r1
 80038d0:	b212      	sxth	r2, r2
 80038d2:	4413      	add	r3, r2
 80038d4:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80038d6:	2364      	movs	r3, #100	; 0x64
 80038d8:	9302      	str	r3, [sp, #8]
 80038da:	2306      	movs	r3, #6
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2301      	movs	r3, #1
 80038e6:	2243      	movs	r2, #67	; 0x43
 80038e8:	21d0      	movs	r1, #208	; 0xd0
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f003 fcee 	bl	80072cc <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80038f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f2:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80038f6:	0212      	lsls	r2, r2, #8
 80038f8:	b211      	sxth	r1, r2
 80038fa:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80038fe:	b212      	sxth	r2, r2
 8003900:	430a      	orrs	r2, r1
 8003902:	b212      	sxth	r2, r2
 8003904:	4413      	add	r3, r2
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8003908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800390e:	0212      	lsls	r2, r2, #8
 8003910:	b211      	sxth	r1, r2
 8003912:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8003916:	b212      	sxth	r2, r2
 8003918:	430a      	orrs	r2, r1
 800391a:	b212      	sxth	r2, r2
 800391c:	4413      	add	r3, r2
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8003920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003922:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8003926:	0212      	lsls	r2, r2, #8
 8003928:	b211      	sxth	r1, r2
 800392a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800392e:	b212      	sxth	r2, r2
 8003930:	430a      	orrs	r2, r1
 8003932:	b212      	sxth	r2, r2
 8003934:	4413      	add	r3, r2
 8003936:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 8003938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800393c:	3301      	adds	r3, #1
 800393e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003946:	2bc7      	cmp	r3, #199	; 0xc7
 8003948:	dd94      	ble.n	8003874 <MPU9250SelfTest+0x29c>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003950:	e02c      	b.n	80039ac <MPU9250SelfTest+0x3d4>
		aSTAvg[ii] /= 200;
 8003952:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	3390      	adds	r3, #144	; 0x90
 800395a:	443b      	add	r3, r7
 800395c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003960:	4ad7      	ldr	r2, [pc, #860]	; (8003cc0 <MPU9250SelfTest+0x6e8>)
 8003962:	fb82 1203 	smull	r1, r2, r2, r3
 8003966:	1192      	asrs	r2, r2, #6
 8003968:	17db      	asrs	r3, r3, #31
 800396a:	1ad2      	subs	r2, r2, r3
 800396c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	3390      	adds	r3, #144	; 0x90
 8003974:	443b      	add	r3, r7
 8003976:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 800397a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	3390      	adds	r3, #144	; 0x90
 8003982:	443b      	add	r3, r7
 8003984:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003988:	4acd      	ldr	r2, [pc, #820]	; (8003cc0 <MPU9250SelfTest+0x6e8>)
 800398a:	fb82 1203 	smull	r1, r2, r2, r3
 800398e:	1192      	asrs	r2, r2, #6
 8003990:	17db      	asrs	r3, r3, #31
 8003992:	1ad2      	subs	r2, r2, r3
 8003994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	3390      	adds	r3, #144	; 0x90
 800399c:	443b      	add	r3, r7
 800399e:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 80039a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039a6:	3301      	adds	r3, #1
 80039a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	ddce      	ble.n	8003952 <MPU9250SelfTest+0x37a>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 80039ba:	2364      	movs	r3, #100	; 0x64
 80039bc:	9302      	str	r3, [sp, #8]
 80039be:	2301      	movs	r3, #1
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2301      	movs	r3, #1
 80039ca:	221c      	movs	r2, #28
 80039cc:	21d0      	movs	r1, #208	; 0xd0
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f003 fb82 	bl	80070d8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80039da:	2364      	movs	r3, #100	; 0x64
 80039dc:	9302      	str	r3, [sp, #8]
 80039de:	2301      	movs	r3, #1
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2301      	movs	r3, #1
 80039ea:	221b      	movs	r2, #27
 80039ec:	21d0      	movs	r1, #208	; 0xd0
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f003 fb72 	bl	80070d8 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80039f4:	2019      	movs	r0, #25
 80039f6:	f002 fca5 	bl	8006344 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 80039fa:	2364      	movs	r3, #100	; 0x64
 80039fc:	9302      	str	r3, [sp, #8]
 80039fe:	2301      	movs	r3, #1
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2301      	movs	r3, #1
 8003a0a:	220d      	movs	r2, #13
 8003a0c:	21d0      	movs	r1, #208	; 0xd0
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f003 fc5c 	bl	80072cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 8003a14:	2364      	movs	r3, #100	; 0x64
 8003a16:	9302      	str	r3, [sp, #8]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a20:	3301      	adds	r3, #1
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	2301      	movs	r3, #1
 8003a26:	220e      	movs	r2, #14
 8003a28:	21d0      	movs	r1, #208	; 0xd0
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f003 fc4e 	bl	80072cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 8003a30:	2364      	movs	r3, #100	; 0x64
 8003a32:	9302      	str	r3, [sp, #8]
 8003a34:	2301      	movs	r3, #1
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	2301      	movs	r3, #1
 8003a42:	220f      	movs	r2, #15
 8003a44:	21d0      	movs	r1, #208	; 0xd0
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f003 fc40 	bl	80072cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 8003a4c:	2364      	movs	r3, #100	; 0x64
 8003a4e:	9302      	str	r3, [sp, #8]
 8003a50:	2301      	movs	r3, #1
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a58:	3303      	adds	r3, #3
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	2200      	movs	r2, #0
 8003a60:	21d0      	movs	r1, #208	; 0xd0
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f003 fc32 	bl	80072cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8003a68:	2364      	movs	r3, #100	; 0x64
 8003a6a:	9302      	str	r3, [sp, #8]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a74:	3304      	adds	r3, #4
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2301      	movs	r3, #1
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	21d0      	movs	r1, #208	; 0xd0
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f003 fc24 	bl	80072cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8003a84:	2364      	movs	r3, #100	; 0x64
 8003a86:	9302      	str	r3, [sp, #8]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a90:	3305      	adds	r3, #5
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2301      	movs	r3, #1
 8003a96:	2202      	movs	r2, #2
 8003a98:	21d0      	movs	r1, #208	; 0xd0
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f003 fc16 	bl	80072cc <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8003aa0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003aa4:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd f8e5 	bl	8000c7c <__aeabi_i2f>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc fcaf 	bl	8000418 <__aeabi_f2d>
 8003aba:	4604      	mov	r4, r0
 8003abc:	460d      	mov	r5, r1
 8003abe:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd f8d6 	bl	8000c74 <__aeabi_ui2f>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fc fca4 	bl	8000418 <__aeabi_f2d>
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	4b7b      	ldr	r3, [pc, #492]	; (8003cc4 <MPU9250SelfTest+0x6ec>)
 8003ad6:	f7fc fb3f 	bl	8000158 <__aeabi_dsub>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	a176      	add	r1, pc, #472	; (adr r1, 8003cb8 <MPU9250SelfTest+0x6e0>)
 8003ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ae4:	f007 faea 	bl	800b0bc <pow>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4620      	mov	r0, r4
 8003aee:	4629      	mov	r1, r5
 8003af0:	f7fc fcea 	bl	80004c8 <__aeabi_dmul>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	f7fc ffb4 	bl	8000a68 <__aeabi_d2f>
 8003b00:	4603      	mov	r3, r0
 8003b02:	623b      	str	r3, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8003b04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b08:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd f8b3 	bl	8000c7c <__aeabi_i2f>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fc fc7d 	bl	8000418 <__aeabi_f2d>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	460d      	mov	r5, r1
 8003b22:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fd f8a4 	bl	8000c74 <__aeabi_ui2f>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fc fc72 	bl	8000418 <__aeabi_f2d>
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	4b62      	ldr	r3, [pc, #392]	; (8003cc4 <MPU9250SelfTest+0x6ec>)
 8003b3a:	f7fc fb0d 	bl	8000158 <__aeabi_dsub>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	a15d      	add	r1, pc, #372	; (adr r1, 8003cb8 <MPU9250SelfTest+0x6e0>)
 8003b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b48:	f007 fab8 	bl	800b0bc <pow>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4620      	mov	r0, r4
 8003b52:	4629      	mov	r1, r5
 8003b54:	f7fc fcb8 	bl	80004c8 <__aeabi_dmul>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f7fc ff82 	bl	8000a68 <__aeabi_d2f>
 8003b64:	4603      	mov	r3, r0
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8003b68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b6c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fd f881 	bl	8000c7c <__aeabi_i2f>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fc4b 	bl	8000418 <__aeabi_f2d>
 8003b82:	4604      	mov	r4, r0
 8003b84:	460d      	mov	r5, r1
 8003b86:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd f872 	bl	8000c74 <__aeabi_ui2f>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fc fc40 	bl	8000418 <__aeabi_f2d>
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	4b49      	ldr	r3, [pc, #292]	; (8003cc4 <MPU9250SelfTest+0x6ec>)
 8003b9e:	f7fc fadb 	bl	8000158 <__aeabi_dsub>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	a144      	add	r1, pc, #272	; (adr r1, 8003cb8 <MPU9250SelfTest+0x6e0>)
 8003ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bac:	f007 fa86 	bl	800b0bc <pow>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	f7fc fc86 	bl	80004c8 <__aeabi_dmul>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f7fc ff50 	bl	8000a68 <__aeabi_d2f>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8003bcc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003bd0:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd f84f 	bl	8000c7c <__aeabi_i2f>
 8003bde:	4603      	mov	r3, r0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fc19 	bl	8000418 <__aeabi_f2d>
 8003be6:	4604      	mov	r4, r0
 8003be8:	460d      	mov	r5, r1
 8003bea:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd f840 	bl	8000c74 <__aeabi_ui2f>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fc0e 	bl	8000418 <__aeabi_f2d>
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <MPU9250SelfTest+0x6ec>)
 8003c02:	f7fc faa9 	bl	8000158 <__aeabi_dsub>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	a12b      	add	r1, pc, #172	; (adr r1, 8003cb8 <MPU9250SelfTest+0x6e0>)
 8003c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c10:	f007 fa54 	bl	800b0bc <pow>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4620      	mov	r0, r4
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	f7fc fc54 	bl	80004c8 <__aeabi_dmul>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	f7fc ff1e 	bl	8000a68 <__aeabi_d2f>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8003c30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003c34:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd f81d 	bl	8000c7c <__aeabi_i2f>
 8003c42:	4603      	mov	r3, r0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fc fbe7 	bl	8000418 <__aeabi_f2d>
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	460d      	mov	r5, r1
 8003c4e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fd f80e 	bl	8000c74 <__aeabi_ui2f>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fc fbdc 	bl	8000418 <__aeabi_f2d>
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <MPU9250SelfTest+0x6ec>)
 8003c66:	f7fc fa77 	bl	8000158 <__aeabi_dsub>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	a112      	add	r1, pc, #72	; (adr r1, 8003cb8 <MPU9250SelfTest+0x6e0>)
 8003c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c74:	f007 fa22 	bl	800b0bc <pow>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4629      	mov	r1, r5
 8003c80:	f7fc fc22 	bl	80004c8 <__aeabi_dmul>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f7fc feec 	bl	8000a68 <__aeabi_d2f>
 8003c90:	4603      	mov	r3, r0
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8003c94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003c98:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc ffeb 	bl	8000c7c <__aeabi_i2f>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fbb5 	bl	8000418 <__aeabi_f2d>
 8003cae:	4604      	mov	r4, r0
 8003cb0:	e00a      	b.n	8003cc8 <MPU9250SelfTest+0x6f0>
 8003cb2:	bf00      	nop
 8003cb4:	f3af 8000 	nop.w
 8003cb8:	c28f5c29 	.word	0xc28f5c29
 8003cbc:	3ff028f5 	.word	0x3ff028f5
 8003cc0:	51eb851f 	.word	0x51eb851f
 8003cc4:	3ff00000 	.word	0x3ff00000
 8003cc8:	460d      	mov	r5, r1
 8003cca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc ffd0 	bl	8000c74 <__aeabi_ui2f>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fc fb9e 	bl	8000418 <__aeabi_f2d>
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	4b9f      	ldr	r3, [pc, #636]	; (8003f60 <MPU9250SelfTest+0x988>)
 8003ce2:	f7fc fa39 	bl	8000158 <__aeabi_dsub>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	a19b      	add	r1, pc, #620	; (adr r1, 8003f58 <MPU9250SelfTest+0x980>)
 8003cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cf0:	f007 f9e4 	bl	800b0bc <pow>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	f7fc fbe4 	bl	80004c8 <__aeabi_dmul>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	f7fc feae 	bl	8000a68 <__aeabi_d2f>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8003d10:	2300      	movs	r3, #0
 8003d12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d14:	e088      	b.n	8003e28 <MPU9250SelfTest+0x850>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8003d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	3390      	adds	r3, #144	; 0x90
 8003d1c:	443b      	add	r3, r7
 8003d1e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8003d22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	3390      	adds	r3, #144	; 0x90
 8003d28:	443b      	add	r3, r7
 8003d2a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc ffa3 	bl	8000c7c <__aeabi_i2f>
 8003d36:	4603      	mov	r3, r0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fc fb6d 	bl	8000418 <__aeabi_f2d>
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <MPU9250SelfTest+0x98c>)
 8003d44:	f7fc fbc0 	bl	80004c8 <__aeabi_dmul>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	3390      	adds	r3, #144	; 0x90
 8003d56:	443b      	add	r3, r7
 8003d58:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fb5b 	bl	8000418 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4620      	mov	r0, r4
 8003d68:	4629      	mov	r1, r5
 8003d6a:	f7fc fcd7 	bl	800071c <__aeabi_ddiv>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	4b7a      	ldr	r3, [pc, #488]	; (8003f64 <MPU9250SelfTest+0x98c>)
 8003d7c:	f7fc f9ec 	bl	8000158 <__aeabi_dsub>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4610      	mov	r0, r2
 8003d86:	4619      	mov	r1, r3
 8003d88:	f7fc fe4e 	bl	8000a28 <__aeabi_d2uiz>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	3390      	adds	r3, #144	; 0x90
 8003d94:	443b      	add	r3, r7
 8003d96:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8003d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	3390      	adds	r3, #144	; 0x90
 8003da0:	443b      	add	r3, r7
 8003da2:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8003da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	3390      	adds	r3, #144	; 0x90
 8003dac:	443b      	add	r3, r7
 8003dae:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc ff61 	bl	8000c7c <__aeabi_i2f>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc fb2b 	bl	8000418 <__aeabi_f2d>
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	4b67      	ldr	r3, [pc, #412]	; (8003f64 <MPU9250SelfTest+0x98c>)
 8003dc8:	f7fc fb7e 	bl	80004c8 <__aeabi_dmul>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	461d      	mov	r5, r3
 8003dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dd6:	3303      	adds	r3, #3
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	3390      	adds	r3, #144	; 0x90
 8003ddc:	443b      	add	r3, r7
 8003dde:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc fb18 	bl	8000418 <__aeabi_f2d>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4620      	mov	r0, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	f7fc fc94 	bl	800071c <__aeabi_ddiv>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	4b58      	ldr	r3, [pc, #352]	; (8003f64 <MPU9250SelfTest+0x98c>)
 8003e02:	f7fc f9a9 	bl	8000158 <__aeabi_dsub>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e10:	1cdc      	adds	r4, r3, #3
 8003e12:	f7fc fe09 	bl	8000a28 <__aeabi_d2uiz>
 8003e16:	4602      	mov	r2, r0
 8003e18:	00a3      	lsls	r3, r4, #2
 8003e1a:	3390      	adds	r3, #144	; 0x90
 8003e1c:	443b      	add	r3, r7
 8003e1e:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 8003e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e24:	3301      	adds	r3, #1
 8003e26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	f77f af73 	ble.w	8003d16 <MPU9250SelfTest+0x73e>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");
#endif

   for (int i = 0; i < 3; i++) {
 8003e30:	2300      	movs	r3, #0
 8003e32:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e34:	e086      	b.n	8003f44 <MPU9250SelfTest+0x96c>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8003e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	3390      	adds	r3, #144	; 0x90
 8003e3c:	443b      	add	r3, r7
 8003e3e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8003e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	3390      	adds	r3, #144	; 0x90
 8003e48:	443b      	add	r3, r7
 8003e4a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc ff13 	bl	8000c7c <__aeabi_i2f>
 8003e56:	4603      	mov	r3, r0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc fadd 	bl	8000418 <__aeabi_f2d>
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	4b40      	ldr	r3, [pc, #256]	; (8003f64 <MPU9250SelfTest+0x98c>)
 8003e64:	f7fc fb30 	bl	80004c8 <__aeabi_dmul>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	461d      	mov	r5, r3
 8003e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	3390      	adds	r3, #144	; 0x90
 8003e76:	443b      	add	r3, r7
 8003e78:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fc facb 	bl	8000418 <__aeabi_f2d>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4620      	mov	r0, r4
 8003e88:	4629      	mov	r1, r5
 8003e8a:	f7fc fc47 	bl	800071c <__aeabi_ddiv>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4610      	mov	r0, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <MPU9250SelfTest+0x98c>)
 8003e9c:	f7fc f95c 	bl	8000158 <__aeabi_dsub>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	18d4      	adds	r4, r2, r3
 8003eb0:	f7fc fdda 	bl	8000a68 <__aeabi_d2f>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8003eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	3390      	adds	r3, #144	; 0x90
 8003ebe:	443b      	add	r3, r7
 8003ec0:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8003ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	3390      	adds	r3, #144	; 0x90
 8003eca:	443b      	add	r3, r7
 8003ecc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fc fed2 	bl	8000c7c <__aeabi_i2f>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fa9c 	bl	8000418 <__aeabi_f2d>
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <MPU9250SelfTest+0x98c>)
 8003ee6:	f7fc faef 	bl	80004c8 <__aeabi_dmul>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4614      	mov	r4, r2
 8003ef0:	461d      	mov	r5, r3
 8003ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef4:	3303      	adds	r3, #3
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	3390      	adds	r3, #144	; 0x90
 8003efa:	443b      	add	r3, r7
 8003efc:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fa89 	bl	8000418 <__aeabi_f2d>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	f7fc fc05 	bl	800071c <__aeabi_ddiv>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <MPU9250SelfTest+0x98c>)
 8003f20:	f7fc f91a 	bl	8000158 <__aeabi_dsub>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2e:	3303      	adds	r3, #3
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	18d4      	adds	r4, r2, r3
 8003f36:	f7fc fd97 	bl	8000a68 <__aeabi_d2f>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8003f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f40:	3301      	adds	r3, #1
 8003f42:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	f77f af75 	ble.w	8003e36 <MPU9250SelfTest+0x85e>
   }
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	3790      	adds	r7, #144	; 0x90
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bdb0      	pop	{r4, r5, r7, pc}
 8003f56:	bf00      	nop
 8003f58:	c28f5c29 	.word	0xc28f5c29
 8003f5c:	3ff028f5 	.word	0x3ff028f5
 8003f60:	3ff00000 	.word	0x3ff00000
 8003f64:	40590000 	.word	0x40590000

08003f68 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 8003f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6a:	b0ad      	sub	sp, #180	; 0xb4
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8003f76:	4b8a      	ldr	r3, [pc, #552]	; (80041a0 <QuaternionUpdate+0x238>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f7e:	4b88      	ldr	r3, [pc, #544]	; (80041a0 <QuaternionUpdate+0x238>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f86:	4b86      	ldr	r3, [pc, #536]	; (80041a0 <QuaternionUpdate+0x238>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f8e:	4b84      	ldr	r3, [pc, #528]	; (80041a0 <QuaternionUpdate+0x238>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8003f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc fdb9 	bl	8000b14 <__addsf3>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float _2q2 = 2.0f * q2;
 8003fa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fac:	4619      	mov	r1, r3
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc fdb0 	bl	8000b14 <__addsf3>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float _2q3 = 2.0f * q3;
 8003fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fc fda7 	bl	8000b14 <__addsf3>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float _2q4 = 2.0f * q4;
 8003fcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fc fd9e 	bl	8000b14 <__addsf3>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 8003fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fd95 	bl	8000b14 <__addsf3>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4619      	mov	r1, r3
 8003fee:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003ff2:	f7fc fe97 	bl	8000d24 <__aeabi_fmul>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 8003ffc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004000:	4619      	mov	r1, r3
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc fd86 	bl	8000b14 <__addsf3>
 8004008:	4603      	mov	r3, r0
 800400a:	4619      	mov	r1, r3
 800400c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004010:	f7fc fe88 	bl	8000d24 <__aeabi_fmul>
 8004014:	4603      	mov	r3, r0
 8004016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 800401a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800401e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004022:	f7fc fe7f 	bl	8000d24 <__aeabi_fmul>
 8004026:	4603      	mov	r3, r0
 8004028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 800402c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004030:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004034:	f7fc fe76 	bl	8000d24 <__aeabi_fmul>
 8004038:	4603      	mov	r3, r0
 800403a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 800403e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004042:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004046:	f7fc fe6d 	bl	8000d24 <__aeabi_fmul>
 800404a:	4603      	mov	r3, r0
 800404c:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1q4 = q1 * q4;
 800404e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004052:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004056:	f7fc fe65 	bl	8000d24 <__aeabi_fmul>
 800405a:	4603      	mov	r3, r0
 800405c:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2q2 = q2 * q2;
 800405e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004062:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004066:	f7fc fe5d 	bl	8000d24 <__aeabi_fmul>
 800406a:	4603      	mov	r3, r0
 800406c:	677b      	str	r3, [r7, #116]	; 0x74
    float q2q3 = q2 * q3;
 800406e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004072:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004076:	f7fc fe55 	bl	8000d24 <__aeabi_fmul>
 800407a:	4603      	mov	r3, r0
 800407c:	673b      	str	r3, [r7, #112]	; 0x70
    float q2q4 = q2 * q4;
 800407e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004082:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004086:	f7fc fe4d 	bl	8000d24 <__aeabi_fmul>
 800408a:	4603      	mov	r3, r0
 800408c:	66fb      	str	r3, [r7, #108]	; 0x6c
    float q3q3 = q3 * q3;
 800408e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004092:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004096:	f7fc fe45 	bl	8000d24 <__aeabi_fmul>
 800409a:	4603      	mov	r3, r0
 800409c:	66bb      	str	r3, [r7, #104]	; 0x68
    float q3q4 = q3 * q4;
 800409e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80040a2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80040a6:	f7fc fe3d 	bl	8000d24 <__aeabi_fmul>
 80040aa:	4603      	mov	r3, r0
 80040ac:	667b      	str	r3, [r7, #100]	; 0x64
    float q4q4 = q4 * q4;
 80040ae:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80040b2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80040b6:	f7fc fe35 	bl	8000d24 <__aeabi_fmul>
 80040ba:	4603      	mov	r3, r0
 80040bc:	663b      	str	r3, [r7, #96]	; 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7fc fe2f 	bl	8000d24 <__aeabi_fmul>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461c      	mov	r4, r3
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	68b8      	ldr	r0, [r7, #8]
 80040ce:	f7fc fe29 	bl	8000d24 <__aeabi_fmul>
 80040d2:	4603      	mov	r3, r0
 80040d4:	4619      	mov	r1, r3
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7fc fd1c 	bl	8000b14 <__addsf3>
 80040dc:	4603      	mov	r3, r0
 80040de:	461c      	mov	r4, r3
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc fe1e 	bl	8000d24 <__aeabi_fmul>
 80040e8:	4603      	mov	r3, r0
 80040ea:	4619      	mov	r1, r3
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7fc fd11 	bl	8000b14 <__addsf3>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f007 f86b 	bl	800b1d0 <sqrtf>
 80040fa:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004102:	f7fc ffa3 	bl	800104c <__aeabi_fcmpeq>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	f040 87e3 	bne.w	80050d4 <QuaternionUpdate+0x116c>
    norm = 1.0f/norm;
 800410e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004110:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004114:	f7fc feba 	bl	8000e8c <__aeabi_fdiv>
 8004118:	4603      	mov	r3, r0
 800411a:	65fb      	str	r3, [r7, #92]	; 0x5c
    ax *= norm;
 800411c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7fc fe00 	bl	8000d24 <__aeabi_fmul>
 8004124:	4603      	mov	r3, r0
 8004126:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 8004128:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800412a:	68b8      	ldr	r0, [r7, #8]
 800412c:	f7fc fdfa 	bl	8000d24 <__aeabi_fmul>
 8004130:	4603      	mov	r3, r0
 8004132:	60bb      	str	r3, [r7, #8]
    az *= norm;
 8004134:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fc fdf4 	bl	8000d24 <__aeabi_fmul>
 800413c:	4603      	mov	r3, r0
 800413e:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8004140:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004144:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004148:	f7fc fdec 	bl	8000d24 <__aeabi_fmul>
 800414c:	4603      	mov	r3, r0
 800414e:	461c      	mov	r4, r3
 8004150:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004154:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004158:	f7fc fde4 	bl	8000d24 <__aeabi_fmul>
 800415c:	4603      	mov	r3, r0
 800415e:	4619      	mov	r1, r3
 8004160:	4620      	mov	r0, r4
 8004162:	f7fc fcd7 	bl	8000b14 <__addsf3>
 8004166:	4603      	mov	r3, r0
 8004168:	461c      	mov	r4, r3
 800416a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800416e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8004172:	f7fc fdd7 	bl	8000d24 <__aeabi_fmul>
 8004176:	4603      	mov	r3, r0
 8004178:	4619      	mov	r1, r3
 800417a:	4620      	mov	r0, r4
 800417c:	f7fc fcca 	bl	8000b14 <__addsf3>
 8004180:	4603      	mov	r3, r0
 8004182:	4618      	mov	r0, r3
 8004184:	f007 f824 	bl	800b1d0 <sqrtf>
 8004188:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 800418a:	f04f 0100 	mov.w	r1, #0
 800418e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004190:	f7fc ff5c 	bl	800104c <__aeabi_fcmpeq>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 879e 	bne.w	80050d8 <QuaternionUpdate+0x1170>
 800419c:	e002      	b.n	80041a4 <QuaternionUpdate+0x23c>
 800419e:	bf00      	nop
 80041a0:	20000010 	.word	0x20000010
    norm = 1.0f/norm;
 80041a4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80041a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80041aa:	f7fc fe6f 	bl	8000e8c <__aeabi_fdiv>
 80041ae:	4603      	mov	r3, r0
 80041b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    mx *= norm;
 80041b2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80041b4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80041b8:	f7fc fdb4 	bl	8000d24 <__aeabi_fmul>
 80041bc:	4603      	mov	r3, r0
 80041be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    my *= norm;
 80041c2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80041c4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80041c8:	f7fc fdac 	bl	8000d24 <__aeabi_fmul>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mz *= norm;
 80041d2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80041d4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80041d8:	f7fc fda4 	bl	8000d24 <__aeabi_fmul>
 80041dc:	4603      	mov	r3, r0
 80041de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 80041e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041e6:	4619      	mov	r1, r3
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc fc93 	bl	8000b14 <__addsf3>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4619      	mov	r1, r3
 80041f2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80041f6:	f7fc fd95 	bl	8000d24 <__aeabi_fmul>
 80041fa:	4603      	mov	r3, r0
 80041fc:	65bb      	str	r3, [r7, #88]	; 0x58
    _2q1my = 2.0f * q1 * my;
 80041fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004202:	4619      	mov	r1, r3
 8004204:	4618      	mov	r0, r3
 8004206:	f7fc fc85 	bl	8000b14 <__addsf3>
 800420a:	4603      	mov	r3, r0
 800420c:	4619      	mov	r1, r3
 800420e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004212:	f7fc fd87 	bl	8000d24 <__aeabi_fmul>
 8004216:	4603      	mov	r3, r0
 8004218:	657b      	str	r3, [r7, #84]	; 0x54
    _2q1mz = 2.0f * q1 * mz;
 800421a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800421e:	4619      	mov	r1, r3
 8004220:	4618      	mov	r0, r3
 8004222:	f7fc fc77 	bl	8000b14 <__addsf3>
 8004226:	4603      	mov	r3, r0
 8004228:	4619      	mov	r1, r3
 800422a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800422e:	f7fc fd79 	bl	8000d24 <__aeabi_fmul>
 8004232:	4603      	mov	r3, r0
 8004234:	653b      	str	r3, [r7, #80]	; 0x50
    _2q2mx = 2.0f * q2 * mx;
 8004236:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800423a:	4619      	mov	r1, r3
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc fc69 	bl	8000b14 <__addsf3>
 8004242:	4603      	mov	r3, r0
 8004244:	4619      	mov	r1, r3
 8004246:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800424a:	f7fc fd6b 	bl	8000d24 <__aeabi_fmul>
 800424e:	4603      	mov	r3, r0
 8004250:	64fb      	str	r3, [r7, #76]	; 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8004252:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004256:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800425a:	f7fc fd63 	bl	8000d24 <__aeabi_fmul>
 800425e:	4603      	mov	r3, r0
 8004260:	461c      	mov	r4, r3
 8004262:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004266:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004268:	f7fc fd5c 	bl	8000d24 <__aeabi_fmul>
 800426c:	4603      	mov	r3, r0
 800426e:	4619      	mov	r1, r3
 8004270:	4620      	mov	r0, r4
 8004272:	f7fc fc4d 	bl	8000b10 <__aeabi_fsub>
 8004276:	4603      	mov	r3, r0
 8004278:	461c      	mov	r4, r3
 800427a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800427e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004280:	f7fc fd50 	bl	8000d24 <__aeabi_fmul>
 8004284:	4603      	mov	r3, r0
 8004286:	4619      	mov	r1, r3
 8004288:	4620      	mov	r0, r4
 800428a:	f7fc fc43 	bl	8000b14 <__addsf3>
 800428e:	4603      	mov	r3, r0
 8004290:	461c      	mov	r4, r3
 8004292:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004294:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004298:	f7fc fd44 	bl	8000d24 <__aeabi_fmul>
 800429c:	4603      	mov	r3, r0
 800429e:	4619      	mov	r1, r3
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7fc fc37 	bl	8000b14 <__addsf3>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461c      	mov	r4, r3
 80042aa:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80042ae:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80042b2:	f7fc fd37 	bl	8000d24 <__aeabi_fmul>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc fd31 	bl	8000d24 <__aeabi_fmul>
 80042c2:	4603      	mov	r3, r0
 80042c4:	4619      	mov	r1, r3
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7fc fc24 	bl	8000b14 <__addsf3>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461c      	mov	r4, r3
 80042d0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80042d4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80042d8:	f7fc fd24 	bl	8000d24 <__aeabi_fmul>
 80042dc:	4603      	mov	r3, r0
 80042de:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fc fd1e 	bl	8000d24 <__aeabi_fmul>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4619      	mov	r1, r3
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7fc fc11 	bl	8000b14 <__addsf3>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461c      	mov	r4, r3
 80042f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042f8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80042fc:	f7fc fd12 	bl	8000d24 <__aeabi_fmul>
 8004300:	4603      	mov	r3, r0
 8004302:	4619      	mov	r1, r3
 8004304:	4620      	mov	r0, r4
 8004306:	f7fc fc03 	bl	8000b10 <__aeabi_fsub>
 800430a:	4603      	mov	r3, r0
 800430c:	461c      	mov	r4, r3
 800430e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004310:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004314:	f7fc fd06 	bl	8000d24 <__aeabi_fmul>
 8004318:	4603      	mov	r3, r0
 800431a:	4619      	mov	r1, r3
 800431c:	4620      	mov	r0, r4
 800431e:	f7fc fbf7 	bl	8000b10 <__aeabi_fsub>
 8004322:	4603      	mov	r3, r0
 8004324:	64bb      	str	r3, [r7, #72]	; 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8004326:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800432a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800432c:	f7fc fcfa 	bl	8000d24 <__aeabi_fmul>
 8004330:	4603      	mov	r3, r0
 8004332:	461c      	mov	r4, r3
 8004334:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004338:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800433c:	f7fc fcf2 	bl	8000d24 <__aeabi_fmul>
 8004340:	4603      	mov	r3, r0
 8004342:	4619      	mov	r1, r3
 8004344:	4620      	mov	r0, r4
 8004346:	f7fc fbe5 	bl	8000b14 <__addsf3>
 800434a:	4603      	mov	r3, r0
 800434c:	461c      	mov	r4, r3
 800434e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004352:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004354:	f7fc fce6 	bl	8000d24 <__aeabi_fmul>
 8004358:	4603      	mov	r3, r0
 800435a:	4619      	mov	r1, r3
 800435c:	4620      	mov	r0, r4
 800435e:	f7fc fbd7 	bl	8000b10 <__aeabi_fsub>
 8004362:	4603      	mov	r3, r0
 8004364:	461c      	mov	r4, r3
 8004366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800436a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800436c:	f7fc fcda 	bl	8000d24 <__aeabi_fmul>
 8004370:	4603      	mov	r3, r0
 8004372:	4619      	mov	r1, r3
 8004374:	4620      	mov	r0, r4
 8004376:	f7fc fbcd 	bl	8000b14 <__addsf3>
 800437a:	4603      	mov	r3, r0
 800437c:	461c      	mov	r4, r3
 800437e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004380:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004384:	f7fc fcce 	bl	8000d24 <__aeabi_fmul>
 8004388:	4603      	mov	r3, r0
 800438a:	4619      	mov	r1, r3
 800438c:	4620      	mov	r0, r4
 800438e:	f7fc fbbf 	bl	8000b10 <__aeabi_fsub>
 8004392:	4603      	mov	r3, r0
 8004394:	461c      	mov	r4, r3
 8004396:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004398:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800439c:	f7fc fcc2 	bl	8000d24 <__aeabi_fmul>
 80043a0:	4603      	mov	r3, r0
 80043a2:	4619      	mov	r1, r3
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7fc fbb5 	bl	8000b14 <__addsf3>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461c      	mov	r4, r3
 80043ae:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80043b2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80043b6:	f7fc fcb5 	bl	8000d24 <__aeabi_fmul>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fc fcaf 	bl	8000d24 <__aeabi_fmul>
 80043c6:	4603      	mov	r3, r0
 80043c8:	4619      	mov	r1, r3
 80043ca:	4620      	mov	r0, r4
 80043cc:	f7fc fba2 	bl	8000b14 <__addsf3>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461c      	mov	r4, r3
 80043d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80043d6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80043da:	f7fc fca3 	bl	8000d24 <__aeabi_fmul>
 80043de:	4603      	mov	r3, r0
 80043e0:	4619      	mov	r1, r3
 80043e2:	4620      	mov	r0, r4
 80043e4:	f7fc fb94 	bl	8000b10 <__aeabi_fsub>
 80043e8:	4603      	mov	r3, r0
 80043ea:	647b      	str	r3, [r7, #68]	; 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 80043ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80043ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80043f0:	f7fc fc98 	bl	8000d24 <__aeabi_fmul>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461c      	mov	r4, r3
 80043f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80043fc:	f7fc fc92 	bl	8000d24 <__aeabi_fmul>
 8004400:	4603      	mov	r3, r0
 8004402:	4619      	mov	r1, r3
 8004404:	4620      	mov	r0, r4
 8004406:	f7fc fb85 	bl	8000b14 <__addsf3>
 800440a:	4603      	mov	r3, r0
 800440c:	4618      	mov	r0, r3
 800440e:	f006 fedf 	bl	800b1d0 <sqrtf>
 8004412:	6438      	str	r0, [r7, #64]	; 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8004414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004416:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800441a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc fc80 	bl	8000d24 <__aeabi_fmul>
 8004424:	4603      	mov	r3, r0
 8004426:	461c      	mov	r4, r3
 8004428:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800442c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800442e:	f7fc fc79 	bl	8000d24 <__aeabi_fmul>
 8004432:	4603      	mov	r3, r0
 8004434:	4619      	mov	r1, r3
 8004436:	4620      	mov	r0, r4
 8004438:	f7fc fb6c 	bl	8000b14 <__addsf3>
 800443c:	4603      	mov	r3, r0
 800443e:	461c      	mov	r4, r3
 8004440:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004444:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8004448:	f7fc fc6c 	bl	8000d24 <__aeabi_fmul>
 800444c:	4603      	mov	r3, r0
 800444e:	4619      	mov	r1, r3
 8004450:	4620      	mov	r0, r4
 8004452:	f7fc fb5f 	bl	8000b14 <__addsf3>
 8004456:	4603      	mov	r3, r0
 8004458:	461c      	mov	r4, r3
 800445a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800445e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004460:	f7fc fc60 	bl	8000d24 <__aeabi_fmul>
 8004464:	4603      	mov	r3, r0
 8004466:	4619      	mov	r1, r3
 8004468:	4620      	mov	r0, r4
 800446a:	f7fc fb53 	bl	8000b14 <__addsf3>
 800446e:	4603      	mov	r3, r0
 8004470:	461c      	mov	r4, r3
 8004472:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004474:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8004478:	f7fc fc54 	bl	8000d24 <__aeabi_fmul>
 800447c:	4603      	mov	r3, r0
 800447e:	4619      	mov	r1, r3
 8004480:	4620      	mov	r0, r4
 8004482:	f7fc fb45 	bl	8000b10 <__aeabi_fsub>
 8004486:	4603      	mov	r3, r0
 8004488:	461c      	mov	r4, r3
 800448a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800448e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004492:	f7fc fc47 	bl	8000d24 <__aeabi_fmul>
 8004496:	4603      	mov	r3, r0
 8004498:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800449c:	4618      	mov	r0, r3
 800449e:	f7fc fc41 	bl	8000d24 <__aeabi_fmul>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4619      	mov	r1, r3
 80044a6:	4620      	mov	r0, r4
 80044a8:	f7fc fb34 	bl	8000b14 <__addsf3>
 80044ac:	4603      	mov	r3, r0
 80044ae:	461c      	mov	r4, r3
 80044b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044b2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80044b6:	f7fc fc35 	bl	8000d24 <__aeabi_fmul>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4619      	mov	r1, r3
 80044be:	4620      	mov	r0, r4
 80044c0:	f7fc fb26 	bl	8000b10 <__aeabi_fsub>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461c      	mov	r4, r3
 80044c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80044ca:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80044ce:	f7fc fc29 	bl	8000d24 <__aeabi_fmul>
 80044d2:	4603      	mov	r3, r0
 80044d4:	4619      	mov	r1, r3
 80044d6:	4620      	mov	r0, r4
 80044d8:	f7fc fb1c 	bl	8000b14 <__addsf3>
 80044dc:	4603      	mov	r3, r0
 80044de:	63fb      	str	r3, [r7, #60]	; 0x3c
    _4bx = 2.0f * _2bx;
 80044e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e2:	4619      	mov	r1, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fc fb15 	bl	8000b14 <__addsf3>
 80044ea:	4603      	mov	r3, r0
 80044ec:	63bb      	str	r3, [r7, #56]	; 0x38
    _4bz = 2.0f * _2bz;
 80044ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f0:	4619      	mov	r1, r3
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fc fb0e 	bl	8000b14 <__addsf3>
 80044f8:	4603      	mov	r3, r0
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80044fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004500:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	4619      	mov	r1, r3
 8004508:	4618      	mov	r0, r3
 800450a:	f7fc fb03 	bl	8000b14 <__addsf3>
 800450e:	4603      	mov	r3, r0
 8004510:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004514:	4618      	mov	r0, r3
 8004516:	f7fc fafb 	bl	8000b10 <__aeabi_fsub>
 800451a:	4603      	mov	r3, r0
 800451c:	68f9      	ldr	r1, [r7, #12]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fc faf6 	bl	8000b10 <__aeabi_fsub>
 8004524:	4603      	mov	r3, r0
 8004526:	4619      	mov	r1, r3
 8004528:	4620      	mov	r0, r4
 800452a:	f7fc fbfb 	bl	8000d24 <__aeabi_fmul>
 800452e:	4603      	mov	r3, r0
 8004530:	461c      	mov	r4, r3
 8004532:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004536:	4619      	mov	r1, r3
 8004538:	4618      	mov	r0, r3
 800453a:	f7fc faeb 	bl	8000b14 <__addsf3>
 800453e:	4603      	mov	r3, r0
 8004540:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004544:	4618      	mov	r0, r3
 8004546:	f7fc fae5 	bl	8000b14 <__addsf3>
 800454a:	4603      	mov	r3, r0
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fc fade 	bl	8000b10 <__aeabi_fsub>
 8004554:	4603      	mov	r3, r0
 8004556:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800455a:	4618      	mov	r0, r3
 800455c:	f7fc fbe2 	bl	8000d24 <__aeabi_fmul>
 8004560:	4603      	mov	r3, r0
 8004562:	4619      	mov	r1, r3
 8004564:	4620      	mov	r0, r4
 8004566:	f7fc fad5 	bl	8000b14 <__addsf3>
 800456a:	4603      	mov	r3, r0
 800456c:	461c      	mov	r4, r3
 800456e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004572:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004574:	f7fc fbd6 	bl	8000d24 <__aeabi_fmul>
 8004578:	4603      	mov	r3, r0
 800457a:	461d      	mov	r5, r3
 800457c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800457e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004582:	f7fc fac5 	bl	8000b10 <__aeabi_fsub>
 8004586:	4603      	mov	r3, r0
 8004588:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc fac0 	bl	8000b10 <__aeabi_fsub>
 8004590:	4603      	mov	r3, r0
 8004592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004594:	4618      	mov	r0, r3
 8004596:	f7fc fbc5 	bl	8000d24 <__aeabi_fmul>
 800459a:	4603      	mov	r3, r0
 800459c:	461e      	mov	r6, r3
 800459e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045a2:	f7fc fab5 	bl	8000b10 <__aeabi_fsub>
 80045a6:	4603      	mov	r3, r0
 80045a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fc fbba 	bl	8000d24 <__aeabi_fmul>
 80045b0:	4603      	mov	r3, r0
 80045b2:	4619      	mov	r1, r3
 80045b4:	4630      	mov	r0, r6
 80045b6:	f7fc faad 	bl	8000b14 <__addsf3>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fc faa5 	bl	8000b10 <__aeabi_fsub>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4619      	mov	r1, r3
 80045ca:	4628      	mov	r0, r5
 80045cc:	f7fc fbaa 	bl	8000d24 <__aeabi_fmul>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4619      	mov	r1, r3
 80045d4:	4620      	mov	r0, r4
 80045d6:	f7fc fa9b 	bl	8000b10 <__aeabi_fsub>
 80045da:	4603      	mov	r3, r0
 80045dc:	461c      	mov	r4, r3
 80045de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80045e4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fc fb9b 	bl	8000d24 <__aeabi_fmul>
 80045ee:	4603      	mov	r3, r0
 80045f0:	461d      	mov	r5, r3
 80045f2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80045f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80045f8:	f7fc fb94 	bl	8000d24 <__aeabi_fmul>
 80045fc:	4603      	mov	r3, r0
 80045fe:	4619      	mov	r1, r3
 8004600:	4628      	mov	r0, r5
 8004602:	f7fc fa87 	bl	8000b14 <__addsf3>
 8004606:	4603      	mov	r3, r0
 8004608:	461d      	mov	r5, r3
 800460a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800460c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800460e:	f7fc fa7f 	bl	8000b10 <__aeabi_fsub>
 8004612:	4603      	mov	r3, r0
 8004614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004616:	4618      	mov	r0, r3
 8004618:	f7fc fb84 	bl	8000d24 <__aeabi_fmul>
 800461c:	4603      	mov	r3, r0
 800461e:	461e      	mov	r6, r3
 8004620:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004622:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004626:	f7fc fa75 	bl	8000b14 <__addsf3>
 800462a:	4603      	mov	r3, r0
 800462c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800462e:	4618      	mov	r0, r3
 8004630:	f7fc fb78 	bl	8000d24 <__aeabi_fmul>
 8004634:	4603      	mov	r3, r0
 8004636:	4619      	mov	r1, r3
 8004638:	4630      	mov	r0, r6
 800463a:	f7fc fa6b 	bl	8000b14 <__addsf3>
 800463e:	4603      	mov	r3, r0
 8004640:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004644:	4618      	mov	r0, r3
 8004646:	f7fc fa63 	bl	8000b10 <__aeabi_fsub>
 800464a:	4603      	mov	r3, r0
 800464c:	4619      	mov	r1, r3
 800464e:	4628      	mov	r0, r5
 8004650:	f7fc fb68 	bl	8000d24 <__aeabi_fmul>
 8004654:	4603      	mov	r3, r0
 8004656:	4619      	mov	r1, r3
 8004658:	4620      	mov	r0, r4
 800465a:	f7fc fa5b 	bl	8000b14 <__addsf3>
 800465e:	4603      	mov	r3, r0
 8004660:	461c      	mov	r4, r3
 8004662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004666:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004668:	f7fc fb5c 	bl	8000d24 <__aeabi_fmul>
 800466c:	4603      	mov	r3, r0
 800466e:	461d      	mov	r5, r3
 8004670:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004672:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004674:	f7fc fa4e 	bl	8000b14 <__addsf3>
 8004678:	4603      	mov	r3, r0
 800467a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800467c:	4618      	mov	r0, r3
 800467e:	f7fc fb51 	bl	8000d24 <__aeabi_fmul>
 8004682:	4603      	mov	r3, r0
 8004684:	461e      	mov	r6, r3
 8004686:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004688:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800468c:	f7fc fa40 	bl	8000b10 <__aeabi_fsub>
 8004690:	4603      	mov	r3, r0
 8004692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004694:	4618      	mov	r0, r3
 8004696:	f7fc fa3b 	bl	8000b10 <__aeabi_fsub>
 800469a:	4603      	mov	r3, r0
 800469c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fc fb40 	bl	8000d24 <__aeabi_fmul>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4619      	mov	r1, r3
 80046a8:	4630      	mov	r0, r6
 80046aa:	f7fc fa33 	bl	8000b14 <__addsf3>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fc fa2b 	bl	8000b10 <__aeabi_fsub>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4619      	mov	r1, r3
 80046be:	4628      	mov	r0, r5
 80046c0:	f7fc fb30 	bl	8000d24 <__aeabi_fmul>
 80046c4:	4603      	mov	r3, r0
 80046c6:	4619      	mov	r1, r3
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7fc fa23 	bl	8000b14 <__addsf3>
 80046ce:	4603      	mov	r3, r0
 80046d0:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80046d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d4:	4619      	mov	r1, r3
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fc fa1c 	bl	8000b14 <__addsf3>
 80046dc:	4603      	mov	r3, r0
 80046de:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fc fa14 	bl	8000b10 <__aeabi_fsub>
 80046e8:	4603      	mov	r3, r0
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fc fa0f 	bl	8000b10 <__aeabi_fsub>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fc fb13 	bl	8000d24 <__aeabi_fmul>
 80046fe:	4603      	mov	r3, r0
 8004700:	461c      	mov	r4, r3
 8004702:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004706:	4619      	mov	r1, r3
 8004708:	4618      	mov	r0, r3
 800470a:	f7fc fa03 	bl	8000b14 <__addsf3>
 800470e:	4603      	mov	r3, r0
 8004710:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004714:	4618      	mov	r0, r3
 8004716:	f7fc f9fd 	bl	8000b14 <__addsf3>
 800471a:	4603      	mov	r3, r0
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fc f9f6 	bl	8000b10 <__aeabi_fsub>
 8004724:	4603      	mov	r3, r0
 8004726:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800472a:	4618      	mov	r0, r3
 800472c:	f7fc fafa 	bl	8000d24 <__aeabi_fmul>
 8004730:	4603      	mov	r3, r0
 8004732:	4619      	mov	r1, r3
 8004734:	4620      	mov	r0, r4
 8004736:	f7fc f9ed 	bl	8000b14 <__addsf3>
 800473a:	4603      	mov	r3, r0
 800473c:	461c      	mov	r4, r3
 800473e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004742:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004746:	f7fc faed 	bl	8000d24 <__aeabi_fmul>
 800474a:	4603      	mov	r3, r0
 800474c:	461d      	mov	r5, r3
 800474e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004750:	4619      	mov	r1, r3
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc f9de 	bl	8000b14 <__addsf3>
 8004758:	4603      	mov	r3, r0
 800475a:	4619      	mov	r1, r3
 800475c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004760:	f7fc f9d6 	bl	8000b10 <__aeabi_fsub>
 8004764:	4603      	mov	r3, r0
 8004766:	461e      	mov	r6, r3
 8004768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800476a:	4619      	mov	r1, r3
 800476c:	4618      	mov	r0, r3
 800476e:	f7fc f9d1 	bl	8000b14 <__addsf3>
 8004772:	4603      	mov	r3, r0
 8004774:	4619      	mov	r1, r3
 8004776:	4630      	mov	r0, r6
 8004778:	f7fc f9ca 	bl	8000b10 <__aeabi_fsub>
 800477c:	4603      	mov	r3, r0
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4618      	mov	r0, r3
 8004782:	f7fc f9c5 	bl	8000b10 <__aeabi_fsub>
 8004786:	4603      	mov	r3, r0
 8004788:	4619      	mov	r1, r3
 800478a:	4628      	mov	r0, r5
 800478c:	f7fc faca 	bl	8000d24 <__aeabi_fmul>
 8004790:	4603      	mov	r3, r0
 8004792:	4619      	mov	r1, r3
 8004794:	4620      	mov	r0, r4
 8004796:	f7fc f9bb 	bl	8000b10 <__aeabi_fsub>
 800479a:	4603      	mov	r3, r0
 800479c:	461c      	mov	r4, r3
 800479e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80047a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80047a4:	f7fc fabe 	bl	8000d24 <__aeabi_fmul>
 80047a8:	4603      	mov	r3, r0
 80047aa:	461d      	mov	r5, r3
 80047ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047ae:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80047b2:	f7fc f9ad 	bl	8000b10 <__aeabi_fsub>
 80047b6:	4603      	mov	r3, r0
 80047b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fc f9a8 	bl	8000b10 <__aeabi_fsub>
 80047c0:	4603      	mov	r3, r0
 80047c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fc faad 	bl	8000d24 <__aeabi_fmul>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461e      	mov	r6, r3
 80047ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047d2:	f7fc f99d 	bl	8000b10 <__aeabi_fsub>
 80047d6:	4603      	mov	r3, r0
 80047d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc faa2 	bl	8000d24 <__aeabi_fmul>
 80047e0:	4603      	mov	r3, r0
 80047e2:	4619      	mov	r1, r3
 80047e4:	4630      	mov	r0, r6
 80047e6:	f7fc f995 	bl	8000b14 <__addsf3>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fc f98d 	bl	8000b10 <__aeabi_fsub>
 80047f6:	4603      	mov	r3, r0
 80047f8:	4619      	mov	r1, r3
 80047fa:	4628      	mov	r0, r5
 80047fc:	f7fc fa92 	bl	8000d24 <__aeabi_fmul>
 8004800:	4603      	mov	r3, r0
 8004802:	4619      	mov	r1, r3
 8004804:	4620      	mov	r0, r4
 8004806:	f7fc f985 	bl	8000b14 <__addsf3>
 800480a:	4603      	mov	r3, r0
 800480c:	461c      	mov	r4, r3
 800480e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004812:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004814:	f7fc fa86 	bl	8000d24 <__aeabi_fmul>
 8004818:	4603      	mov	r3, r0
 800481a:	461d      	mov	r5, r3
 800481c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004820:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004822:	f7fc fa7f 	bl	8000d24 <__aeabi_fmul>
 8004826:	4603      	mov	r3, r0
 8004828:	4619      	mov	r1, r3
 800482a:	4628      	mov	r0, r5
 800482c:	f7fc f972 	bl	8000b14 <__addsf3>
 8004830:	4603      	mov	r3, r0
 8004832:	461d      	mov	r5, r3
 8004834:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004836:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004838:	f7fc f96a 	bl	8000b10 <__aeabi_fsub>
 800483c:	4603      	mov	r3, r0
 800483e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004840:	4618      	mov	r0, r3
 8004842:	f7fc fa6f 	bl	8000d24 <__aeabi_fmul>
 8004846:	4603      	mov	r3, r0
 8004848:	461e      	mov	r6, r3
 800484a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800484c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004850:	f7fc f960 	bl	8000b14 <__addsf3>
 8004854:	4603      	mov	r3, r0
 8004856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004858:	4618      	mov	r0, r3
 800485a:	f7fc fa63 	bl	8000d24 <__aeabi_fmul>
 800485e:	4603      	mov	r3, r0
 8004860:	4619      	mov	r1, r3
 8004862:	4630      	mov	r0, r6
 8004864:	f7fc f956 	bl	8000b14 <__addsf3>
 8004868:	4603      	mov	r3, r0
 800486a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc f94e 	bl	8000b10 <__aeabi_fsub>
 8004874:	4603      	mov	r3, r0
 8004876:	4619      	mov	r1, r3
 8004878:	4628      	mov	r0, r5
 800487a:	f7fc fa53 	bl	8000d24 <__aeabi_fmul>
 800487e:	4603      	mov	r3, r0
 8004880:	4619      	mov	r1, r3
 8004882:	4620      	mov	r0, r4
 8004884:	f7fc f946 	bl	8000b14 <__addsf3>
 8004888:	4603      	mov	r3, r0
 800488a:	461c      	mov	r4, r3
 800488c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004890:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004892:	f7fc fa47 	bl	8000d24 <__aeabi_fmul>
 8004896:	4603      	mov	r3, r0
 8004898:	461d      	mov	r5, r3
 800489a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800489e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048a0:	f7fc fa40 	bl	8000d24 <__aeabi_fmul>
 80048a4:	4603      	mov	r3, r0
 80048a6:	4619      	mov	r1, r3
 80048a8:	4628      	mov	r0, r5
 80048aa:	f7fc f931 	bl	8000b10 <__aeabi_fsub>
 80048ae:	4603      	mov	r3, r0
 80048b0:	461d      	mov	r5, r3
 80048b2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80048b4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80048b6:	f7fc f92d 	bl	8000b14 <__addsf3>
 80048ba:	4603      	mov	r3, r0
 80048bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fc fa30 	bl	8000d24 <__aeabi_fmul>
 80048c4:	4603      	mov	r3, r0
 80048c6:	461e      	mov	r6, r3
 80048c8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80048ca:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80048ce:	f7fc f91f 	bl	8000b10 <__aeabi_fsub>
 80048d2:	4603      	mov	r3, r0
 80048d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fc f91a 	bl	8000b10 <__aeabi_fsub>
 80048dc:	4603      	mov	r3, r0
 80048de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fc fa1f 	bl	8000d24 <__aeabi_fmul>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4619      	mov	r1, r3
 80048ea:	4630      	mov	r0, r6
 80048ec:	f7fc f912 	bl	8000b14 <__addsf3>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fc f90a 	bl	8000b10 <__aeabi_fsub>
 80048fc:	4603      	mov	r3, r0
 80048fe:	4619      	mov	r1, r3
 8004900:	4628      	mov	r0, r5
 8004902:	f7fc fa0f 	bl	8000d24 <__aeabi_fmul>
 8004906:	4603      	mov	r3, r0
 8004908:	4619      	mov	r1, r3
 800490a:	4620      	mov	r0, r4
 800490c:	f7fc f902 	bl	8000b14 <__addsf3>
 8004910:	4603      	mov	r3, r0
 8004912:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004918:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800491c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491e:	4619      	mov	r1, r3
 8004920:	4618      	mov	r0, r3
 8004922:	f7fc f8f7 	bl	8000b14 <__addsf3>
 8004926:	4603      	mov	r3, r0
 8004928:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800492c:	4618      	mov	r0, r3
 800492e:	f7fc f8ef 	bl	8000b10 <__aeabi_fsub>
 8004932:	4603      	mov	r3, r0
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fc f8ea 	bl	8000b10 <__aeabi_fsub>
 800493c:	4603      	mov	r3, r0
 800493e:	4619      	mov	r1, r3
 8004940:	4620      	mov	r0, r4
 8004942:	f7fc f9ef 	bl	8000d24 <__aeabi_fmul>
 8004946:	4603      	mov	r3, r0
 8004948:	461c      	mov	r4, r3
 800494a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800494e:	4619      	mov	r1, r3
 8004950:	4618      	mov	r0, r3
 8004952:	f7fc f8df 	bl	8000b14 <__addsf3>
 8004956:	4603      	mov	r3, r0
 8004958:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800495c:	4618      	mov	r0, r3
 800495e:	f7fc f8d9 	bl	8000b14 <__addsf3>
 8004962:	4603      	mov	r3, r0
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fc f8d2 	bl	8000b10 <__aeabi_fsub>
 800496c:	4603      	mov	r3, r0
 800496e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc f9d6 	bl	8000d24 <__aeabi_fmul>
 8004978:	4603      	mov	r3, r0
 800497a:	4619      	mov	r1, r3
 800497c:	4620      	mov	r0, r4
 800497e:	f7fc f8c9 	bl	8000b14 <__addsf3>
 8004982:	4603      	mov	r3, r0
 8004984:	461c      	mov	r4, r3
 8004986:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800498a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800498e:	f7fc f9c9 	bl	8000d24 <__aeabi_fmul>
 8004992:	4603      	mov	r3, r0
 8004994:	461d      	mov	r5, r3
 8004996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004998:	4619      	mov	r1, r3
 800499a:	4618      	mov	r0, r3
 800499c:	f7fc f8ba 	bl	8000b14 <__addsf3>
 80049a0:	4603      	mov	r3, r0
 80049a2:	4619      	mov	r1, r3
 80049a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80049a8:	f7fc f8b2 	bl	8000b10 <__aeabi_fsub>
 80049ac:	4603      	mov	r3, r0
 80049ae:	461e      	mov	r6, r3
 80049b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049b2:	4619      	mov	r1, r3
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fc f8ad 	bl	8000b14 <__addsf3>
 80049ba:	4603      	mov	r3, r0
 80049bc:	4619      	mov	r1, r3
 80049be:	4630      	mov	r0, r6
 80049c0:	f7fc f8a6 	bl	8000b10 <__aeabi_fsub>
 80049c4:	4603      	mov	r3, r0
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fc f8a1 	bl	8000b10 <__aeabi_fsub>
 80049ce:	4603      	mov	r3, r0
 80049d0:	4619      	mov	r1, r3
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7fc f9a6 	bl	8000d24 <__aeabi_fmul>
 80049d8:	4603      	mov	r3, r0
 80049da:	4619      	mov	r1, r3
 80049dc:	4620      	mov	r0, r4
 80049de:	f7fc f897 	bl	8000b10 <__aeabi_fsub>
 80049e2:	4603      	mov	r3, r0
 80049e4:	461c      	mov	r4, r3
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80049ec:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fc f997 	bl	8000d24 <__aeabi_fmul>
 80049f6:	4603      	mov	r3, r0
 80049f8:	461d      	mov	r5, r3
 80049fa:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80049fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a00:	f7fc f990 	bl	8000d24 <__aeabi_fmul>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4619      	mov	r1, r3
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f7fc f881 	bl	8000b10 <__aeabi_fsub>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	461d      	mov	r5, r3
 8004a12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a14:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004a18:	f7fc f87a 	bl	8000b10 <__aeabi_fsub>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fc f875 	bl	8000b10 <__aeabi_fsub>
 8004a26:	4603      	mov	r3, r0
 8004a28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fc f97a 	bl	8000d24 <__aeabi_fmul>
 8004a30:	4603      	mov	r3, r0
 8004a32:	461e      	mov	r6, r3
 8004a34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a38:	f7fc f86a 	bl	8000b10 <__aeabi_fsub>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fc f96f 	bl	8000d24 <__aeabi_fmul>
 8004a46:	4603      	mov	r3, r0
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f7fc f862 	bl	8000b14 <__addsf3>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fc f85a 	bl	8000b10 <__aeabi_fsub>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4628      	mov	r0, r5
 8004a62:	f7fc f95f 	bl	8000d24 <__aeabi_fmul>
 8004a66:	4603      	mov	r3, r0
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7fc f852 	bl	8000b14 <__addsf3>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461c      	mov	r4, r3
 8004a74:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004a78:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a7a:	f7fc f953 	bl	8000d24 <__aeabi_fmul>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	461d      	mov	r5, r3
 8004a82:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004a86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a88:	f7fc f94c 	bl	8000d24 <__aeabi_fmul>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4628      	mov	r0, r5
 8004a92:	f7fc f83f 	bl	8000b14 <__addsf3>
 8004a96:	4603      	mov	r3, r0
 8004a98:	461d      	mov	r5, r3
 8004a9a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004a9c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004a9e:	f7fc f837 	bl	8000b10 <__aeabi_fsub>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fc f93c 	bl	8000d24 <__aeabi_fmul>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461e      	mov	r6, r3
 8004ab0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004ab2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004ab6:	f7fc f82d 	bl	8000b14 <__addsf3>
 8004aba:	4603      	mov	r3, r0
 8004abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc f930 	bl	8000d24 <__aeabi_fmul>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7fc f823 	bl	8000b14 <__addsf3>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fc f81b 	bl	8000b10 <__aeabi_fsub>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4619      	mov	r1, r3
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f7fc f920 	bl	8000d24 <__aeabi_fmul>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f7fc f813 	bl	8000b14 <__addsf3>
 8004aee:	4603      	mov	r3, r0
 8004af0:	461c      	mov	r4, r3
 8004af2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004af6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004af8:	f7fc f914 	bl	8000d24 <__aeabi_fmul>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461d      	mov	r5, r3
 8004b00:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b06:	f7fc f90d 	bl	8000d24 <__aeabi_fmul>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f7fb fffe 	bl	8000b10 <__aeabi_fsub>
 8004b14:	4603      	mov	r3, r0
 8004b16:	461d      	mov	r5, r3
 8004b18:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004b1a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004b1c:	f7fb fffa 	bl	8000b14 <__addsf3>
 8004b20:	4603      	mov	r3, r0
 8004b22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fc f8fd 	bl	8000d24 <__aeabi_fmul>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	461e      	mov	r6, r3
 8004b2e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004b30:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004b34:	f7fb ffec 	bl	8000b10 <__aeabi_fsub>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fb ffe7 	bl	8000b10 <__aeabi_fsub>
 8004b42:	4603      	mov	r3, r0
 8004b44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fc f8ec 	bl	8000d24 <__aeabi_fmul>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4630      	mov	r0, r6
 8004b52:	f7fb ffdf 	bl	8000b14 <__addsf3>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fb ffd7 	bl	8000b10 <__aeabi_fsub>
 8004b62:	4603      	mov	r3, r0
 8004b64:	4619      	mov	r1, r3
 8004b66:	4628      	mov	r0, r5
 8004b68:	f7fc f8dc 	bl	8000d24 <__aeabi_fmul>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4620      	mov	r0, r4
 8004b72:	f7fb ffcf 	bl	8000b14 <__addsf3>
 8004b76:	4603      	mov	r3, r0
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fb ffc8 	bl	8000b14 <__addsf3>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fb ffc0 	bl	8000b10 <__aeabi_fsub>
 8004b90:	4603      	mov	r3, r0
 8004b92:	68f9      	ldr	r1, [r7, #12]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fb ffbb 	bl	8000b10 <__aeabi_fsub>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fc f8bf 	bl	8000d24 <__aeabi_fmul>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461c      	mov	r4, r3
 8004baa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fb ffaf 	bl	8000b14 <__addsf3>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fb ffa9 	bl	8000b14 <__addsf3>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fb ffa2 	bl	8000b10 <__aeabi_fsub>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fc f8a6 	bl	8000d24 <__aeabi_fmul>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f7fb ff99 	bl	8000b14 <__addsf3>
 8004be2:	4603      	mov	r3, r0
 8004be4:	461c      	mov	r4, r3
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004bec:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fc f897 	bl	8000d24 <__aeabi_fmul>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	461d      	mov	r5, r3
 8004bfa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004bfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c00:	f7fc f890 	bl	8000d24 <__aeabi_fmul>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4619      	mov	r1, r3
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f7fb ff83 	bl	8000b14 <__addsf3>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461d      	mov	r5, r3
 8004c12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c14:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004c18:	f7fb ff7a 	bl	8000b10 <__aeabi_fsub>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fb ff75 	bl	8000b10 <__aeabi_fsub>
 8004c26:	4603      	mov	r3, r0
 8004c28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fc f87a 	bl	8000d24 <__aeabi_fmul>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461e      	mov	r6, r3
 8004c34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c38:	f7fb ff6a 	bl	8000b10 <__aeabi_fsub>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fc f86f 	bl	8000d24 <__aeabi_fmul>
 8004c46:	4603      	mov	r3, r0
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f7fb ff62 	bl	8000b14 <__addsf3>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fb ff5a 	bl	8000b10 <__aeabi_fsub>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4628      	mov	r0, r5
 8004c62:	f7fc f85f 	bl	8000d24 <__aeabi_fmul>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f7fb ff52 	bl	8000b14 <__addsf3>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461c      	mov	r4, r3
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004c7a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fc f850 	bl	8000d24 <__aeabi_fmul>
 8004c84:	4603      	mov	r3, r0
 8004c86:	461d      	mov	r5, r3
 8004c88:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c8e:	f7fc f849 	bl	8000d24 <__aeabi_fmul>
 8004c92:	4603      	mov	r3, r0
 8004c94:	4619      	mov	r1, r3
 8004c96:	4628      	mov	r0, r5
 8004c98:	f7fb ff3c 	bl	8000b14 <__addsf3>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461d      	mov	r5, r3
 8004ca0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004ca2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004ca4:	f7fb ff34 	bl	8000b10 <__aeabi_fsub>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fc f839 	bl	8000d24 <__aeabi_fmul>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	461e      	mov	r6, r3
 8004cb6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004cb8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004cbc:	f7fb ff2a 	bl	8000b14 <__addsf3>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fc f82d 	bl	8000d24 <__aeabi_fmul>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f7fb ff20 	bl	8000b14 <__addsf3>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fb ff18 	bl	8000b10 <__aeabi_fsub>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f7fc f81d 	bl	8000d24 <__aeabi_fmul>
 8004cea:	4603      	mov	r3, r0
 8004cec:	4619      	mov	r1, r3
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f7fb ff10 	bl	8000b14 <__addsf3>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	461c      	mov	r4, r3
 8004cf8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004cfc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004cfe:	f7fc f811 	bl	8000d24 <__aeabi_fmul>
 8004d02:	4603      	mov	r3, r0
 8004d04:	461d      	mov	r5, r3
 8004d06:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004d08:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004d0a:	f7fb ff03 	bl	8000b14 <__addsf3>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fc f806 	bl	8000d24 <__aeabi_fmul>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461e      	mov	r6, r3
 8004d1c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004d1e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004d22:	f7fb fef5 	bl	8000b10 <__aeabi_fsub>
 8004d26:	4603      	mov	r3, r0
 8004d28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fb fef0 	bl	8000b10 <__aeabi_fsub>
 8004d30:	4603      	mov	r3, r0
 8004d32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fb fff5 	bl	8000d24 <__aeabi_fmul>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f7fb fee8 	bl	8000b14 <__addsf3>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb fee0 	bl	8000b10 <__aeabi_fsub>
 8004d50:	4603      	mov	r3, r0
 8004d52:	4619      	mov	r1, r3
 8004d54:	4628      	mov	r0, r5
 8004d56:	f7fb ffe5 	bl	8000d24 <__aeabi_fmul>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f7fb fed8 	bl	8000b14 <__addsf3>
 8004d64:	4603      	mov	r3, r0
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8004d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d6c:	f7fb ffda 	bl	8000d24 <__aeabi_fmul>
 8004d70:	4603      	mov	r3, r0
 8004d72:	461c      	mov	r4, r3
 8004d74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d78:	f7fb ffd4 	bl	8000d24 <__aeabi_fmul>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4620      	mov	r0, r4
 8004d82:	f7fb fec7 	bl	8000b14 <__addsf3>
 8004d86:	4603      	mov	r3, r0
 8004d88:	461c      	mov	r4, r3
 8004d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d8e:	f7fb ffc9 	bl	8000d24 <__aeabi_fmul>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4619      	mov	r1, r3
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7fb febc 	bl	8000b14 <__addsf3>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461c      	mov	r4, r3
 8004da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da4:	f7fb ffbe 	bl	8000d24 <__aeabi_fmul>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4619      	mov	r1, r3
 8004dac:	4620      	mov	r0, r4
 8004dae:	f7fb feb1 	bl	8000b14 <__addsf3>
 8004db2:	4603      	mov	r3, r0
 8004db4:	4618      	mov	r0, r3
 8004db6:	f006 fa0b 	bl	800b1d0 <sqrtf>
 8004dba:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 8004dbc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004dbe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004dc2:	f7fc f863 	bl	8000e8c <__aeabi_fdiv>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    s1 *= norm;
 8004dca:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dce:	f7fb ffa9 	bl	8000d24 <__aeabi_fmul>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
    s2 *= norm;
 8004dd6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dda:	f7fb ffa3 	bl	8000d24 <__aeabi_fmul>
 8004dde:	4603      	mov	r3, r0
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 *= norm;
 8004de2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de6:	f7fb ff9d 	bl	8000d24 <__aeabi_fmul>
 8004dea:	4603      	mov	r3, r0
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 *= norm;
 8004dee:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004df2:	f7fb ff97 	bl	8000d24 <__aeabi_fmul>
 8004df6:	4603      	mov	r3, r0
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8004dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004dfe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fb ff8d 	bl	8000d24 <__aeabi_fmul>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	461c      	mov	r4, r3
 8004e0e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004e12:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004e16:	f7fb ff85 	bl	8000d24 <__aeabi_fmul>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7fb fe76 	bl	8000b10 <__aeabi_fsub>
 8004e24:	4603      	mov	r3, r0
 8004e26:	461c      	mov	r4, r3
 8004e28:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004e2c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004e30:	f7fb ff78 	bl	8000d24 <__aeabi_fmul>
 8004e34:	4603      	mov	r3, r0
 8004e36:	4619      	mov	r1, r3
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f7fb fe69 	bl	8000b10 <__aeabi_fsub>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb ff6d 	bl	8000d24 <__aeabi_fmul>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461c      	mov	r4, r3
 8004e4e:	4ba4      	ldr	r3, [pc, #656]	; (80050e0 <QuaternionUpdate+0x1178>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fb ff65 	bl	8000d24 <__aeabi_fmul>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f7fb fe56 	bl	8000b10 <__aeabi_fsub>
 8004e64:	4603      	mov	r3, r0
 8004e66:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8004e68:	6839      	ldr	r1, [r7, #0]
 8004e6a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004e6e:	f7fb ff59 	bl	8000d24 <__aeabi_fmul>
 8004e72:	4603      	mov	r3, r0
 8004e74:	461c      	mov	r4, r3
 8004e76:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004e7a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004e7e:	f7fb ff51 	bl	8000d24 <__aeabi_fmul>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4619      	mov	r1, r3
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7fb fe44 	bl	8000b14 <__addsf3>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	461c      	mov	r4, r3
 8004e90:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004e94:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004e98:	f7fb ff44 	bl	8000d24 <__aeabi_fmul>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f7fb fe35 	bl	8000b10 <__aeabi_fsub>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb ff39 	bl	8000d24 <__aeabi_fmul>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	461c      	mov	r4, r3
 8004eb6:	4b8a      	ldr	r3, [pc, #552]	; (80050e0 <QuaternionUpdate+0x1178>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fb ff31 	bl	8000d24 <__aeabi_fmul>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7fb fe22 	bl	8000b10 <__aeabi_fsub>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8004ed0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004ed4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004ed8:	f7fb ff24 	bl	8000d24 <__aeabi_fmul>
 8004edc:	4603      	mov	r3, r0
 8004ede:	461c      	mov	r4, r3
 8004ee0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004ee4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004ee8:	f7fb ff1c 	bl	8000d24 <__aeabi_fmul>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f7fb fe0d 	bl	8000b10 <__aeabi_fsub>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	461c      	mov	r4, r3
 8004efa:	6839      	ldr	r1, [r7, #0]
 8004efc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8004f00:	f7fb ff10 	bl	8000d24 <__aeabi_fmul>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4619      	mov	r1, r3
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f7fb fe03 	bl	8000b14 <__addsf3>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fb ff05 	bl	8000d24 <__aeabi_fmul>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	461c      	mov	r4, r3
 8004f1e:	4b70      	ldr	r3, [pc, #448]	; (80050e0 <QuaternionUpdate+0x1178>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fb fefd 	bl	8000d24 <__aeabi_fmul>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f7fb fdee 	bl	8000b10 <__aeabi_fsub>
 8004f34:	4603      	mov	r3, r0
 8004f36:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8004f38:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004f3c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004f40:	f7fb fef0 	bl	8000d24 <__aeabi_fmul>
 8004f44:	4603      	mov	r3, r0
 8004f46:	461c      	mov	r4, r3
 8004f48:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8004f4c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004f50:	f7fb fee8 	bl	8000d24 <__aeabi_fmul>
 8004f54:	4603      	mov	r3, r0
 8004f56:	4619      	mov	r1, r3
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f7fb fddb 	bl	8000b14 <__addsf3>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	461c      	mov	r4, r3
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004f68:	f7fb fedc 	bl	8000d24 <__aeabi_fmul>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4620      	mov	r0, r4
 8004f72:	f7fb fdcd 	bl	8000b10 <__aeabi_fsub>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fb fed1 	bl	8000d24 <__aeabi_fmul>
 8004f82:	4603      	mov	r3, r0
 8004f84:	461c      	mov	r4, r3
 8004f86:	4b56      	ldr	r3, [pc, #344]	; (80050e0 <QuaternionUpdate+0x1178>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fb fec9 	bl	8000d24 <__aeabi_fmul>
 8004f92:	4603      	mov	r3, r0
 8004f94:	4619      	mov	r1, r3
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7fb fdba 	bl	8000b10 <__aeabi_fsub>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8004fa0:	4b50      	ldr	r3, [pc, #320]	; (80050e4 <QuaternionUpdate+0x117c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6a39      	ldr	r1, [r7, #32]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fb febc 	bl	8000d24 <__aeabi_fmul>
 8004fac:	4603      	mov	r3, r0
 8004fae:	4619      	mov	r1, r3
 8004fb0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004fb4:	f7fb fdae 	bl	8000b14 <__addsf3>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q2 += qDot2 * deltat;
 8004fbe:	4b49      	ldr	r3, [pc, #292]	; (80050e4 <QuaternionUpdate+0x117c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69f9      	ldr	r1, [r7, #28]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fb fead 	bl	8000d24 <__aeabi_fmul>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004fd2:	f7fb fd9f 	bl	8000b14 <__addsf3>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q3 += qDot3 * deltat;
 8004fdc:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <QuaternionUpdate+0x117c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69b9      	ldr	r1, [r7, #24]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fb fe9e 	bl	8000d24 <__aeabi_fmul>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4619      	mov	r1, r3
 8004fec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004ff0:	f7fb fd90 	bl	8000b14 <__addsf3>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q4 += qDot4 * deltat;
 8004ffa:	4b3a      	ldr	r3, [pc, #232]	; (80050e4 <QuaternionUpdate+0x117c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	4618      	mov	r0, r3
 8005002:	f7fb fe8f 	bl	8000d24 <__aeabi_fmul>
 8005006:	4603      	mov	r3, r0
 8005008:	4619      	mov	r1, r3
 800500a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800500e:	f7fb fd81 	bl	8000b14 <__addsf3>
 8005012:	4603      	mov	r3, r0
 8005014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8005018:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800501c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005020:	f7fb fe80 	bl	8000d24 <__aeabi_fmul>
 8005024:	4603      	mov	r3, r0
 8005026:	461c      	mov	r4, r3
 8005028:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800502c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8005030:	f7fb fe78 	bl	8000d24 <__aeabi_fmul>
 8005034:	4603      	mov	r3, r0
 8005036:	4619      	mov	r1, r3
 8005038:	4620      	mov	r0, r4
 800503a:	f7fb fd6b 	bl	8000b14 <__addsf3>
 800503e:	4603      	mov	r3, r0
 8005040:	461c      	mov	r4, r3
 8005042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005046:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800504a:	f7fb fe6b 	bl	8000d24 <__aeabi_fmul>
 800504e:	4603      	mov	r3, r0
 8005050:	4619      	mov	r1, r3
 8005052:	4620      	mov	r0, r4
 8005054:	f7fb fd5e 	bl	8000b14 <__addsf3>
 8005058:	4603      	mov	r3, r0
 800505a:	461c      	mov	r4, r3
 800505c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8005060:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8005064:	f7fb fe5e 	bl	8000d24 <__aeabi_fmul>
 8005068:	4603      	mov	r3, r0
 800506a:	4619      	mov	r1, r3
 800506c:	4620      	mov	r0, r4
 800506e:	f7fb fd51 	bl	8000b14 <__addsf3>
 8005072:	4603      	mov	r3, r0
 8005074:	4618      	mov	r0, r3
 8005076:	f006 f8ab 	bl	800b1d0 <sqrtf>
 800507a:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 800507c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800507e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005082:	f7fb ff03 	bl	8000e8c <__aeabi_fdiv>
 8005086:	4603      	mov	r3, r0
 8005088:	65fb      	str	r3, [r7, #92]	; 0x5c
    q[0] = q1 * norm;
 800508a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800508c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005090:	f7fb fe48 	bl	8000d24 <__aeabi_fmul>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <QuaternionUpdate+0x1180>)
 800509a:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 800509c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800509e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80050a2:	f7fb fe3f 	bl	8000d24 <__aeabi_fmul>
 80050a6:	4603      	mov	r3, r0
 80050a8:	461a      	mov	r2, r3
 80050aa:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <QuaternionUpdate+0x1180>)
 80050ac:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 80050ae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80050b0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80050b4:	f7fb fe36 	bl	8000d24 <__aeabi_fmul>
 80050b8:	4603      	mov	r3, r0
 80050ba:	461a      	mov	r2, r3
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <QuaternionUpdate+0x1180>)
 80050be:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 80050c0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80050c2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80050c6:	f7fb fe2d 	bl	8000d24 <__aeabi_fmul>
 80050ca:	4603      	mov	r3, r0
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <QuaternionUpdate+0x1180>)
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	e002      	b.n	80050da <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 80050d4:	bf00      	nop
 80050d6:	e000      	b.n	80050da <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 80050d8:	bf00      	nop

}
 80050da:	37b4      	adds	r7, #180	; 0xb4
 80050dc:	46bd      	mov	sp, r7
 80050de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e0:	2000000c 	.word	0x2000000c
 80050e4:	20000430 	.word	0x20000430
 80050e8:	20000010 	.word	0x20000010

080050ec <nRF24_CSN_L>:
{
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L()
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80050f0:	2200      	movs	r2, #0
 80050f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050f6:	4802      	ldr	r0, [pc, #8]	; (8005100 <nRF24_CSN_L+0x14>)
 80050f8:	f001 fe78 	bl	8006dec <HAL_GPIO_WritePin>
}
 80050fc:	bf00      	nop
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40010c00 	.word	0x40010c00

08005104 <nRF24_CSN_H>:

static inline void nRF24_CSN_H()
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8005108:	2201      	movs	r2, #1
 800510a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800510e:	4802      	ldr	r0, [pc, #8]	; (8005118 <nRF24_CSN_H+0x14>)
 8005110:	f001 fe6c 	bl	8006dec <HAL_GPIO_WritePin>
}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40010c00 	.word	0x40010c00

0800511c <nRF24_LL_RW>:

static inline uint8_t nRF24_LL_RW(uint8_t data)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af02      	add	r7, sp, #8
 8005122:	4603      	mov	r3, r0
 8005124:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if (HAL_SPI_TransmitReceive(&hspi2, &data, &result, 1, 2000) != HAL_OK)
 8005126:	f107 020f 	add.w	r2, r7, #15
 800512a:	1df9      	adds	r1, r7, #7
 800512c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	2301      	movs	r3, #1
 8005134:	4806      	ldr	r0, [pc, #24]	; (8005150 <nRF24_LL_RW+0x34>)
 8005136:	f003 fb29 	bl	800878c <HAL_SPI_TransmitReceive>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <nRF24_LL_RW+0x28>
    {
        Error_Handler();
 8005140:	f7fc fc94 	bl	8001a6c <Error_Handler>
    };
    return result;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000104 	.word	0x20000104

08005154 <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800515e:	f7ff ffc5 	bl	80050ec <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	b2db      	uxtb	r3, r3
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff ffd6 	bl	800511c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8005170:	20ff      	movs	r0, #255	; 0xff
 8005172:	f7ff ffd3 	bl	800511c <nRF24_LL_RW>
 8005176:	4603      	mov	r3, r0
 8005178:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800517a:	f7ff ffc3 	bl	8005104 <nRF24_CSN_H>

	return value;
 800517e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	460a      	mov	r2, r1
 8005192:	71fb      	strb	r3, [r7, #7]
 8005194:	4613      	mov	r3, r2
 8005196:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8005198:	f7ff ffa8 	bl	80050ec <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	2b1f      	cmp	r3, #31
 80051a0:	d810      	bhi.n	80051c4 <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	b25b      	sxtb	r3, r3
 80051ac:	f043 0320 	orr.w	r3, r3, #32
 80051b0:	b25b      	sxtb	r3, r3
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ffb1 	bl	800511c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80051ba:	79bb      	ldrb	r3, [r7, #6]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff ffad 	bl	800511c <nRF24_LL_RW>
 80051c2:	e013      	b.n	80051ec <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff ffa8 	bl	800511c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	2be1      	cmp	r3, #225	; 0xe1
 80051d0:	d00c      	beq.n	80051ec <nRF24_WriteReg+0x64>
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	2be2      	cmp	r3, #226	; 0xe2
 80051d6:	d009      	beq.n	80051ec <nRF24_WriteReg+0x64>
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	2be3      	cmp	r3, #227	; 0xe3
 80051dc:	d006      	beq.n	80051ec <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	2bff      	cmp	r3, #255	; 0xff
 80051e2:	d003      	beq.n	80051ec <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 80051e4:	79bb      	ldrb	r3, [r7, #6]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff ff98 	bl	800511c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80051ec:	f7ff ff8a 	bl	8005104 <nRF24_CSN_H>
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	6039      	str	r1, [r7, #0]
 8005202:	71fb      	strb	r3, [r7, #7]
 8005204:	4613      	mov	r3, r2
 8005206:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8005208:	f7ff ff70 	bl	80050ec <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff ff84 	bl	800511c <nRF24_LL_RW>
	while (count--)
 8005214:	e007      	b.n	8005226 <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8005216:	683c      	ldr	r4, [r7, #0]
 8005218:	1c63      	adds	r3, r4, #1
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	20ff      	movs	r0, #255	; 0xff
 800521e:	f7ff ff7d 	bl	800511c <nRF24_LL_RW>
 8005222:	4603      	mov	r3, r0
 8005224:	7023      	strb	r3, [r4, #0]
	while (count--)
 8005226:	79bb      	ldrb	r3, [r7, #6]
 8005228:	1e5a      	subs	r2, r3, #1
 800522a:	71ba      	strb	r2, [r7, #6]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f2      	bne.n	8005216 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8005230:	f7ff ff68 	bl	8005104 <nRF24_CSN_H>
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	bd90      	pop	{r4, r7, pc}

0800523c <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	6039      	str	r1, [r7, #0]
 8005246:	71fb      	strb	r3, [r7, #7]
 8005248:	4613      	mov	r3, r2
 800524a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800524c:	f7ff ff4e 	bl	80050ec <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff ff62 	bl	800511c <nRF24_LL_RW>
	while (count--)
 8005258:	e006      	b.n	8005268 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	603a      	str	r2, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff5a 	bl	800511c <nRF24_LL_RW>
	while (count--)
 8005268:	79bb      	ldrb	r3, [r7, #6]
 800526a:	1e5a      	subs	r2, r3, #1
 800526c:	71ba      	strb	r2, [r7, #6]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f3      	bne.n	800525a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8005272:	f7ff ff47 	bl	8005104 <nRF24_CSN_H>
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 8005282:	2108      	movs	r1, #8
 8005284:	2000      	movs	r0, #0
 8005286:	f7ff ff7f 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 800528a:	213f      	movs	r1, #63	; 0x3f
 800528c:	2001      	movs	r0, #1
 800528e:	f7ff ff7b 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 8005292:	2103      	movs	r1, #3
 8005294:	2002      	movs	r0, #2
 8005296:	f7ff ff77 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 800529a:	2103      	movs	r1, #3
 800529c:	2003      	movs	r0, #3
 800529e:	f7ff ff73 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 80052a2:	2103      	movs	r1, #3
 80052a4:	2004      	movs	r0, #4
 80052a6:	f7ff ff6f 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 80052aa:	2102      	movs	r1, #2
 80052ac:	2005      	movs	r0, #5
 80052ae:	f7ff ff6b 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 80052b2:	210e      	movs	r1, #14
 80052b4:	2006      	movs	r0, #6
 80052b6:	f7ff ff67 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80052ba:	2100      	movs	r1, #0
 80052bc:	2007      	movs	r0, #7
 80052be:	f7ff ff63 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 80052c2:	2100      	movs	r1, #0
 80052c4:	2011      	movs	r0, #17
 80052c6:	f7ff ff5f 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 80052ca:	2100      	movs	r1, #0
 80052cc:	2012      	movs	r0, #18
 80052ce:	f7ff ff5b 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 80052d2:	2100      	movs	r1, #0
 80052d4:	2013      	movs	r0, #19
 80052d6:	f7ff ff57 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80052da:	2100      	movs	r1, #0
 80052dc:	2014      	movs	r0, #20
 80052de:	f7ff ff53 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80052e2:	2100      	movs	r1, #0
 80052e4:	2015      	movs	r0, #21
 80052e6:	f7ff ff4f 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80052ea:	2100      	movs	r1, #0
 80052ec:	2016      	movs	r0, #22
 80052ee:	f7ff ff4b 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80052f2:	2100      	movs	r1, #0
 80052f4:	201c      	movs	r0, #28
 80052f6:	f7ff ff47 	bl	8005188 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80052fa:	2100      	movs	r1, #0
 80052fc:	201d      	movs	r0, #29
 80052fe:	f7ff ff43 	bl	8005188 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 8005302:	f000 f99e 	bl	8005642 <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 8005306:	f000 f994 	bl	8005632 <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 800530a:	f000 f9a2 	bl	8005652 <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 800530e:	f7ff fef9 	bl	8005104 <nRF24_CSN_H>
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <nRF24_Check+0x58>)
 8005320:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8005322:	2205      	movs	r2, #5
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	2030      	movs	r0, #48	; 0x30
 8005328:	f7ff ff88 	bl	800523c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 800532c:	463b      	mov	r3, r7
 800532e:	2205      	movs	r2, #5
 8005330:	4619      	mov	r1, r3
 8005332:	2010      	movs	r0, #16
 8005334:	f7ff ff60 	bl	80051f8 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	e00f      	b.n	800535e <nRF24_Check+0x46>
	{
		if (rxbuf[i] != *ptr++)
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	3310      	adds	r3, #16
 8005342:	443b      	add	r3, r7
 8005344:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	1c59      	adds	r1, r3, #1
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <nRF24_Check+0x40>
			return 0;
 8005354:	2300      	movs	r3, #0
 8005356:	e006      	b.n	8005366 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++)
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	3301      	adds	r3, #1
 800535c:	73fb      	strb	r3, [r7, #15]
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b04      	cmp	r3, #4
 8005362:	d9ec      	bls.n	800533e <nRF24_Check+0x26>
	}

	return 1;
 8005364:	2301      	movs	r3, #1
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	0800c59c 	.word	0x0800c59c

08005374 <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800537e:	2000      	movs	r0, #0
 8005380:	f7ff fee8 	bl	8005154 <nRF24_ReadReg>
 8005384:	4603      	mov	r3, r0
 8005386:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d104      	bne.n	8005398 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	73fb      	strb	r3, [r7, #15]
 8005396:	e003      	b.n	80053a0 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	f023 0302 	bic.w	r3, r3, #2
 800539e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	4619      	mov	r1, r3
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7ff feef 	bl	8005188 <nRF24_WriteReg>
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	4603      	mov	r3, r0
 80053ba:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80053bc:	2000      	movs	r0, #0
 80053be:	f7ff fec9 	bl	8005154 <nRF24_ReadReg>
 80053c2:	4603      	mov	r3, r0
 80053c4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	f023 0301 	bic.w	r3, r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80053ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	b25a      	sxtb	r2, r3
 80053d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053dc:	4313      	orrs	r3, r2
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	4619      	mov	r1, r3
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7ff fece 	bl	8005188 <nRF24_WriteReg>
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80053fe:	2000      	movs	r0, #0
 8005400:	f7ff fea8 	bl	8005154 <nRF24_ReadReg>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	f023 030c 	bic.w	r3, r3, #12
 800540e:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8005410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005414:	f003 030c 	and.w	r3, r3, #12
 8005418:	b25a      	sxtb	r2, r3
 800541a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541e:	4313      	orrs	r3, r2
 8005420:	b25b      	sxtb	r3, r3
 8005422:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	4619      	mov	r1, r3
 8005428:	2000      	movs	r0, #0
 800542a:	f7ff fead 	bl	8005188 <nRF24_WriteReg>
}
 800542e:	bf00      	nop
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	4603      	mov	r3, r0
 800543e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	4619      	mov	r1, r3
 8005444:	2005      	movs	r0, #5
 8005446:	f7ff fe9f 	bl	8005188 <nRF24_WriteReg>
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	4603      	mov	r3, r0
 800545a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	3b02      	subs	r3, #2
 8005460:	b2db      	uxtb	r3, r3
 8005462:	4619      	mov	r1, r3
 8005464:	2003      	movs	r0, #3
 8005466:	f7ff fe8f 	bl	8005188 <nRF24_WriteReg>
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	6039      	str	r1, [r7, #0]
 800547e:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	2b06      	cmp	r3, #6
 8005484:	d00a      	beq.n	800549c <nRF24_SetAddr+0x28>
 8005486:	2b06      	cmp	r3, #6
 8005488:	dc36      	bgt.n	80054f8 <nRF24_SetAddr+0x84>
 800548a:	2b01      	cmp	r3, #1
 800548c:	dc02      	bgt.n	8005494 <nRF24_SetAddr+0x20>
 800548e:	2b00      	cmp	r3, #0
 8005490:	da04      	bge.n	800549c <nRF24_SetAddr+0x28>
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
		break;
	default:
		break;
 8005492:	e031      	b.n	80054f8 <nRF24_SetAddr+0x84>
 8005494:	3b02      	subs	r3, #2
	switch (pipe)
 8005496:	2b03      	cmp	r3, #3
 8005498:	d82e      	bhi.n	80054f8 <nRF24_SetAddr+0x84>
 800549a:	e023      	b.n	80054e4 <nRF24_SetAddr+0x70>
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 800549c:	2003      	movs	r0, #3
 800549e:	f7ff fe59 	bl	8005154 <nRF24_ReadReg>
 80054a2:	4603      	mov	r3, r0
 80054a4:	3301      	adds	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
		addr += addr_width;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	4413      	add	r3, r2
 80054ae:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 80054b0:	f7ff fe1c 	bl	80050ec <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	4a13      	ldr	r2, [pc, #76]	; (8005504 <nRF24_SetAddr+0x90>)
 80054b8:	5cd3      	ldrb	r3, [r2, r3]
 80054ba:	f043 0320 	orr.w	r3, r3, #32
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fe2b 	bl	800511c <nRF24_LL_RW>
			nRF24_LL_RW(*addr--);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	603a      	str	r2, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fe24 	bl	800511c <nRF24_LL_RW>
		} while (addr_width--);
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	1e5a      	subs	r2, r3, #1
 80054d8:	73fa      	strb	r2, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f3      	bne.n	80054c6 <nRF24_SetAddr+0x52>
		nRF24_CSN_H();
 80054de:	f7ff fe11 	bl	8005104 <nRF24_CSN_H>
		break;
 80054e2:	e00a      	b.n	80054fa <nRF24_SetAddr+0x86>
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	4a07      	ldr	r2, [pc, #28]	; (8005504 <nRF24_SetAddr+0x90>)
 80054e8:	5cd2      	ldrb	r2, [r2, r3]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7ff fe49 	bl	8005188 <nRF24_WriteReg>
		break;
 80054f6:	e000      	b.n	80054fa <nRF24_SetAddr+0x86>
		break;
 80054f8:	bf00      	nop
	}
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	0800c7bc 	.word	0x0800c7bc

08005508 <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8005512:	2006      	movs	r0, #6
 8005514:	f7ff fe1e 	bl	8005154 <nRF24_ReadReg>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	f023 0306 	bic.w	r3, r3, #6
 8005522:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8005524:	7bfa      	ldrb	r2, [r7, #15]
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	4313      	orrs	r3, r2
 800552a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	4619      	mov	r1, r3
 8005530:	2006      	movs	r0, #6
 8005532:	f7ff fe29 	bl	8005188 <nRF24_WriteReg>
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	4603      	mov	r3, r0
 8005546:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8005548:	2006      	movs	r0, #6
 800554a:	f7ff fe03 	bl	8005154 <nRF24_ReadReg>
 800554e:	4603      	mov	r3, r0
 8005550:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005558:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 800555a:	7bfa      	ldrb	r2, [r7, #15]
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	4313      	orrs	r3, r2
 8005560:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	4619      	mov	r1, r3
 8005566:	2006      	movs	r0, #6
 8005568:	f7ff fe0e 	bl	8005188 <nRF24_WriteReg>
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <nRF24_SetRXPipe>:
 * @param pipe Pipe cần cấu hình
 * @param aa_state Bật phản hồi ACK hay không (nRF24_AA_ON or nRF24_AA_OFF)
 * @param payload_len độ dài của payload
 */
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
 800557e:	460b      	mov	r3, r1
 8005580:	71bb      	strb	r3, [r7, #6]
 8005582:	4613      	mov	r3, r2
 8005584:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8005586:	2002      	movs	r0, #2
 8005588:	f7ff fde4 	bl	8005154 <nRF24_ReadReg>
 800558c:	4603      	mov	r3, r0
 800558e:	b25a      	sxtb	r2, r3
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	2101      	movs	r1, #1
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	b25b      	sxtb	r3, r3
 800559a:	4313      	orrs	r3, r2
 800559c:	b25b      	sxtb	r3, r3
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	4619      	mov	r1, r3
 80055aa:	2002      	movs	r0, #2
 80055ac:	f7ff fdec 	bl	8005188 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	4a19      	ldr	r2, [pc, #100]	; (8005618 <nRF24_SetRXPipe+0xa4>)
 80055b4:	5cd2      	ldrb	r2, [r2, r3]
 80055b6:	797b      	ldrb	r3, [r7, #5]
 80055b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7ff fde1 	bl	8005188 <nRF24_WriteReg>

	// Set auto acknowledgment
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80055c6:	2001      	movs	r0, #1
 80055c8:	f7ff fdc4 	bl	8005154 <nRF24_ReadReg>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON)
 80055d0:	79bb      	ldrb	r3, [r7, #6]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d10a      	bne.n	80055ec <nRF24_SetRXPipe+0x78>
	{
		reg |= (1 << pipe);
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	2201      	movs	r2, #1
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	b25a      	sxtb	r2, r3
 80055e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	73fb      	strb	r3, [r7, #15]
 80055ea:	e00b      	b.n	8005604 <nRF24_SetRXPipe+0x90>
	}
	else
	{
		reg &= ~(1 << pipe);
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	2201      	movs	r2, #1
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	b25b      	sxtb	r3, r3
 80055f6:	43db      	mvns	r3, r3
 80055f8:	b25a      	sxtb	r2, r3
 80055fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055fe:	4013      	ands	r3, r2
 8005600:	b25b      	sxtb	r3, r3
 8005602:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	4619      	mov	r1, r3
 8005608:	2001      	movs	r0, #1
 800560a:	f7ff fdbd 	bl	8005188 <nRF24_WriteReg>
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	0800c7b4 	.word	0x0800c7b4

0800561c <nRF24_GetStatus_RXFIFO>:
 * @brief Lấy tastus RX FIFO
 *
 * @return uint8_t one of the nRF24_STATUS_RXFIFO_xx values
 */
uint8_t nRF24_GetStatus_RXFIFO(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8005620:	2017      	movs	r0, #23
 8005622:	f7ff fd97 	bl	8005154 <nRF24_ReadReg>
 8005626:	4603      	mov	r3, r0
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	b2db      	uxtb	r3, r3
}
 800562e:	4618      	mov	r0, r3
 8005630:	bd80      	pop	{r7, pc}

08005632 <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8005636:	21ff      	movs	r1, #255	; 0xff
 8005638:	20e1      	movs	r0, #225	; 0xe1
 800563a:	f7ff fda5 	bl	8005188 <nRF24_WriteReg>
}
 800563e:	bf00      	nop
 8005640:	bd80      	pop	{r7, pc}

08005642 <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8005646:	21ff      	movs	r1, #255	; 0xff
 8005648:	20e2      	movs	r0, #226	; 0xe2
 800564a:	f7ff fd9d 	bl	8005188 <nRF24_WriteReg>
}
 800564e:	bf00      	nop
 8005650:	bd80      	pop	{r7, pc}

08005652 <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8005658:	2007      	movs	r0, #7
 800565a:	f7ff fd7b 	bl	8005154 <nRF24_ReadReg>
 800565e:	4603      	mov	r3, r0
 8005660:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005668:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	4619      	mov	r1, r3
 800566e:	2007      	movs	r0, #7
 8005670:	f7ff fd8a 	bl	8005188 <nRF24_WriteReg>
}
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <nRF24_GetRxDplPayloadWidth>:
 * @brief đọc chiều dài của RX payload
 *
 * @return uint8_t độ dài
 */
static uint8_t nRF24_GetRxDplPayloadWidth()
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8005682:	f7ff fd33 	bl	80050ec <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8005686:	2060      	movs	r0, #96	; 0x60
 8005688:	f7ff fd48 	bl	800511c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 800568c:	20ff      	movs	r0, #255	; 0xff
 800568e:	f7ff fd45 	bl	800511c <nRF24_LL_RW>
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8005696:	f7ff fd35 	bl	8005104 <nRF24_CSN_H>

	return value;
 800569a:	79fb      	ldrb	r3, [r7, #7]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80056b2:	2007      	movs	r0, #7
 80056b4:	f7ff fd4e 	bl	8005154 <nRF24_ReadReg>
 80056b8:	4603      	mov	r3, r0
 80056ba:	105b      	asrs	r3, r3, #1
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6)
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	2b05      	cmp	r3, #5
 80056c8:	d829      	bhi.n	800571e <nRF24_ReadPayloadGeneric+0x7a>
	{
		// Get payload length
		if (dpl)
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00f      	beq.n	80056f0 <nRF24_ReadPayloadGeneric+0x4c>
		{
			*length = nRF24_GetRxDplPayloadWidth();
 80056d0:	f7ff ffd4 	bl	800567c <nRF24_GetRxDplPayloadWidth>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	701a      	strb	r2, [r3, #0]
			if (*length > 32)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d90f      	bls.n	8005704 <nRF24_ReadPayloadGeneric+0x60>
			{ // broken packet
				*length = 0;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 80056ea:	f7ff ffaa 	bl	8005642 <nRF24_FlushRX>
 80056ee:	e009      	b.n	8005704 <nRF24_ReadPayloadGeneric+0x60>
			}
		}
		else
		{
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]); // đọc payload của pipe x
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	4a0f      	ldr	r2, [pc, #60]	; (8005730 <nRF24_ReadPayloadGeneric+0x8c>)
 80056f4:	5cd3      	ldrb	r3, [r2, r3]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fd2c 	bl	8005154 <nRF24_ReadReg>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	701a      	strb	r2, [r3, #0]
		}

		// đọc payload từ RX FIFO
		if (*length)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d006      	beq.n	800571a <nRF24_ReadPayloadGeneric+0x76>
		{
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	68f9      	ldr	r1, [r7, #12]
 8005714:	2061      	movs	r0, #97	; 0x61
 8005716:	f7ff fd6f 	bl	80051f8 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	e003      	b.n	8005726 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8005724:	23ff      	movs	r3, #255	; 0xff
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	0800c7b4 	.word	0x0800c7b4

08005734 <nRF24_ReadPayload>:
 * @return   nRF24_RX_PIPEX - đã nhận được dữ liệu từ pipe x
 * @return	 nRF24_RX_EMPTY - the RX FIFO đéo có cc gì
 *
 */
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length, 0);
 800573e:	2200      	movs	r2, #0
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff ffae 	bl	80056a4 <nRF24_ReadPayloadGeneric>
 8005748:	4603      	mov	r3, r0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <math_constrain>:
extern volatile float Kd_rate_yaw;

#endif

static float math_constrain(float value, float min, float max)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
    if (value > max)
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7fb fc9b 	bl	800109c <__aeabi_fcmpgt>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <math_constrain+0x20>
        value = max;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e008      	b.n	8005784 <math_constrain+0x32>
    else if (value < min)
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7fb fc73 	bl	8001060 <__aeabi_fcmplt>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <math_constrain+0x32>
        value = min;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	60fb      	str	r3, [r7, #12]
    return value;
 8005784:	68fb      	ldr	r3, [r7, #12]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <pid_calculate>:

void pid_calculate(float Error, float P, float I, float D, float PrevError, float PrevIterm)
{
 8005790:	b5b0      	push	{r4, r5, r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
    float Pterm = P * Error;
 800579e:	68f9      	ldr	r1, [r7, #12]
 80057a0:	68b8      	ldr	r0, [r7, #8]
 80057a2:	f7fb fabf 	bl	8000d24 <__aeabi_fmul>
 80057a6:	4603      	mov	r3, r0
 80057a8:	61fb      	str	r3, [r7, #28]
    float Iterm = PrevIterm + I * (Error + PrevError) * dt / 2;
 80057aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057ac:	f7fa fe34 	bl	8000418 <__aeabi_f2d>
 80057b0:	4604      	mov	r4, r0
 80057b2:	460d      	mov	r5, r1
 80057b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7fb f9ac 	bl	8000b14 <__addsf3>
 80057bc:	4603      	mov	r3, r0
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fb faaf 	bl	8000d24 <__aeabi_fmul>
 80057c6:	4603      	mov	r3, r0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fa fe25 	bl	8000418 <__aeabi_f2d>
 80057ce:	a32a      	add	r3, pc, #168	; (adr r3, 8005878 <pid_calculate+0xe8>)
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	f7fa fe78 	bl	80004c8 <__aeabi_dmul>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4610      	mov	r0, r2
 80057de:	4619      	mov	r1, r3
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057e8:	f7fa ff98 	bl	800071c <__aeabi_ddiv>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4620      	mov	r0, r4
 80057f2:	4629      	mov	r1, r5
 80057f4:	f7fa fcb2 	bl	800015c <__adddf3>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4610      	mov	r0, r2
 80057fe:	4619      	mov	r1, r3
 8005800:	f7fb f932 	bl	8000a68 <__aeabi_d2f>
 8005804:	4603      	mov	r3, r0
 8005806:	61bb      	str	r3, [r7, #24]
    math_constrain(Iterm, -200, 200);
 8005808:	4a1d      	ldr	r2, [pc, #116]	; (8005880 <pid_calculate+0xf0>)
 800580a:	491e      	ldr	r1, [pc, #120]	; (8005884 <pid_calculate+0xf4>)
 800580c:	69b8      	ldr	r0, [r7, #24]
 800580e:	f7ff ffa0 	bl	8005752 <math_constrain>
    float Dterm = D * (Error - PrevError) / dt;
 8005812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7fb f97b 	bl	8000b10 <__aeabi_fsub>
 800581a:	4603      	mov	r3, r0
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f7fb fa80 	bl	8000d24 <__aeabi_fmul>
 8005824:	4603      	mov	r3, r0
 8005826:	4618      	mov	r0, r3
 8005828:	f7fa fdf6 	bl	8000418 <__aeabi_f2d>
 800582c:	a312      	add	r3, pc, #72	; (adr r3, 8005878 <pid_calculate+0xe8>)
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f7fa ff73 	bl	800071c <__aeabi_ddiv>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	f7fb f913 	bl	8000a68 <__aeabi_d2f>
 8005842:	4603      	mov	r3, r0
 8005844:	617b      	str	r3, [r7, #20]
    float PIDOutput = Pterm + Iterm + Dterm;
 8005846:	69b9      	ldr	r1, [r7, #24]
 8005848:	69f8      	ldr	r0, [r7, #28]
 800584a:	f7fb f963 	bl	8000b14 <__addsf3>
 800584e:	4603      	mov	r3, r0
 8005850:	4619      	mov	r1, r3
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f7fb f95e 	bl	8000b14 <__addsf3>
 8005858:	4603      	mov	r3, r0
 800585a:	613b      	str	r3, [r7, #16]


    PIDReturn[0] = PIDOutput;
 800585c:	4a0a      	ldr	r2, [pc, #40]	; (8005888 <pid_calculate+0xf8>)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	6013      	str	r3, [r2, #0]
    PIDReturn[1] = Error;
 8005862:	4a09      	ldr	r2, [pc, #36]	; (8005888 <pid_calculate+0xf8>)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6053      	str	r3, [r2, #4]
    PIDReturn[2] = Iterm;
 8005868:	4a07      	ldr	r2, [pc, #28]	; (8005888 <pid_calculate+0xf8>)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	6093      	str	r3, [r2, #8]
}
 800586e:	bf00      	nop
 8005870:	3720      	adds	r7, #32
 8005872:	46bd      	mov	sp, r7
 8005874:	bdb0      	pop	{r4, r5, r7, pc}
 8005876:	bf00      	nop
 8005878:	47ae147b 	.word	0x47ae147b
 800587c:	3f847ae1 	.word	0x3f847ae1
 8005880:	43480000 	.word	0x43480000
 8005884:	c3480000 	.word	0xc3480000
 8005888:	200004b8 	.word	0x200004b8
 800588c:	00000000 	.word	0x00000000

08005890 <pid_roll>:

void pid_roll(uint16_t roll_rc, float roll_angle, float roll_rate, PID_t *PID_out)
{
 8005890:	b5b0      	push	{r4, r5, r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af02      	add	r7, sp, #8
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4603      	mov	r3, r0
 800589e:	81fb      	strh	r3, [r7, #14]
    if (roll_rc > 1500 || roll_rc < 1440)
 80058a0:	89fb      	ldrh	r3, [r7, #14]
 80058a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d807      	bhi.n	80058ba <pid_roll+0x2a>
 80058aa:	89fb      	ldrh	r3, [r7, #14]
 80058ac:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80058b0:	d303      	bcc.n	80058ba <pid_roll+0x2a>
    {
        roll_rc = roll_rc;
    }
    else
    {
        roll_rc = 1500;
 80058b2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80058b6:	81fb      	strh	r3, [r7, #14]
 80058b8:	e000      	b.n	80058bc <pid_roll+0x2c>
        roll_rc = roll_rc;
 80058ba:	bf00      	nop
    }

    error = 0.08 * (roll_rc - 1500) - roll_angle;
 80058bc:	89fb      	ldrh	r3, [r7, #14]
 80058be:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fa fd96 	bl	80003f4 <__aeabi_i2d>
 80058c8:	a337      	add	r3, pc, #220	; (adr r3, 80059a8 <pid_roll+0x118>)
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	f7fa fdfb 	bl	80004c8 <__aeabi_dmul>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4614      	mov	r4, r2
 80058d8:	461d      	mov	r5, r3
 80058da:	68b8      	ldr	r0, [r7, #8]
 80058dc:	f7fa fd9c 	bl	8000418 <__aeabi_f2d>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4620      	mov	r0, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	f7fa fc36 	bl	8000158 <__aeabi_dsub>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4610      	mov	r0, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	f7fb f8b8 	bl	8000a68 <__aeabi_d2f>
 80058f8:	4603      	mov	r3, r0
 80058fa:	4a2d      	ldr	r2, [pc, #180]	; (80059b0 <pid_roll+0x120>)
 80058fc:	6013      	str	r3, [r2, #0]

    pid_calculate(error, Kp_angle_roll, Ki_angle_roll, Kd_angle_roll, last_error_angle[0], last_Iterm_angle[0]);
 80058fe:	4b2c      	ldr	r3, [pc, #176]	; (80059b0 <pid_roll+0x120>)
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	4b2c      	ldr	r3, [pc, #176]	; (80059b4 <pid_roll+0x124>)
 8005904:	6819      	ldr	r1, [r3, #0]
 8005906:	4b2c      	ldr	r3, [pc, #176]	; (80059b8 <pid_roll+0x128>)
 8005908:	681c      	ldr	r4, [r3, #0]
 800590a:	4b2c      	ldr	r3, [pc, #176]	; (80059bc <pid_roll+0x12c>)
 800590c:	681d      	ldr	r5, [r3, #0]
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <pid_roll+0x130>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a2c      	ldr	r2, [pc, #176]	; (80059c4 <pid_roll+0x134>)
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	9201      	str	r2, [sp, #4]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	462b      	mov	r3, r5
 800591c:	4622      	mov	r2, r4
 800591e:	f7ff ff37 	bl	8005790 <pid_calculate>
    setpoint_rate_roll = PIDReturn[0];
 8005922:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <pid_roll+0x138>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a29      	ldr	r2, [pc, #164]	; (80059cc <pid_roll+0x13c>)
 8005928:	6013      	str	r3, [r2, #0]
    last_error_angle[0] = PIDReturn[1];
 800592a:	4b27      	ldr	r3, [pc, #156]	; (80059c8 <pid_roll+0x138>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	4a24      	ldr	r2, [pc, #144]	; (80059c0 <pid_roll+0x130>)
 8005930:	6013      	str	r3, [r2, #0]
    last_Iterm_angle[0] = PIDReturn[2];
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <pid_roll+0x138>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	4a23      	ldr	r2, [pc, #140]	; (80059c4 <pid_roll+0x134>)
 8005938:	6013      	str	r3, [r2, #0]

    setpoint_rate_roll = math_constrain(setpoint_rate_roll, -50, 50);
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <pid_roll+0x13c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a24      	ldr	r2, [pc, #144]	; (80059d0 <pid_roll+0x140>)
 8005940:	4924      	ldr	r1, [pc, #144]	; (80059d4 <pid_roll+0x144>)
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff ff05 	bl	8005752 <math_constrain>
 8005948:	4603      	mov	r3, r0
 800594a:	4a20      	ldr	r2, [pc, #128]	; (80059cc <pid_roll+0x13c>)
 800594c:	6013      	str	r3, [r2, #0]

    error = setpoint_rate_roll - roll_rate;
 800594e:	4b1f      	ldr	r3, [pc, #124]	; (80059cc <pid_roll+0x13c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	f7fb f8db 	bl	8000b10 <__aeabi_fsub>
 800595a:	4603      	mov	r3, r0
 800595c:	461a      	mov	r2, r3
 800595e:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <pid_roll+0x120>)
 8005960:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_rate_roll, Ki_rate_roll, Kd_rate_roll, last_error_rate[0], last_Iterm_rate[0]);
 8005962:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <pid_roll+0x120>)
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	4b1c      	ldr	r3, [pc, #112]	; (80059d8 <pid_roll+0x148>)
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	4b1c      	ldr	r3, [pc, #112]	; (80059dc <pid_roll+0x14c>)
 800596c:	681c      	ldr	r4, [r3, #0]
 800596e:	4b1c      	ldr	r3, [pc, #112]	; (80059e0 <pid_roll+0x150>)
 8005970:	681d      	ldr	r5, [r3, #0]
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <pid_roll+0x154>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1c      	ldr	r2, [pc, #112]	; (80059e8 <pid_roll+0x158>)
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	9201      	str	r2, [sp, #4]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	462b      	mov	r3, r5
 8005980:	4622      	mov	r2, r4
 8005982:	f7ff ff05 	bl	8005790 <pid_calculate>
    PID_out->PID_roll_out = PIDReturn[0];
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <pid_roll+0x138>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	601a      	str	r2, [r3, #0]
    last_error_rate[0] = PIDReturn[1];
 800598e:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <pid_roll+0x138>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4a14      	ldr	r2, [pc, #80]	; (80059e4 <pid_roll+0x154>)
 8005994:	6013      	str	r3, [r2, #0]
    last_Iterm_rate[0] = PIDReturn[2];
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <pid_roll+0x138>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	4a13      	ldr	r2, [pc, #76]	; (80059e8 <pid_roll+0x158>)
 800599c:	6013      	str	r3, [r2, #0]

    // Gioi han PWM
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bdb0      	pop	{r4, r5, r7, pc}
 80059a6:	bf00      	nop
 80059a8:	47ae147b 	.word	0x47ae147b
 80059ac:	3fb47ae1 	.word	0x3fb47ae1
 80059b0:	20000484 	.word	0x20000484
 80059b4:	20000304 	.word	0x20000304
 80059b8:	20000308 	.word	0x20000308
 80059bc:	2000030c 	.word	0x2000030c
 80059c0:	20000488 	.word	0x20000488
 80059c4:	20000494 	.word	0x20000494
 80059c8:	200004b8 	.word	0x200004b8
 80059cc:	200004c4 	.word	0x200004c4
 80059d0:	42480000 	.word	0x42480000
 80059d4:	c2480000 	.word	0xc2480000
 80059d8:	2000031c 	.word	0x2000031c
 80059dc:	20000320 	.word	0x20000320
 80059e0:	20000324 	.word	0x20000324
 80059e4:	200004a0 	.word	0x200004a0
 80059e8:	200004ac 	.word	0x200004ac
 80059ec:	00000000 	.word	0x00000000

080059f0 <pid_pitch>:

void pid_pitch(uint16_t pitch_rc, float pitch_angle, float pitch_rate, PID_t *PID_out)
{
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4603      	mov	r3, r0
 80059fe:	81fb      	strh	r3, [r7, #14]
    if (pitch_rc > 1540 || pitch_rc < 1440)
 8005a00:	89fb      	ldrh	r3, [r7, #14]
 8005a02:	f240 6204 	movw	r2, #1540	; 0x604
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d807      	bhi.n	8005a1a <pid_pitch+0x2a>
 8005a0a:	89fb      	ldrh	r3, [r7, #14]
 8005a0c:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8005a10:	d303      	bcc.n	8005a1a <pid_pitch+0x2a>
    {
        pitch_rc = pitch_rc;
    }
    else
    {
        pitch_rc = 1500;
 8005a12:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005a16:	81fb      	strh	r3, [r7, #14]
 8005a18:	e000      	b.n	8005a1c <pid_pitch+0x2c>
        pitch_rc = pitch_rc;
 8005a1a:	bf00      	nop
    }

    error = 0.08 * (pitch_rc - 1500) - pitch_angle;
 8005a1c:	89fb      	ldrh	r3, [r7, #14]
 8005a1e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fa fce6 	bl	80003f4 <__aeabi_i2d>
 8005a28:	a337      	add	r3, pc, #220	; (adr r3, 8005b08 <pid_pitch+0x118>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	f7fa fd4b 	bl	80004c8 <__aeabi_dmul>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4614      	mov	r4, r2
 8005a38:	461d      	mov	r5, r3
 8005a3a:	68b8      	ldr	r0, [r7, #8]
 8005a3c:	f7fa fcec 	bl	8000418 <__aeabi_f2d>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4620      	mov	r0, r4
 8005a46:	4629      	mov	r1, r5
 8005a48:	f7fa fb86 	bl	8000158 <__aeabi_dsub>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4610      	mov	r0, r2
 8005a52:	4619      	mov	r1, r3
 8005a54:	f7fb f808 	bl	8000a68 <__aeabi_d2f>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4a2d      	ldr	r2, [pc, #180]	; (8005b10 <pid_pitch+0x120>)
 8005a5c:	6013      	str	r3, [r2, #0]

    pid_calculate(error, Kp_angle_pitch, Ki_angle_pitch, Kd_angle_pitch, last_error_angle[1], last_Iterm_angle[1]);
 8005a5e:	4b2c      	ldr	r3, [pc, #176]	; (8005b10 <pid_pitch+0x120>)
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	4b2c      	ldr	r3, [pc, #176]	; (8005b14 <pid_pitch+0x124>)
 8005a64:	6819      	ldr	r1, [r3, #0]
 8005a66:	4b2c      	ldr	r3, [pc, #176]	; (8005b18 <pid_pitch+0x128>)
 8005a68:	681c      	ldr	r4, [r3, #0]
 8005a6a:	4b2c      	ldr	r3, [pc, #176]	; (8005b1c <pid_pitch+0x12c>)
 8005a6c:	681d      	ldr	r5, [r3, #0]
 8005a6e:	4b2c      	ldr	r3, [pc, #176]	; (8005b20 <pid_pitch+0x130>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	4a2c      	ldr	r2, [pc, #176]	; (8005b24 <pid_pitch+0x134>)
 8005a74:	6852      	ldr	r2, [r2, #4]
 8005a76:	9201      	str	r2, [sp, #4]
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	462b      	mov	r3, r5
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	f7ff fe87 	bl	8005790 <pid_calculate>
    setpoint_rate_pitch = PIDReturn[0];
 8005a82:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <pid_pitch+0x138>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a29      	ldr	r2, [pc, #164]	; (8005b2c <pid_pitch+0x13c>)
 8005a88:	6013      	str	r3, [r2, #0]
    last_error_angle[1] = PIDReturn[1];
 8005a8a:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <pid_pitch+0x138>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4a24      	ldr	r2, [pc, #144]	; (8005b20 <pid_pitch+0x130>)
 8005a90:	6053      	str	r3, [r2, #4]
    last_Iterm_angle[1] = PIDReturn[2];
 8005a92:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <pid_pitch+0x138>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	4a23      	ldr	r2, [pc, #140]	; (8005b24 <pid_pitch+0x134>)
 8005a98:	6053      	str	r3, [r2, #4]

    setpoint_rate_pitch = math_constrain(setpoint_rate_pitch, -50, 50);
 8005a9a:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <pid_pitch+0x13c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a24      	ldr	r2, [pc, #144]	; (8005b30 <pid_pitch+0x140>)
 8005aa0:	4924      	ldr	r1, [pc, #144]	; (8005b34 <pid_pitch+0x144>)
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff fe55 	bl	8005752 <math_constrain>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <pid_pitch+0x13c>)
 8005aac:	6013      	str	r3, [r2, #0]

    error = setpoint_rate_pitch - pitch_rate;
 8005aae:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <pid_pitch+0x13c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fb f82b 	bl	8000b10 <__aeabi_fsub>
 8005aba:	4603      	mov	r3, r0
 8005abc:	461a      	mov	r2, r3
 8005abe:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <pid_pitch+0x120>)
 8005ac0:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_rate_pitch, Ki_rate_pitch, Kd_rate_pitch, last_error_rate[1], last_Iterm_rate[1]);
 8005ac2:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <pid_pitch+0x120>)
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	4b1c      	ldr	r3, [pc, #112]	; (8005b38 <pid_pitch+0x148>)
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <pid_pitch+0x14c>)
 8005acc:	681c      	ldr	r4, [r3, #0]
 8005ace:	4b1c      	ldr	r3, [pc, #112]	; (8005b40 <pid_pitch+0x150>)
 8005ad0:	681d      	ldr	r5, [r3, #0]
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <pid_pitch+0x154>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <pid_pitch+0x158>)
 8005ad8:	6852      	ldr	r2, [r2, #4]
 8005ada:	9201      	str	r2, [sp, #4]
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	462b      	mov	r3, r5
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	f7ff fe55 	bl	8005790 <pid_calculate>
    PID_out->PID_pitch_out = PIDReturn[0];
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <pid_pitch+0x138>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	605a      	str	r2, [r3, #4]
    last_error_rate[1] = PIDReturn[1];
 8005aee:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <pid_pitch+0x138>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4a14      	ldr	r2, [pc, #80]	; (8005b44 <pid_pitch+0x154>)
 8005af4:	6053      	str	r3, [r2, #4]
    last_Iterm_rate[1] = PIDReturn[2];
 8005af6:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <pid_pitch+0x138>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4a13      	ldr	r2, [pc, #76]	; (8005b48 <pid_pitch+0x158>)
 8005afc:	6053      	str	r3, [r2, #4]
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bdb0      	pop	{r4, r5, r7, pc}
 8005b06:	bf00      	nop
 8005b08:	47ae147b 	.word	0x47ae147b
 8005b0c:	3fb47ae1 	.word	0x3fb47ae1
 8005b10:	20000484 	.word	0x20000484
 8005b14:	200002f8 	.word	0x200002f8
 8005b18:	200002fc 	.word	0x200002fc
 8005b1c:	20000300 	.word	0x20000300
 8005b20:	20000488 	.word	0x20000488
 8005b24:	20000494 	.word	0x20000494
 8005b28:	200004b8 	.word	0x200004b8
 8005b2c:	200004c8 	.word	0x200004c8
 8005b30:	42480000 	.word	0x42480000
 8005b34:	c2480000 	.word	0xc2480000
 8005b38:	20000310 	.word	0x20000310
 8005b3c:	20000314 	.word	0x20000314
 8005b40:	20000318 	.word	0x20000318
 8005b44:	200004a0 	.word	0x200004a0
 8005b48:	200004ac 	.word	0x200004ac
 8005b4c:	00000000 	.word	0x00000000

08005b50 <pid_yaw>:

void pid_yaw(uint16_t yaw_rc, float yaw_rate, PID_t *PID_out)
{
 8005b50:	b5b0      	push	{r4, r5, r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	4603      	mov	r3, r0
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	81fb      	strh	r3, [r7, #14]
    // check again
    if (yaw_rc > 1540 || yaw_rc < 1440)
 8005b5e:	89fb      	ldrh	r3, [r7, #14]
 8005b60:	f240 6204 	movw	r2, #1540	; 0x604
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d807      	bhi.n	8005b78 <pid_yaw+0x28>
 8005b68:	89fb      	ldrh	r3, [r7, #14]
 8005b6a:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8005b6e:	d303      	bcc.n	8005b78 <pid_yaw+0x28>
    {
        yaw_rc = yaw_rc;
    }
    else
    {
        yaw_rc = 1500;
 8005b70:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005b74:	81fb      	strh	r3, [r7, #14]
 8005b76:	e000      	b.n	8005b7a <pid_yaw+0x2a>
        yaw_rc = yaw_rc;
 8005b78:	bf00      	nop
    }

    yaw_rc = 1800;
 8005b7a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8005b7e:	81fb      	strh	r3, [r7, #14]

    error = 0.1 * (yaw_rc - 1500) - yaw_rate;
 8005b80:	89fb      	ldrh	r3, [r7, #14]
 8005b82:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fa fc34 	bl	80003f4 <__aeabi_i2d>
 8005b8c:	a31e      	add	r3, pc, #120	; (adr r3, 8005c08 <pid_yaw+0xb8>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f7fa fc99 	bl	80004c8 <__aeabi_dmul>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4614      	mov	r4, r2
 8005b9c:	461d      	mov	r5, r3
 8005b9e:	68b8      	ldr	r0, [r7, #8]
 8005ba0:	f7fa fc3a 	bl	8000418 <__aeabi_f2d>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	f7fa fad4 	bl	8000158 <__aeabi_dsub>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	f7fa ff56 	bl	8000a68 <__aeabi_d2f>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4a14      	ldr	r2, [pc, #80]	; (8005c10 <pid_yaw+0xc0>)
 8005bc0:	6013      	str	r3, [r2, #0]

    pid_calculate(error, Kp_rate_yaw, Ki_rate_yaw, Kd_rate_yaw, last_error_rate[2], last_Iterm_rate[2]);
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <pid_yaw+0xc0>)
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <pid_yaw+0xc4>)
 8005bc8:	6819      	ldr	r1, [r3, #0]
 8005bca:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <pid_yaw+0xc8>)
 8005bcc:	681c      	ldr	r4, [r3, #0]
 8005bce:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <pid_yaw+0xcc>)
 8005bd0:	681d      	ldr	r5, [r3, #0]
 8005bd2:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <pid_yaw+0xd0>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4a13      	ldr	r2, [pc, #76]	; (8005c24 <pid_yaw+0xd4>)
 8005bd8:	6892      	ldr	r2, [r2, #8]
 8005bda:	9201      	str	r2, [sp, #4]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	462b      	mov	r3, r5
 8005be0:	4622      	mov	r2, r4
 8005be2:	f7ff fdd5 	bl	8005790 <pid_calculate>
    PID_out->PID_yaw_out = PIDReturn[0];
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <pid_yaw+0xd8>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	609a      	str	r2, [r3, #8]
    last_error_rate[2] = PIDReturn[1];
 8005bee:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <pid_yaw+0xd8>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <pid_yaw+0xd0>)
 8005bf4:	6093      	str	r3, [r2, #8]
    last_Iterm_rate[2] = PIDReturn[2];
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <pid_yaw+0xd8>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <pid_yaw+0xd4>)
 8005bfc:	6093      	str	r3, [r2, #8]
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bdb0      	pop	{r4, r5, r7, pc}
 8005c06:	bf00      	nop
 8005c08:	9999999a 	.word	0x9999999a
 8005c0c:	3fb99999 	.word	0x3fb99999
 8005c10:	20000484 	.word	0x20000484
 8005c14:	20000328 	.word	0x20000328
 8005c18:	2000032c 	.word	0x2000032c
 8005c1c:	20000330 	.word	0x20000330
 8005c20:	200004a0 	.word	0x200004a0
 8005c24:	200004ac 	.word	0x200004ac
 8005c28:	200004b8 	.word	0x200004b8

08005c2c <nRF24_CE_L>:
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8005c30:	2200      	movs	r2, #0
 8005c32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c36:	4802      	ldr	r0, [pc, #8]	; (8005c40 <nRF24_CE_L+0x14>)
 8005c38:	f001 f8d8 	bl	8006dec <HAL_GPIO_WritePin>
}
 8005c3c:	bf00      	nop
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40010800 	.word	0x40010800

08005c44 <nRF24_CE_H>:
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c4e:	4802      	ldr	r0, [pc, #8]	; (8005c58 <nRF24_CE_H+0x14>)
 8005c50:	f001 f8cc 	bl	8006dec <HAL_GPIO_WritePin>
}
 8005c54:	bf00      	nop
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40010800 	.word	0x40010800

08005c5c <Delay_ms>:

static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fb6d 	bl	8006344 <HAL_Delay>
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <Toggle_LED>:

extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005c78:	2120      	movs	r1, #32
 8005c7a:	4802      	ldr	r0, [pc, #8]	; (8005c84 <Toggle_LED+0x10>)
 8005c7c:	f001 f8ce 	bl	8006e1c <HAL_GPIO_TogglePin>
}
 8005c80:	bf00      	nop
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40010c00 	.word	0x40010c00

08005c88 <runRadio>:
}

#endif // DEMO_TX_

int runRadio(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
#if (DEBUG_RX)
    printf("\r\nSTM32 is online.\r\n");
#endif // debug
    nRF24_CE_L();
 8005c8c:	f7ff ffce 	bl	8005c2c <nRF24_CE_L>
#if (DEBUG_RX)
    printf("nRF24L01+ check: ");
#endif
    while (!nRF24_Check())
 8005c90:	e004      	b.n	8005c9c <runRadio+0x14>
    {
            Toggle_LED();
 8005c92:	f7ff ffef 	bl	8005c74 <Toggle_LED>
            Delay_ms(50);
 8005c96:	2032      	movs	r0, #50	; 0x32
 8005c98:	f7ff ffe0 	bl	8005c5c <Delay_ms>
    while (!nRF24_Check())
 8005c9c:	f7ff fb3c 	bl	8005318 <nRF24_Check>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f5      	beq.n	8005c92 <runRadio+0xa>
    }
    nRF24_Init();
 8005ca6:	f7ff faea 	bl	800527e <nRF24_Init>
    // nRF24_CE_L();

/***************************************************************************/
#if (RX_SINGLE)

    nRF24_SetRFChannel(40);
 8005caa:	2028      	movs	r0, #40	; 0x28
 8005cac:	f7ff fbc3 	bl	8005436 <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8005cb0:	2008      	movs	r0, #8
 8005cb2:	f7ff fc44 	bl	800553e <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8005cb6:	200c      	movs	r0, #12
 8005cb8:	f7ff fb9c 	bl	80053f4 <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 8005cbc:	2003      	movs	r0, #3
 8005cbe:	f7ff fbc8 	bl	8005452 <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR);
 8005cc2:	490c      	ldr	r1, [pc, #48]	; (8005cf4 <runRadio+0x6c>)
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	f7ff fbd5 	bl	8005474 <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 24);
 8005cca:	2218      	movs	r2, #24
 8005ccc:	2101      	movs	r1, #1
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f7ff fc50 	bl	8005574 <nRF24_SetRXPipe>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8005cd4:	2006      	movs	r0, #6
 8005cd6:	f7ff fc17 	bl	8005508 <nRF24_SetTXPower>
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8005cda:	2001      	movs	r0, #1
 8005cdc:	f7ff fb69 	bl	80053b2 <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 8005ce0:	f7ff fcb7 	bl	8005652 <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8005ce4:	2002      	movs	r0, #2
 8005ce6:	f7ff fb45 	bl	8005374 <nRF24_SetPowerMode>
    nRF24_CE_H();
 8005cea:	f7ff ffab 	bl	8005c44 <nRF24_CE_H>
        Toggle_LED();
        Delay_ms(100);
    }

#endif // TX_SINGLE
}
 8005cee:	bf00      	nop
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	0800c7c4 	.word	0x0800c7c4

08005cf8 <RX_data>:

void RX_data(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0

    if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8005cfe:	f7ff fc8d 	bl	800561c <nRF24_GetStatus_RXFIFO>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d009      	beq.n	8005d1c <RX_data+0x24>
    {
        nRF24_RXResult pipe = nRF24_ReadPayload((uint8_t *)&payload_packet, &payload_length);
 8005d08:	4906      	ldr	r1, [pc, #24]	; (8005d24 <RX_data+0x2c>)
 8005d0a:	4807      	ldr	r0, [pc, #28]	; (8005d28 <RX_data+0x30>)
 8005d0c:	f7ff fd12 	bl	8005734 <nRF24_ReadPayload>
 8005d10:	4603      	mov	r3, r0
 8005d12:	71fb      	strb	r3, [r7, #7]
        // Clear all pending IRQ flags
        nRF24_ClearIRQFlags();
 8005d14:	f7ff fc9d 	bl	8005652 <nRF24_ClearIRQFlags>
        Toggle_LED();
 8005d18:	f7ff ffac 	bl	8005c74 <Toggle_LED>
    }
    else
    {
        // todo:
    }
}
 8005d1c:	bf00      	nop
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20000020 	.word	0x20000020
 8005d28:	200004cc 	.word	0x200004cc

08005d2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <HAL_MspInit+0x5c>)
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	4a14      	ldr	r2, [pc, #80]	; (8005d88 <HAL_MspInit+0x5c>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	6193      	str	r3, [r2, #24]
 8005d3e:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <HAL_MspInit+0x5c>)
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	60bb      	str	r3, [r7, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <HAL_MspInit+0x5c>)
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	4a0e      	ldr	r2, [pc, #56]	; (8005d88 <HAL_MspInit+0x5c>)
 8005d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d54:	61d3      	str	r3, [r2, #28]
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <HAL_MspInit+0x5c>)
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5e:	607b      	str	r3, [r7, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005d62:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <HAL_MspInit+0x60>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	4a04      	ldr	r2, [pc, #16]	; (8005d8c <HAL_MspInit+0x60>)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40010000 	.word	0x40010000

08005d90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d98:	f107 0310 	add.w	r3, r7, #16
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <HAL_I2C_MspInit+0x70>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d123      	bne.n	8005df8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005db0:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <HAL_I2C_MspInit+0x74>)
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <HAL_I2C_MspInit+0x74>)
 8005db6:	f043 0308 	orr.w	r3, r3, #8
 8005dba:	6193      	str	r3, [r2, #24]
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <HAL_I2C_MspInit+0x74>)
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005dc8:	23c0      	movs	r3, #192	; 0xc0
 8005dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dcc:	2312      	movs	r3, #18
 8005dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dd4:	f107 0310 	add.w	r3, r7, #16
 8005dd8:	4619      	mov	r1, r3
 8005dda:	480b      	ldr	r0, [pc, #44]	; (8005e08 <HAL_I2C_MspInit+0x78>)
 8005ddc:	f000 fe82 	bl	8006ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005de0:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <HAL_I2C_MspInit+0x74>)
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	4a07      	ldr	r2, [pc, #28]	; (8005e04 <HAL_I2C_MspInit+0x74>)
 8005de6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dea:	61d3      	str	r3, [r2, #28]
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <HAL_I2C_MspInit+0x74>)
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df4:	60bb      	str	r3, [r7, #8]
 8005df6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005df8:	bf00      	nop
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40005400 	.word	0x40005400
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40010c00 	.word	0x40010c00

08005e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e14:	f107 0310 	add.w	r3, r7, #16
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	609a      	str	r2, [r3, #8]
 8005e20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1c      	ldr	r2, [pc, #112]	; (8005e98 <HAL_SPI_MspInit+0x8c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d131      	bne.n	8005e90 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005e2c:	4b1b      	ldr	r3, [pc, #108]	; (8005e9c <HAL_SPI_MspInit+0x90>)
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <HAL_SPI_MspInit+0x90>)
 8005e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e36:	61d3      	str	r3, [r2, #28]
 8005e38:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <HAL_SPI_MspInit+0x90>)
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e44:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <HAL_SPI_MspInit+0x90>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	4a14      	ldr	r2, [pc, #80]	; (8005e9c <HAL_SPI_MspInit+0x90>)
 8005e4a:	f043 0308 	orr.w	r3, r3, #8
 8005e4e:	6193      	str	r3, [r2, #24]
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <HAL_SPI_MspInit+0x90>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 8005e5c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e62:	2302      	movs	r3, #2
 8005e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e66:	2303      	movs	r3, #3
 8005e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e6a:	f107 0310 	add.w	r3, r7, #16
 8005e6e:	4619      	mov	r1, r3
 8005e70:	480b      	ldr	r0, [pc, #44]	; (8005ea0 <HAL_SPI_MspInit+0x94>)
 8005e72:	f000 fe37 	bl	8006ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8005e76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8005e84:	f107 0310 	add.w	r3, r7, #16
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4805      	ldr	r0, [pc, #20]	; (8005ea0 <HAL_SPI_MspInit+0x94>)
 8005e8c:	f000 fe2a 	bl	8006ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005e90:	bf00      	nop
 8005e92:	3720      	adds	r7, #32
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40003800 	.word	0x40003800
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	40010c00 	.word	0x40010c00

08005ea4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <HAL_TIM_PWM_MspInit+0x34>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d10b      	bne.n	8005ece <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005eb6:	4b09      	ldr	r3, [pc, #36]	; (8005edc <HAL_TIM_PWM_MspInit+0x38>)
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	4a08      	ldr	r2, [pc, #32]	; (8005edc <HAL_TIM_PWM_MspInit+0x38>)
 8005ebc:	f043 0302 	orr.w	r3, r3, #2
 8005ec0:	61d3      	str	r3, [r2, #28]
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <HAL_TIM_PWM_MspInit+0x38>)
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005ece:	bf00      	nop
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40021000 	.word	0x40021000

08005ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a0d      	ldr	r2, [pc, #52]	; (8005f24 <HAL_TIM_Base_MspInit+0x44>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d113      	bne.n	8005f1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	; (8005f28 <HAL_TIM_Base_MspInit+0x48>)
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4a0c      	ldr	r2, [pc, #48]	; (8005f28 <HAL_TIM_Base_MspInit+0x48>)
 8005ef8:	f043 0304 	orr.w	r3, r3, #4
 8005efc:	61d3      	str	r3, [r2, #28]
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_TIM_Base_MspInit+0x48>)
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2102      	movs	r1, #2
 8005f0e:	201e      	movs	r0, #30
 8005f10:	f000 fb13 	bl	800653a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005f14:	201e      	movs	r0, #30
 8005f16:	f000 fb2c 	bl	8006572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40021000 	.word	0x40021000

08005f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f34:	f107 0310 	add.w	r3, r7, #16
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	605a      	str	r2, [r3, #4]
 8005f3e:	609a      	str	r2, [r3, #8]
 8005f40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a1b      	ldr	r2, [pc, #108]	; (8005fb4 <HAL_TIM_MspPostInit+0x88>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d12f      	bne.n	8005fac <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f4c:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <HAL_TIM_MspPostInit+0x8c>)
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <HAL_TIM_MspPostInit+0x8c>)
 8005f52:	f043 0304 	orr.w	r3, r3, #4
 8005f56:	6193      	str	r3, [r2, #24]
 8005f58:	4b17      	ldr	r3, [pc, #92]	; (8005fb8 <HAL_TIM_MspPostInit+0x8c>)
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f64:	4b14      	ldr	r3, [pc, #80]	; (8005fb8 <HAL_TIM_MspPostInit+0x8c>)
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <HAL_TIM_MspPostInit+0x8c>)
 8005f6a:	f043 0308 	orr.w	r3, r3, #8
 8005f6e:	6193      	str	r3, [r2, #24]
 8005f70:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <HAL_TIM_MspPostInit+0x8c>)
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f7c:	23c0      	movs	r3, #192	; 0xc0
 8005f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f80:	2302      	movs	r3, #2
 8005f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f84:	2302      	movs	r3, #2
 8005f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f88:	f107 0310 	add.w	r3, r7, #16
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	480b      	ldr	r0, [pc, #44]	; (8005fbc <HAL_TIM_MspPostInit+0x90>)
 8005f90:	f000 fda8 	bl	8006ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f94:	2303      	movs	r3, #3
 8005f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fa0:	f107 0310 	add.w	r3, r7, #16
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4806      	ldr	r0, [pc, #24]	; (8005fc0 <HAL_TIM_MspPostInit+0x94>)
 8005fa8:	f000 fd9c 	bl	8006ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005fac:	bf00      	nop
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	40010800 	.word	0x40010800
 8005fc0:	40010c00 	.word	0x40010c00

08005fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	; 0x28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fcc:	f107 0318 	add.w	r3, r7, #24
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	609a      	str	r2, [r3, #8]
 8005fd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a4e      	ldr	r2, [pc, #312]	; (8006118 <HAL_UART_MspInit+0x154>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d160      	bne.n	80060a6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fe4:	4b4d      	ldr	r3, [pc, #308]	; (800611c <HAL_UART_MspInit+0x158>)
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	4a4c      	ldr	r2, [pc, #304]	; (800611c <HAL_UART_MspInit+0x158>)
 8005fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fee:	6193      	str	r3, [r2, #24]
 8005ff0:	4b4a      	ldr	r3, [pc, #296]	; (800611c <HAL_UART_MspInit+0x158>)
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ffc:	4b47      	ldr	r3, [pc, #284]	; (800611c <HAL_UART_MspInit+0x158>)
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	4a46      	ldr	r2, [pc, #280]	; (800611c <HAL_UART_MspInit+0x158>)
 8006002:	f043 0304 	orr.w	r3, r3, #4
 8006006:	6193      	str	r3, [r2, #24]
 8006008:	4b44      	ldr	r3, [pc, #272]	; (800611c <HAL_UART_MspInit+0x158>)
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601a:	2302      	movs	r3, #2
 800601c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800601e:	2303      	movs	r3, #3
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006022:	f107 0318 	add.w	r3, r7, #24
 8006026:	4619      	mov	r1, r3
 8006028:	483d      	ldr	r0, [pc, #244]	; (8006120 <HAL_UART_MspInit+0x15c>)
 800602a:	f000 fd5b 	bl	8006ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800602e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006038:	2300      	movs	r3, #0
 800603a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800603c:	f107 0318 	add.w	r3, r7, #24
 8006040:	4619      	mov	r1, r3
 8006042:	4837      	ldr	r0, [pc, #220]	; (8006120 <HAL_UART_MspInit+0x15c>)
 8006044:	f000 fd4e 	bl	8006ae4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006048:	4b36      	ldr	r3, [pc, #216]	; (8006124 <HAL_UART_MspInit+0x160>)
 800604a:	4a37      	ldr	r2, [pc, #220]	; (8006128 <HAL_UART_MspInit+0x164>)
 800604c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800604e:	4b35      	ldr	r3, [pc, #212]	; (8006124 <HAL_UART_MspInit+0x160>)
 8006050:	2200      	movs	r2, #0
 8006052:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006054:	4b33      	ldr	r3, [pc, #204]	; (8006124 <HAL_UART_MspInit+0x160>)
 8006056:	2200      	movs	r2, #0
 8006058:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800605a:	4b32      	ldr	r3, [pc, #200]	; (8006124 <HAL_UART_MspInit+0x160>)
 800605c:	2280      	movs	r2, #128	; 0x80
 800605e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006060:	4b30      	ldr	r3, [pc, #192]	; (8006124 <HAL_UART_MspInit+0x160>)
 8006062:	2200      	movs	r2, #0
 8006064:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006066:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <HAL_UART_MspInit+0x160>)
 8006068:	2200      	movs	r2, #0
 800606a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800606c:	4b2d      	ldr	r3, [pc, #180]	; (8006124 <HAL_UART_MspInit+0x160>)
 800606e:	2200      	movs	r2, #0
 8006070:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006072:	4b2c      	ldr	r3, [pc, #176]	; (8006124 <HAL_UART_MspInit+0x160>)
 8006074:	2200      	movs	r2, #0
 8006076:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006078:	482a      	ldr	r0, [pc, #168]	; (8006124 <HAL_UART_MspInit+0x160>)
 800607a:	f000 fa95 	bl	80065a8 <HAL_DMA_Init>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8006084:	f7fb fcf2 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a26      	ldr	r2, [pc, #152]	; (8006124 <HAL_UART_MspInit+0x160>)
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
 800608e:	4a25      	ldr	r2, [pc, #148]	; (8006124 <HAL_UART_MspInit+0x160>)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006094:	2200      	movs	r2, #0
 8006096:	2101      	movs	r1, #1
 8006098:	2025      	movs	r0, #37	; 0x25
 800609a:	f000 fa4e 	bl	800653a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800609e:	2025      	movs	r0, #37	; 0x25
 80060a0:	f000 fa67 	bl	8006572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80060a4:	e034      	b.n	8006110 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a20      	ldr	r2, [pc, #128]	; (800612c <HAL_UART_MspInit+0x168>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d12f      	bne.n	8006110 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060b0:	4b1a      	ldr	r3, [pc, #104]	; (800611c <HAL_UART_MspInit+0x158>)
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <HAL_UART_MspInit+0x158>)
 80060b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ba:	61d3      	str	r3, [r2, #28]
 80060bc:	4b17      	ldr	r3, [pc, #92]	; (800611c <HAL_UART_MspInit+0x158>)
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060c8:	4b14      	ldr	r3, [pc, #80]	; (800611c <HAL_UART_MspInit+0x158>)
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	4a13      	ldr	r2, [pc, #76]	; (800611c <HAL_UART_MspInit+0x158>)
 80060ce:	f043 0304 	orr.w	r3, r3, #4
 80060d2:	6193      	str	r3, [r2, #24]
 80060d4:	4b11      	ldr	r3, [pc, #68]	; (800611c <HAL_UART_MspInit+0x158>)
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80060e0:	2304      	movs	r3, #4
 80060e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e4:	2302      	movs	r3, #2
 80060e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060e8:	2303      	movs	r3, #3
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ec:	f107 0318 	add.w	r3, r7, #24
 80060f0:	4619      	mov	r1, r3
 80060f2:	480b      	ldr	r0, [pc, #44]	; (8006120 <HAL_UART_MspInit+0x15c>)
 80060f4:	f000 fcf6 	bl	8006ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80060f8:	2308      	movs	r3, #8
 80060fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006100:	2300      	movs	r3, #0
 8006102:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006104:	f107 0318 	add.w	r3, r7, #24
 8006108:	4619      	mov	r1, r3
 800610a:	4805      	ldr	r0, [pc, #20]	; (8006120 <HAL_UART_MspInit+0x15c>)
 800610c:	f000 fcea 	bl	8006ae4 <HAL_GPIO_Init>
}
 8006110:	bf00      	nop
 8006112:	3728      	adds	r7, #40	; 0x28
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40013800 	.word	0x40013800
 800611c:	40021000 	.word	0x40021000
 8006120:	40010800 	.word	0x40010800
 8006124:	20000274 	.word	0x20000274
 8006128:	40020058 	.word	0x40020058
 800612c:	40004400 	.word	0x40004400

08006130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006134:	e7fe      	b.n	8006134 <NMI_Handler+0x4>

08006136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006136:	b480      	push	{r7}
 8006138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800613a:	e7fe      	b.n	800613a <HardFault_Handler+0x4>

0800613c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006140:	e7fe      	b.n	8006140 <MemManage_Handler+0x4>

08006142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006142:	b480      	push	{r7}
 8006144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006146:	e7fe      	b.n	8006146 <BusFault_Handler+0x4>

08006148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800614c:	e7fe      	b.n	800614c <UsageFault_Handler+0x4>

0800614e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800614e:	b480      	push	{r7}
 8006150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006152:	bf00      	nop
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800615a:	b480      	push	{r7}
 800615c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800615e:	bf00      	nop
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr

08006166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006166:	b480      	push	{r7}
 8006168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800616a:	bf00      	nop
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr

08006172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006176:	f000 f8c9 	bl	800630c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006184:	4802      	ldr	r0, [pc, #8]	; (8006190 <DMA1_Channel5_IRQHandler+0x10>)
 8006186:	f000 fb79 	bl	800687c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800618a:	bf00      	nop
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000274 	.word	0x20000274

08006194 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006198:	4802      	ldr	r0, [pc, #8]	; (80061a4 <TIM4_IRQHandler+0x10>)
 800619a:	f002 fed3 	bl	8008f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800619e:	bf00      	nop
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	200001a4 	.word	0x200001a4

080061a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80061ac:	4802      	ldr	r0, [pc, #8]	; (80061b8 <USART1_IRQHandler+0x10>)
 80061ae:	f003 fdb9 	bl	8009d24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80061b2:	bf00      	nop
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	200001ec 	.word	0x200001ec

080061bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061c4:	4a14      	ldr	r2, [pc, #80]	; (8006218 <_sbrk+0x5c>)
 80061c6:	4b15      	ldr	r3, [pc, #84]	; (800621c <_sbrk+0x60>)
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061d0:	4b13      	ldr	r3, [pc, #76]	; (8006220 <_sbrk+0x64>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d102      	bne.n	80061de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80061d8:	4b11      	ldr	r3, [pc, #68]	; (8006220 <_sbrk+0x64>)
 80061da:	4a12      	ldr	r2, [pc, #72]	; (8006224 <_sbrk+0x68>)
 80061dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80061de:	4b10      	ldr	r3, [pc, #64]	; (8006220 <_sbrk+0x64>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4413      	add	r3, r2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d207      	bcs.n	80061fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80061ec:	f004 faba 	bl	800a764 <__errno>
 80061f0:	4603      	mov	r3, r0
 80061f2:	220c      	movs	r2, #12
 80061f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	e009      	b.n	8006210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80061fc:	4b08      	ldr	r3, [pc, #32]	; (8006220 <_sbrk+0x64>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <_sbrk+0x64>)
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4413      	add	r3, r2
 800620a:	4a05      	ldr	r2, [pc, #20]	; (8006220 <_sbrk+0x64>)
 800620c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800620e:	68fb      	ldr	r3, [r7, #12]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20005000 	.word	0x20005000
 800621c:	00000400 	.word	0x00000400
 8006220:	200004e4 	.word	0x200004e4
 8006224:	20000500 	.word	0x20000500

08006228 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800622c:	bf00      	nop
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr

08006234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006234:	480c      	ldr	r0, [pc, #48]	; (8006268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006236:	490d      	ldr	r1, [pc, #52]	; (800626c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006238:	4a0d      	ldr	r2, [pc, #52]	; (8006270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800623a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800623c:	e002      	b.n	8006244 <LoopCopyDataInit>

0800623e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800623e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006242:	3304      	adds	r3, #4

08006244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006248:	d3f9      	bcc.n	800623e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800624a:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800624c:	4c0a      	ldr	r4, [pc, #40]	; (8006278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800624e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006250:	e001      	b.n	8006256 <LoopFillZerobss>

08006252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006254:	3204      	adds	r2, #4

08006256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006258:	d3fb      	bcc.n	8006252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800625a:	f7ff ffe5 	bl	8006228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800625e:	f004 fa87 	bl	800a770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006262:	f7fb f823 	bl	80012ac <main>
  bx lr
 8006266:	4770      	bx	lr
  ldr r0, =_sdata
 8006268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800626c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8006270:	0800c888 	.word	0x0800c888
  ldr r2, =_sbss
 8006274:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8006278:	200004fc 	.word	0x200004fc

0800627c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800627c:	e7fe      	b.n	800627c <ADC1_2_IRQHandler>
	...

08006280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006284:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <HAL_Init+0x28>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a07      	ldr	r2, [pc, #28]	; (80062a8 <HAL_Init+0x28>)
 800628a:	f043 0310 	orr.w	r3, r3, #16
 800628e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006290:	2003      	movs	r0, #3
 8006292:	f000 f947 	bl	8006524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006296:	200f      	movs	r0, #15
 8006298:	f000 f808 	bl	80062ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800629c:	f7ff fd46 	bl	8005d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40022000 	.word	0x40022000

080062ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <HAL_InitTick+0x54>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4b12      	ldr	r3, [pc, #72]	; (8006304 <HAL_InitTick+0x58>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	4619      	mov	r1, r3
 80062be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 f95f 	bl	800658e <HAL_SYSTICK_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e00e      	b.n	80062f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b0f      	cmp	r3, #15
 80062de:	d80a      	bhi.n	80062f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062e0:	2200      	movs	r2, #0
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295
 80062e8:	f000 f927 	bl	800653a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062ec:	4a06      	ldr	r2, [pc, #24]	; (8006308 <HAL_InitTick+0x5c>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e000      	b.n	80062f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000024 	.word	0x20000024
 8006304:	2000002c 	.word	0x2000002c
 8006308:	20000028 	.word	0x20000028

0800630c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006310:	4b05      	ldr	r3, [pc, #20]	; (8006328 <HAL_IncTick+0x1c>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_IncTick+0x20>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4413      	add	r3, r2
 800631c:	4a03      	ldr	r2, [pc, #12]	; (800632c <HAL_IncTick+0x20>)
 800631e:	6013      	str	r3, [r2, #0]
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr
 8006328:	2000002c 	.word	0x2000002c
 800632c:	200004e8 	.word	0x200004e8

08006330 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  return uwTick;
 8006334:	4b02      	ldr	r3, [pc, #8]	; (8006340 <HAL_GetTick+0x10>)
 8006336:	681b      	ldr	r3, [r3, #0]
}
 8006338:	4618      	mov	r0, r3
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr
 8006340:	200004e8 	.word	0x200004e8

08006344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800634c:	f7ff fff0 	bl	8006330 <HAL_GetTick>
 8006350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d005      	beq.n	800636a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800635e:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <HAL_Delay+0x44>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800636a:	bf00      	nop
 800636c:	f7ff ffe0 	bl	8006330 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	429a      	cmp	r2, r3
 800637a:	d8f7      	bhi.n	800636c <HAL_Delay+0x28>
  {
  }
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	2000002c 	.word	0x2000002c

0800638c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800639c:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <__NVIC_SetPriorityGrouping+0x44>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063a8:	4013      	ands	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063be:	4a04      	ldr	r2, [pc, #16]	; (80063d0 <__NVIC_SetPriorityGrouping+0x44>)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	60d3      	str	r3, [r2, #12]
}
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bc80      	pop	{r7}
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	e000ed00 	.word	0xe000ed00

080063d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063d8:	4b04      	ldr	r3, [pc, #16]	; (80063ec <__NVIC_GetPriorityGrouping+0x18>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	0a1b      	lsrs	r3, r3, #8
 80063de:	f003 0307 	and.w	r3, r3, #7
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	e000ed00 	.word	0xe000ed00

080063f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	db0b      	blt.n	800641a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	f003 021f 	and.w	r2, r3, #31
 8006408:	4906      	ldr	r1, [pc, #24]	; (8006424 <__NVIC_EnableIRQ+0x34>)
 800640a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	2001      	movs	r0, #1
 8006412:	fa00 f202 	lsl.w	r2, r0, r2
 8006416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	bc80      	pop	{r7}
 8006422:	4770      	bx	lr
 8006424:	e000e100 	.word	0xe000e100

08006428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	6039      	str	r1, [r7, #0]
 8006432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006438:	2b00      	cmp	r3, #0
 800643a:	db0a      	blt.n	8006452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	b2da      	uxtb	r2, r3
 8006440:	490c      	ldr	r1, [pc, #48]	; (8006474 <__NVIC_SetPriority+0x4c>)
 8006442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006446:	0112      	lsls	r2, r2, #4
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	440b      	add	r3, r1
 800644c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006450:	e00a      	b.n	8006468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	4908      	ldr	r1, [pc, #32]	; (8006478 <__NVIC_SetPriority+0x50>)
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	3b04      	subs	r3, #4
 8006460:	0112      	lsls	r2, r2, #4
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	440b      	add	r3, r1
 8006466:	761a      	strb	r2, [r3, #24]
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	e000e100 	.word	0xe000e100
 8006478:	e000ed00 	.word	0xe000ed00

0800647c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800647c:	b480      	push	{r7}
 800647e:	b089      	sub	sp, #36	; 0x24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f1c3 0307 	rsb	r3, r3, #7
 8006496:	2b04      	cmp	r3, #4
 8006498:	bf28      	it	cs
 800649a:	2304      	movcs	r3, #4
 800649c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3304      	adds	r3, #4
 80064a2:	2b06      	cmp	r3, #6
 80064a4:	d902      	bls.n	80064ac <NVIC_EncodePriority+0x30>
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	3b03      	subs	r3, #3
 80064aa:	e000      	b.n	80064ae <NVIC_EncodePriority+0x32>
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064b0:	f04f 32ff 	mov.w	r2, #4294967295
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	43da      	mvns	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	401a      	ands	r2, r3
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064c4:	f04f 31ff 	mov.w	r1, #4294967295
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	fa01 f303 	lsl.w	r3, r1, r3
 80064ce:	43d9      	mvns	r1, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064d4:	4313      	orrs	r3, r2
         );
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3724      	adds	r7, #36	; 0x24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064f0:	d301      	bcc.n	80064f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064f2:	2301      	movs	r3, #1
 80064f4:	e00f      	b.n	8006516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064f6:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <SysTick_Config+0x40>)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064fe:	210f      	movs	r1, #15
 8006500:	f04f 30ff 	mov.w	r0, #4294967295
 8006504:	f7ff ff90 	bl	8006428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006508:	4b05      	ldr	r3, [pc, #20]	; (8006520 <SysTick_Config+0x40>)
 800650a:	2200      	movs	r2, #0
 800650c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800650e:	4b04      	ldr	r3, [pc, #16]	; (8006520 <SysTick_Config+0x40>)
 8006510:	2207      	movs	r2, #7
 8006512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	e000e010 	.word	0xe000e010

08006524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ff2d 	bl	800638c <__NVIC_SetPriorityGrouping>
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800653a:	b580      	push	{r7, lr}
 800653c:	b086      	sub	sp, #24
 800653e:	af00      	add	r7, sp, #0
 8006540:	4603      	mov	r3, r0
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
 8006546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800654c:	f7ff ff42 	bl	80063d4 <__NVIC_GetPriorityGrouping>
 8006550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	68b9      	ldr	r1, [r7, #8]
 8006556:	6978      	ldr	r0, [r7, #20]
 8006558:	f7ff ff90 	bl	800647c <NVIC_EncodePriority>
 800655c:	4602      	mov	r2, r0
 800655e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff ff5f 	bl	8006428 <__NVIC_SetPriority>
}
 800656a:	bf00      	nop
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	4603      	mov	r3, r0
 800657a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800657c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff ff35 	bl	80063f0 <__NVIC_EnableIRQ>
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7ff ffa2 	bl	80064e0 <SysTick_Config>
 800659c:	4603      	mov	r3, r0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e043      	b.n	8006646 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	4b22      	ldr	r3, [pc, #136]	; (8006650 <HAL_DMA_Init+0xa8>)
 80065c6:	4413      	add	r3, r2
 80065c8:	4a22      	ldr	r2, [pc, #136]	; (8006654 <HAL_DMA_Init+0xac>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	091b      	lsrs	r3, r3, #4
 80065d0:	009a      	lsls	r2, r3, #2
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1f      	ldr	r2, [pc, #124]	; (8006658 <HAL_DMA_Init+0xb0>)
 80065da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80065f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80065f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800660c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr
 8006650:	bffdfff8 	.word	0xbffdfff8
 8006654:	cccccccd 	.word	0xcccccccd
 8006658:	40020000 	.word	0x40020000

0800665c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_DMA_Start_IT+0x20>
 8006678:	2302      	movs	r3, #2
 800667a:	e04a      	b.n	8006712 <HAL_DMA_Start_IT+0xb6>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800668a:	2b01      	cmp	r3, #1
 800668c:	d13a      	bne.n	8006704 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2202      	movs	r2, #2
 8006692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0201 	bic.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f9e8 	bl	8006a88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 020e 	orr.w	r2, r2, #14
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	e00f      	b.n	80066f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0204 	bic.w	r2, r2, #4
 80066e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 020a 	orr.w	r2, r2, #10
 80066f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0201 	orr.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	e005      	b.n	8006710 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800670c:	2302      	movs	r3, #2
 800670e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800672c:	2b02      	cmp	r3, #2
 800672e:	d008      	beq.n	8006742 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2204      	movs	r2, #4
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e020      	b.n	8006784 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 020e 	bic.w	r2, r2, #14
 8006750:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676a:	2101      	movs	r1, #1
 800676c:	fa01 f202 	lsl.w	r2, r1, r2
 8006770:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006782:	7bfb      	ldrb	r3, [r7, #15]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr
	...

08006790 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d005      	beq.n	80067b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2204      	movs	r2, #4
 80067aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	e051      	b.n	8006856 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 020e 	bic.w	r2, r2, #14
 80067c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0201 	bic.w	r2, r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a22      	ldr	r2, [pc, #136]	; (8006860 <HAL_DMA_Abort_IT+0xd0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d029      	beq.n	8006830 <HAL_DMA_Abort_IT+0xa0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a20      	ldr	r2, [pc, #128]	; (8006864 <HAL_DMA_Abort_IT+0xd4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d022      	beq.n	800682c <HAL_DMA_Abort_IT+0x9c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a1f      	ldr	r2, [pc, #124]	; (8006868 <HAL_DMA_Abort_IT+0xd8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d01a      	beq.n	8006826 <HAL_DMA_Abort_IT+0x96>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1d      	ldr	r2, [pc, #116]	; (800686c <HAL_DMA_Abort_IT+0xdc>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d012      	beq.n	8006820 <HAL_DMA_Abort_IT+0x90>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <HAL_DMA_Abort_IT+0xe0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00a      	beq.n	800681a <HAL_DMA_Abort_IT+0x8a>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <HAL_DMA_Abort_IT+0xe4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d102      	bne.n	8006814 <HAL_DMA_Abort_IT+0x84>
 800680e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006812:	e00e      	b.n	8006832 <HAL_DMA_Abort_IT+0xa2>
 8006814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006818:	e00b      	b.n	8006832 <HAL_DMA_Abort_IT+0xa2>
 800681a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800681e:	e008      	b.n	8006832 <HAL_DMA_Abort_IT+0xa2>
 8006820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006824:	e005      	b.n	8006832 <HAL_DMA_Abort_IT+0xa2>
 8006826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800682a:	e002      	b.n	8006832 <HAL_DMA_Abort_IT+0xa2>
 800682c:	2310      	movs	r3, #16
 800682e:	e000      	b.n	8006832 <HAL_DMA_Abort_IT+0xa2>
 8006830:	2301      	movs	r3, #1
 8006832:	4a11      	ldr	r2, [pc, #68]	; (8006878 <HAL_DMA_Abort_IT+0xe8>)
 8006834:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
    } 
  }
  return status;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40020008 	.word	0x40020008
 8006864:	4002001c 	.word	0x4002001c
 8006868:	40020030 	.word	0x40020030
 800686c:	40020044 	.word	0x40020044
 8006870:	40020058 	.word	0x40020058
 8006874:	4002006c 	.word	0x4002006c
 8006878:	40020000 	.word	0x40020000

0800687c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	2204      	movs	r2, #4
 800689a:	409a      	lsls	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4013      	ands	r3, r2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d04f      	beq.n	8006944 <HAL_DMA_IRQHandler+0xc8>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d04a      	beq.n	8006944 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d107      	bne.n	80068cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0204 	bic.w	r2, r2, #4
 80068ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a66      	ldr	r2, [pc, #408]	; (8006a6c <HAL_DMA_IRQHandler+0x1f0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d029      	beq.n	800692a <HAL_DMA_IRQHandler+0xae>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a65      	ldr	r2, [pc, #404]	; (8006a70 <HAL_DMA_IRQHandler+0x1f4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d022      	beq.n	8006926 <HAL_DMA_IRQHandler+0xaa>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a63      	ldr	r2, [pc, #396]	; (8006a74 <HAL_DMA_IRQHandler+0x1f8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d01a      	beq.n	8006920 <HAL_DMA_IRQHandler+0xa4>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a62      	ldr	r2, [pc, #392]	; (8006a78 <HAL_DMA_IRQHandler+0x1fc>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d012      	beq.n	800691a <HAL_DMA_IRQHandler+0x9e>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a60      	ldr	r2, [pc, #384]	; (8006a7c <HAL_DMA_IRQHandler+0x200>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00a      	beq.n	8006914 <HAL_DMA_IRQHandler+0x98>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a5f      	ldr	r2, [pc, #380]	; (8006a80 <HAL_DMA_IRQHandler+0x204>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d102      	bne.n	800690e <HAL_DMA_IRQHandler+0x92>
 8006908:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800690c:	e00e      	b.n	800692c <HAL_DMA_IRQHandler+0xb0>
 800690e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006912:	e00b      	b.n	800692c <HAL_DMA_IRQHandler+0xb0>
 8006914:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006918:	e008      	b.n	800692c <HAL_DMA_IRQHandler+0xb0>
 800691a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800691e:	e005      	b.n	800692c <HAL_DMA_IRQHandler+0xb0>
 8006920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006924:	e002      	b.n	800692c <HAL_DMA_IRQHandler+0xb0>
 8006926:	2340      	movs	r3, #64	; 0x40
 8006928:	e000      	b.n	800692c <HAL_DMA_IRQHandler+0xb0>
 800692a:	2304      	movs	r3, #4
 800692c:	4a55      	ldr	r2, [pc, #340]	; (8006a84 <HAL_DMA_IRQHandler+0x208>)
 800692e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8094 	beq.w	8006a62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006942:	e08e      	b.n	8006a62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	2202      	movs	r2, #2
 800694a:	409a      	lsls	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4013      	ands	r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d056      	beq.n	8006a02 <HAL_DMA_IRQHandler+0x186>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d051      	beq.n	8006a02 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10b      	bne.n	8006984 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 020a 	bic.w	r2, r2, #10
 800697a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a38      	ldr	r2, [pc, #224]	; (8006a6c <HAL_DMA_IRQHandler+0x1f0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d029      	beq.n	80069e2 <HAL_DMA_IRQHandler+0x166>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a37      	ldr	r2, [pc, #220]	; (8006a70 <HAL_DMA_IRQHandler+0x1f4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <HAL_DMA_IRQHandler+0x162>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a35      	ldr	r2, [pc, #212]	; (8006a74 <HAL_DMA_IRQHandler+0x1f8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01a      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x15c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a34      	ldr	r2, [pc, #208]	; (8006a78 <HAL_DMA_IRQHandler+0x1fc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d012      	beq.n	80069d2 <HAL_DMA_IRQHandler+0x156>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a32      	ldr	r2, [pc, #200]	; (8006a7c <HAL_DMA_IRQHandler+0x200>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00a      	beq.n	80069cc <HAL_DMA_IRQHandler+0x150>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a31      	ldr	r2, [pc, #196]	; (8006a80 <HAL_DMA_IRQHandler+0x204>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d102      	bne.n	80069c6 <HAL_DMA_IRQHandler+0x14a>
 80069c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80069c4:	e00e      	b.n	80069e4 <HAL_DMA_IRQHandler+0x168>
 80069c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ca:	e00b      	b.n	80069e4 <HAL_DMA_IRQHandler+0x168>
 80069cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069d0:	e008      	b.n	80069e4 <HAL_DMA_IRQHandler+0x168>
 80069d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069d6:	e005      	b.n	80069e4 <HAL_DMA_IRQHandler+0x168>
 80069d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069dc:	e002      	b.n	80069e4 <HAL_DMA_IRQHandler+0x168>
 80069de:	2320      	movs	r3, #32
 80069e0:	e000      	b.n	80069e4 <HAL_DMA_IRQHandler+0x168>
 80069e2:	2302      	movs	r3, #2
 80069e4:	4a27      	ldr	r2, [pc, #156]	; (8006a84 <HAL_DMA_IRQHandler+0x208>)
 80069e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d034      	beq.n	8006a62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006a00:	e02f      	b.n	8006a62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	2208      	movs	r2, #8
 8006a08:	409a      	lsls	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d028      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x1e8>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d023      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 020e 	bic.w	r2, r2, #14
 8006a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a34:	2101      	movs	r1, #1
 8006a36:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d004      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
    }
  }
  return;
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
}
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40020008 	.word	0x40020008
 8006a70:	4002001c 	.word	0x4002001c
 8006a74:	40020030 	.word	0x40020030
 8006a78:	40020044 	.word	0x40020044
 8006a7c:	40020058 	.word	0x40020058
 8006a80:	4002006c 	.word	0x4002006c
 8006a84:	40020000 	.word	0x40020000

08006a88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8006aa4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d108      	bne.n	8006ac8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ac6:	e007      	b.n	8006ad8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	60da      	str	r2, [r3, #12]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
	...

08006ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b08b      	sub	sp, #44	; 0x2c
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006aee:	2300      	movs	r3, #0
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006af2:	2300      	movs	r3, #0
 8006af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006af6:	e169      	b.n	8006dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006af8:	2201      	movs	r2, #1
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	f040 8158 	bne.w	8006dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	4a9a      	ldr	r2, [pc, #616]	; (8006d84 <HAL_GPIO_Init+0x2a0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d05e      	beq.n	8006bde <HAL_GPIO_Init+0xfa>
 8006b20:	4a98      	ldr	r2, [pc, #608]	; (8006d84 <HAL_GPIO_Init+0x2a0>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d875      	bhi.n	8006c12 <HAL_GPIO_Init+0x12e>
 8006b26:	4a98      	ldr	r2, [pc, #608]	; (8006d88 <HAL_GPIO_Init+0x2a4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d058      	beq.n	8006bde <HAL_GPIO_Init+0xfa>
 8006b2c:	4a96      	ldr	r2, [pc, #600]	; (8006d88 <HAL_GPIO_Init+0x2a4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d86f      	bhi.n	8006c12 <HAL_GPIO_Init+0x12e>
 8006b32:	4a96      	ldr	r2, [pc, #600]	; (8006d8c <HAL_GPIO_Init+0x2a8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d052      	beq.n	8006bde <HAL_GPIO_Init+0xfa>
 8006b38:	4a94      	ldr	r2, [pc, #592]	; (8006d8c <HAL_GPIO_Init+0x2a8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d869      	bhi.n	8006c12 <HAL_GPIO_Init+0x12e>
 8006b3e:	4a94      	ldr	r2, [pc, #592]	; (8006d90 <HAL_GPIO_Init+0x2ac>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d04c      	beq.n	8006bde <HAL_GPIO_Init+0xfa>
 8006b44:	4a92      	ldr	r2, [pc, #584]	; (8006d90 <HAL_GPIO_Init+0x2ac>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d863      	bhi.n	8006c12 <HAL_GPIO_Init+0x12e>
 8006b4a:	4a92      	ldr	r2, [pc, #584]	; (8006d94 <HAL_GPIO_Init+0x2b0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d046      	beq.n	8006bde <HAL_GPIO_Init+0xfa>
 8006b50:	4a90      	ldr	r2, [pc, #576]	; (8006d94 <HAL_GPIO_Init+0x2b0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d85d      	bhi.n	8006c12 <HAL_GPIO_Init+0x12e>
 8006b56:	2b12      	cmp	r3, #18
 8006b58:	d82a      	bhi.n	8006bb0 <HAL_GPIO_Init+0xcc>
 8006b5a:	2b12      	cmp	r3, #18
 8006b5c:	d859      	bhi.n	8006c12 <HAL_GPIO_Init+0x12e>
 8006b5e:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <HAL_GPIO_Init+0x80>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006bdf 	.word	0x08006bdf
 8006b68:	08006bb9 	.word	0x08006bb9
 8006b6c:	08006bcb 	.word	0x08006bcb
 8006b70:	08006c0d 	.word	0x08006c0d
 8006b74:	08006c13 	.word	0x08006c13
 8006b78:	08006c13 	.word	0x08006c13
 8006b7c:	08006c13 	.word	0x08006c13
 8006b80:	08006c13 	.word	0x08006c13
 8006b84:	08006c13 	.word	0x08006c13
 8006b88:	08006c13 	.word	0x08006c13
 8006b8c:	08006c13 	.word	0x08006c13
 8006b90:	08006c13 	.word	0x08006c13
 8006b94:	08006c13 	.word	0x08006c13
 8006b98:	08006c13 	.word	0x08006c13
 8006b9c:	08006c13 	.word	0x08006c13
 8006ba0:	08006c13 	.word	0x08006c13
 8006ba4:	08006c13 	.word	0x08006c13
 8006ba8:	08006bc1 	.word	0x08006bc1
 8006bac:	08006bd5 	.word	0x08006bd5
 8006bb0:	4a79      	ldr	r2, [pc, #484]	; (8006d98 <HAL_GPIO_Init+0x2b4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d013      	beq.n	8006bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006bb6:	e02c      	b.n	8006c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	623b      	str	r3, [r7, #32]
          break;
 8006bbe:	e029      	b.n	8006c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	623b      	str	r3, [r7, #32]
          break;
 8006bc8:	e024      	b.n	8006c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	623b      	str	r3, [r7, #32]
          break;
 8006bd2:	e01f      	b.n	8006c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	623b      	str	r3, [r7, #32]
          break;
 8006bdc:	e01a      	b.n	8006c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006be6:	2304      	movs	r3, #4
 8006be8:	623b      	str	r3, [r7, #32]
          break;
 8006bea:	e013      	b.n	8006c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d105      	bne.n	8006c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	611a      	str	r2, [r3, #16]
          break;
 8006bfe:	e009      	b.n	8006c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c00:	2308      	movs	r3, #8
 8006c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	615a      	str	r2, [r3, #20]
          break;
 8006c0a:	e003      	b.n	8006c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	623b      	str	r3, [r7, #32]
          break;
 8006c10:	e000      	b.n	8006c14 <HAL_GPIO_Init+0x130>
          break;
 8006c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2bff      	cmp	r3, #255	; 0xff
 8006c18:	d801      	bhi.n	8006c1e <HAL_GPIO_Init+0x13a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	e001      	b.n	8006c22 <HAL_GPIO_Init+0x13e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
 8006c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	2bff      	cmp	r3, #255	; 0xff
 8006c28:	d802      	bhi.n	8006c30 <HAL_GPIO_Init+0x14c>
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	e002      	b.n	8006c36 <HAL_GPIO_Init+0x152>
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	3b08      	subs	r3, #8
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	210f      	movs	r1, #15
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	fa01 f303 	lsl.w	r3, r1, r3
 8006c44:	43db      	mvns	r3, r3
 8006c46:	401a      	ands	r2, r3
 8006c48:	6a39      	ldr	r1, [r7, #32]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c50:	431a      	orrs	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 80b1 	beq.w	8006dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006c64:	4b4d      	ldr	r3, [pc, #308]	; (8006d9c <HAL_GPIO_Init+0x2b8>)
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	4a4c      	ldr	r2, [pc, #304]	; (8006d9c <HAL_GPIO_Init+0x2b8>)
 8006c6a:	f043 0301 	orr.w	r3, r3, #1
 8006c6e:	6193      	str	r3, [r2, #24]
 8006c70:	4b4a      	ldr	r3, [pc, #296]	; (8006d9c <HAL_GPIO_Init+0x2b8>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006c7c:	4a48      	ldr	r2, [pc, #288]	; (8006da0 <HAL_GPIO_Init+0x2bc>)
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	089b      	lsrs	r3, r3, #2
 8006c82:	3302      	adds	r3, #2
 8006c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	f003 0303 	and.w	r3, r3, #3
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	220f      	movs	r2, #15
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a40      	ldr	r2, [pc, #256]	; (8006da4 <HAL_GPIO_Init+0x2c0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <HAL_GPIO_Init+0x1ec>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3f      	ldr	r2, [pc, #252]	; (8006da8 <HAL_GPIO_Init+0x2c4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00d      	beq.n	8006ccc <HAL_GPIO_Init+0x1e8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3e      	ldr	r2, [pc, #248]	; (8006dac <HAL_GPIO_Init+0x2c8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <HAL_GPIO_Init+0x1e4>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a3d      	ldr	r2, [pc, #244]	; (8006db0 <HAL_GPIO_Init+0x2cc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d101      	bne.n	8006cc4 <HAL_GPIO_Init+0x1e0>
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e006      	b.n	8006cd2 <HAL_GPIO_Init+0x1ee>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	e004      	b.n	8006cd2 <HAL_GPIO_Init+0x1ee>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e002      	b.n	8006cd2 <HAL_GPIO_Init+0x1ee>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e000      	b.n	8006cd2 <HAL_GPIO_Init+0x1ee>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd4:	f002 0203 	and.w	r2, r2, #3
 8006cd8:	0092      	lsls	r2, r2, #2
 8006cda:	4093      	lsls	r3, r2
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006ce2:	492f      	ldr	r1, [pc, #188]	; (8006da0 <HAL_GPIO_Init+0x2bc>)
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	089b      	lsrs	r3, r3, #2
 8006ce8:	3302      	adds	r3, #2
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d006      	beq.n	8006d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006cfc:	4b2d      	ldr	r3, [pc, #180]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	492c      	ldr	r1, [pc, #176]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	600b      	str	r3, [r1, #0]
 8006d08:	e006      	b.n	8006d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006d0a:	4b2a      	ldr	r3, [pc, #168]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	43db      	mvns	r3, r3
 8006d12:	4928      	ldr	r1, [pc, #160]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d14:	4013      	ands	r3, r2
 8006d16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d006      	beq.n	8006d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006d24:	4b23      	ldr	r3, [pc, #140]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	4922      	ldr	r1, [pc, #136]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	604b      	str	r3, [r1, #4]
 8006d30:	e006      	b.n	8006d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006d32:	4b20      	ldr	r3, [pc, #128]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	491e      	ldr	r1, [pc, #120]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d006      	beq.n	8006d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d4c:	4b19      	ldr	r3, [pc, #100]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	4918      	ldr	r1, [pc, #96]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	608b      	str	r3, [r1, #8]
 8006d58:	e006      	b.n	8006d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006d5a:	4b16      	ldr	r3, [pc, #88]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	43db      	mvns	r3, r3
 8006d62:	4914      	ldr	r1, [pc, #80]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d021      	beq.n	8006db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006d74:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	490e      	ldr	r1, [pc, #56]	; (8006db4 <HAL_GPIO_Init+0x2d0>)
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60cb      	str	r3, [r1, #12]
 8006d80:	e021      	b.n	8006dc6 <HAL_GPIO_Init+0x2e2>
 8006d82:	bf00      	nop
 8006d84:	10320000 	.word	0x10320000
 8006d88:	10310000 	.word	0x10310000
 8006d8c:	10220000 	.word	0x10220000
 8006d90:	10210000 	.word	0x10210000
 8006d94:	10120000 	.word	0x10120000
 8006d98:	10110000 	.word	0x10110000
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40010800 	.word	0x40010800
 8006da8:	40010c00 	.word	0x40010c00
 8006dac:	40011000 	.word	0x40011000
 8006db0:	40011400 	.word	0x40011400
 8006db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006db8:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <HAL_GPIO_Init+0x304>)
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	4909      	ldr	r1, [pc, #36]	; (8006de8 <HAL_GPIO_Init+0x304>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	3301      	adds	r3, #1
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f47f ae8e 	bne.w	8006af8 <HAL_GPIO_Init+0x14>
  }
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	372c      	adds	r7, #44	; 0x2c
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bc80      	pop	{r7}
 8006de6:	4770      	bx	lr
 8006de8:	40010400 	.word	0x40010400

08006dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	807b      	strh	r3, [r7, #2]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006dfc:	787b      	ldrb	r3, [r7, #1]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e02:	887a      	ldrh	r2, [r7, #2]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006e08:	e003      	b.n	8006e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006e0a:	887b      	ldrh	r3, [r7, #2]
 8006e0c:	041a      	lsls	r2, r3, #16
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	611a      	str	r2, [r3, #16]
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr

08006e1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e2e:	887a      	ldrh	r2, [r7, #2]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4013      	ands	r3, r2
 8006e34:	041a      	lsls	r2, r3, #16
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	43d9      	mvns	r1, r3
 8006e3a:	887b      	ldrh	r3, [r7, #2]
 8006e3c:	400b      	ands	r3, r1
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	611a      	str	r2, [r3, #16]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr
	...

08006e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e12b      	b.n	80070ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fe ff8a 	bl	8005d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2224      	movs	r2, #36	; 0x24
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0201 	bic.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006eb4:	f001 fba0 	bl	80085f8 <HAL_RCC_GetPCLK1Freq>
 8006eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4a81      	ldr	r2, [pc, #516]	; (80070c4 <HAL_I2C_Init+0x274>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d807      	bhi.n	8006ed4 <HAL_I2C_Init+0x84>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4a80      	ldr	r2, [pc, #512]	; (80070c8 <HAL_I2C_Init+0x278>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	bf94      	ite	ls
 8006ecc:	2301      	movls	r3, #1
 8006ece:	2300      	movhi	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	e006      	b.n	8006ee2 <HAL_I2C_Init+0x92>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4a7d      	ldr	r2, [pc, #500]	; (80070cc <HAL_I2C_Init+0x27c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	bf94      	ite	ls
 8006edc:	2301      	movls	r3, #1
 8006ede:	2300      	movhi	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e0e7      	b.n	80070ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a78      	ldr	r2, [pc, #480]	; (80070d0 <HAL_I2C_Init+0x280>)
 8006eee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef2:	0c9b      	lsrs	r3, r3, #18
 8006ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	4a6a      	ldr	r2, [pc, #424]	; (80070c4 <HAL_I2C_Init+0x274>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d802      	bhi.n	8006f24 <HAL_I2C_Init+0xd4>
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	3301      	adds	r3, #1
 8006f22:	e009      	b.n	8006f38 <HAL_I2C_Init+0xe8>
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f2a:	fb02 f303 	mul.w	r3, r2, r3
 8006f2e:	4a69      	ldr	r2, [pc, #420]	; (80070d4 <HAL_I2C_Init+0x284>)
 8006f30:	fba2 2303 	umull	r2, r3, r2, r3
 8006f34:	099b      	lsrs	r3, r3, #6
 8006f36:	3301      	adds	r3, #1
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6812      	ldr	r2, [r2, #0]
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	495c      	ldr	r1, [pc, #368]	; (80070c4 <HAL_I2C_Init+0x274>)
 8006f54:	428b      	cmp	r3, r1
 8006f56:	d819      	bhi.n	8006f8c <HAL_I2C_Init+0x13c>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	1e59      	subs	r1, r3, #1
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f66:	1c59      	adds	r1, r3, #1
 8006f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f6c:	400b      	ands	r3, r1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <HAL_I2C_Init+0x138>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	1e59      	subs	r1, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f80:	3301      	adds	r3, #1
 8006f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f86:	e051      	b.n	800702c <HAL_I2C_Init+0x1dc>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	e04f      	b.n	800702c <HAL_I2C_Init+0x1dc>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d111      	bne.n	8006fb8 <HAL_I2C_Init+0x168>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	1e58      	subs	r0, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6859      	ldr	r1, [r3, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	440b      	add	r3, r1
 8006fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bf0c      	ite	eq
 8006fb0:	2301      	moveq	r3, #1
 8006fb2:	2300      	movne	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	e012      	b.n	8006fde <HAL_I2C_Init+0x18e>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	1e58      	subs	r0, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6859      	ldr	r1, [r3, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	0099      	lsls	r1, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fce:	3301      	adds	r3, #1
 8006fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2301      	moveq	r3, #1
 8006fda:	2300      	movne	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_I2C_Init+0x196>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e022      	b.n	800702c <HAL_I2C_Init+0x1dc>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10e      	bne.n	800700c <HAL_I2C_Init+0x1bc>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1e58      	subs	r0, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6859      	ldr	r1, [r3, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	440b      	add	r3, r1
 8006ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007000:	3301      	adds	r3, #1
 8007002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800700a:	e00f      	b.n	800702c <HAL_I2C_Init+0x1dc>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	1e58      	subs	r0, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6859      	ldr	r1, [r3, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	0099      	lsls	r1, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007022:	3301      	adds	r3, #1
 8007024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	6809      	ldr	r1, [r1, #0]
 8007030:	4313      	orrs	r3, r2
 8007032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69da      	ldr	r2, [r3, #28]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	431a      	orrs	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800705a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	6911      	ldr	r1, [r2, #16]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68d2      	ldr	r2, [r2, #12]
 8007066:	4311      	orrs	r1, r2
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6812      	ldr	r2, [r2, #0]
 800706c:	430b      	orrs	r3, r1
 800706e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695a      	ldr	r2, [r3, #20]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	000186a0 	.word	0x000186a0
 80070c8:	001e847f 	.word	0x001e847f
 80070cc:	003d08ff 	.word	0x003d08ff
 80070d0:	431bde83 	.word	0x431bde83
 80070d4:	10624dd3 	.word	0x10624dd3

080070d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	4608      	mov	r0, r1
 80070e2:	4611      	mov	r1, r2
 80070e4:	461a      	mov	r2, r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	817b      	strh	r3, [r7, #10]
 80070ea:	460b      	mov	r3, r1
 80070ec:	813b      	strh	r3, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070f2:	f7ff f91d 	bl	8006330 <HAL_GetTick>
 80070f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b20      	cmp	r3, #32
 8007102:	f040 80d9 	bne.w	80072b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	2319      	movs	r3, #25
 800710c:	2201      	movs	r2, #1
 800710e:	496d      	ldr	r1, [pc, #436]	; (80072c4 <HAL_I2C_Mem_Write+0x1ec>)
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fcc1 	bl	8007a98 <I2C_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800711c:	2302      	movs	r3, #2
 800711e:	e0cc      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_I2C_Mem_Write+0x56>
 800712a:	2302      	movs	r3, #2
 800712c:	e0c5      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b01      	cmp	r3, #1
 8007142:	d007      	beq.n	8007154 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007162:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2221      	movs	r2, #33	; 0x21
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2240      	movs	r2, #64	; 0x40
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a3a      	ldr	r2, [r7, #32]
 800717e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007184:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4a4d      	ldr	r2, [pc, #308]	; (80072c8 <HAL_I2C_Mem_Write+0x1f0>)
 8007194:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007196:	88f8      	ldrh	r0, [r7, #6]
 8007198:	893a      	ldrh	r2, [r7, #8]
 800719a:	8979      	ldrh	r1, [r7, #10]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	4603      	mov	r3, r0
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 faf8 	bl	800779c <I2C_RequestMemoryWrite>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d052      	beq.n	8007258 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e081      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fd42 	bl	8007c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00d      	beq.n	80071e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d107      	bne.n	80071de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e06b      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	781a      	ldrb	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b04      	cmp	r3, #4
 800721e:	d11b      	bne.n	8007258 <HAL_I2C_Mem_Write+0x180>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007224:	2b00      	cmp	r3, #0
 8007226:	d017      	beq.n	8007258 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	781a      	ldrb	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1aa      	bne.n	80071b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fd2e 	bl	8007cc6 <I2C_WaitOnBTFFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00d      	beq.n	800728c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	2b04      	cmp	r3, #4
 8007276:	d107      	bne.n	8007288 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007286:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e016      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800729a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	e000      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80072b8:	2302      	movs	r3, #2
  }
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	00100002 	.word	0x00100002
 80072c8:	ffff0000 	.word	0xffff0000

080072cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08c      	sub	sp, #48	; 0x30
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	4608      	mov	r0, r1
 80072d6:	4611      	mov	r1, r2
 80072d8:	461a      	mov	r2, r3
 80072da:	4603      	mov	r3, r0
 80072dc:	817b      	strh	r3, [r7, #10]
 80072de:	460b      	mov	r3, r1
 80072e0:	813b      	strh	r3, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072ea:	f7ff f821 	bl	8006330 <HAL_GetTick>
 80072ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	f040 8244 	bne.w	8007786 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	2319      	movs	r3, #25
 8007304:	2201      	movs	r2, #1
 8007306:	4982      	ldr	r1, [pc, #520]	; (8007510 <HAL_I2C_Mem_Read+0x244>)
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 fbc5 	bl	8007a98 <I2C_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007314:	2302      	movs	r3, #2
 8007316:	e237      	b.n	8007788 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_I2C_Mem_Read+0x5a>
 8007322:	2302      	movs	r3, #2
 8007324:	e230      	b.n	8007788 <HAL_I2C_Mem_Read+0x4bc>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b01      	cmp	r3, #1
 800733a:	d007      	beq.n	800734c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800735a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2222      	movs	r2, #34	; 0x22
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2240      	movs	r2, #64	; 0x40
 8007368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800737c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4a62      	ldr	r2, [pc, #392]	; (8007514 <HAL_I2C_Mem_Read+0x248>)
 800738c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800738e:	88f8      	ldrh	r0, [r7, #6]
 8007390:	893a      	ldrh	r2, [r7, #8]
 8007392:	8979      	ldrh	r1, [r7, #10]
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	4603      	mov	r3, r0
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 fa92 	bl	80078c8 <I2C_RequestMemoryRead>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e1ec      	b.n	8007788 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d113      	bne.n	80073de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	61fb      	str	r3, [r7, #28]
 80073ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e1c0      	b.n	8007760 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d11e      	bne.n	8007424 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80073f6:	b672      	cpsid	i
}
 80073f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073fa:	2300      	movs	r3, #0
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	61bb      	str	r3, [r7, #24]
 800740e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800741e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007420:	b662      	cpsie	i
}
 8007422:	e035      	b.n	8007490 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007428:	2b02      	cmp	r3, #2
 800742a:	d11e      	bne.n	800746a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800743a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800743c:	b672      	cpsid	i
}
 800743e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007464:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007466:	b662      	cpsie	i
}
 8007468:	e012      	b.n	8007490 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007478:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007490:	e166      	b.n	8007760 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007496:	2b03      	cmp	r3, #3
 8007498:	f200 811f 	bhi.w	80076da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d123      	bne.n	80074ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 fc4d 	bl	8007d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e167      	b.n	8007788 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691a      	ldr	r2, [r3, #16]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074ea:	e139      	b.n	8007760 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d152      	bne.n	800759a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	2200      	movs	r2, #0
 80074fc:	4906      	ldr	r1, [pc, #24]	; (8007518 <HAL_I2C_Mem_Read+0x24c>)
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 faca 	bl	8007a98 <I2C_WaitOnFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d008      	beq.n	800751c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e13c      	b.n	8007788 <HAL_I2C_Mem_Read+0x4bc>
 800750e:	bf00      	nop
 8007510:	00100002 	.word	0x00100002
 8007514:	ffff0000 	.word	0xffff0000
 8007518:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800751c:	b672      	cpsid	i
}
 800751e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800752e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754c:	3b01      	subs	r3, #1
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007562:	b662      	cpsie	i
}
 8007564:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007598:	e0e2      	b.n	8007760 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	2200      	movs	r2, #0
 80075a2:	497b      	ldr	r1, [pc, #492]	; (8007790 <HAL_I2C_Mem_Read+0x4c4>)
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fa77 	bl	8007a98 <I2C_WaitOnFlagUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e0e9      	b.n	8007788 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80075c4:	b672      	cpsid	i
}
 80075c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	691a      	ldr	r2, [r3, #16]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80075fa:	4b66      	ldr	r3, [pc, #408]	; (8007794 <HAL_I2C_Mem_Read+0x4c8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	08db      	lsrs	r3, r3, #3
 8007600:	4a65      	ldr	r2, [pc, #404]	; (8007798 <HAL_I2C_Mem_Read+0x4cc>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	0a1a      	lsrs	r2, r3, #8
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	00da      	lsls	r2, r3, #3
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	3b01      	subs	r3, #1
 8007618:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d118      	bne.n	8007652 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	f043 0220 	orr.w	r2, r3, #32
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007642:	b662      	cpsie	i
}
 8007644:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e09a      	b.n	8007788 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b04      	cmp	r3, #4
 800765e:	d1d9      	bne.n	8007614 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800766e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80076a2:	b662      	cpsie	i
}
 80076a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076d8:	e042      	b.n	8007760 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fb32 	bl	8007d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e04c      	b.n	8007788 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	691a      	ldr	r2, [r3, #16]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	b2d2      	uxtb	r2, r2
 80076fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f003 0304 	and.w	r3, r3, #4
 800772a:	2b04      	cmp	r3, #4
 800772c:	d118      	bne.n	8007760 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007756:	b29b      	uxth	r3, r3
 8007758:	3b01      	subs	r3, #1
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007764:	2b00      	cmp	r3, #0
 8007766:	f47f ae94 	bne.w	8007492 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007786:	2302      	movs	r3, #2
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3728      	adds	r7, #40	; 0x28
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	00010004 	.word	0x00010004
 8007794:	20000024 	.word	0x20000024
 8007798:	14f8b589 	.word	0x14f8b589

0800779c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	4608      	mov	r0, r1
 80077a6:	4611      	mov	r1, r2
 80077a8:	461a      	mov	r2, r3
 80077aa:	4603      	mov	r3, r0
 80077ac:	817b      	strh	r3, [r7, #10]
 80077ae:	460b      	mov	r3, r1
 80077b0:	813b      	strh	r3, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 f960 	bl	8007a98 <I2C_WaitOnFlagUntilTimeout>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ec:	d103      	bne.n	80077f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e05f      	b.n	80078ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077fa:	897b      	ldrh	r3, [r7, #10]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	461a      	mov	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007808:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	6a3a      	ldr	r2, [r7, #32]
 800780e:	492d      	ldr	r1, [pc, #180]	; (80078c4 <I2C_RequestMemoryWrite+0x128>)
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 f998 	bl	8007b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e04c      	b.n	80078ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007838:	6a39      	ldr	r1, [r7, #32]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 fa02 	bl	8007c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00d      	beq.n	8007862 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	2b04      	cmp	r3, #4
 800784c:	d107      	bne.n	800785e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800785c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e02b      	b.n	80078ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d105      	bne.n	8007874 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007868:	893b      	ldrh	r3, [r7, #8]
 800786a:	b2da      	uxtb	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	611a      	str	r2, [r3, #16]
 8007872:	e021      	b.n	80078b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007874:	893b      	ldrh	r3, [r7, #8]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	b29b      	uxth	r3, r3
 800787a:	b2da      	uxtb	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007884:	6a39      	ldr	r1, [r7, #32]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 f9dc 	bl	8007c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00d      	beq.n	80078ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	2b04      	cmp	r3, #4
 8007898:	d107      	bne.n	80078aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e005      	b.n	80078ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078ae:	893b      	ldrh	r3, [r7, #8]
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	00010002 	.word	0x00010002

080078c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	461a      	mov	r2, r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	817b      	strh	r3, [r7, #10]
 80078da:	460b      	mov	r3, r1
 80078dc:	813b      	strh	r3, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	2200      	movs	r2, #0
 800790a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f8c2 	bl	8007a98 <I2C_WaitOnFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00d      	beq.n	8007936 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007928:	d103      	bne.n	8007932 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007930:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e0aa      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007936:	897b      	ldrh	r3, [r7, #10]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007944:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	6a3a      	ldr	r2, [r7, #32]
 800794a:	4952      	ldr	r1, [pc, #328]	; (8007a94 <I2C_RequestMemoryRead+0x1cc>)
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 f8fa 	bl	8007b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e097      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007974:	6a39      	ldr	r1, [r7, #32]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 f964 	bl	8007c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00d      	beq.n	800799e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	2b04      	cmp	r3, #4
 8007988:	d107      	bne.n	800799a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007998:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e076      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d105      	bne.n	80079b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079a4:	893b      	ldrh	r3, [r7, #8]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	611a      	str	r2, [r3, #16]
 80079ae:	e021      	b.n	80079f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80079b0:	893b      	ldrh	r3, [r7, #8]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c0:	6a39      	ldr	r1, [r7, #32]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f93e 	bl	8007c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00d      	beq.n	80079ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d107      	bne.n	80079e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e050      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079ea:	893b      	ldrh	r3, [r7, #8]
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f6:	6a39      	ldr	r1, [r7, #32]
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f923 	bl	8007c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00d      	beq.n	8007a20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d107      	bne.n	8007a1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e035      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f82b 	bl	8007a98 <I2C_WaitOnFlagUntilTimeout>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00d      	beq.n	8007a64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a56:	d103      	bne.n	8007a60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e013      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a64:	897b      	ldrh	r3, [r7, #10]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	4906      	ldr	r1, [pc, #24]	; (8007a94 <I2C_RequestMemoryRead+0x1cc>)
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f863 	bl	8007b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	00010002 	.word	0x00010002

08007a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aa8:	e025      	b.n	8007af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab0:	d021      	beq.n	8007af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab2:	f7fe fc3d 	bl	8006330 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d302      	bcc.n	8007ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d116      	bne.n	8007af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	f043 0220 	orr.w	r2, r3, #32
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e023      	b.n	8007b3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	0c1b      	lsrs	r3, r3, #16
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d10d      	bne.n	8007b1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	43da      	mvns	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bf0c      	ite	eq
 8007b12:	2301      	moveq	r3, #1
 8007b14:	2300      	movne	r3, #0
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	e00c      	b.n	8007b36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	43da      	mvns	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4013      	ands	r3, r2
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bf0c      	ite	eq
 8007b2e:	2301      	moveq	r3, #1
 8007b30:	2300      	movne	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d0b6      	beq.n	8007aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
 8007b52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b54:	e051      	b.n	8007bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b64:	d123      	bne.n	8007bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	f043 0204 	orr.w	r2, r3, #4
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e046      	b.n	8007c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d021      	beq.n	8007bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb6:	f7fe fbbb 	bl	8006330 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d302      	bcc.n	8007bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d116      	bne.n	8007bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	f043 0220 	orr.w	r2, r3, #32
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e020      	b.n	8007c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	0c1b      	lsrs	r3, r3, #16
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d10c      	bne.n	8007c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	43da      	mvns	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf14      	ite	ne
 8007c16:	2301      	movne	r3, #1
 8007c18:	2300      	moveq	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	e00b      	b.n	8007c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	43da      	mvns	r2, r3
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	bf14      	ite	ne
 8007c30:	2301      	movne	r3, #1
 8007c32:	2300      	moveq	r3, #0
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d18d      	bne.n	8007b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c50:	e02d      	b.n	8007cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 f8ce 	bl	8007df4 <I2C_IsAcknowledgeFailed>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e02d      	b.n	8007cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d021      	beq.n	8007cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6a:	f7fe fb61 	bl	8006330 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d302      	bcc.n	8007c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d116      	bne.n	8007cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	f043 0220 	orr.w	r2, r3, #32
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e007      	b.n	8007cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb8:	2b80      	cmp	r3, #128	; 0x80
 8007cba:	d1ca      	bne.n	8007c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cd2:	e02d      	b.n	8007d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f88d 	bl	8007df4 <I2C_IsAcknowledgeFailed>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e02d      	b.n	8007d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cea:	d021      	beq.n	8007d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cec:	f7fe fb20 	bl	8006330 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d302      	bcc.n	8007d02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d116      	bne.n	8007d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1c:	f043 0220 	orr.w	r2, r3, #32
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e007      	b.n	8007d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	f003 0304 	and.w	r3, r3, #4
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d1ca      	bne.n	8007cd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d54:	e042      	b.n	8007ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d119      	bne.n	8007d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f06f 0210 	mvn.w	r2, #16
 8007d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e029      	b.n	8007dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d98:	f7fe faca 	bl	8006330 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d302      	bcc.n	8007dae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d116      	bne.n	8007ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc8:	f043 0220 	orr.w	r2, r3, #32
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e007      	b.n	8007dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b40      	cmp	r3, #64	; 0x40
 8007de8:	d1b5      	bne.n	8007d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0a:	d11b      	bne.n	8007e44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e30:	f043 0204 	orr.w	r2, r3, #4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e000      	b.n	8007e46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e272      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 8087 	beq.w	8007f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e70:	4b92      	ldr	r3, [pc, #584]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f003 030c 	and.w	r3, r3, #12
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d00c      	beq.n	8007e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007e7c:	4b8f      	ldr	r3, [pc, #572]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f003 030c 	and.w	r3, r3, #12
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d112      	bne.n	8007eae <HAL_RCC_OscConfig+0x5e>
 8007e88:	4b8c      	ldr	r3, [pc, #560]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e94:	d10b      	bne.n	8007eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e96:	4b89      	ldr	r3, [pc, #548]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d06c      	beq.n	8007f7c <HAL_RCC_OscConfig+0x12c>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d168      	bne.n	8007f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e24c      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb6:	d106      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x76>
 8007eb8:	4b80      	ldr	r3, [pc, #512]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a7f      	ldr	r2, [pc, #508]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	e02e      	b.n	8007f24 <HAL_RCC_OscConfig+0xd4>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10c      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x98>
 8007ece:	4b7b      	ldr	r3, [pc, #492]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a7a      	ldr	r2, [pc, #488]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	4b78      	ldr	r3, [pc, #480]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a77      	ldr	r2, [pc, #476]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	e01d      	b.n	8007f24 <HAL_RCC_OscConfig+0xd4>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ef0:	d10c      	bne.n	8007f0c <HAL_RCC_OscConfig+0xbc>
 8007ef2:	4b72      	ldr	r3, [pc, #456]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a71      	ldr	r2, [pc, #452]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	4b6f      	ldr	r3, [pc, #444]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a6e      	ldr	r2, [pc, #440]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	e00b      	b.n	8007f24 <HAL_RCC_OscConfig+0xd4>
 8007f0c:	4b6b      	ldr	r3, [pc, #428]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a6a      	ldr	r2, [pc, #424]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	4b68      	ldr	r3, [pc, #416]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a67      	ldr	r2, [pc, #412]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d013      	beq.n	8007f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f2c:	f7fe fa00 	bl	8006330 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f34:	f7fe f9fc 	bl	8006330 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b64      	cmp	r3, #100	; 0x64
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e200      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f46:	4b5d      	ldr	r3, [pc, #372]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f0      	beq.n	8007f34 <HAL_RCC_OscConfig+0xe4>
 8007f52:	e014      	b.n	8007f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f54:	f7fe f9ec 	bl	8006330 <HAL_GetTick>
 8007f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f5c:	f7fe f9e8 	bl	8006330 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b64      	cmp	r3, #100	; 0x64
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e1ec      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f6e:	4b53      	ldr	r3, [pc, #332]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1f0      	bne.n	8007f5c <HAL_RCC_OscConfig+0x10c>
 8007f7a:	e000      	b.n	8007f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d063      	beq.n	8008052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f8a:	4b4c      	ldr	r3, [pc, #304]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f003 030c 	and.w	r3, r3, #12
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00b      	beq.n	8007fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007f96:	4b49      	ldr	r3, [pc, #292]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f003 030c 	and.w	r3, r3, #12
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d11c      	bne.n	8007fdc <HAL_RCC_OscConfig+0x18c>
 8007fa2:	4b46      	ldr	r3, [pc, #280]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d116      	bne.n	8007fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fae:	4b43      	ldr	r3, [pc, #268]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d005      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x176>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d001      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e1c0      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc6:	4b3d      	ldr	r3, [pc, #244]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	4939      	ldr	r1, [pc, #228]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fda:	e03a      	b.n	8008052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d020      	beq.n	8008026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fe4:	4b36      	ldr	r3, [pc, #216]	; (80080c0 <HAL_RCC_OscConfig+0x270>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fea:	f7fe f9a1 	bl	8006330 <HAL_GetTick>
 8007fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ff0:	e008      	b.n	8008004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ff2:	f7fe f99d 	bl	8006330 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e1a1      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008004:	4b2d      	ldr	r3, [pc, #180]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0f0      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008010:	4b2a      	ldr	r3, [pc, #168]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	4927      	ldr	r1, [pc, #156]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8008020:	4313      	orrs	r3, r2
 8008022:	600b      	str	r3, [r1, #0]
 8008024:	e015      	b.n	8008052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008026:	4b26      	ldr	r3, [pc, #152]	; (80080c0 <HAL_RCC_OscConfig+0x270>)
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800802c:	f7fe f980 	bl	8006330 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008034:	f7fe f97c 	bl	8006330 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e180      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008046:	4b1d      	ldr	r3, [pc, #116]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f0      	bne.n	8008034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d03a      	beq.n	80080d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d019      	beq.n	800809a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008066:	4b17      	ldr	r3, [pc, #92]	; (80080c4 <HAL_RCC_OscConfig+0x274>)
 8008068:	2201      	movs	r2, #1
 800806a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800806c:	f7fe f960 	bl	8006330 <HAL_GetTick>
 8008070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008072:	e008      	b.n	8008086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008074:	f7fe f95c 	bl	8006330 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e160      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <HAL_RCC_OscConfig+0x26c>)
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f0      	beq.n	8008074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008092:	2001      	movs	r0, #1
 8008094:	f000 fad8 	bl	8008648 <RCC_Delay>
 8008098:	e01c      	b.n	80080d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800809a:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <HAL_RCC_OscConfig+0x274>)
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080a0:	f7fe f946 	bl	8006330 <HAL_GetTick>
 80080a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080a6:	e00f      	b.n	80080c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080a8:	f7fe f942 	bl	8006330 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d908      	bls.n	80080c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e146      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
 80080ba:	bf00      	nop
 80080bc:	40021000 	.word	0x40021000
 80080c0:	42420000 	.word	0x42420000
 80080c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080c8:	4b92      	ldr	r3, [pc, #584]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e9      	bne.n	80080a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 80a6 	beq.w	800822e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080e2:	2300      	movs	r3, #0
 80080e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080e6:	4b8b      	ldr	r3, [pc, #556]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10d      	bne.n	800810e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080f2:	4b88      	ldr	r3, [pc, #544]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	4a87      	ldr	r2, [pc, #540]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80080f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080fc:	61d3      	str	r3, [r2, #28]
 80080fe:	4b85      	ldr	r3, [pc, #532]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008106:	60bb      	str	r3, [r7, #8]
 8008108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800810a:	2301      	movs	r3, #1
 800810c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800810e:	4b82      	ldr	r3, [pc, #520]	; (8008318 <HAL_RCC_OscConfig+0x4c8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008116:	2b00      	cmp	r3, #0
 8008118:	d118      	bne.n	800814c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800811a:	4b7f      	ldr	r3, [pc, #508]	; (8008318 <HAL_RCC_OscConfig+0x4c8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a7e      	ldr	r2, [pc, #504]	; (8008318 <HAL_RCC_OscConfig+0x4c8>)
 8008120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008126:	f7fe f903 	bl	8006330 <HAL_GetTick>
 800812a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800812c:	e008      	b.n	8008140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800812e:	f7fe f8ff 	bl	8006330 <HAL_GetTick>
 8008132:	4602      	mov	r2, r0
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	2b64      	cmp	r3, #100	; 0x64
 800813a:	d901      	bls.n	8008140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e103      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008140:	4b75      	ldr	r3, [pc, #468]	; (8008318 <HAL_RCC_OscConfig+0x4c8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0f0      	beq.n	800812e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d106      	bne.n	8008162 <HAL_RCC_OscConfig+0x312>
 8008154:	4b6f      	ldr	r3, [pc, #444]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	4a6e      	ldr	r2, [pc, #440]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 800815a:	f043 0301 	orr.w	r3, r3, #1
 800815e:	6213      	str	r3, [r2, #32]
 8008160:	e02d      	b.n	80081be <HAL_RCC_OscConfig+0x36e>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10c      	bne.n	8008184 <HAL_RCC_OscConfig+0x334>
 800816a:	4b6a      	ldr	r3, [pc, #424]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	4a69      	ldr	r2, [pc, #420]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008170:	f023 0301 	bic.w	r3, r3, #1
 8008174:	6213      	str	r3, [r2, #32]
 8008176:	4b67      	ldr	r3, [pc, #412]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	4a66      	ldr	r2, [pc, #408]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 800817c:	f023 0304 	bic.w	r3, r3, #4
 8008180:	6213      	str	r3, [r2, #32]
 8008182:	e01c      	b.n	80081be <HAL_RCC_OscConfig+0x36e>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	2b05      	cmp	r3, #5
 800818a:	d10c      	bne.n	80081a6 <HAL_RCC_OscConfig+0x356>
 800818c:	4b61      	ldr	r3, [pc, #388]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	4a60      	ldr	r2, [pc, #384]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008192:	f043 0304 	orr.w	r3, r3, #4
 8008196:	6213      	str	r3, [r2, #32]
 8008198:	4b5e      	ldr	r3, [pc, #376]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	4a5d      	ldr	r2, [pc, #372]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 800819e:	f043 0301 	orr.w	r3, r3, #1
 80081a2:	6213      	str	r3, [r2, #32]
 80081a4:	e00b      	b.n	80081be <HAL_RCC_OscConfig+0x36e>
 80081a6:	4b5b      	ldr	r3, [pc, #364]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	4a5a      	ldr	r2, [pc, #360]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80081ac:	f023 0301 	bic.w	r3, r3, #1
 80081b0:	6213      	str	r3, [r2, #32]
 80081b2:	4b58      	ldr	r3, [pc, #352]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	4a57      	ldr	r2, [pc, #348]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80081b8:	f023 0304 	bic.w	r3, r3, #4
 80081bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d015      	beq.n	80081f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081c6:	f7fe f8b3 	bl	8006330 <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081cc:	e00a      	b.n	80081e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ce:	f7fe f8af 	bl	8006330 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081dc:	4293      	cmp	r3, r2
 80081de:	d901      	bls.n	80081e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e0b1      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081e4:	4b4b      	ldr	r3, [pc, #300]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d0ee      	beq.n	80081ce <HAL_RCC_OscConfig+0x37e>
 80081f0:	e014      	b.n	800821c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081f2:	f7fe f89d 	bl	8006330 <HAL_GetTick>
 80081f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081f8:	e00a      	b.n	8008210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081fa:	f7fe f899 	bl	8006330 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	f241 3288 	movw	r2, #5000	; 0x1388
 8008208:	4293      	cmp	r3, r2
 800820a:	d901      	bls.n	8008210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e09b      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008210:	4b40      	ldr	r3, [pc, #256]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1ee      	bne.n	80081fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d105      	bne.n	800822e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008222:	4b3c      	ldr	r3, [pc, #240]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	4a3b      	ldr	r2, [pc, #236]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800822c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 8087 	beq.w	8008346 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008238:	4b36      	ldr	r3, [pc, #216]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f003 030c 	and.w	r3, r3, #12
 8008240:	2b08      	cmp	r3, #8
 8008242:	d061      	beq.n	8008308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d146      	bne.n	80082da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800824c:	4b33      	ldr	r3, [pc, #204]	; (800831c <HAL_RCC_OscConfig+0x4cc>)
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008252:	f7fe f86d 	bl	8006330 <HAL_GetTick>
 8008256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008258:	e008      	b.n	800826c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800825a:	f7fe f869 	bl	8006330 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e06d      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800826c:	4b29      	ldr	r3, [pc, #164]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1f0      	bne.n	800825a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008280:	d108      	bne.n	8008294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008282:	4b24      	ldr	r3, [pc, #144]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	4921      	ldr	r1, [pc, #132]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008290:	4313      	orrs	r3, r2
 8008292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008294:	4b1f      	ldr	r3, [pc, #124]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a19      	ldr	r1, [r3, #32]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	430b      	orrs	r3, r1
 80082a6:	491b      	ldr	r1, [pc, #108]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082ac:	4b1b      	ldr	r3, [pc, #108]	; (800831c <HAL_RCC_OscConfig+0x4cc>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b2:	f7fe f83d 	bl	8006330 <HAL_GetTick>
 80082b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80082b8:	e008      	b.n	80082cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ba:	f7fe f839 	bl	8006330 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d901      	bls.n	80082cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e03d      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80082cc:	4b11      	ldr	r3, [pc, #68]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0f0      	beq.n	80082ba <HAL_RCC_OscConfig+0x46a>
 80082d8:	e035      	b.n	8008346 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082da:	4b10      	ldr	r3, [pc, #64]	; (800831c <HAL_RCC_OscConfig+0x4cc>)
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e0:	f7fe f826 	bl	8006330 <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082e8:	f7fe f822 	bl	8006330 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e026      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082fa:	4b06      	ldr	r3, [pc, #24]	; (8008314 <HAL_RCC_OscConfig+0x4c4>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1f0      	bne.n	80082e8 <HAL_RCC_OscConfig+0x498>
 8008306:	e01e      	b.n	8008346 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d107      	bne.n	8008320 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e019      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
 8008314:	40021000 	.word	0x40021000
 8008318:	40007000 	.word	0x40007000
 800831c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <HAL_RCC_OscConfig+0x500>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	429a      	cmp	r2, r3
 8008332:	d106      	bne.n	8008342 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800833e:	429a      	cmp	r2, r3
 8008340:	d001      	beq.n	8008346 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e000      	b.n	8008348 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	40021000 	.word	0x40021000

08008354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e0d0      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008368:	4b6a      	ldr	r3, [pc, #424]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d910      	bls.n	8008398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008376:	4b67      	ldr	r3, [pc, #412]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f023 0207 	bic.w	r2, r3, #7
 800837e:	4965      	ldr	r1, [pc, #404]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	4313      	orrs	r3, r2
 8008384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008386:	4b63      	ldr	r3, [pc, #396]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d001      	beq.n	8008398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e0b8      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d020      	beq.n	80083e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d005      	beq.n	80083bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083b0:	4b59      	ldr	r3, [pc, #356]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	4a58      	ldr	r2, [pc, #352]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80083ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0308 	and.w	r3, r3, #8
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083c8:	4b53      	ldr	r3, [pc, #332]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	4a52      	ldr	r2, [pc, #328]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80083d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083d4:	4b50      	ldr	r3, [pc, #320]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	494d      	ldr	r1, [pc, #308]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d040      	beq.n	8008474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d107      	bne.n	800840a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083fa:	4b47      	ldr	r3, [pc, #284]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d115      	bne.n	8008432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e07f      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2b02      	cmp	r3, #2
 8008410:	d107      	bne.n	8008422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008412:	4b41      	ldr	r3, [pc, #260]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d109      	bne.n	8008432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e073      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008422:	4b3d      	ldr	r3, [pc, #244]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e06b      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008432:	4b39      	ldr	r3, [pc, #228]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f023 0203 	bic.w	r2, r3, #3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	4936      	ldr	r1, [pc, #216]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 8008440:	4313      	orrs	r3, r2
 8008442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008444:	f7fd ff74 	bl	8006330 <HAL_GetTick>
 8008448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800844a:	e00a      	b.n	8008462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800844c:	f7fd ff70 	bl	8006330 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	f241 3288 	movw	r2, #5000	; 0x1388
 800845a:	4293      	cmp	r3, r2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e053      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008462:	4b2d      	ldr	r3, [pc, #180]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f003 020c 	and.w	r2, r3, #12
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	429a      	cmp	r2, r3
 8008472:	d1eb      	bne.n	800844c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008474:	4b27      	ldr	r3, [pc, #156]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d210      	bcs.n	80084a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008482:	4b24      	ldr	r3, [pc, #144]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f023 0207 	bic.w	r2, r3, #7
 800848a:	4922      	ldr	r1, [pc, #136]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	4313      	orrs	r3, r2
 8008490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008492:	4b20      	ldr	r3, [pc, #128]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d001      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e032      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d008      	beq.n	80084c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084b0:	4b19      	ldr	r3, [pc, #100]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	4916      	ldr	r1, [pc, #88]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0308 	and.w	r3, r3, #8
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	490e      	ldr	r1, [pc, #56]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80084e2:	f000 f821 	bl	8008528 <HAL_RCC_GetSysClockFreq>
 80084e6:	4602      	mov	r2, r0
 80084e8:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	091b      	lsrs	r3, r3, #4
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	490a      	ldr	r1, [pc, #40]	; (800851c <HAL_RCC_ClockConfig+0x1c8>)
 80084f4:	5ccb      	ldrb	r3, [r1, r3]
 80084f6:	fa22 f303 	lsr.w	r3, r2, r3
 80084fa:	4a09      	ldr	r2, [pc, #36]	; (8008520 <HAL_RCC_ClockConfig+0x1cc>)
 80084fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80084fe:	4b09      	ldr	r3, [pc, #36]	; (8008524 <HAL_RCC_ClockConfig+0x1d0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4618      	mov	r0, r3
 8008504:	f7fd fed2 	bl	80062ac <HAL_InitTick>

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	40022000 	.word	0x40022000
 8008518:	40021000 	.word	0x40021000
 800851c:	0800c7c8 	.word	0x0800c7c8
 8008520:	20000024 	.word	0x20000024
 8008524:	20000028 	.word	0x20000028

08008528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008528:	b490      	push	{r4, r7}
 800852a:	b08a      	sub	sp, #40	; 0x28
 800852c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800852e:	4b29      	ldr	r3, [pc, #164]	; (80085d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8008530:	1d3c      	adds	r4, r7, #4
 8008532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008538:	f240 2301 	movw	r3, #513	; 0x201
 800853c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	61fb      	str	r3, [r7, #28]
 8008542:	2300      	movs	r3, #0
 8008544:	61bb      	str	r3, [r7, #24]
 8008546:	2300      	movs	r3, #0
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
 800854a:	2300      	movs	r3, #0
 800854c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008552:	4b21      	ldr	r3, [pc, #132]	; (80085d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	f003 030c 	and.w	r3, r3, #12
 800855e:	2b04      	cmp	r3, #4
 8008560:	d002      	beq.n	8008568 <HAL_RCC_GetSysClockFreq+0x40>
 8008562:	2b08      	cmp	r3, #8
 8008564:	d003      	beq.n	800856e <HAL_RCC_GetSysClockFreq+0x46>
 8008566:	e02b      	b.n	80085c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008568:	4b1c      	ldr	r3, [pc, #112]	; (80085dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800856a:	623b      	str	r3, [r7, #32]
      break;
 800856c:	e02b      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	0c9b      	lsrs	r3, r3, #18
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	3328      	adds	r3, #40	; 0x28
 8008578:	443b      	add	r3, r7
 800857a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800857e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d012      	beq.n	80085b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800858a:	4b13      	ldr	r3, [pc, #76]	; (80085d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	0c5b      	lsrs	r3, r3, #17
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	3328      	adds	r3, #40	; 0x28
 8008596:	443b      	add	r3, r7
 8008598:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800859c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	4a0e      	ldr	r2, [pc, #56]	; (80085dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80085a2:	fb03 f202 	mul.w	r2, r3, r2
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
 80085ae:	e004      	b.n	80085ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	4a0b      	ldr	r2, [pc, #44]	; (80085e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085b4:	fb02 f303 	mul.w	r3, r2, r3
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	623b      	str	r3, [r7, #32]
      break;
 80085be:	e002      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80085c0:	4b06      	ldr	r3, [pc, #24]	; (80085dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80085c2:	623b      	str	r3, [r7, #32]
      break;
 80085c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085c6:	6a3b      	ldr	r3, [r7, #32]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3728      	adds	r7, #40	; 0x28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bc90      	pop	{r4, r7}
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	0800c5a4 	.word	0x0800c5a4
 80085d8:	40021000 	.word	0x40021000
 80085dc:	007a1200 	.word	0x007a1200
 80085e0:	003d0900 	.word	0x003d0900

080085e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085e8:	4b02      	ldr	r3, [pc, #8]	; (80085f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80085ea:	681b      	ldr	r3, [r3, #0]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr
 80085f4:	20000024 	.word	0x20000024

080085f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085fc:	f7ff fff2 	bl	80085e4 <HAL_RCC_GetHCLKFreq>
 8008600:	4602      	mov	r2, r0
 8008602:	4b05      	ldr	r3, [pc, #20]	; (8008618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	0a1b      	lsrs	r3, r3, #8
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	4903      	ldr	r1, [pc, #12]	; (800861c <HAL_RCC_GetPCLK1Freq+0x24>)
 800860e:	5ccb      	ldrb	r3, [r1, r3]
 8008610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008614:	4618      	mov	r0, r3
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40021000 	.word	0x40021000
 800861c:	0800c7d8 	.word	0x0800c7d8

08008620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008624:	f7ff ffde 	bl	80085e4 <HAL_RCC_GetHCLKFreq>
 8008628:	4602      	mov	r2, r0
 800862a:	4b05      	ldr	r3, [pc, #20]	; (8008640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	0adb      	lsrs	r3, r3, #11
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	4903      	ldr	r1, [pc, #12]	; (8008644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008636:	5ccb      	ldrb	r3, [r1, r3]
 8008638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800863c:	4618      	mov	r0, r3
 800863e:	bd80      	pop	{r7, pc}
 8008640:	40021000 	.word	0x40021000
 8008644:	0800c7d8 	.word	0x0800c7d8

08008648 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008650:	4b0a      	ldr	r3, [pc, #40]	; (800867c <RCC_Delay+0x34>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <RCC_Delay+0x38>)
 8008656:	fba2 2303 	umull	r2, r3, r2, r3
 800865a:	0a5b      	lsrs	r3, r3, #9
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	fb02 f303 	mul.w	r3, r2, r3
 8008662:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008664:	bf00      	nop
  }
  while (Delay --);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	1e5a      	subs	r2, r3, #1
 800866a:	60fa      	str	r2, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1f9      	bne.n	8008664 <RCC_Delay+0x1c>
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr
 800867c:	20000024 	.word	0x20000024
 8008680:	10624dd3 	.word	0x10624dd3

08008684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e076      	b.n	8008784 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	2b00      	cmp	r3, #0
 800869c:	d108      	bne.n	80086b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086a6:	d009      	beq.n	80086bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	61da      	str	r2, [r3, #28]
 80086ae:	e005      	b.n	80086bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7fd fb98 	bl	8005e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2202      	movs	r2, #2
 80086e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008704:	431a      	orrs	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800872c:	431a      	orrs	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008740:	ea42 0103 	orr.w	r1, r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	0c1a      	lsrs	r2, r3, #16
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f002 0204 	and.w	r2, r2, #4
 8008762:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69da      	ldr	r2, [r3, #28]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008772:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08c      	sub	sp, #48	; 0x30
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800879a:	2301      	movs	r3, #1
 800879c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d101      	bne.n	80087b2 <HAL_SPI_TransmitReceive+0x26>
 80087ae:	2302      	movs	r3, #2
 80087b0:	e18a      	b.n	8008ac8 <HAL_SPI_TransmitReceive+0x33c>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087ba:	f7fd fdb9 	bl	8006330 <HAL_GetTick>
 80087be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80087d0:	887b      	ldrh	r3, [r7, #2]
 80087d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80087d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d00f      	beq.n	80087fc <HAL_SPI_TransmitReceive+0x70>
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087e2:	d107      	bne.n	80087f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d103      	bne.n	80087f4 <HAL_SPI_TransmitReceive+0x68>
 80087ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d003      	beq.n	80087fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80087f4:	2302      	movs	r3, #2
 80087f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80087fa:	e15b      	b.n	8008ab4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d005      	beq.n	800880e <HAL_SPI_TransmitReceive+0x82>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <HAL_SPI_TransmitReceive+0x82>
 8008808:	887b      	ldrh	r3, [r7, #2]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d103      	bne.n	8008816 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008814:	e14e      	b.n	8008ab4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b04      	cmp	r3, #4
 8008820:	d003      	beq.n	800882a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2205      	movs	r2, #5
 8008826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	887a      	ldrh	r2, [r7, #2]
 800883a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	887a      	ldrh	r2, [r7, #2]
 8008840:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	887a      	ldrh	r2, [r7, #2]
 800884c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	887a      	ldrh	r2, [r7, #2]
 8008852:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800886a:	2b40      	cmp	r3, #64	; 0x40
 800886c:	d007      	beq.n	800887e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800887c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008886:	d178      	bne.n	800897a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <HAL_SPI_TransmitReceive+0x10a>
 8008890:	8b7b      	ldrh	r3, [r7, #26]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d166      	bne.n	8008964 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	881a      	ldrh	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	1c9a      	adds	r2, r3, #2
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088ba:	e053      	b.n	8008964 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d11b      	bne.n	8008902 <HAL_SPI_TransmitReceive+0x176>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d016      	beq.n	8008902 <HAL_SPI_TransmitReceive+0x176>
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d113      	bne.n	8008902 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	881a      	ldrh	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	1c9a      	adds	r2, r3, #2
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b01      	cmp	r3, #1
 800890e:	d119      	bne.n	8008944 <HAL_SPI_TransmitReceive+0x1b8>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008914:	b29b      	uxth	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d014      	beq.n	8008944 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	b292      	uxth	r2, r2
 8008926:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892c:	1c9a      	adds	r2, r3, #2
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008936:	b29b      	uxth	r3, r3
 8008938:	3b01      	subs	r3, #1
 800893a:	b29a      	uxth	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008940:	2301      	movs	r3, #1
 8008942:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008944:	f7fd fcf4 	bl	8006330 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008950:	429a      	cmp	r2, r3
 8008952:	d807      	bhi.n	8008964 <HAL_SPI_TransmitReceive+0x1d8>
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895a:	d003      	beq.n	8008964 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008962:	e0a7      	b.n	8008ab4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008968:	b29b      	uxth	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1a6      	bne.n	80088bc <HAL_SPI_TransmitReceive+0x130>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008972:	b29b      	uxth	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1a1      	bne.n	80088bc <HAL_SPI_TransmitReceive+0x130>
 8008978:	e07c      	b.n	8008a74 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <HAL_SPI_TransmitReceive+0x1fc>
 8008982:	8b7b      	ldrh	r3, [r7, #26]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d16b      	bne.n	8008a60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	330c      	adds	r3, #12
 8008992:	7812      	ldrb	r2, [r2, #0]
 8008994:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089ae:	e057      	b.n	8008a60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d11c      	bne.n	80089f8 <HAL_SPI_TransmitReceive+0x26c>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d017      	beq.n	80089f8 <HAL_SPI_TransmitReceive+0x26c>
 80089c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d114      	bne.n	80089f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	330c      	adds	r3, #12
 80089d8:	7812      	ldrb	r2, [r2, #0]
 80089da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089f4:	2300      	movs	r3, #0
 80089f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d119      	bne.n	8008a3a <HAL_SPI_TransmitReceive+0x2ae>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d014      	beq.n	8008a3a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	b2d2      	uxtb	r2, r2
 8008a1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a36:	2301      	movs	r3, #1
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a3a:	f7fd fc79 	bl	8006330 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d803      	bhi.n	8008a52 <HAL_SPI_TransmitReceive+0x2c6>
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a50:	d102      	bne.n	8008a58 <HAL_SPI_TransmitReceive+0x2cc>
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d103      	bne.n	8008a60 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a5e:	e029      	b.n	8008ab4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1a2      	bne.n	80089b0 <HAL_SPI_TransmitReceive+0x224>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d19d      	bne.n	80089b0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 f8b1 	bl	8008be0 <SPI_EndRxTxTransaction>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d006      	beq.n	8008a92 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008a90:	e010      	b.n	8008ab4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	617b      	str	r3, [r7, #20]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	617b      	str	r3, [r7, #20]
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	e000      	b.n	8008ab4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008ab2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3730      	adds	r7, #48	; 0x30
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	4613      	mov	r3, r2
 8008ade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ae0:	f7fd fc26 	bl	8006330 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	4413      	add	r3, r2
 8008aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008af0:	f7fd fc1e 	bl	8006330 <HAL_GetTick>
 8008af4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008af6:	4b39      	ldr	r3, [pc, #228]	; (8008bdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	015b      	lsls	r3, r3, #5
 8008afc:	0d1b      	lsrs	r3, r3, #20
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	fb02 f303 	mul.w	r3, r2, r3
 8008b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b06:	e054      	b.n	8008bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0e:	d050      	beq.n	8008bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b10:	f7fd fc0e 	bl	8006330 <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	69fa      	ldr	r2, [r7, #28]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d902      	bls.n	8008b26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d13d      	bne.n	8008ba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b3e:	d111      	bne.n	8008b64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b48:	d004      	beq.n	8008b54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b52:	d107      	bne.n	8008b64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b6c:	d10f      	bne.n	8008b8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e017      	b.n	8008bd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	bf0c      	ite	eq
 8008bc2:	2301      	moveq	r3, #1
 8008bc4:	2300      	movne	r3, #0
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	461a      	mov	r2, r3
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d19b      	bne.n	8008b08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3720      	adds	r7, #32
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000024 	.word	0x20000024

08008be0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2180      	movs	r1, #128	; 0x80
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7ff ff6a 	bl	8008ad0 <SPI_WaitFlagStateUntilTimeout>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d007      	beq.n	8008c12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c06:	f043 0220 	orr.w	r2, r3, #32
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e000      	b.n	8008c14 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e041      	b.n	8008cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d106      	bne.n	8008c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7fd f94c 	bl	8005ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3304      	adds	r3, #4
 8008c58:	4619      	mov	r1, r3
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	f000 fc20 	bl	80094a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d001      	beq.n	8008cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e03a      	b.n	8008d4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0201 	orr.w	r2, r2, #1
 8008cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a18      	ldr	r2, [pc, #96]	; (8008d54 <HAL_TIM_Base_Start_IT+0x98>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00e      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x58>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfe:	d009      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x58>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <HAL_TIM_Base_Start_IT+0x9c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d004      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x58>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a13      	ldr	r2, [pc, #76]	; (8008d5c <HAL_TIM_Base_Start_IT+0xa0>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d111      	bne.n	8008d38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b06      	cmp	r3, #6
 8008d24:	d010      	beq.n	8008d48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f042 0201 	orr.w	r2, r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d36:	e007      	b.n	8008d48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0201 	orr.w	r2, r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bc80      	pop	{r7}
 8008d52:	4770      	bx	lr
 8008d54:	40012c00 	.word	0x40012c00
 8008d58:	40000400 	.word	0x40000400
 8008d5c:	40000800 	.word	0x40000800

08008d60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e041      	b.n	8008df6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d106      	bne.n	8008d8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7fd f88c 	bl	8005ea4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4610      	mov	r0, r2
 8008da0:	f000 fb7e 	bl	80094a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d109      	bne.n	8008e24 <HAL_TIM_PWM_Start+0x24>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	bf14      	ite	ne
 8008e1c:	2301      	movne	r3, #1
 8008e1e:	2300      	moveq	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	e022      	b.n	8008e6a <HAL_TIM_PWM_Start+0x6a>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b04      	cmp	r3, #4
 8008e28:	d109      	bne.n	8008e3e <HAL_TIM_PWM_Start+0x3e>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	bf14      	ite	ne
 8008e36:	2301      	movne	r3, #1
 8008e38:	2300      	moveq	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	e015      	b.n	8008e6a <HAL_TIM_PWM_Start+0x6a>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d109      	bne.n	8008e58 <HAL_TIM_PWM_Start+0x58>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	bf14      	ite	ne
 8008e50:	2301      	movne	r3, #1
 8008e52:	2300      	moveq	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	e008      	b.n	8008e6a <HAL_TIM_PWM_Start+0x6a>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	bf14      	ite	ne
 8008e64:	2301      	movne	r3, #1
 8008e66:	2300      	moveq	r3, #0
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e05e      	b.n	8008f30 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <HAL_TIM_PWM_Start+0x82>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e80:	e013      	b.n	8008eaa <HAL_TIM_PWM_Start+0xaa>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d104      	bne.n	8008e92 <HAL_TIM_PWM_Start+0x92>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e90:	e00b      	b.n	8008eaa <HAL_TIM_PWM_Start+0xaa>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d104      	bne.n	8008ea2 <HAL_TIM_PWM_Start+0xa2>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ea0:	e003      	b.n	8008eaa <HAL_TIM_PWM_Start+0xaa>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 fd74 	bl	80099a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a1e      	ldr	r2, [pc, #120]	; (8008f38 <HAL_TIM_PWM_Start+0x138>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d107      	bne.n	8008ed2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a18      	ldr	r2, [pc, #96]	; (8008f38 <HAL_TIM_PWM_Start+0x138>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00e      	beq.n	8008efa <HAL_TIM_PWM_Start+0xfa>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee4:	d009      	beq.n	8008efa <HAL_TIM_PWM_Start+0xfa>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a14      	ldr	r2, [pc, #80]	; (8008f3c <HAL_TIM_PWM_Start+0x13c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d004      	beq.n	8008efa <HAL_TIM_PWM_Start+0xfa>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a12      	ldr	r2, [pc, #72]	; (8008f40 <HAL_TIM_PWM_Start+0x140>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d111      	bne.n	8008f1e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f003 0307 	and.w	r3, r3, #7
 8008f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b06      	cmp	r3, #6
 8008f0a:	d010      	beq.n	8008f2e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f042 0201 	orr.w	r2, r2, #1
 8008f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f1c:	e007      	b.n	8008f2e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 0201 	orr.w	r2, r2, #1
 8008f2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	40012c00 	.word	0x40012c00
 8008f3c:	40000400 	.word	0x40000400
 8008f40:	40000800 	.word	0x40000800

08008f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d122      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d11b      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f06f 0202 	mvn.w	r2, #2
 8008f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fa6f 	bl	800946a <HAL_TIM_IC_CaptureCallback>
 8008f8c:	e005      	b.n	8008f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fa62 	bl	8009458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fa71 	bl	800947c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	f003 0304 	and.w	r3, r3, #4
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d122      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d11b      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f06f 0204 	mvn.w	r2, #4
 8008fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2202      	movs	r2, #2
 8008fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fa45 	bl	800946a <HAL_TIM_IC_CaptureCallback>
 8008fe0:	e005      	b.n	8008fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa38 	bl	8009458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fa47 	bl	800947c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b08      	cmp	r3, #8
 8009000:	d122      	bne.n	8009048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b08      	cmp	r3, #8
 800900e:	d11b      	bne.n	8009048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f06f 0208 	mvn.w	r2, #8
 8009018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2204      	movs	r2, #4
 800901e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	f003 0303 	and.w	r3, r3, #3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fa1b 	bl	800946a <HAL_TIM_IC_CaptureCallback>
 8009034:	e005      	b.n	8009042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa0e 	bl	8009458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fa1d 	bl	800947c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	f003 0310 	and.w	r3, r3, #16
 8009052:	2b10      	cmp	r3, #16
 8009054:	d122      	bne.n	800909c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f003 0310 	and.w	r3, r3, #16
 8009060:	2b10      	cmp	r3, #16
 8009062:	d11b      	bne.n	800909c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f06f 0210 	mvn.w	r2, #16
 800906c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2208      	movs	r2, #8
 8009072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f9f1 	bl	800946a <HAL_TIM_IC_CaptureCallback>
 8009088:	e005      	b.n	8009096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f9e4 	bl	8009458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f9f3 	bl	800947c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d10e      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d107      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0201 	mvn.w	r2, #1
 80090c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7f8 fbc6 	bl	8001854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d2:	2b80      	cmp	r3, #128	; 0x80
 80090d4:	d10e      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e0:	2b80      	cmp	r3, #128	; 0x80
 80090e2:	d107      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fce1 	bl	8009ab6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fe:	2b40      	cmp	r3, #64	; 0x40
 8009100:	d10e      	bne.n	8009120 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910c:	2b40      	cmp	r3, #64	; 0x40
 800910e:	d107      	bne.n	8009120 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9b7 	bl	800948e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b20      	cmp	r3, #32
 800912c:	d10e      	bne.n	800914c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b20      	cmp	r3, #32
 800913a:	d107      	bne.n	800914c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0220 	mvn.w	r2, #32
 8009144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fcac 	bl	8009aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009166:	2b01      	cmp	r3, #1
 8009168:	d101      	bne.n	800916e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800916a:	2302      	movs	r3, #2
 800916c:	e0ac      	b.n	80092c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b0c      	cmp	r3, #12
 800917a:	f200 809f 	bhi.w	80092bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800917e:	a201      	add	r2, pc, #4	; (adr r2, 8009184 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009184:	080091b9 	.word	0x080091b9
 8009188:	080092bd 	.word	0x080092bd
 800918c:	080092bd 	.word	0x080092bd
 8009190:	080092bd 	.word	0x080092bd
 8009194:	080091f9 	.word	0x080091f9
 8009198:	080092bd 	.word	0x080092bd
 800919c:	080092bd 	.word	0x080092bd
 80091a0:	080092bd 	.word	0x080092bd
 80091a4:	0800923b 	.word	0x0800923b
 80091a8:	080092bd 	.word	0x080092bd
 80091ac:	080092bd 	.word	0x080092bd
 80091b0:	080092bd 	.word	0x080092bd
 80091b4:	0800927b 	.word	0x0800927b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f9d0 	bl	8009564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	699a      	ldr	r2, [r3, #24]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0208 	orr.w	r2, r2, #8
 80091d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 0204 	bic.w	r2, r2, #4
 80091e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6999      	ldr	r1, [r3, #24]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	691a      	ldr	r2, [r3, #16]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	619a      	str	r2, [r3, #24]
      break;
 80091f6:	e062      	b.n	80092be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 fa16 	bl	8009630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	699a      	ldr	r2, [r3, #24]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6999      	ldr	r1, [r3, #24]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	021a      	lsls	r2, r3, #8
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	430a      	orrs	r2, r1
 8009236:	619a      	str	r2, [r3, #24]
      break;
 8009238:	e041      	b.n	80092be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fa5f 	bl	8009704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	69da      	ldr	r2, [r3, #28]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0208 	orr.w	r2, r2, #8
 8009254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69da      	ldr	r2, [r3, #28]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 0204 	bic.w	r2, r2, #4
 8009264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69d9      	ldr	r1, [r3, #28]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	691a      	ldr	r2, [r3, #16]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	61da      	str	r2, [r3, #28]
      break;
 8009278:	e021      	b.n	80092be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68b9      	ldr	r1, [r7, #8]
 8009280:	4618      	mov	r0, r3
 8009282:	f000 faa9 	bl	80097d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69da      	ldr	r2, [r3, #28]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69da      	ldr	r2, [r3, #28]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69d9      	ldr	r1, [r3, #28]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	021a      	lsls	r2, r3, #8
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	61da      	str	r2, [r3, #28]
      break;
 80092ba:	e000      	b.n	80092be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80092bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d101      	bne.n	80092e8 <HAL_TIM_ConfigClockSource+0x18>
 80092e4:	2302      	movs	r3, #2
 80092e6:	e0b3      	b.n	8009450 <HAL_TIM_ConfigClockSource+0x180>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009306:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800930e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009320:	d03e      	beq.n	80093a0 <HAL_TIM_ConfigClockSource+0xd0>
 8009322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009326:	f200 8087 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x168>
 800932a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932e:	f000 8085 	beq.w	800943c <HAL_TIM_ConfigClockSource+0x16c>
 8009332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009336:	d87f      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x168>
 8009338:	2b70      	cmp	r3, #112	; 0x70
 800933a:	d01a      	beq.n	8009372 <HAL_TIM_ConfigClockSource+0xa2>
 800933c:	2b70      	cmp	r3, #112	; 0x70
 800933e:	d87b      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x168>
 8009340:	2b60      	cmp	r3, #96	; 0x60
 8009342:	d050      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x116>
 8009344:	2b60      	cmp	r3, #96	; 0x60
 8009346:	d877      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x168>
 8009348:	2b50      	cmp	r3, #80	; 0x50
 800934a:	d03c      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0xf6>
 800934c:	2b50      	cmp	r3, #80	; 0x50
 800934e:	d873      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x168>
 8009350:	2b40      	cmp	r3, #64	; 0x40
 8009352:	d058      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x136>
 8009354:	2b40      	cmp	r3, #64	; 0x40
 8009356:	d86f      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x168>
 8009358:	2b30      	cmp	r3, #48	; 0x30
 800935a:	d064      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x156>
 800935c:	2b30      	cmp	r3, #48	; 0x30
 800935e:	d86b      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x168>
 8009360:	2b20      	cmp	r3, #32
 8009362:	d060      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x156>
 8009364:	2b20      	cmp	r3, #32
 8009366:	d867      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x168>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d05c      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x156>
 800936c:	2b10      	cmp	r3, #16
 800936e:	d05a      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009370:	e062      	b.n	8009438 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6818      	ldr	r0, [r3, #0]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	6899      	ldr	r1, [r3, #8]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f000 faee 	bl	8009962 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009394:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	609a      	str	r2, [r3, #8]
      break;
 800939e:	e04e      	b.n	800943e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	6899      	ldr	r1, [r3, #8]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	f000 fad7 	bl	8009962 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093c2:	609a      	str	r2, [r3, #8]
      break;
 80093c4:	e03b      	b.n	800943e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	6859      	ldr	r1, [r3, #4]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	461a      	mov	r2, r3
 80093d4:	f000 fa4e 	bl	8009874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2150      	movs	r1, #80	; 0x50
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 faa5 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 80093e4:	e02b      	b.n	800943e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	6859      	ldr	r1, [r3, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f000 fa6c 	bl	80098d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2160      	movs	r1, #96	; 0x60
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fa95 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 8009404:	e01b      	b.n	800943e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6818      	ldr	r0, [r3, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	6859      	ldr	r1, [r3, #4]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	461a      	mov	r2, r3
 8009414:	f000 fa2e 	bl	8009874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2140      	movs	r1, #64	; 0x40
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fa85 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 8009424:	e00b      	b.n	800943e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f000 fa7c 	bl	800992e <TIM_ITRx_SetConfig>
        break;
 8009436:	e002      	b.n	800943e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009438:	bf00      	nop
 800943a:	e000      	b.n	800943e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800943c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	bc80      	pop	{r7}
 8009468:	4770      	bx	lr

0800946a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800946a:	b480      	push	{r7}
 800946c:	b083      	sub	sp, #12
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009472:	bf00      	nop
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	bc80      	pop	{r7}
 800947a:	4770      	bx	lr

0800947c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	bc80      	pop	{r7}
 800948c:	4770      	bx	lr

0800948e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009496:	bf00      	nop
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	bc80      	pop	{r7}
 800949e:	4770      	bx	lr

080094a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a29      	ldr	r2, [pc, #164]	; (8009558 <TIM_Base_SetConfig+0xb8>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d00b      	beq.n	80094d0 <TIM_Base_SetConfig+0x30>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094be:	d007      	beq.n	80094d0 <TIM_Base_SetConfig+0x30>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a26      	ldr	r2, [pc, #152]	; (800955c <TIM_Base_SetConfig+0xbc>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d003      	beq.n	80094d0 <TIM_Base_SetConfig+0x30>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a25      	ldr	r2, [pc, #148]	; (8009560 <TIM_Base_SetConfig+0xc0>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d108      	bne.n	80094e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a1c      	ldr	r2, [pc, #112]	; (8009558 <TIM_Base_SetConfig+0xb8>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d00b      	beq.n	8009502 <TIM_Base_SetConfig+0x62>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094f0:	d007      	beq.n	8009502 <TIM_Base_SetConfig+0x62>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a19      	ldr	r2, [pc, #100]	; (800955c <TIM_Base_SetConfig+0xbc>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d003      	beq.n	8009502 <TIM_Base_SetConfig+0x62>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a18      	ldr	r2, [pc, #96]	; (8009560 <TIM_Base_SetConfig+0xc0>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d108      	bne.n	8009514 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	4313      	orrs	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	4313      	orrs	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a07      	ldr	r2, [pc, #28]	; (8009558 <TIM_Base_SetConfig+0xb8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d103      	bne.n	8009548 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	615a      	str	r2, [r3, #20]
}
 800954e:	bf00      	nop
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	bc80      	pop	{r7}
 8009556:	4770      	bx	lr
 8009558:	40012c00 	.word	0x40012c00
 800955c:	40000400 	.word	0x40000400
 8009560:	40000800 	.word	0x40000800

08009564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	f023 0201 	bic.w	r2, r3, #1
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 0303 	bic.w	r3, r3, #3
 800959a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f023 0302 	bic.w	r3, r3, #2
 80095ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a1c      	ldr	r2, [pc, #112]	; (800962c <TIM_OC1_SetConfig+0xc8>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d10c      	bne.n	80095da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f023 0308 	bic.w	r3, r3, #8
 80095c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f023 0304 	bic.w	r3, r3, #4
 80095d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a13      	ldr	r2, [pc, #76]	; (800962c <TIM_OC1_SetConfig+0xc8>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d111      	bne.n	8009606 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	4313      	orrs	r3, r2
 8009604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	621a      	str	r2, [r3, #32]
}
 8009620:	bf00      	nop
 8009622:	371c      	adds	r7, #28
 8009624:	46bd      	mov	sp, r7
 8009626:	bc80      	pop	{r7}
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	40012c00 	.word	0x40012c00

08009630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	f023 0210 	bic.w	r2, r3, #16
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800965e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f023 0320 	bic.w	r3, r3, #32
 800967a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	011b      	lsls	r3, r3, #4
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	4313      	orrs	r3, r2
 8009686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a1d      	ldr	r2, [pc, #116]	; (8009700 <TIM_OC2_SetConfig+0xd0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d10d      	bne.n	80096ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	011b      	lsls	r3, r3, #4
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a14      	ldr	r2, [pc, #80]	; (8009700 <TIM_OC2_SetConfig+0xd0>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d113      	bne.n	80096dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	621a      	str	r2, [r3, #32]
}
 80096f6:	bf00      	nop
 80096f8:	371c      	adds	r7, #28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr
 8009700:	40012c00 	.word	0x40012c00

08009704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0303 	bic.w	r3, r3, #3
 800973a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800974c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	021b      	lsls	r3, r3, #8
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	4313      	orrs	r3, r2
 8009758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a1d      	ldr	r2, [pc, #116]	; (80097d4 <TIM_OC3_SetConfig+0xd0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d10d      	bne.n	800977e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	4313      	orrs	r3, r2
 8009774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800977c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a14      	ldr	r2, [pc, #80]	; (80097d4 <TIM_OC3_SetConfig+0xd0>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d113      	bne.n	80097ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800978c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	4313      	orrs	r3, r2
 80097a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	621a      	str	r2, [r3, #32]
}
 80097c8:	bf00      	nop
 80097ca:	371c      	adds	r7, #28
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bc80      	pop	{r7}
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	40012c00 	.word	0x40012c00

080097d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097d8:	b480      	push	{r7}
 80097da:	b087      	sub	sp, #28
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800980e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	4313      	orrs	r3, r2
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	031b      	lsls	r3, r3, #12
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	4313      	orrs	r3, r2
 800982e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a0f      	ldr	r2, [pc, #60]	; (8009870 <TIM_OC4_SetConfig+0x98>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d109      	bne.n	800984c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800983e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	019b      	lsls	r3, r3, #6
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	4313      	orrs	r3, r2
 800984a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	621a      	str	r2, [r3, #32]
}
 8009866:	bf00      	nop
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	bc80      	pop	{r7}
 800986e:	4770      	bx	lr
 8009870:	40012c00 	.word	0x40012c00

08009874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6a1b      	ldr	r3, [r3, #32]
 8009884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	f023 0201 	bic.w	r2, r3, #1
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800989e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	011b      	lsls	r3, r3, #4
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f023 030a 	bic.w	r3, r3, #10
 80098b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	621a      	str	r2, [r3, #32]
}
 80098c6:	bf00      	nop
 80098c8:	371c      	adds	r7, #28
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bc80      	pop	{r7}
 80098ce:	4770      	bx	lr

080098d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	f023 0210 	bic.w	r2, r3, #16
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	031b      	lsls	r3, r3, #12
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	4313      	orrs	r3, r2
 8009904:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800990c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	4313      	orrs	r3, r2
 8009916:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	621a      	str	r2, [r3, #32]
}
 8009924:	bf00      	nop
 8009926:	371c      	adds	r7, #28
 8009928:	46bd      	mov	sp, r7
 800992a:	bc80      	pop	{r7}
 800992c:	4770      	bx	lr

0800992e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4313      	orrs	r3, r2
 800994c:	f043 0307 	orr.w	r3, r3, #7
 8009950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	609a      	str	r2, [r3, #8]
}
 8009958:	bf00      	nop
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	bc80      	pop	{r7}
 8009960:	4770      	bx	lr

08009962 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009962:	b480      	push	{r7}
 8009964:	b087      	sub	sp, #28
 8009966:	af00      	add	r7, sp, #0
 8009968:	60f8      	str	r0, [r7, #12]
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
 800996e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800997c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	021a      	lsls	r2, r3, #8
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	431a      	orrs	r2, r3
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	4313      	orrs	r3, r2
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	4313      	orrs	r3, r2
 800998e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	609a      	str	r2, [r3, #8]
}
 8009996:	bf00      	nop
 8009998:	371c      	adds	r7, #28
 800999a:	46bd      	mov	sp, r7
 800999c:	bc80      	pop	{r7}
 800999e:	4770      	bx	lr

080099a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f003 031f 	and.w	r3, r3, #31
 80099b2:	2201      	movs	r2, #1
 80099b4:	fa02 f303 	lsl.w	r3, r2, r3
 80099b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6a1a      	ldr	r2, [r3, #32]
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	43db      	mvns	r3, r3
 80099c2:	401a      	ands	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6a1a      	ldr	r2, [r3, #32]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f003 031f 	and.w	r3, r3, #31
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	fa01 f303 	lsl.w	r3, r1, r3
 80099d8:	431a      	orrs	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	621a      	str	r2, [r3, #32]
}
 80099de:	bf00      	nop
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bc80      	pop	{r7}
 80099e6:	4770      	bx	lr

080099e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d101      	bne.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099fc:	2302      	movs	r3, #2
 80099fe:	e046      	b.n	8009a8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a16      	ldr	r2, [pc, #88]	; (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d00e      	beq.n	8009a62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a4c:	d009      	beq.n	8009a62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a12      	ldr	r2, [pc, #72]	; (8009a9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d004      	beq.n	8009a62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a10      	ldr	r2, [pc, #64]	; (8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d10c      	bne.n	8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bc80      	pop	{r7}
 8009a96:	4770      	bx	lr
 8009a98:	40012c00 	.word	0x40012c00
 8009a9c:	40000400 	.word	0x40000400
 8009aa0:	40000800 	.word	0x40000800

08009aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bc80      	pop	{r7}
 8009ab4:	4770      	bx	lr

08009ab6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009abe:	bf00      	nop
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bc80      	pop	{r7}
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e03f      	b.n	8009b5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7fc fa68 	bl	8005fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2224      	movs	r2, #36	; 0x24
 8009af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68da      	ldr	r2, [r3, #12]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fd9b 	bl	800a648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691a      	ldr	r2, [r3, #16]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	695a      	ldr	r2, [r3, #20]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2220      	movs	r2, #32
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2220      	movs	r2, #32
 8009b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b08a      	sub	sp, #40	; 0x28
 8009b66:	af02      	add	r7, sp, #8
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	603b      	str	r3, [r7, #0]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	d17c      	bne.n	8009c7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d002      	beq.n	8009b8e <HAL_UART_Transmit+0x2c>
 8009b88:	88fb      	ldrh	r3, [r7, #6]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e075      	b.n	8009c7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d101      	bne.n	8009ba0 <HAL_UART_Transmit+0x3e>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	e06e      	b.n	8009c7e <HAL_UART_Transmit+0x11c>
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2221      	movs	r2, #33	; 0x21
 8009bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bb6:	f7fc fbbb 	bl	8006330 <HAL_GetTick>
 8009bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	88fa      	ldrh	r2, [r7, #6]
 8009bc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	88fa      	ldrh	r2, [r7, #6]
 8009bc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bd0:	d108      	bne.n	8009be4 <HAL_UART_Transmit+0x82>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d104      	bne.n	8009be4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	61bb      	str	r3, [r7, #24]
 8009be2:	e003      	b.n	8009bec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009be8:	2300      	movs	r3, #0
 8009bea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009bf4:	e02a      	b.n	8009c4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2180      	movs	r1, #128	; 0x80
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 fb0d 	bl	800a220 <UART_WaitOnFlagUntilTimeout>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e036      	b.n	8009c7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10b      	bne.n	8009c2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	3302      	adds	r3, #2
 8009c2a:	61bb      	str	r3, [r7, #24]
 8009c2c:	e007      	b.n	8009c3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	3b01      	subs	r3, #1
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1cf      	bne.n	8009bf6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2140      	movs	r1, #64	; 0x40
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 fadd 	bl	800a220 <UART_WaitOnFlagUntilTimeout>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e006      	b.n	8009c7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	e000      	b.n	8009c7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009c7c:	2302      	movs	r3, #2
  }
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3720      	adds	r7, #32
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b086      	sub	sp, #24
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	60b9      	str	r1, [r7, #8]
 8009c90:	4613      	mov	r3, r2
 8009c92:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b20      	cmp	r3, #32
 8009c9e:	d13c      	bne.n	8009d1a <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e035      	b.n	8009d1c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d101      	bne.n	8009cbe <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e02e      	b.n	8009d1c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009ccc:	88fb      	ldrh	r3, [r7, #6]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	68b9      	ldr	r1, [r7, #8]
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 faee 	bl	800a2b4 <UART_Start_Receive_DMA>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d119      	bne.n	8009d16 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d113      	bne.n	8009d12 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cea:	2300      	movs	r3, #0
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	613b      	str	r3, [r7, #16]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	613b      	str	r3, [r7, #16]
 8009cfe:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0210 	orr.w	r2, r2, #16
 8009d0e:	60da      	str	r2, [r3, #12]
 8009d10:	e001      	b.n	8009d16 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
 8009d18:	e000      	b.n	8009d1c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8009d1a:	2302      	movs	r3, #2
  }
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08a      	sub	sp, #40	; 0x28
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	f003 030f 	and.w	r3, r3, #15
 8009d52:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10d      	bne.n	8009d76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d008      	beq.n	8009d76 <HAL_UART_IRQHandler+0x52>
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	f003 0320 	and.w	r3, r3, #32
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fbc0 	bl	800a4f4 <UART_Receive_IT>
      return;
 8009d74:	e17b      	b.n	800a06e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 80b1 	beq.w	8009ee0 <HAL_UART_IRQHandler+0x1bc>
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d105      	bne.n	8009d94 <HAL_UART_IRQHandler+0x70>
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 80a6 	beq.w	8009ee0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <HAL_UART_IRQHandler+0x90>
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d005      	beq.n	8009db4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dac:	f043 0201 	orr.w	r2, r3, #1
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <HAL_UART_IRQHandler+0xb0>
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d005      	beq.n	8009dd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dcc:	f043 0202 	orr.w	r2, r3, #2
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	f003 0302 	and.w	r3, r3, #2
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <HAL_UART_IRQHandler+0xd0>
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d005      	beq.n	8009df4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dec:	f043 0204 	orr.w	r2, r3, #4
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	f003 0308 	and.w	r3, r3, #8
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00f      	beq.n	8009e1e <HAL_UART_IRQHandler+0xfa>
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	f003 0320 	and.w	r3, r3, #32
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d104      	bne.n	8009e12 <HAL_UART_IRQHandler+0xee>
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d005      	beq.n	8009e1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e16:	f043 0208 	orr.w	r2, r3, #8
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 811e 	beq.w	800a064 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	f003 0320 	and.w	r3, r3, #32
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d007      	beq.n	8009e42 <HAL_UART_IRQHandler+0x11e>
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fb59 	bl	800a4f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	bf14      	ite	ne
 8009e50:	2301      	movne	r3, #1
 8009e52:	2300      	moveq	r3, #0
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d102      	bne.n	8009e6a <HAL_UART_IRQHandler+0x146>
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d031      	beq.n	8009ece <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa9b 	bl	800a3a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d023      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	695a      	ldr	r2, [r3, #20]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e8c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d013      	beq.n	8009ebe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9a:	4a76      	ldr	r2, [pc, #472]	; (800a074 <HAL_UART_IRQHandler+0x350>)
 8009e9c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fc fc74 	bl	8006790 <HAL_DMA_Abort_IT>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d016      	beq.n	8009edc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ebc:	e00e      	b.n	8009edc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f8f5 	bl	800a0ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec4:	e00a      	b.n	8009edc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f8f1 	bl	800a0ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ecc:	e006      	b.n	8009edc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f8ed 	bl	800a0ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009eda:	e0c3      	b.n	800a064 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009edc:	bf00      	nop
    return;
 8009ede:	e0c1      	b.n	800a064 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	f040 80a1 	bne.w	800a02c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	f003 0310 	and.w	r3, r3, #16
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 809b 	beq.w	800a02c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	f003 0310 	and.w	r3, r3, #16
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 8095 	beq.w	800a02c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	60fb      	str	r3, [r7, #12]
 8009f16:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d04e      	beq.n	8009fc4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009f30:	8a3b      	ldrh	r3, [r7, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 8098 	beq.w	800a068 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f3c:	8a3a      	ldrh	r2, [r7, #16]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	f080 8092 	bcs.w	800a068 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	8a3a      	ldrh	r2, [r7, #16]
 8009f48:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	2b20      	cmp	r3, #32
 8009f52:	d02b      	beq.n	8009fac <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68da      	ldr	r2, [r3, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f62:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	695a      	ldr	r2, [r3, #20]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0201 	bic.w	r2, r2, #1
 8009f72:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	695a      	ldr	r2, [r3, #20]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f82:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2220      	movs	r2, #32
 8009f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68da      	ldr	r2, [r3, #12]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f022 0210 	bic.w	r2, r2, #16
 8009fa0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fc fbb7 	bl	800671a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7f7 fcf9 	bl	80019b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009fc2:	e051      	b.n	800a068 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d047      	beq.n	800a06c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009fdc:	8a7b      	ldrh	r3, [r7, #18]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d044      	beq.n	800a06c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ff0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	695a      	ldr	r2, [r3, #20]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f022 0201 	bic.w	r2, r2, #1
 800a000:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2220      	movs	r2, #32
 800a006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68da      	ldr	r2, [r3, #12]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 0210 	bic.w	r2, r2, #16
 800a01e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a020:	8a7b      	ldrh	r3, [r7, #18]
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7f7 fcc5 	bl	80019b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a02a:	e01f      	b.n	800a06c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a032:	2b00      	cmp	r3, #0
 800a034:	d008      	beq.n	800a048 <HAL_UART_IRQHandler+0x324>
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d003      	beq.n	800a048 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f9f0 	bl	800a426 <UART_Transmit_IT>
    return;
 800a046:	e012      	b.n	800a06e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00d      	beq.n	800a06e <HAL_UART_IRQHandler+0x34a>
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d008      	beq.n	800a06e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fa31 	bl	800a4c4 <UART_EndTransmit_IT>
    return;
 800a062:	e004      	b.n	800a06e <HAL_UART_IRQHandler+0x34a>
    return;
 800a064:	bf00      	nop
 800a066:	e002      	b.n	800a06e <HAL_UART_IRQHandler+0x34a>
      return;
 800a068:	bf00      	nop
 800a06a:	e000      	b.n	800a06e <HAL_UART_IRQHandler+0x34a>
      return;
 800a06c:	bf00      	nop
  }
}
 800a06e:	3728      	adds	r7, #40	; 0x28
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	0800a3ff 	.word	0x0800a3ff

0800a078 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	bc80      	pop	{r7}
 800a088:	4770      	bx	lr

0800a08a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a092:	bf00      	nop
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	bc80      	pop	{r7}
 800a09a:	4770      	bx	lr

0800a09c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bc80      	pop	{r7}
 800a0ac:	4770      	bx	lr

0800a0ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bc80      	pop	{r7}
 800a0be:	4770      	bx	lr

0800a0c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0320 	and.w	r3, r3, #32
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d12a      	bne.n	800a132 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68da      	ldr	r2, [r3, #12]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a0f0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	695a      	ldr	r2, [r3, #20]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0201 	bic.w	r2, r2, #1
 800a100:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	695a      	ldr	r2, [r3, #20]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a110:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2220      	movs	r2, #32
 800a116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d107      	bne.n	800a132 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68da      	ldr	r2, [r3, #12]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 0210 	bic.w	r2, r2, #16
 800a130:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a136:	2b01      	cmp	r3, #1
 800a138:	d106      	bne.n	800a148 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a13e:	4619      	mov	r1, r3
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f7f7 fc37 	bl	80019b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a146:	e002      	b.n	800a14e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f7ff ff9e 	bl	800a08a <HAL_UART_RxCpltCallback>
}
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d108      	bne.n	800a17e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a170:	085b      	lsrs	r3, r3, #1
 800a172:	b29b      	uxth	r3, r3
 800a174:	4619      	mov	r1, r3
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f7f7 fc1c 	bl	80019b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a17c:	e002      	b.n	800a184 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff ff8c 	bl	800a09c <HAL_UART_RxHalfCpltCallback>
}
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bf14      	ite	ne
 800a1ac:	2301      	movne	r3, #1
 800a1ae:	2300      	moveq	r3, #0
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b21      	cmp	r3, #33	; 0x21
 800a1be:	d108      	bne.n	800a1d2 <UART_DMAError+0x46>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a1cc:	68b8      	ldr	r0, [r7, #8]
 800a1ce:	f000 f8d5 	bl	800a37c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bf14      	ite	ne
 800a1e0:	2301      	movne	r3, #1
 800a1e2:	2300      	moveq	r3, #0
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b22      	cmp	r3, #34	; 0x22
 800a1f2:	d108      	bne.n	800a206 <UART_DMAError+0x7a>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d005      	beq.n	800a206 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a200:	68b8      	ldr	r0, [r7, #8]
 800a202:	f000 f8d0 	bl	800a3a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	f043 0210 	orr.w	r2, r3, #16
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a212:	68b8      	ldr	r0, [r7, #8]
 800a214:	f7ff ff4b 	bl	800a0ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a218:	bf00      	nop
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	4613      	mov	r3, r2
 800a22e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a230:	e02c      	b.n	800a28c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a238:	d028      	beq.n	800a28c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d007      	beq.n	800a250 <UART_WaitOnFlagUntilTimeout+0x30>
 800a240:	f7fc f876 	bl	8006330 <HAL_GetTick>
 800a244:	4602      	mov	r2, r0
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	69ba      	ldr	r2, [r7, #24]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d21d      	bcs.n	800a28c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68da      	ldr	r2, [r3, #12]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a25e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	695a      	ldr	r2, [r3, #20]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 0201 	bic.w	r2, r2, #1
 800a26e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2220      	movs	r2, #32
 800a27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a288:	2303      	movs	r3, #3
 800a28a:	e00f      	b.n	800a2ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	4013      	ands	r3, r2
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	429a      	cmp	r2, r3
 800a29a:	bf0c      	ite	eq
 800a29c:	2301      	moveq	r3, #1
 800a29e:	2300      	movne	r3, #0
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d0c3      	beq.n	800a232 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	88fa      	ldrh	r2, [r7, #6]
 800a2cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2222      	movs	r2, #34	; 0x22
 800a2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e0:	4a23      	ldr	r2, [pc, #140]	; (800a370 <UART_Start_Receive_DMA+0xbc>)
 800a2e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	4a22      	ldr	r2, [pc, #136]	; (800a374 <UART_Start_Receive_DMA+0xc0>)
 800a2ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f0:	4a21      	ldr	r2, [pc, #132]	; (800a378 <UART_Start_Receive_DMA+0xc4>)
 800a2f2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a2fc:	f107 0308 	add.w	r3, r7, #8
 800a300:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3304      	adds	r3, #4
 800a30c:	4619      	mov	r1, r3
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	88fb      	ldrh	r3, [r7, #6]
 800a314:	f7fc f9a2 	bl	800665c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a318:	2300      	movs	r3, #0
 800a31a:	613b      	str	r3, [r7, #16]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	613b      	str	r3, [r7, #16]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68da      	ldr	r2, [r3, #12]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a344:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	695a      	ldr	r2, [r3, #20]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f042 0201 	orr.w	r2, r2, #1
 800a354:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	695a      	ldr	r2, [r3, #20]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a364:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	0800a0c1 	.word	0x0800a0c1
 800a374:	0800a157 	.word	0x0800a157
 800a378:	0800a18d 	.word	0x0800a18d

0800a37c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a392:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2220      	movs	r2, #32
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bc80      	pop	{r7}
 800a3a4:	4770      	bx	lr

0800a3a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68da      	ldr	r2, [r3, #12]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a3bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	695a      	ldr	r2, [r3, #20]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f022 0201 	bic.w	r2, r2, #1
 800a3cc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d107      	bne.n	800a3e6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68da      	ldr	r2, [r3, #12]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f022 0210 	bic.w	r2, r2, #16
 800a3e4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bc80      	pop	{r7}
 800a3fc:	4770      	bx	lr

0800a3fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7ff fe48 	bl	800a0ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a41e:	bf00      	nop
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a426:	b480      	push	{r7}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b21      	cmp	r3, #33	; 0x21
 800a438:	d13e      	bne.n	800a4b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a442:	d114      	bne.n	800a46e <UART_Transmit_IT+0x48>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d110      	bne.n	800a46e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a1b      	ldr	r3, [r3, #32]
 800a450:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a460:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	1c9a      	adds	r2, r3, #2
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	621a      	str	r2, [r3, #32]
 800a46c:	e008      	b.n	800a480 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	1c59      	adds	r1, r3, #1
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	6211      	str	r1, [r2, #32]
 800a478:	781a      	ldrb	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a484:	b29b      	uxth	r3, r3
 800a486:	3b01      	subs	r3, #1
 800a488:	b29b      	uxth	r3, r3
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	4619      	mov	r1, r3
 800a48e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10f      	bne.n	800a4b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68da      	ldr	r2, [r3, #12]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e000      	b.n	800a4ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a4b8:	2302      	movs	r3, #2
  }
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bc80      	pop	{r7}
 800a4c2:	4770      	bx	lr

0800a4c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68da      	ldr	r2, [r3, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff fdc7 	bl	800a078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b22      	cmp	r3, #34	; 0x22
 800a506:	f040 8099 	bne.w	800a63c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a512:	d117      	bne.n	800a544 <UART_Receive_IT+0x50>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d113      	bne.n	800a544 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a51c:	2300      	movs	r3, #0
 800a51e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a524:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a532:	b29a      	uxth	r2, r3
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53c:	1c9a      	adds	r2, r3, #2
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	629a      	str	r2, [r3, #40]	; 0x28
 800a542:	e026      	b.n	800a592 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a548:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a556:	d007      	beq.n	800a568 <UART_Receive_IT+0x74>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <UART_Receive_IT+0x82>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d106      	bne.n	800a576 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	701a      	strb	r2, [r3, #0]
 800a574:	e008      	b.n	800a588 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a582:	b2da      	uxtb	r2, r3
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58c:	1c5a      	adds	r2, r3, #1
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a596:	b29b      	uxth	r3, r3
 800a598:	3b01      	subs	r3, #1
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d148      	bne.n	800a638 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68da      	ldr	r2, [r3, #12]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0220 	bic.w	r2, r2, #32
 800a5b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68da      	ldr	r2, [r3, #12]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	695a      	ldr	r2, [r3, #20]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 0201 	bic.w	r2, r2, #1
 800a5d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d123      	bne.n	800a62e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0210 	bic.w	r2, r2, #16
 800a5fa:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 0310 	and.w	r3, r3, #16
 800a606:	2b10      	cmp	r3, #16
 800a608:	d10a      	bne.n	800a620 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7f7 f9c4 	bl	80019b4 <HAL_UARTEx_RxEventCallback>
 800a62c:	e002      	b.n	800a634 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7ff fd2b 	bl	800a08a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	e002      	b.n	800a63e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	e000      	b.n	800a63e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a63c:	2302      	movs	r3, #2
  }
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
	...

0800a648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689a      	ldr	r2, [r3, #8]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	431a      	orrs	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	695b      	ldr	r3, [r3, #20]
 800a674:	4313      	orrs	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a682:	f023 030c 	bic.w	r3, r3, #12
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	6812      	ldr	r2, [r2, #0]
 800a68a:	68b9      	ldr	r1, [r7, #8]
 800a68c:	430b      	orrs	r3, r1
 800a68e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	695b      	ldr	r3, [r3, #20]
 800a696:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	699a      	ldr	r2, [r3, #24]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a2c      	ldr	r2, [pc, #176]	; (800a75c <UART_SetConfig+0x114>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d103      	bne.n	800a6b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a6b0:	f7fd ffb6 	bl	8008620 <HAL_RCC_GetPCLK2Freq>
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	e002      	b.n	800a6be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a6b8:	f7fd ff9e 	bl	80085f8 <HAL_RCC_GetPCLK1Freq>
 800a6bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009a      	lsls	r2, r3, #2
 800a6c8:	441a      	add	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d4:	4a22      	ldr	r2, [pc, #136]	; (800a760 <UART_SetConfig+0x118>)
 800a6d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6da:	095b      	lsrs	r3, r3, #5
 800a6dc:	0119      	lsls	r1, r3, #4
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	009a      	lsls	r2, r3, #2
 800a6e8:	441a      	add	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6f4:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <UART_SetConfig+0x118>)
 800a6f6:	fba3 0302 	umull	r0, r3, r3, r2
 800a6fa:	095b      	lsrs	r3, r3, #5
 800a6fc:	2064      	movs	r0, #100	; 0x64
 800a6fe:	fb00 f303 	mul.w	r3, r0, r3
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	011b      	lsls	r3, r3, #4
 800a706:	3332      	adds	r3, #50	; 0x32
 800a708:	4a15      	ldr	r2, [pc, #84]	; (800a760 <UART_SetConfig+0x118>)
 800a70a:	fba2 2303 	umull	r2, r3, r2, r3
 800a70e:	095b      	lsrs	r3, r3, #5
 800a710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a714:	4419      	add	r1, r3
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	4613      	mov	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	009a      	lsls	r2, r3, #2
 800a720:	441a      	add	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	fbb2 f2f3 	udiv	r2, r2, r3
 800a72c:	4b0c      	ldr	r3, [pc, #48]	; (800a760 <UART_SetConfig+0x118>)
 800a72e:	fba3 0302 	umull	r0, r3, r3, r2
 800a732:	095b      	lsrs	r3, r3, #5
 800a734:	2064      	movs	r0, #100	; 0x64
 800a736:	fb00 f303 	mul.w	r3, r0, r3
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	011b      	lsls	r3, r3, #4
 800a73e:	3332      	adds	r3, #50	; 0x32
 800a740:	4a07      	ldr	r2, [pc, #28]	; (800a760 <UART_SetConfig+0x118>)
 800a742:	fba2 2303 	umull	r2, r3, r2, r3
 800a746:	095b      	lsrs	r3, r3, #5
 800a748:	f003 020f 	and.w	r2, r3, #15
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	440a      	add	r2, r1
 800a752:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a754:	bf00      	nop
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	40013800 	.word	0x40013800
 800a760:	51eb851f 	.word	0x51eb851f

0800a764 <__errno>:
 800a764:	4b01      	ldr	r3, [pc, #4]	; (800a76c <__errno+0x8>)
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	20000030 	.word	0x20000030

0800a770 <__libc_init_array>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	2600      	movs	r6, #0
 800a774:	4d0c      	ldr	r5, [pc, #48]	; (800a7a8 <__libc_init_array+0x38>)
 800a776:	4c0d      	ldr	r4, [pc, #52]	; (800a7ac <__libc_init_array+0x3c>)
 800a778:	1b64      	subs	r4, r4, r5
 800a77a:	10a4      	asrs	r4, r4, #2
 800a77c:	42a6      	cmp	r6, r4
 800a77e:	d109      	bne.n	800a794 <__libc_init_array+0x24>
 800a780:	f001 feec 	bl	800c55c <_init>
 800a784:	2600      	movs	r6, #0
 800a786:	4d0a      	ldr	r5, [pc, #40]	; (800a7b0 <__libc_init_array+0x40>)
 800a788:	4c0a      	ldr	r4, [pc, #40]	; (800a7b4 <__libc_init_array+0x44>)
 800a78a:	1b64      	subs	r4, r4, r5
 800a78c:	10a4      	asrs	r4, r4, #2
 800a78e:	42a6      	cmp	r6, r4
 800a790:	d105      	bne.n	800a79e <__libc_init_array+0x2e>
 800a792:	bd70      	pop	{r4, r5, r6, pc}
 800a794:	f855 3b04 	ldr.w	r3, [r5], #4
 800a798:	4798      	blx	r3
 800a79a:	3601      	adds	r6, #1
 800a79c:	e7ee      	b.n	800a77c <__libc_init_array+0xc>
 800a79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a2:	4798      	blx	r3
 800a7a4:	3601      	adds	r6, #1
 800a7a6:	e7f2      	b.n	800a78e <__libc_init_array+0x1e>
 800a7a8:	0800c880 	.word	0x0800c880
 800a7ac:	0800c880 	.word	0x0800c880
 800a7b0:	0800c880 	.word	0x0800c880
 800a7b4:	0800c884 	.word	0x0800c884

0800a7b8 <memset>:
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4402      	add	r2, r0
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d100      	bne.n	800a7c2 <memset+0xa>
 800a7c0:	4770      	bx	lr
 800a7c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7c6:	e7f9      	b.n	800a7bc <memset+0x4>

0800a7c8 <siprintf>:
 800a7c8:	b40e      	push	{r1, r2, r3}
 800a7ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7ce:	b500      	push	{lr}
 800a7d0:	b09c      	sub	sp, #112	; 0x70
 800a7d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a7d4:	9002      	str	r0, [sp, #8]
 800a7d6:	9006      	str	r0, [sp, #24]
 800a7d8:	9107      	str	r1, [sp, #28]
 800a7da:	9104      	str	r1, [sp, #16]
 800a7dc:	4808      	ldr	r0, [pc, #32]	; (800a800 <siprintf+0x38>)
 800a7de:	4909      	ldr	r1, [pc, #36]	; (800a804 <siprintf+0x3c>)
 800a7e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e4:	9105      	str	r1, [sp, #20]
 800a7e6:	6800      	ldr	r0, [r0, #0]
 800a7e8:	a902      	add	r1, sp, #8
 800a7ea:	9301      	str	r3, [sp, #4]
 800a7ec:	f000 f868 	bl	800a8c0 <_svfiprintf_r>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	9b02      	ldr	r3, [sp, #8]
 800a7f4:	701a      	strb	r2, [r3, #0]
 800a7f6:	b01c      	add	sp, #112	; 0x70
 800a7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7fc:	b003      	add	sp, #12
 800a7fe:	4770      	bx	lr
 800a800:	20000030 	.word	0x20000030
 800a804:	ffff0208 	.word	0xffff0208

0800a808 <__ssputs_r>:
 800a808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a80c:	688e      	ldr	r6, [r1, #8]
 800a80e:	4682      	mov	sl, r0
 800a810:	429e      	cmp	r6, r3
 800a812:	460c      	mov	r4, r1
 800a814:	4690      	mov	r8, r2
 800a816:	461f      	mov	r7, r3
 800a818:	d838      	bhi.n	800a88c <__ssputs_r+0x84>
 800a81a:	898a      	ldrh	r2, [r1, #12]
 800a81c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a820:	d032      	beq.n	800a888 <__ssputs_r+0x80>
 800a822:	6825      	ldr	r5, [r4, #0]
 800a824:	6909      	ldr	r1, [r1, #16]
 800a826:	3301      	adds	r3, #1
 800a828:	eba5 0901 	sub.w	r9, r5, r1
 800a82c:	6965      	ldr	r5, [r4, #20]
 800a82e:	444b      	add	r3, r9
 800a830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a838:	106d      	asrs	r5, r5, #1
 800a83a:	429d      	cmp	r5, r3
 800a83c:	bf38      	it	cc
 800a83e:	461d      	movcc	r5, r3
 800a840:	0553      	lsls	r3, r2, #21
 800a842:	d531      	bpl.n	800a8a8 <__ssputs_r+0xa0>
 800a844:	4629      	mov	r1, r5
 800a846:	f000 fb6f 	bl	800af28 <_malloc_r>
 800a84a:	4606      	mov	r6, r0
 800a84c:	b950      	cbnz	r0, 800a864 <__ssputs_r+0x5c>
 800a84e:	230c      	movs	r3, #12
 800a850:	f04f 30ff 	mov.w	r0, #4294967295
 800a854:	f8ca 3000 	str.w	r3, [sl]
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a85e:	81a3      	strh	r3, [r4, #12]
 800a860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a864:	464a      	mov	r2, r9
 800a866:	6921      	ldr	r1, [r4, #16]
 800a868:	f000 face 	bl	800ae08 <memcpy>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	6126      	str	r6, [r4, #16]
 800a87a:	444e      	add	r6, r9
 800a87c:	6026      	str	r6, [r4, #0]
 800a87e:	463e      	mov	r6, r7
 800a880:	6165      	str	r5, [r4, #20]
 800a882:	eba5 0509 	sub.w	r5, r5, r9
 800a886:	60a5      	str	r5, [r4, #8]
 800a888:	42be      	cmp	r6, r7
 800a88a:	d900      	bls.n	800a88e <__ssputs_r+0x86>
 800a88c:	463e      	mov	r6, r7
 800a88e:	4632      	mov	r2, r6
 800a890:	4641      	mov	r1, r8
 800a892:	6820      	ldr	r0, [r4, #0]
 800a894:	f000 fac6 	bl	800ae24 <memmove>
 800a898:	68a3      	ldr	r3, [r4, #8]
 800a89a:	2000      	movs	r0, #0
 800a89c:	1b9b      	subs	r3, r3, r6
 800a89e:	60a3      	str	r3, [r4, #8]
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	4433      	add	r3, r6
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	e7db      	b.n	800a860 <__ssputs_r+0x58>
 800a8a8:	462a      	mov	r2, r5
 800a8aa:	f000 fbb1 	bl	800b010 <_realloc_r>
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d1e1      	bne.n	800a878 <__ssputs_r+0x70>
 800a8b4:	4650      	mov	r0, sl
 800a8b6:	6921      	ldr	r1, [r4, #16]
 800a8b8:	f000 face 	bl	800ae58 <_free_r>
 800a8bc:	e7c7      	b.n	800a84e <__ssputs_r+0x46>
	...

0800a8c0 <_svfiprintf_r>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	4698      	mov	r8, r3
 800a8c6:	898b      	ldrh	r3, [r1, #12]
 800a8c8:	4607      	mov	r7, r0
 800a8ca:	061b      	lsls	r3, r3, #24
 800a8cc:	460d      	mov	r5, r1
 800a8ce:	4614      	mov	r4, r2
 800a8d0:	b09d      	sub	sp, #116	; 0x74
 800a8d2:	d50e      	bpl.n	800a8f2 <_svfiprintf_r+0x32>
 800a8d4:	690b      	ldr	r3, [r1, #16]
 800a8d6:	b963      	cbnz	r3, 800a8f2 <_svfiprintf_r+0x32>
 800a8d8:	2140      	movs	r1, #64	; 0x40
 800a8da:	f000 fb25 	bl	800af28 <_malloc_r>
 800a8de:	6028      	str	r0, [r5, #0]
 800a8e0:	6128      	str	r0, [r5, #16]
 800a8e2:	b920      	cbnz	r0, 800a8ee <_svfiprintf_r+0x2e>
 800a8e4:	230c      	movs	r3, #12
 800a8e6:	603b      	str	r3, [r7, #0]
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ec:	e0d1      	b.n	800aa92 <_svfiprintf_r+0x1d2>
 800a8ee:	2340      	movs	r3, #64	; 0x40
 800a8f0:	616b      	str	r3, [r5, #20]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f6:	2320      	movs	r3, #32
 800a8f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8fc:	2330      	movs	r3, #48	; 0x30
 800a8fe:	f04f 0901 	mov.w	r9, #1
 800a902:	f8cd 800c 	str.w	r8, [sp, #12]
 800a906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aaac <_svfiprintf_r+0x1ec>
 800a90a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a90e:	4623      	mov	r3, r4
 800a910:	469a      	mov	sl, r3
 800a912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a916:	b10a      	cbz	r2, 800a91c <_svfiprintf_r+0x5c>
 800a918:	2a25      	cmp	r2, #37	; 0x25
 800a91a:	d1f9      	bne.n	800a910 <_svfiprintf_r+0x50>
 800a91c:	ebba 0b04 	subs.w	fp, sl, r4
 800a920:	d00b      	beq.n	800a93a <_svfiprintf_r+0x7a>
 800a922:	465b      	mov	r3, fp
 800a924:	4622      	mov	r2, r4
 800a926:	4629      	mov	r1, r5
 800a928:	4638      	mov	r0, r7
 800a92a:	f7ff ff6d 	bl	800a808 <__ssputs_r>
 800a92e:	3001      	adds	r0, #1
 800a930:	f000 80aa 	beq.w	800aa88 <_svfiprintf_r+0x1c8>
 800a934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a936:	445a      	add	r2, fp
 800a938:	9209      	str	r2, [sp, #36]	; 0x24
 800a93a:	f89a 3000 	ldrb.w	r3, [sl]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 80a2 	beq.w	800aa88 <_svfiprintf_r+0x1c8>
 800a944:	2300      	movs	r3, #0
 800a946:	f04f 32ff 	mov.w	r2, #4294967295
 800a94a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a94e:	f10a 0a01 	add.w	sl, sl, #1
 800a952:	9304      	str	r3, [sp, #16]
 800a954:	9307      	str	r3, [sp, #28]
 800a956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a95a:	931a      	str	r3, [sp, #104]	; 0x68
 800a95c:	4654      	mov	r4, sl
 800a95e:	2205      	movs	r2, #5
 800a960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a964:	4851      	ldr	r0, [pc, #324]	; (800aaac <_svfiprintf_r+0x1ec>)
 800a966:	f000 fa41 	bl	800adec <memchr>
 800a96a:	9a04      	ldr	r2, [sp, #16]
 800a96c:	b9d8      	cbnz	r0, 800a9a6 <_svfiprintf_r+0xe6>
 800a96e:	06d0      	lsls	r0, r2, #27
 800a970:	bf44      	itt	mi
 800a972:	2320      	movmi	r3, #32
 800a974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a978:	0711      	lsls	r1, r2, #28
 800a97a:	bf44      	itt	mi
 800a97c:	232b      	movmi	r3, #43	; 0x2b
 800a97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a982:	f89a 3000 	ldrb.w	r3, [sl]
 800a986:	2b2a      	cmp	r3, #42	; 0x2a
 800a988:	d015      	beq.n	800a9b6 <_svfiprintf_r+0xf6>
 800a98a:	4654      	mov	r4, sl
 800a98c:	2000      	movs	r0, #0
 800a98e:	f04f 0c0a 	mov.w	ip, #10
 800a992:	9a07      	ldr	r2, [sp, #28]
 800a994:	4621      	mov	r1, r4
 800a996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a99a:	3b30      	subs	r3, #48	; 0x30
 800a99c:	2b09      	cmp	r3, #9
 800a99e:	d94e      	bls.n	800aa3e <_svfiprintf_r+0x17e>
 800a9a0:	b1b0      	cbz	r0, 800a9d0 <_svfiprintf_r+0x110>
 800a9a2:	9207      	str	r2, [sp, #28]
 800a9a4:	e014      	b.n	800a9d0 <_svfiprintf_r+0x110>
 800a9a6:	eba0 0308 	sub.w	r3, r0, r8
 800a9aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	46a2      	mov	sl, r4
 800a9b2:	9304      	str	r3, [sp, #16]
 800a9b4:	e7d2      	b.n	800a95c <_svfiprintf_r+0x9c>
 800a9b6:	9b03      	ldr	r3, [sp, #12]
 800a9b8:	1d19      	adds	r1, r3, #4
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	9103      	str	r1, [sp, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	bfbb      	ittet	lt
 800a9c2:	425b      	neglt	r3, r3
 800a9c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a9c8:	9307      	strge	r3, [sp, #28]
 800a9ca:	9307      	strlt	r3, [sp, #28]
 800a9cc:	bfb8      	it	lt
 800a9ce:	9204      	strlt	r2, [sp, #16]
 800a9d0:	7823      	ldrb	r3, [r4, #0]
 800a9d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a9d4:	d10c      	bne.n	800a9f0 <_svfiprintf_r+0x130>
 800a9d6:	7863      	ldrb	r3, [r4, #1]
 800a9d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9da:	d135      	bne.n	800aa48 <_svfiprintf_r+0x188>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	3402      	adds	r4, #2
 800a9e0:	1d1a      	adds	r2, r3, #4
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	9203      	str	r2, [sp, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bfb8      	it	lt
 800a9ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9ee:	9305      	str	r3, [sp, #20]
 800a9f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800aab0 <_svfiprintf_r+0x1f0>
 800a9f4:	2203      	movs	r2, #3
 800a9f6:	4650      	mov	r0, sl
 800a9f8:	7821      	ldrb	r1, [r4, #0]
 800a9fa:	f000 f9f7 	bl	800adec <memchr>
 800a9fe:	b140      	cbz	r0, 800aa12 <_svfiprintf_r+0x152>
 800aa00:	2340      	movs	r3, #64	; 0x40
 800aa02:	eba0 000a 	sub.w	r0, r0, sl
 800aa06:	fa03 f000 	lsl.w	r0, r3, r0
 800aa0a:	9b04      	ldr	r3, [sp, #16]
 800aa0c:	3401      	adds	r4, #1
 800aa0e:	4303      	orrs	r3, r0
 800aa10:	9304      	str	r3, [sp, #16]
 800aa12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa16:	2206      	movs	r2, #6
 800aa18:	4826      	ldr	r0, [pc, #152]	; (800aab4 <_svfiprintf_r+0x1f4>)
 800aa1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa1e:	f000 f9e5 	bl	800adec <memchr>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d038      	beq.n	800aa98 <_svfiprintf_r+0x1d8>
 800aa26:	4b24      	ldr	r3, [pc, #144]	; (800aab8 <_svfiprintf_r+0x1f8>)
 800aa28:	bb1b      	cbnz	r3, 800aa72 <_svfiprintf_r+0x1b2>
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	3307      	adds	r3, #7
 800aa2e:	f023 0307 	bic.w	r3, r3, #7
 800aa32:	3308      	adds	r3, #8
 800aa34:	9303      	str	r3, [sp, #12]
 800aa36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa38:	4433      	add	r3, r6
 800aa3a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3c:	e767      	b.n	800a90e <_svfiprintf_r+0x4e>
 800aa3e:	460c      	mov	r4, r1
 800aa40:	2001      	movs	r0, #1
 800aa42:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa46:	e7a5      	b.n	800a994 <_svfiprintf_r+0xd4>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f04f 0c0a 	mov.w	ip, #10
 800aa4e:	4619      	mov	r1, r3
 800aa50:	3401      	adds	r4, #1
 800aa52:	9305      	str	r3, [sp, #20]
 800aa54:	4620      	mov	r0, r4
 800aa56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa5a:	3a30      	subs	r2, #48	; 0x30
 800aa5c:	2a09      	cmp	r2, #9
 800aa5e:	d903      	bls.n	800aa68 <_svfiprintf_r+0x1a8>
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0c5      	beq.n	800a9f0 <_svfiprintf_r+0x130>
 800aa64:	9105      	str	r1, [sp, #20]
 800aa66:	e7c3      	b.n	800a9f0 <_svfiprintf_r+0x130>
 800aa68:	4604      	mov	r4, r0
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa70:	e7f0      	b.n	800aa54 <_svfiprintf_r+0x194>
 800aa72:	ab03      	add	r3, sp, #12
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	462a      	mov	r2, r5
 800aa78:	4638      	mov	r0, r7
 800aa7a:	4b10      	ldr	r3, [pc, #64]	; (800aabc <_svfiprintf_r+0x1fc>)
 800aa7c:	a904      	add	r1, sp, #16
 800aa7e:	f3af 8000 	nop.w
 800aa82:	1c42      	adds	r2, r0, #1
 800aa84:	4606      	mov	r6, r0
 800aa86:	d1d6      	bne.n	800aa36 <_svfiprintf_r+0x176>
 800aa88:	89ab      	ldrh	r3, [r5, #12]
 800aa8a:	065b      	lsls	r3, r3, #25
 800aa8c:	f53f af2c 	bmi.w	800a8e8 <_svfiprintf_r+0x28>
 800aa90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa92:	b01d      	add	sp, #116	; 0x74
 800aa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa98:	ab03      	add	r3, sp, #12
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	4b06      	ldr	r3, [pc, #24]	; (800aabc <_svfiprintf_r+0x1fc>)
 800aaa2:	a904      	add	r1, sp, #16
 800aaa4:	f000 f87c 	bl	800aba0 <_printf_i>
 800aaa8:	e7eb      	b.n	800aa82 <_svfiprintf_r+0x1c2>
 800aaaa:	bf00      	nop
 800aaac:	0800c7e0 	.word	0x0800c7e0
 800aab0:	0800c7e6 	.word	0x0800c7e6
 800aab4:	0800c7ea 	.word	0x0800c7ea
 800aab8:	00000000 	.word	0x00000000
 800aabc:	0800a809 	.word	0x0800a809

0800aac0 <_printf_common>:
 800aac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac4:	4616      	mov	r6, r2
 800aac6:	4699      	mov	r9, r3
 800aac8:	688a      	ldr	r2, [r1, #8]
 800aaca:	690b      	ldr	r3, [r1, #16]
 800aacc:	4607      	mov	r7, r0
 800aace:	4293      	cmp	r3, r2
 800aad0:	bfb8      	it	lt
 800aad2:	4613      	movlt	r3, r2
 800aad4:	6033      	str	r3, [r6, #0]
 800aad6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aada:	460c      	mov	r4, r1
 800aadc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aae0:	b10a      	cbz	r2, 800aae6 <_printf_common+0x26>
 800aae2:	3301      	adds	r3, #1
 800aae4:	6033      	str	r3, [r6, #0]
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	0699      	lsls	r1, r3, #26
 800aaea:	bf42      	ittt	mi
 800aaec:	6833      	ldrmi	r3, [r6, #0]
 800aaee:	3302      	addmi	r3, #2
 800aaf0:	6033      	strmi	r3, [r6, #0]
 800aaf2:	6825      	ldr	r5, [r4, #0]
 800aaf4:	f015 0506 	ands.w	r5, r5, #6
 800aaf8:	d106      	bne.n	800ab08 <_printf_common+0x48>
 800aafa:	f104 0a19 	add.w	sl, r4, #25
 800aafe:	68e3      	ldr	r3, [r4, #12]
 800ab00:	6832      	ldr	r2, [r6, #0]
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	42ab      	cmp	r3, r5
 800ab06:	dc28      	bgt.n	800ab5a <_printf_common+0x9a>
 800ab08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab0c:	1e13      	subs	r3, r2, #0
 800ab0e:	6822      	ldr	r2, [r4, #0]
 800ab10:	bf18      	it	ne
 800ab12:	2301      	movne	r3, #1
 800ab14:	0692      	lsls	r2, r2, #26
 800ab16:	d42d      	bmi.n	800ab74 <_printf_common+0xb4>
 800ab18:	4649      	mov	r1, r9
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab20:	47c0      	blx	r8
 800ab22:	3001      	adds	r0, #1
 800ab24:	d020      	beq.n	800ab68 <_printf_common+0xa8>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	68e5      	ldr	r5, [r4, #12]
 800ab2a:	f003 0306 	and.w	r3, r3, #6
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	bf18      	it	ne
 800ab32:	2500      	movne	r5, #0
 800ab34:	6832      	ldr	r2, [r6, #0]
 800ab36:	f04f 0600 	mov.w	r6, #0
 800ab3a:	68a3      	ldr	r3, [r4, #8]
 800ab3c:	bf08      	it	eq
 800ab3e:	1aad      	subeq	r5, r5, r2
 800ab40:	6922      	ldr	r2, [r4, #16]
 800ab42:	bf08      	it	eq
 800ab44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	bfc4      	itt	gt
 800ab4c:	1a9b      	subgt	r3, r3, r2
 800ab4e:	18ed      	addgt	r5, r5, r3
 800ab50:	341a      	adds	r4, #26
 800ab52:	42b5      	cmp	r5, r6
 800ab54:	d11a      	bne.n	800ab8c <_printf_common+0xcc>
 800ab56:	2000      	movs	r0, #0
 800ab58:	e008      	b.n	800ab6c <_printf_common+0xac>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4652      	mov	r2, sl
 800ab5e:	4649      	mov	r1, r9
 800ab60:	4638      	mov	r0, r7
 800ab62:	47c0      	blx	r8
 800ab64:	3001      	adds	r0, #1
 800ab66:	d103      	bne.n	800ab70 <_printf_common+0xb0>
 800ab68:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab70:	3501      	adds	r5, #1
 800ab72:	e7c4      	b.n	800aafe <_printf_common+0x3e>
 800ab74:	2030      	movs	r0, #48	; 0x30
 800ab76:	18e1      	adds	r1, r4, r3
 800ab78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab82:	4422      	add	r2, r4
 800ab84:	3302      	adds	r3, #2
 800ab86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab8a:	e7c5      	b.n	800ab18 <_printf_common+0x58>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	4622      	mov	r2, r4
 800ab90:	4649      	mov	r1, r9
 800ab92:	4638      	mov	r0, r7
 800ab94:	47c0      	blx	r8
 800ab96:	3001      	adds	r0, #1
 800ab98:	d0e6      	beq.n	800ab68 <_printf_common+0xa8>
 800ab9a:	3601      	adds	r6, #1
 800ab9c:	e7d9      	b.n	800ab52 <_printf_common+0x92>
	...

0800aba0 <_printf_i>:
 800aba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aba4:	7e0f      	ldrb	r7, [r1, #24]
 800aba6:	4691      	mov	r9, r2
 800aba8:	2f78      	cmp	r7, #120	; 0x78
 800abaa:	4680      	mov	r8, r0
 800abac:	460c      	mov	r4, r1
 800abae:	469a      	mov	sl, r3
 800abb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abb6:	d807      	bhi.n	800abc8 <_printf_i+0x28>
 800abb8:	2f62      	cmp	r7, #98	; 0x62
 800abba:	d80a      	bhi.n	800abd2 <_printf_i+0x32>
 800abbc:	2f00      	cmp	r7, #0
 800abbe:	f000 80d9 	beq.w	800ad74 <_printf_i+0x1d4>
 800abc2:	2f58      	cmp	r7, #88	; 0x58
 800abc4:	f000 80a4 	beq.w	800ad10 <_printf_i+0x170>
 800abc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abd0:	e03a      	b.n	800ac48 <_printf_i+0xa8>
 800abd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abd6:	2b15      	cmp	r3, #21
 800abd8:	d8f6      	bhi.n	800abc8 <_printf_i+0x28>
 800abda:	a101      	add	r1, pc, #4	; (adr r1, 800abe0 <_printf_i+0x40>)
 800abdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abe0:	0800ac39 	.word	0x0800ac39
 800abe4:	0800ac4d 	.word	0x0800ac4d
 800abe8:	0800abc9 	.word	0x0800abc9
 800abec:	0800abc9 	.word	0x0800abc9
 800abf0:	0800abc9 	.word	0x0800abc9
 800abf4:	0800abc9 	.word	0x0800abc9
 800abf8:	0800ac4d 	.word	0x0800ac4d
 800abfc:	0800abc9 	.word	0x0800abc9
 800ac00:	0800abc9 	.word	0x0800abc9
 800ac04:	0800abc9 	.word	0x0800abc9
 800ac08:	0800abc9 	.word	0x0800abc9
 800ac0c:	0800ad5b 	.word	0x0800ad5b
 800ac10:	0800ac7d 	.word	0x0800ac7d
 800ac14:	0800ad3d 	.word	0x0800ad3d
 800ac18:	0800abc9 	.word	0x0800abc9
 800ac1c:	0800abc9 	.word	0x0800abc9
 800ac20:	0800ad7d 	.word	0x0800ad7d
 800ac24:	0800abc9 	.word	0x0800abc9
 800ac28:	0800ac7d 	.word	0x0800ac7d
 800ac2c:	0800abc9 	.word	0x0800abc9
 800ac30:	0800abc9 	.word	0x0800abc9
 800ac34:	0800ad45 	.word	0x0800ad45
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	1d1a      	adds	r2, r3, #4
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	602a      	str	r2, [r5, #0]
 800ac40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e0a4      	b.n	800ad96 <_printf_i+0x1f6>
 800ac4c:	6820      	ldr	r0, [r4, #0]
 800ac4e:	6829      	ldr	r1, [r5, #0]
 800ac50:	0606      	lsls	r6, r0, #24
 800ac52:	f101 0304 	add.w	r3, r1, #4
 800ac56:	d50a      	bpl.n	800ac6e <_printf_i+0xce>
 800ac58:	680e      	ldr	r6, [r1, #0]
 800ac5a:	602b      	str	r3, [r5, #0]
 800ac5c:	2e00      	cmp	r6, #0
 800ac5e:	da03      	bge.n	800ac68 <_printf_i+0xc8>
 800ac60:	232d      	movs	r3, #45	; 0x2d
 800ac62:	4276      	negs	r6, r6
 800ac64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac68:	230a      	movs	r3, #10
 800ac6a:	485e      	ldr	r0, [pc, #376]	; (800ade4 <_printf_i+0x244>)
 800ac6c:	e019      	b.n	800aca2 <_printf_i+0x102>
 800ac6e:	680e      	ldr	r6, [r1, #0]
 800ac70:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac74:	602b      	str	r3, [r5, #0]
 800ac76:	bf18      	it	ne
 800ac78:	b236      	sxthne	r6, r6
 800ac7a:	e7ef      	b.n	800ac5c <_printf_i+0xbc>
 800ac7c:	682b      	ldr	r3, [r5, #0]
 800ac7e:	6820      	ldr	r0, [r4, #0]
 800ac80:	1d19      	adds	r1, r3, #4
 800ac82:	6029      	str	r1, [r5, #0]
 800ac84:	0601      	lsls	r1, r0, #24
 800ac86:	d501      	bpl.n	800ac8c <_printf_i+0xec>
 800ac88:	681e      	ldr	r6, [r3, #0]
 800ac8a:	e002      	b.n	800ac92 <_printf_i+0xf2>
 800ac8c:	0646      	lsls	r6, r0, #25
 800ac8e:	d5fb      	bpl.n	800ac88 <_printf_i+0xe8>
 800ac90:	881e      	ldrh	r6, [r3, #0]
 800ac92:	2f6f      	cmp	r7, #111	; 0x6f
 800ac94:	bf0c      	ite	eq
 800ac96:	2308      	moveq	r3, #8
 800ac98:	230a      	movne	r3, #10
 800ac9a:	4852      	ldr	r0, [pc, #328]	; (800ade4 <_printf_i+0x244>)
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aca2:	6865      	ldr	r5, [r4, #4]
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	bfa8      	it	ge
 800aca8:	6821      	ldrge	r1, [r4, #0]
 800acaa:	60a5      	str	r5, [r4, #8]
 800acac:	bfa4      	itt	ge
 800acae:	f021 0104 	bicge.w	r1, r1, #4
 800acb2:	6021      	strge	r1, [r4, #0]
 800acb4:	b90e      	cbnz	r6, 800acba <_printf_i+0x11a>
 800acb6:	2d00      	cmp	r5, #0
 800acb8:	d04d      	beq.n	800ad56 <_printf_i+0x1b6>
 800acba:	4615      	mov	r5, r2
 800acbc:	fbb6 f1f3 	udiv	r1, r6, r3
 800acc0:	fb03 6711 	mls	r7, r3, r1, r6
 800acc4:	5dc7      	ldrb	r7, [r0, r7]
 800acc6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acca:	4637      	mov	r7, r6
 800accc:	42bb      	cmp	r3, r7
 800acce:	460e      	mov	r6, r1
 800acd0:	d9f4      	bls.n	800acbc <_printf_i+0x11c>
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d10b      	bne.n	800acee <_printf_i+0x14e>
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	07de      	lsls	r6, r3, #31
 800acda:	d508      	bpl.n	800acee <_printf_i+0x14e>
 800acdc:	6923      	ldr	r3, [r4, #16]
 800acde:	6861      	ldr	r1, [r4, #4]
 800ace0:	4299      	cmp	r1, r3
 800ace2:	bfde      	ittt	le
 800ace4:	2330      	movle	r3, #48	; 0x30
 800ace6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800acee:	1b52      	subs	r2, r2, r5
 800acf0:	6122      	str	r2, [r4, #16]
 800acf2:	464b      	mov	r3, r9
 800acf4:	4621      	mov	r1, r4
 800acf6:	4640      	mov	r0, r8
 800acf8:	f8cd a000 	str.w	sl, [sp]
 800acfc:	aa03      	add	r2, sp, #12
 800acfe:	f7ff fedf 	bl	800aac0 <_printf_common>
 800ad02:	3001      	adds	r0, #1
 800ad04:	d14c      	bne.n	800ada0 <_printf_i+0x200>
 800ad06:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0a:	b004      	add	sp, #16
 800ad0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad10:	4834      	ldr	r0, [pc, #208]	; (800ade4 <_printf_i+0x244>)
 800ad12:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad16:	6829      	ldr	r1, [r5, #0]
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad1e:	6029      	str	r1, [r5, #0]
 800ad20:	061d      	lsls	r5, r3, #24
 800ad22:	d514      	bpl.n	800ad4e <_printf_i+0x1ae>
 800ad24:	07df      	lsls	r7, r3, #31
 800ad26:	bf44      	itt	mi
 800ad28:	f043 0320 	orrmi.w	r3, r3, #32
 800ad2c:	6023      	strmi	r3, [r4, #0]
 800ad2e:	b91e      	cbnz	r6, 800ad38 <_printf_i+0x198>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	f023 0320 	bic.w	r3, r3, #32
 800ad36:	6023      	str	r3, [r4, #0]
 800ad38:	2310      	movs	r3, #16
 800ad3a:	e7af      	b.n	800ac9c <_printf_i+0xfc>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	f043 0320 	orr.w	r3, r3, #32
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	2378      	movs	r3, #120	; 0x78
 800ad46:	4828      	ldr	r0, [pc, #160]	; (800ade8 <_printf_i+0x248>)
 800ad48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad4c:	e7e3      	b.n	800ad16 <_printf_i+0x176>
 800ad4e:	0659      	lsls	r1, r3, #25
 800ad50:	bf48      	it	mi
 800ad52:	b2b6      	uxthmi	r6, r6
 800ad54:	e7e6      	b.n	800ad24 <_printf_i+0x184>
 800ad56:	4615      	mov	r5, r2
 800ad58:	e7bb      	b.n	800acd2 <_printf_i+0x132>
 800ad5a:	682b      	ldr	r3, [r5, #0]
 800ad5c:	6826      	ldr	r6, [r4, #0]
 800ad5e:	1d18      	adds	r0, r3, #4
 800ad60:	6961      	ldr	r1, [r4, #20]
 800ad62:	6028      	str	r0, [r5, #0]
 800ad64:	0635      	lsls	r5, r6, #24
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	d501      	bpl.n	800ad6e <_printf_i+0x1ce>
 800ad6a:	6019      	str	r1, [r3, #0]
 800ad6c:	e002      	b.n	800ad74 <_printf_i+0x1d4>
 800ad6e:	0670      	lsls	r0, r6, #25
 800ad70:	d5fb      	bpl.n	800ad6a <_printf_i+0x1ca>
 800ad72:	8019      	strh	r1, [r3, #0]
 800ad74:	2300      	movs	r3, #0
 800ad76:	4615      	mov	r5, r2
 800ad78:	6123      	str	r3, [r4, #16]
 800ad7a:	e7ba      	b.n	800acf2 <_printf_i+0x152>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	2100      	movs	r1, #0
 800ad80:	1d1a      	adds	r2, r3, #4
 800ad82:	602a      	str	r2, [r5, #0]
 800ad84:	681d      	ldr	r5, [r3, #0]
 800ad86:	6862      	ldr	r2, [r4, #4]
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f000 f82f 	bl	800adec <memchr>
 800ad8e:	b108      	cbz	r0, 800ad94 <_printf_i+0x1f4>
 800ad90:	1b40      	subs	r0, r0, r5
 800ad92:	6060      	str	r0, [r4, #4]
 800ad94:	6863      	ldr	r3, [r4, #4]
 800ad96:	6123      	str	r3, [r4, #16]
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad9e:	e7a8      	b.n	800acf2 <_printf_i+0x152>
 800ada0:	462a      	mov	r2, r5
 800ada2:	4649      	mov	r1, r9
 800ada4:	4640      	mov	r0, r8
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	47d0      	blx	sl
 800adaa:	3001      	adds	r0, #1
 800adac:	d0ab      	beq.n	800ad06 <_printf_i+0x166>
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	079b      	lsls	r3, r3, #30
 800adb2:	d413      	bmi.n	800addc <_printf_i+0x23c>
 800adb4:	68e0      	ldr	r0, [r4, #12]
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	4298      	cmp	r0, r3
 800adba:	bfb8      	it	lt
 800adbc:	4618      	movlt	r0, r3
 800adbe:	e7a4      	b.n	800ad0a <_printf_i+0x16a>
 800adc0:	2301      	movs	r3, #1
 800adc2:	4632      	mov	r2, r6
 800adc4:	4649      	mov	r1, r9
 800adc6:	4640      	mov	r0, r8
 800adc8:	47d0      	blx	sl
 800adca:	3001      	adds	r0, #1
 800adcc:	d09b      	beq.n	800ad06 <_printf_i+0x166>
 800adce:	3501      	adds	r5, #1
 800add0:	68e3      	ldr	r3, [r4, #12]
 800add2:	9903      	ldr	r1, [sp, #12]
 800add4:	1a5b      	subs	r3, r3, r1
 800add6:	42ab      	cmp	r3, r5
 800add8:	dcf2      	bgt.n	800adc0 <_printf_i+0x220>
 800adda:	e7eb      	b.n	800adb4 <_printf_i+0x214>
 800addc:	2500      	movs	r5, #0
 800adde:	f104 0619 	add.w	r6, r4, #25
 800ade2:	e7f5      	b.n	800add0 <_printf_i+0x230>
 800ade4:	0800c7f1 	.word	0x0800c7f1
 800ade8:	0800c802 	.word	0x0800c802

0800adec <memchr>:
 800adec:	4603      	mov	r3, r0
 800adee:	b510      	push	{r4, lr}
 800adf0:	b2c9      	uxtb	r1, r1
 800adf2:	4402      	add	r2, r0
 800adf4:	4293      	cmp	r3, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	d101      	bne.n	800adfe <memchr+0x12>
 800adfa:	2000      	movs	r0, #0
 800adfc:	e003      	b.n	800ae06 <memchr+0x1a>
 800adfe:	7804      	ldrb	r4, [r0, #0]
 800ae00:	3301      	adds	r3, #1
 800ae02:	428c      	cmp	r4, r1
 800ae04:	d1f6      	bne.n	800adf4 <memchr+0x8>
 800ae06:	bd10      	pop	{r4, pc}

0800ae08 <memcpy>:
 800ae08:	440a      	add	r2, r1
 800ae0a:	4291      	cmp	r1, r2
 800ae0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae10:	d100      	bne.n	800ae14 <memcpy+0xc>
 800ae12:	4770      	bx	lr
 800ae14:	b510      	push	{r4, lr}
 800ae16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1a:	4291      	cmp	r1, r2
 800ae1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae20:	d1f9      	bne.n	800ae16 <memcpy+0xe>
 800ae22:	bd10      	pop	{r4, pc}

0800ae24 <memmove>:
 800ae24:	4288      	cmp	r0, r1
 800ae26:	b510      	push	{r4, lr}
 800ae28:	eb01 0402 	add.w	r4, r1, r2
 800ae2c:	d902      	bls.n	800ae34 <memmove+0x10>
 800ae2e:	4284      	cmp	r4, r0
 800ae30:	4623      	mov	r3, r4
 800ae32:	d807      	bhi.n	800ae44 <memmove+0x20>
 800ae34:	1e43      	subs	r3, r0, #1
 800ae36:	42a1      	cmp	r1, r4
 800ae38:	d008      	beq.n	800ae4c <memmove+0x28>
 800ae3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae42:	e7f8      	b.n	800ae36 <memmove+0x12>
 800ae44:	4601      	mov	r1, r0
 800ae46:	4402      	add	r2, r0
 800ae48:	428a      	cmp	r2, r1
 800ae4a:	d100      	bne.n	800ae4e <memmove+0x2a>
 800ae4c:	bd10      	pop	{r4, pc}
 800ae4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae56:	e7f7      	b.n	800ae48 <memmove+0x24>

0800ae58 <_free_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	d040      	beq.n	800aee2 <_free_r+0x8a>
 800ae60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae64:	1f0c      	subs	r4, r1, #4
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	bfb8      	it	lt
 800ae6a:	18e4      	addlt	r4, r4, r3
 800ae6c:	f000 f910 	bl	800b090 <__malloc_lock>
 800ae70:	4a1c      	ldr	r2, [pc, #112]	; (800aee4 <_free_r+0x8c>)
 800ae72:	6813      	ldr	r3, [r2, #0]
 800ae74:	b933      	cbnz	r3, 800ae84 <_free_r+0x2c>
 800ae76:	6063      	str	r3, [r4, #4]
 800ae78:	6014      	str	r4, [r2, #0]
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae80:	f000 b90c 	b.w	800b09c <__malloc_unlock>
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d908      	bls.n	800ae9a <_free_r+0x42>
 800ae88:	6820      	ldr	r0, [r4, #0]
 800ae8a:	1821      	adds	r1, r4, r0
 800ae8c:	428b      	cmp	r3, r1
 800ae8e:	bf01      	itttt	eq
 800ae90:	6819      	ldreq	r1, [r3, #0]
 800ae92:	685b      	ldreq	r3, [r3, #4]
 800ae94:	1809      	addeq	r1, r1, r0
 800ae96:	6021      	streq	r1, [r4, #0]
 800ae98:	e7ed      	b.n	800ae76 <_free_r+0x1e>
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	b10b      	cbz	r3, 800aea4 <_free_r+0x4c>
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	d9fa      	bls.n	800ae9a <_free_r+0x42>
 800aea4:	6811      	ldr	r1, [r2, #0]
 800aea6:	1850      	adds	r0, r2, r1
 800aea8:	42a0      	cmp	r0, r4
 800aeaa:	d10b      	bne.n	800aec4 <_free_r+0x6c>
 800aeac:	6820      	ldr	r0, [r4, #0]
 800aeae:	4401      	add	r1, r0
 800aeb0:	1850      	adds	r0, r2, r1
 800aeb2:	4283      	cmp	r3, r0
 800aeb4:	6011      	str	r1, [r2, #0]
 800aeb6:	d1e0      	bne.n	800ae7a <_free_r+0x22>
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	4401      	add	r1, r0
 800aebe:	6011      	str	r1, [r2, #0]
 800aec0:	6053      	str	r3, [r2, #4]
 800aec2:	e7da      	b.n	800ae7a <_free_r+0x22>
 800aec4:	d902      	bls.n	800aecc <_free_r+0x74>
 800aec6:	230c      	movs	r3, #12
 800aec8:	602b      	str	r3, [r5, #0]
 800aeca:	e7d6      	b.n	800ae7a <_free_r+0x22>
 800aecc:	6820      	ldr	r0, [r4, #0]
 800aece:	1821      	adds	r1, r4, r0
 800aed0:	428b      	cmp	r3, r1
 800aed2:	bf01      	itttt	eq
 800aed4:	6819      	ldreq	r1, [r3, #0]
 800aed6:	685b      	ldreq	r3, [r3, #4]
 800aed8:	1809      	addeq	r1, r1, r0
 800aeda:	6021      	streq	r1, [r4, #0]
 800aedc:	6063      	str	r3, [r4, #4]
 800aede:	6054      	str	r4, [r2, #4]
 800aee0:	e7cb      	b.n	800ae7a <_free_r+0x22>
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	200004ec 	.word	0x200004ec

0800aee8 <sbrk_aligned>:
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	4e0e      	ldr	r6, [pc, #56]	; (800af24 <sbrk_aligned+0x3c>)
 800aeec:	460c      	mov	r4, r1
 800aeee:	6831      	ldr	r1, [r6, #0]
 800aef0:	4605      	mov	r5, r0
 800aef2:	b911      	cbnz	r1, 800aefa <sbrk_aligned+0x12>
 800aef4:	f000 f8bc 	bl	800b070 <_sbrk_r>
 800aef8:	6030      	str	r0, [r6, #0]
 800aefa:	4621      	mov	r1, r4
 800aefc:	4628      	mov	r0, r5
 800aefe:	f000 f8b7 	bl	800b070 <_sbrk_r>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	d00a      	beq.n	800af1c <sbrk_aligned+0x34>
 800af06:	1cc4      	adds	r4, r0, #3
 800af08:	f024 0403 	bic.w	r4, r4, #3
 800af0c:	42a0      	cmp	r0, r4
 800af0e:	d007      	beq.n	800af20 <sbrk_aligned+0x38>
 800af10:	1a21      	subs	r1, r4, r0
 800af12:	4628      	mov	r0, r5
 800af14:	f000 f8ac 	bl	800b070 <_sbrk_r>
 800af18:	3001      	adds	r0, #1
 800af1a:	d101      	bne.n	800af20 <sbrk_aligned+0x38>
 800af1c:	f04f 34ff 	mov.w	r4, #4294967295
 800af20:	4620      	mov	r0, r4
 800af22:	bd70      	pop	{r4, r5, r6, pc}
 800af24:	200004f0 	.word	0x200004f0

0800af28 <_malloc_r>:
 800af28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2c:	1ccd      	adds	r5, r1, #3
 800af2e:	f025 0503 	bic.w	r5, r5, #3
 800af32:	3508      	adds	r5, #8
 800af34:	2d0c      	cmp	r5, #12
 800af36:	bf38      	it	cc
 800af38:	250c      	movcc	r5, #12
 800af3a:	2d00      	cmp	r5, #0
 800af3c:	4607      	mov	r7, r0
 800af3e:	db01      	blt.n	800af44 <_malloc_r+0x1c>
 800af40:	42a9      	cmp	r1, r5
 800af42:	d905      	bls.n	800af50 <_malloc_r+0x28>
 800af44:	230c      	movs	r3, #12
 800af46:	2600      	movs	r6, #0
 800af48:	603b      	str	r3, [r7, #0]
 800af4a:	4630      	mov	r0, r6
 800af4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af50:	4e2e      	ldr	r6, [pc, #184]	; (800b00c <_malloc_r+0xe4>)
 800af52:	f000 f89d 	bl	800b090 <__malloc_lock>
 800af56:	6833      	ldr	r3, [r6, #0]
 800af58:	461c      	mov	r4, r3
 800af5a:	bb34      	cbnz	r4, 800afaa <_malloc_r+0x82>
 800af5c:	4629      	mov	r1, r5
 800af5e:	4638      	mov	r0, r7
 800af60:	f7ff ffc2 	bl	800aee8 <sbrk_aligned>
 800af64:	1c43      	adds	r3, r0, #1
 800af66:	4604      	mov	r4, r0
 800af68:	d14d      	bne.n	800b006 <_malloc_r+0xde>
 800af6a:	6834      	ldr	r4, [r6, #0]
 800af6c:	4626      	mov	r6, r4
 800af6e:	2e00      	cmp	r6, #0
 800af70:	d140      	bne.n	800aff4 <_malloc_r+0xcc>
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	4631      	mov	r1, r6
 800af76:	4638      	mov	r0, r7
 800af78:	eb04 0803 	add.w	r8, r4, r3
 800af7c:	f000 f878 	bl	800b070 <_sbrk_r>
 800af80:	4580      	cmp	r8, r0
 800af82:	d13a      	bne.n	800affa <_malloc_r+0xd2>
 800af84:	6821      	ldr	r1, [r4, #0]
 800af86:	3503      	adds	r5, #3
 800af88:	1a6d      	subs	r5, r5, r1
 800af8a:	f025 0503 	bic.w	r5, r5, #3
 800af8e:	3508      	adds	r5, #8
 800af90:	2d0c      	cmp	r5, #12
 800af92:	bf38      	it	cc
 800af94:	250c      	movcc	r5, #12
 800af96:	4638      	mov	r0, r7
 800af98:	4629      	mov	r1, r5
 800af9a:	f7ff ffa5 	bl	800aee8 <sbrk_aligned>
 800af9e:	3001      	adds	r0, #1
 800afa0:	d02b      	beq.n	800affa <_malloc_r+0xd2>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	442b      	add	r3, r5
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	e00e      	b.n	800afc8 <_malloc_r+0xa0>
 800afaa:	6822      	ldr	r2, [r4, #0]
 800afac:	1b52      	subs	r2, r2, r5
 800afae:	d41e      	bmi.n	800afee <_malloc_r+0xc6>
 800afb0:	2a0b      	cmp	r2, #11
 800afb2:	d916      	bls.n	800afe2 <_malloc_r+0xba>
 800afb4:	1961      	adds	r1, r4, r5
 800afb6:	42a3      	cmp	r3, r4
 800afb8:	6025      	str	r5, [r4, #0]
 800afba:	bf18      	it	ne
 800afbc:	6059      	strne	r1, [r3, #4]
 800afbe:	6863      	ldr	r3, [r4, #4]
 800afc0:	bf08      	it	eq
 800afc2:	6031      	streq	r1, [r6, #0]
 800afc4:	5162      	str	r2, [r4, r5]
 800afc6:	604b      	str	r3, [r1, #4]
 800afc8:	4638      	mov	r0, r7
 800afca:	f104 060b 	add.w	r6, r4, #11
 800afce:	f000 f865 	bl	800b09c <__malloc_unlock>
 800afd2:	f026 0607 	bic.w	r6, r6, #7
 800afd6:	1d23      	adds	r3, r4, #4
 800afd8:	1af2      	subs	r2, r6, r3
 800afda:	d0b6      	beq.n	800af4a <_malloc_r+0x22>
 800afdc:	1b9b      	subs	r3, r3, r6
 800afde:	50a3      	str	r3, [r4, r2]
 800afe0:	e7b3      	b.n	800af4a <_malloc_r+0x22>
 800afe2:	6862      	ldr	r2, [r4, #4]
 800afe4:	42a3      	cmp	r3, r4
 800afe6:	bf0c      	ite	eq
 800afe8:	6032      	streq	r2, [r6, #0]
 800afea:	605a      	strne	r2, [r3, #4]
 800afec:	e7ec      	b.n	800afc8 <_malloc_r+0xa0>
 800afee:	4623      	mov	r3, r4
 800aff0:	6864      	ldr	r4, [r4, #4]
 800aff2:	e7b2      	b.n	800af5a <_malloc_r+0x32>
 800aff4:	4634      	mov	r4, r6
 800aff6:	6876      	ldr	r6, [r6, #4]
 800aff8:	e7b9      	b.n	800af6e <_malloc_r+0x46>
 800affa:	230c      	movs	r3, #12
 800affc:	4638      	mov	r0, r7
 800affe:	603b      	str	r3, [r7, #0]
 800b000:	f000 f84c 	bl	800b09c <__malloc_unlock>
 800b004:	e7a1      	b.n	800af4a <_malloc_r+0x22>
 800b006:	6025      	str	r5, [r4, #0]
 800b008:	e7de      	b.n	800afc8 <_malloc_r+0xa0>
 800b00a:	bf00      	nop
 800b00c:	200004ec 	.word	0x200004ec

0800b010 <_realloc_r>:
 800b010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b014:	4680      	mov	r8, r0
 800b016:	4614      	mov	r4, r2
 800b018:	460e      	mov	r6, r1
 800b01a:	b921      	cbnz	r1, 800b026 <_realloc_r+0x16>
 800b01c:	4611      	mov	r1, r2
 800b01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b022:	f7ff bf81 	b.w	800af28 <_malloc_r>
 800b026:	b92a      	cbnz	r2, 800b034 <_realloc_r+0x24>
 800b028:	f7ff ff16 	bl	800ae58 <_free_r>
 800b02c:	4625      	mov	r5, r4
 800b02e:	4628      	mov	r0, r5
 800b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b034:	f000 f838 	bl	800b0a8 <_malloc_usable_size_r>
 800b038:	4284      	cmp	r4, r0
 800b03a:	4607      	mov	r7, r0
 800b03c:	d802      	bhi.n	800b044 <_realloc_r+0x34>
 800b03e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b042:	d812      	bhi.n	800b06a <_realloc_r+0x5a>
 800b044:	4621      	mov	r1, r4
 800b046:	4640      	mov	r0, r8
 800b048:	f7ff ff6e 	bl	800af28 <_malloc_r>
 800b04c:	4605      	mov	r5, r0
 800b04e:	2800      	cmp	r0, #0
 800b050:	d0ed      	beq.n	800b02e <_realloc_r+0x1e>
 800b052:	42bc      	cmp	r4, r7
 800b054:	4622      	mov	r2, r4
 800b056:	4631      	mov	r1, r6
 800b058:	bf28      	it	cs
 800b05a:	463a      	movcs	r2, r7
 800b05c:	f7ff fed4 	bl	800ae08 <memcpy>
 800b060:	4631      	mov	r1, r6
 800b062:	4640      	mov	r0, r8
 800b064:	f7ff fef8 	bl	800ae58 <_free_r>
 800b068:	e7e1      	b.n	800b02e <_realloc_r+0x1e>
 800b06a:	4635      	mov	r5, r6
 800b06c:	e7df      	b.n	800b02e <_realloc_r+0x1e>
	...

0800b070 <_sbrk_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	2300      	movs	r3, #0
 800b074:	4d05      	ldr	r5, [pc, #20]	; (800b08c <_sbrk_r+0x1c>)
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	602b      	str	r3, [r5, #0]
 800b07c:	f7fb f89e 	bl	80061bc <_sbrk>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_sbrk_r+0x1a>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_sbrk_r+0x1a>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	200004f4 	.word	0x200004f4

0800b090 <__malloc_lock>:
 800b090:	4801      	ldr	r0, [pc, #4]	; (800b098 <__malloc_lock+0x8>)
 800b092:	f000 b811 	b.w	800b0b8 <__retarget_lock_acquire_recursive>
 800b096:	bf00      	nop
 800b098:	200004f8 	.word	0x200004f8

0800b09c <__malloc_unlock>:
 800b09c:	4801      	ldr	r0, [pc, #4]	; (800b0a4 <__malloc_unlock+0x8>)
 800b09e:	f000 b80c 	b.w	800b0ba <__retarget_lock_release_recursive>
 800b0a2:	bf00      	nop
 800b0a4:	200004f8 	.word	0x200004f8

0800b0a8 <_malloc_usable_size_r>:
 800b0a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ac:	1f18      	subs	r0, r3, #4
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bfbc      	itt	lt
 800b0b2:	580b      	ldrlt	r3, [r1, r0]
 800b0b4:	18c0      	addlt	r0, r0, r3
 800b0b6:	4770      	bx	lr

0800b0b8 <__retarget_lock_acquire_recursive>:
 800b0b8:	4770      	bx	lr

0800b0ba <__retarget_lock_release_recursive>:
 800b0ba:	4770      	bx	lr

0800b0bc <pow>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	4614      	mov	r4, r2
 800b0c2:	461d      	mov	r5, r3
 800b0c4:	4680      	mov	r8, r0
 800b0c6:	4689      	mov	r9, r1
 800b0c8:	f000 f89e 	bl	800b208 <__ieee754_pow>
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	460f      	mov	r7, r1
 800b0d2:	462b      	mov	r3, r5
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	f7f5 fc90 	bl	80009fc <__aeabi_dcmpun>
 800b0dc:	bbc8      	cbnz	r0, 800b152 <pow+0x96>
 800b0de:	2200      	movs	r2, #0
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	f7f5 fc57 	bl	8000998 <__aeabi_dcmpeq>
 800b0ea:	b1b8      	cbz	r0, 800b11c <pow+0x60>
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	f7f5 fc50 	bl	8000998 <__aeabi_dcmpeq>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d141      	bne.n	800b180 <pow+0xc4>
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	4629      	mov	r1, r5
 800b100:	f001 f892 	bl	800c228 <finite>
 800b104:	b328      	cbz	r0, 800b152 <pow+0x96>
 800b106:	2200      	movs	r2, #0
 800b108:	2300      	movs	r3, #0
 800b10a:	4620      	mov	r0, r4
 800b10c:	4629      	mov	r1, r5
 800b10e:	f7f5 fc4d 	bl	80009ac <__aeabi_dcmplt>
 800b112:	b1f0      	cbz	r0, 800b152 <pow+0x96>
 800b114:	f7ff fb26 	bl	800a764 <__errno>
 800b118:	2322      	movs	r3, #34	; 0x22
 800b11a:	e019      	b.n	800b150 <pow+0x94>
 800b11c:	4630      	mov	r0, r6
 800b11e:	4639      	mov	r1, r7
 800b120:	f001 f882 	bl	800c228 <finite>
 800b124:	b9c8      	cbnz	r0, 800b15a <pow+0x9e>
 800b126:	4640      	mov	r0, r8
 800b128:	4649      	mov	r1, r9
 800b12a:	f001 f87d 	bl	800c228 <finite>
 800b12e:	b1a0      	cbz	r0, 800b15a <pow+0x9e>
 800b130:	4620      	mov	r0, r4
 800b132:	4629      	mov	r1, r5
 800b134:	f001 f878 	bl	800c228 <finite>
 800b138:	b178      	cbz	r0, 800b15a <pow+0x9e>
 800b13a:	4632      	mov	r2, r6
 800b13c:	463b      	mov	r3, r7
 800b13e:	4630      	mov	r0, r6
 800b140:	4639      	mov	r1, r7
 800b142:	f7f5 fc5b 	bl	80009fc <__aeabi_dcmpun>
 800b146:	2800      	cmp	r0, #0
 800b148:	d0e4      	beq.n	800b114 <pow+0x58>
 800b14a:	f7ff fb0b 	bl	800a764 <__errno>
 800b14e:	2321      	movs	r3, #33	; 0x21
 800b150:	6003      	str	r3, [r0, #0]
 800b152:	4630      	mov	r0, r6
 800b154:	4639      	mov	r1, r7
 800b156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b15a:	2200      	movs	r2, #0
 800b15c:	2300      	movs	r3, #0
 800b15e:	4630      	mov	r0, r6
 800b160:	4639      	mov	r1, r7
 800b162:	f7f5 fc19 	bl	8000998 <__aeabi_dcmpeq>
 800b166:	2800      	cmp	r0, #0
 800b168:	d0f3      	beq.n	800b152 <pow+0x96>
 800b16a:	4640      	mov	r0, r8
 800b16c:	4649      	mov	r1, r9
 800b16e:	f001 f85b 	bl	800c228 <finite>
 800b172:	2800      	cmp	r0, #0
 800b174:	d0ed      	beq.n	800b152 <pow+0x96>
 800b176:	4620      	mov	r0, r4
 800b178:	4629      	mov	r1, r5
 800b17a:	f001 f855 	bl	800c228 <finite>
 800b17e:	e7c8      	b.n	800b112 <pow+0x56>
 800b180:	2600      	movs	r6, #0
 800b182:	4f01      	ldr	r7, [pc, #4]	; (800b188 <pow+0xcc>)
 800b184:	e7e5      	b.n	800b152 <pow+0x96>
 800b186:	bf00      	nop
 800b188:	3ff00000 	.word	0x3ff00000

0800b18c <asinf>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4604      	mov	r4, r0
 800b190:	f000 fe00 	bl	800bd94 <__ieee754_asinf>
 800b194:	4621      	mov	r1, r4
 800b196:	4605      	mov	r5, r0
 800b198:	4620      	mov	r0, r4
 800b19a:	f7f5 ff89 	bl	80010b0 <__aeabi_fcmpun>
 800b19e:	b980      	cbnz	r0, 800b1c2 <asinf+0x36>
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f001 f9d3 	bl	800c54c <fabsf>
 800b1a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b1aa:	f7f5 ff77 	bl	800109c <__aeabi_fcmpgt>
 800b1ae:	b140      	cbz	r0, 800b1c2 <asinf+0x36>
 800b1b0:	f7ff fad8 	bl	800a764 <__errno>
 800b1b4:	2321      	movs	r3, #33	; 0x21
 800b1b6:	6003      	str	r3, [r0, #0]
 800b1b8:	4803      	ldr	r0, [pc, #12]	; (800b1c8 <asinf+0x3c>)
 800b1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1be:	f001 b9c9 	b.w	800c554 <nanf>
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	bd38      	pop	{r3, r4, r5, pc}
 800b1c6:	bf00      	nop
 800b1c8:	0800c7e5 	.word	0x0800c7e5

0800b1cc <atan2f>:
 800b1cc:	f000 bf26 	b.w	800c01c <__ieee754_atan2f>

0800b1d0 <sqrtf>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	f000 ffa8 	bl	800c128 <__ieee754_sqrtf>
 800b1d8:	4629      	mov	r1, r5
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f7f5 ff67 	bl	80010b0 <__aeabi_fcmpun>
 800b1e2:	b968      	cbnz	r0, 800b200 <sqrtf+0x30>
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f7f5 ff3a 	bl	8001060 <__aeabi_fcmplt>
 800b1ec:	b140      	cbz	r0, 800b200 <sqrtf+0x30>
 800b1ee:	f7ff fab9 	bl	800a764 <__errno>
 800b1f2:	2321      	movs	r3, #33	; 0x21
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	6003      	str	r3, [r0, #0]
 800b1f8:	4608      	mov	r0, r1
 800b1fa:	f7f5 fe47 	bl	8000e8c <__aeabi_fdiv>
 800b1fe:	4604      	mov	r4, r0
 800b200:	4620      	mov	r0, r4
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	0000      	movs	r0, r0
	...

0800b208 <__ieee754_pow>:
 800b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	b093      	sub	sp, #76	; 0x4c
 800b20e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b212:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800b216:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b21a:	4689      	mov	r9, r1
 800b21c:	ea56 0102 	orrs.w	r1, r6, r2
 800b220:	4680      	mov	r8, r0
 800b222:	d111      	bne.n	800b248 <__ieee754_pow+0x40>
 800b224:	1803      	adds	r3, r0, r0
 800b226:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b22a:	4152      	adcs	r2, r2
 800b22c:	4299      	cmp	r1, r3
 800b22e:	4b82      	ldr	r3, [pc, #520]	; (800b438 <__ieee754_pow+0x230>)
 800b230:	4193      	sbcs	r3, r2
 800b232:	f080 84b9 	bcs.w	800bba8 <__ieee754_pow+0x9a0>
 800b236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b23a:	4640      	mov	r0, r8
 800b23c:	4649      	mov	r1, r9
 800b23e:	f7f4 ff8d 	bl	800015c <__adddf3>
 800b242:	4683      	mov	fp, r0
 800b244:	468c      	mov	ip, r1
 800b246:	e06f      	b.n	800b328 <__ieee754_pow+0x120>
 800b248:	4b7c      	ldr	r3, [pc, #496]	; (800b43c <__ieee754_pow+0x234>)
 800b24a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b24e:	429c      	cmp	r4, r3
 800b250:	464d      	mov	r5, r9
 800b252:	4682      	mov	sl, r0
 800b254:	dc06      	bgt.n	800b264 <__ieee754_pow+0x5c>
 800b256:	d101      	bne.n	800b25c <__ieee754_pow+0x54>
 800b258:	2800      	cmp	r0, #0
 800b25a:	d1ec      	bne.n	800b236 <__ieee754_pow+0x2e>
 800b25c:	429e      	cmp	r6, r3
 800b25e:	dc01      	bgt.n	800b264 <__ieee754_pow+0x5c>
 800b260:	d10f      	bne.n	800b282 <__ieee754_pow+0x7a>
 800b262:	b172      	cbz	r2, 800b282 <__ieee754_pow+0x7a>
 800b264:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b268:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b26c:	ea55 050a 	orrs.w	r5, r5, sl
 800b270:	d1e1      	bne.n	800b236 <__ieee754_pow+0x2e>
 800b272:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b276:	18db      	adds	r3, r3, r3
 800b278:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b27c:	4152      	adcs	r2, r2
 800b27e:	429d      	cmp	r5, r3
 800b280:	e7d5      	b.n	800b22e <__ieee754_pow+0x26>
 800b282:	2d00      	cmp	r5, #0
 800b284:	da39      	bge.n	800b2fa <__ieee754_pow+0xf2>
 800b286:	4b6e      	ldr	r3, [pc, #440]	; (800b440 <__ieee754_pow+0x238>)
 800b288:	429e      	cmp	r6, r3
 800b28a:	dc52      	bgt.n	800b332 <__ieee754_pow+0x12a>
 800b28c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b290:	429e      	cmp	r6, r3
 800b292:	f340 849c 	ble.w	800bbce <__ieee754_pow+0x9c6>
 800b296:	1533      	asrs	r3, r6, #20
 800b298:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b29c:	2b14      	cmp	r3, #20
 800b29e:	dd0f      	ble.n	800b2c0 <__ieee754_pow+0xb8>
 800b2a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b2a4:	fa22 f103 	lsr.w	r1, r2, r3
 800b2a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	f040 848e 	bne.w	800bbce <__ieee754_pow+0x9c6>
 800b2b2:	f001 0101 	and.w	r1, r1, #1
 800b2b6:	f1c1 0302 	rsb	r3, r1, #2
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	b182      	cbz	r2, 800b2e0 <__ieee754_pow+0xd8>
 800b2be:	e05d      	b.n	800b37c <__ieee754_pow+0x174>
 800b2c0:	2a00      	cmp	r2, #0
 800b2c2:	d159      	bne.n	800b378 <__ieee754_pow+0x170>
 800b2c4:	f1c3 0314 	rsb	r3, r3, #20
 800b2c8:	fa46 f103 	asr.w	r1, r6, r3
 800b2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b2d0:	42b3      	cmp	r3, r6
 800b2d2:	f040 8479 	bne.w	800bbc8 <__ieee754_pow+0x9c0>
 800b2d6:	f001 0101 	and.w	r1, r1, #1
 800b2da:	f1c1 0302 	rsb	r3, r1, #2
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	4b58      	ldr	r3, [pc, #352]	; (800b444 <__ieee754_pow+0x23c>)
 800b2e2:	429e      	cmp	r6, r3
 800b2e4:	d132      	bne.n	800b34c <__ieee754_pow+0x144>
 800b2e6:	2f00      	cmp	r7, #0
 800b2e8:	f280 846a 	bge.w	800bbc0 <__ieee754_pow+0x9b8>
 800b2ec:	4642      	mov	r2, r8
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	4954      	ldr	r1, [pc, #336]	; (800b444 <__ieee754_pow+0x23c>)
 800b2f4:	f7f5 fa12 	bl	800071c <__aeabi_ddiv>
 800b2f8:	e7a3      	b.n	800b242 <__ieee754_pow+0x3a>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	2a00      	cmp	r2, #0
 800b300:	d13c      	bne.n	800b37c <__ieee754_pow+0x174>
 800b302:	4b4e      	ldr	r3, [pc, #312]	; (800b43c <__ieee754_pow+0x234>)
 800b304:	429e      	cmp	r6, r3
 800b306:	d1eb      	bne.n	800b2e0 <__ieee754_pow+0xd8>
 800b308:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b30c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b310:	ea53 030a 	orrs.w	r3, r3, sl
 800b314:	f000 8448 	beq.w	800bba8 <__ieee754_pow+0x9a0>
 800b318:	4b4b      	ldr	r3, [pc, #300]	; (800b448 <__ieee754_pow+0x240>)
 800b31a:	429c      	cmp	r4, r3
 800b31c:	dd0b      	ble.n	800b336 <__ieee754_pow+0x12e>
 800b31e:	2f00      	cmp	r7, #0
 800b320:	f2c0 8448 	blt.w	800bbb4 <__ieee754_pow+0x9ac>
 800b324:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b328:	4658      	mov	r0, fp
 800b32a:	4661      	mov	r1, ip
 800b32c:	b013      	add	sp, #76	; 0x4c
 800b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b332:	2302      	movs	r3, #2
 800b334:	e7e2      	b.n	800b2fc <__ieee754_pow+0xf4>
 800b336:	2f00      	cmp	r7, #0
 800b338:	f04f 0b00 	mov.w	fp, #0
 800b33c:	f04f 0c00 	mov.w	ip, #0
 800b340:	daf2      	bge.n	800b328 <__ieee754_pow+0x120>
 800b342:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b346:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b34a:	e7ed      	b.n	800b328 <__ieee754_pow+0x120>
 800b34c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b350:	d106      	bne.n	800b360 <__ieee754_pow+0x158>
 800b352:	4642      	mov	r2, r8
 800b354:	464b      	mov	r3, r9
 800b356:	4640      	mov	r0, r8
 800b358:	4649      	mov	r1, r9
 800b35a:	f7f5 f8b5 	bl	80004c8 <__aeabi_dmul>
 800b35e:	e770      	b.n	800b242 <__ieee754_pow+0x3a>
 800b360:	4b3a      	ldr	r3, [pc, #232]	; (800b44c <__ieee754_pow+0x244>)
 800b362:	429f      	cmp	r7, r3
 800b364:	d10a      	bne.n	800b37c <__ieee754_pow+0x174>
 800b366:	2d00      	cmp	r5, #0
 800b368:	db08      	blt.n	800b37c <__ieee754_pow+0x174>
 800b36a:	4640      	mov	r0, r8
 800b36c:	4649      	mov	r1, r9
 800b36e:	b013      	add	sp, #76	; 0x4c
 800b370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b374:	f000 bc5e 	b.w	800bc34 <__ieee754_sqrt>
 800b378:	2300      	movs	r3, #0
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	4640      	mov	r0, r8
 800b37e:	4649      	mov	r1, r9
 800b380:	f000 ff4f 	bl	800c222 <fabs>
 800b384:	4683      	mov	fp, r0
 800b386:	468c      	mov	ip, r1
 800b388:	f1ba 0f00 	cmp.w	sl, #0
 800b38c:	d128      	bne.n	800b3e0 <__ieee754_pow+0x1d8>
 800b38e:	b124      	cbz	r4, 800b39a <__ieee754_pow+0x192>
 800b390:	4b2c      	ldr	r3, [pc, #176]	; (800b444 <__ieee754_pow+0x23c>)
 800b392:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b396:	429a      	cmp	r2, r3
 800b398:	d122      	bne.n	800b3e0 <__ieee754_pow+0x1d8>
 800b39a:	2f00      	cmp	r7, #0
 800b39c:	da07      	bge.n	800b3ae <__ieee754_pow+0x1a6>
 800b39e:	465a      	mov	r2, fp
 800b3a0:	4663      	mov	r3, ip
 800b3a2:	2000      	movs	r0, #0
 800b3a4:	4927      	ldr	r1, [pc, #156]	; (800b444 <__ieee754_pow+0x23c>)
 800b3a6:	f7f5 f9b9 	bl	800071c <__aeabi_ddiv>
 800b3aa:	4683      	mov	fp, r0
 800b3ac:	468c      	mov	ip, r1
 800b3ae:	2d00      	cmp	r5, #0
 800b3b0:	daba      	bge.n	800b328 <__ieee754_pow+0x120>
 800b3b2:	9b00      	ldr	r3, [sp, #0]
 800b3b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b3b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b3bc:	4323      	orrs	r3, r4
 800b3be:	d108      	bne.n	800b3d2 <__ieee754_pow+0x1ca>
 800b3c0:	465a      	mov	r2, fp
 800b3c2:	4663      	mov	r3, ip
 800b3c4:	4658      	mov	r0, fp
 800b3c6:	4661      	mov	r1, ip
 800b3c8:	f7f4 fec6 	bl	8000158 <__aeabi_dsub>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	e790      	b.n	800b2f4 <__ieee754_pow+0xec>
 800b3d2:	9b00      	ldr	r3, [sp, #0]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d1a7      	bne.n	800b328 <__ieee754_pow+0x120>
 800b3d8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b3dc:	469c      	mov	ip, r3
 800b3de:	e7a3      	b.n	800b328 <__ieee754_pow+0x120>
 800b3e0:	0feb      	lsrs	r3, r5, #31
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	930c      	str	r3, [sp, #48]	; 0x30
 800b3e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3e8:	9b00      	ldr	r3, [sp, #0]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	d104      	bne.n	800b3f8 <__ieee754_pow+0x1f0>
 800b3ee:	4642      	mov	r2, r8
 800b3f0:	464b      	mov	r3, r9
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	e7e7      	b.n	800b3c8 <__ieee754_pow+0x1c0>
 800b3f8:	4b15      	ldr	r3, [pc, #84]	; (800b450 <__ieee754_pow+0x248>)
 800b3fa:	429e      	cmp	r6, r3
 800b3fc:	f340 80f6 	ble.w	800b5ec <__ieee754_pow+0x3e4>
 800b400:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b404:	429e      	cmp	r6, r3
 800b406:	4b10      	ldr	r3, [pc, #64]	; (800b448 <__ieee754_pow+0x240>)
 800b408:	dd09      	ble.n	800b41e <__ieee754_pow+0x216>
 800b40a:	429c      	cmp	r4, r3
 800b40c:	dc0c      	bgt.n	800b428 <__ieee754_pow+0x220>
 800b40e:	2f00      	cmp	r7, #0
 800b410:	da0c      	bge.n	800b42c <__ieee754_pow+0x224>
 800b412:	2000      	movs	r0, #0
 800b414:	b013      	add	sp, #76	; 0x4c
 800b416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41a:	f000 befd 	b.w	800c218 <__math_oflow>
 800b41e:	429c      	cmp	r4, r3
 800b420:	dbf5      	blt.n	800b40e <__ieee754_pow+0x206>
 800b422:	4b08      	ldr	r3, [pc, #32]	; (800b444 <__ieee754_pow+0x23c>)
 800b424:	429c      	cmp	r4, r3
 800b426:	dd15      	ble.n	800b454 <__ieee754_pow+0x24c>
 800b428:	2f00      	cmp	r7, #0
 800b42a:	dcf2      	bgt.n	800b412 <__ieee754_pow+0x20a>
 800b42c:	2000      	movs	r0, #0
 800b42e:	b013      	add	sp, #76	; 0x4c
 800b430:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	f000 beeb 	b.w	800c20e <__math_uflow>
 800b438:	fff00000 	.word	0xfff00000
 800b43c:	7ff00000 	.word	0x7ff00000
 800b440:	433fffff 	.word	0x433fffff
 800b444:	3ff00000 	.word	0x3ff00000
 800b448:	3fefffff 	.word	0x3fefffff
 800b44c:	3fe00000 	.word	0x3fe00000
 800b450:	41e00000 	.word	0x41e00000
 800b454:	4661      	mov	r1, ip
 800b456:	2200      	movs	r2, #0
 800b458:	4658      	mov	r0, fp
 800b45a:	4b5f      	ldr	r3, [pc, #380]	; (800b5d8 <__ieee754_pow+0x3d0>)
 800b45c:	f7f4 fe7c 	bl	8000158 <__aeabi_dsub>
 800b460:	a355      	add	r3, pc, #340	; (adr r3, 800b5b8 <__ieee754_pow+0x3b0>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	4604      	mov	r4, r0
 800b468:	460d      	mov	r5, r1
 800b46a:	f7f5 f82d 	bl	80004c8 <__aeabi_dmul>
 800b46e:	a354      	add	r3, pc, #336	; (adr r3, 800b5c0 <__ieee754_pow+0x3b8>)
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	4606      	mov	r6, r0
 800b476:	460f      	mov	r7, r1
 800b478:	4620      	mov	r0, r4
 800b47a:	4629      	mov	r1, r5
 800b47c:	f7f5 f824 	bl	80004c8 <__aeabi_dmul>
 800b480:	2200      	movs	r2, #0
 800b482:	4682      	mov	sl, r0
 800b484:	468b      	mov	fp, r1
 800b486:	4620      	mov	r0, r4
 800b488:	4629      	mov	r1, r5
 800b48a:	4b54      	ldr	r3, [pc, #336]	; (800b5dc <__ieee754_pow+0x3d4>)
 800b48c:	f7f5 f81c 	bl	80004c8 <__aeabi_dmul>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	a14c      	add	r1, pc, #304	; (adr r1, 800b5c8 <__ieee754_pow+0x3c0>)
 800b496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b49a:	f7f4 fe5d 	bl	8000158 <__aeabi_dsub>
 800b49e:	4622      	mov	r2, r4
 800b4a0:	462b      	mov	r3, r5
 800b4a2:	f7f5 f811 	bl	80004c8 <__aeabi_dmul>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	494c      	ldr	r1, [pc, #304]	; (800b5e0 <__ieee754_pow+0x3d8>)
 800b4ae:	f7f4 fe53 	bl	8000158 <__aeabi_dsub>
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	4680      	mov	r8, r0
 800b4b8:	4689      	mov	r9, r1
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7f5 f803 	bl	80004c8 <__aeabi_dmul>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	4640      	mov	r0, r8
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	f7f4 fffd 	bl	80004c8 <__aeabi_dmul>
 800b4ce:	a340      	add	r3, pc, #256	; (adr r3, 800b5d0 <__ieee754_pow+0x3c8>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7f4 fff8 	bl	80004c8 <__aeabi_dmul>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4650      	mov	r0, sl
 800b4de:	4659      	mov	r1, fp
 800b4e0:	f7f4 fe3a 	bl	8000158 <__aeabi_dsub>
 800b4e4:	f04f 0a00 	mov.w	sl, #0
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	460d      	mov	r5, r1
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f7f4 fe32 	bl	800015c <__adddf3>
 800b4f8:	4632      	mov	r2, r6
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	4650      	mov	r0, sl
 800b4fe:	468b      	mov	fp, r1
 800b500:	f7f4 fe2a 	bl	8000158 <__aeabi_dsub>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4620      	mov	r0, r4
 800b50a:	4629      	mov	r1, r5
 800b50c:	f7f4 fe24 	bl	8000158 <__aeabi_dsub>
 800b510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b514:	9b00      	ldr	r3, [sp, #0]
 800b516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b518:	3b01      	subs	r3, #1
 800b51a:	4313      	orrs	r3, r2
 800b51c:	f04f 0600 	mov.w	r6, #0
 800b520:	f04f 0200 	mov.w	r2, #0
 800b524:	bf0c      	ite	eq
 800b526:	4b2f      	ldreq	r3, [pc, #188]	; (800b5e4 <__ieee754_pow+0x3dc>)
 800b528:	4b2b      	ldrne	r3, [pc, #172]	; (800b5d8 <__ieee754_pow+0x3d0>)
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
 800b52e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b532:	e9cd 2300 	strd	r2, r3, [sp]
 800b536:	4632      	mov	r2, r6
 800b538:	463b      	mov	r3, r7
 800b53a:	f7f4 fe0d 	bl	8000158 <__aeabi_dsub>
 800b53e:	4652      	mov	r2, sl
 800b540:	465b      	mov	r3, fp
 800b542:	f7f4 ffc1 	bl	80004c8 <__aeabi_dmul>
 800b546:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b54a:	4680      	mov	r8, r0
 800b54c:	4689      	mov	r9, r1
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f4 ffb9 	bl	80004c8 <__aeabi_dmul>
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	4640      	mov	r0, r8
 800b55c:	4649      	mov	r1, r9
 800b55e:	f7f4 fdfd 	bl	800015c <__adddf3>
 800b562:	4632      	mov	r2, r6
 800b564:	463b      	mov	r3, r7
 800b566:	4680      	mov	r8, r0
 800b568:	4689      	mov	r9, r1
 800b56a:	4650      	mov	r0, sl
 800b56c:	4659      	mov	r1, fp
 800b56e:	f7f4 ffab 	bl	80004c8 <__aeabi_dmul>
 800b572:	4604      	mov	r4, r0
 800b574:	460d      	mov	r5, r1
 800b576:	460b      	mov	r3, r1
 800b578:	4602      	mov	r2, r0
 800b57a:	4649      	mov	r1, r9
 800b57c:	4640      	mov	r0, r8
 800b57e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b582:	f7f4 fdeb 	bl	800015c <__adddf3>
 800b586:	4b18      	ldr	r3, [pc, #96]	; (800b5e8 <__ieee754_pow+0x3e0>)
 800b588:	4682      	mov	sl, r0
 800b58a:	4299      	cmp	r1, r3
 800b58c:	460f      	mov	r7, r1
 800b58e:	460e      	mov	r6, r1
 800b590:	f340 82e5 	ble.w	800bb5e <__ieee754_pow+0x956>
 800b594:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b598:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b59c:	4303      	orrs	r3, r0
 800b59e:	f000 81df 	beq.w	800b960 <__ieee754_pow+0x758>
 800b5a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f7f5 f9ff 	bl	80009ac <__aeabi_dcmplt>
 800b5ae:	3800      	subs	r0, #0
 800b5b0:	bf18      	it	ne
 800b5b2:	2001      	movne	r0, #1
 800b5b4:	e72e      	b.n	800b414 <__ieee754_pow+0x20c>
 800b5b6:	bf00      	nop
 800b5b8:	60000000 	.word	0x60000000
 800b5bc:	3ff71547 	.word	0x3ff71547
 800b5c0:	f85ddf44 	.word	0xf85ddf44
 800b5c4:	3e54ae0b 	.word	0x3e54ae0b
 800b5c8:	55555555 	.word	0x55555555
 800b5cc:	3fd55555 	.word	0x3fd55555
 800b5d0:	652b82fe 	.word	0x652b82fe
 800b5d4:	3ff71547 	.word	0x3ff71547
 800b5d8:	3ff00000 	.word	0x3ff00000
 800b5dc:	3fd00000 	.word	0x3fd00000
 800b5e0:	3fe00000 	.word	0x3fe00000
 800b5e4:	bff00000 	.word	0xbff00000
 800b5e8:	408fffff 	.word	0x408fffff
 800b5ec:	4bd2      	ldr	r3, [pc, #840]	; (800b938 <__ieee754_pow+0x730>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	402b      	ands	r3, r5
 800b5f2:	b943      	cbnz	r3, 800b606 <__ieee754_pow+0x3fe>
 800b5f4:	4658      	mov	r0, fp
 800b5f6:	4661      	mov	r1, ip
 800b5f8:	4bd0      	ldr	r3, [pc, #832]	; (800b93c <__ieee754_pow+0x734>)
 800b5fa:	f7f4 ff65 	bl	80004c8 <__aeabi_dmul>
 800b5fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b602:	4683      	mov	fp, r0
 800b604:	460c      	mov	r4, r1
 800b606:	1523      	asrs	r3, r4, #20
 800b608:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b60c:	4413      	add	r3, r2
 800b60e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b610:	4bcb      	ldr	r3, [pc, #812]	; (800b940 <__ieee754_pow+0x738>)
 800b612:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b616:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b61a:	429c      	cmp	r4, r3
 800b61c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b620:	dd08      	ble.n	800b634 <__ieee754_pow+0x42c>
 800b622:	4bc8      	ldr	r3, [pc, #800]	; (800b944 <__ieee754_pow+0x73c>)
 800b624:	429c      	cmp	r4, r3
 800b626:	f340 8199 	ble.w	800b95c <__ieee754_pow+0x754>
 800b62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b62c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b630:	3301      	adds	r3, #1
 800b632:	930b      	str	r3, [sp, #44]	; 0x2c
 800b634:	2600      	movs	r6, #0
 800b636:	00f3      	lsls	r3, r6, #3
 800b638:	930d      	str	r3, [sp, #52]	; 0x34
 800b63a:	4bc3      	ldr	r3, [pc, #780]	; (800b948 <__ieee754_pow+0x740>)
 800b63c:	4658      	mov	r0, fp
 800b63e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b642:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b646:	4629      	mov	r1, r5
 800b648:	461a      	mov	r2, r3
 800b64a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b64e:	4623      	mov	r3, r4
 800b650:	f7f4 fd82 	bl	8000158 <__aeabi_dsub>
 800b654:	46da      	mov	sl, fp
 800b656:	462b      	mov	r3, r5
 800b658:	4652      	mov	r2, sl
 800b65a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b65e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b662:	f7f4 fd7b 	bl	800015c <__adddf3>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	2000      	movs	r0, #0
 800b66c:	49b7      	ldr	r1, [pc, #732]	; (800b94c <__ieee754_pow+0x744>)
 800b66e:	f7f5 f855 	bl	800071c <__aeabi_ddiv>
 800b672:	4602      	mov	r2, r0
 800b674:	460b      	mov	r3, r1
 800b676:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b67a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b67e:	f7f4 ff23 	bl	80004c8 <__aeabi_dmul>
 800b682:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b686:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b68a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b68e:	2300      	movs	r3, #0
 800b690:	2200      	movs	r2, #0
 800b692:	46ab      	mov	fp, r5
 800b694:	106d      	asrs	r5, r5, #1
 800b696:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b69a:	9304      	str	r3, [sp, #16]
 800b69c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b6a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b6a4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	4614      	mov	r4, r2
 800b6ae:	461d      	mov	r5, r3
 800b6b0:	f7f4 ff0a 	bl	80004c8 <__aeabi_dmul>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b6bc:	f7f4 fd4c 	bl	8000158 <__aeabi_dsub>
 800b6c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	460f      	mov	r7, r1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7f4 fd44 	bl	8000158 <__aeabi_dsub>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4650      	mov	r0, sl
 800b6d6:	4659      	mov	r1, fp
 800b6d8:	f7f4 fd3e 	bl	8000158 <__aeabi_dsub>
 800b6dc:	4642      	mov	r2, r8
 800b6de:	464b      	mov	r3, r9
 800b6e0:	f7f4 fef2 	bl	80004c8 <__aeabi_dmul>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	f7f4 fd34 	bl	8000158 <__aeabi_dsub>
 800b6f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b6f4:	f7f4 fee8 	bl	80004c8 <__aeabi_dmul>
 800b6f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b700:	4610      	mov	r0, r2
 800b702:	4619      	mov	r1, r3
 800b704:	f7f4 fee0 	bl	80004c8 <__aeabi_dmul>
 800b708:	a379      	add	r3, pc, #484	; (adr r3, 800b8f0 <__ieee754_pow+0x6e8>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	4604      	mov	r4, r0
 800b710:	460d      	mov	r5, r1
 800b712:	f7f4 fed9 	bl	80004c8 <__aeabi_dmul>
 800b716:	a378      	add	r3, pc, #480	; (adr r3, 800b8f8 <__ieee754_pow+0x6f0>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f7f4 fd1e 	bl	800015c <__adddf3>
 800b720:	4622      	mov	r2, r4
 800b722:	462b      	mov	r3, r5
 800b724:	f7f4 fed0 	bl	80004c8 <__aeabi_dmul>
 800b728:	a375      	add	r3, pc, #468	; (adr r3, 800b900 <__ieee754_pow+0x6f8>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 fd15 	bl	800015c <__adddf3>
 800b732:	4622      	mov	r2, r4
 800b734:	462b      	mov	r3, r5
 800b736:	f7f4 fec7 	bl	80004c8 <__aeabi_dmul>
 800b73a:	a373      	add	r3, pc, #460	; (adr r3, 800b908 <__ieee754_pow+0x700>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	f7f4 fd0c 	bl	800015c <__adddf3>
 800b744:	4622      	mov	r2, r4
 800b746:	462b      	mov	r3, r5
 800b748:	f7f4 febe 	bl	80004c8 <__aeabi_dmul>
 800b74c:	a370      	add	r3, pc, #448	; (adr r3, 800b910 <__ieee754_pow+0x708>)
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f7f4 fd03 	bl	800015c <__adddf3>
 800b756:	4622      	mov	r2, r4
 800b758:	462b      	mov	r3, r5
 800b75a:	f7f4 feb5 	bl	80004c8 <__aeabi_dmul>
 800b75e:	a36e      	add	r3, pc, #440	; (adr r3, 800b918 <__ieee754_pow+0x710>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f7f4 fcfa 	bl	800015c <__adddf3>
 800b768:	4622      	mov	r2, r4
 800b76a:	4606      	mov	r6, r0
 800b76c:	460f      	mov	r7, r1
 800b76e:	462b      	mov	r3, r5
 800b770:	4620      	mov	r0, r4
 800b772:	4629      	mov	r1, r5
 800b774:	f7f4 fea8 	bl	80004c8 <__aeabi_dmul>
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4630      	mov	r0, r6
 800b77e:	4639      	mov	r1, r7
 800b780:	f7f4 fea2 	bl	80004c8 <__aeabi_dmul>
 800b784:	4604      	mov	r4, r0
 800b786:	460d      	mov	r5, r1
 800b788:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b78c:	4642      	mov	r2, r8
 800b78e:	464b      	mov	r3, r9
 800b790:	f7f4 fce4 	bl	800015c <__adddf3>
 800b794:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b798:	f7f4 fe96 	bl	80004c8 <__aeabi_dmul>
 800b79c:	4622      	mov	r2, r4
 800b79e:	462b      	mov	r3, r5
 800b7a0:	f7f4 fcdc 	bl	800015c <__adddf3>
 800b7a4:	4642      	mov	r2, r8
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	460f      	mov	r7, r1
 800b7aa:	464b      	mov	r3, r9
 800b7ac:	4640      	mov	r0, r8
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	f7f4 fe8a 	bl	80004c8 <__aeabi_dmul>
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	4b66      	ldr	r3, [pc, #408]	; (800b950 <__ieee754_pow+0x748>)
 800b7b8:	4682      	mov	sl, r0
 800b7ba:	468b      	mov	fp, r1
 800b7bc:	f7f4 fcce 	bl	800015c <__adddf3>
 800b7c0:	4632      	mov	r2, r6
 800b7c2:	463b      	mov	r3, r7
 800b7c4:	f7f4 fcca 	bl	800015c <__adddf3>
 800b7c8:	2400      	movs	r4, #0
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	4649      	mov	r1, r9
 800b7d4:	f7f4 fe78 	bl	80004c8 <__aeabi_dmul>
 800b7d8:	2200      	movs	r2, #0
 800b7da:	4680      	mov	r8, r0
 800b7dc:	4689      	mov	r9, r1
 800b7de:	4620      	mov	r0, r4
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4b5b      	ldr	r3, [pc, #364]	; (800b950 <__ieee754_pow+0x748>)
 800b7e4:	f7f4 fcb8 	bl	8000158 <__aeabi_dsub>
 800b7e8:	4652      	mov	r2, sl
 800b7ea:	465b      	mov	r3, fp
 800b7ec:	f7f4 fcb4 	bl	8000158 <__aeabi_dsub>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f4 fcae 	bl	8000158 <__aeabi_dsub>
 800b7fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b800:	f7f4 fe62 	bl	80004c8 <__aeabi_dmul>
 800b804:	4622      	mov	r2, r4
 800b806:	4606      	mov	r6, r0
 800b808:	460f      	mov	r7, r1
 800b80a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b80e:	462b      	mov	r3, r5
 800b810:	f7f4 fe5a 	bl	80004c8 <__aeabi_dmul>
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	4630      	mov	r0, r6
 800b81a:	4639      	mov	r1, r7
 800b81c:	f7f4 fc9e 	bl	800015c <__adddf3>
 800b820:	2400      	movs	r4, #0
 800b822:	4606      	mov	r6, r0
 800b824:	460f      	mov	r7, r1
 800b826:	4602      	mov	r2, r0
 800b828:	460b      	mov	r3, r1
 800b82a:	4640      	mov	r0, r8
 800b82c:	4649      	mov	r1, r9
 800b82e:	f7f4 fc95 	bl	800015c <__adddf3>
 800b832:	a33b      	add	r3, pc, #236	; (adr r3, 800b920 <__ieee754_pow+0x718>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	4620      	mov	r0, r4
 800b83a:	460d      	mov	r5, r1
 800b83c:	f7f4 fe44 	bl	80004c8 <__aeabi_dmul>
 800b840:	4642      	mov	r2, r8
 800b842:	464b      	mov	r3, r9
 800b844:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b848:	4620      	mov	r0, r4
 800b84a:	4629      	mov	r1, r5
 800b84c:	f7f4 fc84 	bl	8000158 <__aeabi_dsub>
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	4630      	mov	r0, r6
 800b856:	4639      	mov	r1, r7
 800b858:	f7f4 fc7e 	bl	8000158 <__aeabi_dsub>
 800b85c:	a332      	add	r3, pc, #200	; (adr r3, 800b928 <__ieee754_pow+0x720>)
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	f7f4 fe31 	bl	80004c8 <__aeabi_dmul>
 800b866:	a332      	add	r3, pc, #200	; (adr r3, 800b930 <__ieee754_pow+0x728>)
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	4606      	mov	r6, r0
 800b86e:	460f      	mov	r7, r1
 800b870:	4620      	mov	r0, r4
 800b872:	4629      	mov	r1, r5
 800b874:	f7f4 fe28 	bl	80004c8 <__aeabi_dmul>
 800b878:	4602      	mov	r2, r0
 800b87a:	460b      	mov	r3, r1
 800b87c:	4630      	mov	r0, r6
 800b87e:	4639      	mov	r1, r7
 800b880:	f7f4 fc6c 	bl	800015c <__adddf3>
 800b884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b886:	4b33      	ldr	r3, [pc, #204]	; (800b954 <__ieee754_pow+0x74c>)
 800b888:	f04f 0a00 	mov.w	sl, #0
 800b88c:	4413      	add	r3, r2
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	f7f4 fc63 	bl	800015c <__adddf3>
 800b896:	4680      	mov	r8, r0
 800b898:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b89a:	4689      	mov	r9, r1
 800b89c:	f7f4 fdaa 	bl	80003f4 <__aeabi_i2d>
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	460d      	mov	r5, r1
 800b8a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8a6:	4b2c      	ldr	r3, [pc, #176]	; (800b958 <__ieee754_pow+0x750>)
 800b8a8:	4413      	add	r3, r2
 800b8aa:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b8ae:	4642      	mov	r2, r8
 800b8b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8b4:	464b      	mov	r3, r9
 800b8b6:	f7f4 fc51 	bl	800015c <__adddf3>
 800b8ba:	4632      	mov	r2, r6
 800b8bc:	463b      	mov	r3, r7
 800b8be:	f7f4 fc4d 	bl	800015c <__adddf3>
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	462b      	mov	r3, r5
 800b8c6:	f7f4 fc49 	bl	800015c <__adddf3>
 800b8ca:	4622      	mov	r2, r4
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	4650      	mov	r0, sl
 800b8d0:	468b      	mov	fp, r1
 800b8d2:	f7f4 fc41 	bl	8000158 <__aeabi_dsub>
 800b8d6:	4632      	mov	r2, r6
 800b8d8:	463b      	mov	r3, r7
 800b8da:	f7f4 fc3d 	bl	8000158 <__aeabi_dsub>
 800b8de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8e2:	f7f4 fc39 	bl	8000158 <__aeabi_dsub>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	4649      	mov	r1, r9
 800b8ee:	e60d      	b.n	800b50c <__ieee754_pow+0x304>
 800b8f0:	4a454eef 	.word	0x4a454eef
 800b8f4:	3fca7e28 	.word	0x3fca7e28
 800b8f8:	93c9db65 	.word	0x93c9db65
 800b8fc:	3fcd864a 	.word	0x3fcd864a
 800b900:	a91d4101 	.word	0xa91d4101
 800b904:	3fd17460 	.word	0x3fd17460
 800b908:	518f264d 	.word	0x518f264d
 800b90c:	3fd55555 	.word	0x3fd55555
 800b910:	db6fabff 	.word	0xdb6fabff
 800b914:	3fdb6db6 	.word	0x3fdb6db6
 800b918:	33333303 	.word	0x33333303
 800b91c:	3fe33333 	.word	0x3fe33333
 800b920:	e0000000 	.word	0xe0000000
 800b924:	3feec709 	.word	0x3feec709
 800b928:	dc3a03fd 	.word	0xdc3a03fd
 800b92c:	3feec709 	.word	0x3feec709
 800b930:	145b01f5 	.word	0x145b01f5
 800b934:	be3e2fe0 	.word	0xbe3e2fe0
 800b938:	7ff00000 	.word	0x7ff00000
 800b93c:	43400000 	.word	0x43400000
 800b940:	0003988e 	.word	0x0003988e
 800b944:	000bb679 	.word	0x000bb679
 800b948:	0800c818 	.word	0x0800c818
 800b94c:	3ff00000 	.word	0x3ff00000
 800b950:	40080000 	.word	0x40080000
 800b954:	0800c838 	.word	0x0800c838
 800b958:	0800c828 	.word	0x0800c828
 800b95c:	2601      	movs	r6, #1
 800b95e:	e66a      	b.n	800b636 <__ieee754_pow+0x42e>
 800b960:	a39d      	add	r3, pc, #628	; (adr r3, 800bbd8 <__ieee754_pow+0x9d0>)
 800b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b966:	4640      	mov	r0, r8
 800b968:	4649      	mov	r1, r9
 800b96a:	f7f4 fbf7 	bl	800015c <__adddf3>
 800b96e:	4622      	mov	r2, r4
 800b970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b974:	462b      	mov	r3, r5
 800b976:	4650      	mov	r0, sl
 800b978:	4639      	mov	r1, r7
 800b97a:	f7f4 fbed 	bl	8000158 <__aeabi_dsub>
 800b97e:	4602      	mov	r2, r0
 800b980:	460b      	mov	r3, r1
 800b982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b986:	f7f5 f82f 	bl	80009e8 <__aeabi_dcmpgt>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	f47f ae09 	bne.w	800b5a2 <__ieee754_pow+0x39a>
 800b990:	4aa3      	ldr	r2, [pc, #652]	; (800bc20 <__ieee754_pow+0xa18>)
 800b992:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b996:	4293      	cmp	r3, r2
 800b998:	f340 8101 	ble.w	800bb9e <__ieee754_pow+0x996>
 800b99c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	151b      	asrs	r3, r3, #20
 800b9a4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b9a8:	fa4a f303 	asr.w	r3, sl, r3
 800b9ac:	4433      	add	r3, r6
 800b9ae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b9b2:	4f9c      	ldr	r7, [pc, #624]	; (800bc24 <__ieee754_pow+0xa1c>)
 800b9b4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b9b8:	4117      	asrs	r7, r2
 800b9ba:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b9be:	ea23 0107 	bic.w	r1, r3, r7
 800b9c2:	f1c2 0214 	rsb	r2, r2, #20
 800b9c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	fa4a fa02 	asr.w	sl, sl, r2
 800b9d0:	2e00      	cmp	r6, #0
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	bfb8      	it	lt
 800b9da:	f1ca 0a00 	rsblt	sl, sl, #0
 800b9de:	f7f4 fbbb 	bl	8000158 <__aeabi_dsub>
 800b9e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ea:	2400      	movs	r4, #0
 800b9ec:	4642      	mov	r2, r8
 800b9ee:	464b      	mov	r3, r9
 800b9f0:	f7f4 fbb4 	bl	800015c <__adddf3>
 800b9f4:	a37a      	add	r3, pc, #488	; (adr r3, 800bbe0 <__ieee754_pow+0x9d8>)
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	460d      	mov	r5, r1
 800b9fe:	f7f4 fd63 	bl	80004c8 <__aeabi_dmul>
 800ba02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba06:	4606      	mov	r6, r0
 800ba08:	460f      	mov	r7, r1
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	f7f4 fba3 	bl	8000158 <__aeabi_dsub>
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
 800ba16:	4640      	mov	r0, r8
 800ba18:	4649      	mov	r1, r9
 800ba1a:	f7f4 fb9d 	bl	8000158 <__aeabi_dsub>
 800ba1e:	a372      	add	r3, pc, #456	; (adr r3, 800bbe8 <__ieee754_pow+0x9e0>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	f7f4 fd50 	bl	80004c8 <__aeabi_dmul>
 800ba28:	a371      	add	r3, pc, #452	; (adr r3, 800bbf0 <__ieee754_pow+0x9e8>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	4680      	mov	r8, r0
 800ba30:	4689      	mov	r9, r1
 800ba32:	4620      	mov	r0, r4
 800ba34:	4629      	mov	r1, r5
 800ba36:	f7f4 fd47 	bl	80004c8 <__aeabi_dmul>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4640      	mov	r0, r8
 800ba40:	4649      	mov	r1, r9
 800ba42:	f7f4 fb8b 	bl	800015c <__adddf3>
 800ba46:	4604      	mov	r4, r0
 800ba48:	460d      	mov	r5, r1
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4630      	mov	r0, r6
 800ba50:	4639      	mov	r1, r7
 800ba52:	f7f4 fb83 	bl	800015c <__adddf3>
 800ba56:	4632      	mov	r2, r6
 800ba58:	463b      	mov	r3, r7
 800ba5a:	4680      	mov	r8, r0
 800ba5c:	4689      	mov	r9, r1
 800ba5e:	f7f4 fb7b 	bl	8000158 <__aeabi_dsub>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	4620      	mov	r0, r4
 800ba68:	4629      	mov	r1, r5
 800ba6a:	f7f4 fb75 	bl	8000158 <__aeabi_dsub>
 800ba6e:	4642      	mov	r2, r8
 800ba70:	4606      	mov	r6, r0
 800ba72:	460f      	mov	r7, r1
 800ba74:	464b      	mov	r3, r9
 800ba76:	4640      	mov	r0, r8
 800ba78:	4649      	mov	r1, r9
 800ba7a:	f7f4 fd25 	bl	80004c8 <__aeabi_dmul>
 800ba7e:	a35e      	add	r3, pc, #376	; (adr r3, 800bbf8 <__ieee754_pow+0x9f0>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	4604      	mov	r4, r0
 800ba86:	460d      	mov	r5, r1
 800ba88:	f7f4 fd1e 	bl	80004c8 <__aeabi_dmul>
 800ba8c:	a35c      	add	r3, pc, #368	; (adr r3, 800bc00 <__ieee754_pow+0x9f8>)
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	f7f4 fb61 	bl	8000158 <__aeabi_dsub>
 800ba96:	4622      	mov	r2, r4
 800ba98:	462b      	mov	r3, r5
 800ba9a:	f7f4 fd15 	bl	80004c8 <__aeabi_dmul>
 800ba9e:	a35a      	add	r3, pc, #360	; (adr r3, 800bc08 <__ieee754_pow+0xa00>)
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	f7f4 fb5a 	bl	800015c <__adddf3>
 800baa8:	4622      	mov	r2, r4
 800baaa:	462b      	mov	r3, r5
 800baac:	f7f4 fd0c 	bl	80004c8 <__aeabi_dmul>
 800bab0:	a357      	add	r3, pc, #348	; (adr r3, 800bc10 <__ieee754_pow+0xa08>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f7f4 fb4f 	bl	8000158 <__aeabi_dsub>
 800baba:	4622      	mov	r2, r4
 800babc:	462b      	mov	r3, r5
 800babe:	f7f4 fd03 	bl	80004c8 <__aeabi_dmul>
 800bac2:	a355      	add	r3, pc, #340	; (adr r3, 800bc18 <__ieee754_pow+0xa10>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	f7f4 fb48 	bl	800015c <__adddf3>
 800bacc:	4622      	mov	r2, r4
 800bace:	462b      	mov	r3, r5
 800bad0:	f7f4 fcfa 	bl	80004c8 <__aeabi_dmul>
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	4640      	mov	r0, r8
 800bada:	4649      	mov	r1, r9
 800badc:	f7f4 fb3c 	bl	8000158 <__aeabi_dsub>
 800bae0:	4604      	mov	r4, r0
 800bae2:	460d      	mov	r5, r1
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4640      	mov	r0, r8
 800baea:	4649      	mov	r1, r9
 800baec:	f7f4 fcec 	bl	80004c8 <__aeabi_dmul>
 800baf0:	2200      	movs	r2, #0
 800baf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bafa:	4620      	mov	r0, r4
 800bafc:	4629      	mov	r1, r5
 800bafe:	f7f4 fb2b 	bl	8000158 <__aeabi_dsub>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb0a:	f7f4 fe07 	bl	800071c <__aeabi_ddiv>
 800bb0e:	4632      	mov	r2, r6
 800bb10:	4604      	mov	r4, r0
 800bb12:	460d      	mov	r5, r1
 800bb14:	463b      	mov	r3, r7
 800bb16:	4640      	mov	r0, r8
 800bb18:	4649      	mov	r1, r9
 800bb1a:	f7f4 fcd5 	bl	80004c8 <__aeabi_dmul>
 800bb1e:	4632      	mov	r2, r6
 800bb20:	463b      	mov	r3, r7
 800bb22:	f7f4 fb1b 	bl	800015c <__adddf3>
 800bb26:	4602      	mov	r2, r0
 800bb28:	460b      	mov	r3, r1
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	f7f4 fb13 	bl	8000158 <__aeabi_dsub>
 800bb32:	4642      	mov	r2, r8
 800bb34:	464b      	mov	r3, r9
 800bb36:	f7f4 fb0f 	bl	8000158 <__aeabi_dsub>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	2000      	movs	r0, #0
 800bb40:	4939      	ldr	r1, [pc, #228]	; (800bc28 <__ieee754_pow+0xa20>)
 800bb42:	f7f4 fb09 	bl	8000158 <__aeabi_dsub>
 800bb46:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bb4a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bb4e:	da29      	bge.n	800bba4 <__ieee754_pow+0x99c>
 800bb50:	4652      	mov	r2, sl
 800bb52:	f000 fb71 	bl	800c238 <scalbn>
 800bb56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb5a:	f7ff bbfe 	b.w	800b35a <__ieee754_pow+0x152>
 800bb5e:	4b33      	ldr	r3, [pc, #204]	; (800bc2c <__ieee754_pow+0xa24>)
 800bb60:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bb64:	429f      	cmp	r7, r3
 800bb66:	f77f af13 	ble.w	800b990 <__ieee754_pow+0x788>
 800bb6a:	4b31      	ldr	r3, [pc, #196]	; (800bc30 <__ieee754_pow+0xa28>)
 800bb6c:	440b      	add	r3, r1
 800bb6e:	4303      	orrs	r3, r0
 800bb70:	d009      	beq.n	800bb86 <__ieee754_pow+0x97e>
 800bb72:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb76:	2200      	movs	r2, #0
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f7f4 ff17 	bl	80009ac <__aeabi_dcmplt>
 800bb7e:	3800      	subs	r0, #0
 800bb80:	bf18      	it	ne
 800bb82:	2001      	movne	r0, #1
 800bb84:	e453      	b.n	800b42e <__ieee754_pow+0x226>
 800bb86:	4622      	mov	r2, r4
 800bb88:	462b      	mov	r3, r5
 800bb8a:	f7f4 fae5 	bl	8000158 <__aeabi_dsub>
 800bb8e:	4642      	mov	r2, r8
 800bb90:	464b      	mov	r3, r9
 800bb92:	f7f4 ff1f 	bl	80009d4 <__aeabi_dcmpge>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	f43f aefa 	beq.w	800b990 <__ieee754_pow+0x788>
 800bb9c:	e7e9      	b.n	800bb72 <__ieee754_pow+0x96a>
 800bb9e:	f04f 0a00 	mov.w	sl, #0
 800bba2:	e720      	b.n	800b9e6 <__ieee754_pow+0x7de>
 800bba4:	4621      	mov	r1, r4
 800bba6:	e7d6      	b.n	800bb56 <__ieee754_pow+0x94e>
 800bba8:	f04f 0b00 	mov.w	fp, #0
 800bbac:	f8df c078 	ldr.w	ip, [pc, #120]	; 800bc28 <__ieee754_pow+0xa20>
 800bbb0:	f7ff bbba 	b.w	800b328 <__ieee754_pow+0x120>
 800bbb4:	f04f 0b00 	mov.w	fp, #0
 800bbb8:	f04f 0c00 	mov.w	ip, #0
 800bbbc:	f7ff bbb4 	b.w	800b328 <__ieee754_pow+0x120>
 800bbc0:	4640      	mov	r0, r8
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	f7ff bb3d 	b.w	800b242 <__ieee754_pow+0x3a>
 800bbc8:	9200      	str	r2, [sp, #0]
 800bbca:	f7ff bb89 	b.w	800b2e0 <__ieee754_pow+0xd8>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	f7ff bb73 	b.w	800b2ba <__ieee754_pow+0xb2>
 800bbd4:	f3af 8000 	nop.w
 800bbd8:	652b82fe 	.word	0x652b82fe
 800bbdc:	3c971547 	.word	0x3c971547
 800bbe0:	00000000 	.word	0x00000000
 800bbe4:	3fe62e43 	.word	0x3fe62e43
 800bbe8:	fefa39ef 	.word	0xfefa39ef
 800bbec:	3fe62e42 	.word	0x3fe62e42
 800bbf0:	0ca86c39 	.word	0x0ca86c39
 800bbf4:	be205c61 	.word	0xbe205c61
 800bbf8:	72bea4d0 	.word	0x72bea4d0
 800bbfc:	3e663769 	.word	0x3e663769
 800bc00:	c5d26bf1 	.word	0xc5d26bf1
 800bc04:	3ebbbd41 	.word	0x3ebbbd41
 800bc08:	af25de2c 	.word	0xaf25de2c
 800bc0c:	3f11566a 	.word	0x3f11566a
 800bc10:	16bebd93 	.word	0x16bebd93
 800bc14:	3f66c16c 	.word	0x3f66c16c
 800bc18:	5555553e 	.word	0x5555553e
 800bc1c:	3fc55555 	.word	0x3fc55555
 800bc20:	3fe00000 	.word	0x3fe00000
 800bc24:	000fffff 	.word	0x000fffff
 800bc28:	3ff00000 	.word	0x3ff00000
 800bc2c:	4090cbff 	.word	0x4090cbff
 800bc30:	3f6f3400 	.word	0x3f6f3400

0800bc34 <__ieee754_sqrt>:
 800bc34:	f8df c158 	ldr.w	ip, [pc, #344]	; 800bd90 <__ieee754_sqrt+0x15c>
 800bc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3c:	ea3c 0c01 	bics.w	ip, ip, r1
 800bc40:	4606      	mov	r6, r0
 800bc42:	460d      	mov	r5, r1
 800bc44:	460c      	mov	r4, r1
 800bc46:	460a      	mov	r2, r1
 800bc48:	4607      	mov	r7, r0
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	d10f      	bne.n	800bc6e <__ieee754_sqrt+0x3a>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	460b      	mov	r3, r1
 800bc52:	f7f4 fc39 	bl	80004c8 <__aeabi_dmul>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	f7f4 fa7d 	bl	800015c <__adddf3>
 800bc62:	4606      	mov	r6, r0
 800bc64:	460d      	mov	r5, r1
 800bc66:	4630      	mov	r0, r6
 800bc68:	4629      	mov	r1, r5
 800bc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc6e:	2900      	cmp	r1, #0
 800bc70:	dc0e      	bgt.n	800bc90 <__ieee754_sqrt+0x5c>
 800bc72:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bc76:	ea5c 0707 	orrs.w	r7, ip, r7
 800bc7a:	d0f4      	beq.n	800bc66 <__ieee754_sqrt+0x32>
 800bc7c:	b141      	cbz	r1, 800bc90 <__ieee754_sqrt+0x5c>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	f7f4 fa69 	bl	8000158 <__aeabi_dsub>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	f7f4 fd47 	bl	800071c <__aeabi_ddiv>
 800bc8e:	e7e8      	b.n	800bc62 <__ieee754_sqrt+0x2e>
 800bc90:	1521      	asrs	r1, r4, #20
 800bc92:	d075      	beq.n	800bd80 <__ieee754_sqrt+0x14c>
 800bc94:	07cc      	lsls	r4, r1, #31
 800bc96:	f04f 0400 	mov.w	r4, #0
 800bc9a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bc9e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800bca2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bca6:	bf5e      	ittt	pl
 800bca8:	0fd9      	lsrpl	r1, r3, #31
 800bcaa:	005b      	lslpl	r3, r3, #1
 800bcac:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800bcb0:	0fd9      	lsrs	r1, r3, #31
 800bcb2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bcb6:	2516      	movs	r5, #22
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcbe:	107f      	asrs	r7, r7, #1
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	1846      	adds	r6, r0, r1
 800bcc4:	4296      	cmp	r6, r2
 800bcc6:	bfde      	ittt	le
 800bcc8:	1b92      	suble	r2, r2, r6
 800bcca:	1870      	addle	r0, r6, r1
 800bccc:	1864      	addle	r4, r4, r1
 800bcce:	0052      	lsls	r2, r2, #1
 800bcd0:	3d01      	subs	r5, #1
 800bcd2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bcd6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bcda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bcde:	d1f0      	bne.n	800bcc2 <__ieee754_sqrt+0x8e>
 800bce0:	4629      	mov	r1, r5
 800bce2:	f04f 0e20 	mov.w	lr, #32
 800bce6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bcea:	4282      	cmp	r2, r0
 800bcec:	eb06 0c05 	add.w	ip, r6, r5
 800bcf0:	dc02      	bgt.n	800bcf8 <__ieee754_sqrt+0xc4>
 800bcf2:	d113      	bne.n	800bd1c <__ieee754_sqrt+0xe8>
 800bcf4:	459c      	cmp	ip, r3
 800bcf6:	d811      	bhi.n	800bd1c <__ieee754_sqrt+0xe8>
 800bcf8:	f1bc 0f00 	cmp.w	ip, #0
 800bcfc:	eb0c 0506 	add.w	r5, ip, r6
 800bd00:	da43      	bge.n	800bd8a <__ieee754_sqrt+0x156>
 800bd02:	2d00      	cmp	r5, #0
 800bd04:	db41      	blt.n	800bd8a <__ieee754_sqrt+0x156>
 800bd06:	f100 0801 	add.w	r8, r0, #1
 800bd0a:	1a12      	subs	r2, r2, r0
 800bd0c:	4640      	mov	r0, r8
 800bd0e:	459c      	cmp	ip, r3
 800bd10:	bf88      	it	hi
 800bd12:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bd16:	eba3 030c 	sub.w	r3, r3, ip
 800bd1a:	4431      	add	r1, r6
 800bd1c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bd20:	f1be 0e01 	subs.w	lr, lr, #1
 800bd24:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800bd28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd2c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bd30:	d1db      	bne.n	800bcea <__ieee754_sqrt+0xb6>
 800bd32:	4313      	orrs	r3, r2
 800bd34:	d006      	beq.n	800bd44 <__ieee754_sqrt+0x110>
 800bd36:	1c48      	adds	r0, r1, #1
 800bd38:	bf0b      	itete	eq
 800bd3a:	4671      	moveq	r1, lr
 800bd3c:	3101      	addne	r1, #1
 800bd3e:	3401      	addeq	r4, #1
 800bd40:	f021 0101 	bicne.w	r1, r1, #1
 800bd44:	1063      	asrs	r3, r4, #1
 800bd46:	0849      	lsrs	r1, r1, #1
 800bd48:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bd4c:	07e2      	lsls	r2, r4, #31
 800bd4e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bd52:	bf48      	it	mi
 800bd54:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bd58:	460e      	mov	r6, r1
 800bd5a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bd5e:	e782      	b.n	800bc66 <__ieee754_sqrt+0x32>
 800bd60:	0ada      	lsrs	r2, r3, #11
 800bd62:	3815      	subs	r0, #21
 800bd64:	055b      	lsls	r3, r3, #21
 800bd66:	2a00      	cmp	r2, #0
 800bd68:	d0fa      	beq.n	800bd60 <__ieee754_sqrt+0x12c>
 800bd6a:	02d5      	lsls	r5, r2, #11
 800bd6c:	d50a      	bpl.n	800bd84 <__ieee754_sqrt+0x150>
 800bd6e:	f1c1 0420 	rsb	r4, r1, #32
 800bd72:	fa23 f404 	lsr.w	r4, r3, r4
 800bd76:	1e4d      	subs	r5, r1, #1
 800bd78:	408b      	lsls	r3, r1
 800bd7a:	4322      	orrs	r2, r4
 800bd7c:	1b41      	subs	r1, r0, r5
 800bd7e:	e789      	b.n	800bc94 <__ieee754_sqrt+0x60>
 800bd80:	4608      	mov	r0, r1
 800bd82:	e7f0      	b.n	800bd66 <__ieee754_sqrt+0x132>
 800bd84:	0052      	lsls	r2, r2, #1
 800bd86:	3101      	adds	r1, #1
 800bd88:	e7ef      	b.n	800bd6a <__ieee754_sqrt+0x136>
 800bd8a:	4680      	mov	r8, r0
 800bd8c:	e7bd      	b.n	800bd0a <__ieee754_sqrt+0xd6>
 800bd8e:	bf00      	nop
 800bd90:	7ff00000 	.word	0x7ff00000

0800bd94 <__ieee754_asinf>:
 800bd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd98:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800bd9c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800bda0:	4604      	mov	r4, r0
 800bda2:	4605      	mov	r5, r0
 800bda4:	d10c      	bne.n	800bdc0 <__ieee754_asinf+0x2c>
 800bda6:	498d      	ldr	r1, [pc, #564]	; (800bfdc <__ieee754_asinf+0x248>)
 800bda8:	f7f4 ffbc 	bl	8000d24 <__aeabi_fmul>
 800bdac:	498c      	ldr	r1, [pc, #560]	; (800bfe0 <__ieee754_asinf+0x24c>)
 800bdae:	4605      	mov	r5, r0
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f7f4 ffb7 	bl	8000d24 <__aeabi_fmul>
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	4628      	mov	r0, r5
 800bdba:	f7f4 feab 	bl	8000b14 <__addsf3>
 800bdbe:	e006      	b.n	800bdce <__ieee754_asinf+0x3a>
 800bdc0:	dd07      	ble.n	800bdd2 <__ieee754_asinf+0x3e>
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	f7f4 fea4 	bl	8000b10 <__aeabi_fsub>
 800bdc8:	4601      	mov	r1, r0
 800bdca:	f7f5 f85f 	bl	8000e8c <__aeabi_fdiv>
 800bdce:	4604      	mov	r4, r0
 800bdd0:	e00e      	b.n	800bdf0 <__ieee754_asinf+0x5c>
 800bdd2:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800bdd6:	da58      	bge.n	800be8a <__ieee754_asinf+0xf6>
 800bdd8:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800bddc:	da0b      	bge.n	800bdf6 <__ieee754_asinf+0x62>
 800bdde:	4981      	ldr	r1, [pc, #516]	; (800bfe4 <__ieee754_asinf+0x250>)
 800bde0:	f7f4 fe98 	bl	8000b14 <__addsf3>
 800bde4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bde8:	f7f5 f958 	bl	800109c <__aeabi_fcmpgt>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d04c      	beq.n	800be8a <__ieee754_asinf+0xf6>
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf6:	4601      	mov	r1, r0
 800bdf8:	f7f4 ff94 	bl	8000d24 <__aeabi_fmul>
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	497a      	ldr	r1, [pc, #488]	; (800bfe8 <__ieee754_asinf+0x254>)
 800be00:	f7f4 ff90 	bl	8000d24 <__aeabi_fmul>
 800be04:	4979      	ldr	r1, [pc, #484]	; (800bfec <__ieee754_asinf+0x258>)
 800be06:	f7f4 fe85 	bl	8000b14 <__addsf3>
 800be0a:	4629      	mov	r1, r5
 800be0c:	f7f4 ff8a 	bl	8000d24 <__aeabi_fmul>
 800be10:	4977      	ldr	r1, [pc, #476]	; (800bff0 <__ieee754_asinf+0x25c>)
 800be12:	f7f4 fe7d 	bl	8000b10 <__aeabi_fsub>
 800be16:	4629      	mov	r1, r5
 800be18:	f7f4 ff84 	bl	8000d24 <__aeabi_fmul>
 800be1c:	4975      	ldr	r1, [pc, #468]	; (800bff4 <__ieee754_asinf+0x260>)
 800be1e:	f7f4 fe79 	bl	8000b14 <__addsf3>
 800be22:	4629      	mov	r1, r5
 800be24:	f7f4 ff7e 	bl	8000d24 <__aeabi_fmul>
 800be28:	4973      	ldr	r1, [pc, #460]	; (800bff8 <__ieee754_asinf+0x264>)
 800be2a:	f7f4 fe71 	bl	8000b10 <__aeabi_fsub>
 800be2e:	4629      	mov	r1, r5
 800be30:	f7f4 ff78 	bl	8000d24 <__aeabi_fmul>
 800be34:	4971      	ldr	r1, [pc, #452]	; (800bffc <__ieee754_asinf+0x268>)
 800be36:	f7f4 fe6d 	bl	8000b14 <__addsf3>
 800be3a:	4629      	mov	r1, r5
 800be3c:	f7f4 ff72 	bl	8000d24 <__aeabi_fmul>
 800be40:	496f      	ldr	r1, [pc, #444]	; (800c000 <__ieee754_asinf+0x26c>)
 800be42:	4606      	mov	r6, r0
 800be44:	4628      	mov	r0, r5
 800be46:	f7f4 ff6d 	bl	8000d24 <__aeabi_fmul>
 800be4a:	496e      	ldr	r1, [pc, #440]	; (800c004 <__ieee754_asinf+0x270>)
 800be4c:	f7f4 fe60 	bl	8000b10 <__aeabi_fsub>
 800be50:	4629      	mov	r1, r5
 800be52:	f7f4 ff67 	bl	8000d24 <__aeabi_fmul>
 800be56:	496c      	ldr	r1, [pc, #432]	; (800c008 <__ieee754_asinf+0x274>)
 800be58:	f7f4 fe5c 	bl	8000b14 <__addsf3>
 800be5c:	4629      	mov	r1, r5
 800be5e:	f7f4 ff61 	bl	8000d24 <__aeabi_fmul>
 800be62:	496a      	ldr	r1, [pc, #424]	; (800c00c <__ieee754_asinf+0x278>)
 800be64:	f7f4 fe54 	bl	8000b10 <__aeabi_fsub>
 800be68:	4629      	mov	r1, r5
 800be6a:	f7f4 ff5b 	bl	8000d24 <__aeabi_fmul>
 800be6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800be72:	f7f4 fe4f 	bl	8000b14 <__addsf3>
 800be76:	4601      	mov	r1, r0
 800be78:	4630      	mov	r0, r6
 800be7a:	f7f5 f807 	bl	8000e8c <__aeabi_fdiv>
 800be7e:	4621      	mov	r1, r4
 800be80:	f7f4 ff50 	bl	8000d24 <__aeabi_fmul>
 800be84:	4601      	mov	r1, r0
 800be86:	4620      	mov	r0, r4
 800be88:	e797      	b.n	800bdba <__ieee754_asinf+0x26>
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 fb5e 	bl	800c54c <fabsf>
 800be90:	4601      	mov	r1, r0
 800be92:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800be96:	f7f4 fe3b 	bl	8000b10 <__aeabi_fsub>
 800be9a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800be9e:	f7f4 ff41 	bl	8000d24 <__aeabi_fmul>
 800bea2:	4606      	mov	r6, r0
 800bea4:	4950      	ldr	r1, [pc, #320]	; (800bfe8 <__ieee754_asinf+0x254>)
 800bea6:	f7f4 ff3d 	bl	8000d24 <__aeabi_fmul>
 800beaa:	4950      	ldr	r1, [pc, #320]	; (800bfec <__ieee754_asinf+0x258>)
 800beac:	f7f4 fe32 	bl	8000b14 <__addsf3>
 800beb0:	4631      	mov	r1, r6
 800beb2:	f7f4 ff37 	bl	8000d24 <__aeabi_fmul>
 800beb6:	494e      	ldr	r1, [pc, #312]	; (800bff0 <__ieee754_asinf+0x25c>)
 800beb8:	f7f4 fe2a 	bl	8000b10 <__aeabi_fsub>
 800bebc:	4631      	mov	r1, r6
 800bebe:	f7f4 ff31 	bl	8000d24 <__aeabi_fmul>
 800bec2:	494c      	ldr	r1, [pc, #304]	; (800bff4 <__ieee754_asinf+0x260>)
 800bec4:	f7f4 fe26 	bl	8000b14 <__addsf3>
 800bec8:	4631      	mov	r1, r6
 800beca:	f7f4 ff2b 	bl	8000d24 <__aeabi_fmul>
 800bece:	494a      	ldr	r1, [pc, #296]	; (800bff8 <__ieee754_asinf+0x264>)
 800bed0:	f7f4 fe1e 	bl	8000b10 <__aeabi_fsub>
 800bed4:	4631      	mov	r1, r6
 800bed6:	f7f4 ff25 	bl	8000d24 <__aeabi_fmul>
 800beda:	4948      	ldr	r1, [pc, #288]	; (800bffc <__ieee754_asinf+0x268>)
 800bedc:	f7f4 fe1a 	bl	8000b14 <__addsf3>
 800bee0:	4631      	mov	r1, r6
 800bee2:	f7f4 ff1f 	bl	8000d24 <__aeabi_fmul>
 800bee6:	4946      	ldr	r1, [pc, #280]	; (800c000 <__ieee754_asinf+0x26c>)
 800bee8:	4681      	mov	r9, r0
 800beea:	4630      	mov	r0, r6
 800beec:	f7f4 ff1a 	bl	8000d24 <__aeabi_fmul>
 800bef0:	4944      	ldr	r1, [pc, #272]	; (800c004 <__ieee754_asinf+0x270>)
 800bef2:	f7f4 fe0d 	bl	8000b10 <__aeabi_fsub>
 800bef6:	4631      	mov	r1, r6
 800bef8:	f7f4 ff14 	bl	8000d24 <__aeabi_fmul>
 800befc:	4942      	ldr	r1, [pc, #264]	; (800c008 <__ieee754_asinf+0x274>)
 800befe:	f7f4 fe09 	bl	8000b14 <__addsf3>
 800bf02:	4631      	mov	r1, r6
 800bf04:	f7f4 ff0e 	bl	8000d24 <__aeabi_fmul>
 800bf08:	4940      	ldr	r1, [pc, #256]	; (800c00c <__ieee754_asinf+0x278>)
 800bf0a:	f7f4 fe01 	bl	8000b10 <__aeabi_fsub>
 800bf0e:	4631      	mov	r1, r6
 800bf10:	f7f4 ff08 	bl	8000d24 <__aeabi_fmul>
 800bf14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bf18:	f7f4 fdfc 	bl	8000b14 <__addsf3>
 800bf1c:	4682      	mov	sl, r0
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f000 f902 	bl	800c128 <__ieee754_sqrtf>
 800bf24:	4b3a      	ldr	r3, [pc, #232]	; (800c010 <__ieee754_asinf+0x27c>)
 800bf26:	4607      	mov	r7, r0
 800bf28:	4598      	cmp	r8, r3
 800bf2a:	dd1a      	ble.n	800bf62 <__ieee754_asinf+0x1ce>
 800bf2c:	4651      	mov	r1, sl
 800bf2e:	4648      	mov	r0, r9
 800bf30:	f7f4 ffac 	bl	8000e8c <__aeabi_fdiv>
 800bf34:	4639      	mov	r1, r7
 800bf36:	f7f4 fef5 	bl	8000d24 <__aeabi_fmul>
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	f7f4 fdea 	bl	8000b14 <__addsf3>
 800bf40:	4601      	mov	r1, r0
 800bf42:	f7f4 fde7 	bl	8000b14 <__addsf3>
 800bf46:	4933      	ldr	r1, [pc, #204]	; (800c014 <__ieee754_asinf+0x280>)
 800bf48:	f7f4 fde4 	bl	8000b14 <__addsf3>
 800bf4c:	4601      	mov	r1, r0
 800bf4e:	4823      	ldr	r0, [pc, #140]	; (800bfdc <__ieee754_asinf+0x248>)
 800bf50:	f7f4 fdde 	bl	8000b10 <__aeabi_fsub>
 800bf54:	2d00      	cmp	r5, #0
 800bf56:	4604      	mov	r4, r0
 800bf58:	f73f af4a 	bgt.w	800bdf0 <__ieee754_asinf+0x5c>
 800bf5c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bf60:	e735      	b.n	800bdce <__ieee754_asinf+0x3a>
 800bf62:	4601      	mov	r1, r0
 800bf64:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800bf68:	f7f4 fdd4 	bl	8000b14 <__addsf3>
 800bf6c:	4651      	mov	r1, sl
 800bf6e:	4604      	mov	r4, r0
 800bf70:	4648      	mov	r0, r9
 800bf72:	f7f4 ff8b 	bl	8000e8c <__aeabi_fdiv>
 800bf76:	4601      	mov	r1, r0
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f7f4 fed3 	bl	8000d24 <__aeabi_fmul>
 800bf7e:	f028 080f 	bic.w	r8, r8, #15
 800bf82:	4681      	mov	r9, r0
 800bf84:	4641      	mov	r1, r8
 800bf86:	4640      	mov	r0, r8
 800bf88:	f7f4 fecc 	bl	8000d24 <__aeabi_fmul>
 800bf8c:	4601      	mov	r1, r0
 800bf8e:	4630      	mov	r0, r6
 800bf90:	f7f4 fdbe 	bl	8000b10 <__aeabi_fsub>
 800bf94:	4641      	mov	r1, r8
 800bf96:	4604      	mov	r4, r0
 800bf98:	4638      	mov	r0, r7
 800bf9a:	f7f4 fdbb 	bl	8000b14 <__addsf3>
 800bf9e:	4601      	mov	r1, r0
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f7f4 ff73 	bl	8000e8c <__aeabi_fdiv>
 800bfa6:	4601      	mov	r1, r0
 800bfa8:	f7f4 fdb4 	bl	8000b14 <__addsf3>
 800bfac:	4601      	mov	r1, r0
 800bfae:	480c      	ldr	r0, [pc, #48]	; (800bfe0 <__ieee754_asinf+0x24c>)
 800bfb0:	f7f4 fdae 	bl	8000b10 <__aeabi_fsub>
 800bfb4:	4601      	mov	r1, r0
 800bfb6:	4648      	mov	r0, r9
 800bfb8:	f7f4 fdaa 	bl	8000b10 <__aeabi_fsub>
 800bfbc:	4641      	mov	r1, r8
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	4640      	mov	r0, r8
 800bfc2:	f7f4 fda7 	bl	8000b14 <__addsf3>
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	4813      	ldr	r0, [pc, #76]	; (800c018 <__ieee754_asinf+0x284>)
 800bfca:	f7f4 fda1 	bl	8000b10 <__aeabi_fsub>
 800bfce:	4601      	mov	r1, r0
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f7f4 fd9d 	bl	8000b10 <__aeabi_fsub>
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	480f      	ldr	r0, [pc, #60]	; (800c018 <__ieee754_asinf+0x284>)
 800bfda:	e7b9      	b.n	800bf50 <__ieee754_asinf+0x1bc>
 800bfdc:	3fc90fdb 	.word	0x3fc90fdb
 800bfe0:	b33bbd2e 	.word	0xb33bbd2e
 800bfe4:	7149f2ca 	.word	0x7149f2ca
 800bfe8:	3811ef08 	.word	0x3811ef08
 800bfec:	3a4f7f04 	.word	0x3a4f7f04
 800bff0:	3d241146 	.word	0x3d241146
 800bff4:	3e4e0aa8 	.word	0x3e4e0aa8
 800bff8:	3ea6b090 	.word	0x3ea6b090
 800bffc:	3e2aaaab 	.word	0x3e2aaaab
 800c000:	3d9dc62e 	.word	0x3d9dc62e
 800c004:	3f303361 	.word	0x3f303361
 800c008:	4001572d 	.word	0x4001572d
 800c00c:	4019d139 	.word	0x4019d139
 800c010:	3f799999 	.word	0x3f799999
 800c014:	333bbd2e 	.word	0x333bbd2e
 800c018:	3f490fdb 	.word	0x3f490fdb

0800c01c <__ieee754_atan2f>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c022:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c026:	4603      	mov	r3, r0
 800c028:	dc05      	bgt.n	800c036 <__ieee754_atan2f+0x1a>
 800c02a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c02e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c032:	4607      	mov	r7, r0
 800c034:	dd04      	ble.n	800c040 <__ieee754_atan2f+0x24>
 800c036:	4618      	mov	r0, r3
 800c038:	f7f4 fd6c 	bl	8000b14 <__addsf3>
 800c03c:	4603      	mov	r3, r0
 800c03e:	e011      	b.n	800c064 <__ieee754_atan2f+0x48>
 800c040:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c044:	d103      	bne.n	800c04e <__ieee754_atan2f+0x32>
 800c046:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c04a:	f000 b973 	b.w	800c334 <atanf>
 800c04e:	178c      	asrs	r4, r1, #30
 800c050:	f004 0402 	and.w	r4, r4, #2
 800c054:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c058:	b932      	cbnz	r2, 800c068 <__ieee754_atan2f+0x4c>
 800c05a:	2c02      	cmp	r4, #2
 800c05c:	d04c      	beq.n	800c0f8 <__ieee754_atan2f+0xdc>
 800c05e:	2c03      	cmp	r4, #3
 800c060:	d100      	bne.n	800c064 <__ieee754_atan2f+0x48>
 800c062:	4b29      	ldr	r3, [pc, #164]	; (800c108 <__ieee754_atan2f+0xec>)
 800c064:	4618      	mov	r0, r3
 800c066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c068:	b91e      	cbnz	r6, 800c072 <__ieee754_atan2f+0x56>
 800c06a:	2f00      	cmp	r7, #0
 800c06c:	da4a      	bge.n	800c104 <__ieee754_atan2f+0xe8>
 800c06e:	4b27      	ldr	r3, [pc, #156]	; (800c10c <__ieee754_atan2f+0xf0>)
 800c070:	e7f8      	b.n	800c064 <__ieee754_atan2f+0x48>
 800c072:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c076:	d10e      	bne.n	800c096 <__ieee754_atan2f+0x7a>
 800c078:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c07c:	f104 34ff 	add.w	r4, r4, #4294967295
 800c080:	d105      	bne.n	800c08e <__ieee754_atan2f+0x72>
 800c082:	2c02      	cmp	r4, #2
 800c084:	d83a      	bhi.n	800c0fc <__ieee754_atan2f+0xe0>
 800c086:	4b22      	ldr	r3, [pc, #136]	; (800c110 <__ieee754_atan2f+0xf4>)
 800c088:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c08c:	e7ea      	b.n	800c064 <__ieee754_atan2f+0x48>
 800c08e:	2c02      	cmp	r4, #2
 800c090:	d836      	bhi.n	800c100 <__ieee754_atan2f+0xe4>
 800c092:	4b20      	ldr	r3, [pc, #128]	; (800c114 <__ieee754_atan2f+0xf8>)
 800c094:	e7f8      	b.n	800c088 <__ieee754_atan2f+0x6c>
 800c096:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c09a:	d0e6      	beq.n	800c06a <__ieee754_atan2f+0x4e>
 800c09c:	1b92      	subs	r2, r2, r6
 800c09e:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800c0a2:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800c0a6:	da17      	bge.n	800c0d8 <__ieee754_atan2f+0xbc>
 800c0a8:	2900      	cmp	r1, #0
 800c0aa:	da01      	bge.n	800c0b0 <__ieee754_atan2f+0x94>
 800c0ac:	303c      	adds	r0, #60	; 0x3c
 800c0ae:	db15      	blt.n	800c0dc <__ieee754_atan2f+0xc0>
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7f4 feeb 	bl	8000e8c <__aeabi_fdiv>
 800c0b6:	f000 fa49 	bl	800c54c <fabsf>
 800c0ba:	f000 f93b 	bl	800c334 <atanf>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2c01      	cmp	r4, #1
 800c0c2:	d00d      	beq.n	800c0e0 <__ieee754_atan2f+0xc4>
 800c0c4:	2c02      	cmp	r4, #2
 800c0c6:	d00e      	beq.n	800c0e6 <__ieee754_atan2f+0xca>
 800c0c8:	2c00      	cmp	r4, #0
 800c0ca:	d0cb      	beq.n	800c064 <__ieee754_atan2f+0x48>
 800c0cc:	4912      	ldr	r1, [pc, #72]	; (800c118 <__ieee754_atan2f+0xfc>)
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7f4 fd20 	bl	8000b14 <__addsf3>
 800c0d4:	4911      	ldr	r1, [pc, #68]	; (800c11c <__ieee754_atan2f+0x100>)
 800c0d6:	e00c      	b.n	800c0f2 <__ieee754_atan2f+0xd6>
 800c0d8:	4b11      	ldr	r3, [pc, #68]	; (800c120 <__ieee754_atan2f+0x104>)
 800c0da:	e7f1      	b.n	800c0c0 <__ieee754_atan2f+0xa4>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	e7ef      	b.n	800c0c0 <__ieee754_atan2f+0xa4>
 800c0e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c0e4:	e7be      	b.n	800c064 <__ieee754_atan2f+0x48>
 800c0e6:	490c      	ldr	r1, [pc, #48]	; (800c118 <__ieee754_atan2f+0xfc>)
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7f4 fd13 	bl	8000b14 <__addsf3>
 800c0ee:	4601      	mov	r1, r0
 800c0f0:	480a      	ldr	r0, [pc, #40]	; (800c11c <__ieee754_atan2f+0x100>)
 800c0f2:	f7f4 fd0d 	bl	8000b10 <__aeabi_fsub>
 800c0f6:	e7a1      	b.n	800c03c <__ieee754_atan2f+0x20>
 800c0f8:	4b08      	ldr	r3, [pc, #32]	; (800c11c <__ieee754_atan2f+0x100>)
 800c0fa:	e7b3      	b.n	800c064 <__ieee754_atan2f+0x48>
 800c0fc:	4b09      	ldr	r3, [pc, #36]	; (800c124 <__ieee754_atan2f+0x108>)
 800c0fe:	e7b1      	b.n	800c064 <__ieee754_atan2f+0x48>
 800c100:	2300      	movs	r3, #0
 800c102:	e7af      	b.n	800c064 <__ieee754_atan2f+0x48>
 800c104:	4b06      	ldr	r3, [pc, #24]	; (800c120 <__ieee754_atan2f+0x104>)
 800c106:	e7ad      	b.n	800c064 <__ieee754_atan2f+0x48>
 800c108:	c0490fdb 	.word	0xc0490fdb
 800c10c:	bfc90fdb 	.word	0xbfc90fdb
 800c110:	0800c848 	.word	0x0800c848
 800c114:	0800c854 	.word	0x0800c854
 800c118:	33bbbd2e 	.word	0x33bbbd2e
 800c11c:	40490fdb 	.word	0x40490fdb
 800c120:	3fc90fdb 	.word	0x3fc90fdb
 800c124:	3f490fdb 	.word	0x3f490fdb

0800c128 <__ieee754_sqrtf>:
 800c128:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c12c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c130:	b570      	push	{r4, r5, r6, lr}
 800c132:	4603      	mov	r3, r0
 800c134:	4604      	mov	r4, r0
 800c136:	d309      	bcc.n	800c14c <__ieee754_sqrtf+0x24>
 800c138:	4601      	mov	r1, r0
 800c13a:	f7f4 fdf3 	bl	8000d24 <__aeabi_fmul>
 800c13e:	4601      	mov	r1, r0
 800c140:	4620      	mov	r0, r4
 800c142:	f7f4 fce7 	bl	8000b14 <__addsf3>
 800c146:	4604      	mov	r4, r0
 800c148:	4620      	mov	r0, r4
 800c14a:	bd70      	pop	{r4, r5, r6, pc}
 800c14c:	2a00      	cmp	r2, #0
 800c14e:	d0fb      	beq.n	800c148 <__ieee754_sqrtf+0x20>
 800c150:	2800      	cmp	r0, #0
 800c152:	da06      	bge.n	800c162 <__ieee754_sqrtf+0x3a>
 800c154:	4601      	mov	r1, r0
 800c156:	f7f4 fcdb 	bl	8000b10 <__aeabi_fsub>
 800c15a:	4601      	mov	r1, r0
 800c15c:	f7f4 fe96 	bl	8000e8c <__aeabi_fdiv>
 800c160:	e7f1      	b.n	800c146 <__ieee754_sqrtf+0x1e>
 800c162:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800c166:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800c16a:	d029      	beq.n	800c1c0 <__ieee754_sqrtf+0x98>
 800c16c:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800c170:	07cb      	lsls	r3, r1, #31
 800c172:	f04f 0300 	mov.w	r3, #0
 800c176:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800c17a:	f04f 0419 	mov.w	r4, #25
 800c17e:	461e      	mov	r6, r3
 800c180:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c184:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c188:	bf58      	it	pl
 800c18a:	0052      	lslpl	r2, r2, #1
 800c18c:	1040      	asrs	r0, r0, #1
 800c18e:	0052      	lsls	r2, r2, #1
 800c190:	1875      	adds	r5, r6, r1
 800c192:	4295      	cmp	r5, r2
 800c194:	bfde      	ittt	le
 800c196:	186e      	addle	r6, r5, r1
 800c198:	1b52      	suble	r2, r2, r5
 800c19a:	185b      	addle	r3, r3, r1
 800c19c:	3c01      	subs	r4, #1
 800c19e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c1a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c1a6:	d1f3      	bne.n	800c190 <__ieee754_sqrtf+0x68>
 800c1a8:	b112      	cbz	r2, 800c1b0 <__ieee754_sqrtf+0x88>
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	f023 0301 	bic.w	r3, r3, #1
 800c1b0:	105c      	asrs	r4, r3, #1
 800c1b2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c1b6:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800c1ba:	e7c5      	b.n	800c148 <__ieee754_sqrtf+0x20>
 800c1bc:	005b      	lsls	r3, r3, #1
 800c1be:	3201      	adds	r2, #1
 800c1c0:	0218      	lsls	r0, r3, #8
 800c1c2:	d5fb      	bpl.n	800c1bc <__ieee754_sqrtf+0x94>
 800c1c4:	3a01      	subs	r2, #1
 800c1c6:	1a89      	subs	r1, r1, r2
 800c1c8:	e7d0      	b.n	800c16c <__ieee754_sqrtf+0x44>

0800c1ca <with_errno>:
 800c1ca:	b570      	push	{r4, r5, r6, lr}
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	460d      	mov	r5, r1
 800c1d0:	4616      	mov	r6, r2
 800c1d2:	f7fe fac7 	bl	800a764 <__errno>
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	6006      	str	r6, [r0, #0]
 800c1da:	4620      	mov	r0, r4
 800c1dc:	bd70      	pop	{r4, r5, r6, pc}

0800c1de <xflow>:
 800c1de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1e0:	4615      	mov	r5, r2
 800c1e2:	461c      	mov	r4, r3
 800c1e4:	b180      	cbz	r0, 800c208 <xflow+0x2a>
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c1ec:	e9cd 0100 	strd	r0, r1, [sp]
 800c1f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	f7f4 f966 	bl	80004c8 <__aeabi_dmul>
 800c1fc:	2222      	movs	r2, #34	; 0x22
 800c1fe:	b003      	add	sp, #12
 800c200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c204:	f7ff bfe1 	b.w	800c1ca <with_errno>
 800c208:	4610      	mov	r0, r2
 800c20a:	4619      	mov	r1, r3
 800c20c:	e7ee      	b.n	800c1ec <xflow+0xe>

0800c20e <__math_uflow>:
 800c20e:	2200      	movs	r2, #0
 800c210:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c214:	f7ff bfe3 	b.w	800c1de <xflow>

0800c218 <__math_oflow>:
 800c218:	2200      	movs	r2, #0
 800c21a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c21e:	f7ff bfde 	b.w	800c1de <xflow>

0800c222 <fabs>:
 800c222:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c226:	4770      	bx	lr

0800c228 <finite>:
 800c228:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800c22c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c230:	0fc0      	lsrs	r0, r0, #31
 800c232:	4770      	bx	lr
 800c234:	0000      	movs	r0, r0
	...

0800c238 <scalbn>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c23e:	4604      	mov	r4, r0
 800c240:	460d      	mov	r5, r1
 800c242:	4617      	mov	r7, r2
 800c244:	460b      	mov	r3, r1
 800c246:	b996      	cbnz	r6, 800c26e <scalbn+0x36>
 800c248:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c24c:	4303      	orrs	r3, r0
 800c24e:	d039      	beq.n	800c2c4 <scalbn+0x8c>
 800c250:	4b33      	ldr	r3, [pc, #204]	; (800c320 <scalbn+0xe8>)
 800c252:	2200      	movs	r2, #0
 800c254:	f7f4 f938 	bl	80004c8 <__aeabi_dmul>
 800c258:	4b32      	ldr	r3, [pc, #200]	; (800c324 <scalbn+0xec>)
 800c25a:	4604      	mov	r4, r0
 800c25c:	429f      	cmp	r7, r3
 800c25e:	460d      	mov	r5, r1
 800c260:	da0f      	bge.n	800c282 <scalbn+0x4a>
 800c262:	a32b      	add	r3, pc, #172	; (adr r3, 800c310 <scalbn+0xd8>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f4 f92e 	bl	80004c8 <__aeabi_dmul>
 800c26c:	e006      	b.n	800c27c <scalbn+0x44>
 800c26e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c272:	4296      	cmp	r6, r2
 800c274:	d10a      	bne.n	800c28c <scalbn+0x54>
 800c276:	4602      	mov	r2, r0
 800c278:	f7f3 ff70 	bl	800015c <__adddf3>
 800c27c:	4604      	mov	r4, r0
 800c27e:	460d      	mov	r5, r1
 800c280:	e020      	b.n	800c2c4 <scalbn+0x8c>
 800c282:	460b      	mov	r3, r1
 800c284:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c288:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c28c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c290:	19b9      	adds	r1, r7, r6
 800c292:	4291      	cmp	r1, r2
 800c294:	dd0e      	ble.n	800c2b4 <scalbn+0x7c>
 800c296:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c29a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c29e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c2a2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c2a6:	4820      	ldr	r0, [pc, #128]	; (800c328 <scalbn+0xf0>)
 800c2a8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c2ac:	a31a      	add	r3, pc, #104	; (adr r3, 800c318 <scalbn+0xe0>)
 800c2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b2:	e7d9      	b.n	800c268 <scalbn+0x30>
 800c2b4:	2900      	cmp	r1, #0
 800c2b6:	dd08      	ble.n	800c2ca <scalbn+0x92>
 800c2b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c2c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2ca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c2ce:	da12      	bge.n	800c2f6 <scalbn+0xbe>
 800c2d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c2d4:	429f      	cmp	r7, r3
 800c2d6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c2da:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c2de:	dcdc      	bgt.n	800c29a <scalbn+0x62>
 800c2e0:	a30b      	add	r3, pc, #44	; (adr r3, 800c310 <scalbn+0xd8>)
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c2ea:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c2ee:	480f      	ldr	r0, [pc, #60]	; (800c32c <scalbn+0xf4>)
 800c2f0:	f041 011f 	orr.w	r1, r1, #31
 800c2f4:	e7b8      	b.n	800c268 <scalbn+0x30>
 800c2f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2fa:	3136      	adds	r1, #54	; 0x36
 800c2fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c300:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c304:	4620      	mov	r0, r4
 800c306:	4629      	mov	r1, r5
 800c308:	2200      	movs	r2, #0
 800c30a:	4b09      	ldr	r3, [pc, #36]	; (800c330 <scalbn+0xf8>)
 800c30c:	e7ac      	b.n	800c268 <scalbn+0x30>
 800c30e:	bf00      	nop
 800c310:	c2f8f359 	.word	0xc2f8f359
 800c314:	01a56e1f 	.word	0x01a56e1f
 800c318:	8800759c 	.word	0x8800759c
 800c31c:	7e37e43c 	.word	0x7e37e43c
 800c320:	43500000 	.word	0x43500000
 800c324:	ffff3cb0 	.word	0xffff3cb0
 800c328:	8800759c 	.word	0x8800759c
 800c32c:	c2f8f359 	.word	0xc2f8f359
 800c330:	3c900000 	.word	0x3c900000

0800c334 <atanf>:
 800c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c338:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c33c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c340:	4604      	mov	r4, r0
 800c342:	4680      	mov	r8, r0
 800c344:	db0e      	blt.n	800c364 <atanf+0x30>
 800c346:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c34a:	dd04      	ble.n	800c356 <atanf+0x22>
 800c34c:	4601      	mov	r1, r0
 800c34e:	f7f4 fbe1 	bl	8000b14 <__addsf3>
 800c352:	4604      	mov	r4, r0
 800c354:	e003      	b.n	800c35e <atanf+0x2a>
 800c356:	2800      	cmp	r0, #0
 800c358:	f300 80ce 	bgt.w	800c4f8 <atanf+0x1c4>
 800c35c:	4c67      	ldr	r4, [pc, #412]	; (800c4fc <atanf+0x1c8>)
 800c35e:	4620      	mov	r0, r4
 800c360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c364:	4b66      	ldr	r3, [pc, #408]	; (800c500 <atanf+0x1cc>)
 800c366:	429d      	cmp	r5, r3
 800c368:	dc0e      	bgt.n	800c388 <atanf+0x54>
 800c36a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c36e:	da08      	bge.n	800c382 <atanf+0x4e>
 800c370:	4964      	ldr	r1, [pc, #400]	; (800c504 <atanf+0x1d0>)
 800c372:	f7f4 fbcf 	bl	8000b14 <__addsf3>
 800c376:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c37a:	f7f4 fe8f 	bl	800109c <__aeabi_fcmpgt>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d1ed      	bne.n	800c35e <atanf+0x2a>
 800c382:	f04f 36ff 	mov.w	r6, #4294967295
 800c386:	e01c      	b.n	800c3c2 <atanf+0x8e>
 800c388:	f000 f8e0 	bl	800c54c <fabsf>
 800c38c:	4b5e      	ldr	r3, [pc, #376]	; (800c508 <atanf+0x1d4>)
 800c38e:	4604      	mov	r4, r0
 800c390:	429d      	cmp	r5, r3
 800c392:	dc7c      	bgt.n	800c48e <atanf+0x15a>
 800c394:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c398:	429d      	cmp	r5, r3
 800c39a:	dc67      	bgt.n	800c46c <atanf+0x138>
 800c39c:	4601      	mov	r1, r0
 800c39e:	f7f4 fbb9 	bl	8000b14 <__addsf3>
 800c3a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c3a6:	f7f4 fbb3 	bl	8000b10 <__aeabi_fsub>
 800c3aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f7f4 fbaf 	bl	8000b14 <__addsf3>
 800c3b6:	4601      	mov	r1, r0
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	f7f4 fd67 	bl	8000e8c <__aeabi_fdiv>
 800c3be:	2600      	movs	r6, #0
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f7f4 fcad 	bl	8000d24 <__aeabi_fmul>
 800c3ca:	4601      	mov	r1, r0
 800c3cc:	4607      	mov	r7, r0
 800c3ce:	f7f4 fca9 	bl	8000d24 <__aeabi_fmul>
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	494d      	ldr	r1, [pc, #308]	; (800c50c <atanf+0x1d8>)
 800c3d6:	f7f4 fca5 	bl	8000d24 <__aeabi_fmul>
 800c3da:	494d      	ldr	r1, [pc, #308]	; (800c510 <atanf+0x1dc>)
 800c3dc:	f7f4 fb9a 	bl	8000b14 <__addsf3>
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	f7f4 fc9f 	bl	8000d24 <__aeabi_fmul>
 800c3e6:	494b      	ldr	r1, [pc, #300]	; (800c514 <atanf+0x1e0>)
 800c3e8:	f7f4 fb94 	bl	8000b14 <__addsf3>
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	f7f4 fc99 	bl	8000d24 <__aeabi_fmul>
 800c3f2:	4949      	ldr	r1, [pc, #292]	; (800c518 <atanf+0x1e4>)
 800c3f4:	f7f4 fb8e 	bl	8000b14 <__addsf3>
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	f7f4 fc93 	bl	8000d24 <__aeabi_fmul>
 800c3fe:	4947      	ldr	r1, [pc, #284]	; (800c51c <atanf+0x1e8>)
 800c400:	f7f4 fb88 	bl	8000b14 <__addsf3>
 800c404:	4629      	mov	r1, r5
 800c406:	f7f4 fc8d 	bl	8000d24 <__aeabi_fmul>
 800c40a:	4945      	ldr	r1, [pc, #276]	; (800c520 <atanf+0x1ec>)
 800c40c:	f7f4 fb82 	bl	8000b14 <__addsf3>
 800c410:	4639      	mov	r1, r7
 800c412:	f7f4 fc87 	bl	8000d24 <__aeabi_fmul>
 800c416:	4943      	ldr	r1, [pc, #268]	; (800c524 <atanf+0x1f0>)
 800c418:	4607      	mov	r7, r0
 800c41a:	4628      	mov	r0, r5
 800c41c:	f7f4 fc82 	bl	8000d24 <__aeabi_fmul>
 800c420:	4941      	ldr	r1, [pc, #260]	; (800c528 <atanf+0x1f4>)
 800c422:	f7f4 fb75 	bl	8000b10 <__aeabi_fsub>
 800c426:	4629      	mov	r1, r5
 800c428:	f7f4 fc7c 	bl	8000d24 <__aeabi_fmul>
 800c42c:	493f      	ldr	r1, [pc, #252]	; (800c52c <atanf+0x1f8>)
 800c42e:	f7f4 fb6f 	bl	8000b10 <__aeabi_fsub>
 800c432:	4629      	mov	r1, r5
 800c434:	f7f4 fc76 	bl	8000d24 <__aeabi_fmul>
 800c438:	493d      	ldr	r1, [pc, #244]	; (800c530 <atanf+0x1fc>)
 800c43a:	f7f4 fb69 	bl	8000b10 <__aeabi_fsub>
 800c43e:	4629      	mov	r1, r5
 800c440:	f7f4 fc70 	bl	8000d24 <__aeabi_fmul>
 800c444:	493b      	ldr	r1, [pc, #236]	; (800c534 <atanf+0x200>)
 800c446:	f7f4 fb63 	bl	8000b10 <__aeabi_fsub>
 800c44a:	4629      	mov	r1, r5
 800c44c:	f7f4 fc6a 	bl	8000d24 <__aeabi_fmul>
 800c450:	4601      	mov	r1, r0
 800c452:	4638      	mov	r0, r7
 800c454:	f7f4 fb5e 	bl	8000b14 <__addsf3>
 800c458:	4621      	mov	r1, r4
 800c45a:	f7f4 fc63 	bl	8000d24 <__aeabi_fmul>
 800c45e:	1c73      	adds	r3, r6, #1
 800c460:	4601      	mov	r1, r0
 800c462:	d133      	bne.n	800c4cc <atanf+0x198>
 800c464:	4620      	mov	r0, r4
 800c466:	f7f4 fb53 	bl	8000b10 <__aeabi_fsub>
 800c46a:	e772      	b.n	800c352 <atanf+0x1e>
 800c46c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c470:	f7f4 fb4e 	bl	8000b10 <__aeabi_fsub>
 800c474:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c478:	4605      	mov	r5, r0
 800c47a:	4620      	mov	r0, r4
 800c47c:	f7f4 fb4a 	bl	8000b14 <__addsf3>
 800c480:	4601      	mov	r1, r0
 800c482:	4628      	mov	r0, r5
 800c484:	f7f4 fd02 	bl	8000e8c <__aeabi_fdiv>
 800c488:	2601      	movs	r6, #1
 800c48a:	4604      	mov	r4, r0
 800c48c:	e799      	b.n	800c3c2 <atanf+0x8e>
 800c48e:	4b2a      	ldr	r3, [pc, #168]	; (800c538 <atanf+0x204>)
 800c490:	429d      	cmp	r5, r3
 800c492:	dc14      	bgt.n	800c4be <atanf+0x18a>
 800c494:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c498:	f7f4 fb3a 	bl	8000b10 <__aeabi_fsub>
 800c49c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c4a0:	4605      	mov	r5, r0
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f7f4 fc3e 	bl	8000d24 <__aeabi_fmul>
 800c4a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c4ac:	f7f4 fb32 	bl	8000b14 <__addsf3>
 800c4b0:	4601      	mov	r1, r0
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f7f4 fcea 	bl	8000e8c <__aeabi_fdiv>
 800c4b8:	2602      	movs	r6, #2
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	e781      	b.n	800c3c2 <atanf+0x8e>
 800c4be:	4601      	mov	r1, r0
 800c4c0:	481e      	ldr	r0, [pc, #120]	; (800c53c <atanf+0x208>)
 800c4c2:	f7f4 fce3 	bl	8000e8c <__aeabi_fdiv>
 800c4c6:	2603      	movs	r6, #3
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	e77a      	b.n	800c3c2 <atanf+0x8e>
 800c4cc:	4b1c      	ldr	r3, [pc, #112]	; (800c540 <atanf+0x20c>)
 800c4ce:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c4d2:	f7f4 fb1d 	bl	8000b10 <__aeabi_fsub>
 800c4d6:	4621      	mov	r1, r4
 800c4d8:	f7f4 fb1a 	bl	8000b10 <__aeabi_fsub>
 800c4dc:	4b19      	ldr	r3, [pc, #100]	; (800c544 <atanf+0x210>)
 800c4de:	4601      	mov	r1, r0
 800c4e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c4e4:	f7f4 fb14 	bl	8000b10 <__aeabi_fsub>
 800c4e8:	f1b8 0f00 	cmp.w	r8, #0
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	f6bf af36 	bge.w	800c35e <atanf+0x2a>
 800c4f2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c4f6:	e72c      	b.n	800c352 <atanf+0x1e>
 800c4f8:	4c13      	ldr	r4, [pc, #76]	; (800c548 <atanf+0x214>)
 800c4fa:	e730      	b.n	800c35e <atanf+0x2a>
 800c4fc:	bfc90fdb 	.word	0xbfc90fdb
 800c500:	3edfffff 	.word	0x3edfffff
 800c504:	7149f2ca 	.word	0x7149f2ca
 800c508:	3f97ffff 	.word	0x3f97ffff
 800c50c:	3c8569d7 	.word	0x3c8569d7
 800c510:	3d4bda59 	.word	0x3d4bda59
 800c514:	3d886b35 	.word	0x3d886b35
 800c518:	3dba2e6e 	.word	0x3dba2e6e
 800c51c:	3e124925 	.word	0x3e124925
 800c520:	3eaaaaab 	.word	0x3eaaaaab
 800c524:	bd15a221 	.word	0xbd15a221
 800c528:	3d6ef16b 	.word	0x3d6ef16b
 800c52c:	3d9d8795 	.word	0x3d9d8795
 800c530:	3de38e38 	.word	0x3de38e38
 800c534:	3e4ccccd 	.word	0x3e4ccccd
 800c538:	401bffff 	.word	0x401bffff
 800c53c:	bf800000 	.word	0xbf800000
 800c540:	0800c870 	.word	0x0800c870
 800c544:	0800c860 	.word	0x0800c860
 800c548:	3fc90fdb 	.word	0x3fc90fdb

0800c54c <fabsf>:
 800c54c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c550:	4770      	bx	lr
	...

0800c554 <nanf>:
 800c554:	4800      	ldr	r0, [pc, #0]	; (800c558 <nanf+0x4>)
 800c556:	4770      	bx	lr
 800c558:	7fc00000 	.word	0x7fc00000

0800c55c <_init>:
 800c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55e:	bf00      	nop
 800c560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c562:	bc08      	pop	{r3}
 800c564:	469e      	mov	lr, r3
 800c566:	4770      	bx	lr

0800c568 <_fini>:
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	bf00      	nop
 800c56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c56e:	bc08      	pop	{r3}
 800c570:	469e      	mov	lr, r3
 800c572:	4770      	bx	lr
