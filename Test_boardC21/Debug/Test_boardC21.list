
Test_boardC21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003c7c  08003c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da4  08003da4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003da4  08003da4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003da4  08003da4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000070  08003e1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003e1c  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a58  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002422  00000000  00000000  00031af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001268  00000000  00000000  00033f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  00035180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c3a  00000000  00000000  00036328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d2a8  00000000  00000000  0004ef62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000910dc  00000000  00000000  0005c20a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed2e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005520  00000000  00000000  000ed364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c64 	.word	0x08003c64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003c64 	.word	0x08003c64

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f907 	bl	8000370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fc22 	bl	80029b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f911 	bl	80003be <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8e7 	bl	8000386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	db0a      	blt.n	800029e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <__NVIC_SetPriority+0x4c>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	0112      	lsls	r2, r2, #4
 8000294:	b2d2      	uxtb	r2, r2
 8000296:	440b      	add	r3, r1
 8000298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800029c:	e00a      	b.n	80002b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4908      	ldr	r1, [pc, #32]	; (80002c4 <__NVIC_SetPriority+0x50>)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f003 030f 	and.w	r3, r3, #15
 80002aa:	3b04      	subs	r3, #4
 80002ac:	0112      	lsls	r2, r2, #4
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	440b      	add	r3, r1
 80002b2:	761a      	strb	r2, [r3, #24]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e100 	.word	0xe000e100
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b089      	sub	sp, #36	; 0x24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	f1c3 0307 	rsb	r3, r3, #7
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	bf28      	it	cs
 80002e6:	2304      	movcs	r3, #4
 80002e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	3304      	adds	r3, #4
 80002ee:	2b06      	cmp	r3, #6
 80002f0:	d902      	bls.n	80002f8 <NVIC_EncodePriority+0x30>
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	3b03      	subs	r3, #3
 80002f6:	e000      	b.n	80002fa <NVIC_EncodePriority+0x32>
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000300:	69bb      	ldr	r3, [r7, #24]
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	43da      	mvns	r2, r3
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	401a      	ands	r2, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000310:	f04f 31ff 	mov.w	r1, #4294967295
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	43d9      	mvns	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000320:	4313      	orrs	r3, r2
         );
}
 8000322:	4618      	mov	r0, r3
 8000324:	3724      	adds	r7, #36	; 0x24
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800033c:	d301      	bcc.n	8000342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800033e:	2301      	movs	r3, #1
 8000340:	e00f      	b.n	8000362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <SysTick_Config+0x40>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3b01      	subs	r3, #1
 8000348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800034a:	210f      	movs	r1, #15
 800034c:	f04f 30ff 	mov.w	r0, #4294967295
 8000350:	f7ff ff90 	bl	8000274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <SysTick_Config+0x40>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <SysTick_Config+0x40>)
 800035c:	2207      	movs	r2, #7
 800035e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000360:	2300      	movs	r3, #0
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	e000e010 	.word	0xe000e010

08000370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f7ff ff49 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000386:	b580      	push	{r7, lr}
 8000388:	b086      	sub	sp, #24
 800038a:	af00      	add	r7, sp, #0
 800038c:	4603      	mov	r3, r0
 800038e:	60b9      	str	r1, [r7, #8]
 8000390:	607a      	str	r2, [r7, #4]
 8000392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000398:	f7ff ff5e 	bl	8000258 <__NVIC_GetPriorityGrouping>
 800039c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	68b9      	ldr	r1, [r7, #8]
 80003a2:	6978      	ldr	r0, [r7, #20]
 80003a4:	f7ff ff90 	bl	80002c8 <NVIC_EncodePriority>
 80003a8:	4602      	mov	r2, r0
 80003aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ae:	4611      	mov	r1, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff5f 	bl	8000274 <__NVIC_SetPriority>
}
 80003b6:	bf00      	nop
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff ffb0 	bl	800032c <SysTick_Config>
 80003cc:	4603      	mov	r3, r0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003d8:	b480      	push	{r7}
 80003da:	b08b      	sub	sp, #44	; 0x2c
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80003e2:	2300      	movs	r3, #0
 80003e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80003e6:	2300      	movs	r3, #0
 80003e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003ea:	e127      	b.n	800063c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80003ec:	2201      	movs	r2, #1
 80003ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	69fa      	ldr	r2, [r7, #28]
 80003fc:	4013      	ands	r3, r2
 80003fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000400:	69ba      	ldr	r2, [r7, #24]
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	429a      	cmp	r2, r3
 8000406:	f040 8116 	bne.w	8000636 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	2b12      	cmp	r3, #18
 8000410:	d034      	beq.n	800047c <HAL_GPIO_Init+0xa4>
 8000412:	2b12      	cmp	r3, #18
 8000414:	d80d      	bhi.n	8000432 <HAL_GPIO_Init+0x5a>
 8000416:	2b02      	cmp	r3, #2
 8000418:	d02b      	beq.n	8000472 <HAL_GPIO_Init+0x9a>
 800041a:	2b02      	cmp	r3, #2
 800041c:	d804      	bhi.n	8000428 <HAL_GPIO_Init+0x50>
 800041e:	2b00      	cmp	r3, #0
 8000420:	d031      	beq.n	8000486 <HAL_GPIO_Init+0xae>
 8000422:	2b01      	cmp	r3, #1
 8000424:	d01c      	beq.n	8000460 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000426:	e048      	b.n	80004ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000428:	2b03      	cmp	r3, #3
 800042a:	d043      	beq.n	80004b4 <HAL_GPIO_Init+0xdc>
 800042c:	2b11      	cmp	r3, #17
 800042e:	d01b      	beq.n	8000468 <HAL_GPIO_Init+0x90>
          break;
 8000430:	e043      	b.n	80004ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000432:	4a89      	ldr	r2, [pc, #548]	; (8000658 <HAL_GPIO_Init+0x280>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d026      	beq.n	8000486 <HAL_GPIO_Init+0xae>
 8000438:	4a87      	ldr	r2, [pc, #540]	; (8000658 <HAL_GPIO_Init+0x280>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d806      	bhi.n	800044c <HAL_GPIO_Init+0x74>
 800043e:	4a87      	ldr	r2, [pc, #540]	; (800065c <HAL_GPIO_Init+0x284>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d020      	beq.n	8000486 <HAL_GPIO_Init+0xae>
 8000444:	4a86      	ldr	r2, [pc, #536]	; (8000660 <HAL_GPIO_Init+0x288>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d01d      	beq.n	8000486 <HAL_GPIO_Init+0xae>
          break;
 800044a:	e036      	b.n	80004ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800044c:	4a85      	ldr	r2, [pc, #532]	; (8000664 <HAL_GPIO_Init+0x28c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d019      	beq.n	8000486 <HAL_GPIO_Init+0xae>
 8000452:	4a85      	ldr	r2, [pc, #532]	; (8000668 <HAL_GPIO_Init+0x290>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d016      	beq.n	8000486 <HAL_GPIO_Init+0xae>
 8000458:	4a84      	ldr	r2, [pc, #528]	; (800066c <HAL_GPIO_Init+0x294>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d013      	beq.n	8000486 <HAL_GPIO_Init+0xae>
          break;
 800045e:	e02c      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	623b      	str	r3, [r7, #32]
          break;
 8000466:	e028      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	3304      	adds	r3, #4
 800046e:	623b      	str	r3, [r7, #32]
          break;
 8000470:	e023      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	3308      	adds	r3, #8
 8000478:	623b      	str	r3, [r7, #32]
          break;
 800047a:	e01e      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	330c      	adds	r3, #12
 8000482:	623b      	str	r3, [r7, #32]
          break;
 8000484:	e019      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d102      	bne.n	8000494 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800048e:	2304      	movs	r3, #4
 8000490:	623b      	str	r3, [r7, #32]
          break;
 8000492:	e012      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d105      	bne.n	80004a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800049c:	2308      	movs	r3, #8
 800049e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	69fa      	ldr	r2, [r7, #28]
 80004a4:	611a      	str	r2, [r3, #16]
          break;
 80004a6:	e008      	b.n	80004ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004a8:	2308      	movs	r3, #8
 80004aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	69fa      	ldr	r2, [r7, #28]
 80004b0:	615a      	str	r2, [r3, #20]
          break;
 80004b2:	e002      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
          break;
 80004b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	2bff      	cmp	r3, #255	; 0xff
 80004be:	d801      	bhi.n	80004c4 <HAL_GPIO_Init+0xec>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	e001      	b.n	80004c8 <HAL_GPIO_Init+0xf0>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	3304      	adds	r3, #4
 80004c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80004ca:	69bb      	ldr	r3, [r7, #24]
 80004cc:	2bff      	cmp	r3, #255	; 0xff
 80004ce:	d802      	bhi.n	80004d6 <HAL_GPIO_Init+0xfe>
 80004d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	e002      	b.n	80004dc <HAL_GPIO_Init+0x104>
 80004d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d8:	3b08      	subs	r3, #8
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	210f      	movs	r1, #15
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	43db      	mvns	r3, r3
 80004ec:	401a      	ands	r2, r3
 80004ee:	6a39      	ldr	r1, [r7, #32]
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	431a      	orrs	r2, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000504:	2b00      	cmp	r3, #0
 8000506:	f000 8096 	beq.w	8000636 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800050a:	4b59      	ldr	r3, [pc, #356]	; (8000670 <HAL_GPIO_Init+0x298>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a58      	ldr	r2, [pc, #352]	; (8000670 <HAL_GPIO_Init+0x298>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b56      	ldr	r3, [pc, #344]	; (8000670 <HAL_GPIO_Init+0x298>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000522:	4a54      	ldr	r2, [pc, #336]	; (8000674 <HAL_GPIO_Init+0x29c>)
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	3302      	adds	r3, #2
 800052a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000532:	f003 0303 	and.w	r3, r3, #3
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	220f      	movs	r2, #15
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	4013      	ands	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a4b      	ldr	r2, [pc, #300]	; (8000678 <HAL_GPIO_Init+0x2a0>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d013      	beq.n	8000576 <HAL_GPIO_Init+0x19e>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a4a      	ldr	r2, [pc, #296]	; (800067c <HAL_GPIO_Init+0x2a4>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d00d      	beq.n	8000572 <HAL_GPIO_Init+0x19a>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a49      	ldr	r2, [pc, #292]	; (8000680 <HAL_GPIO_Init+0x2a8>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d007      	beq.n	800056e <HAL_GPIO_Init+0x196>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a48      	ldr	r2, [pc, #288]	; (8000684 <HAL_GPIO_Init+0x2ac>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d101      	bne.n	800056a <HAL_GPIO_Init+0x192>
 8000566:	2303      	movs	r3, #3
 8000568:	e006      	b.n	8000578 <HAL_GPIO_Init+0x1a0>
 800056a:	2304      	movs	r3, #4
 800056c:	e004      	b.n	8000578 <HAL_GPIO_Init+0x1a0>
 800056e:	2302      	movs	r3, #2
 8000570:	e002      	b.n	8000578 <HAL_GPIO_Init+0x1a0>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <HAL_GPIO_Init+0x1a0>
 8000576:	2300      	movs	r3, #0
 8000578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800057a:	f002 0203 	and.w	r2, r2, #3
 800057e:	0092      	lsls	r2, r2, #2
 8000580:	4093      	lsls	r3, r2
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	4313      	orrs	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000588:	493a      	ldr	r1, [pc, #232]	; (8000674 <HAL_GPIO_Init+0x29c>)
 800058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	3302      	adds	r3, #2
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005a2:	4b39      	ldr	r3, [pc, #228]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4938      	ldr	r1, [pc, #224]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	600b      	str	r3, [r1, #0]
 80005ae:	e006      	b.n	80005be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005b0:	4b35      	ldr	r3, [pc, #212]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	43db      	mvns	r3, r3
 80005b8:	4933      	ldr	r1, [pc, #204]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005ba:	4013      	ands	r3, r2
 80005bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d006      	beq.n	80005d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	492e      	ldr	r1, [pc, #184]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	604b      	str	r3, [r1, #4]
 80005d6:	e006      	b.n	80005e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	43db      	mvns	r3, r3
 80005e0:	4929      	ldr	r1, [pc, #164]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005e2:	4013      	ands	r3, r2
 80005e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d006      	beq.n	8000600 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	4924      	ldr	r1, [pc, #144]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	608b      	str	r3, [r1, #8]
 80005fe:	e006      	b.n	800060e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	43db      	mvns	r3, r3
 8000608:	491f      	ldr	r1, [pc, #124]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 800060a:	4013      	ands	r3, r2
 800060c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 800061c:	68da      	ldr	r2, [r3, #12]
 800061e:	491a      	ldr	r1, [pc, #104]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	4313      	orrs	r3, r2
 8000624:	60cb      	str	r3, [r1, #12]
 8000626:	e006      	b.n	8000636 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 800062a:	68da      	ldr	r2, [r3, #12]
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	43db      	mvns	r3, r3
 8000630:	4915      	ldr	r1, [pc, #84]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 8000632:	4013      	ands	r3, r2
 8000634:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000638:	3301      	adds	r3, #1
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000642:	fa22 f303 	lsr.w	r3, r2, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	f47f aed0 	bne.w	80003ec <HAL_GPIO_Init+0x14>
  }
}
 800064c:	bf00      	nop
 800064e:	372c      	adds	r7, #44	; 0x2c
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	10210000 	.word	0x10210000
 800065c:	10110000 	.word	0x10110000
 8000660:	10120000 	.word	0x10120000
 8000664:	10310000 	.word	0x10310000
 8000668:	10320000 	.word	0x10320000
 800066c:	10220000 	.word	0x10220000
 8000670:	40021000 	.word	0x40021000
 8000674:	40010000 	.word	0x40010000
 8000678:	40010800 	.word	0x40010800
 800067c:	40010c00 	.word	0x40010c00
 8000680:	40011000 	.word	0x40011000
 8000684:	40011400 	.word	0x40011400
 8000688:	40010400 	.word	0x40010400

0800068c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
 8000698:	4613      	mov	r3, r2
 800069a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800069c:	787b      	ldrb	r3, [r7, #1]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006a2:	887a      	ldrh	r2, [r7, #2]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006a8:	e003      	b.n	80006b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006aa:	887b      	ldrh	r3, [r7, #2]
 80006ac:	041a      	lsls	r2, r3, #16
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	611a      	str	r2, [r3, #16]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80006ce:	887a      	ldrh	r2, [r7, #2]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4013      	ands	r3, r2
 80006d4:	041a      	lsls	r2, r3, #16
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	43d9      	mvns	r1, r3
 80006da:	887b      	ldrh	r3, [r7, #2]
 80006dc:	400b      	ands	r3, r1
 80006de:	431a      	orrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	611a      	str	r2, [r3, #16]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
	...

080006f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e11f      	b.n	8000942 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d106      	bne.n	800071c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f002 f97c 	bl	8002a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2224      	movs	r2, #36	; 0x24
 8000720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f022 0201 	bic.w	r2, r2, #1
 8000732:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000742:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000752:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000754:	f000 fcda 	bl	800110c <HAL_RCC_GetPCLK1Freq>
 8000758:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	4a7b      	ldr	r2, [pc, #492]	; (800094c <HAL_I2C_Init+0x25c>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d807      	bhi.n	8000774 <HAL_I2C_Init+0x84>
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4a7a      	ldr	r2, [pc, #488]	; (8000950 <HAL_I2C_Init+0x260>)
 8000768:	4293      	cmp	r3, r2
 800076a:	bf94      	ite	ls
 800076c:	2301      	movls	r3, #1
 800076e:	2300      	movhi	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	e006      	b.n	8000782 <HAL_I2C_Init+0x92>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4a77      	ldr	r2, [pc, #476]	; (8000954 <HAL_I2C_Init+0x264>)
 8000778:	4293      	cmp	r3, r2
 800077a:	bf94      	ite	ls
 800077c:	2301      	movls	r3, #1
 800077e:	2300      	movhi	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	e0db      	b.n	8000942 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4a72      	ldr	r2, [pc, #456]	; (8000958 <HAL_I2C_Init+0x268>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	0c9b      	lsrs	r3, r3, #18
 8000794:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6a1b      	ldr	r3, [r3, #32]
 80007b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	4a64      	ldr	r2, [pc, #400]	; (800094c <HAL_I2C_Init+0x25c>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d802      	bhi.n	80007c4 <HAL_I2C_Init+0xd4>
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3301      	adds	r3, #1
 80007c2:	e009      	b.n	80007d8 <HAL_I2C_Init+0xe8>
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
 80007ce:	4a63      	ldr	r2, [pc, #396]	; (800095c <HAL_I2C_Init+0x26c>)
 80007d0:	fba2 2303 	umull	r2, r3, r2, r3
 80007d4:	099b      	lsrs	r3, r3, #6
 80007d6:	3301      	adds	r3, #1
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	6812      	ldr	r2, [r2, #0]
 80007dc:	430b      	orrs	r3, r1
 80007de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80007ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	4956      	ldr	r1, [pc, #344]	; (800094c <HAL_I2C_Init+0x25c>)
 80007f4:	428b      	cmp	r3, r1
 80007f6:	d80d      	bhi.n	8000814 <HAL_I2C_Init+0x124>
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	1e59      	subs	r1, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	fbb1 f3f3 	udiv	r3, r1, r3
 8000806:	3301      	adds	r3, #1
 8000808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080c:	2b04      	cmp	r3, #4
 800080e:	bf38      	it	cc
 8000810:	2304      	movcc	r3, #4
 8000812:	e04f      	b.n	80008b4 <HAL_I2C_Init+0x1c4>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d111      	bne.n	8000840 <HAL_I2C_Init+0x150>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	1e58      	subs	r0, r3, #1
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6859      	ldr	r1, [r3, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	440b      	add	r3, r1
 800082a:	fbb0 f3f3 	udiv	r3, r0, r3
 800082e:	3301      	adds	r3, #1
 8000830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf0c      	ite	eq
 8000838:	2301      	moveq	r3, #1
 800083a:	2300      	movne	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	e012      	b.n	8000866 <HAL_I2C_Init+0x176>
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	1e58      	subs	r0, r3, #1
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6859      	ldr	r1, [r3, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	0099      	lsls	r1, r3, #2
 8000850:	440b      	add	r3, r1
 8000852:	fbb0 f3f3 	udiv	r3, r0, r3
 8000856:	3301      	adds	r3, #1
 8000858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800085c:	2b00      	cmp	r3, #0
 800085e:	bf0c      	ite	eq
 8000860:	2301      	moveq	r3, #1
 8000862:	2300      	movne	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_I2C_Init+0x17e>
 800086a:	2301      	movs	r3, #1
 800086c:	e022      	b.n	80008b4 <HAL_I2C_Init+0x1c4>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10e      	bne.n	8000894 <HAL_I2C_Init+0x1a4>
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	1e58      	subs	r0, r3, #1
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6859      	ldr	r1, [r3, #4]
 800087e:	460b      	mov	r3, r1
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	440b      	add	r3, r1
 8000884:	fbb0 f3f3 	udiv	r3, r0, r3
 8000888:	3301      	adds	r3, #1
 800088a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800088e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000892:	e00f      	b.n	80008b4 <HAL_I2C_Init+0x1c4>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	1e58      	subs	r0, r3, #1
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6859      	ldr	r1, [r3, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	440b      	add	r3, r1
 80008a2:	0099      	lsls	r1, r3, #2
 80008a4:	440b      	add	r3, r1
 80008a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80008aa:	3301      	adds	r3, #1
 80008ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	6809      	ldr	r1, [r1, #0]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69da      	ldr	r2, [r3, #28]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a1b      	ldr	r3, [r3, #32]
 80008ce:	431a      	orrs	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	430a      	orrs	r2, r1
 80008d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80008e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	6911      	ldr	r1, [r2, #16]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68d2      	ldr	r2, [r2, #12]
 80008ee:	4311      	orrs	r1, r2
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	430b      	orrs	r3, r1
 80008f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	431a      	orrs	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	430a      	orrs	r2, r1
 8000912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f042 0201 	orr.w	r2, r2, #1
 8000922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2220      	movs	r2, #32
 800092e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	000186a0 	.word	0x000186a0
 8000950:	001e847f 	.word	0x001e847f
 8000954:	003d08ff 	.word	0x003d08ff
 8000958:	431bde83 	.word	0x431bde83
 800095c:	10624dd3 	.word	0x10624dd3

08000960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e26c      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 8087 	beq.w	8000a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000980:	4b92      	ldr	r3, [pc, #584]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 030c 	and.w	r3, r3, #12
 8000988:	2b04      	cmp	r3, #4
 800098a:	d00c      	beq.n	80009a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800098c:	4b8f      	ldr	r3, [pc, #572]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 030c 	and.w	r3, r3, #12
 8000994:	2b08      	cmp	r3, #8
 8000996:	d112      	bne.n	80009be <HAL_RCC_OscConfig+0x5e>
 8000998:	4b8c      	ldr	r3, [pc, #560]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009a4:	d10b      	bne.n	80009be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009a6:	4b89      	ldr	r3, [pc, #548]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d06c      	beq.n	8000a8c <HAL_RCC_OscConfig+0x12c>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d168      	bne.n	8000a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e246      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009c6:	d106      	bne.n	80009d6 <HAL_RCC_OscConfig+0x76>
 80009c8:	4b80      	ldr	r3, [pc, #512]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a7f      	ldr	r2, [pc, #508]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	e02e      	b.n	8000a34 <HAL_RCC_OscConfig+0xd4>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d10c      	bne.n	80009f8 <HAL_RCC_OscConfig+0x98>
 80009de:	4b7b      	ldr	r3, [pc, #492]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a7a      	ldr	r2, [pc, #488]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	4b78      	ldr	r3, [pc, #480]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a77      	ldr	r2, [pc, #476]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	e01d      	b.n	8000a34 <HAL_RCC_OscConfig+0xd4>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a00:	d10c      	bne.n	8000a1c <HAL_RCC_OscConfig+0xbc>
 8000a02:	4b72      	ldr	r3, [pc, #456]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a71      	ldr	r2, [pc, #452]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6013      	str	r3, [r2, #0]
 8000a0e:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a6e      	ldr	r2, [pc, #440]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e00b      	b.n	8000a34 <HAL_RCC_OscConfig+0xd4>
 8000a1c:	4b6b      	ldr	r3, [pc, #428]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a6a      	ldr	r2, [pc, #424]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b68      	ldr	r3, [pc, #416]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a67      	ldr	r2, [pc, #412]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d013      	beq.n	8000a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fbde 	bl	80001fc <HAL_GetTick>
 8000a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a42:	e008      	b.n	8000a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a44:	f7ff fbda 	bl	80001fc <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b64      	cmp	r3, #100	; 0x64
 8000a50:	d901      	bls.n	8000a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a52:	2303      	movs	r3, #3
 8000a54:	e1fa      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a56:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f0      	beq.n	8000a44 <HAL_RCC_OscConfig+0xe4>
 8000a62:	e014      	b.n	8000a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a64:	f7ff fbca 	bl	80001fc <HAL_GetTick>
 8000a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a6a:	e008      	b.n	8000a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a6c:	f7ff fbc6 	bl	80001fc <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	2b64      	cmp	r3, #100	; 0x64
 8000a78:	d901      	bls.n	8000a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e1e6      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a7e:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1f0      	bne.n	8000a6c <HAL_RCC_OscConfig+0x10c>
 8000a8a:	e000      	b.n	8000a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d063      	beq.n	8000b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a9a:	4b4c      	ldr	r3, [pc, #304]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 030c 	and.w	r3, r3, #12
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00b      	beq.n	8000abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000aa6:	4b49      	ldr	r3, [pc, #292]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 030c 	and.w	r3, r3, #12
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d11c      	bne.n	8000aec <HAL_RCC_OscConfig+0x18c>
 8000ab2:	4b46      	ldr	r3, [pc, #280]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d116      	bne.n	8000aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000abe:	4b43      	ldr	r3, [pc, #268]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d005      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x176>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d001      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e1ba      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	4939      	ldr	r1, [pc, #228]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aea:	e03a      	b.n	8000b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d020      	beq.n	8000b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000af4:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000afa:	f7ff fb7f 	bl	80001fc <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b00:	e008      	b.n	8000b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b02:	f7ff fb7b 	bl	80001fc <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d901      	bls.n	8000b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e19b      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f0      	beq.n	8000b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	4927      	ldr	r1, [pc, #156]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000b30:	4313      	orrs	r3, r2
 8000b32:	600b      	str	r3, [r1, #0]
 8000b34:	e015      	b.n	8000b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b3c:	f7ff fb5e 	bl	80001fc <HAL_GetTick>
 8000b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b42:	e008      	b.n	8000b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b44:	f7ff fb5a 	bl	80001fc <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d901      	bls.n	8000b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b52:	2303      	movs	r3, #3
 8000b54:	e17a      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f0      	bne.n	8000b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d03a      	beq.n	8000be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d019      	beq.n	8000baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_RCC_OscConfig+0x274>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b7c:	f7ff fb3e 	bl	80001fc <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b84:	f7ff fb3a 	bl	80001fc <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e15a      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f0      	beq.n	8000b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f000 fada 	bl	800115c <RCC_Delay>
 8000ba8:	e01c      	b.n	8000be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_RCC_OscConfig+0x274>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb0:	f7ff fb24 	bl	80001fc <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb6:	e00f      	b.n	8000bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bb8:	f7ff fb20 	bl	80001fc <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d908      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e140      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	42420000 	.word	0x42420000
 8000bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd8:	4b9e      	ldr	r3, [pc, #632]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1e9      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f000 80a6 	beq.w	8000d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf6:	4b97      	ldr	r3, [pc, #604]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10d      	bne.n	8000c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b94      	ldr	r3, [pc, #592]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a93      	ldr	r2, [pc, #588]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b91      	ldr	r3, [pc, #580]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1e:	4b8e      	ldr	r3, [pc, #568]	; (8000e58 <HAL_RCC_OscConfig+0x4f8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d118      	bne.n	8000c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c2a:	4b8b      	ldr	r3, [pc, #556]	; (8000e58 <HAL_RCC_OscConfig+0x4f8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a8a      	ldr	r2, [pc, #552]	; (8000e58 <HAL_RCC_OscConfig+0x4f8>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c36:	f7ff fae1 	bl	80001fc <HAL_GetTick>
 8000c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c3c:	e008      	b.n	8000c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c3e:	f7ff fadd 	bl	80001fc <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b64      	cmp	r3, #100	; 0x64
 8000c4a:	d901      	bls.n	8000c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e0fd      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c50:	4b81      	ldr	r3, [pc, #516]	; (8000e58 <HAL_RCC_OscConfig+0x4f8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f0      	beq.n	8000c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d106      	bne.n	8000c72 <HAL_RCC_OscConfig+0x312>
 8000c64:	4b7b      	ldr	r3, [pc, #492]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	4a7a      	ldr	r2, [pc, #488]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6213      	str	r3, [r2, #32]
 8000c70:	e02d      	b.n	8000cce <HAL_RCC_OscConfig+0x36e>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10c      	bne.n	8000c94 <HAL_RCC_OscConfig+0x334>
 8000c7a:	4b76      	ldr	r3, [pc, #472]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c7c:	6a1b      	ldr	r3, [r3, #32]
 8000c7e:	4a75      	ldr	r2, [pc, #468]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6213      	str	r3, [r2, #32]
 8000c86:	4b73      	ldr	r3, [pc, #460]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c88:	6a1b      	ldr	r3, [r3, #32]
 8000c8a:	4a72      	ldr	r2, [pc, #456]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c8c:	f023 0304 	bic.w	r3, r3, #4
 8000c90:	6213      	str	r3, [r2, #32]
 8000c92:	e01c      	b.n	8000cce <HAL_RCC_OscConfig+0x36e>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d10c      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x356>
 8000c9c:	4b6d      	ldr	r3, [pc, #436]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	4a6c      	ldr	r2, [pc, #432]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6213      	str	r3, [r2, #32]
 8000ca8:	4b6a      	ldr	r3, [pc, #424]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	4a69      	ldr	r2, [pc, #420]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6213      	str	r3, [r2, #32]
 8000cb4:	e00b      	b.n	8000cce <HAL_RCC_OscConfig+0x36e>
 8000cb6:	4b67      	ldr	r3, [pc, #412]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	4a66      	ldr	r2, [pc, #408]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cbc:	f023 0301 	bic.w	r3, r3, #1
 8000cc0:	6213      	str	r3, [r2, #32]
 8000cc2:	4b64      	ldr	r3, [pc, #400]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cc4:	6a1b      	ldr	r3, [r3, #32]
 8000cc6:	4a63      	ldr	r2, [pc, #396]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cc8:	f023 0304 	bic.w	r3, r3, #4
 8000ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d015      	beq.n	8000d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fa91 	bl	80001fc <HAL_GetTick>
 8000cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cdc:	e00a      	b.n	8000cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cde:	f7ff fa8d 	bl	80001fc <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d901      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e0ab      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf4:	4b57      	ldr	r3, [pc, #348]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0ee      	beq.n	8000cde <HAL_RCC_OscConfig+0x37e>
 8000d00:	e014      	b.n	8000d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d02:	f7ff fa7b 	bl	80001fc <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d08:	e00a      	b.n	8000d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fa77 	bl	80001fc <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e095      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d20:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1ee      	bne.n	8000d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d105      	bne.n	8000d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d32:	4b48      	ldr	r3, [pc, #288]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a47      	ldr	r2, [pc, #284]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 8081 	beq.w	8000e4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d48:	4b42      	ldr	r3, [pc, #264]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 030c 	and.w	r3, r3, #12
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d061      	beq.n	8000e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d146      	bne.n	8000dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d5c:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <HAL_RCC_OscConfig+0x4fc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d62:	f7ff fa4b 	bl	80001fc <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d6a:	f7ff fa47 	bl	80001fc <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e067      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f0      	bne.n	8000d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d90:	d108      	bne.n	8000da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	492d      	ldr	r1, [pc, #180]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000da0:	4313      	orrs	r3, r2
 8000da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a19      	ldr	r1, [r3, #32]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	430b      	orrs	r3, r1
 8000db6:	4927      	ldr	r1, [pc, #156]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_RCC_OscConfig+0x4fc>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fa1b 	bl	80001fc <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dca:	f7ff fa17 	bl	80001fc <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e037      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0x46a>
 8000de8:	e02f      	b.n	8000e4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_RCC_OscConfig+0x4fc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fa04 	bl	80001fc <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df8:	f7ff fa00 	bl	80001fc <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e020      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x498>
 8000e16:	e018      	b.n	8000e4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d101      	bne.n	8000e24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e013      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d106      	bne.n	8000e46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40007000 	.word	0x40007000
 8000e5c:	42420060 	.word	0x42420060

08000e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e0d0      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e74:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d910      	bls.n	8000ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f023 0207 	bic.w	r2, r3, #7
 8000e8a:	4965      	ldr	r1, [pc, #404]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e92:	4b63      	ldr	r3, [pc, #396]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d001      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e0b8      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d020      	beq.n	8000ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d005      	beq.n	8000ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ebc:	4b59      	ldr	r3, [pc, #356]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4a58      	ldr	r2, [pc, #352]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d005      	beq.n	8000ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ed4:	4b53      	ldr	r3, [pc, #332]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4a52      	ldr	r2, [pc, #328]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000eda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ee0:	4b50      	ldr	r3, [pc, #320]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	494d      	ldr	r1, [pc, #308]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d040      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d107      	bne.n	8000f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d115      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e07f      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d107      	bne.n	8000f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d109      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e073      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e06b      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f3e:	4b39      	ldr	r3, [pc, #228]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f023 0203 	bic.w	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4936      	ldr	r1, [pc, #216]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f50:	f7ff f954 	bl	80001fc <HAL_GetTick>
 8000f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f56:	e00a      	b.n	8000f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f58:	f7ff f950 	bl	80001fc <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e053      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 020c 	and.w	r2, r3, #12
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d1eb      	bne.n	8000f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d210      	bcs.n	8000fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 0207 	bic.w	r2, r3, #7
 8000f96:	4922      	ldr	r1, [pc, #136]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e032      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d008      	beq.n	8000fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	4916      	ldr	r1, [pc, #88]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d009      	beq.n	8000fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	490e      	ldr	r1, [pc, #56]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000fee:	f000 f821 	bl	8001034 <HAL_RCC_GetSysClockFreq>
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_RCC_ClockConfig+0x1c8>)
 8001000:	5cd3      	ldrb	r3, [r2, r3]
 8001002:	fa21 f303 	lsr.w	r3, r1, r3
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <HAL_RCC_ClockConfig+0x1cc>)
 8001008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_RCC_ClockConfig+0x1d0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8b2 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000
 8001024:	40021000 	.word	0x40021000
 8001028:	08003cf4 	.word	0x08003cf4
 800102c:	20000008 	.word	0x20000008
 8001030:	20000000 	.word	0x20000000

08001034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001034:	b490      	push	{r4, r7}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800103c:	1d3c      	adds	r4, r7, #4
 800103e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b04      	cmp	r3, #4
 800106c:	d002      	beq.n	8001074 <HAL_RCC_GetSysClockFreq+0x40>
 800106e:	2b08      	cmp	r3, #8
 8001070:	d003      	beq.n	800107a <HAL_RCC_GetSysClockFreq+0x46>
 8001072:	e02d      	b.n	80010d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001076:	623b      	str	r3, [r7, #32]
      break;
 8001078:	e02d      	b.n	80010d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	0c9b      	lsrs	r3, r3, #18
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001086:	4413      	add	r3, r2
 8001088:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800108c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	0c5b      	lsrs	r3, r3, #17
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010a6:	4413      	add	r3, r2
 80010a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80010ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80010b2:	fb02 f203 	mul.w	r2, r2, r3
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
 80010be:	e004      	b.n	80010ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	623b      	str	r3, [r7, #32]
      break;
 80010ce:	e002      	b.n	80010d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80010d2:	623b      	str	r3, [r7, #32]
      break;
 80010d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010d6:	6a3b      	ldr	r3, [r7, #32]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc90      	pop	{r4, r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	08003c7c 	.word	0x08003c7c
 80010e8:	08003c8c 	.word	0x08003c8c
 80010ec:	40021000 	.word	0x40021000
 80010f0:	007a1200 	.word	0x007a1200
 80010f4:	003d0900 	.word	0x003d0900

080010f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <HAL_RCC_GetHCLKFreq+0x10>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000008 	.word	0x20000008

0800110c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001110:	f7ff fff2 	bl	80010f8 <HAL_RCC_GetHCLKFreq>
 8001114:	4601      	mov	r1, r0
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	08003d04 	.word	0x08003d04

08001134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001138:	f7ff ffde 	bl	80010f8 <HAL_RCC_GetHCLKFreq>
 800113c:	4601      	mov	r1, r0
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	0adb      	lsrs	r3, r3, #11
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	4a03      	ldr	r2, [pc, #12]	; (8001158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800114a:	5cd3      	ldrb	r3, [r2, r3]
 800114c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001150:	4618      	mov	r0, r3
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	08003d04 	.word	0x08003d04

0800115c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <RCC_Delay+0x34>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <RCC_Delay+0x38>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	0a5b      	lsrs	r3, r3, #9
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001178:	bf00      	nop
  }
  while (Delay --);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	60fa      	str	r2, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f9      	bne.n	8001178 <RCC_Delay+0x1c>
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	10624dd3 	.word	0x10624dd3

08001198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e076      	b.n	8001298 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d108      	bne.n	80011c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011ba:	d009      	beq.n	80011d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
 80011c2:	e005      	b.n	80011d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f001 fc62 	bl	8002ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001206:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001254:	ea42 0103 	orr.w	r1, r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	0c1a      	lsrs	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f002 0204 	and.w	r2, r2, #4
 8001276:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	69da      	ldr	r2, [r3, #28]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001286:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80012ae:	2301      	movs	r3, #1
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_SPI_TransmitReceive+0x26>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e18a      	b.n	80015dc <HAL_SPI_TransmitReceive+0x33c>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80012ce:	f7fe ff95 	bl	80001fc <HAL_GetTick>
 80012d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80012e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d00f      	beq.n	8001310 <HAL_SPI_TransmitReceive+0x70>
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012f6:	d107      	bne.n	8001308 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <HAL_SPI_TransmitReceive+0x68>
 8001300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001304:	2b04      	cmp	r3, #4
 8001306:	d003      	beq.n	8001310 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001308:	2302      	movs	r3, #2
 800130a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800130e:	e15b      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_SPI_TransmitReceive+0x82>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_SPI_TransmitReceive+0x82>
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d103      	bne.n	800132a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001328:	e14e      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b04      	cmp	r3, #4
 8001334:	d003      	beq.n	800133e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2205      	movs	r2, #5
 800133a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	887a      	ldrh	r2, [r7, #2]
 800134e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	887a      	ldrh	r2, [r7, #2]
 8001366:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137e:	2b40      	cmp	r3, #64	; 0x40
 8001380:	d007      	beq.n	8001392 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800139a:	d178      	bne.n	800148e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_SPI_TransmitReceive+0x10a>
 80013a4:	8b7b      	ldrh	r3, [r7, #26]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d166      	bne.n	8001478 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	1c9a      	adds	r2, r3, #2
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80013ce:	e053      	b.n	8001478 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d11b      	bne.n	8001416 <HAL_SPI_TransmitReceive+0x176>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d016      	beq.n	8001416 <HAL_SPI_TransmitReceive+0x176>
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d113      	bne.n	8001416 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	881a      	ldrh	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	1c9a      	adds	r2, r3, #2
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001408:	b29b      	uxth	r3, r3
 800140a:	3b01      	subs	r3, #1
 800140c:	b29a      	uxth	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b01      	cmp	r3, #1
 8001422:	d119      	bne.n	8001458 <HAL_SPI_TransmitReceive+0x1b8>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001428:	b29b      	uxth	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d014      	beq.n	8001458 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001438:	b292      	uxth	r2, r2
 800143a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001440:	1c9a      	adds	r2, r3, #2
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001454:	2301      	movs	r3, #1
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001458:	f7fe fed0 	bl	80001fc <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001464:	429a      	cmp	r2, r3
 8001466:	d807      	bhi.n	8001478 <HAL_SPI_TransmitReceive+0x1d8>
 8001468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800146a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146e:	d003      	beq.n	8001478 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001476:	e0a7      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800147c:	b29b      	uxth	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1a6      	bne.n	80013d0 <HAL_SPI_TransmitReceive+0x130>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001486:	b29b      	uxth	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1a1      	bne.n	80013d0 <HAL_SPI_TransmitReceive+0x130>
 800148c:	e07c      	b.n	8001588 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <HAL_SPI_TransmitReceive+0x1fc>
 8001496:	8b7b      	ldrh	r3, [r7, #26]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d16b      	bne.n	8001574 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	330c      	adds	r3, #12
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80014c2:	e057      	b.n	8001574 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d11c      	bne.n	800150c <HAL_SPI_TransmitReceive+0x26c>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d017      	beq.n	800150c <HAL_SPI_TransmitReceive+0x26c>
 80014dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d114      	bne.n	800150c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	330c      	adds	r3, #12
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014fe:	b29b      	uxth	r3, r3
 8001500:	3b01      	subs	r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b01      	cmp	r3, #1
 8001518:	d119      	bne.n	800154e <HAL_SPI_TransmitReceive+0x2ae>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800151e:	b29b      	uxth	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d014      	beq.n	800154e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001540:	b29b      	uxth	r3, r3
 8001542:	3b01      	subs	r3, #1
 8001544:	b29a      	uxth	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800154a:	2301      	movs	r3, #1
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800154e:	f7fe fe55 	bl	80001fc <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800155a:	429a      	cmp	r2, r3
 800155c:	d803      	bhi.n	8001566 <HAL_SPI_TransmitReceive+0x2c6>
 800155e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d102      	bne.n	800156c <HAL_SPI_TransmitReceive+0x2cc>
 8001566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001568:	2b00      	cmp	r3, #0
 800156a:	d103      	bne.n	8001574 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001572:	e029      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001578:	b29b      	uxth	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1a2      	bne.n	80014c4 <HAL_SPI_TransmitReceive+0x224>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001582:	b29b      	uxth	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d19d      	bne.n	80014c4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 f8b1 	bl	80016f4 <SPI_EndRxTxTransaction>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2220      	movs	r2, #32
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80015a4:	e010      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10b      	bne.n	80015c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	e000      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80015c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80015d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3730      	adds	r7, #48	; 0x30
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80015f4:	f7fe fe02 	bl	80001fc <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	4413      	add	r3, r2
 8001602:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001604:	f7fe fdfa 	bl	80001fc <HAL_GetTick>
 8001608:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	015b      	lsls	r3, r3, #5
 8001610:	0d1b      	lsrs	r3, r3, #20
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800161a:	e054      	b.n	80016c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001622:	d050      	beq.n	80016c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001624:	f7fe fdea 	bl	80001fc <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	429a      	cmp	r2, r3
 8001632:	d902      	bls.n	800163a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d13d      	bne.n	80016b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001652:	d111      	bne.n	8001678 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800165c:	d004      	beq.n	8001668 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001666:	d107      	bne.n	8001678 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001676:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001680:	d10f      	bne.n	80016a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e017      	b.n	80016e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4013      	ands	r3, r2
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d19b      	bne.n	800161c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008

080016f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2200      	movs	r2, #0
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff ff6a 	bl	80015e4 <SPI_WaitFlagStateUntilTimeout>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	f043 0220 	orr.w	r2, r3, #32
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e000      	b.n	8001728 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e041      	b.n	80017c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d106      	bne.n	800175c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f001 f9f8 	bl	8002b4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3304      	adds	r3, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4610      	mov	r0, r2
 8001770:	f000 f98e 	bl	8001a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d109      	bne.n	80017f4 <HAL_TIM_PWM_Start+0x24>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	bf14      	ite	ne
 80017ec:	2301      	movne	r3, #1
 80017ee:	2300      	moveq	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e022      	b.n	800183a <HAL_TIM_PWM_Start+0x6a>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d109      	bne.n	800180e <HAL_TIM_PWM_Start+0x3e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	bf14      	ite	ne
 8001806:	2301      	movne	r3, #1
 8001808:	2300      	moveq	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	e015      	b.n	800183a <HAL_TIM_PWM_Start+0x6a>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b08      	cmp	r3, #8
 8001812:	d109      	bne.n	8001828 <HAL_TIM_PWM_Start+0x58>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b01      	cmp	r3, #1
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	e008      	b.n	800183a <HAL_TIM_PWM_Start+0x6a>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b01      	cmp	r3, #1
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e05e      	b.n	8001900 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d104      	bne.n	8001852 <HAL_TIM_PWM_Start+0x82>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001850:	e013      	b.n	800187a <HAL_TIM_PWM_Start+0xaa>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b04      	cmp	r3, #4
 8001856:	d104      	bne.n	8001862 <HAL_TIM_PWM_Start+0x92>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001860:	e00b      	b.n	800187a <HAL_TIM_PWM_Start+0xaa>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b08      	cmp	r3, #8
 8001866:	d104      	bne.n	8001872 <HAL_TIM_PWM_Start+0xa2>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001870:	e003      	b.n	800187a <HAL_TIM_PWM_Start+0xaa>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2202      	movs	r2, #2
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	6839      	ldr	r1, [r7, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 faee 	bl	8001e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <HAL_TIM_PWM_Start+0x138>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d107      	bne.n	80018a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_TIM_PWM_Start+0x138>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00e      	beq.n	80018ca <HAL_TIM_PWM_Start+0xfa>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b4:	d009      	beq.n	80018ca <HAL_TIM_PWM_Start+0xfa>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a14      	ldr	r2, [pc, #80]	; (800190c <HAL_TIM_PWM_Start+0x13c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d004      	beq.n	80018ca <HAL_TIM_PWM_Start+0xfa>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a12      	ldr	r2, [pc, #72]	; (8001910 <HAL_TIM_PWM_Start+0x140>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d111      	bne.n	80018ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b06      	cmp	r3, #6
 80018da:	d010      	beq.n	80018fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ec:	e007      	b.n	80018fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0201 	orr.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40000400 	.word	0x40000400
 8001910:	40000800 	.word	0x40000800

08001914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800192a:	2302      	movs	r3, #2
 800192c:	e0ac      	b.n	8001a88 <HAL_TIM_PWM_ConfigChannel+0x174>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0c      	cmp	r3, #12
 800193a:	f200 809f 	bhi.w	8001a7c <HAL_TIM_PWM_ConfigChannel+0x168>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001979 	.word	0x08001979
 8001948:	08001a7d 	.word	0x08001a7d
 800194c:	08001a7d 	.word	0x08001a7d
 8001950:	08001a7d 	.word	0x08001a7d
 8001954:	080019b9 	.word	0x080019b9
 8001958:	08001a7d 	.word	0x08001a7d
 800195c:	08001a7d 	.word	0x08001a7d
 8001960:	08001a7d 	.word	0x08001a7d
 8001964:	080019fb 	.word	0x080019fb
 8001968:	08001a7d 	.word	0x08001a7d
 800196c:	08001a7d 	.word	0x08001a7d
 8001970:	08001a7d 	.word	0x08001a7d
 8001974:	08001a3b 	.word	0x08001a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f8e8 	bl	8001b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0208 	orr.w	r2, r2, #8
 8001992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0204 	bic.w	r2, r2, #4
 80019a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6999      	ldr	r1, [r3, #24]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	619a      	str	r2, [r3, #24]
      break;
 80019b6:	e062      	b.n	8001a7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f92e 	bl	8001c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6999      	ldr	r1, [r3, #24]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	021a      	lsls	r2, r3, #8
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	619a      	str	r2, [r3, #24]
      break;
 80019f8:	e041      	b.n	8001a7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f977 	bl	8001cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69da      	ldr	r2, [r3, #28]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0208 	orr.w	r2, r2, #8
 8001a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0204 	bic.w	r2, r2, #4
 8001a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	69d9      	ldr	r1, [r3, #28]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	61da      	str	r2, [r3, #28]
      break;
 8001a38:	e021      	b.n	8001a7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68b9      	ldr	r1, [r7, #8]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f9c1 	bl	8001dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69da      	ldr	r2, [r3, #28]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69da      	ldr	r2, [r3, #28]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69d9      	ldr	r1, [r3, #28]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	021a      	lsls	r2, r3, #8
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	61da      	str	r2, [r3, #28]
      break;
 8001a7a:	e000      	b.n	8001a7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001a7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a29      	ldr	r2, [pc, #164]	; (8001b48 <TIM_Base_SetConfig+0xb8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d00b      	beq.n	8001ac0 <TIM_Base_SetConfig+0x30>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aae:	d007      	beq.n	8001ac0 <TIM_Base_SetConfig+0x30>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <TIM_Base_SetConfig+0xbc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d003      	beq.n	8001ac0 <TIM_Base_SetConfig+0x30>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <TIM_Base_SetConfig+0xc0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d108      	bne.n	8001ad2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <TIM_Base_SetConfig+0xb8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00b      	beq.n	8001af2 <TIM_Base_SetConfig+0x62>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae0:	d007      	beq.n	8001af2 <TIM_Base_SetConfig+0x62>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <TIM_Base_SetConfig+0xbc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d003      	beq.n	8001af2 <TIM_Base_SetConfig+0x62>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <TIM_Base_SetConfig+0xc0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d108      	bne.n	8001b04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <TIM_Base_SetConfig+0xb8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d103      	bne.n	8001b38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	615a      	str	r2, [r3, #20]
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40012c00 	.word	0x40012c00
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	40000800 	.word	0x40000800

08001b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	f023 0201 	bic.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 0303 	bic.w	r3, r3, #3
 8001b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f023 0302 	bic.w	r3, r3, #2
 8001b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <TIM_OC1_SetConfig+0xc8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d10c      	bne.n	8001bca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f023 0308 	bic.w	r3, r3, #8
 8001bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <TIM_OC1_SetConfig+0xc8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d111      	bne.n	8001bf6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	621a      	str	r2, [r3, #32]
}
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40012c00 	.word	0x40012c00

08001c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	f023 0210 	bic.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f023 0320 	bic.w	r3, r3, #32
 8001c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <TIM_OC2_SetConfig+0xd0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d10d      	bne.n	8001c9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <TIM_OC2_SetConfig+0xd0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d113      	bne.n	8001ccc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	621a      	str	r2, [r3, #32]
}
 8001ce6:	bf00      	nop
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	40012c00 	.word	0x40012c00

08001cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 0303 	bic.w	r3, r3, #3
 8001d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <TIM_OC3_SetConfig+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10d      	bne.n	8001d6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <TIM_OC3_SetConfig+0xd0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d113      	bne.n	8001d9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	621a      	str	r2, [r3, #32]
}
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40012c00 	.word	0x40012c00

08001dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	031b      	lsls	r3, r3, #12
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <TIM_OC4_SetConfig+0x98>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d109      	bne.n	8001e3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	019b      	lsls	r3, r3, #6
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	621a      	str	r2, [r3, #32]
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40012c00 	.word	0x40012c00

08001e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	2201      	movs	r2, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a1a      	ldr	r2, [r3, #32]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	621a      	str	r2, [r3, #32]
}
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e046      	b.n	8001f52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a16      	ldr	r2, [pc, #88]	; (8001f5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00e      	beq.n	8001f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f10:	d009      	beq.n	8001f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d004      	beq.n	8001f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d10c      	bne.n	8001f40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40000800 	.word	0x40000800

08001f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e03f      	b.n	8001ffa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fe2c 	bl	8002bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2224      	movs	r2, #36	; 0x24
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f905 	bl	80021bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b08a      	sub	sp, #40	; 0x28
 8002006:	af02      	add	r7, sp, #8
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	4613      	mov	r3, r2
 8002010:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	d17c      	bne.n	800211c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_UART_Transmit+0x2c>
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e075      	b.n	800211e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_UART_Transmit+0x3e>
 800203c:	2302      	movs	r3, #2
 800203e:	e06e      	b.n	800211e <HAL_UART_Transmit+0x11c>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2221      	movs	r2, #33	; 0x21
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002056:	f7fe f8d1 	bl	80001fc <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	88fa      	ldrh	r2, [r7, #6]
 8002060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	88fa      	ldrh	r2, [r7, #6]
 8002066:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002070:	d108      	bne.n	8002084 <HAL_UART_Transmit+0x82>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d104      	bne.n	8002084 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	e003      	b.n	800208c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002094:	e02a      	b.n	80020ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2200      	movs	r2, #0
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f840 	bl	8002126 <UART_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e036      	b.n	800211e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10b      	bne.n	80020ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	3302      	adds	r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	e007      	b.n	80020de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	781a      	ldrb	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	3301      	adds	r3, #1
 80020dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1cf      	bne.n	8002096 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2200      	movs	r2, #0
 80020fe:	2140      	movs	r1, #64	; 0x40
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f810 	bl	8002126 <UART_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e006      	b.n	800211e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	e000      	b.n	800211e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800211c:	2302      	movs	r3, #2
  }
}
 800211e:	4618      	mov	r0, r3
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002136:	e02c      	b.n	8002192 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213e:	d028      	beq.n	8002192 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <UART_WaitOnFlagUntilTimeout+0x30>
 8002146:	f7fe f859 	bl	80001fc <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	429a      	cmp	r2, r3
 8002154:	d21d      	bcs.n	8002192 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002164:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e00f      	b.n	80021b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4013      	ands	r3, r2
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	429a      	cmp	r2, r3
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d0c3      	beq.n	8002138 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021f6:	f023 030c 	bic.w	r3, r3, #12
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	430b      	orrs	r3, r1
 8002202:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <UART_SetConfig+0x114>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d103      	bne.n	800222c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002224:	f7fe ff86 	bl	8001134 <HAL_RCC_GetPCLK2Freq>
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	e002      	b.n	8002232 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800222c:	f7fe ff6e 	bl	800110c <HAL_RCC_GetPCLK1Freq>
 8002230:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009a      	lsls	r2, r3, #2
 800223c:	441a      	add	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <UART_SetConfig+0x118>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	0119      	lsls	r1, r3, #4
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	009a      	lsls	r2, r3, #2
 800225c:	441a      	add	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fbb2 f2f3 	udiv	r2, r2, r3
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <UART_SetConfig+0x118>)
 800226a:	fba3 0302 	umull	r0, r3, r3, r2
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2064      	movs	r0, #100	; 0x64
 8002272:	fb00 f303 	mul.w	r3, r0, r3
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	3332      	adds	r3, #50	; 0x32
 800227c:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <UART_SetConfig+0x118>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002288:	4419      	add	r1, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	009a      	lsls	r2, r3, #2
 8002294:	441a      	add	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <UART_SetConfig+0x118>)
 80022a2:	fba3 0302 	umull	r0, r3, r3, r2
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	2064      	movs	r0, #100	; 0x64
 80022aa:	fb00 f303 	mul.w	r3, r0, r3
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	3332      	adds	r3, #50	; 0x32
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <UART_SetConfig+0x118>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	f003 020f 	and.w	r2, r3, #15
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	440a      	add	r2, r1
 80022c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40013800 	.word	0x40013800
 80022d4:	51eb851f 	.word	0x51eb851f

080022d8 <_write>:
static void MX_SPI2_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	4804      	ldr	r0, [pc, #16]	; (8002300 <_write+0x28>)
 80022f0:	f7ff fe87 	bl	8002002 <HAL_UART_Transmit>
	return len;
 80022f4:	687b      	ldr	r3, [r7, #4]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200001c0 	.word	0x200001c0

08002304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002308:	f7fd ff20 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800230c:	f000 f824 	bl	8002358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002310:	f000 f958 	bl	80025c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002314:	f000 f862 	bl	80023dc <MX_I2C1_Init>
  MX_SPI2_Init();
 8002318:	f000 f88e 	bl	8002438 <MX_SPI2_Init>
  MX_TIM3_Init();
 800231c:	f000 f8c2 	bl	80024a4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002320:	f000 f926 	bl	8002570 <MX_USART1_UART_Init>
//  {
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
//		HAL_Delay(100);
//  }

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002324:	210c      	movs	r1, #12
 8002326:	480a      	ldr	r0, [pc, #40]	; (8002350 <main+0x4c>)
 8002328:	f7ff fa52 	bl	80017d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800232c:	2108      	movs	r1, #8
 800232e:	4808      	ldr	r0, [pc, #32]	; (8002350 <main+0x4c>)
 8002330:	f7ff fa4e 	bl	80017d0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  RX_data();
 8002334:	f000 fb0c 	bl	8002950 <RX_data>
	  htim3.Instance->CCR4 = payload_packet.throttle;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <main+0x4c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a05      	ldr	r2, [pc, #20]	; (8002354 <main+0x50>)
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
	  htim3.Instance->CCR3 = payload_packet.throttle;
 8002342:	4b03      	ldr	r3, [pc, #12]	; (8002350 <main+0x4c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a03      	ldr	r2, [pc, #12]	; (8002354 <main+0x50>)
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	63da      	str	r2, [r3, #60]	; 0x3c
	  RX_data();
 800234c:	e7f2      	b.n	8002334 <main+0x30>
 800234e:	bf00      	nop
 8002350:	20000178 	.word	0x20000178
 8002354:	20000224 	.word	0x20000224

08002358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b090      	sub	sp, #64	; 0x40
 800235c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235e:	f107 0318 	add.w	r3, r7, #24
 8002362:	2228      	movs	r2, #40	; 0x28
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fd86 	bl	8002e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800237a:	2302      	movs	r3, #2
 800237c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800237e:	2301      	movs	r3, #1
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002382:	2310      	movs	r3, #16
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002386:	2302      	movs	r3, #2
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800238a:	2300      	movs	r3, #0
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800238e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002394:	f107 0318 	add.w	r3, r7, #24
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fae1 	bl	8000960 <HAL_RCC_OscConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80023a4:	f000 f988 	bl	80026b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a8:	230f      	movs	r3, #15
 80023aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ac:	2302      	movs	r3, #2
 80023ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fd4c 	bl	8000e60 <HAL_RCC_ClockConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80023ce:	f000 f973 	bl	80026b8 <Error_Handler>
  }
}
 80023d2:	bf00      	nop
 80023d4:	3740      	adds	r7, #64	; 0x40
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <MX_I2C1_Init+0x50>)
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <MX_I2C1_Init+0x54>)
 80023e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_I2C1_Init+0x50>)
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <MX_I2C1_Init+0x58>)
 80023ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_I2C1_Init+0x50>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_I2C1_Init+0x50>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_I2C1_Init+0x50>)
 80023fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <MX_I2C1_Init+0x50>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_I2C1_Init+0x50>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <MX_I2C1_Init+0x50>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_I2C1_Init+0x50>)
 8002414:	2200      	movs	r2, #0
 8002416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <MX_I2C1_Init+0x50>)
 800241a:	f7fe f969 	bl	80006f0 <HAL_I2C_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002424:	f000 f948 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000124 	.word	0x20000124
 8002430:	40005400 	.word	0x40005400
 8002434:	000186a0 	.word	0x000186a0

08002438 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <MX_SPI2_Init+0x64>)
 800243e:	4a18      	ldr	r2, [pc, #96]	; (80024a0 <MX_SPI2_Init+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <MX_SPI2_Init+0x64>)
 8002444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002448:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_SPI2_Init+0x64>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <MX_SPI2_Init+0x64>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_SPI2_Init+0x64>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_SPI2_Init+0x64>)
 800245e:	2200      	movs	r2, #0
 8002460:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_SPI2_Init+0x64>)
 8002464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002468:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_SPI2_Init+0x64>)
 800246c:	2200      	movs	r2, #0
 800246e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <MX_SPI2_Init+0x64>)
 8002472:	2200      	movs	r2, #0
 8002474:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_SPI2_Init+0x64>)
 8002478:	2200      	movs	r2, #0
 800247a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <MX_SPI2_Init+0x64>)
 800247e:	2200      	movs	r2, #0
 8002480:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_SPI2_Init+0x64>)
 8002484:	220a      	movs	r2, #10
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <MX_SPI2_Init+0x64>)
 800248a:	f7fe fe85 	bl	8001198 <HAL_SPI_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002494:	f000 f910 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200000cc 	.word	0x200000cc
 80024a0:	40003800 	.word	0x40003800

080024a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024aa:	f107 0320 	add.w	r3, r7, #32
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	611a      	str	r2, [r3, #16]
 80024c2:	615a      	str	r2, [r3, #20]
 80024c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <MX_TIM3_Init+0xc4>)
 80024c8:	4a28      	ldr	r2, [pc, #160]	; (800256c <MX_TIM3_Init+0xc8>)
 80024ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <MX_TIM3_Init+0xc4>)
 80024ce:	223f      	movs	r2, #63	; 0x3f
 80024d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d2:	4b25      	ldr	r3, [pc, #148]	; (8002568 <MX_TIM3_Init+0xc4>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <MX_TIM3_Init+0xc4>)
 80024da:	f644 6220 	movw	r2, #20000	; 0x4e20
 80024de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <MX_TIM3_Init+0xc4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <MX_TIM3_Init+0xc4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024ec:	481e      	ldr	r0, [pc, #120]	; (8002568 <MX_TIM3_Init+0xc4>)
 80024ee:	f7ff f91f 	bl	8001730 <HAL_TIM_PWM_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80024f8:	f000 f8de 	bl	80026b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002504:	f107 0320 	add.w	r3, r7, #32
 8002508:	4619      	mov	r1, r3
 800250a:	4817      	ldr	r0, [pc, #92]	; (8002568 <MX_TIM3_Init+0xc4>)
 800250c:	f7ff fcce 	bl	8001eac <HAL_TIMEx_MasterConfigSynchronization>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002516:	f000 f8cf 	bl	80026b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251a:	2360      	movs	r3, #96	; 0x60
 800251c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2208      	movs	r2, #8
 8002530:	4619      	mov	r1, r3
 8002532:	480d      	ldr	r0, [pc, #52]	; (8002568 <MX_TIM3_Init+0xc4>)
 8002534:	f7ff f9ee 	bl	8001914 <HAL_TIM_PWM_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800253e:	f000 f8bb 	bl	80026b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	220c      	movs	r2, #12
 8002546:	4619      	mov	r1, r3
 8002548:	4807      	ldr	r0, [pc, #28]	; (8002568 <MX_TIM3_Init+0xc4>)
 800254a:	f7ff f9e3 	bl	8001914 <HAL_TIM_PWM_ConfigChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002554:	f000 f8b0 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <MX_TIM3_Init+0xc4>)
 800255a:	f000 fb15 	bl	8002b88 <HAL_TIM_MspPostInit>

}
 800255e:	bf00      	nop
 8002560:	3728      	adds	r7, #40	; 0x28
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000178 	.word	0x20000178
 800256c:	40000400 	.word	0x40000400

08002570 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <MX_USART1_UART_Init+0x4c>)
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <MX_USART1_UART_Init+0x50>)
 8002578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <MX_USART1_UART_Init+0x4c>)
 800257c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002580:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <MX_USART1_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <MX_USART1_UART_Init+0x4c>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <MX_USART1_UART_Init+0x4c>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <MX_USART1_UART_Init+0x4c>)
 8002596:	220c      	movs	r2, #12
 8002598:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <MX_USART1_UART_Init+0x4c>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <MX_USART1_UART_Init+0x4c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025a6:	4805      	ldr	r0, [pc, #20]	; (80025bc <MX_USART1_UART_Init+0x4c>)
 80025a8:	f7ff fcde 	bl	8001f68 <HAL_UART_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025b2:	f000 f881 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200001c0 	.word	0x200001c0
 80025c0:	40013800 	.word	0x40013800

080025c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ca:	f107 0310 	add.w	r3, r7, #16
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <MX_GPIO_Init+0xe4>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a32      	ldr	r2, [pc, #200]	; (80026a8 <MX_GPIO_Init+0xe4>)
 80025de:	f043 0310 	orr.w	r3, r3, #16
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <MX_GPIO_Init+0xe4>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <MX_GPIO_Init+0xe4>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <MX_GPIO_Init+0xe4>)
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <MX_GPIO_Init+0xe4>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <MX_GPIO_Init+0xe4>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <MX_GPIO_Init+0xe4>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6193      	str	r3, [r2, #24]
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <MX_GPIO_Init+0xe4>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BUTTON2_Pin|BUTTON3_Pin, GPIO_PIN_RESET);
 8002620:	2200      	movs	r2, #0
 8002622:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002626:	4821      	ldr	r0, [pc, #132]	; (80026ac <MX_GPIO_Init+0xe8>)
 8002628:	f7fe f830 	bl	800068c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 800262c:	2200      	movs	r2, #0
 800262e:	f241 0104 	movw	r1, #4100	; 0x1004
 8002632:	481f      	ldr	r0, [pc, #124]	; (80026b0 <MX_GPIO_Init+0xec>)
 8002634:	f7fe f82a 	bl	800068c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8002638:	2200      	movs	r2, #0
 800263a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800263e:	481d      	ldr	r0, [pc, #116]	; (80026b4 <MX_GPIO_Init+0xf0>)
 8002640:	f7fe f824 	bl	800068c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8002644:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264a:	2301      	movs	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2302      	movs	r3, #2
 8002654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002656:	f107 0310 	add.w	r3, r7, #16
 800265a:	4619      	mov	r1, r3
 800265c:	4813      	ldr	r0, [pc, #76]	; (80026ac <MX_GPIO_Init+0xe8>)
 800265e:	f7fd febb 	bl	80003d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|NRF_CSN_Pin;
 8002662:	f241 0304 	movw	r3, #4100	; 0x1004
 8002666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002668:	2301      	movs	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2302      	movs	r3, #2
 8002672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	4619      	mov	r1, r3
 800267a:	480d      	ldr	r0, [pc, #52]	; (80026b0 <MX_GPIO_Init+0xec>)
 800267c:	f7fd feac 	bl	80003d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8002680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002686:	2301      	movs	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2302      	movs	r3, #2
 8002690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8002692:	f107 0310 	add.w	r3, r7, #16
 8002696:	4619      	mov	r1, r3
 8002698:	4806      	ldr	r0, [pc, #24]	; (80026b4 <MX_GPIO_Init+0xf0>)
 800269a:	f7fd fe9d 	bl	80003d8 <HAL_GPIO_Init>

}
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40011000 	.word	0x40011000
 80026b0:	40010c00 	.word	0x40010c00
 80026b4:	40010800 	.word	0x40010800

080026b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ce:	4802      	ldr	r0, [pc, #8]	; (80026d8 <nRF24_CSN_L+0x14>)
 80026d0:	f7fd ffdc 	bl	800068c <HAL_GPIO_WritePin>
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40010c00 	.word	0x40010c00

080026dc <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026e6:	4802      	ldr	r0, [pc, #8]	; (80026f0 <nRF24_CSN_H+0x14>)
 80026e8:	f7fd ffd0 	bl	800068c <HAL_GPIO_WritePin>
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40010c00 	.word	0x40010c00

080026f4 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {
 80026fe:	f107 020f 	add.w	r2, r7, #15
 8002702:	1df9      	adds	r1, r7, #7
 8002704:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2301      	movs	r3, #1
 800270c:	4806      	ldr	r0, [pc, #24]	; (8002728 <nRF24_LL_RW+0x34>)
 800270e:	f7fe fdc7 	bl	80012a0 <HAL_SPI_TransmitReceive>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <nRF24_LL_RW+0x28>
        Error_Handler();
 8002718:	f7ff ffce 	bl	80026b8 <Error_Handler>
    };
    return result;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200000cc 	.word	0x200000cc

0800272c <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8002736:	f7ff ffc5 	bl	80026c4 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ffd6 	bl	80026f4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8002748:	20ff      	movs	r0, #255	; 0xff
 800274a:	f7ff ffd3 	bl	80026f4 <nRF24_LL_RW>
 800274e:	4603      	mov	r3, r0
 8002750:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8002752:	f7ff ffc3 	bl	80026dc <nRF24_CSN_H>

	return value;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	460a      	mov	r2, r1
 800276a:	71fb      	strb	r3, [r7, #7]
 800276c:	4613      	mov	r3, r2
 800276e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002770:	f7ff ffa8 	bl	80026c4 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2b1f      	cmp	r3, #31
 8002778:	d810      	bhi.n	800279c <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	b25b      	sxtb	r3, r3
 8002784:	f043 0320 	orr.w	r3, r3, #32
 8002788:	b25b      	sxtb	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ffb1 	bl	80026f4 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8002792:	79bb      	ldrb	r3, [r7, #6]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ffad 	bl	80026f4 <nRF24_LL_RW>
 800279a:	e013      	b.n	80027c4 <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ffa8 	bl	80026f4 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	2be1      	cmp	r3, #225	; 0xe1
 80027a8:	d00c      	beq.n	80027c4 <nRF24_WriteReg+0x64>
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2be2      	cmp	r3, #226	; 0xe2
 80027ae:	d009      	beq.n	80027c4 <nRF24_WriteReg+0x64>
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	2be3      	cmp	r3, #227	; 0xe3
 80027b4:	d006      	beq.n	80027c4 <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2bff      	cmp	r3, #255	; 0xff
 80027ba:	d003      	beq.n	80027c4 <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff98 	bl	80026f4 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80027c4:	f7ff ff8a 	bl	80026dc <nRF24_CSN_H>
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	71fb      	strb	r3, [r7, #7]
 80027dc:	4613      	mov	r3, r2
 80027de:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80027e0:	f7ff ff70 	bl	80026c4 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff84 	bl	80026f4 <nRF24_LL_RW>
	while (count--)
 80027ec:	e007      	b.n	80027fe <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80027ee:	683c      	ldr	r4, [r7, #0]
 80027f0:	1c63      	adds	r3, r4, #1
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	20ff      	movs	r0, #255	; 0xff
 80027f6:	f7ff ff7d 	bl	80026f4 <nRF24_LL_RW>
 80027fa:	4603      	mov	r3, r0
 80027fc:	7023      	strb	r3, [r4, #0]
	while (count--)
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	71ba      	strb	r2, [r7, #6]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f2      	bne.n	80027ee <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8002808:	f7ff ff68 	bl	80026dc <nRF24_CSN_H>
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}

08002814 <nRF24_GetStatus_RXFIFO>:
 * @brief Lấy tastus RX FIFO
 *
 * @return uint8_t one of the nRF24_STATUS_RXFIFO_xx values
 */
uint8_t nRF24_GetStatus_RXFIFO(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8002818:	2017      	movs	r0, #23
 800281a:	f7ff ff87 	bl	800272c <nRF24_ReadReg>
 800281e:	4603      	mov	r3, r0
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	b2db      	uxtb	r3, r3
}
 8002826:	4618      	mov	r0, r3
 8002828:	bd80      	pop	{r7, pc}

0800282a <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800282e:	21ff      	movs	r1, #255	; 0xff
 8002830:	20e2      	movs	r0, #226	; 0xe2
 8002832:	f7ff ff95 	bl	8002760 <nRF24_WriteReg>
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}

0800283a <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8002840:	2007      	movs	r0, #7
 8002842:	f7ff ff73 	bl	800272c <nRF24_ReadReg>
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002850:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	4619      	mov	r1, r3
 8002856:	2007      	movs	r0, #7
 8002858:	f7ff ff82 	bl	8002760 <nRF24_WriteReg>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <nRF24_GetRxDplPayloadWidth>:
 * @brief đọc chiều dài của RX payload
 *
 * @return uint8_t độ dài
 */
static uint8_t nRF24_GetRxDplPayloadWidth()
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 800286a:	f7ff ff2b 	bl	80026c4 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 800286e:	2060      	movs	r0, #96	; 0x60
 8002870:	f7ff ff40 	bl	80026f4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8002874:	20ff      	movs	r0, #255	; 0xff
 8002876:	f7ff ff3d 	bl	80026f4 <nRF24_LL_RW>
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 800287e:	f7ff ff2d 	bl	80026dc <nRF24_CSN_H>

	return value;
 8002882:	79fb      	ldrb	r3, [r7, #7]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800289a:	2007      	movs	r0, #7
 800289c:	f7ff ff46 	bl	800272c <nRF24_ReadReg>
 80028a0:	4603      	mov	r3, r0
 80028a2:	105b      	asrs	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6)
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	d829      	bhi.n	8002906 <nRF24_ReadPayloadGeneric+0x7a>
	{
		// Get payload length
		if (dpl)
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00f      	beq.n	80028d8 <nRF24_ReadPayloadGeneric+0x4c>
		{
			*length = nRF24_GetRxDplPayloadWidth();
 80028b8:	f7ff ffd4 	bl	8002864 <nRF24_GetRxDplPayloadWidth>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	701a      	strb	r2, [r3, #0]
			if (*length > 32)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d90f      	bls.n	80028ec <nRF24_ReadPayloadGeneric+0x60>
			{ // broken packet
				*length = 0;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 80028d2:	f7ff ffaa 	bl	800282a <nRF24_FlushRX>
 80028d6:	e009      	b.n	80028ec <nRF24_ReadPayloadGeneric+0x60>
			}
		}
		else
		{
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]); // đọc payload của pipe x
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <nRF24_ReadPayloadGeneric+0x8c>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff24 	bl	800272c <nRF24_ReadReg>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	701a      	strb	r2, [r3, #0]
		}

		// đọc payload từ RX FIFO
		if (*length)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d006      	beq.n	8002902 <nRF24_ReadPayloadGeneric+0x76>
		{
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68f9      	ldr	r1, [r7, #12]
 80028fc:	2061      	movs	r0, #97	; 0x61
 80028fe:	f7ff ff67 	bl	80027d0 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	e003      	b.n	800290e <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800290c:	23ff      	movs	r3, #255	; 0xff
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	08003cec 	.word	0x08003cec

0800291c <nRF24_ReadPayload>:
 * @return   nRF24_RX_PIPEX - đã nhận được dữ liệu từ pipe x
 * @return	 nRF24_RX_EMPTY - the RX FIFO đéo có cc gì
 *
 */
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	6839      	ldr	r1, [r7, #0]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ffae 	bl	800288c <nRF24_ReadPayloadGeneric>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <Toggle_LED>:

extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002940:	2104      	movs	r1, #4
 8002942:	4802      	ldr	r0, [pc, #8]	; (800294c <Toggle_LED+0x10>)
 8002944:	f7fd feba 	bl	80006bc <HAL_GPIO_TogglePin>
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40010c00 	.word	0x40010c00

08002950 <RX_data>:

#endif // TX_SINGLE
}

void RX_data(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af02      	add	r7, sp, #8

    if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8002956:	f7ff ff5d 	bl	8002814 <nRF24_GetStatus_RXFIFO>
 800295a:	4603      	mov	r3, r0
 800295c:	2b01      	cmp	r3, #1
 800295e:	d01b      	beq.n	8002998 <RX_data+0x48>
    {
        nRF24_RXResult pipe = nRF24_ReadPayload((uint8_t *)&payload_packet, &payload_length);
 8002960:	490f      	ldr	r1, [pc, #60]	; (80029a0 <RX_data+0x50>)
 8002962:	4810      	ldr	r0, [pc, #64]	; (80029a4 <RX_data+0x54>)
 8002964:	f7ff ffda 	bl	800291c <nRF24_ReadPayload>
 8002968:	4603      	mov	r3, r0
 800296a:	71fb      	strb	r3, [r7, #7]
        // Clear all pending IRQ flags
        nRF24_ClearIRQFlags();
 800296c:	f7ff ff65 	bl	800283a <nRF24_ClearIRQFlags>
        Toggle_LED();
 8002970:	f7ff ffe4 	bl	800293c <Toggle_LED>
#if DEBUG_FC
        printf("Pipe: %d\n", pipe);
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	4619      	mov	r1, r3
 8002978:	480b      	ldr	r0, [pc, #44]	; (80029a8 <RX_data+0x58>)
 800297a:	f000 fa85 	bl	8002e88 <iprintf>
        printf("value: %ld  %ld  %ld  %ld\n", payload_packet.throttle, payload_packet.roll, payload_packet.pitch, payload_packet.yaw);
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <RX_data+0x54>)
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <RX_data+0x54>)
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <RX_data+0x54>)
 8002988:	6898      	ldr	r0, [r3, #8]
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <RX_data+0x54>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	4603      	mov	r3, r0
 8002992:	4806      	ldr	r0, [pc, #24]	; (80029ac <RX_data+0x5c>)
 8002994:	f000 fa78 	bl	8002e88 <iprintf>
    }
    else
    {
        // todo:
    }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000005 	.word	0x20000005
 80029a4:	20000224 	.word	0x20000224
 80029a8:	08003cc4 	.word	0x08003cc4
 80029ac:	08003cd0 	.word	0x08003cd0

080029b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_MspInit+0x5c>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_MspInit+0x5c>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6193      	str	r3, [r2, #24]
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_MspInit+0x5c>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_MspInit+0x5c>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_MspInit+0x5c>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	61d3      	str	r3, [r2, #28]
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_MspInit+0x5c>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_MspInit+0x60>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_MspInit+0x60>)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010000 	.word	0x40010000

08002a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_I2C_MspInit+0x90>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d132      	bne.n	8002a9a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a34:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a3a:	f043 0308 	orr.w	r3, r3, #8
 8002a3e:	6193      	str	r3, [r2, #24]
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a52:	2312      	movs	r3, #18
 8002a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4812      	ldr	r0, [pc, #72]	; (8002aac <HAL_I2C_MspInit+0x98>)
 8002a62:	f7fd fcb9 	bl	80003d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_I2C_MspInit+0x9c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7c:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <HAL_I2C_MspInit+0x9c>)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a8c:	61d3      	str	r3, [r2, #28]
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a9a:	bf00      	nop
 8002a9c:	3728      	adds	r7, #40	; 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40005400 	.word	0x40005400
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010c00 	.word	0x40010c00
 8002ab0:	40010000 	.word	0x40010000

08002ab4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0310 	add.w	r3, r7, #16
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <HAL_SPI_MspInit+0x8c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d131      	bne.n	8002b38 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ade:	61d3      	str	r3, [r2, #28]
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	6193      	str	r3, [r2, #24]
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 8002b04:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b12:	f107 0310 	add.w	r3, r7, #16
 8002b16:	4619      	mov	r1, r3
 8002b18:	480b      	ldr	r0, [pc, #44]	; (8002b48 <HAL_SPI_MspInit+0x94>)
 8002b1a:	f7fd fc5d 	bl	80003d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8002b1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	4619      	mov	r1, r3
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <HAL_SPI_MspInit+0x94>)
 8002b34:	f7fd fc50 	bl	80003d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b38:	bf00      	nop
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40003800 	.word	0x40003800
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40010c00 	.word	0x40010c00

08002b4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_TIM_PWM_MspInit+0x34>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10b      	bne.n	8002b76 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_TIM_PWM_MspInit+0x38>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_TIM_PWM_MspInit+0x38>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	61d3      	str	r3, [r2, #28]
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_TIM_PWM_MspInit+0x38>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b76:	bf00      	nop
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40021000 	.word	0x40021000

08002b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_TIM_MspPostInit+0x58>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d117      	bne.n	8002bd8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_TIM_MspPostInit+0x5c>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <HAL_TIM_MspPostInit+0x5c>)
 8002bae:	f043 0308 	orr.w	r3, r3, #8
 8002bb2:	6193      	str	r3, [r2, #24]
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_TIM_MspPostInit+0x5c>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4805      	ldr	r0, [pc, #20]	; (8002be8 <HAL_TIM_MspPostInit+0x60>)
 8002bd4:	f7fd fc00 	bl	80003d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bd8:	bf00      	nop
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40010c00 	.word	0x40010c00

08002bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <HAL_UART_MspInit+0x8c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d131      	bne.n	8002c70 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_UART_MspInit+0x90>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_UART_MspInit+0x90>)
 8002c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c16:	6193      	str	r3, [r2, #24]
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <HAL_UART_MspInit+0x90>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_UART_MspInit+0x90>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <HAL_UART_MspInit+0x90>)
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	6193      	str	r3, [r2, #24]
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_UART_MspInit+0x90>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	f107 0310 	add.w	r3, r7, #16
 8002c4e:	4619      	mov	r1, r3
 8002c50:	480b      	ldr	r0, [pc, #44]	; (8002c80 <HAL_UART_MspInit+0x94>)
 8002c52:	f7fd fbc1 	bl	80003d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	f107 0310 	add.w	r3, r7, #16
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4805      	ldr	r0, [pc, #20]	; (8002c80 <HAL_UART_MspInit+0x94>)
 8002c6c:	f7fd fbb4 	bl	80003d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c70:	bf00      	nop
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40013800 	.word	0x40013800
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40010800 	.word	0x40010800

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <HardFault_Handler+0x4>

08002c96 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <MemManage_Handler+0x4>

08002c9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <BusFault_Handler+0x4>

08002ca2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca6:	e7fe      	b.n	8002ca6 <UsageFault_Handler+0x4>

08002ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd0:	f7fd fa82 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e00a      	b.n	8002d00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cea:	f3af 8000 	nop.w
 8002cee:	4601      	mov	r1, r0
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	60ba      	str	r2, [r7, #8]
 8002cf6:	b2ca      	uxtb	r2, r1
 8002cf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	dbf0      	blt.n	8002cea <_read+0x12>
	}

return len;
 8002d08:	687b      	ldr	r3, [r7, #4]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
	return -1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d38:	605a      	str	r2, [r3, #4]
	return 0;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <_isatty>:

int _isatty(int file)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
	return 0;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
	...

08002d74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <_sbrk+0x50>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <_sbrk+0x16>
		heap_end = &end;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <_sbrk+0x50>)
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <_sbrk+0x54>)
 8002d88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <_sbrk+0x50>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <_sbrk+0x50>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	466a      	mov	r2, sp
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d907      	bls.n	8002dae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002d9e:	f000 f841 	bl	8002e24 <__errno>
 8002da2:	4602      	mov	r2, r0
 8002da4:	230c      	movs	r3, #12
 8002da6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002da8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dac:	e006      	b.n	8002dbc <_sbrk+0x48>
	}

	heap_end += incr;
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <_sbrk+0x50>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <_sbrk+0x50>)
 8002db8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2000008c 	.word	0x2000008c
 8002dc8:	20000240 	.word	0x20000240

08002dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dd8:	480c      	ldr	r0, [pc, #48]	; (8002e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dda:	490d      	ldr	r1, [pc, #52]	; (8002e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de0:	e002      	b.n	8002de8 <LoopCopyDataInit>

08002de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de6:	3304      	adds	r3, #4

08002de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dec:	d3f9      	bcc.n	8002de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002df0:	4c0a      	ldr	r4, [pc, #40]	; (8002e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df4:	e001      	b.n	8002dfa <LoopFillZerobss>

08002df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df8:	3204      	adds	r2, #4

08002dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dfc:	d3fb      	bcc.n	8002df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dfe:	f7ff ffe5 	bl	8002dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e02:	f000 f815 	bl	8002e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e06:	f7ff fa7d 	bl	8002304 <main>
  bx lr
 8002e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8002e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002e14:	08003dac 	.word	0x08003dac
  ldr r2, =_sbss
 8002e18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002e1c:	20000240 	.word	0x20000240

08002e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e20:	e7fe      	b.n	8002e20 <ADC1_2_IRQHandler>
	...

08002e24 <__errno>:
 8002e24:	4b01      	ldr	r3, [pc, #4]	; (8002e2c <__errno+0x8>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	2000000c 	.word	0x2000000c

08002e30 <__libc_init_array>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	2500      	movs	r5, #0
 8002e34:	4e0c      	ldr	r6, [pc, #48]	; (8002e68 <__libc_init_array+0x38>)
 8002e36:	4c0d      	ldr	r4, [pc, #52]	; (8002e6c <__libc_init_array+0x3c>)
 8002e38:	1ba4      	subs	r4, r4, r6
 8002e3a:	10a4      	asrs	r4, r4, #2
 8002e3c:	42a5      	cmp	r5, r4
 8002e3e:	d109      	bne.n	8002e54 <__libc_init_array+0x24>
 8002e40:	f000 ff10 	bl	8003c64 <_init>
 8002e44:	2500      	movs	r5, #0
 8002e46:	4e0a      	ldr	r6, [pc, #40]	; (8002e70 <__libc_init_array+0x40>)
 8002e48:	4c0a      	ldr	r4, [pc, #40]	; (8002e74 <__libc_init_array+0x44>)
 8002e4a:	1ba4      	subs	r4, r4, r6
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	42a5      	cmp	r5, r4
 8002e50:	d105      	bne.n	8002e5e <__libc_init_array+0x2e>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e58:	4798      	blx	r3
 8002e5a:	3501      	adds	r5, #1
 8002e5c:	e7ee      	b.n	8002e3c <__libc_init_array+0xc>
 8002e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e62:	4798      	blx	r3
 8002e64:	3501      	adds	r5, #1
 8002e66:	e7f2      	b.n	8002e4e <__libc_init_array+0x1e>
 8002e68:	08003da4 	.word	0x08003da4
 8002e6c:	08003da4 	.word	0x08003da4
 8002e70:	08003da4 	.word	0x08003da4
 8002e74:	08003da8 	.word	0x08003da8

08002e78 <memset>:
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4402      	add	r2, r0
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <memset+0xa>
 8002e80:	4770      	bx	lr
 8002e82:	f803 1b01 	strb.w	r1, [r3], #1
 8002e86:	e7f9      	b.n	8002e7c <memset+0x4>

08002e88 <iprintf>:
 8002e88:	b40f      	push	{r0, r1, r2, r3}
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <iprintf+0x2c>)
 8002e8c:	b513      	push	{r0, r1, r4, lr}
 8002e8e:	681c      	ldr	r4, [r3, #0]
 8002e90:	b124      	cbz	r4, 8002e9c <iprintf+0x14>
 8002e92:	69a3      	ldr	r3, [r4, #24]
 8002e94:	b913      	cbnz	r3, 8002e9c <iprintf+0x14>
 8002e96:	4620      	mov	r0, r4
 8002e98:	f000 f9be 	bl	8003218 <__sinit>
 8002e9c:	ab05      	add	r3, sp, #20
 8002e9e:	9a04      	ldr	r2, [sp, #16]
 8002ea0:	68a1      	ldr	r1, [r4, #8]
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	f000 fb73 	bl	8003590 <_vfiprintf_r>
 8002eaa:	b002      	add	sp, #8
 8002eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eb0:	b004      	add	sp, #16
 8002eb2:	4770      	bx	lr
 8002eb4:	2000000c 	.word	0x2000000c

08002eb8 <__swbuf_r>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	460e      	mov	r6, r1
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	b118      	cbz	r0, 8002eca <__swbuf_r+0x12>
 8002ec2:	6983      	ldr	r3, [r0, #24]
 8002ec4:	b90b      	cbnz	r3, 8002eca <__swbuf_r+0x12>
 8002ec6:	f000 f9a7 	bl	8003218 <__sinit>
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <__swbuf_r+0x98>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	d12a      	bne.n	8002f26 <__swbuf_r+0x6e>
 8002ed0:	686c      	ldr	r4, [r5, #4]
 8002ed2:	69a3      	ldr	r3, [r4, #24]
 8002ed4:	60a3      	str	r3, [r4, #8]
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	071a      	lsls	r2, r3, #28
 8002eda:	d52e      	bpl.n	8002f3a <__swbuf_r+0x82>
 8002edc:	6923      	ldr	r3, [r4, #16]
 8002ede:	b363      	cbz	r3, 8002f3a <__swbuf_r+0x82>
 8002ee0:	6923      	ldr	r3, [r4, #16]
 8002ee2:	6820      	ldr	r0, [r4, #0]
 8002ee4:	b2f6      	uxtb	r6, r6
 8002ee6:	1ac0      	subs	r0, r0, r3
 8002ee8:	6963      	ldr	r3, [r4, #20]
 8002eea:	4637      	mov	r7, r6
 8002eec:	4283      	cmp	r3, r0
 8002eee:	dc04      	bgt.n	8002efa <__swbuf_r+0x42>
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f000 f926 	bl	8003144 <_fflush_r>
 8002ef8:	bb28      	cbnz	r0, 8002f46 <__swbuf_r+0x8e>
 8002efa:	68a3      	ldr	r3, [r4, #8]
 8002efc:	3001      	adds	r0, #1
 8002efe:	3b01      	subs	r3, #1
 8002f00:	60a3      	str	r3, [r4, #8]
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	6022      	str	r2, [r4, #0]
 8002f08:	701e      	strb	r6, [r3, #0]
 8002f0a:	6963      	ldr	r3, [r4, #20]
 8002f0c:	4283      	cmp	r3, r0
 8002f0e:	d004      	beq.n	8002f1a <__swbuf_r+0x62>
 8002f10:	89a3      	ldrh	r3, [r4, #12]
 8002f12:	07db      	lsls	r3, r3, #31
 8002f14:	d519      	bpl.n	8002f4a <__swbuf_r+0x92>
 8002f16:	2e0a      	cmp	r6, #10
 8002f18:	d117      	bne.n	8002f4a <__swbuf_r+0x92>
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	f000 f911 	bl	8003144 <_fflush_r>
 8002f22:	b190      	cbz	r0, 8002f4a <__swbuf_r+0x92>
 8002f24:	e00f      	b.n	8002f46 <__swbuf_r+0x8e>
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <__swbuf_r+0x9c>)
 8002f28:	429c      	cmp	r4, r3
 8002f2a:	d101      	bne.n	8002f30 <__swbuf_r+0x78>
 8002f2c:	68ac      	ldr	r4, [r5, #8]
 8002f2e:	e7d0      	b.n	8002ed2 <__swbuf_r+0x1a>
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <__swbuf_r+0xa0>)
 8002f32:	429c      	cmp	r4, r3
 8002f34:	bf08      	it	eq
 8002f36:	68ec      	ldreq	r4, [r5, #12]
 8002f38:	e7cb      	b.n	8002ed2 <__swbuf_r+0x1a>
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f000 f80d 	bl	8002f5c <__swsetup_r>
 8002f42:	2800      	cmp	r0, #0
 8002f44:	d0cc      	beq.n	8002ee0 <__swbuf_r+0x28>
 8002f46:	f04f 37ff 	mov.w	r7, #4294967295
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	08003d30 	.word	0x08003d30
 8002f54:	08003d50 	.word	0x08003d50
 8002f58:	08003d10 	.word	0x08003d10

08002f5c <__swsetup_r>:
 8002f5c:	4b32      	ldr	r3, [pc, #200]	; (8003028 <__swsetup_r+0xcc>)
 8002f5e:	b570      	push	{r4, r5, r6, lr}
 8002f60:	681d      	ldr	r5, [r3, #0]
 8002f62:	4606      	mov	r6, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	b125      	cbz	r5, 8002f72 <__swsetup_r+0x16>
 8002f68:	69ab      	ldr	r3, [r5, #24]
 8002f6a:	b913      	cbnz	r3, 8002f72 <__swsetup_r+0x16>
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	f000 f953 	bl	8003218 <__sinit>
 8002f72:	4b2e      	ldr	r3, [pc, #184]	; (800302c <__swsetup_r+0xd0>)
 8002f74:	429c      	cmp	r4, r3
 8002f76:	d10f      	bne.n	8002f98 <__swsetup_r+0x3c>
 8002f78:	686c      	ldr	r4, [r5, #4]
 8002f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	0715      	lsls	r5, r2, #28
 8002f82:	d42c      	bmi.n	8002fde <__swsetup_r+0x82>
 8002f84:	06d0      	lsls	r0, r2, #27
 8002f86:	d411      	bmi.n	8002fac <__swsetup_r+0x50>
 8002f88:	2209      	movs	r2, #9
 8002f8a:	6032      	str	r2, [r6, #0]
 8002f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f90:	81a3      	strh	r3, [r4, #12]
 8002f92:	f04f 30ff 	mov.w	r0, #4294967295
 8002f96:	e03e      	b.n	8003016 <__swsetup_r+0xba>
 8002f98:	4b25      	ldr	r3, [pc, #148]	; (8003030 <__swsetup_r+0xd4>)
 8002f9a:	429c      	cmp	r4, r3
 8002f9c:	d101      	bne.n	8002fa2 <__swsetup_r+0x46>
 8002f9e:	68ac      	ldr	r4, [r5, #8]
 8002fa0:	e7eb      	b.n	8002f7a <__swsetup_r+0x1e>
 8002fa2:	4b24      	ldr	r3, [pc, #144]	; (8003034 <__swsetup_r+0xd8>)
 8002fa4:	429c      	cmp	r4, r3
 8002fa6:	bf08      	it	eq
 8002fa8:	68ec      	ldreq	r4, [r5, #12]
 8002faa:	e7e6      	b.n	8002f7a <__swsetup_r+0x1e>
 8002fac:	0751      	lsls	r1, r2, #29
 8002fae:	d512      	bpl.n	8002fd6 <__swsetup_r+0x7a>
 8002fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fb2:	b141      	cbz	r1, 8002fc6 <__swsetup_r+0x6a>
 8002fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fb8:	4299      	cmp	r1, r3
 8002fba:	d002      	beq.n	8002fc2 <__swsetup_r+0x66>
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f000 fa19 	bl	80033f4 <_free_r>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	6363      	str	r3, [r4, #52]	; 0x34
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fcc:	81a3      	strh	r3, [r4, #12]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6063      	str	r3, [r4, #4]
 8002fd2:	6923      	ldr	r3, [r4, #16]
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	f043 0308 	orr.w	r3, r3, #8
 8002fdc:	81a3      	strh	r3, [r4, #12]
 8002fde:	6923      	ldr	r3, [r4, #16]
 8002fe0:	b94b      	cbnz	r3, 8002ff6 <__swsetup_r+0x9a>
 8002fe2:	89a3      	ldrh	r3, [r4, #12]
 8002fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fec:	d003      	beq.n	8002ff6 <__swsetup_r+0x9a>
 8002fee:	4621      	mov	r1, r4
 8002ff0:	4630      	mov	r0, r6
 8002ff2:	f000 f9bf 	bl	8003374 <__smakebuf_r>
 8002ff6:	89a2      	ldrh	r2, [r4, #12]
 8002ff8:	f012 0301 	ands.w	r3, r2, #1
 8002ffc:	d00c      	beq.n	8003018 <__swsetup_r+0xbc>
 8002ffe:	2300      	movs	r3, #0
 8003000:	60a3      	str	r3, [r4, #8]
 8003002:	6963      	ldr	r3, [r4, #20]
 8003004:	425b      	negs	r3, r3
 8003006:	61a3      	str	r3, [r4, #24]
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	b953      	cbnz	r3, 8003022 <__swsetup_r+0xc6>
 800300c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003010:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003014:	d1ba      	bne.n	8002f8c <__swsetup_r+0x30>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	0792      	lsls	r2, r2, #30
 800301a:	bf58      	it	pl
 800301c:	6963      	ldrpl	r3, [r4, #20]
 800301e:	60a3      	str	r3, [r4, #8]
 8003020:	e7f2      	b.n	8003008 <__swsetup_r+0xac>
 8003022:	2000      	movs	r0, #0
 8003024:	e7f7      	b.n	8003016 <__swsetup_r+0xba>
 8003026:	bf00      	nop
 8003028:	2000000c 	.word	0x2000000c
 800302c:	08003d30 	.word	0x08003d30
 8003030:	08003d50 	.word	0x08003d50
 8003034:	08003d10 	.word	0x08003d10

08003038 <__sflush_r>:
 8003038:	898a      	ldrh	r2, [r1, #12]
 800303a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800303e:	4605      	mov	r5, r0
 8003040:	0710      	lsls	r0, r2, #28
 8003042:	460c      	mov	r4, r1
 8003044:	d458      	bmi.n	80030f8 <__sflush_r+0xc0>
 8003046:	684b      	ldr	r3, [r1, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	dc05      	bgt.n	8003058 <__sflush_r+0x20>
 800304c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	dc02      	bgt.n	8003058 <__sflush_r+0x20>
 8003052:	2000      	movs	r0, #0
 8003054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800305a:	2e00      	cmp	r6, #0
 800305c:	d0f9      	beq.n	8003052 <__sflush_r+0x1a>
 800305e:	2300      	movs	r3, #0
 8003060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003064:	682f      	ldr	r7, [r5, #0]
 8003066:	6a21      	ldr	r1, [r4, #32]
 8003068:	602b      	str	r3, [r5, #0]
 800306a:	d032      	beq.n	80030d2 <__sflush_r+0x9a>
 800306c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800306e:	89a3      	ldrh	r3, [r4, #12]
 8003070:	075a      	lsls	r2, r3, #29
 8003072:	d505      	bpl.n	8003080 <__sflush_r+0x48>
 8003074:	6863      	ldr	r3, [r4, #4]
 8003076:	1ac0      	subs	r0, r0, r3
 8003078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800307a:	b10b      	cbz	r3, 8003080 <__sflush_r+0x48>
 800307c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800307e:	1ac0      	subs	r0, r0, r3
 8003080:	2300      	movs	r3, #0
 8003082:	4602      	mov	r2, r0
 8003084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003086:	6a21      	ldr	r1, [r4, #32]
 8003088:	4628      	mov	r0, r5
 800308a:	47b0      	blx	r6
 800308c:	1c43      	adds	r3, r0, #1
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	d106      	bne.n	80030a0 <__sflush_r+0x68>
 8003092:	6829      	ldr	r1, [r5, #0]
 8003094:	291d      	cmp	r1, #29
 8003096:	d848      	bhi.n	800312a <__sflush_r+0xf2>
 8003098:	4a29      	ldr	r2, [pc, #164]	; (8003140 <__sflush_r+0x108>)
 800309a:	40ca      	lsrs	r2, r1
 800309c:	07d6      	lsls	r6, r2, #31
 800309e:	d544      	bpl.n	800312a <__sflush_r+0xf2>
 80030a0:	2200      	movs	r2, #0
 80030a2:	6062      	str	r2, [r4, #4]
 80030a4:	6922      	ldr	r2, [r4, #16]
 80030a6:	04d9      	lsls	r1, r3, #19
 80030a8:	6022      	str	r2, [r4, #0]
 80030aa:	d504      	bpl.n	80030b6 <__sflush_r+0x7e>
 80030ac:	1c42      	adds	r2, r0, #1
 80030ae:	d101      	bne.n	80030b4 <__sflush_r+0x7c>
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	b903      	cbnz	r3, 80030b6 <__sflush_r+0x7e>
 80030b4:	6560      	str	r0, [r4, #84]	; 0x54
 80030b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030b8:	602f      	str	r7, [r5, #0]
 80030ba:	2900      	cmp	r1, #0
 80030bc:	d0c9      	beq.n	8003052 <__sflush_r+0x1a>
 80030be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030c2:	4299      	cmp	r1, r3
 80030c4:	d002      	beq.n	80030cc <__sflush_r+0x94>
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 f994 	bl	80033f4 <_free_r>
 80030cc:	2000      	movs	r0, #0
 80030ce:	6360      	str	r0, [r4, #52]	; 0x34
 80030d0:	e7c0      	b.n	8003054 <__sflush_r+0x1c>
 80030d2:	2301      	movs	r3, #1
 80030d4:	4628      	mov	r0, r5
 80030d6:	47b0      	blx	r6
 80030d8:	1c41      	adds	r1, r0, #1
 80030da:	d1c8      	bne.n	800306e <__sflush_r+0x36>
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0c5      	beq.n	800306e <__sflush_r+0x36>
 80030e2:	2b1d      	cmp	r3, #29
 80030e4:	d001      	beq.n	80030ea <__sflush_r+0xb2>
 80030e6:	2b16      	cmp	r3, #22
 80030e8:	d101      	bne.n	80030ee <__sflush_r+0xb6>
 80030ea:	602f      	str	r7, [r5, #0]
 80030ec:	e7b1      	b.n	8003052 <__sflush_r+0x1a>
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f4:	81a3      	strh	r3, [r4, #12]
 80030f6:	e7ad      	b.n	8003054 <__sflush_r+0x1c>
 80030f8:	690f      	ldr	r7, [r1, #16]
 80030fa:	2f00      	cmp	r7, #0
 80030fc:	d0a9      	beq.n	8003052 <__sflush_r+0x1a>
 80030fe:	0793      	lsls	r3, r2, #30
 8003100:	bf18      	it	ne
 8003102:	2300      	movne	r3, #0
 8003104:	680e      	ldr	r6, [r1, #0]
 8003106:	bf08      	it	eq
 8003108:	694b      	ldreq	r3, [r1, #20]
 800310a:	eba6 0807 	sub.w	r8, r6, r7
 800310e:	600f      	str	r7, [r1, #0]
 8003110:	608b      	str	r3, [r1, #8]
 8003112:	f1b8 0f00 	cmp.w	r8, #0
 8003116:	dd9c      	ble.n	8003052 <__sflush_r+0x1a>
 8003118:	4643      	mov	r3, r8
 800311a:	463a      	mov	r2, r7
 800311c:	6a21      	ldr	r1, [r4, #32]
 800311e:	4628      	mov	r0, r5
 8003120:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003122:	47b0      	blx	r6
 8003124:	2800      	cmp	r0, #0
 8003126:	dc06      	bgt.n	8003136 <__sflush_r+0xfe>
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800312e:	81a3      	strh	r3, [r4, #12]
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	e78e      	b.n	8003054 <__sflush_r+0x1c>
 8003136:	4407      	add	r7, r0
 8003138:	eba8 0800 	sub.w	r8, r8, r0
 800313c:	e7e9      	b.n	8003112 <__sflush_r+0xda>
 800313e:	bf00      	nop
 8003140:	20400001 	.word	0x20400001

08003144 <_fflush_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	690b      	ldr	r3, [r1, #16]
 8003148:	4605      	mov	r5, r0
 800314a:	460c      	mov	r4, r1
 800314c:	b1db      	cbz	r3, 8003186 <_fflush_r+0x42>
 800314e:	b118      	cbz	r0, 8003158 <_fflush_r+0x14>
 8003150:	6983      	ldr	r3, [r0, #24]
 8003152:	b90b      	cbnz	r3, 8003158 <_fflush_r+0x14>
 8003154:	f000 f860 	bl	8003218 <__sinit>
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <_fflush_r+0x48>)
 800315a:	429c      	cmp	r4, r3
 800315c:	d109      	bne.n	8003172 <_fflush_r+0x2e>
 800315e:	686c      	ldr	r4, [r5, #4]
 8003160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003164:	b17b      	cbz	r3, 8003186 <_fflush_r+0x42>
 8003166:	4621      	mov	r1, r4
 8003168:	4628      	mov	r0, r5
 800316a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800316e:	f7ff bf63 	b.w	8003038 <__sflush_r>
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <_fflush_r+0x4c>)
 8003174:	429c      	cmp	r4, r3
 8003176:	d101      	bne.n	800317c <_fflush_r+0x38>
 8003178:	68ac      	ldr	r4, [r5, #8]
 800317a:	e7f1      	b.n	8003160 <_fflush_r+0x1c>
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <_fflush_r+0x50>)
 800317e:	429c      	cmp	r4, r3
 8003180:	bf08      	it	eq
 8003182:	68ec      	ldreq	r4, [r5, #12]
 8003184:	e7ec      	b.n	8003160 <_fflush_r+0x1c>
 8003186:	2000      	movs	r0, #0
 8003188:	bd38      	pop	{r3, r4, r5, pc}
 800318a:	bf00      	nop
 800318c:	08003d30 	.word	0x08003d30
 8003190:	08003d50 	.word	0x08003d50
 8003194:	08003d10 	.word	0x08003d10

08003198 <std>:
 8003198:	2300      	movs	r3, #0
 800319a:	b510      	push	{r4, lr}
 800319c:	4604      	mov	r4, r0
 800319e:	e9c0 3300 	strd	r3, r3, [r0]
 80031a2:	6083      	str	r3, [r0, #8]
 80031a4:	8181      	strh	r1, [r0, #12]
 80031a6:	6643      	str	r3, [r0, #100]	; 0x64
 80031a8:	81c2      	strh	r2, [r0, #14]
 80031aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031ae:	6183      	str	r3, [r0, #24]
 80031b0:	4619      	mov	r1, r3
 80031b2:	2208      	movs	r2, #8
 80031b4:	305c      	adds	r0, #92	; 0x5c
 80031b6:	f7ff fe5f 	bl	8002e78 <memset>
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <std+0x38>)
 80031bc:	6224      	str	r4, [r4, #32]
 80031be:	6263      	str	r3, [r4, #36]	; 0x24
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <std+0x3c>)
 80031c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <std+0x40>)
 80031c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <std+0x44>)
 80031ca:	6323      	str	r3, [r4, #48]	; 0x30
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	bf00      	nop
 80031d0:	08003aed 	.word	0x08003aed
 80031d4:	08003b0f 	.word	0x08003b0f
 80031d8:	08003b47 	.word	0x08003b47
 80031dc:	08003b6b 	.word	0x08003b6b

080031e0 <_cleanup_r>:
 80031e0:	4901      	ldr	r1, [pc, #4]	; (80031e8 <_cleanup_r+0x8>)
 80031e2:	f000 b885 	b.w	80032f0 <_fwalk_reent>
 80031e6:	bf00      	nop
 80031e8:	08003145 	.word	0x08003145

080031ec <__sfmoreglue>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	2568      	movs	r5, #104	; 0x68
 80031f0:	1e4a      	subs	r2, r1, #1
 80031f2:	4355      	muls	r5, r2
 80031f4:	460e      	mov	r6, r1
 80031f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80031fa:	f000 f947 	bl	800348c <_malloc_r>
 80031fe:	4604      	mov	r4, r0
 8003200:	b140      	cbz	r0, 8003214 <__sfmoreglue+0x28>
 8003202:	2100      	movs	r1, #0
 8003204:	e9c0 1600 	strd	r1, r6, [r0]
 8003208:	300c      	adds	r0, #12
 800320a:	60a0      	str	r0, [r4, #8]
 800320c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003210:	f7ff fe32 	bl	8002e78 <memset>
 8003214:	4620      	mov	r0, r4
 8003216:	bd70      	pop	{r4, r5, r6, pc}

08003218 <__sinit>:
 8003218:	6983      	ldr	r3, [r0, #24]
 800321a:	b510      	push	{r4, lr}
 800321c:	4604      	mov	r4, r0
 800321e:	bb33      	cbnz	r3, 800326e <__sinit+0x56>
 8003220:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003224:	6503      	str	r3, [r0, #80]	; 0x50
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <__sinit+0x58>)
 8003228:	4a12      	ldr	r2, [pc, #72]	; (8003274 <__sinit+0x5c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6282      	str	r2, [r0, #40]	; 0x28
 800322e:	4298      	cmp	r0, r3
 8003230:	bf04      	itt	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	6183      	streq	r3, [r0, #24]
 8003236:	f000 f81f 	bl	8003278 <__sfp>
 800323a:	6060      	str	r0, [r4, #4]
 800323c:	4620      	mov	r0, r4
 800323e:	f000 f81b 	bl	8003278 <__sfp>
 8003242:	60a0      	str	r0, [r4, #8]
 8003244:	4620      	mov	r0, r4
 8003246:	f000 f817 	bl	8003278 <__sfp>
 800324a:	2200      	movs	r2, #0
 800324c:	60e0      	str	r0, [r4, #12]
 800324e:	2104      	movs	r1, #4
 8003250:	6860      	ldr	r0, [r4, #4]
 8003252:	f7ff ffa1 	bl	8003198 <std>
 8003256:	2201      	movs	r2, #1
 8003258:	2109      	movs	r1, #9
 800325a:	68a0      	ldr	r0, [r4, #8]
 800325c:	f7ff ff9c 	bl	8003198 <std>
 8003260:	2202      	movs	r2, #2
 8003262:	2112      	movs	r1, #18
 8003264:	68e0      	ldr	r0, [r4, #12]
 8003266:	f7ff ff97 	bl	8003198 <std>
 800326a:	2301      	movs	r3, #1
 800326c:	61a3      	str	r3, [r4, #24]
 800326e:	bd10      	pop	{r4, pc}
 8003270:	08003d0c 	.word	0x08003d0c
 8003274:	080031e1 	.word	0x080031e1

08003278 <__sfp>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <__sfp+0x70>)
 800327c:	4607      	mov	r7, r0
 800327e:	681e      	ldr	r6, [r3, #0]
 8003280:	69b3      	ldr	r3, [r6, #24]
 8003282:	b913      	cbnz	r3, 800328a <__sfp+0x12>
 8003284:	4630      	mov	r0, r6
 8003286:	f7ff ffc7 	bl	8003218 <__sinit>
 800328a:	3648      	adds	r6, #72	; 0x48
 800328c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003290:	3b01      	subs	r3, #1
 8003292:	d503      	bpl.n	800329c <__sfp+0x24>
 8003294:	6833      	ldr	r3, [r6, #0]
 8003296:	b133      	cbz	r3, 80032a6 <__sfp+0x2e>
 8003298:	6836      	ldr	r6, [r6, #0]
 800329a:	e7f7      	b.n	800328c <__sfp+0x14>
 800329c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032a0:	b16d      	cbz	r5, 80032be <__sfp+0x46>
 80032a2:	3468      	adds	r4, #104	; 0x68
 80032a4:	e7f4      	b.n	8003290 <__sfp+0x18>
 80032a6:	2104      	movs	r1, #4
 80032a8:	4638      	mov	r0, r7
 80032aa:	f7ff ff9f 	bl	80031ec <__sfmoreglue>
 80032ae:	6030      	str	r0, [r6, #0]
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d1f1      	bne.n	8003298 <__sfp+0x20>
 80032b4:	230c      	movs	r3, #12
 80032b6:	4604      	mov	r4, r0
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4620      	mov	r0, r4
 80032bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <__sfp+0x74>)
 80032c0:	6665      	str	r5, [r4, #100]	; 0x64
 80032c2:	e9c4 5500 	strd	r5, r5, [r4]
 80032c6:	60a5      	str	r5, [r4, #8]
 80032c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80032cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80032d0:	2208      	movs	r2, #8
 80032d2:	4629      	mov	r1, r5
 80032d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80032d8:	f7ff fdce 	bl	8002e78 <memset>
 80032dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032e4:	e7e9      	b.n	80032ba <__sfp+0x42>
 80032e6:	bf00      	nop
 80032e8:	08003d0c 	.word	0x08003d0c
 80032ec:	ffff0001 	.word	0xffff0001

080032f0 <_fwalk_reent>:
 80032f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032f4:	4680      	mov	r8, r0
 80032f6:	4689      	mov	r9, r1
 80032f8:	2600      	movs	r6, #0
 80032fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032fe:	b914      	cbnz	r4, 8003306 <_fwalk_reent+0x16>
 8003300:	4630      	mov	r0, r6
 8003302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003306:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800330a:	3f01      	subs	r7, #1
 800330c:	d501      	bpl.n	8003312 <_fwalk_reent+0x22>
 800330e:	6824      	ldr	r4, [r4, #0]
 8003310:	e7f5      	b.n	80032fe <_fwalk_reent+0xe>
 8003312:	89ab      	ldrh	r3, [r5, #12]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d907      	bls.n	8003328 <_fwalk_reent+0x38>
 8003318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800331c:	3301      	adds	r3, #1
 800331e:	d003      	beq.n	8003328 <_fwalk_reent+0x38>
 8003320:	4629      	mov	r1, r5
 8003322:	4640      	mov	r0, r8
 8003324:	47c8      	blx	r9
 8003326:	4306      	orrs	r6, r0
 8003328:	3568      	adds	r5, #104	; 0x68
 800332a:	e7ee      	b.n	800330a <_fwalk_reent+0x1a>

0800332c <__swhatbuf_r>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	460e      	mov	r6, r1
 8003330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003334:	b096      	sub	sp, #88	; 0x58
 8003336:	2900      	cmp	r1, #0
 8003338:	4614      	mov	r4, r2
 800333a:	461d      	mov	r5, r3
 800333c:	da07      	bge.n	800334e <__swhatbuf_r+0x22>
 800333e:	2300      	movs	r3, #0
 8003340:	602b      	str	r3, [r5, #0]
 8003342:	89b3      	ldrh	r3, [r6, #12]
 8003344:	061a      	lsls	r2, r3, #24
 8003346:	d410      	bmi.n	800336a <__swhatbuf_r+0x3e>
 8003348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334c:	e00e      	b.n	800336c <__swhatbuf_r+0x40>
 800334e:	466a      	mov	r2, sp
 8003350:	f000 fc32 	bl	8003bb8 <_fstat_r>
 8003354:	2800      	cmp	r0, #0
 8003356:	dbf2      	blt.n	800333e <__swhatbuf_r+0x12>
 8003358:	9a01      	ldr	r2, [sp, #4]
 800335a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800335e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003362:	425a      	negs	r2, r3
 8003364:	415a      	adcs	r2, r3
 8003366:	602a      	str	r2, [r5, #0]
 8003368:	e7ee      	b.n	8003348 <__swhatbuf_r+0x1c>
 800336a:	2340      	movs	r3, #64	; 0x40
 800336c:	2000      	movs	r0, #0
 800336e:	6023      	str	r3, [r4, #0]
 8003370:	b016      	add	sp, #88	; 0x58
 8003372:	bd70      	pop	{r4, r5, r6, pc}

08003374 <__smakebuf_r>:
 8003374:	898b      	ldrh	r3, [r1, #12]
 8003376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003378:	079d      	lsls	r5, r3, #30
 800337a:	4606      	mov	r6, r0
 800337c:	460c      	mov	r4, r1
 800337e:	d507      	bpl.n	8003390 <__smakebuf_r+0x1c>
 8003380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003384:	6023      	str	r3, [r4, #0]
 8003386:	6123      	str	r3, [r4, #16]
 8003388:	2301      	movs	r3, #1
 800338a:	6163      	str	r3, [r4, #20]
 800338c:	b002      	add	sp, #8
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	ab01      	add	r3, sp, #4
 8003392:	466a      	mov	r2, sp
 8003394:	f7ff ffca 	bl	800332c <__swhatbuf_r>
 8003398:	9900      	ldr	r1, [sp, #0]
 800339a:	4605      	mov	r5, r0
 800339c:	4630      	mov	r0, r6
 800339e:	f000 f875 	bl	800348c <_malloc_r>
 80033a2:	b948      	cbnz	r0, 80033b8 <__smakebuf_r+0x44>
 80033a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033a8:	059a      	lsls	r2, r3, #22
 80033aa:	d4ef      	bmi.n	800338c <__smakebuf_r+0x18>
 80033ac:	f023 0303 	bic.w	r3, r3, #3
 80033b0:	f043 0302 	orr.w	r3, r3, #2
 80033b4:	81a3      	strh	r3, [r4, #12]
 80033b6:	e7e3      	b.n	8003380 <__smakebuf_r+0xc>
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <__smakebuf_r+0x7c>)
 80033ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80033bc:	89a3      	ldrh	r3, [r4, #12]
 80033be:	6020      	str	r0, [r4, #0]
 80033c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c4:	81a3      	strh	r3, [r4, #12]
 80033c6:	9b00      	ldr	r3, [sp, #0]
 80033c8:	6120      	str	r0, [r4, #16]
 80033ca:	6163      	str	r3, [r4, #20]
 80033cc:	9b01      	ldr	r3, [sp, #4]
 80033ce:	b15b      	cbz	r3, 80033e8 <__smakebuf_r+0x74>
 80033d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033d4:	4630      	mov	r0, r6
 80033d6:	f000 fc01 	bl	8003bdc <_isatty_r>
 80033da:	b128      	cbz	r0, 80033e8 <__smakebuf_r+0x74>
 80033dc:	89a3      	ldrh	r3, [r4, #12]
 80033de:	f023 0303 	bic.w	r3, r3, #3
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	81a3      	strh	r3, [r4, #12]
 80033e8:	89a3      	ldrh	r3, [r4, #12]
 80033ea:	431d      	orrs	r5, r3
 80033ec:	81a5      	strh	r5, [r4, #12]
 80033ee:	e7cd      	b.n	800338c <__smakebuf_r+0x18>
 80033f0:	080031e1 	.word	0x080031e1

080033f4 <_free_r>:
 80033f4:	b538      	push	{r3, r4, r5, lr}
 80033f6:	4605      	mov	r5, r0
 80033f8:	2900      	cmp	r1, #0
 80033fa:	d043      	beq.n	8003484 <_free_r+0x90>
 80033fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003400:	1f0c      	subs	r4, r1, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	bfb8      	it	lt
 8003406:	18e4      	addlt	r4, r4, r3
 8003408:	f000 fc18 	bl	8003c3c <__malloc_lock>
 800340c:	4a1e      	ldr	r2, [pc, #120]	; (8003488 <_free_r+0x94>)
 800340e:	6813      	ldr	r3, [r2, #0]
 8003410:	4610      	mov	r0, r2
 8003412:	b933      	cbnz	r3, 8003422 <_free_r+0x2e>
 8003414:	6063      	str	r3, [r4, #4]
 8003416:	6014      	str	r4, [r2, #0]
 8003418:	4628      	mov	r0, r5
 800341a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800341e:	f000 bc0e 	b.w	8003c3e <__malloc_unlock>
 8003422:	42a3      	cmp	r3, r4
 8003424:	d90b      	bls.n	800343e <_free_r+0x4a>
 8003426:	6821      	ldr	r1, [r4, #0]
 8003428:	1862      	adds	r2, r4, r1
 800342a:	4293      	cmp	r3, r2
 800342c:	bf01      	itttt	eq
 800342e:	681a      	ldreq	r2, [r3, #0]
 8003430:	685b      	ldreq	r3, [r3, #4]
 8003432:	1852      	addeq	r2, r2, r1
 8003434:	6022      	streq	r2, [r4, #0]
 8003436:	6063      	str	r3, [r4, #4]
 8003438:	6004      	str	r4, [r0, #0]
 800343a:	e7ed      	b.n	8003418 <_free_r+0x24>
 800343c:	4613      	mov	r3, r2
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	b10a      	cbz	r2, 8003446 <_free_r+0x52>
 8003442:	42a2      	cmp	r2, r4
 8003444:	d9fa      	bls.n	800343c <_free_r+0x48>
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	1858      	adds	r0, r3, r1
 800344a:	42a0      	cmp	r0, r4
 800344c:	d10b      	bne.n	8003466 <_free_r+0x72>
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	4401      	add	r1, r0
 8003452:	1858      	adds	r0, r3, r1
 8003454:	4282      	cmp	r2, r0
 8003456:	6019      	str	r1, [r3, #0]
 8003458:	d1de      	bne.n	8003418 <_free_r+0x24>
 800345a:	6810      	ldr	r0, [r2, #0]
 800345c:	6852      	ldr	r2, [r2, #4]
 800345e:	4401      	add	r1, r0
 8003460:	6019      	str	r1, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	e7d8      	b.n	8003418 <_free_r+0x24>
 8003466:	d902      	bls.n	800346e <_free_r+0x7a>
 8003468:	230c      	movs	r3, #12
 800346a:	602b      	str	r3, [r5, #0]
 800346c:	e7d4      	b.n	8003418 <_free_r+0x24>
 800346e:	6820      	ldr	r0, [r4, #0]
 8003470:	1821      	adds	r1, r4, r0
 8003472:	428a      	cmp	r2, r1
 8003474:	bf01      	itttt	eq
 8003476:	6811      	ldreq	r1, [r2, #0]
 8003478:	6852      	ldreq	r2, [r2, #4]
 800347a:	1809      	addeq	r1, r1, r0
 800347c:	6021      	streq	r1, [r4, #0]
 800347e:	6062      	str	r2, [r4, #4]
 8003480:	605c      	str	r4, [r3, #4]
 8003482:	e7c9      	b.n	8003418 <_free_r+0x24>
 8003484:	bd38      	pop	{r3, r4, r5, pc}
 8003486:	bf00      	nop
 8003488:	20000090 	.word	0x20000090

0800348c <_malloc_r>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	1ccd      	adds	r5, r1, #3
 8003490:	f025 0503 	bic.w	r5, r5, #3
 8003494:	3508      	adds	r5, #8
 8003496:	2d0c      	cmp	r5, #12
 8003498:	bf38      	it	cc
 800349a:	250c      	movcc	r5, #12
 800349c:	2d00      	cmp	r5, #0
 800349e:	4606      	mov	r6, r0
 80034a0:	db01      	blt.n	80034a6 <_malloc_r+0x1a>
 80034a2:	42a9      	cmp	r1, r5
 80034a4:	d903      	bls.n	80034ae <_malloc_r+0x22>
 80034a6:	230c      	movs	r3, #12
 80034a8:	6033      	str	r3, [r6, #0]
 80034aa:	2000      	movs	r0, #0
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
 80034ae:	f000 fbc5 	bl	8003c3c <__malloc_lock>
 80034b2:	4a21      	ldr	r2, [pc, #132]	; (8003538 <_malloc_r+0xac>)
 80034b4:	6814      	ldr	r4, [r2, #0]
 80034b6:	4621      	mov	r1, r4
 80034b8:	b991      	cbnz	r1, 80034e0 <_malloc_r+0x54>
 80034ba:	4c20      	ldr	r4, [pc, #128]	; (800353c <_malloc_r+0xb0>)
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	b91b      	cbnz	r3, 80034c8 <_malloc_r+0x3c>
 80034c0:	4630      	mov	r0, r6
 80034c2:	f000 fb03 	bl	8003acc <_sbrk_r>
 80034c6:	6020      	str	r0, [r4, #0]
 80034c8:	4629      	mov	r1, r5
 80034ca:	4630      	mov	r0, r6
 80034cc:	f000 fafe 	bl	8003acc <_sbrk_r>
 80034d0:	1c43      	adds	r3, r0, #1
 80034d2:	d124      	bne.n	800351e <_malloc_r+0x92>
 80034d4:	230c      	movs	r3, #12
 80034d6:	4630      	mov	r0, r6
 80034d8:	6033      	str	r3, [r6, #0]
 80034da:	f000 fbb0 	bl	8003c3e <__malloc_unlock>
 80034de:	e7e4      	b.n	80034aa <_malloc_r+0x1e>
 80034e0:	680b      	ldr	r3, [r1, #0]
 80034e2:	1b5b      	subs	r3, r3, r5
 80034e4:	d418      	bmi.n	8003518 <_malloc_r+0x8c>
 80034e6:	2b0b      	cmp	r3, #11
 80034e8:	d90f      	bls.n	800350a <_malloc_r+0x7e>
 80034ea:	600b      	str	r3, [r1, #0]
 80034ec:	18cc      	adds	r4, r1, r3
 80034ee:	50cd      	str	r5, [r1, r3]
 80034f0:	4630      	mov	r0, r6
 80034f2:	f000 fba4 	bl	8003c3e <__malloc_unlock>
 80034f6:	f104 000b 	add.w	r0, r4, #11
 80034fa:	1d23      	adds	r3, r4, #4
 80034fc:	f020 0007 	bic.w	r0, r0, #7
 8003500:	1ac3      	subs	r3, r0, r3
 8003502:	d0d3      	beq.n	80034ac <_malloc_r+0x20>
 8003504:	425a      	negs	r2, r3
 8003506:	50e2      	str	r2, [r4, r3]
 8003508:	e7d0      	b.n	80034ac <_malloc_r+0x20>
 800350a:	684b      	ldr	r3, [r1, #4]
 800350c:	428c      	cmp	r4, r1
 800350e:	bf16      	itet	ne
 8003510:	6063      	strne	r3, [r4, #4]
 8003512:	6013      	streq	r3, [r2, #0]
 8003514:	460c      	movne	r4, r1
 8003516:	e7eb      	b.n	80034f0 <_malloc_r+0x64>
 8003518:	460c      	mov	r4, r1
 800351a:	6849      	ldr	r1, [r1, #4]
 800351c:	e7cc      	b.n	80034b8 <_malloc_r+0x2c>
 800351e:	1cc4      	adds	r4, r0, #3
 8003520:	f024 0403 	bic.w	r4, r4, #3
 8003524:	42a0      	cmp	r0, r4
 8003526:	d005      	beq.n	8003534 <_malloc_r+0xa8>
 8003528:	1a21      	subs	r1, r4, r0
 800352a:	4630      	mov	r0, r6
 800352c:	f000 face 	bl	8003acc <_sbrk_r>
 8003530:	3001      	adds	r0, #1
 8003532:	d0cf      	beq.n	80034d4 <_malloc_r+0x48>
 8003534:	6025      	str	r5, [r4, #0]
 8003536:	e7db      	b.n	80034f0 <_malloc_r+0x64>
 8003538:	20000090 	.word	0x20000090
 800353c:	20000094 	.word	0x20000094

08003540 <__sfputc_r>:
 8003540:	6893      	ldr	r3, [r2, #8]
 8003542:	b410      	push	{r4}
 8003544:	3b01      	subs	r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	6093      	str	r3, [r2, #8]
 800354a:	da07      	bge.n	800355c <__sfputc_r+0x1c>
 800354c:	6994      	ldr	r4, [r2, #24]
 800354e:	42a3      	cmp	r3, r4
 8003550:	db01      	blt.n	8003556 <__sfputc_r+0x16>
 8003552:	290a      	cmp	r1, #10
 8003554:	d102      	bne.n	800355c <__sfputc_r+0x1c>
 8003556:	bc10      	pop	{r4}
 8003558:	f7ff bcae 	b.w	8002eb8 <__swbuf_r>
 800355c:	6813      	ldr	r3, [r2, #0]
 800355e:	1c58      	adds	r0, r3, #1
 8003560:	6010      	str	r0, [r2, #0]
 8003562:	7019      	strb	r1, [r3, #0]
 8003564:	4608      	mov	r0, r1
 8003566:	bc10      	pop	{r4}
 8003568:	4770      	bx	lr

0800356a <__sfputs_r>:
 800356a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356c:	4606      	mov	r6, r0
 800356e:	460f      	mov	r7, r1
 8003570:	4614      	mov	r4, r2
 8003572:	18d5      	adds	r5, r2, r3
 8003574:	42ac      	cmp	r4, r5
 8003576:	d101      	bne.n	800357c <__sfputs_r+0x12>
 8003578:	2000      	movs	r0, #0
 800357a:	e007      	b.n	800358c <__sfputs_r+0x22>
 800357c:	463a      	mov	r2, r7
 800357e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003582:	4630      	mov	r0, r6
 8003584:	f7ff ffdc 	bl	8003540 <__sfputc_r>
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	d1f3      	bne.n	8003574 <__sfputs_r+0xa>
 800358c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003590 <_vfiprintf_r>:
 8003590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003594:	460c      	mov	r4, r1
 8003596:	b09d      	sub	sp, #116	; 0x74
 8003598:	4617      	mov	r7, r2
 800359a:	461d      	mov	r5, r3
 800359c:	4606      	mov	r6, r0
 800359e:	b118      	cbz	r0, 80035a8 <_vfiprintf_r+0x18>
 80035a0:	6983      	ldr	r3, [r0, #24]
 80035a2:	b90b      	cbnz	r3, 80035a8 <_vfiprintf_r+0x18>
 80035a4:	f7ff fe38 	bl	8003218 <__sinit>
 80035a8:	4b7c      	ldr	r3, [pc, #496]	; (800379c <_vfiprintf_r+0x20c>)
 80035aa:	429c      	cmp	r4, r3
 80035ac:	d158      	bne.n	8003660 <_vfiprintf_r+0xd0>
 80035ae:	6874      	ldr	r4, [r6, #4]
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	0718      	lsls	r0, r3, #28
 80035b4:	d55e      	bpl.n	8003674 <_vfiprintf_r+0xe4>
 80035b6:	6923      	ldr	r3, [r4, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d05b      	beq.n	8003674 <_vfiprintf_r+0xe4>
 80035bc:	2300      	movs	r3, #0
 80035be:	9309      	str	r3, [sp, #36]	; 0x24
 80035c0:	2320      	movs	r3, #32
 80035c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035c6:	2330      	movs	r3, #48	; 0x30
 80035c8:	f04f 0b01 	mov.w	fp, #1
 80035cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035d0:	9503      	str	r5, [sp, #12]
 80035d2:	46b8      	mov	r8, r7
 80035d4:	4645      	mov	r5, r8
 80035d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035da:	b10b      	cbz	r3, 80035e0 <_vfiprintf_r+0x50>
 80035dc:	2b25      	cmp	r3, #37	; 0x25
 80035de:	d154      	bne.n	800368a <_vfiprintf_r+0xfa>
 80035e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80035e4:	d00b      	beq.n	80035fe <_vfiprintf_r+0x6e>
 80035e6:	4653      	mov	r3, sl
 80035e8:	463a      	mov	r2, r7
 80035ea:	4621      	mov	r1, r4
 80035ec:	4630      	mov	r0, r6
 80035ee:	f7ff ffbc 	bl	800356a <__sfputs_r>
 80035f2:	3001      	adds	r0, #1
 80035f4:	f000 80c2 	beq.w	800377c <_vfiprintf_r+0x1ec>
 80035f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035fa:	4453      	add	r3, sl
 80035fc:	9309      	str	r3, [sp, #36]	; 0x24
 80035fe:	f898 3000 	ldrb.w	r3, [r8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80ba 	beq.w	800377c <_vfiprintf_r+0x1ec>
 8003608:	2300      	movs	r3, #0
 800360a:	f04f 32ff 	mov.w	r2, #4294967295
 800360e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	9307      	str	r3, [sp, #28]
 8003616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800361a:	931a      	str	r3, [sp, #104]	; 0x68
 800361c:	46a8      	mov	r8, r5
 800361e:	2205      	movs	r2, #5
 8003620:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003624:	485e      	ldr	r0, [pc, #376]	; (80037a0 <_vfiprintf_r+0x210>)
 8003626:	f000 fafb 	bl	8003c20 <memchr>
 800362a:	9b04      	ldr	r3, [sp, #16]
 800362c:	bb78      	cbnz	r0, 800368e <_vfiprintf_r+0xfe>
 800362e:	06d9      	lsls	r1, r3, #27
 8003630:	bf44      	itt	mi
 8003632:	2220      	movmi	r2, #32
 8003634:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003638:	071a      	lsls	r2, r3, #28
 800363a:	bf44      	itt	mi
 800363c:	222b      	movmi	r2, #43	; 0x2b
 800363e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003642:	782a      	ldrb	r2, [r5, #0]
 8003644:	2a2a      	cmp	r2, #42	; 0x2a
 8003646:	d02a      	beq.n	800369e <_vfiprintf_r+0x10e>
 8003648:	46a8      	mov	r8, r5
 800364a:	2000      	movs	r0, #0
 800364c:	250a      	movs	r5, #10
 800364e:	9a07      	ldr	r2, [sp, #28]
 8003650:	4641      	mov	r1, r8
 8003652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003656:	3b30      	subs	r3, #48	; 0x30
 8003658:	2b09      	cmp	r3, #9
 800365a:	d969      	bls.n	8003730 <_vfiprintf_r+0x1a0>
 800365c:	b360      	cbz	r0, 80036b8 <_vfiprintf_r+0x128>
 800365e:	e024      	b.n	80036aa <_vfiprintf_r+0x11a>
 8003660:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <_vfiprintf_r+0x214>)
 8003662:	429c      	cmp	r4, r3
 8003664:	d101      	bne.n	800366a <_vfiprintf_r+0xda>
 8003666:	68b4      	ldr	r4, [r6, #8]
 8003668:	e7a2      	b.n	80035b0 <_vfiprintf_r+0x20>
 800366a:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <_vfiprintf_r+0x218>)
 800366c:	429c      	cmp	r4, r3
 800366e:	bf08      	it	eq
 8003670:	68f4      	ldreq	r4, [r6, #12]
 8003672:	e79d      	b.n	80035b0 <_vfiprintf_r+0x20>
 8003674:	4621      	mov	r1, r4
 8003676:	4630      	mov	r0, r6
 8003678:	f7ff fc70 	bl	8002f5c <__swsetup_r>
 800367c:	2800      	cmp	r0, #0
 800367e:	d09d      	beq.n	80035bc <_vfiprintf_r+0x2c>
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	b01d      	add	sp, #116	; 0x74
 8003686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368a:	46a8      	mov	r8, r5
 800368c:	e7a2      	b.n	80035d4 <_vfiprintf_r+0x44>
 800368e:	4a44      	ldr	r2, [pc, #272]	; (80037a0 <_vfiprintf_r+0x210>)
 8003690:	4645      	mov	r5, r8
 8003692:	1a80      	subs	r0, r0, r2
 8003694:	fa0b f000 	lsl.w	r0, fp, r0
 8003698:	4318      	orrs	r0, r3
 800369a:	9004      	str	r0, [sp, #16]
 800369c:	e7be      	b.n	800361c <_vfiprintf_r+0x8c>
 800369e:	9a03      	ldr	r2, [sp, #12]
 80036a0:	1d11      	adds	r1, r2, #4
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	9103      	str	r1, [sp, #12]
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	db01      	blt.n	80036ae <_vfiprintf_r+0x11e>
 80036aa:	9207      	str	r2, [sp, #28]
 80036ac:	e004      	b.n	80036b8 <_vfiprintf_r+0x128>
 80036ae:	4252      	negs	r2, r2
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	9207      	str	r2, [sp, #28]
 80036b6:	9304      	str	r3, [sp, #16]
 80036b8:	f898 3000 	ldrb.w	r3, [r8]
 80036bc:	2b2e      	cmp	r3, #46	; 0x2e
 80036be:	d10e      	bne.n	80036de <_vfiprintf_r+0x14e>
 80036c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80036c4:	2b2a      	cmp	r3, #42	; 0x2a
 80036c6:	d138      	bne.n	800373a <_vfiprintf_r+0x1aa>
 80036c8:	9b03      	ldr	r3, [sp, #12]
 80036ca:	f108 0802 	add.w	r8, r8, #2
 80036ce:	1d1a      	adds	r2, r3, #4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	9203      	str	r2, [sp, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bfb8      	it	lt
 80036d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80036dc:	9305      	str	r3, [sp, #20]
 80036de:	4d33      	ldr	r5, [pc, #204]	; (80037ac <_vfiprintf_r+0x21c>)
 80036e0:	2203      	movs	r2, #3
 80036e2:	f898 1000 	ldrb.w	r1, [r8]
 80036e6:	4628      	mov	r0, r5
 80036e8:	f000 fa9a 	bl	8003c20 <memchr>
 80036ec:	b140      	cbz	r0, 8003700 <_vfiprintf_r+0x170>
 80036ee:	2340      	movs	r3, #64	; 0x40
 80036f0:	1b40      	subs	r0, r0, r5
 80036f2:	fa03 f000 	lsl.w	r0, r3, r0
 80036f6:	9b04      	ldr	r3, [sp, #16]
 80036f8:	f108 0801 	add.w	r8, r8, #1
 80036fc:	4303      	orrs	r3, r0
 80036fe:	9304      	str	r3, [sp, #16]
 8003700:	f898 1000 	ldrb.w	r1, [r8]
 8003704:	2206      	movs	r2, #6
 8003706:	482a      	ldr	r0, [pc, #168]	; (80037b0 <_vfiprintf_r+0x220>)
 8003708:	f108 0701 	add.w	r7, r8, #1
 800370c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003710:	f000 fa86 	bl	8003c20 <memchr>
 8003714:	2800      	cmp	r0, #0
 8003716:	d037      	beq.n	8003788 <_vfiprintf_r+0x1f8>
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <_vfiprintf_r+0x224>)
 800371a:	bb1b      	cbnz	r3, 8003764 <_vfiprintf_r+0x1d4>
 800371c:	9b03      	ldr	r3, [sp, #12]
 800371e:	3307      	adds	r3, #7
 8003720:	f023 0307 	bic.w	r3, r3, #7
 8003724:	3308      	adds	r3, #8
 8003726:	9303      	str	r3, [sp, #12]
 8003728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800372a:	444b      	add	r3, r9
 800372c:	9309      	str	r3, [sp, #36]	; 0x24
 800372e:	e750      	b.n	80035d2 <_vfiprintf_r+0x42>
 8003730:	fb05 3202 	mla	r2, r5, r2, r3
 8003734:	2001      	movs	r0, #1
 8003736:	4688      	mov	r8, r1
 8003738:	e78a      	b.n	8003650 <_vfiprintf_r+0xc0>
 800373a:	2300      	movs	r3, #0
 800373c:	250a      	movs	r5, #10
 800373e:	4619      	mov	r1, r3
 8003740:	f108 0801 	add.w	r8, r8, #1
 8003744:	9305      	str	r3, [sp, #20]
 8003746:	4640      	mov	r0, r8
 8003748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800374c:	3a30      	subs	r2, #48	; 0x30
 800374e:	2a09      	cmp	r2, #9
 8003750:	d903      	bls.n	800375a <_vfiprintf_r+0x1ca>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0c3      	beq.n	80036de <_vfiprintf_r+0x14e>
 8003756:	9105      	str	r1, [sp, #20]
 8003758:	e7c1      	b.n	80036de <_vfiprintf_r+0x14e>
 800375a:	fb05 2101 	mla	r1, r5, r1, r2
 800375e:	2301      	movs	r3, #1
 8003760:	4680      	mov	r8, r0
 8003762:	e7f0      	b.n	8003746 <_vfiprintf_r+0x1b6>
 8003764:	ab03      	add	r3, sp, #12
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4622      	mov	r2, r4
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <_vfiprintf_r+0x228>)
 800376c:	a904      	add	r1, sp, #16
 800376e:	4630      	mov	r0, r6
 8003770:	f3af 8000 	nop.w
 8003774:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003778:	4681      	mov	r9, r0
 800377a:	d1d5      	bne.n	8003728 <_vfiprintf_r+0x198>
 800377c:	89a3      	ldrh	r3, [r4, #12]
 800377e:	065b      	lsls	r3, r3, #25
 8003780:	f53f af7e 	bmi.w	8003680 <_vfiprintf_r+0xf0>
 8003784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003786:	e77d      	b.n	8003684 <_vfiprintf_r+0xf4>
 8003788:	ab03      	add	r3, sp, #12
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	4622      	mov	r2, r4
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <_vfiprintf_r+0x228>)
 8003790:	a904      	add	r1, sp, #16
 8003792:	4630      	mov	r0, r6
 8003794:	f000 f888 	bl	80038a8 <_printf_i>
 8003798:	e7ec      	b.n	8003774 <_vfiprintf_r+0x1e4>
 800379a:	bf00      	nop
 800379c:	08003d30 	.word	0x08003d30
 80037a0:	08003d70 	.word	0x08003d70
 80037a4:	08003d50 	.word	0x08003d50
 80037a8:	08003d10 	.word	0x08003d10
 80037ac:	08003d76 	.word	0x08003d76
 80037b0:	08003d7a 	.word	0x08003d7a
 80037b4:	00000000 	.word	0x00000000
 80037b8:	0800356b 	.word	0x0800356b

080037bc <_printf_common>:
 80037bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	4691      	mov	r9, r2
 80037c2:	461f      	mov	r7, r3
 80037c4:	688a      	ldr	r2, [r1, #8]
 80037c6:	690b      	ldr	r3, [r1, #16]
 80037c8:	4606      	mov	r6, r0
 80037ca:	4293      	cmp	r3, r2
 80037cc:	bfb8      	it	lt
 80037ce:	4613      	movlt	r3, r2
 80037d0:	f8c9 3000 	str.w	r3, [r9]
 80037d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037d8:	460c      	mov	r4, r1
 80037da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037de:	b112      	cbz	r2, 80037e6 <_printf_common+0x2a>
 80037e0:	3301      	adds	r3, #1
 80037e2:	f8c9 3000 	str.w	r3, [r9]
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	0699      	lsls	r1, r3, #26
 80037ea:	bf42      	ittt	mi
 80037ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037f0:	3302      	addmi	r3, #2
 80037f2:	f8c9 3000 	strmi.w	r3, [r9]
 80037f6:	6825      	ldr	r5, [r4, #0]
 80037f8:	f015 0506 	ands.w	r5, r5, #6
 80037fc:	d107      	bne.n	800380e <_printf_common+0x52>
 80037fe:	f104 0a19 	add.w	sl, r4, #25
 8003802:	68e3      	ldr	r3, [r4, #12]
 8003804:	f8d9 2000 	ldr.w	r2, [r9]
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	42ab      	cmp	r3, r5
 800380c:	dc29      	bgt.n	8003862 <_printf_common+0xa6>
 800380e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003812:	6822      	ldr	r2, [r4, #0]
 8003814:	3300      	adds	r3, #0
 8003816:	bf18      	it	ne
 8003818:	2301      	movne	r3, #1
 800381a:	0692      	lsls	r2, r2, #26
 800381c:	d42e      	bmi.n	800387c <_printf_common+0xc0>
 800381e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003822:	4639      	mov	r1, r7
 8003824:	4630      	mov	r0, r6
 8003826:	47c0      	blx	r8
 8003828:	3001      	adds	r0, #1
 800382a:	d021      	beq.n	8003870 <_printf_common+0xb4>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	68e5      	ldr	r5, [r4, #12]
 8003830:	f003 0306 	and.w	r3, r3, #6
 8003834:	2b04      	cmp	r3, #4
 8003836:	bf18      	it	ne
 8003838:	2500      	movne	r5, #0
 800383a:	f8d9 2000 	ldr.w	r2, [r9]
 800383e:	f04f 0900 	mov.w	r9, #0
 8003842:	bf08      	it	eq
 8003844:	1aad      	subeq	r5, r5, r2
 8003846:	68a3      	ldr	r3, [r4, #8]
 8003848:	6922      	ldr	r2, [r4, #16]
 800384a:	bf08      	it	eq
 800384c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003850:	4293      	cmp	r3, r2
 8003852:	bfc4      	itt	gt
 8003854:	1a9b      	subgt	r3, r3, r2
 8003856:	18ed      	addgt	r5, r5, r3
 8003858:	341a      	adds	r4, #26
 800385a:	454d      	cmp	r5, r9
 800385c:	d11a      	bne.n	8003894 <_printf_common+0xd8>
 800385e:	2000      	movs	r0, #0
 8003860:	e008      	b.n	8003874 <_printf_common+0xb8>
 8003862:	2301      	movs	r3, #1
 8003864:	4652      	mov	r2, sl
 8003866:	4639      	mov	r1, r7
 8003868:	4630      	mov	r0, r6
 800386a:	47c0      	blx	r8
 800386c:	3001      	adds	r0, #1
 800386e:	d103      	bne.n	8003878 <_printf_common+0xbc>
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003878:	3501      	adds	r5, #1
 800387a:	e7c2      	b.n	8003802 <_printf_common+0x46>
 800387c:	2030      	movs	r0, #48	; 0x30
 800387e:	18e1      	adds	r1, r4, r3
 8003880:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800388a:	4422      	add	r2, r4
 800388c:	3302      	adds	r3, #2
 800388e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003892:	e7c4      	b.n	800381e <_printf_common+0x62>
 8003894:	2301      	movs	r3, #1
 8003896:	4622      	mov	r2, r4
 8003898:	4639      	mov	r1, r7
 800389a:	4630      	mov	r0, r6
 800389c:	47c0      	blx	r8
 800389e:	3001      	adds	r0, #1
 80038a0:	d0e6      	beq.n	8003870 <_printf_common+0xb4>
 80038a2:	f109 0901 	add.w	r9, r9, #1
 80038a6:	e7d8      	b.n	800385a <_printf_common+0x9e>

080038a8 <_printf_i>:
 80038a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80038b0:	460c      	mov	r4, r1
 80038b2:	7e09      	ldrb	r1, [r1, #24]
 80038b4:	b085      	sub	sp, #20
 80038b6:	296e      	cmp	r1, #110	; 0x6e
 80038b8:	4617      	mov	r7, r2
 80038ba:	4606      	mov	r6, r0
 80038bc:	4698      	mov	r8, r3
 80038be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038c0:	f000 80b3 	beq.w	8003a2a <_printf_i+0x182>
 80038c4:	d822      	bhi.n	800390c <_printf_i+0x64>
 80038c6:	2963      	cmp	r1, #99	; 0x63
 80038c8:	d036      	beq.n	8003938 <_printf_i+0x90>
 80038ca:	d80a      	bhi.n	80038e2 <_printf_i+0x3a>
 80038cc:	2900      	cmp	r1, #0
 80038ce:	f000 80b9 	beq.w	8003a44 <_printf_i+0x19c>
 80038d2:	2958      	cmp	r1, #88	; 0x58
 80038d4:	f000 8083 	beq.w	80039de <_printf_i+0x136>
 80038d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038e0:	e032      	b.n	8003948 <_printf_i+0xa0>
 80038e2:	2964      	cmp	r1, #100	; 0x64
 80038e4:	d001      	beq.n	80038ea <_printf_i+0x42>
 80038e6:	2969      	cmp	r1, #105	; 0x69
 80038e8:	d1f6      	bne.n	80038d8 <_printf_i+0x30>
 80038ea:	6820      	ldr	r0, [r4, #0]
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	0605      	lsls	r5, r0, #24
 80038f0:	f103 0104 	add.w	r1, r3, #4
 80038f4:	d52a      	bpl.n	800394c <_printf_i+0xa4>
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6011      	str	r1, [r2, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	da03      	bge.n	8003906 <_printf_i+0x5e>
 80038fe:	222d      	movs	r2, #45	; 0x2d
 8003900:	425b      	negs	r3, r3
 8003902:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003906:	486f      	ldr	r0, [pc, #444]	; (8003ac4 <_printf_i+0x21c>)
 8003908:	220a      	movs	r2, #10
 800390a:	e039      	b.n	8003980 <_printf_i+0xd8>
 800390c:	2973      	cmp	r1, #115	; 0x73
 800390e:	f000 809d 	beq.w	8003a4c <_printf_i+0x1a4>
 8003912:	d808      	bhi.n	8003926 <_printf_i+0x7e>
 8003914:	296f      	cmp	r1, #111	; 0x6f
 8003916:	d020      	beq.n	800395a <_printf_i+0xb2>
 8003918:	2970      	cmp	r1, #112	; 0x70
 800391a:	d1dd      	bne.n	80038d8 <_printf_i+0x30>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	f043 0320 	orr.w	r3, r3, #32
 8003922:	6023      	str	r3, [r4, #0]
 8003924:	e003      	b.n	800392e <_printf_i+0x86>
 8003926:	2975      	cmp	r1, #117	; 0x75
 8003928:	d017      	beq.n	800395a <_printf_i+0xb2>
 800392a:	2978      	cmp	r1, #120	; 0x78
 800392c:	d1d4      	bne.n	80038d8 <_printf_i+0x30>
 800392e:	2378      	movs	r3, #120	; 0x78
 8003930:	4865      	ldr	r0, [pc, #404]	; (8003ac8 <_printf_i+0x220>)
 8003932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003936:	e055      	b.n	80039e4 <_printf_i+0x13c>
 8003938:	6813      	ldr	r3, [r2, #0]
 800393a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800393e:	1d19      	adds	r1, r3, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6011      	str	r1, [r2, #0]
 8003944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003948:	2301      	movs	r3, #1
 800394a:	e08c      	b.n	8003a66 <_printf_i+0x1be>
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003952:	6011      	str	r1, [r2, #0]
 8003954:	bf18      	it	ne
 8003956:	b21b      	sxthne	r3, r3
 8003958:	e7cf      	b.n	80038fa <_printf_i+0x52>
 800395a:	6813      	ldr	r3, [r2, #0]
 800395c:	6825      	ldr	r5, [r4, #0]
 800395e:	1d18      	adds	r0, r3, #4
 8003960:	6010      	str	r0, [r2, #0]
 8003962:	0628      	lsls	r0, r5, #24
 8003964:	d501      	bpl.n	800396a <_printf_i+0xc2>
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	e002      	b.n	8003970 <_printf_i+0xc8>
 800396a:	0668      	lsls	r0, r5, #25
 800396c:	d5fb      	bpl.n	8003966 <_printf_i+0xbe>
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	296f      	cmp	r1, #111	; 0x6f
 8003972:	bf14      	ite	ne
 8003974:	220a      	movne	r2, #10
 8003976:	2208      	moveq	r2, #8
 8003978:	4852      	ldr	r0, [pc, #328]	; (8003ac4 <_printf_i+0x21c>)
 800397a:	2100      	movs	r1, #0
 800397c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003980:	6865      	ldr	r5, [r4, #4]
 8003982:	2d00      	cmp	r5, #0
 8003984:	60a5      	str	r5, [r4, #8]
 8003986:	f2c0 8095 	blt.w	8003ab4 <_printf_i+0x20c>
 800398a:	6821      	ldr	r1, [r4, #0]
 800398c:	f021 0104 	bic.w	r1, r1, #4
 8003990:	6021      	str	r1, [r4, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d13d      	bne.n	8003a12 <_printf_i+0x16a>
 8003996:	2d00      	cmp	r5, #0
 8003998:	f040 808e 	bne.w	8003ab8 <_printf_i+0x210>
 800399c:	4665      	mov	r5, ip
 800399e:	2a08      	cmp	r2, #8
 80039a0:	d10b      	bne.n	80039ba <_printf_i+0x112>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	07db      	lsls	r3, r3, #31
 80039a6:	d508      	bpl.n	80039ba <_printf_i+0x112>
 80039a8:	6923      	ldr	r3, [r4, #16]
 80039aa:	6862      	ldr	r2, [r4, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	bfde      	ittt	le
 80039b0:	2330      	movle	r3, #48	; 0x30
 80039b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039ba:	ebac 0305 	sub.w	r3, ip, r5
 80039be:	6123      	str	r3, [r4, #16]
 80039c0:	f8cd 8000 	str.w	r8, [sp]
 80039c4:	463b      	mov	r3, r7
 80039c6:	aa03      	add	r2, sp, #12
 80039c8:	4621      	mov	r1, r4
 80039ca:	4630      	mov	r0, r6
 80039cc:	f7ff fef6 	bl	80037bc <_printf_common>
 80039d0:	3001      	adds	r0, #1
 80039d2:	d14d      	bne.n	8003a70 <_printf_i+0x1c8>
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	b005      	add	sp, #20
 80039da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039de:	4839      	ldr	r0, [pc, #228]	; (8003ac4 <_printf_i+0x21c>)
 80039e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80039e4:	6813      	ldr	r3, [r2, #0]
 80039e6:	6821      	ldr	r1, [r4, #0]
 80039e8:	1d1d      	adds	r5, r3, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6015      	str	r5, [r2, #0]
 80039ee:	060a      	lsls	r2, r1, #24
 80039f0:	d50b      	bpl.n	8003a0a <_printf_i+0x162>
 80039f2:	07ca      	lsls	r2, r1, #31
 80039f4:	bf44      	itt	mi
 80039f6:	f041 0120 	orrmi.w	r1, r1, #32
 80039fa:	6021      	strmi	r1, [r4, #0]
 80039fc:	b91b      	cbnz	r3, 8003a06 <_printf_i+0x15e>
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	f022 0220 	bic.w	r2, r2, #32
 8003a04:	6022      	str	r2, [r4, #0]
 8003a06:	2210      	movs	r2, #16
 8003a08:	e7b7      	b.n	800397a <_printf_i+0xd2>
 8003a0a:	064d      	lsls	r5, r1, #25
 8003a0c:	bf48      	it	mi
 8003a0e:	b29b      	uxthmi	r3, r3
 8003a10:	e7ef      	b.n	80039f2 <_printf_i+0x14a>
 8003a12:	4665      	mov	r5, ip
 8003a14:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a18:	fb02 3311 	mls	r3, r2, r1, r3
 8003a1c:	5cc3      	ldrb	r3, [r0, r3]
 8003a1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a22:	460b      	mov	r3, r1
 8003a24:	2900      	cmp	r1, #0
 8003a26:	d1f5      	bne.n	8003a14 <_printf_i+0x16c>
 8003a28:	e7b9      	b.n	800399e <_printf_i+0xf6>
 8003a2a:	6813      	ldr	r3, [r2, #0]
 8003a2c:	6825      	ldr	r5, [r4, #0]
 8003a2e:	1d18      	adds	r0, r3, #4
 8003a30:	6961      	ldr	r1, [r4, #20]
 8003a32:	6010      	str	r0, [r2, #0]
 8003a34:	0628      	lsls	r0, r5, #24
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	d501      	bpl.n	8003a3e <_printf_i+0x196>
 8003a3a:	6019      	str	r1, [r3, #0]
 8003a3c:	e002      	b.n	8003a44 <_printf_i+0x19c>
 8003a3e:	066a      	lsls	r2, r5, #25
 8003a40:	d5fb      	bpl.n	8003a3a <_printf_i+0x192>
 8003a42:	8019      	strh	r1, [r3, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	4665      	mov	r5, ip
 8003a48:	6123      	str	r3, [r4, #16]
 8003a4a:	e7b9      	b.n	80039c0 <_printf_i+0x118>
 8003a4c:	6813      	ldr	r3, [r2, #0]
 8003a4e:	1d19      	adds	r1, r3, #4
 8003a50:	6011      	str	r1, [r2, #0]
 8003a52:	681d      	ldr	r5, [r3, #0]
 8003a54:	6862      	ldr	r2, [r4, #4]
 8003a56:	2100      	movs	r1, #0
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f000 f8e1 	bl	8003c20 <memchr>
 8003a5e:	b108      	cbz	r0, 8003a64 <_printf_i+0x1bc>
 8003a60:	1b40      	subs	r0, r0, r5
 8003a62:	6060      	str	r0, [r4, #4]
 8003a64:	6863      	ldr	r3, [r4, #4]
 8003a66:	6123      	str	r3, [r4, #16]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a6e:	e7a7      	b.n	80039c0 <_printf_i+0x118>
 8003a70:	6923      	ldr	r3, [r4, #16]
 8003a72:	462a      	mov	r2, r5
 8003a74:	4639      	mov	r1, r7
 8003a76:	4630      	mov	r0, r6
 8003a78:	47c0      	blx	r8
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	d0aa      	beq.n	80039d4 <_printf_i+0x12c>
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	079b      	lsls	r3, r3, #30
 8003a82:	d413      	bmi.n	8003aac <_printf_i+0x204>
 8003a84:	68e0      	ldr	r0, [r4, #12]
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	4298      	cmp	r0, r3
 8003a8a:	bfb8      	it	lt
 8003a8c:	4618      	movlt	r0, r3
 8003a8e:	e7a3      	b.n	80039d8 <_printf_i+0x130>
 8003a90:	2301      	movs	r3, #1
 8003a92:	464a      	mov	r2, r9
 8003a94:	4639      	mov	r1, r7
 8003a96:	4630      	mov	r0, r6
 8003a98:	47c0      	blx	r8
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	d09a      	beq.n	80039d4 <_printf_i+0x12c>
 8003a9e:	3501      	adds	r5, #1
 8003aa0:	68e3      	ldr	r3, [r4, #12]
 8003aa2:	9a03      	ldr	r2, [sp, #12]
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	42ab      	cmp	r3, r5
 8003aa8:	dcf2      	bgt.n	8003a90 <_printf_i+0x1e8>
 8003aaa:	e7eb      	b.n	8003a84 <_printf_i+0x1dc>
 8003aac:	2500      	movs	r5, #0
 8003aae:	f104 0919 	add.w	r9, r4, #25
 8003ab2:	e7f5      	b.n	8003aa0 <_printf_i+0x1f8>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ac      	bne.n	8003a12 <_printf_i+0x16a>
 8003ab8:	7803      	ldrb	r3, [r0, #0]
 8003aba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003abe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ac2:	e76c      	b.n	800399e <_printf_i+0xf6>
 8003ac4:	08003d81 	.word	0x08003d81
 8003ac8:	08003d92 	.word	0x08003d92

08003acc <_sbrk_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4c05      	ldr	r4, [pc, #20]	; (8003ae8 <_sbrk_r+0x1c>)
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	6023      	str	r3, [r4, #0]
 8003ad8:	f7ff f94c 	bl	8002d74 <_sbrk>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_sbrk_r+0x1a>
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_sbrk_r+0x1a>
 8003ae4:	602b      	str	r3, [r5, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	2000023c 	.word	0x2000023c

08003aec <__sread>:
 8003aec:	b510      	push	{r4, lr}
 8003aee:	460c      	mov	r4, r1
 8003af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af4:	f000 f8a4 	bl	8003c40 <_read_r>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	bfab      	itete	ge
 8003afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003afe:	89a3      	ldrhlt	r3, [r4, #12]
 8003b00:	181b      	addge	r3, r3, r0
 8003b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b06:	bfac      	ite	ge
 8003b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b0a:	81a3      	strhlt	r3, [r4, #12]
 8003b0c:	bd10      	pop	{r4, pc}

08003b0e <__swrite>:
 8003b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b12:	461f      	mov	r7, r3
 8003b14:	898b      	ldrh	r3, [r1, #12]
 8003b16:	4605      	mov	r5, r0
 8003b18:	05db      	lsls	r3, r3, #23
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	4616      	mov	r6, r2
 8003b1e:	d505      	bpl.n	8003b2c <__swrite+0x1e>
 8003b20:	2302      	movs	r3, #2
 8003b22:	2200      	movs	r2, #0
 8003b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b28:	f000 f868 	bl	8003bfc <_lseek_r>
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	4632      	mov	r2, r6
 8003b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b3a:	463b      	mov	r3, r7
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b42:	f000 b817 	b.w	8003b74 <_write_r>

08003b46 <__sseek>:
 8003b46:	b510      	push	{r4, lr}
 8003b48:	460c      	mov	r4, r1
 8003b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b4e:	f000 f855 	bl	8003bfc <_lseek_r>
 8003b52:	1c43      	adds	r3, r0, #1
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	bf15      	itete	ne
 8003b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b62:	81a3      	strheq	r3, [r4, #12]
 8003b64:	bf18      	it	ne
 8003b66:	81a3      	strhne	r3, [r4, #12]
 8003b68:	bd10      	pop	{r4, pc}

08003b6a <__sclose>:
 8003b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b6e:	f000 b813 	b.w	8003b98 <_close_r>
	...

08003b74 <_write_r>:
 8003b74:	b538      	push	{r3, r4, r5, lr}
 8003b76:	4605      	mov	r5, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4c05      	ldr	r4, [pc, #20]	; (8003b94 <_write_r+0x20>)
 8003b80:	6022      	str	r2, [r4, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f7fe fba8 	bl	80022d8 <_write>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d102      	bne.n	8003b92 <_write_r+0x1e>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	b103      	cbz	r3, 8003b92 <_write_r+0x1e>
 8003b90:	602b      	str	r3, [r5, #0]
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
 8003b94:	2000023c 	.word	0x2000023c

08003b98 <_close_r>:
 8003b98:	b538      	push	{r3, r4, r5, lr}
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	4c05      	ldr	r4, [pc, #20]	; (8003bb4 <_close_r+0x1c>)
 8003b9e:	4605      	mov	r5, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	6023      	str	r3, [r4, #0]
 8003ba4:	f7ff f8b5 	bl	8002d12 <_close>
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	d102      	bne.n	8003bb2 <_close_r+0x1a>
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	b103      	cbz	r3, 8003bb2 <_close_r+0x1a>
 8003bb0:	602b      	str	r3, [r5, #0]
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
 8003bb4:	2000023c 	.word	0x2000023c

08003bb8 <_fstat_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	2300      	movs	r3, #0
 8003bbc:	4c06      	ldr	r4, [pc, #24]	; (8003bd8 <_fstat_r+0x20>)
 8003bbe:	4605      	mov	r5, r0
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	f7ff f8af 	bl	8002d28 <_fstat>
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	d102      	bne.n	8003bd4 <_fstat_r+0x1c>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	b103      	cbz	r3, 8003bd4 <_fstat_r+0x1c>
 8003bd2:	602b      	str	r3, [r5, #0]
 8003bd4:	bd38      	pop	{r3, r4, r5, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2000023c 	.word	0x2000023c

08003bdc <_isatty_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	2300      	movs	r3, #0
 8003be0:	4c05      	ldr	r4, [pc, #20]	; (8003bf8 <_isatty_r+0x1c>)
 8003be2:	4605      	mov	r5, r0
 8003be4:	4608      	mov	r0, r1
 8003be6:	6023      	str	r3, [r4, #0]
 8003be8:	f7ff f8ad 	bl	8002d46 <_isatty>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_isatty_r+0x1a>
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_isatty_r+0x1a>
 8003bf4:	602b      	str	r3, [r5, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	2000023c 	.word	0x2000023c

08003bfc <_lseek_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4605      	mov	r5, r0
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	2200      	movs	r2, #0
 8003c06:	4c05      	ldr	r4, [pc, #20]	; (8003c1c <_lseek_r+0x20>)
 8003c08:	6022      	str	r2, [r4, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f7ff f8a5 	bl	8002d5a <_lseek>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d102      	bne.n	8003c1a <_lseek_r+0x1e>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	b103      	cbz	r3, 8003c1a <_lseek_r+0x1e>
 8003c18:	602b      	str	r3, [r5, #0]
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
 8003c1c:	2000023c 	.word	0x2000023c

08003c20 <memchr>:
 8003c20:	b510      	push	{r4, lr}
 8003c22:	b2c9      	uxtb	r1, r1
 8003c24:	4402      	add	r2, r0
 8003c26:	4290      	cmp	r0, r2
 8003c28:	4603      	mov	r3, r0
 8003c2a:	d101      	bne.n	8003c30 <memchr+0x10>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e003      	b.n	8003c38 <memchr+0x18>
 8003c30:	781c      	ldrb	r4, [r3, #0]
 8003c32:	3001      	adds	r0, #1
 8003c34:	428c      	cmp	r4, r1
 8003c36:	d1f6      	bne.n	8003c26 <memchr+0x6>
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd10      	pop	{r4, pc}

08003c3c <__malloc_lock>:
 8003c3c:	4770      	bx	lr

08003c3e <__malloc_unlock>:
 8003c3e:	4770      	bx	lr

08003c40 <_read_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	4605      	mov	r5, r0
 8003c44:	4608      	mov	r0, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4c05      	ldr	r4, [pc, #20]	; (8003c60 <_read_r+0x20>)
 8003c4c:	6022      	str	r2, [r4, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f7ff f842 	bl	8002cd8 <_read>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_read_r+0x1e>
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_read_r+0x1e>
 8003c5c:	602b      	str	r3, [r5, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	2000023c 	.word	0x2000023c

08003c64 <_init>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	bf00      	nop
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr

08003c70 <_fini>:
 8003c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c72:	bf00      	nop
 8003c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c76:	bc08      	pop	{r3}
 8003c78:	469e      	mov	lr, r3
 8003c7a:	4770      	bx	lr
