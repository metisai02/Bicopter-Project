
Test_boardC21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800aaf0  0800aaf0  0001aaf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abb8  0800abb8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800abb8  0800abb8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abb8  0800abb8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abb8  0800abb8  0001abb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abbc  0800abbc  0001abbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800abc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000090  0800ac50  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  0800ac50  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d4d  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002593  00000000  00000000  00032e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001298  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c8  00000000  00000000  00036638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018951  00000000  00000000  00037800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e13b  00000000  00000000  00050151  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090ec8  00000000  00000000  0005e28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e8  00000000  00000000  000ef1d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aad4 	.word	0x0800aad4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	0800aad4 	.word	0x0800aad4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	d1ed      	bne.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2uiz>:
 80010dc:	0042      	lsls	r2, r0, #1
 80010de:	d20e      	bcs.n	80010fe <__aeabi_f2uiz+0x22>
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30b      	bcc.n	80010fe <__aeabi_f2uiz+0x22>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d409      	bmi.n	8001104 <__aeabi_f2uiz+0x28>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	fa23 f002 	lsr.w	r0, r3, r2
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr
 8001104:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001108:	d101      	bne.n	800110e <__aeabi_f2uiz+0x32>
 800110a:	0242      	lsls	r2, r0, #9
 800110c:	d102      	bne.n	8001114 <__aeabi_f2uiz+0x38>
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	4770      	bx	lr
 8001114:	f04f 0000 	mov.w	r0, #0
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x28>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x28>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f945 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f007 feb6 	bl	8008ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f95d 	bl	8001426 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f925 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000024 	.word	0x20000024
 80011a0:	20000004 	.word	0x20000004
 80011a4:	20000000 	.word	0x20000000

080011a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x1c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x20>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x20>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000004 	.word	0x20000004
 80011c8:	2000010c 	.word	0x2000010c

080011cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b02      	ldr	r3, [pc, #8]	; (80011dc <HAL_GetTick+0x10>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	2000010c 	.word	0x2000010c

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff fff0 	bl	80011cc <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_Delay+0x40>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffe0 	bl	80011cc <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000004 	.word	0x20000004

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4906      	ldr	r1, [pc, #24]	; (80012bc <__NVIC_EnableIRQ+0x34>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff90 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff2d 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff42 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff90 	bl	8001314 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5f 	bl	80012c0 <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff35 	bl	8001288 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b08b      	sub	sp, #44	; 0x2c
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e127      	b.n	80016a4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001454:	2201      	movs	r2, #1
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8116 	bne.w	800169e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b12      	cmp	r3, #18
 8001478:	d034      	beq.n	80014e4 <HAL_GPIO_Init+0xa4>
 800147a:	2b12      	cmp	r3, #18
 800147c:	d80d      	bhi.n	800149a <HAL_GPIO_Init+0x5a>
 800147e:	2b02      	cmp	r3, #2
 8001480:	d02b      	beq.n	80014da <HAL_GPIO_Init+0x9a>
 8001482:	2b02      	cmp	r3, #2
 8001484:	d804      	bhi.n	8001490 <HAL_GPIO_Init+0x50>
 8001486:	2b00      	cmp	r3, #0
 8001488:	d031      	beq.n	80014ee <HAL_GPIO_Init+0xae>
 800148a:	2b01      	cmp	r3, #1
 800148c:	d01c      	beq.n	80014c8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800148e:	e048      	b.n	8001522 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001490:	2b03      	cmp	r3, #3
 8001492:	d043      	beq.n	800151c <HAL_GPIO_Init+0xdc>
 8001494:	2b11      	cmp	r3, #17
 8001496:	d01b      	beq.n	80014d0 <HAL_GPIO_Init+0x90>
          break;
 8001498:	e043      	b.n	8001522 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800149a:	4a89      	ldr	r2, [pc, #548]	; (80016c0 <HAL_GPIO_Init+0x280>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d026      	beq.n	80014ee <HAL_GPIO_Init+0xae>
 80014a0:	4a87      	ldr	r2, [pc, #540]	; (80016c0 <HAL_GPIO_Init+0x280>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d806      	bhi.n	80014b4 <HAL_GPIO_Init+0x74>
 80014a6:	4a87      	ldr	r2, [pc, #540]	; (80016c4 <HAL_GPIO_Init+0x284>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d020      	beq.n	80014ee <HAL_GPIO_Init+0xae>
 80014ac:	4a86      	ldr	r2, [pc, #536]	; (80016c8 <HAL_GPIO_Init+0x288>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01d      	beq.n	80014ee <HAL_GPIO_Init+0xae>
          break;
 80014b2:	e036      	b.n	8001522 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014b4:	4a85      	ldr	r2, [pc, #532]	; (80016cc <HAL_GPIO_Init+0x28c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0xae>
 80014ba:	4a85      	ldr	r2, [pc, #532]	; (80016d0 <HAL_GPIO_Init+0x290>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d016      	beq.n	80014ee <HAL_GPIO_Init+0xae>
 80014c0:	4a84      	ldr	r2, [pc, #528]	; (80016d4 <HAL_GPIO_Init+0x294>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0xae>
          break;
 80014c6:	e02c      	b.n	8001522 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e028      	b.n	8001522 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	3304      	adds	r3, #4
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e023      	b.n	8001522 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	3308      	adds	r3, #8
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e01e      	b.n	8001522 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	330c      	adds	r3, #12
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e019      	b.n	8001522 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014f6:	2304      	movs	r3, #4
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e012      	b.n	8001522 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	611a      	str	r2, [r3, #16]
          break;
 800150e:	e008      	b.n	8001522 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	615a      	str	r2, [r3, #20]
          break;
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2bff      	cmp	r3, #255	; 0xff
 8001526:	d801      	bhi.n	800152c <HAL_GPIO_Init+0xec>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	e001      	b.n	8001530 <HAL_GPIO_Init+0xf0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3304      	adds	r3, #4
 8001530:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2bff      	cmp	r3, #255	; 0xff
 8001536:	d802      	bhi.n	800153e <HAL_GPIO_Init+0xfe>
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	e002      	b.n	8001544 <HAL_GPIO_Init+0x104>
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	3b08      	subs	r3, #8
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	210f      	movs	r1, #15
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	401a      	ands	r2, r3
 8001556:	6a39      	ldr	r1, [r7, #32]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	431a      	orrs	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8096 	beq.w	800169e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001572:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <HAL_GPIO_Init+0x298>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_GPIO_Init+0x298>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6193      	str	r3, [r2, #24]
 800157e:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <HAL_GPIO_Init+0x298>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800158a:	4a54      	ldr	r2, [pc, #336]	; (80016dc <HAL_GPIO_Init+0x29c>)
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4b      	ldr	r2, [pc, #300]	; (80016e0 <HAL_GPIO_Init+0x2a0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_GPIO_Init+0x19e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4a      	ldr	r2, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x2a4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d00d      	beq.n	80015da <HAL_GPIO_Init+0x19a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <HAL_GPIO_Init+0x2a8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d007      	beq.n	80015d6 <HAL_GPIO_Init+0x196>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a48      	ldr	r2, [pc, #288]	; (80016ec <HAL_GPIO_Init+0x2ac>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_GPIO_Init+0x192>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x1a0>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e004      	b.n	80015e0 <HAL_GPIO_Init+0x1a0>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_Init+0x1a0>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x1a0>
 80015de:	2300      	movs	r3, #0
 80015e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e2:	f002 0203 	and.w	r2, r2, #3
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	4093      	lsls	r3, r2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015f0:	493a      	ldr	r1, [pc, #232]	; (80016dc <HAL_GPIO_Init+0x29c>)
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d006      	beq.n	8001618 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4938      	ldr	r1, [pc, #224]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
 8001616:	e006      	b.n	8001626 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001618:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	43db      	mvns	r3, r3
 8001620:	4933      	ldr	r1, [pc, #204]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001622:	4013      	ands	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	492e      	ldr	r1, [pc, #184]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
 800163e:	e006      	b.n	800164e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	43db      	mvns	r3, r3
 8001648:	4929      	ldr	r1, [pc, #164]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 800164a:	4013      	ands	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	4924      	ldr	r1, [pc, #144]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
 8001666:	e006      	b.n	8001676 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	43db      	mvns	r3, r3
 8001670:	491f      	ldr	r1, [pc, #124]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001672:	4013      	ands	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	491a      	ldr	r1, [pc, #104]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	60cb      	str	r3, [r1, #12]
 800168e:	e006      	b.n	800169e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	43db      	mvns	r3, r3
 8001698:	4915      	ldr	r1, [pc, #84]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 800169a:	4013      	ands	r3, r2
 800169c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	3301      	adds	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	fa22 f303 	lsr.w	r3, r2, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f47f aed0 	bne.w	8001454 <HAL_GPIO_Init+0x14>
  }
}
 80016b4:	bf00      	nop
 80016b6:	372c      	adds	r7, #44	; 0x2c
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	10210000 	.word	0x10210000
 80016c4:	10110000 	.word	0x10110000
 80016c8:	10120000 	.word	0x10120000
 80016cc:	10310000 	.word	0x10310000
 80016d0:	10320000 	.word	0x10320000
 80016d4:	10220000 	.word	0x10220000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000
 80016e0:	40010800 	.word	0x40010800
 80016e4:	40010c00 	.word	0x40010c00
 80016e8:	40011000 	.word	0x40011000
 80016ec:	40011400 	.word	0x40011400
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001710:	e003      	b.n	800171a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	611a      	str	r2, [r3, #16]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43d9      	mvns	r1, r3
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	400b      	ands	r3, r1
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	611a      	str	r2, [r3, #16]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
	...

08001758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e11f      	b.n	80019aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f007 fbc4 	bl	8008f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2224      	movs	r2, #36	; 0x24
 8001788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0201 	bic.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017bc:	f001 fb90 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 80017c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a7b      	ldr	r2, [pc, #492]	; (80019b4 <HAL_I2C_Init+0x25c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d807      	bhi.n	80017dc <HAL_I2C_Init+0x84>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4a7a      	ldr	r2, [pc, #488]	; (80019b8 <HAL_I2C_Init+0x260>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	bf94      	ite	ls
 80017d4:	2301      	movls	r3, #1
 80017d6:	2300      	movhi	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	e006      	b.n	80017ea <HAL_I2C_Init+0x92>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a77      	ldr	r2, [pc, #476]	; (80019bc <HAL_I2C_Init+0x264>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	bf94      	ite	ls
 80017e4:	2301      	movls	r3, #1
 80017e6:	2300      	movhi	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0db      	b.n	80019aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4a72      	ldr	r2, [pc, #456]	; (80019c0 <HAL_I2C_Init+0x268>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	0c9b      	lsrs	r3, r3, #18
 80017fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	430a      	orrs	r2, r1
 8001810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a64      	ldr	r2, [pc, #400]	; (80019b4 <HAL_I2C_Init+0x25c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d802      	bhi.n	800182c <HAL_I2C_Init+0xd4>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3301      	adds	r3, #1
 800182a:	e009      	b.n	8001840 <HAL_I2C_Init+0xe8>
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	4a63      	ldr	r2, [pc, #396]	; (80019c4 <HAL_I2C_Init+0x26c>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	099b      	lsrs	r3, r3, #6
 800183e:	3301      	adds	r3, #1
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	430b      	orrs	r3, r1
 8001846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001852:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4956      	ldr	r1, [pc, #344]	; (80019b4 <HAL_I2C_Init+0x25c>)
 800185c:	428b      	cmp	r3, r1
 800185e:	d80d      	bhi.n	800187c <HAL_I2C_Init+0x124>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1e59      	subs	r1, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fbb1 f3f3 	udiv	r3, r1, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	2b04      	cmp	r3, #4
 8001876:	bf38      	it	cc
 8001878:	2304      	movcc	r3, #4
 800187a:	e04f      	b.n	800191c <HAL_I2C_Init+0x1c4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d111      	bne.n	80018a8 <HAL_I2C_Init+0x150>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1e58      	subs	r0, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	440b      	add	r3, r1
 8001892:	fbb0 f3f3 	udiv	r3, r0, r3
 8001896:	3301      	adds	r3, #1
 8001898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	e012      	b.n	80018ce <HAL_I2C_Init+0x176>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1e58      	subs	r0, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	0099      	lsls	r1, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Init+0x17e>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e022      	b.n	800191c <HAL_I2C_Init+0x1c4>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10e      	bne.n	80018fc <HAL_I2C_Init+0x1a4>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1e58      	subs	r0, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	440b      	add	r3, r1
 80018ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fa:	e00f      	b.n	800191c <HAL_I2C_Init+0x1c4>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e58      	subs	r0, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	0099      	lsls	r1, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001912:	3301      	adds	r3, #1
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	6809      	ldr	r1, [r1, #0]
 8001920:	4313      	orrs	r3, r2
 8001922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69da      	ldr	r2, [r3, #28]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800194a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6911      	ldr	r1, [r2, #16]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68d2      	ldr	r2, [r2, #12]
 8001956:	4311      	orrs	r1, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	430b      	orrs	r3, r1
 800195e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	000186a0 	.word	0x000186a0
 80019b8:	001e847f 	.word	0x001e847f
 80019bc:	003d08ff 	.word	0x003d08ff
 80019c0:	431bde83 	.word	0x431bde83
 80019c4:	10624dd3 	.word	0x10624dd3

080019c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	817b      	strh	r3, [r7, #10]
 80019da:	460b      	mov	r3, r1
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019e2:	f7ff fbf3 	bl	80011cc <HAL_GetTick>
 80019e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	f040 80d9 	bne.w	8001ba8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2319      	movs	r3, #25
 80019fc:	2201      	movs	r2, #1
 80019fe:	496d      	ldr	r1, [pc, #436]	; (8001bb4 <HAL_I2C_Mem_Write+0x1ec>)
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 fcbb 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e0cc      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_I2C_Mem_Write+0x56>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e0c5      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d007      	beq.n	8001a44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2221      	movs	r2, #33	; 0x21
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a3a      	ldr	r2, [r7, #32]
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a4d      	ldr	r2, [pc, #308]	; (8001bb8 <HAL_I2C_Mem_Write+0x1f0>)
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a86:	88f8      	ldrh	r0, [r7, #6]
 8001a88:	893a      	ldrh	r2, [r7, #8]
 8001a8a:	8979      	ldrh	r1, [r7, #10]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4603      	mov	r3, r0
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 faf2 	bl	8002080 <I2C_RequestMemoryWrite>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d052      	beq.n	8001b48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e081      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fd3c 	bl	8002528 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d107      	bne.n	8001ace <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06b      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d11b      	bne.n	8001b48 <HAL_I2C_Mem_Write+0x180>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d017      	beq.n	8001b48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1aa      	bne.n	8001aa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fd28 	bl	80025aa <I2C_WaitOnBTFFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00d      	beq.n	8001b7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d107      	bne.n	8001b78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e016      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	00100002 	.word	0x00100002
 8001bb8:	ffff0000 	.word	0xffff0000

08001bbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	817b      	strh	r3, [r7, #10]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	813b      	strh	r3, [r7, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bda:	f7ff faf7 	bl	80011cc <HAL_GetTick>
 8001bde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	f040 823d 	bne.w	8002068 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2319      	movs	r3, #25
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4981      	ldr	r1, [pc, #516]	; (8001dfc <HAL_I2C_Mem_Read+0x240>)
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 fbbf 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
 8001c06:	e230      	b.n	800206a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_I2C_Mem_Read+0x5a>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e229      	b.n	800206a <HAL_I2C_Mem_Read+0x4ae>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d007      	beq.n	8001c3c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2222      	movs	r2, #34	; 0x22
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4a61      	ldr	r2, [pc, #388]	; (8001e00 <HAL_I2C_Mem_Read+0x244>)
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c7e:	88f8      	ldrh	r0, [r7, #6]
 8001c80:	893a      	ldrh	r2, [r7, #8]
 8001c82:	8979      	ldrh	r1, [r7, #10]
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 fa8c 	bl	80021ac <I2C_RequestMemoryRead>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e1e5      	b.n	800206a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d113      	bne.n	8001cce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e1b9      	b.n	8002042 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d11d      	bne.n	8001d12 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d0e:	b662      	cpsie	i
 8001d10:	e197      	b.n	8002042 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d11d      	bne.n	8001d56 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d52:	b662      	cpsie	i
 8001d54:	e175      	b.n	8002042 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d64:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001d7c:	e161      	b.n	8002042 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	f200 811a 	bhi.w	8001fbc <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d123      	bne.n	8001dd8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 fc49 	bl	800262c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e162      	b.n	800206a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dd6:	e134      	b.n	8002042 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d150      	bne.n	8001e82 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de6:	2200      	movs	r2, #0
 8001de8:	4906      	ldr	r1, [pc, #24]	; (8001e04 <HAL_I2C_Mem_Read+0x248>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fac6 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e137      	b.n	800206a <HAL_I2C_Mem_Read+0x4ae>
 8001dfa:	bf00      	nop
 8001dfc:	00100002 	.word	0x00100002
 8001e00:	ffff0000 	.word	0xffff0000
 8001e04:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e18:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e4c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e80:	e0df      	b.n	8002042 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e88:	2200      	movs	r2, #0
 8001e8a:	497a      	ldr	r1, [pc, #488]	; (8002074 <HAL_I2C_Mem_Read+0x4b8>)
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fa75 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0e6      	b.n	800206a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eac:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001ee0:	4b65      	ldr	r3, [pc, #404]	; (8002078 <HAL_I2C_Mem_Read+0x4bc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	4a65      	ldr	r2, [pc, #404]	; (800207c <HAL_I2C_Mem_Read+0x4c0>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	0a1a      	lsrs	r2, r3, #8
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00da      	lsls	r2, r3, #3
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d117      	bne.n	8001f36 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f043 0220 	orr.w	r2, r3, #32
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f28:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e099      	b.n	800206a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d1da      	bne.n	8001efa <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f86:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fba:	e042      	b.n	8002042 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fb33 	bl	800262c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e04c      	b.n	800206a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d118      	bne.n	8002042 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	2b00      	cmp	r3, #0
 8002048:	f47f ae99 	bne.w	8001d7e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e000      	b.n	800206a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002068:	2302      	movs	r3, #2
  }
}
 800206a:	4618      	mov	r0, r3
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	00010004 	.word	0x00010004
 8002078:	20000024 	.word	0x20000024
 800207c:	14f8b589 	.word	0x14f8b589

08002080 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	4608      	mov	r0, r1
 800208a:	4611      	mov	r1, r2
 800208c:	461a      	mov	r2, r3
 800208e:	4603      	mov	r3, r0
 8002090:	817b      	strh	r3, [r7, #10]
 8002092:	460b      	mov	r3, r1
 8002094:	813b      	strh	r3, [r7, #8]
 8002096:	4613      	mov	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f960 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d0:	d103      	bne.n	80020da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e05f      	b.n	800219e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020de:	897b      	ldrh	r3, [r7, #10]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	6a3a      	ldr	r2, [r7, #32]
 80020f2:	492d      	ldr	r1, [pc, #180]	; (80021a8 <I2C_RequestMemoryWrite+0x128>)
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f998 	bl	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e04c      	b.n	800219e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211c:	6a39      	ldr	r1, [r7, #32]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fa02 	bl	8002528 <I2C_WaitOnTXEFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00d      	beq.n	8002146 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2b04      	cmp	r3, #4
 8002130:	d107      	bne.n	8002142 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002140:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e02b      	b.n	800219e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800214c:	893b      	ldrh	r3, [r7, #8]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	611a      	str	r2, [r3, #16]
 8002156:	e021      	b.n	800219c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002158:	893b      	ldrh	r3, [r7, #8]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b29b      	uxth	r3, r3
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002168:	6a39      	ldr	r1, [r7, #32]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f9dc 	bl	8002528 <I2C_WaitOnTXEFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b04      	cmp	r3, #4
 800217c:	d107      	bne.n	800218e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e005      	b.n	800219e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002192:	893b      	ldrh	r3, [r7, #8]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	00010002 	.word	0x00010002

080021ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	4608      	mov	r0, r1
 80021b6:	4611      	mov	r1, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	817b      	strh	r3, [r7, #10]
 80021be:	460b      	mov	r3, r1
 80021c0:	813b      	strh	r3, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f8c2 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220c:	d103      	bne.n	8002216 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002214:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0aa      	b.n	8002370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800221a:	897b      	ldrh	r3, [r7, #10]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002228:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	6a3a      	ldr	r2, [r7, #32]
 800222e:	4952      	ldr	r1, [pc, #328]	; (8002378 <I2C_RequestMemoryRead+0x1cc>)
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f8fa 	bl	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e097      	b.n	8002370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	6a39      	ldr	r1, [r7, #32]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f964 	bl	8002528 <I2C_WaitOnTXEFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00d      	beq.n	8002282 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b04      	cmp	r3, #4
 800226c:	d107      	bne.n	800227e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e076      	b.n	8002370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002288:	893b      	ldrh	r3, [r7, #8]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	611a      	str	r2, [r3, #16]
 8002292:	e021      	b.n	80022d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002294:	893b      	ldrh	r3, [r7, #8]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b29b      	uxth	r3, r3
 800229a:	b2da      	uxtb	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	6a39      	ldr	r1, [r7, #32]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f93e 	bl	8002528 <I2C_WaitOnTXEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d107      	bne.n	80022ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e050      	b.n	8002370 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022ce:	893b      	ldrh	r3, [r7, #8]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022da:	6a39      	ldr	r1, [r7, #32]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f923 	bl	8002528 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d107      	bne.n	8002300 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e035      	b.n	8002370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002312:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	2200      	movs	r2, #0
 800231c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f82b 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233a:	d103      	bne.n	8002344 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e013      	b.n	8002370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002348:	897b      	ldrh	r3, [r7, #10]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	b2da      	uxtb	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	6a3a      	ldr	r2, [r7, #32]
 800235c:	4906      	ldr	r1, [pc, #24]	; (8002378 <I2C_RequestMemoryRead+0x1cc>)
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f863 	bl	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	00010002 	.word	0x00010002

0800237c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800238c:	e025      	b.n	80023da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d021      	beq.n	80023da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7fe ff19 	bl	80011cc <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d116      	bne.n	80023da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e023      	b.n	8002422 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d10d      	bne.n	8002400 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4013      	ands	r3, r2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	e00c      	b.n	800241a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4013      	ands	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf0c      	ite	eq
 8002412:	2301      	moveq	r3, #1
 8002414:	2300      	movne	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	429a      	cmp	r2, r3
 800241e:	d0b6      	beq.n	800238e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002438:	e051      	b.n	80024de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d123      	bne.n	8002492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002458:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002462:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f043 0204 	orr.w	r2, r3, #4
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e046      	b.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d021      	beq.n	80024de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249a:	f7fe fe97 	bl	80011cc <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d302      	bcc.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d116      	bne.n	80024de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f043 0220 	orr.w	r2, r3, #32
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e020      	b.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10c      	bne.n	8002502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	e00b      	b.n	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	43da      	mvns	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4013      	ands	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf14      	ite	ne
 8002514:	2301      	movne	r3, #1
 8002516:	2300      	moveq	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d18d      	bne.n	800243a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002534:	e02d      	b.n	8002592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f8ce 	bl	80026d8 <I2C_IsAcknowledgeFailed>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e02d      	b.n	80025a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d021      	beq.n	8002592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7fe fe3d 	bl	80011cc <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d116      	bne.n	8002592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f043 0220 	orr.w	r2, r3, #32
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e007      	b.n	80025a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d1ca      	bne.n	8002536 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025b6:	e02d      	b.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f88d 	bl	80026d8 <I2C_IsAcknowledgeFailed>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e02d      	b.n	8002624 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ce:	d021      	beq.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d0:	f7fe fdfc 	bl	80011cc <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d302      	bcc.n	80025e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d116      	bne.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e007      	b.n	8002624 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b04      	cmp	r3, #4
 8002620:	d1ca      	bne.n	80025b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002638:	e042      	b.n	80026c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b10      	cmp	r3, #16
 8002646:	d119      	bne.n	800267c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0210 	mvn.w	r2, #16
 8002650:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e029      	b.n	80026d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267c:	f7fe fda6 	bl	80011cc <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	429a      	cmp	r2, r3
 800268a:	d302      	bcc.n	8002692 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e007      	b.n	80026d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	2b40      	cmp	r3, #64	; 0x40
 80026cc:	d1b5      	bne.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ee:	d11b      	bne.n	8002728 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f043 0204 	orr.w	r2, r3, #4
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e26c      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8087 	beq.w	8002862 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002754:	4b92      	ldr	r3, [pc, #584]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b04      	cmp	r3, #4
 800275e:	d00c      	beq.n	800277a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002760:	4b8f      	ldr	r3, [pc, #572]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d112      	bne.n	8002792 <HAL_RCC_OscConfig+0x5e>
 800276c:	4b8c      	ldr	r3, [pc, #560]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002778:	d10b      	bne.n	8002792 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277a:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d06c      	beq.n	8002860 <HAL_RCC_OscConfig+0x12c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d168      	bne.n	8002860 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e246      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x76>
 800279c:	4b80      	ldr	r3, [pc, #512]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a7f      	ldr	r2, [pc, #508]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e02e      	b.n	8002808 <HAL_RCC_OscConfig+0xd4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x98>
 80027b2:	4b7b      	ldr	r3, [pc, #492]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a7a      	ldr	r2, [pc, #488]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b78      	ldr	r3, [pc, #480]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a77      	ldr	r2, [pc, #476]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e01d      	b.n	8002808 <HAL_RCC_OscConfig+0xd4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0xbc>
 80027d6:	4b72      	ldr	r3, [pc, #456]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a71      	ldr	r2, [pc, #452]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b6f      	ldr	r3, [pc, #444]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6e      	ldr	r2, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e00b      	b.n	8002808 <HAL_RCC_OscConfig+0xd4>
 80027f0:	4b6b      	ldr	r3, [pc, #428]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a6a      	ldr	r2, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a67      	ldr	r2, [pc, #412]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002806:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d013      	beq.n	8002838 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe fcdc 	bl	80011cc <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7fe fcd8 	bl	80011cc <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1fa      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0xe4>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe fcc8 	bl	80011cc <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002840:	f7fe fcc4 	bl	80011cc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1e6      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x10c>
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d063      	beq.n	8002936 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800286e:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800287a:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b08      	cmp	r3, #8
 8002884:	d11c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x18c>
 8002886:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d116      	bne.n	80028c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_RCC_OscConfig+0x176>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e1ba      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4939      	ldr	r1, [pc, #228]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	e03a      	b.n	8002936 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d020      	beq.n	800290a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c8:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe fc7d 	bl	80011cc <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d6:	f7fe fc79 	bl	80011cc <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e19b      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4927      	ldr	r1, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
 8002908:	e015      	b.n	8002936 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290a:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fc5c 	bl	80011cc <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002918:	f7fe fc58 	bl	80011cc <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e17a      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d03a      	beq.n	80029b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d019      	beq.n	800297e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_RCC_OscConfig+0x274>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7fe fc3c 	bl	80011cc <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002958:	f7fe fc38 	bl	80011cc <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e15a      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002976:	2001      	movs	r0, #1
 8002978:	f000 fada 	bl	8002f30 <RCC_Delay>
 800297c:	e01c      	b.n	80029b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7fe fc22 	bl	80011cc <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298a:	e00f      	b.n	80029ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298c:	f7fe fc1e 	bl	80011cc <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d908      	bls.n	80029ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e140      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	42420000 	.word	0x42420000
 80029a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	4b9e      	ldr	r3, [pc, #632]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e9      	bne.n	800298c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a6 	beq.w	8002b12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ca:	4b97      	ldr	r3, [pc, #604]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4b94      	ldr	r3, [pc, #592]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a93      	ldr	r2, [pc, #588]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	61d3      	str	r3, [r2, #28]
 80029e2:	4b91      	ldr	r3, [pc, #580]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b8e      	ldr	r3, [pc, #568]	; (8002c2c <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d118      	bne.n	8002a30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a8a      	ldr	r2, [pc, #552]	; (8002c2c <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fbdf 	bl	80011cc <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a12:	f7fe fbdb 	bl	80011cc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	; 0x64
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e0fd      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b81      	ldr	r3, [pc, #516]	; (8002c2c <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x312>
 8002a38:	4b7b      	ldr	r3, [pc, #492]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4a7a      	ldr	r2, [pc, #488]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6213      	str	r3, [r2, #32]
 8002a44:	e02d      	b.n	8002aa2 <HAL_RCC_OscConfig+0x36e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x334>
 8002a4e:	4b76      	ldr	r3, [pc, #472]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a75      	ldr	r2, [pc, #468]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6213      	str	r3, [r2, #32]
 8002a5a:	4b73      	ldr	r3, [pc, #460]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4a72      	ldr	r2, [pc, #456]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	6213      	str	r3, [r2, #32]
 8002a66:	e01c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x36e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d10c      	bne.n	8002a8a <HAL_RCC_OscConfig+0x356>
 8002a70:	4b6d      	ldr	r3, [pc, #436]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4a6c      	ldr	r2, [pc, #432]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	6213      	str	r3, [r2, #32]
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4a69      	ldr	r2, [pc, #420]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6213      	str	r3, [r2, #32]
 8002a88:	e00b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x36e>
 8002a8a:	4b67      	ldr	r3, [pc, #412]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a66      	ldr	r2, [pc, #408]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6213      	str	r3, [r2, #32]
 8002a96:	4b64      	ldr	r3, [pc, #400]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a63      	ldr	r2, [pc, #396]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d015      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fb8f 	bl	80011cc <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fb8b 	bl	80011cc <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0ab      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	4b57      	ldr	r3, [pc, #348]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ee      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x37e>
 8002ad4:	e014      	b.n	8002b00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fb79 	bl	80011cc <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe fb75 	bl	80011cc <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e095      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	4b4c      	ldr	r3, [pc, #304]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4b48      	ldr	r3, [pc, #288]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4a47      	ldr	r2, [pc, #284]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8081 	beq.w	8002c1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b1c:	4b42      	ldr	r3, [pc, #264]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d061      	beq.n	8002bec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d146      	bne.n	8002bbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b30:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <HAL_RCC_OscConfig+0x4fc>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe fb49 	bl	80011cc <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe fb45 	bl	80011cc <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e067      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b50:	4b35      	ldr	r3, [pc, #212]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b64:	d108      	bne.n	8002b78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b66:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	492d      	ldr	r1, [pc, #180]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a19      	ldr	r1, [r3, #32]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	4927      	ldr	r1, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x4fc>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe fb19 	bl	80011cc <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe fb15 	bl	80011cc <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e037      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x46a>
 8002bbc:	e02f      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <HAL_RCC_OscConfig+0x4fc>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fb02 	bl	80011cc <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fafe 	bl	80011cc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e020      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x498>
 8002bea:	e018      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e013      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	42420060 	.word	0x42420060

08002c34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0d0      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c48:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d910      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b67      	ldr	r3, [pc, #412]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	4965      	ldr	r1, [pc, #404]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b8      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c90:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca8:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a52      	ldr	r2, [pc, #328]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	494d      	ldr	r1, [pc, #308]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d040      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d115      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e07f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf2:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e073      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06b      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4936      	ldr	r1, [pc, #216]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d24:	f7fe fa52 	bl	80011cc <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fe fa4e 	bl	80011cc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e053      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d54:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d210      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4922      	ldr	r1, [pc, #136]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e032      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4916      	ldr	r1, [pc, #88]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	490e      	ldr	r1, [pc, #56]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dc2:	f000 f821 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_RCC_ClockConfig+0x1cc>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1d0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe f9b0 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	0800ab30 	.word	0x0800ab30
 8002e00:	20000024 	.word	0x20000024
 8002e04:	20000000 	.word	0x20000000

08002e08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e08:	b490      	push	{r4, r7}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e10:	1d3c      	adds	r4, r7, #4
 8002e12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e32:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x40>
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x46>
 8002e46:	e02d      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e4a:	623b      	str	r3, [r7, #32]
      break;
 8002e4c:	e02d      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	0c9b      	lsrs	r3, r3, #18
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d013      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	0c5b      	lsrs	r3, r3, #17
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e86:	fb02 f203 	mul.w	r2, r2, r3
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
 8002e92:	e004      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	4a0c      	ldr	r2, [pc, #48]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e98:	fb02 f303 	mul.w	r3, r2, r3
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	623b      	str	r3, [r7, #32]
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ea6:	623b      	str	r3, [r7, #32]
      break;
 8002ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3728      	adds	r7, #40	; 0x28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc90      	pop	{r4, r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	0800aaf0 	.word	0x0800aaf0
 8002ebc:	0800ab00 	.word	0x0800ab00
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	007a1200 	.word	0x007a1200
 8002ec8:	003d0900 	.word	0x003d0900

08002ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed0:	4b02      	ldr	r3, [pc, #8]	; (8002edc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	20000024 	.word	0x20000024

08002ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee4:	f7ff fff2 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002ee8:	4601      	mov	r1, r0
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef6:	5cd3      	ldrb	r3, [r2, r3]
 8002ef8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	0800ab40 	.word	0x0800ab40

08002f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f0c:	f7ff ffde 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002f10:	4601      	mov	r1, r0
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	0adb      	lsrs	r3, r3, #11
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4a03      	ldr	r2, [pc, #12]	; (8002f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1e:	5cd3      	ldrb	r3, [r2, r3]
 8002f20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	0800ab40 	.word	0x0800ab40

08002f30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <RCC_Delay+0x34>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <RCC_Delay+0x38>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0a5b      	lsrs	r3, r3, #9
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f4c:	bf00      	nop
  }
  while (Delay --);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	60fa      	str	r2, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f9      	bne.n	8002f4c <RCC_Delay+0x1c>
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000024 	.word	0x20000024
 8002f68:	10624dd3 	.word	0x10624dd3

08002f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e076      	b.n	800306c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d108      	bne.n	8002f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f8e:	d009      	beq.n	8002fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
 8002f96:	e005      	b.n	8002fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f005 fff4 	bl	8008fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003028:	ea42 0103 	orr.w	r1, r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	0c1a      	lsrs	r2, r3, #16
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f002 0204 	and.w	r2, r2, #4
 800304a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08c      	sub	sp, #48	; 0x30
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003082:	2301      	movs	r3, #1
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_SPI_TransmitReceive+0x26>
 8003096:	2302      	movs	r3, #2
 8003098:	e18a      	b.n	80033b0 <HAL_SPI_TransmitReceive+0x33c>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030a2:	f7fe f893 	bl	80011cc <HAL_GetTick>
 80030a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d00f      	beq.n	80030e4 <HAL_SPI_TransmitReceive+0x70>
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ca:	d107      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d103      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x68>
 80030d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d003      	beq.n	80030e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
 80030de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030e2:	e15b      	b.n	800339c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_SPI_TransmitReceive+0x82>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_SPI_TransmitReceive+0x82>
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d103      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e14e      	b.n	800339c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b04      	cmp	r3, #4
 8003108:	d003      	beq.n	8003112 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2205      	movs	r2, #5
 800310e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	887a      	ldrh	r2, [r7, #2]
 8003122:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	887a      	ldrh	r2, [r7, #2]
 8003134:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	887a      	ldrh	r2, [r7, #2]
 800313a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d007      	beq.n	8003166 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003164:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316e:	d178      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_SPI_TransmitReceive+0x10a>
 8003178:	8b7b      	ldrh	r3, [r7, #26]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d166      	bne.n	800324c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	881a      	ldrh	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	1c9a      	adds	r2, r3, #2
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a2:	e053      	b.n	800324c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d11b      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x176>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d016      	beq.n	80031ea <HAL_SPI_TransmitReceive+0x176>
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d113      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	1c9a      	adds	r2, r3, #2
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d119      	bne.n	800322c <HAL_SPI_TransmitReceive+0x1b8>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d014      	beq.n	800322c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	b292      	uxth	r2, r2
 800320e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	1c9a      	adds	r2, r3, #2
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003228:	2301      	movs	r3, #1
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800322c:	f7fd ffce 	bl	80011cc <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003238:	429a      	cmp	r2, r3
 800323a:	d807      	bhi.n	800324c <HAL_SPI_TransmitReceive+0x1d8>
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d003      	beq.n	800324c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800324a:	e0a7      	b.n	800339c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1a6      	bne.n	80031a4 <HAL_SPI_TransmitReceive+0x130>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1a1      	bne.n	80031a4 <HAL_SPI_TransmitReceive+0x130>
 8003260:	e07c      	b.n	800335c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x1fc>
 800326a:	8b7b      	ldrh	r3, [r7, #26]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d16b      	bne.n	8003348 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003296:	e057      	b.n	8003348 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d11c      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x26c>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d017      	beq.n	80032e0 <HAL_SPI_TransmitReceive+0x26c>
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d114      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d119      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x2ae>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d014      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800331e:	2301      	movs	r3, #1
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003322:	f7fd ff53 	bl	80011cc <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800332e:	429a      	cmp	r2, r3
 8003330:	d803      	bhi.n	800333a <HAL_SPI_TransmitReceive+0x2c6>
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d102      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x2cc>
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	2b00      	cmp	r3, #0
 800333e:	d103      	bne.n	8003348 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003346:	e029      	b.n	800339c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1a2      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x224>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d19d      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800335c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f8b1 	bl	80034c8 <SPI_EndRxTxTransaction>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d006      	beq.n	800337a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003378:	e010      	b.n	800339c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	e000      	b.n	800339c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800339a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3730      	adds	r7, #48	; 0x30
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033c8:	f7fd ff00 	bl	80011cc <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	4413      	add	r3, r2
 80033d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033d8:	f7fd fef8 	bl	80011cc <HAL_GetTick>
 80033dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033de:	4b39      	ldr	r3, [pc, #228]	; (80034c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	015b      	lsls	r3, r3, #5
 80033e4:	0d1b      	lsrs	r3, r3, #20
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	fb02 f303 	mul.w	r3, r2, r3
 80033ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ee:	e054      	b.n	800349a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f6:	d050      	beq.n	800349a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033f8:	f7fd fee8 	bl	80011cc <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	429a      	cmp	r2, r3
 8003406:	d902      	bls.n	800340e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d13d      	bne.n	800348a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800341c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003426:	d111      	bne.n	800344c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003430:	d004      	beq.n	800343c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343a:	d107      	bne.n	800344c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003454:	d10f      	bne.n	8003476 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003474:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e017      	b.n	80034ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3b01      	subs	r3, #1
 8003498:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4013      	ands	r3, r2
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d19b      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000024 	.word	0x20000024

080034c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2200      	movs	r2, #0
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff ff6a 	bl	80033b8 <SPI_WaitFlagStateUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e000      	b.n	80034fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e041      	b.n	800359a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f005 fda8 	bl	8009080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f000 fc14 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d001      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e03a      	b.n	8003632 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a18      	ldr	r2, [pc, #96]	; (800363c <HAL_TIM_Base_Start_IT+0x98>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00e      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x58>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d009      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x58>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <HAL_TIM_Base_Start_IT+0x9c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x58>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a13      	ldr	r2, [pc, #76]	; (8003644 <HAL_TIM_Base_Start_IT+0xa0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d111      	bne.n	8003620 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b06      	cmp	r3, #6
 800360c:	d010      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0201 	orr.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	e007      	b.n	8003630 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40000400 	.word	0x40000400
 8003644:	40000800 	.word	0x40000800

08003648 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e041      	b.n	80036de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f005 fce8 	bl	8009044 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f000 fb72 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <HAL_TIM_PWM_Start+0x24>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	bf14      	ite	ne
 8003704:	2301      	movne	r3, #1
 8003706:	2300      	moveq	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e022      	b.n	8003752 <HAL_TIM_PWM_Start+0x6a>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b04      	cmp	r3, #4
 8003710:	d109      	bne.n	8003726 <HAL_TIM_PWM_Start+0x3e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	e015      	b.n	8003752 <HAL_TIM_PWM_Start+0x6a>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d109      	bne.n	8003740 <HAL_TIM_PWM_Start+0x58>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	e008      	b.n	8003752 <HAL_TIM_PWM_Start+0x6a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	bf14      	ite	ne
 800374c:	2301      	movne	r3, #1
 800374e:	2300      	moveq	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e05e      	b.n	8003818 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d104      	bne.n	800376a <HAL_TIM_PWM_Start+0x82>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003768:	e013      	b.n	8003792 <HAL_TIM_PWM_Start+0xaa>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d104      	bne.n	800377a <HAL_TIM_PWM_Start+0x92>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003778:	e00b      	b.n	8003792 <HAL_TIM_PWM_Start+0xaa>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d104      	bne.n	800378a <HAL_TIM_PWM_Start+0xa2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003788:	e003      	b.n	8003792 <HAL_TIM_PWM_Start+0xaa>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2201      	movs	r2, #1
 8003798:	6839      	ldr	r1, [r7, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fd68 	bl	8004270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <HAL_TIM_PWM_Start+0x138>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d107      	bne.n	80037ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_TIM_PWM_Start+0x138>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIM_PWM_Start+0xfa>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d009      	beq.n	80037e2 <HAL_TIM_PWM_Start+0xfa>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a14      	ldr	r2, [pc, #80]	; (8003824 <HAL_TIM_PWM_Start+0x13c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIM_PWM_Start+0xfa>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a12      	ldr	r2, [pc, #72]	; (8003828 <HAL_TIM_PWM_Start+0x140>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d111      	bne.n	8003806 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b06      	cmp	r3, #6
 80037f2:	d010      	beq.n	8003816 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003804:	e007      	b.n	8003816 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40012c00 	.word	0x40012c00
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800

0800382c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b02      	cmp	r3, #2
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0202 	mvn.w	r2, #2
 8003858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa62 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa55 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fa64 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b04      	cmp	r3, #4
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0204 	mvn.w	r2, #4
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa38 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa2b 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa3a 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0208 	mvn.w	r2, #8
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2204      	movs	r2, #4
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa0e 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fa01 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa10 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b10      	cmp	r3, #16
 800393c:	d122      	bne.n	8003984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b10      	cmp	r3, #16
 800394a:	d11b      	bne.n	8003984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0210 	mvn.w	r2, #16
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2208      	movs	r2, #8
 800395a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f9e4 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 8003970:	e005      	b.n	800397e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f9d7 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f9e6 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0201 	mvn.w	r2, #1
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f001 f820 	bl	80049f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fcd5 	bl	8004386 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d10e      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f9aa 	bl	8003d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d10e      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d107      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0220 	mvn.w	r2, #32
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fca0 	bl	8004374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0ac      	b.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b0c      	cmp	r3, #12
 8003a62:	f200 809f 	bhi.w	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a66:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003aa1 	.word	0x08003aa1
 8003a70:	08003ba5 	.word	0x08003ba5
 8003a74:	08003ba5 	.word	0x08003ba5
 8003a78:	08003ba5 	.word	0x08003ba5
 8003a7c:	08003ae1 	.word	0x08003ae1
 8003a80:	08003ba5 	.word	0x08003ba5
 8003a84:	08003ba5 	.word	0x08003ba5
 8003a88:	08003ba5 	.word	0x08003ba5
 8003a8c:	08003b23 	.word	0x08003b23
 8003a90:	08003ba5 	.word	0x08003ba5
 8003a94:	08003ba5 	.word	0x08003ba5
 8003a98:	08003ba5 	.word	0x08003ba5
 8003a9c:	08003b63 	.word	0x08003b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f9c4 	bl	8003e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0208 	orr.w	r2, r2, #8
 8003aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0204 	bic.w	r2, r2, #4
 8003aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6999      	ldr	r1, [r3, #24]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	619a      	str	r2, [r3, #24]
      break;
 8003ade:	e062      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fa0a 	bl	8003f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6999      	ldr	r1, [r3, #24]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	021a      	lsls	r2, r3, #8
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	619a      	str	r2, [r3, #24]
      break;
 8003b20:	e041      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fa53 	bl	8003fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0208 	orr.w	r2, r2, #8
 8003b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0204 	bic.w	r2, r2, #4
 8003b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69d9      	ldr	r1, [r3, #28]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	61da      	str	r2, [r3, #28]
      break;
 8003b60:	e021      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fa9d 	bl	80040a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69d9      	ldr	r1, [r3, #28]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	021a      	lsls	r2, r3, #8
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	61da      	str	r2, [r3, #28]
      break;
 8003ba2:	e000      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003ba4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_TIM_ConfigClockSource+0x18>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0a6      	b.n	8003d1e <HAL_TIM_ConfigClockSource+0x166>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	d067      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0x120>
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d80b      	bhi.n	8003c24 <HAL_TIM_ConfigClockSource+0x6c>
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d073      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0x140>
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d802      	bhi.n	8003c1a <HAL_TIM_ConfigClockSource+0x62>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d06f      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c18:	e078      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d06c      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0x140>
 8003c1e:	2b30      	cmp	r3, #48	; 0x30
 8003c20:	d06a      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c22:	e073      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c24:	2b70      	cmp	r3, #112	; 0x70
 8003c26:	d00d      	beq.n	8003c44 <HAL_TIM_ConfigClockSource+0x8c>
 8003c28:	2b70      	cmp	r3, #112	; 0x70
 8003c2a:	d804      	bhi.n	8003c36 <HAL_TIM_ConfigClockSource+0x7e>
 8003c2c:	2b50      	cmp	r3, #80	; 0x50
 8003c2e:	d033      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0xe0>
 8003c30:	2b60      	cmp	r3, #96	; 0x60
 8003c32:	d041      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c34:	e06a      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3a:	d066      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x152>
 8003c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c40:	d017      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c42:	e063      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	6899      	ldr	r1, [r3, #8]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f000 faed 	bl	8004232 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	609a      	str	r2, [r3, #8]
      break;
 8003c70:	e04c      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6899      	ldr	r1, [r3, #8]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f000 fad6 	bl	8004232 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c94:	609a      	str	r2, [r3, #8]
      break;
 8003c96:	e039      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f000 fa4d 	bl	8004144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2150      	movs	r1, #80	; 0x50
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 faa4 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003cb6:	e029      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f000 fa6b 	bl	80041a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2160      	movs	r1, #96	; 0x60
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fa94 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003cd6:	e019      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f000 fa2d 	bl	8004144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2140      	movs	r1, #64	; 0x40
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fa84 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003cf6:	e009      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4619      	mov	r1, r3
 8003d02:	4610      	mov	r0, r2
 8003d04:	f000 fa7b 	bl	80041fe <TIM_ITRx_SetConfig>
        break;
 8003d08:	e000      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
	...

08003d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <TIM_Base_SetConfig+0xb8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d007      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <TIM_Base_SetConfig+0xbc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <TIM_Base_SetConfig+0xc0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <TIM_Base_SetConfig+0xb8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc0:	d007      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <TIM_Base_SetConfig+0xbc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <TIM_Base_SetConfig+0xc0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a07      	ldr	r2, [pc, #28]	; (8003e28 <TIM_Base_SetConfig+0xb8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800

08003e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f023 0302 	bic.w	r3, r3, #2
 8003e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <TIM_OC1_SetConfig+0xc8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10c      	bne.n	8003eaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0308 	bic.w	r3, r3, #8
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <TIM_OC1_SetConfig+0xc8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d111      	bne.n	8003ed6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	621a      	str	r2, [r3, #32]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00

08003f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0210 	bic.w	r2, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0320 	bic.w	r3, r3, #32
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <TIM_OC2_SetConfig+0xd0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d10d      	bne.n	8003f7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <TIM_OC2_SetConfig+0xd0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d113      	bne.n	8003fac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	40012c00 	.word	0x40012c00

08003fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800401c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <TIM_OC3_SetConfig+0xd0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10d      	bne.n	800404e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800404c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <TIM_OC3_SetConfig+0xd0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d113      	bne.n	800407e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800405c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00

080040a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <TIM_OC4_SetConfig+0x98>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d109      	bne.n	800411c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800410e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	019b      	lsls	r3, r3, #6
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00

08004144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f023 0201 	bic.w	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800416e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f023 030a 	bic.w	r3, r3, #10
 8004180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f023 0210 	bic.w	r2, r3, #16
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	031b      	lsls	r3, r3, #12
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	621a      	str	r2, [r3, #32]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	f043 0307 	orr.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	609a      	str	r2, [r3, #8]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004232:	b480      	push	{r7}
 8004234:	b087      	sub	sp, #28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	021a      	lsls	r2, r3, #8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	431a      	orrs	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4313      	orrs	r3, r2
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	609a      	str	r2, [r3, #8]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2201      	movs	r2, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1a      	ldr	r2, [r3, #32]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	43db      	mvns	r3, r3
 8004292:	401a      	ands	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e046      	b.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a16      	ldr	r2, [pc, #88]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00e      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d009      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a12      	ldr	r2, [pc, #72]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a10      	ldr	r2, [pc, #64]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10c      	bne.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	4313      	orrs	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800

08004374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e03f      	b.n	800442a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f004 feb6 	bl	8009130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2224      	movs	r2, #36	; 0x24
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f829 	bl	8004434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800446e:	f023 030c 	bic.w	r3, r3, #12
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	430b      	orrs	r3, r1
 800447a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2c      	ldr	r2, [pc, #176]	; (8004548 <UART_SetConfig+0x114>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d103      	bne.n	80044a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800449c:	f7fe fd34 	bl	8002f08 <HAL_RCC_GetPCLK2Freq>
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	e002      	b.n	80044aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044a4:	f7fe fd1c 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 80044a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009a      	lsls	r2, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	4a22      	ldr	r2, [pc, #136]	; (800454c <UART_SetConfig+0x118>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	0119      	lsls	r1, r3, #4
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e0:	4b1a      	ldr	r3, [pc, #104]	; (800454c <UART_SetConfig+0x118>)
 80044e2:	fba3 0302 	umull	r0, r3, r3, r2
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2064      	movs	r0, #100	; 0x64
 80044ea:	fb00 f303 	mul.w	r3, r0, r3
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	3332      	adds	r3, #50	; 0x32
 80044f4:	4a15      	ldr	r2, [pc, #84]	; (800454c <UART_SetConfig+0x118>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004500:	4419      	add	r1, r3
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009a      	lsls	r2, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	fbb2 f2f3 	udiv	r2, r2, r3
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <UART_SetConfig+0x118>)
 800451a:	fba3 0302 	umull	r0, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2064      	movs	r0, #100	; 0x64
 8004522:	fb00 f303 	mul.w	r3, r0, r3
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	3332      	adds	r3, #50	; 0x32
 800452c:	4a07      	ldr	r2, [pc, #28]	; (800454c <UART_SetConfig+0x118>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	440a      	add	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40013800 	.word	0x40013800
 800454c:	51eb851f 	.word	0x51eb851f

08004550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004554:	f7fc fde2 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004558:	f000 f84c 	bl	80045f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800455c:	f000 f9ce 	bl	80048fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8004560:	f000 f88a 	bl	8004678 <MX_I2C1_Init>
  MX_SPI2_Init();
 8004564:	f000 f8b6 	bl	80046d4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004568:	f000 f8ea 	bl	8004740 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800456c:	f000 f99c 	bl	80048a8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8004570:	f000 f94c 	bl	800480c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  while (MPU9255_Init(&hi2c1) == 1)
 8004574:	e006      	b.n	8004584 <main+0x34>
  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8004576:	2104      	movs	r1, #4
 8004578:	4818      	ldr	r0, [pc, #96]	; (80045dc <main+0x8c>)
 800457a:	f7fd f8d3 	bl	8001724 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800457e:	2064      	movs	r0, #100	; 0x64
 8004580:	f7fc fe2e 	bl	80011e0 <HAL_Delay>
  while (MPU9255_Init(&hi2c1) == 1)
 8004584:	4816      	ldr	r0, [pc, #88]	; (80045e0 <main+0x90>)
 8004586:	f000 fb3d 	bl	8004c04 <MPU9255_Init>
 800458a:	4603      	mov	r3, r0
 800458c:	2b01      	cmp	r3, #1
 800458e:	d0f2      	beq.n	8004576 <main+0x26>
  }
  readAll(&hi2c1, &MPU9255);
 8004590:	4914      	ldr	r1, [pc, #80]	; (80045e4 <main+0x94>)
 8004592:	4813      	ldr	r0, [pc, #76]	; (80045e0 <main+0x90>)
 8004594:	f000 fb9c 	bl	8004cd0 <readAll>
  HAL_Delay(6000);
 8004598:	f241 7070 	movw	r0, #6000	; 0x1770
 800459c:	f7fc fe20 	bl	80011e0 <HAL_Delay>
  runRadio();
 80045a0:	f004 fc30 	bl	8008e04 <runRadio>
  while ( payload_packet.throttle > 1050)
 80045a4:	e002      	b.n	80045ac <main+0x5c>
  {
    // Read again
    HAL_Delay(20);
 80045a6:	2014      	movs	r0, #20
 80045a8:	f7fc fe1a 	bl	80011e0 <HAL_Delay>
  while ( payload_packet.throttle > 1050)
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <main+0x98>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f240 421a 	movw	r2, #1050	; 0x41a
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d8f6      	bhi.n	80045a6 <main+0x56>
  }

		HAL_TIM_Base_Start_IT(&htim4);
 80045b8:	480c      	ldr	r0, [pc, #48]	; (80045ec <main+0x9c>)
 80045ba:	f7fe fff3 	bl	80035a4 <HAL_TIM_Base_Start_IT>

	// int count;
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80045be:	210c      	movs	r1, #12
 80045c0:	480b      	ldr	r0, [pc, #44]	; (80045f0 <main+0xa0>)
 80045c2:	f7ff f891 	bl	80036e8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80045c6:	2108      	movs	r1, #8
 80045c8:	4809      	ldr	r0, [pc, #36]	; (80045f0 <main+0xa0>)
 80045ca:	f7ff f88d 	bl	80036e8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    readAll(&hi2c1, &MPU9255);
 80045ce:	4905      	ldr	r1, [pc, #20]	; (80045e4 <main+0x94>)
 80045d0:	4803      	ldr	r0, [pc, #12]	; (80045e0 <main+0x90>)
 80045d2:	f000 fb7d 	bl	8004cd0 <readAll>
	    RX_data();
 80045d6:	f004 fc4d 	bl	8008e74 <RX_data>
	    readAll(&hi2c1, &MPU9255);
 80045da:	e7f8      	b.n	80045ce <main+0x7e>
 80045dc:	40010c00 	.word	0x40010c00
 80045e0:	200001f0 	.word	0x200001f0
 80045e4:	20000114 	.word	0x20000114
 80045e8:	200003bc 	.word	0x200003bc
 80045ec:	200001a8 	.word	0x200001a8
 80045f0:	20000244 	.word	0x20000244

080045f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b090      	sub	sp, #64	; 0x40
 80045f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045fa:	f107 0318 	add.w	r3, r7, #24
 80045fe:	2228      	movs	r2, #40	; 0x28
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f004 fe6a 	bl	80092dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004608:	1d3b      	adds	r3, r7, #4
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
 8004614:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004616:	2302      	movs	r3, #2
 8004618:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800461a:	2301      	movs	r3, #1
 800461c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800461e:	2310      	movs	r3, #16
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004622:	2302      	movs	r3, #2
 8004624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8004626:	2300      	movs	r3, #0
 8004628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800462a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004630:	f107 0318 	add.w	r3, r7, #24
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe f87d 	bl	8002734 <HAL_RCC_OscConfig>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8004640:	f000 fa4a 	bl	8004ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004644:	230f      	movs	r3, #15
 8004646:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004648:	2302      	movs	r3, #2
 800464a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	2102      	movs	r1, #2
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fae8 	bl	8002c34 <HAL_RCC_ClockConfig>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800466a:	f000 fa35 	bl	8004ad8 <Error_Handler>
  }
}
 800466e:	bf00      	nop
 8004670:	3740      	adds	r7, #64	; 0x40
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <MX_I2C1_Init+0x50>)
 800467e:	4a13      	ldr	r2, [pc, #76]	; (80046cc <MX_I2C1_Init+0x54>)
 8004680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004682:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <MX_I2C1_Init+0x50>)
 8004684:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <MX_I2C1_Init+0x58>)
 8004686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <MX_I2C1_Init+0x50>)
 800468a:	2200      	movs	r2, #0
 800468c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <MX_I2C1_Init+0x50>)
 8004690:	2200      	movs	r2, #0
 8004692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <MX_I2C1_Init+0x50>)
 8004696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800469a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <MX_I2C1_Init+0x50>)
 800469e:	2200      	movs	r2, #0
 80046a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <MX_I2C1_Init+0x50>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <MX_I2C1_Init+0x50>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <MX_I2C1_Init+0x50>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046b4:	4804      	ldr	r0, [pc, #16]	; (80046c8 <MX_I2C1_Init+0x50>)
 80046b6:	f7fd f84f 	bl	8001758 <HAL_I2C_Init>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80046c0:	f000 fa0a 	bl	8004ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80046c4:	bf00      	nop
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	200001f0 	.word	0x200001f0
 80046cc:	40005400 	.word	0x40005400
 80046d0:	000186a0 	.word	0x000186a0

080046d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80046d8:	4b17      	ldr	r3, [pc, #92]	; (8004738 <MX_SPI2_Init+0x64>)
 80046da:	4a18      	ldr	r2, [pc, #96]	; (800473c <MX_SPI2_Init+0x68>)
 80046dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80046de:	4b16      	ldr	r3, [pc, #88]	; (8004738 <MX_SPI2_Init+0x64>)
 80046e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <MX_SPI2_Init+0x64>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80046ec:	4b12      	ldr	r3, [pc, #72]	; (8004738 <MX_SPI2_Init+0x64>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f2:	4b11      	ldr	r3, [pc, #68]	; (8004738 <MX_SPI2_Init+0x64>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046f8:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <MX_SPI2_Init+0x64>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80046fe:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <MX_SPI2_Init+0x64>)
 8004700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004704:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <MX_SPI2_Init+0x64>)
 8004708:	2200      	movs	r2, #0
 800470a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <MX_SPI2_Init+0x64>)
 800470e:	2200      	movs	r2, #0
 8004710:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <MX_SPI2_Init+0x64>)
 8004714:	2200      	movs	r2, #0
 8004716:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004718:	4b07      	ldr	r3, [pc, #28]	; (8004738 <MX_SPI2_Init+0x64>)
 800471a:	2200      	movs	r2, #0
 800471c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <MX_SPI2_Init+0x64>)
 8004720:	220a      	movs	r2, #10
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004724:	4804      	ldr	r0, [pc, #16]	; (8004738 <MX_SPI2_Init+0x64>)
 8004726:	f7fe fc21 	bl	8002f6c <HAL_SPI_Init>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004730:	f000 f9d2 	bl	8004ad8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004734:	bf00      	nop
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000144 	.word	0x20000144
 800473c:	40003800 	.word	0x40003800

08004740 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	; 0x28
 8004744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004746:	f107 0320 	add.w	r3, r7, #32
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	60da      	str	r2, [r3, #12]
 800475c:	611a      	str	r2, [r3, #16]
 800475e:	615a      	str	r2, [r3, #20]
 8004760:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004762:	4b28      	ldr	r3, [pc, #160]	; (8004804 <MX_TIM3_Init+0xc4>)
 8004764:	4a28      	ldr	r2, [pc, #160]	; (8004808 <MX_TIM3_Init+0xc8>)
 8004766:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8004768:	4b26      	ldr	r3, [pc, #152]	; (8004804 <MX_TIM3_Init+0xc4>)
 800476a:	223f      	movs	r2, #63	; 0x3f
 800476c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800476e:	4b25      	ldr	r3, [pc, #148]	; (8004804 <MX_TIM3_Init+0xc4>)
 8004770:	2200      	movs	r2, #0
 8004772:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8004774:	4b23      	ldr	r3, [pc, #140]	; (8004804 <MX_TIM3_Init+0xc4>)
 8004776:	f644 6220 	movw	r2, #20000	; 0x4e20
 800477a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800477c:	4b21      	ldr	r3, [pc, #132]	; (8004804 <MX_TIM3_Init+0xc4>)
 800477e:	2200      	movs	r2, #0
 8004780:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <MX_TIM3_Init+0xc4>)
 8004784:	2200      	movs	r2, #0
 8004786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004788:	481e      	ldr	r0, [pc, #120]	; (8004804 <MX_TIM3_Init+0xc4>)
 800478a:	f7fe ff5d 	bl	8003648 <HAL_TIM_PWM_Init>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004794:	f000 f9a0 	bl	8004ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004798:	2300      	movs	r3, #0
 800479a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479c:	2300      	movs	r3, #0
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80047a0:	f107 0320 	add.w	r3, r7, #32
 80047a4:	4619      	mov	r1, r3
 80047a6:	4817      	ldr	r0, [pc, #92]	; (8004804 <MX_TIM3_Init+0xc4>)
 80047a8:	f7ff fd86 	bl	80042b8 <HAL_TIMEx_MasterConfigSynchronization>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80047b2:	f000 f991 	bl	8004ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047b6:	2360      	movs	r3, #96	; 0x60
 80047b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80047ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047c8:	1d3b      	adds	r3, r7, #4
 80047ca:	2208      	movs	r2, #8
 80047cc:	4619      	mov	r1, r3
 80047ce:	480d      	ldr	r0, [pc, #52]	; (8004804 <MX_TIM3_Init+0xc4>)
 80047d0:	f7ff f934 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80047da:	f000 f97d 	bl	8004ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	220c      	movs	r2, #12
 80047e2:	4619      	mov	r1, r3
 80047e4:	4807      	ldr	r0, [pc, #28]	; (8004804 <MX_TIM3_Init+0xc4>)
 80047e6:	f7ff f929 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80047f0:	f000 f972 	bl	8004ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80047f4:	4803      	ldr	r0, [pc, #12]	; (8004804 <MX_TIM3_Init+0xc4>)
 80047f6:	f004 fc69 	bl	80090cc <HAL_TIM_MspPostInit>

}
 80047fa:	bf00      	nop
 80047fc:	3728      	adds	r7, #40	; 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000244 	.word	0x20000244
 8004808:	40000400 	.word	0x40000400

0800480c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004812:	f107 0308 	add.w	r3, r7, #8
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	609a      	str	r2, [r3, #8]
 800481e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004820:	463b      	mov	r3, r7
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004828:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <MX_TIM4_Init+0x94>)
 800482a:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <MX_TIM4_Init+0x98>)
 800482c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 800482e:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <MX_TIM4_Init+0x94>)
 8004830:	f240 227f 	movw	r2, #639	; 0x27f
 8004834:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <MX_TIM4_Init+0x94>)
 8004838:	2200      	movs	r2, #0
 800483a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800483c:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <MX_TIM4_Init+0x94>)
 800483e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004842:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004844:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <MX_TIM4_Init+0x94>)
 8004846:	2200      	movs	r2, #0
 8004848:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800484a:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <MX_TIM4_Init+0x94>)
 800484c:	2280      	movs	r2, #128	; 0x80
 800484e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004850:	4813      	ldr	r0, [pc, #76]	; (80048a0 <MX_TIM4_Init+0x94>)
 8004852:	f7fe fe57 	bl	8003504 <HAL_TIM_Base_Init>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800485c:	f000 f93c 	bl	8004ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	4619      	mov	r1, r3
 800486c:	480c      	ldr	r0, [pc, #48]	; (80048a0 <MX_TIM4_Init+0x94>)
 800486e:	f7ff f9a3 	bl	8003bb8 <HAL_TIM_ConfigClockSource>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004878:	f000 f92e 	bl	8004ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800487c:	2300      	movs	r3, #0
 800487e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004880:	2300      	movs	r3, #0
 8004882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004884:	463b      	mov	r3, r7
 8004886:	4619      	mov	r1, r3
 8004888:	4805      	ldr	r0, [pc, #20]	; (80048a0 <MX_TIM4_Init+0x94>)
 800488a:	f7ff fd15 	bl	80042b8 <HAL_TIMEx_MasterConfigSynchronization>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004894:	f000 f920 	bl	8004ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004898:	bf00      	nop
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	200001a8 	.word	0x200001a8
 80048a4:	40000800 	.word	0x40000800

080048a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <MX_USART1_UART_Init+0x4c>)
 80048ae:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <MX_USART1_UART_Init+0x50>)
 80048b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80048b2:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <MX_USART1_UART_Init+0x4c>)
 80048b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80048b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <MX_USART1_UART_Init+0x4c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <MX_USART1_UART_Init+0x4c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <MX_USART1_UART_Init+0x4c>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <MX_USART1_UART_Init+0x4c>)
 80048ce:	220c      	movs	r2, #12
 80048d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048d2:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <MX_USART1_UART_Init+0x4c>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <MX_USART1_UART_Init+0x4c>)
 80048da:	2200      	movs	r2, #0
 80048dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048de:	4805      	ldr	r0, [pc, #20]	; (80048f4 <MX_USART1_UART_Init+0x4c>)
 80048e0:	f7ff fd5a 	bl	8004398 <HAL_UART_Init>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80048ea:	f000 f8f5 	bl	8004ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	2000028c 	.word	0x2000028c
 80048f8:	40013800 	.word	0x40013800

080048fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004902:	f107 0310 	add.w	r3, r7, #16
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	609a      	str	r2, [r3, #8]
 800490e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004910:	4b33      	ldr	r3, [pc, #204]	; (80049e0 <MX_GPIO_Init+0xe4>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <MX_GPIO_Init+0xe4>)
 8004916:	f043 0310 	orr.w	r3, r3, #16
 800491a:	6193      	str	r3, [r2, #24]
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <MX_GPIO_Init+0xe4>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004928:	4b2d      	ldr	r3, [pc, #180]	; (80049e0 <MX_GPIO_Init+0xe4>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <MX_GPIO_Init+0xe4>)
 800492e:	f043 0308 	orr.w	r3, r3, #8
 8004932:	6193      	str	r3, [r2, #24]
 8004934:	4b2a      	ldr	r3, [pc, #168]	; (80049e0 <MX_GPIO_Init+0xe4>)
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004940:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <MX_GPIO_Init+0xe4>)
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	4a26      	ldr	r2, [pc, #152]	; (80049e0 <MX_GPIO_Init+0xe4>)
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	6193      	str	r3, [r2, #24]
 800494c:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <MX_GPIO_Init+0xe4>)
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	607b      	str	r3, [r7, #4]
 8004956:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BUTTON2_Pin|BUTTON3_Pin, GPIO_PIN_RESET);
 8004958:	2200      	movs	r2, #0
 800495a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800495e:	4821      	ldr	r0, [pc, #132]	; (80049e4 <MX_GPIO_Init+0xe8>)
 8004960:	f7fc fec8 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8004964:	2200      	movs	r2, #0
 8004966:	f241 0104 	movw	r1, #4100	; 0x1004
 800496a:	481f      	ldr	r0, [pc, #124]	; (80049e8 <MX_GPIO_Init+0xec>)
 800496c:	f7fc fec2 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004970:	2200      	movs	r2, #0
 8004972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004976:	481d      	ldr	r0, [pc, #116]	; (80049ec <MX_GPIO_Init+0xf0>)
 8004978:	f7fc febc 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800497c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004982:	2301      	movs	r3, #1
 8004984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004986:	2300      	movs	r3, #0
 8004988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498a:	2302      	movs	r3, #2
 800498c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800498e:	f107 0310 	add.w	r3, r7, #16
 8004992:	4619      	mov	r1, r3
 8004994:	4813      	ldr	r0, [pc, #76]	; (80049e4 <MX_GPIO_Init+0xe8>)
 8004996:	f7fc fd53 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|NRF_CSN_Pin;
 800499a:	f241 0304 	movw	r3, #4100	; 0x1004
 800499e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049a0:	2301      	movs	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a8:	2302      	movs	r3, #2
 80049aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ac:	f107 0310 	add.w	r3, r7, #16
 80049b0:	4619      	mov	r1, r3
 80049b2:	480d      	ldr	r0, [pc, #52]	; (80049e8 <MX_GPIO_Init+0xec>)
 80049b4:	f7fc fd44 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 80049b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049be:	2301      	movs	r3, #1
 80049c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c6:	2302      	movs	r3, #2
 80049c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 80049ca:	f107 0310 	add.w	r3, r7, #16
 80049ce:	4619      	mov	r1, r3
 80049d0:	4806      	ldr	r0, [pc, #24]	; (80049ec <MX_GPIO_Init+0xf0>)
 80049d2:	f7fc fd35 	bl	8001440 <HAL_GPIO_Init>

}
 80049d6:	bf00      	nop
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40011000 	.word	0x40011000
 80049e8:	40010c00 	.word	0x40010c00
 80049ec:	40010800 	.word	0x40010800

080049f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af04      	add	r7, sp, #16
 80049f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim4.Instance)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b2c      	ldr	r3, [pc, #176]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d14d      	bne.n	8004aa0 <HAL_TIM_PeriodElapsedCallback+0xb0>
	  {
	   // readAll(&hi2c1, &MPU9255);
	    abs_yaw_angle = abs_yaw_angle + MPU9255.GyroX * dt;
 8004a04:	4b2b      	ldr	r3, [pc, #172]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fb fd05 	bl	8000418 <__aeabi_f2d>
 8004a0e:	4604      	mov	r4, r0
 8004a10:	460d      	mov	r5, r1
 8004a12:	4b29      	ldr	r3, [pc, #164]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fb fcfe 	bl	8000418 <__aeabi_f2d>
 8004a1c:	a322      	add	r3, pc, #136	; (adr r3, 8004aa8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fd51 	bl	80004c8 <__aeabi_dmul>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	f7fb fb95 	bl	800015c <__adddf3>
 8004a32:	4603      	mov	r3, r0
 8004a34:	460c      	mov	r4, r1
 8004a36:	4618      	mov	r0, r3
 8004a38:	4621      	mov	r1, r4
 8004a3a:	f7fc f815 	bl	8000a68 <__aeabi_d2f>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004a42:	601a      	str	r2, [r3, #0]
	    // receive rc

	    // calculate PID
	    calculate_PID(payload_packet.roll, payload_packet.pitch, payload_packet.yaw, MPU9255.roll, MPU9255.pitch, MPU9255.yaw, &pid);
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	b298      	uxth	r0, r3
 8004a4a:	4b1c      	ldr	r3, [pc, #112]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	b29c      	uxth	r4, r3
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	b29d      	uxth	r5, r3
 8004a56:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004a58:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8004a5a:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004a60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a62:	4917      	ldr	r1, [pc, #92]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8004a64:	9102      	str	r1, [sp, #8]
 8004a66:	9201      	str	r2, [sp, #4]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4633      	mov	r3, r6
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4621      	mov	r1, r4
 8004a70:	f003 fe5e 	bl	8008730 <calculate_PID>

	    // value PWM
	    calculate_motor_output(&esc_right, &esc_left, &servo_right, &servo_left, payload_packet.throttle, &pid);
 8004a74:	4b11      	ldr	r3, [pc, #68]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	4a11      	ldr	r2, [pc, #68]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8004a7c:	9201      	str	r2, [sp, #4]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004a82:	4a11      	ldr	r2, [pc, #68]	; (8004ac8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004a84:	4911      	ldr	r1, [pc, #68]	; (8004acc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004a86:	4812      	ldr	r0, [pc, #72]	; (8004ad0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004a88:	f000 f82c 	bl	8004ae4 <calculate_motor_output>

	    // htim3.Instance->CCR1 = servo_right;
	    // htim3.Instance->CCR2 = servo_left;
	    htim3.Instance->CCR3 = esc_right;
 8004a8c:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004a8e:	881a      	ldrh	r2, [r3, #0]
 8004a90:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	63da      	str	r2, [r3, #60]	; 0x3c
	    htim3.Instance->CCR4 = esc_left;
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004a98:	881a      	ldrh	r2, [r3, #0]
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
	  }
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa8:	47ae147b 	.word	0x47ae147b
 8004aac:	3f847ae1 	.word	0x3f847ae1
 8004ab0:	200001a8 	.word	0x200001a8
 8004ab4:	200000ac 	.word	0x200000ac
 8004ab8:	20000114 	.word	0x20000114
 8004abc:	200003bc 	.word	0x200003bc
 8004ac0:	2000019c 	.word	0x2000019c
 8004ac4:	200000b2 	.word	0x200000b2
 8004ac8:	200000b0 	.word	0x200000b0
 8004acc:	200002d0 	.word	0x200002d0
 8004ad0:	200002d4 	.word	0x200002d4
 8004ad4:	20000244 	.word	0x20000244

08004ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <calculate_motor_output>:
#include "main.h"
#include "pid.h"
#include "motor.h"

void calculate_motor_output(uint16_t *esc_right, uint16_t *esc_left, uint16_t *servo_right, uint16_t *servo_left, uint16_t throttle_rc, PID_t *pid)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]

    // value PWM
    *esc_right = throttle_rc + pid->PID_roll_out;
 8004af2:	8b3b      	ldrh	r3, [r7, #24]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fc f8c1 	bl	8000c7c <__aeabi_i2f>
 8004afa:	4602      	mov	r2, r0
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f7fc f806 	bl	8000b14 <__addsf3>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fc fae6 	bl	80010dc <__aeabi_f2uiz>
 8004b10:	4603      	mov	r3, r0
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	801a      	strh	r2, [r3, #0]
    *esc_left = throttle_rc - pid->PID_roll_out;
 8004b18:	8b3b      	ldrh	r3, [r7, #24]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fc f8ae 	bl	8000c7c <__aeabi_i2f>
 8004b20:	4602      	mov	r2, r0
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f7fb fff1 	bl	8000b10 <__aeabi_fsub>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fc fad3 	bl	80010dc <__aeabi_f2uiz>
 8004b36:	4603      	mov	r3, r0
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	801a      	strh	r2, [r3, #0]
    *servo_right = 1500 + pid->PID_pitch_out - pid->PID_yaw_out + SERVO_RIGHT_OFFSET;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	492f      	ldr	r1, [pc, #188]	; (8004c00 <calculate_motor_output+0x11c>)
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fb ffe5 	bl	8000b14 <__addsf3>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	4619      	mov	r1, r3
 8004b54:	4610      	mov	r0, r2
 8004b56:	f7fb ffdb 	bl	8000b10 <__aeabi_fsub>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fb ffd7 	bl	8000b14 <__addsf3>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fc fab7 	bl	80010dc <__aeabi_f2uiz>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	801a      	strh	r2, [r3, #0]
    *servo_left = 1500 - pid->PID_pitch_out - pid->PID_yaw_out + SERVO_LEFT_OFFSET;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4820      	ldr	r0, [pc, #128]	; (8004c00 <calculate_motor_output+0x11c>)
 8004b7e:	f7fb ffc7 	bl	8000b10 <__aeabi_fsub>
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f7fb ffbf 	bl	8000b10 <__aeabi_fsub>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fb ffbb 	bl	8000b14 <__addsf3>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fc fa9b 	bl	80010dc <__aeabi_f2uiz>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	801a      	strh	r2, [r3, #0]
    if(*esc_right < 1000)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb6:	d203      	bcs.n	8004bc0 <calculate_motor_output+0xdc>
    {
    	*esc_right = 1000;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bbe:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_right > 2000)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004bc8:	d903      	bls.n	8004bd2 <calculate_motor_output+0xee>
    {
    	*esc_right = 2000;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bd0:	801a      	strh	r2, [r3, #0]
    }
    if(*esc_left < 1000)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bda:	d203      	bcs.n	8004be4 <calculate_motor_output+0x100>
    {
        *esc_left = 1000;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004be2:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left > 2000)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004bec:	d903      	bls.n	8004bf6 <calculate_motor_output+0x112>
    {
        *esc_left = 2000;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bf4:	801a      	strh	r2, [r3, #0]
    }
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	44bb8000 	.word	0x44bb8000

08004c04 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af04      	add	r7, sp, #16
 8004c0a:	6078      	str	r0, [r7, #4]
	printf("**************************** \r\n");
	printf("MPU9250 STM32 Implementation \r\n");
	printf("**************************** \r\n");
	#endif
	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 8004c0c:	2364      	movs	r3, #100	; 0x64
 8004c0e:	9302      	str	r3, [sp, #8]
 8004c10:	2301      	movs	r3, #1
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	f107 030f 	add.w	r3, r7, #15
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	2275      	movs	r2, #117	; 0x75
 8004c1e:	21d0      	movs	r1, #208	; 0xd0
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fc ffcb 	bl	8001bbc <HAL_I2C_Mem_Read>

#if DEBUG_F
		printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);
#endif

	if (readData == 113) {
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	2b71      	cmp	r3, #113	; 0x71
 8004c2a:	d13e      	bne.n	8004caa <MPU9255_Init+0xa6>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 8004c2c:	4921      	ldr	r1, [pc, #132]	; (8004cb4 <MPU9255_Init+0xb0>)
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f001 fca6 	bl	8006580 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 8004c34:	4a20      	ldr	r2, [pc, #128]	; (8004cb8 <MPU9255_Init+0xb4>)
 8004c36:	4921      	ldr	r1, [pc, #132]	; (8004cbc <MPU9255_Init+0xb8>)
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f001 f86b 	bl	8005d14 <calibrateMPU9250>
		HAL_Delay(1000);
 8004c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c42:	f7fc facd 	bl	80011e0 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 ff82 	bl	8005b50 <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 8004c4c:	2322      	movs	r3, #34	; 0x22
 8004c4e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 8004c50:	2364      	movs	r3, #100	; 0x64
 8004c52:	9302      	str	r3, [sp, #8]
 8004c54:	2301      	movs	r3, #1
 8004c56:	9301      	str	r3, [sp, #4]
 8004c58:	f107 030e 	add.w	r3, r7, #14
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2301      	movs	r3, #1
 8004c60:	2237      	movs	r2, #55	; 0x37
 8004c62:	21d0      	movs	r1, #208	; 0xd0
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fc feaf 	bl	80019c8 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 8004c6a:	2364      	movs	r3, #100	; 0x64
 8004c6c:	9302      	str	r3, [sp, #8]
 8004c6e:	2301      	movs	r3, #1
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	f107 030f 	add.w	r3, r7, #15
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2301      	movs	r3, #1
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2118      	movs	r1, #24
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc ff9c 	bl	8001bbc <HAL_I2C_Mem_Read>
#if (DEBUG_MPU)
		printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);
#endif
		HAL_Delay(1000);
 8004c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c88:	f7fc faaa 	bl	80011e0 <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 8004c8c:	490c      	ldr	r1, [pc, #48]	; (8004cc0 <MPU9255_Init+0xbc>)
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fd16 	bl	80056c0 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 8004c94:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <MPU9255_Init+0xc0>)
 8004c96:	490c      	ldr	r1, [pc, #48]	; (8004cc8 <MPU9255_Init+0xc4>)
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fde7 	bl	800586c <calibrateMag>

		HAL_Delay(1000);
 8004c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ca2:	f7fc fa9d 	bl	80011e0 <HAL_Delay>
		return 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e000      	b.n	8004cac <MPU9255_Init+0xa8>
	}
	return 1; // Loop forever if communication doesn't happen
 8004caa:	2301      	movs	r3, #1
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	200002fc 	.word	0x200002fc
 8004cb8:	200000cc 	.word	0x200000cc
 8004cbc:	200000c0 	.word	0x200000c0
 8004cc0:	200000b4 	.word	0x200000b4
 8004cc4:	200000e4 	.word	0x200000e4
 8004cc8:	200000d8 	.word	0x200000d8
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 8004cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cd4:	b08b      	sub	sp, #44	; 0x2c
 8004cd6:	af06      	add	r7, sp, #24
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8004cdc:	2364      	movs	r3, #100	; 0x64
 8004cde:	9302      	str	r3, [sp, #8]
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	f107 030f 	add.w	r3, r7, #15
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	2301      	movs	r3, #1
 8004cec:	223a      	movs	r2, #58	; 0x3a
 8004cee:	21d0      	movs	r1, #208	; 0xd0
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fc ff63 	bl	8001bbc <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8123 	beq.w	8004f48 <readAll+0x278>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 8004d02:	4997      	ldr	r1, [pc, #604]	; (8004f60 <readAll+0x290>)
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fc29 	bl	800555c <readAccelData>
		getAres();
 8004d0a:	f000 fbf9 	bl	8005500 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 8004d0e:	4b94      	ldr	r3, [pc, #592]	; (8004f60 <readAll+0x290>)
 8004d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fb ffb1 	bl	8000c7c <__aeabi_i2f>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	4b91      	ldr	r3, [pc, #580]	; (8004f64 <readAll+0x294>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f7fb fffe 	bl	8000d24 <__aeabi_fmul>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4b8e      	ldr	r3, [pc, #568]	; (8004f68 <readAll+0x298>)
 8004d2e:	601a      	str	r2, [r3, #0]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 8004d30:	4b8b      	ldr	r3, [pc, #556]	; (8004f60 <readAll+0x290>)
 8004d32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fb ffa0 	bl	8000c7c <__aeabi_i2f>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b89      	ldr	r3, [pc, #548]	; (8004f64 <readAll+0x294>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f7fb ffed 	bl	8000d24 <__aeabi_fmul>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4b87      	ldr	r3, [pc, #540]	; (8004f6c <readAll+0x29c>)
 8004d50:	601a      	str	r2, [r3, #0]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 8004d52:	4b83      	ldr	r3, [pc, #524]	; (8004f60 <readAll+0x290>)
 8004d54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fb ff8f 	bl	8000c7c <__aeabi_i2f>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	4b80      	ldr	r3, [pc, #512]	; (8004f64 <readAll+0x294>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f7fb ffdc 	bl	8000d24 <__aeabi_fmul>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4b7f      	ldr	r3, [pc, #508]	; (8004f70 <readAll+0x2a0>)
 8004d72:	601a      	str	r2, [r3, #0]

		DataStruct->AccelX = ax;
 8004d74:	4b7c      	ldr	r3, [pc, #496]	; (8004f68 <readAll+0x298>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8004d7c:	4b7b      	ldr	r3, [pc, #492]	; (8004f6c <readAll+0x29c>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8004d84:	4b7a      	ldr	r3, [pc, #488]	; (8004f70 <readAll+0x2a0>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 8004d8c:	4979      	ldr	r1, [pc, #484]	; (8004f74 <readAll+0x2a4>)
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fc17 	bl	80055c2 <readGyroData>
		getGres();
 8004d94:	f000 fb82 	bl	800549c <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8004d98:	4b76      	ldr	r3, [pc, #472]	; (8004f74 <readAll+0x2a4>)
 8004d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fb ff6c 	bl	8000c7c <__aeabi_i2f>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b74      	ldr	r3, [pc, #464]	; (8004f78 <readAll+0x2a8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4619      	mov	r1, r3
 8004dac:	4610      	mov	r0, r2
 8004dae:	f7fb ffb9 	bl	8000d24 <__aeabi_fmul>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	4b71      	ldr	r3, [pc, #452]	; (8004f7c <readAll+0x2ac>)
 8004db8:	601a      	str	r2, [r3, #0]
		gy = (float)gyroCount[1]*gRes;
 8004dba:	4b6e      	ldr	r3, [pc, #440]	; (8004f74 <readAll+0x2a4>)
 8004dbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fb ff5b 	bl	8000c7c <__aeabi_i2f>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	4b6b      	ldr	r3, [pc, #428]	; (8004f78 <readAll+0x2a8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f7fb ffa8 	bl	8000d24 <__aeabi_fmul>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4b69      	ldr	r3, [pc, #420]	; (8004f80 <readAll+0x2b0>)
 8004dda:	601a      	str	r2, [r3, #0]
		gz = (float)gyroCount[2]*gRes;
 8004ddc:	4b65      	ldr	r3, [pc, #404]	; (8004f74 <readAll+0x2a4>)
 8004dde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fb ff4a 	bl	8000c7c <__aeabi_i2f>
 8004de8:	4602      	mov	r2, r0
 8004dea:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <readAll+0x2a8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f7fb ff97 	bl	8000d24 <__aeabi_fmul>
 8004df6:	4603      	mov	r3, r0
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b62      	ldr	r3, [pc, #392]	; (8004f84 <readAll+0x2b4>)
 8004dfc:	601a      	str	r2, [r3, #0]

		DataStruct->GyroX = gx;
 8004dfe:	4b5f      	ldr	r3, [pc, #380]	; (8004f7c <readAll+0x2ac>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 8004e06:	4b5e      	ldr	r3, [pc, #376]	; (8004f80 <readAll+0x2b0>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 8004e0e:	4b5d      	ldr	r3, [pc, #372]	; (8004f84 <readAll+0x2b4>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 8004e16:	495c      	ldr	r1, [pc, #368]	; (8004f88 <readAll+0x2b8>)
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fc05 	bl	8005628 <readMagData>
		getMres();
 8004e1e:	f000 fb1f 	bl	8005460 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 8004e22:	4b59      	ldr	r3, [pc, #356]	; (8004f88 <readAll+0x2b8>)
 8004e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fb ff27 	bl	8000c7c <__aeabi_i2f>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	4b56      	ldr	r3, [pc, #344]	; (8004f8c <readAll+0x2bc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f7fb ff74 	bl	8000d24 <__aeabi_fmul>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b53      	ldr	r3, [pc, #332]	; (8004f90 <readAll+0x2c0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7fb ff6c 	bl	8000d24 <__aeabi_fmul>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4b50      	ldr	r3, [pc, #320]	; (8004f94 <readAll+0x2c4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f7fb fe5a 	bl	8000b10 <__aeabi_fsub>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	461a      	mov	r2, r3
 8004e60:	4b4d      	ldr	r3, [pc, #308]	; (8004f98 <readAll+0x2c8>)
 8004e62:	601a      	str	r2, [r3, #0]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 8004e64:	4b48      	ldr	r3, [pc, #288]	; (8004f88 <readAll+0x2b8>)
 8004e66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fb ff06 	bl	8000c7c <__aeabi_i2f>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b46      	ldr	r3, [pc, #280]	; (8004f8c <readAll+0x2bc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f7fb ff53 	bl	8000d24 <__aeabi_fmul>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	461a      	mov	r2, r3
 8004e82:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <readAll+0x2c0>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f7fb ff4b 	bl	8000d24 <__aeabi_fmul>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	461a      	mov	r2, r3
 8004e92:	4b40      	ldr	r3, [pc, #256]	; (8004f94 <readAll+0x2c4>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f7fb fe39 	bl	8000b10 <__aeabi_fsub>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4b3e      	ldr	r3, [pc, #248]	; (8004f9c <readAll+0x2cc>)
 8004ea4:	601a      	str	r2, [r3, #0]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 8004ea6:	4b38      	ldr	r3, [pc, #224]	; (8004f88 <readAll+0x2b8>)
 8004ea8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb fee5 	bl	8000c7c <__aeabi_i2f>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4b35      	ldr	r3, [pc, #212]	; (8004f8c <readAll+0x2bc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7fb ff32 	bl	8000d24 <__aeabi_fmul>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4b32      	ldr	r3, [pc, #200]	; (8004f90 <readAll+0x2c0>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f7fb ff2a 	bl	8000d24 <__aeabi_fmul>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4b2f      	ldr	r3, [pc, #188]	; (8004f94 <readAll+0x2c4>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f7fb fe18 	bl	8000b10 <__aeabi_fsub>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4b2e      	ldr	r3, [pc, #184]	; (8004fa0 <readAll+0x2d0>)
 8004ee6:	601a      	str	r2, [r3, #0]
		mx *= magScale[0];
 8004ee8:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <readAll+0x2d4>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b2a      	ldr	r3, [pc, #168]	; (8004f98 <readAll+0x2c8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f7fb ff16 	bl	8000d24 <__aeabi_fmul>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <readAll+0x2c8>)
 8004efe:	601a      	str	r2, [r3, #0]
		my *= magScale[1];
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <readAll+0x2d4>)
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <readAll+0x2cc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7fb ff0a 	bl	8000d24 <__aeabi_fmul>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <readAll+0x2cc>)
 8004f16:	601a      	str	r2, [r3, #0]
		mz *= magScale[2];
 8004f18:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <readAll+0x2d4>)
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <readAll+0x2d0>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f7fb fefe 	bl	8000d24 <__aeabi_fmul>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <readAll+0x2d0>)
 8004f2e:	601a      	str	r2, [r3, #0]

		DataStruct->MagX = mx;
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <readAll+0x2c8>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 8004f38:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <readAll+0x2cc>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <readAll+0x2d0>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8004f48:	f7fc f940 	bl	80011cc <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <readAll+0x2d8>)
 8004f50:	601a      	str	r2, [r3, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <readAll+0x2d8>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b15      	ldr	r3, [pc, #84]	; (8004fac <readAll+0x2dc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	e027      	b.n	8004fb0 <readAll+0x2e0>
 8004f60:	200002f4 	.word	0x200002f4
 8004f64:	20000330 	.word	0x20000330
 8004f68:	2000032c 	.word	0x2000032c
 8004f6c:	20000374 	.word	0x20000374
 8004f70:	20000318 	.word	0x20000318
 8004f74:	2000031c 	.word	0x2000031c
 8004f78:	2000034c 	.word	0x2000034c
 8004f7c:	20000370 	.word	0x20000370
 8004f80:	20000314 	.word	0x20000314
 8004f84:	20000344 	.word	0x20000344
 8004f88:	2000035c 	.word	0x2000035c
 8004f8c:	2000036c 	.word	0x2000036c
 8004f90:	200000b4 	.word	0x200000b4
 8004f94:	200000d8 	.word	0x200000d8
 8004f98:	20000378 	.word	0x20000378
 8004f9c:	20000324 	.word	0x20000324
 8004fa0:	20000350 	.word	0x20000350
 8004fa4:	200000e4 	.word	0x200000e4
 8004fa8:	200000fc 	.word	0x200000fc
 8004fac:	200000f8 	.word	0x200000f8
 8004fb0:	f7fb fe60 	bl	8000c74 <__aeabi_ui2f>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	499c      	ldr	r1, [pc, #624]	; (8005228 <readAll+0x558>)
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fb ff67 	bl	8000e8c <__aeabi_fdiv>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4b9a      	ldr	r3, [pc, #616]	; (800522c <readAll+0x55c>)
 8004fc4:	601a      	str	r2, [r3, #0]
	lastUpdate = Now;
 8004fc6:	4b9a      	ldr	r3, [pc, #616]	; (8005230 <readAll+0x560>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a9a      	ldr	r2, [pc, #616]	; (8005234 <readAll+0x564>)
 8004fcc:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 8004fce:	4b9a      	ldr	r3, [pc, #616]	; (8005238 <readAll+0x568>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b96      	ldr	r3, [pc, #600]	; (800522c <readAll+0x55c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f7fb fd9b 	bl	8000b14 <__addsf3>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4b95      	ldr	r3, [pc, #596]	; (8005238 <readAll+0x568>)
 8004fe4:	601a      	str	r2, [r3, #0]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 8004fe6:	4b95      	ldr	r3, [pc, #596]	; (800523c <readAll+0x56c>)
 8004fe8:	681c      	ldr	r4, [r3, #0]
 8004fea:	4b95      	ldr	r3, [pc, #596]	; (8005240 <readAll+0x570>)
 8004fec:	681d      	ldr	r5, [r3, #0]
 8004fee:	4b95      	ldr	r3, [pc, #596]	; (8005244 <readAll+0x574>)
 8004ff0:	681e      	ldr	r6, [r3, #0]
 8004ff2:	4b95      	ldr	r3, [pc, #596]	; (8005248 <readAll+0x578>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fb fa0e 	bl	8000418 <__aeabi_f2d>
 8004ffc:	a388      	add	r3, pc, #544	; (adr r3, 8005220 <readAll+0x550>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb fa61 	bl	80004c8 <__aeabi_dmul>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	4b8e      	ldr	r3, [pc, #568]	; (800524c <readAll+0x57c>)
 8005014:	f7fb fb82 	bl	800071c <__aeabi_ddiv>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	f7fb fd22 	bl	8000a68 <__aeabi_d2f>
 8005024:	4681      	mov	r9, r0
 8005026:	4b8a      	ldr	r3, [pc, #552]	; (8005250 <readAll+0x580>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb f9f4 	bl	8000418 <__aeabi_f2d>
 8005030:	a37b      	add	r3, pc, #492	; (adr r3, 8005220 <readAll+0x550>)
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f7fb fa47 	bl	80004c8 <__aeabi_dmul>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4610      	mov	r0, r2
 8005040:	4619      	mov	r1, r3
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	4b81      	ldr	r3, [pc, #516]	; (800524c <readAll+0x57c>)
 8005048:	f7fb fb68 	bl	800071c <__aeabi_ddiv>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4610      	mov	r0, r2
 8005052:	4619      	mov	r1, r3
 8005054:	f7fb fd08 	bl	8000a68 <__aeabi_d2f>
 8005058:	4680      	mov	r8, r0
 800505a:	4b7e      	ldr	r3, [pc, #504]	; (8005254 <readAll+0x584>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fb f9da 	bl	8000418 <__aeabi_f2d>
 8005064:	a36e      	add	r3, pc, #440	; (adr r3, 8005220 <readAll+0x550>)
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	f7fb fa2d 	bl	80004c8 <__aeabi_dmul>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4610      	mov	r0, r2
 8005074:	4619      	mov	r1, r3
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	4b74      	ldr	r3, [pc, #464]	; (800524c <readAll+0x57c>)
 800507c:	f7fb fb4e 	bl	800071c <__aeabi_ddiv>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4610      	mov	r0, r2
 8005086:	4619      	mov	r1, r3
 8005088:	f7fb fcee 	bl	8000a68 <__aeabi_d2f>
 800508c:	4b72      	ldr	r3, [pc, #456]	; (8005258 <readAll+0x588>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a72      	ldr	r2, [pc, #456]	; (800525c <readAll+0x58c>)
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	4972      	ldr	r1, [pc, #456]	; (8005260 <readAll+0x590>)
 8005096:	6809      	ldr	r1, [r1, #0]
 8005098:	9104      	str	r1, [sp, #16]
 800509a:	9203      	str	r2, [sp, #12]
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	9001      	str	r0, [sp, #4]
 80050a0:	f8cd 8000 	str.w	r8, [sp]
 80050a4:	464b      	mov	r3, r9
 80050a6:	4632      	mov	r2, r6
 80050a8:	4629      	mov	r1, r5
 80050aa:	4620      	mov	r0, r4
 80050ac:	f001 ff44 	bl	8006f38 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 80050b0:	4b6c      	ldr	r3, [pc, #432]	; (8005264 <readAll+0x594>)
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	4b6b      	ldr	r3, [pc, #428]	; (8005264 <readAll+0x594>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fb fe32 	bl	8000d24 <__aeabi_fmul>
 80050c0:	4603      	mov	r3, r0
 80050c2:	461c      	mov	r4, r3
 80050c4:	4b67      	ldr	r3, [pc, #412]	; (8005264 <readAll+0x594>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4b66      	ldr	r3, [pc, #408]	; (8005264 <readAll+0x594>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7fb fe28 	bl	8000d24 <__aeabi_fmul>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4619      	mov	r1, r3
 80050d8:	4620      	mov	r0, r4
 80050da:	f7fb fd1b 	bl	8000b14 <__addsf3>
 80050de:	4603      	mov	r3, r0
 80050e0:	4619      	mov	r1, r3
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fb fd16 	bl	8000b14 <__addsf3>
 80050e8:	4603      	mov	r3, r0
 80050ea:	461a      	mov	r2, r3
 80050ec:	4b5e      	ldr	r3, [pc, #376]	; (8005268 <readAll+0x598>)
 80050ee:	601a      	str	r2, [r3, #0]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 80050f0:	4b5c      	ldr	r3, [pc, #368]	; (8005264 <readAll+0x594>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b5b      	ldr	r3, [pc, #364]	; (8005264 <readAll+0x594>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7fb fe12 	bl	8000d24 <__aeabi_fmul>
 8005100:	4603      	mov	r3, r0
 8005102:	461c      	mov	r4, r3
 8005104:	4b57      	ldr	r3, [pc, #348]	; (8005264 <readAll+0x594>)
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	4b56      	ldr	r3, [pc, #344]	; (8005264 <readAll+0x594>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f7fb fe08 	bl	8000d24 <__aeabi_fmul>
 8005114:	4603      	mov	r3, r0
 8005116:	4619      	mov	r1, r3
 8005118:	4620      	mov	r0, r4
 800511a:	f7fb fcfb 	bl	8000b14 <__addsf3>
 800511e:	4603      	mov	r3, r0
 8005120:	461c      	mov	r4, r3
 8005122:	4b50      	ldr	r3, [pc, #320]	; (8005264 <readAll+0x594>)
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	4b4f      	ldr	r3, [pc, #316]	; (8005264 <readAll+0x594>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f7fb fdf9 	bl	8000d24 <__aeabi_fmul>
 8005132:	4603      	mov	r3, r0
 8005134:	4619      	mov	r1, r3
 8005136:	4620      	mov	r0, r4
 8005138:	f7fb fcea 	bl	8000b10 <__aeabi_fsub>
 800513c:	4603      	mov	r3, r0
 800513e:	461c      	mov	r4, r3
 8005140:	4b48      	ldr	r3, [pc, #288]	; (8005264 <readAll+0x594>)
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	4b47      	ldr	r3, [pc, #284]	; (8005264 <readAll+0x594>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f7fb fdea 	bl	8000d24 <__aeabi_fmul>
 8005150:	4603      	mov	r3, r0
 8005152:	4619      	mov	r1, r3
 8005154:	4620      	mov	r0, r4
 8005156:	f7fb fcdb 	bl	8000b10 <__aeabi_fsub>
 800515a:	4603      	mov	r3, r0
 800515c:	461a      	mov	r2, r3
 800515e:	4b43      	ldr	r3, [pc, #268]	; (800526c <readAll+0x59c>)
 8005160:	601a      	str	r2, [r3, #0]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 8005162:	4b40      	ldr	r3, [pc, #256]	; (8005264 <readAll+0x594>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b3f      	ldr	r3, [pc, #252]	; (8005264 <readAll+0x594>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f7fb fdd9 	bl	8000d24 <__aeabi_fmul>
 8005172:	4603      	mov	r3, r0
 8005174:	461c      	mov	r4, r3
 8005176:	4b3b      	ldr	r3, [pc, #236]	; (8005264 <readAll+0x594>)
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	4b3a      	ldr	r3, [pc, #232]	; (8005264 <readAll+0x594>)
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fb fdcf 	bl	8000d24 <__aeabi_fmul>
 8005186:	4603      	mov	r3, r0
 8005188:	4619      	mov	r1, r3
 800518a:	4620      	mov	r0, r4
 800518c:	f7fb fcc2 	bl	8000b14 <__addsf3>
 8005190:	4603      	mov	r3, r0
 8005192:	4619      	mov	r1, r3
 8005194:	4618      	mov	r0, r3
 8005196:	f7fb fcbd 	bl	8000b14 <__addsf3>
 800519a:	4603      	mov	r3, r0
 800519c:	461a      	mov	r2, r3
 800519e:	4b34      	ldr	r3, [pc, #208]	; (8005270 <readAll+0x5a0>)
 80051a0:	601a      	str	r2, [r3, #0]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 80051a2:	4b30      	ldr	r3, [pc, #192]	; (8005264 <readAll+0x594>)
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <readAll+0x594>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f7fb fdb9 	bl	8000d24 <__aeabi_fmul>
 80051b2:	4603      	mov	r3, r0
 80051b4:	461c      	mov	r4, r3
 80051b6:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <readAll+0x594>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <readAll+0x594>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f7fb fdaf 	bl	8000d24 <__aeabi_fmul>
 80051c6:	4603      	mov	r3, r0
 80051c8:	4619      	mov	r1, r3
 80051ca:	4620      	mov	r0, r4
 80051cc:	f7fb fca0 	bl	8000b10 <__aeabi_fsub>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4619      	mov	r1, r3
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fb fc9d 	bl	8000b14 <__addsf3>
 80051da:	4603      	mov	r3, r0
 80051dc:	461a      	mov	r2, r3
 80051de:	4b25      	ldr	r3, [pc, #148]	; (8005274 <readAll+0x5a4>)
 80051e0:	601a      	str	r2, [r3, #0]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 80051e2:	4b20      	ldr	r3, [pc, #128]	; (8005264 <readAll+0x594>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b1f      	ldr	r3, [pc, #124]	; (8005264 <readAll+0x594>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	4610      	mov	r0, r2
 80051ee:	f7fb fd99 	bl	8000d24 <__aeabi_fmul>
 80051f2:	4603      	mov	r3, r0
 80051f4:	461c      	mov	r4, r3
 80051f6:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <readAll+0x594>)
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <readAll+0x594>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f7fb fd8f 	bl	8000d24 <__aeabi_fmul>
 8005206:	4603      	mov	r3, r0
 8005208:	4619      	mov	r1, r3
 800520a:	4620      	mov	r0, r4
 800520c:	f7fb fc80 	bl	8000b10 <__aeabi_fsub>
 8005210:	4603      	mov	r3, r0
 8005212:	461c      	mov	r4, r3
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <readAll+0x594>)
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	4b12      	ldr	r3, [pc, #72]	; (8005264 <readAll+0x594>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	e02c      	b.n	8005278 <readAll+0x5a8>
 800521e:	bf00      	nop
 8005220:	35f80991 	.word	0x35f80991
 8005224:	40092492 	.word	0x40092492
 8005228:	447a0000 	.word	0x447a0000
 800522c:	200000f0 	.word	0x200000f0
 8005230:	200000fc 	.word	0x200000fc
 8005234:	200000f8 	.word	0x200000f8
 8005238:	200000f4 	.word	0x200000f4
 800523c:	2000032c 	.word	0x2000032c
 8005240:	20000374 	.word	0x20000374
 8005244:	20000318 	.word	0x20000318
 8005248:	20000370 	.word	0x20000370
 800524c:	40668000 	.word	0x40668000
 8005250:	20000314 	.word	0x20000314
 8005254:	20000344 	.word	0x20000344
 8005258:	20000324 	.word	0x20000324
 800525c:	20000378 	.word	0x20000378
 8005260:	20000350 	.word	0x20000350
 8005264:	20000010 	.word	0x20000010
 8005268:	20000334 	.word	0x20000334
 800526c:	20000338 	.word	0x20000338
 8005270:	2000033c 	.word	0x2000033c
 8005274:	20000340 	.word	0x20000340
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f7fb fd52 	bl	8000d24 <__aeabi_fmul>
 8005280:	4603      	mov	r3, r0
 8005282:	4619      	mov	r1, r3
 8005284:	4620      	mov	r0, r4
 8005286:	f7fb fc43 	bl	8000b10 <__aeabi_fsub>
 800528a:	4603      	mov	r3, r0
 800528c:	461c      	mov	r4, r3
 800528e:	4b62      	ldr	r3, [pc, #392]	; (8005418 <readAll+0x748>)
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	4b61      	ldr	r3, [pc, #388]	; (8005418 <readAll+0x748>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	4619      	mov	r1, r3
 8005298:	4610      	mov	r0, r2
 800529a:	f7fb fd43 	bl	8000d24 <__aeabi_fmul>
 800529e:	4603      	mov	r3, r0
 80052a0:	4619      	mov	r1, r3
 80052a2:	4620      	mov	r0, r4
 80052a4:	f7fb fc36 	bl	8000b14 <__addsf3>
 80052a8:	4603      	mov	r3, r0
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b5b      	ldr	r3, [pc, #364]	; (800541c <readAll+0x74c>)
 80052ae:	601a      	str	r2, [r3, #0]

	pitch = -asinf(a32);
 80052b0:	4b5b      	ldr	r3, [pc, #364]	; (8005420 <readAll+0x750>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f004 f975 	bl	80095a4 <asinf>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80052c0:	4a58      	ldr	r2, [pc, #352]	; (8005424 <readAll+0x754>)
 80052c2:	6013      	str	r3, [r2, #0]
	roll  = atan2f(a31, a33);
 80052c4:	4b58      	ldr	r3, [pc, #352]	; (8005428 <readAll+0x758>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b54      	ldr	r3, [pc, #336]	; (800541c <readAll+0x74c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f004 f9b6 	bl	8009640 <atan2f>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b55      	ldr	r3, [pc, #340]	; (800542c <readAll+0x75c>)
 80052d8:	601a      	str	r2, [r3, #0]
	yaw   = atan2f(a12, a22);
 80052da:	4b55      	ldr	r3, [pc, #340]	; (8005430 <readAll+0x760>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b55      	ldr	r3, [pc, #340]	; (8005434 <readAll+0x764>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4619      	mov	r1, r3
 80052e4:	4610      	mov	r0, r2
 80052e6:	f004 f9ab 	bl	8009640 <atan2f>
 80052ea:	4602      	mov	r2, r0
 80052ec:	4b52      	ldr	r3, [pc, #328]	; (8005438 <readAll+0x768>)
 80052ee:	601a      	str	r2, [r3, #0]
	pitch *= 180.0f / PI;
 80052f0:	4b4c      	ldr	r3, [pc, #304]	; (8005424 <readAll+0x754>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fb f88f 	bl	8000418 <__aeabi_f2d>
 80052fa:	a345      	add	r3, pc, #276	; (adr r3, 8005410 <readAll+0x740>)
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	f7fb f8e2 	bl	80004c8 <__aeabi_dmul>
 8005304:	4603      	mov	r3, r0
 8005306:	460c      	mov	r4, r1
 8005308:	4618      	mov	r0, r3
 800530a:	4621      	mov	r1, r4
 800530c:	f7fb fbac 	bl	8000a68 <__aeabi_d2f>
 8005310:	4602      	mov	r2, r0
 8005312:	4b44      	ldr	r3, [pc, #272]	; (8005424 <readAll+0x754>)
 8005314:	601a      	str	r2, [r3, #0]
	yaw   *= 180.0f / PI;
 8005316:	4b48      	ldr	r3, [pc, #288]	; (8005438 <readAll+0x768>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb f87c 	bl	8000418 <__aeabi_f2d>
 8005320:	a33b      	add	r3, pc, #236	; (adr r3, 8005410 <readAll+0x740>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f7fb f8cf 	bl	80004c8 <__aeabi_dmul>
 800532a:	4603      	mov	r3, r0
 800532c:	460c      	mov	r4, r1
 800532e:	4618      	mov	r0, r3
 8005330:	4621      	mov	r1, r4
 8005332:	f7fb fb99 	bl	8000a68 <__aeabi_d2f>
 8005336:	4602      	mov	r2, r0
 8005338:	4b3f      	ldr	r3, [pc, #252]	; (8005438 <readAll+0x768>)
 800533a:	601a      	str	r2, [r3, #0]
	yaw   += 5.53f; // Declination
 800533c:	4b3e      	ldr	r3, [pc, #248]	; (8005438 <readAll+0x768>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	493e      	ldr	r1, [pc, #248]	; (800543c <readAll+0x76c>)
 8005342:	4618      	mov	r0, r3
 8005344:	f7fb fbe6 	bl	8000b14 <__addsf3>
 8005348:	4603      	mov	r3, r0
 800534a:	461a      	mov	r2, r3
 800534c:	4b3a      	ldr	r3, [pc, #232]	; (8005438 <readAll+0x768>)
 800534e:	601a      	str	r2, [r3, #0]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 8005350:	4b39      	ldr	r3, [pc, #228]	; (8005438 <readAll+0x768>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f04f 0100 	mov.w	r1, #0
 8005358:	4618      	mov	r0, r3
 800535a:	f7fb fe81 	bl	8001060 <__aeabi_fcmplt>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d009      	beq.n	8005378 <readAll+0x6a8>
 8005364:	4b34      	ldr	r3, [pc, #208]	; (8005438 <readAll+0x768>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4935      	ldr	r1, [pc, #212]	; (8005440 <readAll+0x770>)
 800536a:	4618      	mov	r0, r3
 800536c:	f7fb fbd2 	bl	8000b14 <__addsf3>
 8005370:	4603      	mov	r3, r0
 8005372:	461a      	mov	r2, r3
 8005374:	4b30      	ldr	r3, [pc, #192]	; (8005438 <readAll+0x768>)
 8005376:	601a      	str	r2, [r3, #0]
	roll  *= 180.0f / PI;
 8005378:	4b2c      	ldr	r3, [pc, #176]	; (800542c <readAll+0x75c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f7fb f84b 	bl	8000418 <__aeabi_f2d>
 8005382:	a323      	add	r3, pc, #140	; (adr r3, 8005410 <readAll+0x740>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f7fb f89e 	bl	80004c8 <__aeabi_dmul>
 800538c:	4603      	mov	r3, r0
 800538e:	460c      	mov	r4, r1
 8005390:	4618      	mov	r0, r3
 8005392:	4621      	mov	r1, r4
 8005394:	f7fb fb68 	bl	8000a68 <__aeabi_d2f>
 8005398:	4602      	mov	r2, r0
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <readAll+0x75c>)
 800539c:	601a      	str	r2, [r3, #0]
	lin_ax = ax + a31;
 800539e:	4b29      	ldr	r3, [pc, #164]	; (8005444 <readAll+0x774>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b21      	ldr	r3, [pc, #132]	; (8005428 <readAll+0x758>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4619      	mov	r1, r3
 80053a8:	4610      	mov	r0, r2
 80053aa:	f7fb fbb3 	bl	8000b14 <__addsf3>
 80053ae:	4603      	mov	r3, r0
 80053b0:	461a      	mov	r2, r3
 80053b2:	4b25      	ldr	r3, [pc, #148]	; (8005448 <readAll+0x778>)
 80053b4:	601a      	str	r2, [r3, #0]
	lin_ay = ay + a32;
 80053b6:	4b25      	ldr	r3, [pc, #148]	; (800544c <readAll+0x77c>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b19      	ldr	r3, [pc, #100]	; (8005420 <readAll+0x750>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f7fb fba7 	bl	8000b14 <__addsf3>
 80053c6:	4603      	mov	r3, r0
 80053c8:	461a      	mov	r2, r3
 80053ca:	4b21      	ldr	r3, [pc, #132]	; (8005450 <readAll+0x780>)
 80053cc:	601a      	str	r2, [r3, #0]
	lin_az = az - a33;
 80053ce:	4b21      	ldr	r3, [pc, #132]	; (8005454 <readAll+0x784>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b12      	ldr	r3, [pc, #72]	; (800541c <readAll+0x74c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7fb fb99 	bl	8000b10 <__aeabi_fsub>
 80053de:	4603      	mov	r3, r0
 80053e0:	461a      	mov	r2, r3
 80053e2:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <readAll+0x788>)
 80053e4:	601a      	str	r2, [r3, #0]


	DataStruct->yaw = yaw;
 80053e6:	4b14      	ldr	r3, [pc, #80]	; (8005438 <readAll+0x768>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 80053ee:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <readAll+0x754>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 80053f6:	4b0d      	ldr	r3, [pc, #52]	; (800542c <readAll+0x75c>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	629a      	str	r2, [r3, #40]	; 0x28
#if DEBUG_MPU
	printf("Roll: %f		Pitch: %f		Yaz: %f\n",roll,pitch,yaw);
#endif
	sum = 0;
 80053fe:	4b17      	ldr	r3, [pc, #92]	; (800545c <readAll+0x78c>)
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
	}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005410:	d0051a32 	.word	0xd0051a32
 8005414:	404ca2e8 	.word	0x404ca2e8
 8005418:	20000010 	.word	0x20000010
 800541c:	200002f0 	.word	0x200002f0
 8005420:	20000340 	.word	0x20000340
 8005424:	20000364 	.word	0x20000364
 8005428:	2000033c 	.word	0x2000033c
 800542c:	20000368 	.word	0x20000368
 8005430:	20000334 	.word	0x20000334
 8005434:	20000338 	.word	0x20000338
 8005438:	20000358 	.word	0x20000358
 800543c:	40b0f5c3 	.word	0x40b0f5c3
 8005440:	43b40000 	.word	0x43b40000
 8005444:	2000032c 	.word	0x2000032c
 8005448:	20000348 	.word	0x20000348
 800544c:	20000374 	.word	0x20000374
 8005450:	20000328 	.word	0x20000328
 8005454:	20000318 	.word	0x20000318
 8005458:	20000354 	.word	0x20000354
 800545c:	200000f4 	.word	0x200000f4

08005460 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  switch (Mscale)
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <getMres+0x2c>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <getMres+0x12>
 800546c:	2b01      	cmp	r3, #1
 800546e:	d004      	beq.n	800547a <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8005470:	e007      	b.n	8005482 <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 8005472:	4b07      	ldr	r3, [pc, #28]	; (8005490 <getMres+0x30>)
 8005474:	4a07      	ldr	r2, [pc, #28]	; (8005494 <getMres+0x34>)
 8005476:	601a      	str	r2, [r3, #0]
          break;
 8005478:	e003      	b.n	8005482 <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <getMres+0x30>)
 800547c:	4a06      	ldr	r2, [pc, #24]	; (8005498 <getMres+0x38>)
 800547e:	601a      	str	r2, [r3, #0]
          break;
 8005480:	bf00      	nop
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000007 	.word	0x20000007
 8005490:	2000036c 	.word	0x2000036c
 8005494:	40bfebff 	.word	0x40bfebff
 8005498:	3fbfebff 	.word	0x3fbfebff

0800549c <getGres>:

void getGres() {
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  switch (Gscale)
 80054a0:	4b11      	ldr	r3, [pc, #68]	; (80054e8 <getGres+0x4c>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d81b      	bhi.n	80054e0 <getGres+0x44>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <getGres+0x14>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054c1 	.word	0x080054c1
 80054b4:	080054c9 	.word	0x080054c9
 80054b8:	080054d1 	.word	0x080054d1
 80054bc:	080054d9 	.word	0x080054d9
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <getGres+0x50>)
 80054c2:	4a0b      	ldr	r2, [pc, #44]	; (80054f0 <getGres+0x54>)
 80054c4:	601a      	str	r2, [r3, #0]
          break;
 80054c6:	e00b      	b.n	80054e0 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 80054c8:	4b08      	ldr	r3, [pc, #32]	; (80054ec <getGres+0x50>)
 80054ca:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <getGres+0x58>)
 80054cc:	601a      	str	r2, [r3, #0]
          break;
 80054ce:	e007      	b.n	80054e0 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <getGres+0x50>)
 80054d2:	4a09      	ldr	r2, [pc, #36]	; (80054f8 <getGres+0x5c>)
 80054d4:	601a      	str	r2, [r3, #0]
          break;
 80054d6:	e003      	b.n	80054e0 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <getGres+0x50>)
 80054da:	4a08      	ldr	r2, [pc, #32]	; (80054fc <getGres+0x60>)
 80054dc:	601a      	str	r2, [r3, #0]
          break;
 80054de:	bf00      	nop
  }
}
 80054e0:	bf00      	nop
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	20000005 	.word	0x20000005
 80054ec:	2000034c 	.word	0x2000034c
 80054f0:	3bfa0000 	.word	0x3bfa0000
 80054f4:	3c7a0000 	.word	0x3c7a0000
 80054f8:	3cfa0000 	.word	0x3cfa0000
 80054fc:	3d7a0000 	.word	0x3d7a0000

08005500 <getAres>:

void getAres() {
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  switch (Ascale)
 8005504:	4b13      	ldr	r3, [pc, #76]	; (8005554 <getAres+0x54>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b03      	cmp	r3, #3
 800550a:	d81f      	bhi.n	800554c <getAres+0x4c>
 800550c:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <getAres+0x14>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	08005525 	.word	0x08005525
 8005518:	0800552f 	.word	0x0800552f
 800551c:	08005539 	.word	0x08005539
 8005520:	08005543 	.word	0x08005543
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <getAres+0x58>)
 8005526:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800552a:	601a      	str	r2, [r3, #0]
          break;
 800552c:	e00e      	b.n	800554c <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 800552e:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <getAres+0x58>)
 8005530:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8005534:	601a      	str	r2, [r3, #0]
          break;
 8005536:	e009      	b.n	800554c <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 8005538:	4b07      	ldr	r3, [pc, #28]	; (8005558 <getAres+0x58>)
 800553a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800553e:	601a      	str	r2, [r3, #0]
          break;
 8005540:	e004      	b.n	800554c <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <getAres+0x58>)
 8005544:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8005548:	601a      	str	r2, [r3, #0]
          break;
 800554a:	bf00      	nop
  }
}
 800554c:	bf00      	nop
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr
 8005554:	20000006 	.word	0x20000006
 8005558:	20000330 	.word	0x20000330

0800555c <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af04      	add	r7, sp, #16
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8005566:	2364      	movs	r3, #100	; 0x64
 8005568:	9302      	str	r3, [sp, #8]
 800556a:	2306      	movs	r3, #6
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	f107 0308 	add.w	r3, r7, #8
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	2301      	movs	r3, #1
 8005576:	223b      	movs	r2, #59	; 0x3b
 8005578:	21d0      	movs	r1, #208	; 0xd0
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fc fb1e 	bl	8001bbc <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8005580:	7a3b      	ldrb	r3, [r7, #8]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	b21a      	sxth	r2, r3
 8005586:	7a7b      	ldrb	r3, [r7, #9]
 8005588:	b21b      	sxth	r3, r3
 800558a:	4313      	orrs	r3, r2
 800558c:	b21a      	sxth	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8005592:	7abb      	ldrb	r3, [r7, #10]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	b219      	sxth	r1, r3
 8005598:	7afb      	ldrb	r3, [r7, #11]
 800559a:	b21a      	sxth	r2, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	3302      	adds	r3, #2
 80055a0:	430a      	orrs	r2, r1
 80055a2:	b212      	sxth	r2, r2
 80055a4:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 80055a6:	7b3b      	ldrb	r3, [r7, #12]
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	b219      	sxth	r1, r3
 80055ac:	7b7b      	ldrb	r3, [r7, #13]
 80055ae:	b21a      	sxth	r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	3304      	adds	r3, #4
 80055b4:	430a      	orrs	r2, r1
 80055b6:	b212      	sxth	r2, r2
 80055b8:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b088      	sub	sp, #32
 80055c6:	af04      	add	r7, sp, #16
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 80055cc:	2364      	movs	r3, #100	; 0x64
 80055ce:	9302      	str	r3, [sp, #8]
 80055d0:	2306      	movs	r3, #6
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	f107 0308 	add.w	r3, r7, #8
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	2301      	movs	r3, #1
 80055dc:	2243      	movs	r2, #67	; 0x43
 80055de:	21d0      	movs	r1, #208	; 0xd0
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fc faeb 	bl	8001bbc <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80055e6:	7a3b      	ldrb	r3, [r7, #8]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	b21a      	sxth	r2, r3
 80055ec:	7a7b      	ldrb	r3, [r7, #9]
 80055ee:	b21b      	sxth	r3, r3
 80055f0:	4313      	orrs	r3, r2
 80055f2:	b21a      	sxth	r2, r3
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 80055f8:	7abb      	ldrb	r3, [r7, #10]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	b219      	sxth	r1, r3
 80055fe:	7afb      	ldrb	r3, [r7, #11]
 8005600:	b21a      	sxth	r2, r3
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	3302      	adds	r3, #2
 8005606:	430a      	orrs	r2, r1
 8005608:	b212      	sxth	r2, r2
 800560a:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 800560c:	7b3b      	ldrb	r3, [r7, #12]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	b219      	sxth	r1, r3
 8005612:	7b7b      	ldrb	r3, [r7, #13]
 8005614:	b21a      	sxth	r2, r3
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	3304      	adds	r3, #4
 800561a:	430a      	orrs	r2, r1
 800561c:	b212      	sxth	r2, r2
 800561e:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af04      	add	r7, sp, #16
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 8005632:	2364      	movs	r3, #100	; 0x64
 8005634:	9302      	str	r3, [sp, #8]
 8005636:	2301      	movs	r3, #1
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	f107 0316 	add.w	r3, r7, #22
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	2301      	movs	r3, #1
 8005642:	2202      	movs	r2, #2
 8005644:	2118      	movs	r1, #24
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fc fab8 	bl	8001bbc <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 800564c:	7dbb      	ldrb	r3, [r7, #22]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d030      	beq.n	80056b8 <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 8005656:	2364      	movs	r3, #100	; 0x64
 8005658:	9302      	str	r3, [sp, #8]
 800565a:	2307      	movs	r3, #7
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	2301      	movs	r3, #1
 8005666:	2203      	movs	r2, #3
 8005668:	2118      	movs	r1, #24
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fc faa6 	bl	8001bbc <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 8005670:	7cbb      	ldrb	r3, [r7, #18]
 8005672:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11c      	bne.n	80056b8 <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 800567e:	7b7b      	ldrb	r3, [r7, #13]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	b21a      	sxth	r2, r3
 8005684:	7b3b      	ldrb	r3, [r7, #12]
 8005686:	b21b      	sxth	r3, r3
 8005688:	4313      	orrs	r3, r2
 800568a:	b21a      	sxth	r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	021b      	lsls	r3, r3, #8
 8005694:	b219      	sxth	r1, r3
 8005696:	7bbb      	ldrb	r3, [r7, #14]
 8005698:	b21a      	sxth	r2, r3
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	3302      	adds	r3, #2
 800569e:	430a      	orrs	r2, r1
 80056a0:	b212      	sxth	r2, r2
 80056a2:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 80056a4:	7c7b      	ldrb	r3, [r7, #17]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	b219      	sxth	r1, r3
 80056aa:	7c3b      	ldrb	r3, [r7, #16]
 80056ac:	b21a      	sxth	r2, r3
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	3304      	adds	r3, #4
 80056b2:	430a      	orrs	r2, r1
 80056b4:	b212      	sxth	r2, r2
 80056b6:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 80056b8:	bf00      	nop
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b089      	sub	sp, #36	; 0x24
 80056c4:	af04      	add	r7, sp, #16
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 80056ce:	2364      	movs	r3, #100	; 0x64
 80056d0:	9302      	str	r3, [sp, #8]
 80056d2:	2301      	movs	r3, #1
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	f107 030f 	add.w	r3, r7, #15
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	2301      	movs	r3, #1
 80056de:	220a      	movs	r2, #10
 80056e0:	2118      	movs	r1, #24
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fc f970 	bl	80019c8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80056e8:	2064      	movs	r0, #100	; 0x64
 80056ea:	f7fb fd79 	bl	80011e0 <HAL_Delay>

  writeData = 0x0F;
 80056ee:	230f      	movs	r3, #15
 80056f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 80056f2:	2364      	movs	r3, #100	; 0x64
 80056f4:	9302      	str	r3, [sp, #8]
 80056f6:	2301      	movs	r3, #1
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	f107 030f 	add.w	r3, r7, #15
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	2301      	movs	r3, #1
 8005702:	220a      	movs	r2, #10
 8005704:	2118      	movs	r1, #24
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc f95e 	bl	80019c8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 800570c:	2064      	movs	r0, #100	; 0x64
 800570e:	f7fb fd67 	bl	80011e0 <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 8005712:	2364      	movs	r3, #100	; 0x64
 8005714:	9302      	str	r3, [sp, #8]
 8005716:	2303      	movs	r3, #3
 8005718:	9301      	str	r3, [sp, #4]
 800571a:	f107 030c 	add.w	r3, r7, #12
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	2301      	movs	r3, #1
 8005722:	2210      	movs	r2, #16
 8005724:	2118      	movs	r1, #24
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fc fa48 	bl	8001bbc <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 800572c:	7b3b      	ldrb	r3, [r7, #12]
 800572e:	3b80      	subs	r3, #128	; 0x80
 8005730:	4618      	mov	r0, r3
 8005732:	f7fb faa3 	bl	8000c7c <__aeabi_i2f>
 8005736:	4603      	mov	r3, r0
 8005738:	4618      	mov	r0, r3
 800573a:	f7fa fe6d 	bl	8000418 <__aeabi_f2d>
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	4b46      	ldr	r3, [pc, #280]	; (800585c <initAK8963+0x19c>)
 8005744:	f7fa ffea 	bl	800071c <__aeabi_ddiv>
 8005748:	4603      	mov	r3, r0
 800574a:	460c      	mov	r4, r1
 800574c:	4618      	mov	r0, r3
 800574e:	4621      	mov	r1, r4
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	4b42      	ldr	r3, [pc, #264]	; (8005860 <initAK8963+0x1a0>)
 8005756:	f7fa fd01 	bl	800015c <__adddf3>
 800575a:	4603      	mov	r3, r0
 800575c:	460c      	mov	r4, r1
 800575e:	4618      	mov	r0, r3
 8005760:	4621      	mov	r1, r4
 8005762:	f7fb f981 	bl	8000a68 <__aeabi_d2f>
 8005766:	4602      	mov	r2, r0
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 800576c:	7b7b      	ldrb	r3, [r7, #13]
 800576e:	3b80      	subs	r3, #128	; 0x80
 8005770:	4618      	mov	r0, r3
 8005772:	f7fb fa83 	bl	8000c7c <__aeabi_i2f>
 8005776:	4603      	mov	r3, r0
 8005778:	4618      	mov	r0, r3
 800577a:	f7fa fe4d 	bl	8000418 <__aeabi_f2d>
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	4b36      	ldr	r3, [pc, #216]	; (800585c <initAK8963+0x19c>)
 8005784:	f7fa ffca 	bl	800071c <__aeabi_ddiv>
 8005788:	4603      	mov	r3, r0
 800578a:	460c      	mov	r4, r1
 800578c:	4618      	mov	r0, r3
 800578e:	4621      	mov	r1, r4
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	4b32      	ldr	r3, [pc, #200]	; (8005860 <initAK8963+0x1a0>)
 8005796:	f7fa fce1 	bl	800015c <__adddf3>
 800579a:	4603      	mov	r3, r0
 800579c:	460c      	mov	r4, r1
 800579e:	4619      	mov	r1, r3
 80057a0:	4622      	mov	r2, r4
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	1d1c      	adds	r4, r3, #4
 80057a6:	4608      	mov	r0, r1
 80057a8:	4611      	mov	r1, r2
 80057aa:	f7fb f95d 	bl	8000a68 <__aeabi_d2f>
 80057ae:	4603      	mov	r3, r0
 80057b0:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 80057b2:	7bbb      	ldrb	r3, [r7, #14]
 80057b4:	3b80      	subs	r3, #128	; 0x80
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fb fa60 	bl	8000c7c <__aeabi_i2f>
 80057bc:	4603      	mov	r3, r0
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fa fe2a 	bl	8000418 <__aeabi_f2d>
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	4b24      	ldr	r3, [pc, #144]	; (800585c <initAK8963+0x19c>)
 80057ca:	f7fa ffa7 	bl	800071c <__aeabi_ddiv>
 80057ce:	4603      	mov	r3, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	4618      	mov	r0, r3
 80057d4:	4621      	mov	r1, r4
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	4b21      	ldr	r3, [pc, #132]	; (8005860 <initAK8963+0x1a0>)
 80057dc:	f7fa fcbe 	bl	800015c <__adddf3>
 80057e0:	4603      	mov	r3, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4619      	mov	r1, r3
 80057e6:	4622      	mov	r2, r4
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f103 0408 	add.w	r4, r3, #8
 80057ee:	4608      	mov	r0, r1
 80057f0:	4611      	mov	r1, r2
 80057f2:	f7fb f939 	bl	8000a68 <__aeabi_d2f>
 80057f6:	4603      	mov	r3, r0
 80057f8:	6023      	str	r3, [r4, #0]
	printf("Mag cal off Y: %f\r\n", destination[1]);
	printf("Mag cal off Z: %f\r\n", destination[2]);
	printf("-------------------------\r\n");
#endif

  writeData = 0x00;
 80057fa:	2300      	movs	r3, #0
 80057fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 80057fe:	2364      	movs	r3, #100	; 0x64
 8005800:	9302      	str	r3, [sp, #8]
 8005802:	2301      	movs	r3, #1
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	f107 030f 	add.w	r3, r7, #15
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	2301      	movs	r3, #1
 800580e:	220a      	movs	r2, #10
 8005810:	2118      	movs	r1, #24
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fc f8d8 	bl	80019c8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8005818:	2064      	movs	r0, #100	; 0x64
 800581a:	f7fb fce1 	bl	80011e0 <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 800581e:	4b11      	ldr	r3, [pc, #68]	; (8005864 <initAK8963+0x1a4>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	b25a      	sxtb	r2, r3
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <initAK8963+0x1a8>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	b25b      	sxtb	r3, r3
 800582c:	4313      	orrs	r3, r2
 800582e:	b25b      	sxtb	r3, r3
 8005830:	b2db      	uxtb	r3, r3
 8005832:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 8005834:	2364      	movs	r3, #100	; 0x64
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	2301      	movs	r3, #1
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	f107 030f 	add.w	r3, r7, #15
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2301      	movs	r3, #1
 8005844:	220a      	movs	r2, #10
 8005846:	2118      	movs	r1, #24
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7fc f8bd 	bl	80019c8 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 800584e:	200a      	movs	r0, #10
 8005850:	f7fb fcc6 	bl	80011e0 <HAL_Delay>

#if(DEBUG_MPU)
  printf("MAG Init Succesful! \r\n");
#endif
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	bd90      	pop	{r4, r7, pc}
 800585c:	40700000 	.word	0x40700000
 8005860:	3ff00000 	.word	0x3ff00000
 8005864:	20000007 	.word	0x20000007
 8005868:	20000008 	.word	0x20000008

0800586c <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b095      	sub	sp, #84	; 0x54
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800587e:	2300      	movs	r3, #0
 8005880:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 8005884:	2300      	movs	r3, #0
 8005886:	63bb      	str	r3, [r7, #56]	; 0x38
 8005888:	2300      	movs	r3, #0
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800588c:	2300      	movs	r3, #0
 800588e:	643b      	str	r3, [r7, #64]	; 0x40
 8005890:	2300      	movs	r3, #0
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005894:	2300      	movs	r3, #0
 8005896:	633b      	str	r3, [r7, #48]	; 0x30
 8005898:	2300      	movs	r3, #0
 800589a:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 800589c:	4aa6      	ldr	r2, [pc, #664]	; (8005b38 <calibrateMag+0x2cc>)
 800589e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058a6:	6018      	str	r0, [r3, #0]
 80058a8:	3304      	adds	r3, #4
 80058aa:	8019      	strh	r1, [r3, #0]
 80058ac:	4aa3      	ldr	r2, [pc, #652]	; (8005b3c <calibrateMag+0x2d0>)
 80058ae:	f107 031c 	add.w	r3, r7, #28
 80058b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058b6:	6018      	str	r0, [r3, #0]
 80058b8:	3304      	adds	r3, #4
 80058ba:	8019      	strh	r1, [r3, #0]
 80058bc:	2300      	movs	r3, #0
 80058be:	82bb      	strh	r3, [r7, #20]
 80058c0:	2300      	movs	r3, #0
 80058c2:	82fb      	strh	r3, [r7, #22]
 80058c4:	2300      	movs	r3, #0
 80058c6:	833b      	strh	r3, [r7, #24]

#if (DEBUG_MPU)
  printf("Mag Calibration: Wave device in a figure eight until done!\r\n");
#endif
  HAL_Delay(4000);
 80058c8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80058cc:	f7fb fc88 	bl	80011e0 <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 80058d0:	4b9b      	ldr	r3, [pc, #620]	; (8005b40 <calibrateMag+0x2d4>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d102      	bne.n	80058de <calibrateMag+0x72>
 80058d8:	2380      	movs	r3, #128	; 0x80
 80058da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 80058de:	4b98      	ldr	r3, [pc, #608]	; (8005b40 <calibrateMag+0x2d4>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	d103      	bne.n	80058ee <calibrateMag+0x82>
 80058e6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80058ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 80058ee:	2300      	movs	r3, #0
 80058f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80058f4:	e05d      	b.n	80059b2 <calibrateMag+0x146>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 80058f6:	f107 0314 	add.w	r3, r7, #20
 80058fa:	4619      	mov	r1, r3
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff fe93 	bl	8005628 <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 8005902:	2300      	movs	r3, #0
 8005904:	64bb      	str	r3, [r7, #72]	; 0x48
 8005906:	e03e      	b.n	8005986 <calibrateMag+0x11a>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8005908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005910:	4413      	add	r3, r2
 8005912:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8005916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800591e:	440b      	add	r3, r1
 8005920:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8005924:	429a      	cmp	r2, r3
 8005926:	dd0d      	ble.n	8005944 <calibrateMag+0xd8>
 8005928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005930:	4413      	add	r3, r2
 8005932:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8005936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800593e:	440b      	add	r3, r1
 8005940:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8005944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800594c:	4413      	add	r3, r2
 800594e:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8005952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800595a:	440b      	add	r3, r1
 800595c:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8005960:	429a      	cmp	r2, r3
 8005962:	da0d      	bge.n	8005980 <calibrateMag+0x114>
 8005964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800596c:	4413      	add	r3, r2
 800596e:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8005972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800597a:	440b      	add	r3, r1
 800597c:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 8005980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005982:	3301      	adds	r3, #1
 8005984:	64bb      	str	r3, [r7, #72]	; 0x48
 8005986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005988:	2b02      	cmp	r3, #2
 800598a:	ddbd      	ble.n	8005908 <calibrateMag+0x9c>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 800598c:	4b6c      	ldr	r3, [pc, #432]	; (8005b40 <calibrateMag+0x2d4>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d102      	bne.n	800599a <calibrateMag+0x12e>
 8005994:	2087      	movs	r0, #135	; 0x87
 8005996:	f7fb fc23 	bl	80011e0 <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 800599a:	4b69      	ldr	r3, [pc, #420]	; (8005b40 <calibrateMag+0x2d4>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b06      	cmp	r3, #6
 80059a0:	d102      	bne.n	80059a8 <calibrateMag+0x13c>
 80059a2:	200c      	movs	r0, #12
 80059a4:	f7fb fc1c 	bl	80011e0 <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 80059a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059ac:	3301      	adds	r3, #1
 80059ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80059b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80059b6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d39b      	bcc.n	80058f6 <calibrateMag+0x8a>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80059be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80059c2:	461a      	mov	r2, r3
 80059c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	0fda      	lsrs	r2, r3, #31
 80059cc:	4413      	add	r3, r2
 80059ce:	105b      	asrs	r3, r3, #1
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 80059d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80059d6:	461a      	mov	r2, r3
 80059d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80059dc:	4413      	add	r3, r2
 80059de:	0fda      	lsrs	r2, r3, #31
 80059e0:	4413      	add	r3, r2
 80059e2:	105b      	asrs	r3, r3, #1
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 80059e6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80059ea:	461a      	mov	r2, r3
 80059ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80059f0:	4413      	add	r3, r2
 80059f2:	0fda      	lsrs	r2, r3, #31
 80059f4:	4413      	add	r3, r2
 80059f6:	105b      	asrs	r3, r3, #1
 80059f8:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fb f93d 	bl	8000c7c <__aeabi_i2f>
 8005a02:	4602      	mov	r2, r0
 8005a04:	4b4f      	ldr	r3, [pc, #316]	; (8005b44 <calibrateMag+0x2d8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f7fb f98a 	bl	8000d24 <__aeabi_fmul>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b4c      	ldr	r3, [pc, #304]	; (8005b48 <calibrateMag+0x2dc>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f7fb f982 	bl	8000d24 <__aeabi_fmul>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8005a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fb f926 	bl	8000c7c <__aeabi_i2f>
 8005a30:	4602      	mov	r2, r0
 8005a32:	4b44      	ldr	r3, [pc, #272]	; (8005b44 <calibrateMag+0x2d8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f7fb f973 	bl	8000d24 <__aeabi_fmul>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4618      	mov	r0, r3
 8005a42:	4b41      	ldr	r3, [pc, #260]	; (8005b48 <calibrateMag+0x2dc>)
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	1d1c      	adds	r4, r3, #4
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	f7fb f96a 	bl	8000d24 <__aeabi_fmul>
 8005a50:	4603      	mov	r3, r0
 8005a52:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8005a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fb f910 	bl	8000c7c <__aeabi_i2f>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4b39      	ldr	r3, [pc, #228]	; (8005b44 <calibrateMag+0x2d8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7fb f95d 	bl	8000d24 <__aeabi_fmul>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	4b36      	ldr	r3, [pc, #216]	; (8005b48 <calibrateMag+0x2dc>)
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f103 0408 	add.w	r4, r3, #8
 8005a78:	4611      	mov	r1, r2
 8005a7a:	f7fb f953 	bl	8000d24 <__aeabi_fmul>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8005a82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005a86:	461a      	mov	r2, r3
 8005a88:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	0fda      	lsrs	r2, r3, #31
 8005a90:	4413      	add	r3, r2
 8005a92:	105b      	asrs	r3, r3, #1
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8005a96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	0fda      	lsrs	r2, r3, #31
 8005aa4:	4413      	add	r3, r2
 8005aa6:	105b      	asrs	r3, r3, #1
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8005aaa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	0fda      	lsrs	r2, r3, #31
 8005ab8:	4413      	add	r3, r2
 8005aba:	105b      	asrs	r3, r3, #1
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8005abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	441a      	add	r2, r3
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac6:	4413      	add	r3, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fb f8d7 	bl	8000c7c <__aeabi_i2f>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	647b      	str	r3, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 8005ad2:	491e      	ldr	r1, [pc, #120]	; (8005b4c <calibrateMag+0x2e0>)
 8005ad4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005ad6:	f7fb f9d9 	bl	8000e8c <__aeabi_fdiv>
 8005ada:	4603      	mov	r3, r0
 8005adc:	647b      	str	r3, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fb f8cb 	bl	8000c7c <__aeabi_i2f>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005aec:	f7fb f9ce 	bl	8000e8c <__aeabi_fdiv>
 8005af0:	4603      	mov	r3, r0
 8005af2:	461a      	mov	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fb f8be 	bl	8000c7c <__aeabi_i2f>
 8005b00:	4602      	mov	r2, r0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	1d1c      	adds	r4, r3, #4
 8005b06:	4611      	mov	r1, r2
 8005b08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005b0a:	f7fb f9bf 	bl	8000e8c <__aeabi_fdiv>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fb f8b1 	bl	8000c7c <__aeabi_i2f>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f103 0408 	add.w	r4, r3, #8
 8005b22:	4611      	mov	r1, r2
 8005b24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005b26:	f7fb f9b1 	bl	8000e8c <__aeabi_fdiv>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	6023      	str	r3, [r4, #0]

#if (DEBUG_MPU)
    printf("Mag Calibration done!\r\n");
#endif
}
 8005b2e:	bf00      	nop
 8005b30:	3754      	adds	r7, #84	; 0x54
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd90      	pop	{r4, r7, pc}
 8005b36:	bf00      	nop
 8005b38:	0800ab04 	.word	0x0800ab04
 8005b3c:	0800ab0c 	.word	0x0800ab0c
 8005b40:	20000008 	.word	0x20000008
 8005b44:	2000036c 	.word	0x2000036c
 8005b48:	200000b4 	.word	0x200000b4
 8005b4c:	40400000 	.word	0x40400000

08005b50 <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af04      	add	r7, sp, #16
 8005b56:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8005b5c:	2364      	movs	r3, #100	; 0x64
 8005b5e:	9302      	str	r3, [sp, #8]
 8005b60:	2301      	movs	r3, #1
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	f107 030e 	add.w	r3, r7, #14
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	226b      	movs	r2, #107	; 0x6b
 8005b6e:	21d0      	movs	r1, #208	; 0xd0
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fb ff29 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005b76:	2064      	movs	r0, #100	; 0x64
 8005b78:	f7fb fb32 	bl	80011e0 <HAL_Delay>

	writeData = 0x01;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8005b80:	2364      	movs	r3, #100	; 0x64
 8005b82:	9302      	str	r3, [sp, #8]
 8005b84:	2301      	movs	r3, #1
 8005b86:	9301      	str	r3, [sp, #4]
 8005b88:	f107 030e 	add.w	r3, r7, #14
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	2301      	movs	r3, #1
 8005b90:	226b      	movs	r2, #107	; 0x6b
 8005b92:	21d0      	movs	r1, #208	; 0xd0
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fb ff17 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005b9a:	2064      	movs	r0, #100	; 0x64
 8005b9c:	f7fb fb20 	bl	80011e0 <HAL_Delay>

	writeData = 0x03;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8005ba4:	2364      	movs	r3, #100	; 0x64
 8005ba6:	9302      	str	r3, [sp, #8]
 8005ba8:	2301      	movs	r3, #1
 8005baa:	9301      	str	r3, [sp, #4]
 8005bac:	f107 030e 	add.w	r3, r7, #14
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	221a      	movs	r2, #26
 8005bb6:	21d0      	movs	r1, #208	; 0xd0
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fb ff05 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005bbe:	2064      	movs	r0, #100	; 0x64
 8005bc0:	f7fb fb0e 	bl	80011e0 <HAL_Delay>

	writeData = 0x04;
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8005bc8:	2364      	movs	r3, #100	; 0x64
 8005bca:	9302      	str	r3, [sp, #8]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	f107 030e 	add.w	r3, r7, #14
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	2219      	movs	r2, #25
 8005bda:	21d0      	movs	r1, #208	; 0xd0
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7fb fef3 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005be2:	2064      	movs	r0, #100	; 0x64
 8005be4:	f7fb fafc 	bl	80011e0 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8005be8:	2364      	movs	r3, #100	; 0x64
 8005bea:	9302      	str	r3, [sp, #8]
 8005bec:	2301      	movs	r3, #1
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	f107 030f 	add.w	r3, r7, #15
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	221b      	movs	r2, #27
 8005bfa:	21d0      	movs	r1, #208	; 0xd0
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7fb ffdd 	bl	8001bbc <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	f023 0303 	bic.w	r3, r3, #3
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	f023 0318 	bic.w	r3, r3, #24
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 8005c16:	4b3d      	ldr	r3, [pc, #244]	; (8005d0c <initMPU9250+0x1bc>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	b25a      	sxtb	r2, r3
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	b25b      	sxtb	r3, r3
 8005c22:	4313      	orrs	r3, r2
 8005c24:	b25b      	sxtb	r3, r3
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8005c2a:	2064      	movs	r0, #100	; 0x64
 8005c2c:	f7fb fad8 	bl	80011e0 <HAL_Delay>

	writeData = readData;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8005c34:	2364      	movs	r3, #100	; 0x64
 8005c36:	9302      	str	r3, [sp, #8]
 8005c38:	2301      	movs	r3, #1
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	f107 030e 	add.w	r3, r7, #14
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	2301      	movs	r3, #1
 8005c44:	221b      	movs	r2, #27
 8005c46:	21d0      	movs	r1, #208	; 0xd0
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fb febd 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005c4e:	2064      	movs	r0, #100	; 0x64
 8005c50:	f7fb fac6 	bl	80011e0 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8005c54:	2364      	movs	r3, #100	; 0x64
 8005c56:	9302      	str	r3, [sp, #8]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	f107 030f 	add.w	r3, r7, #15
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	2301      	movs	r3, #1
 8005c64:	221c      	movs	r2, #28
 8005c66:	21d0      	movs	r1, #208	; 0xd0
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fb ffa7 	bl	8001bbc <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	f023 0318 	bic.w	r3, r3, #24
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8005c78:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <initMPU9250+0x1c0>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	b25a      	sxtb	r2, r3
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	b25b      	sxtb	r3, r3
 8005c84:	4313      	orrs	r3, r2
 8005c86:	b25b      	sxtb	r3, r3
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8005c90:	2364      	movs	r3, #100	; 0x64
 8005c92:	9302      	str	r3, [sp, #8]
 8005c94:	2301      	movs	r3, #1
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	f107 030e 	add.w	r3, r7, #14
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	221c      	movs	r2, #28
 8005ca2:	21d0      	movs	r1, #208	; 0xd0
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7fb fe8f 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005caa:	2064      	movs	r0, #100	; 0x64
 8005cac:	f7fb fa98 	bl	80011e0 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8005cb0:	2364      	movs	r3, #100	; 0x64
 8005cb2:	9302      	str	r3, [sp, #8]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	f107 030f 	add.w	r3, r7, #15
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	221d      	movs	r2, #29
 8005cc2:	21d0      	movs	r1, #208	; 0xd0
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7fb ff79 	bl	8001bbc <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	f023 030f 	bic.w	r3, r3, #15
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	f043 0303 	orr.w	r3, r3, #3
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8005ce2:	2364      	movs	r3, #100	; 0x64
 8005ce4:	9302      	str	r3, [sp, #8]
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	f107 030e 	add.w	r3, r7, #14
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	221d      	movs	r2, #29
 8005cf4:	21d0      	movs	r1, #208	; 0xd0
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fb fe66 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005cfc:	2064      	movs	r0, #100	; 0x64
 8005cfe:	f7fb fa6f 	bl	80011e0 <HAL_Delay>

#if(DEBUG_MPU)
	printf("MPU Init Succesful! \r\n");
#endif
}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000005 	.word	0x20000005
 8005d10:	20000006 	.word	0x20000006

08005d14 <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8005d14:	b5b0      	push	{r4, r5, r7, lr}
 8005d16:	b09e      	sub	sp, #120	; 0x78
 8005d18:	af04      	add	r7, sp, #16
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8005d20:	2300      	movs	r3, #0
 8005d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d24:	2300      	movs	r3, #0
 8005d26:	643b      	str	r3, [r7, #64]	; 0x40
 8005d28:	2300      	movs	r3, #0
 8005d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d30:	2300      	movs	r3, #0
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
 8005d34:	2300      	movs	r3, #0
 8005d36:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 8005d3e:	2364      	movs	r3, #100	; 0x64
 8005d40:	9302      	str	r3, [sp, #8]
 8005d42:	2301      	movs	r3, #1
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	226b      	movs	r2, #107	; 0x6b
 8005d50:	21d0      	movs	r1, #208	; 0xd0
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f7fb fe38 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005d58:	2064      	movs	r0, #100	; 0x64
 8005d5a:	f7fb fa41 	bl	80011e0 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8005d64:	2364      	movs	r3, #100	; 0x64
 8005d66:	9302      	str	r3, [sp, #8]
 8005d68:	2301      	movs	r3, #1
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	2301      	movs	r3, #1
 8005d74:	226b      	movs	r2, #107	; 0x6b
 8005d76:	21d0      	movs	r1, #208	; 0xd0
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f7fb fe25 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8005d84:	2364      	movs	r3, #100	; 0x64
 8005d86:	9302      	str	r3, [sp, #8]
 8005d88:	2301      	movs	r3, #1
 8005d8a:	9301      	str	r3, [sp, #4]
 8005d8c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	2301      	movs	r3, #1
 8005d94:	226c      	movs	r2, #108	; 0x6c
 8005d96:	21d0      	movs	r1, #208	; 0xd0
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7fb fe15 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8005d9e:	20c8      	movs	r0, #200	; 0xc8
 8005da0:	f7fb fa1e 	bl	80011e0 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8005daa:	2364      	movs	r3, #100	; 0x64
 8005dac:	9302      	str	r3, [sp, #8]
 8005dae:	2301      	movs	r3, #1
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	2301      	movs	r3, #1
 8005dba:	2238      	movs	r2, #56	; 0x38
 8005dbc:	21d0      	movs	r1, #208	; 0xd0
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f7fb fe02 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8005dca:	2364      	movs	r3, #100	; 0x64
 8005dcc:	9302      	str	r3, [sp, #8]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	2223      	movs	r2, #35	; 0x23
 8005ddc:	21d0      	movs	r1, #208	; 0xd0
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f7fb fdf2 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8005dea:	2364      	movs	r3, #100	; 0x64
 8005dec:	9302      	str	r3, [sp, #8]
 8005dee:	2301      	movs	r3, #1
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	226b      	movs	r2, #107	; 0x6b
 8005dfc:	21d0      	movs	r1, #208	; 0xd0
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7fb fde2 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8005e0a:	2364      	movs	r3, #100	; 0x64
 8005e0c:	9302      	str	r3, [sp, #8]
 8005e0e:	2301      	movs	r3, #1
 8005e10:	9301      	str	r3, [sp, #4]
 8005e12:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	2224      	movs	r2, #36	; 0x24
 8005e1c:	21d0      	movs	r1, #208	; 0xd0
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f7fb fdd2 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8005e2a:	2364      	movs	r3, #100	; 0x64
 8005e2c:	9302      	str	r3, [sp, #8]
 8005e2e:	2301      	movs	r3, #1
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2301      	movs	r3, #1
 8005e3a:	226a      	movs	r2, #106	; 0x6a
 8005e3c:	21d0      	movs	r1, #208	; 0xd0
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7fb fdc2 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8005e44:	230c      	movs	r3, #12
 8005e46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8005e4a:	2364      	movs	r3, #100	; 0x64
 8005e4c:	9302      	str	r3, [sp, #8]
 8005e4e:	2301      	movs	r3, #1
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	2301      	movs	r3, #1
 8005e5a:	226a      	movs	r2, #106	; 0x6a
 8005e5c:	21d0      	movs	r1, #208	; 0xd0
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7fb fdb2 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8005e64:	200f      	movs	r0, #15
 8005e66:	f7fb f9bb 	bl	80011e0 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8005e70:	2364      	movs	r3, #100	; 0x64
 8005e72:	9302      	str	r3, [sp, #8]
 8005e74:	2301      	movs	r3, #1
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	2301      	movs	r3, #1
 8005e80:	221a      	movs	r2, #26
 8005e82:	21d0      	movs	r1, #208	; 0xd0
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f7fb fd9f 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8005e90:	2364      	movs	r3, #100	; 0x64
 8005e92:	9302      	str	r3, [sp, #8]
 8005e94:	2301      	movs	r3, #1
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	2219      	movs	r2, #25
 8005ea2:	21d0      	movs	r1, #208	; 0xd0
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7fb fd8f 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8005eb0:	2364      	movs	r3, #100	; 0x64
 8005eb2:	9302      	str	r3, [sp, #8]
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	221b      	movs	r2, #27
 8005ec2:	21d0      	movs	r1, #208	; 0xd0
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7fb fd7f 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8005ed0:	2364      	movs	r3, #100	; 0x64
 8005ed2:	9302      	str	r3, [sp, #8]
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	9301      	str	r3, [sp, #4]
 8005ed8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	2301      	movs	r3, #1
 8005ee0:	221c      	movs	r2, #28
 8005ee2:	21d0      	movs	r1, #208	; 0xd0
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f7fb fd6f 	bl	80019c8 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8005eea:	2383      	movs	r3, #131	; 0x83
 8005eec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8005ef0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ef4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8005ef8:	2340      	movs	r3, #64	; 0x40
 8005efa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8005efe:	2364      	movs	r3, #100	; 0x64
 8005f00:	9302      	str	r3, [sp, #8]
 8005f02:	2301      	movs	r3, #1
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	226a      	movs	r2, #106	; 0x6a
 8005f10:	21d0      	movs	r1, #208	; 0xd0
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7fb fd58 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8005f18:	2378      	movs	r3, #120	; 0x78
 8005f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8005f1e:	2364      	movs	r3, #100	; 0x64
 8005f20:	9302      	str	r3, [sp, #8]
 8005f22:	2301      	movs	r3, #1
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	2223      	movs	r2, #35	; 0x23
 8005f30:	21d0      	movs	r1, #208	; 0xd0
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7fb fd48 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8005f38:	2028      	movs	r0, #40	; 0x28
 8005f3a:	f7fb f951 	bl	80011e0 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8005f44:	2364      	movs	r3, #100	; 0x64
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	2301      	movs	r3, #1
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	2301      	movs	r3, #1
 8005f54:	2223      	movs	r2, #35	; 0x23
 8005f56:	21d0      	movs	r1, #208	; 0xd0
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f7fb fd35 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8005f5e:	2364      	movs	r3, #100	; 0x64
 8005f60:	9302      	str	r3, [sp, #8]
 8005f62:	2302      	movs	r3, #2
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	2272      	movs	r2, #114	; 0x72
 8005f70:	21d0      	movs	r1, #208	; 0xd0
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7fb fe22 	bl	8001bbc <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8005f78:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	b21a      	sxth	r2, r3
 8005f80:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005f84:	b21b      	sxth	r3, r3
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b21b      	sxth	r3, r3
 8005f8a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8005f8e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005f92:	4a5a      	ldr	r2, [pc, #360]	; (80060fc <calibrateMPU9250+0x3e8>)
 8005f94:	fba2 2303 	umull	r2, r3, r2, r3
 8005f98:	08db      	lsrs	r3, r3, #3
 8005f9a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005fa4:	e077      	b.n	8006096 <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	833b      	strh	r3, [r7, #24]
 8005faa:	2300      	movs	r3, #0
 8005fac:	837b      	strh	r3, [r7, #26]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	83bb      	strh	r3, [r7, #28]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	823b      	strh	r3, [r7, #16]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	827b      	strh	r3, [r7, #18]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8005fbe:	2364      	movs	r3, #100	; 0x64
 8005fc0:	9302      	str	r3, [sp, #8]
 8005fc2:	230c      	movs	r3, #12
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	2301      	movs	r3, #1
 8005fce:	2274      	movs	r2, #116	; 0x74
 8005fd0:	21d0      	movs	r1, #208	; 0xd0
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7fb fdf2 	bl	8001bbc <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8005fd8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	b21a      	sxth	r2, r3
 8005fe0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005fe4:	b21b      	sxth	r3, r3
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	b21b      	sxth	r3, r3
 8005fea:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8005fec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	b21a      	sxth	r2, r3
 8005ff4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005ff8:	b21b      	sxth	r3, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8006000:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	b21a      	sxth	r2, r3
 8006008:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800600c:	b21b      	sxth	r3, r3
 800600e:	4313      	orrs	r3, r2
 8006010:	b21b      	sxth	r3, r3
 8006012:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8006014:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	b21a      	sxth	r2, r3
 800601c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006020:	b21b      	sxth	r3, r3
 8006022:	4313      	orrs	r3, r2
 8006024:	b21b      	sxth	r3, r3
 8006026:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8006028:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	b21a      	sxth	r2, r3
 8006030:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8006034:	b21b      	sxth	r3, r3
 8006036:	4313      	orrs	r3, r2
 8006038:	b21b      	sxth	r3, r3
 800603a:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 800603c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	b21a      	sxth	r2, r3
 8006044:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006048:	b21b      	sxth	r3, r3
 800604a:	4313      	orrs	r3, r2
 800604c:	b21b      	sxth	r3, r3
 800604e:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006056:	4413      	add	r3, r2
 8006058:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006060:	4413      	add	r3, r2
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800606a:	4413      	add	r3, r2
 800606c:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006074:	4413      	add	r3, r2
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8006078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800607e:	4413      	add	r3, r2
 8006080:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8006082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006084:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006088:	4413      	add	r3, r2
 800608a:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 800608c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006090:	3301      	adds	r3, #1
 8006092:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006096:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800609a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800609e:	429a      	cmp	r2, r3
 80060a0:	d381      	bcc.n	8005fa6 <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 80060a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80060a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80060ac:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 80060ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80060b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 80060ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80060c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80060c4:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 80060c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80060cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 80060d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80060d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80060dc:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 80060de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80060e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80060e8:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dd07      	ble.n	8006100 <calibrateMPU9250+0x3ec>
 80060f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060fa:	e006      	b.n	800610a <calibrateMPU9250+0x3f6>
 80060fc:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8006100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006102:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006106:	4413      	add	r3, r2
 8006108:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800610a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610c:	425b      	negs	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	da00      	bge.n	8006114 <calibrateMPU9250+0x400>
 8006112:	3303      	adds	r3, #3
 8006114:	109b      	asrs	r3, r3, #2
 8006116:	121b      	asrs	r3, r3, #8
 8006118:	b2db      	uxtb	r3, r3
 800611a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800611e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006120:	425b      	negs	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	da00      	bge.n	8006128 <calibrateMPU9250+0x414>
 8006126:	3303      	adds	r3, #3
 8006128:	109b      	asrs	r3, r3, #2
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8006130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006132:	425b      	negs	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	da00      	bge.n	800613a <calibrateMPU9250+0x426>
 8006138:	3303      	adds	r3, #3
 800613a:	109b      	asrs	r3, r3, #2
 800613c:	121b      	asrs	r3, r3, #8
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8006144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006146:	425b      	negs	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	da00      	bge.n	800614e <calibrateMPU9250+0x43a>
 800614c:	3303      	adds	r3, #3
 800614e:	109b      	asrs	r3, r3, #2
 8006150:	b2db      	uxtb	r3, r3
 8006152:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8006156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006158:	425b      	negs	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	da00      	bge.n	8006160 <calibrateMPU9250+0x44c>
 800615e:	3303      	adds	r3, #3
 8006160:	109b      	asrs	r3, r3, #2
 8006162:	121b      	asrs	r3, r3, #8
 8006164:	b2db      	uxtb	r3, r3
 8006166:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 800616a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616c:	425b      	negs	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	da00      	bge.n	8006174 <calibrateMPU9250+0x460>
 8006172:	3303      	adds	r3, #3
 8006174:	109b      	asrs	r3, r3, #2
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 800617c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8006184:	2364      	movs	r3, #100	; 0x64
 8006186:	9302      	str	r3, [sp, #8]
 8006188:	2301      	movs	r3, #1
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	2301      	movs	r3, #1
 8006194:	2213      	movs	r2, #19
 8006196:	21d0      	movs	r1, #208	; 0xd0
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7fb fc15 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 800619e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80061a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80061a6:	2364      	movs	r3, #100	; 0x64
 80061a8:	9302      	str	r3, [sp, #8]
 80061aa:	2301      	movs	r3, #1
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	2301      	movs	r3, #1
 80061b6:	2214      	movs	r2, #20
 80061b8:	21d0      	movs	r1, #208	; 0xd0
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7fb fc04 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 80061c0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80061c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80061c8:	2364      	movs	r3, #100	; 0x64
 80061ca:	9302      	str	r3, [sp, #8]
 80061cc:	2301      	movs	r3, #1
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	2301      	movs	r3, #1
 80061d8:	2215      	movs	r2, #21
 80061da:	21d0      	movs	r1, #208	; 0xd0
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f7fb fbf3 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 80061e2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80061e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80061ea:	2364      	movs	r3, #100	; 0x64
 80061ec:	9302      	str	r3, [sp, #8]
 80061ee:	2301      	movs	r3, #1
 80061f0:	9301      	str	r3, [sp, #4]
 80061f2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2301      	movs	r3, #1
 80061fa:	2216      	movs	r2, #22
 80061fc:	21d0      	movs	r1, #208	; 0xd0
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7fb fbe2 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8006204:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800620c:	2364      	movs	r3, #100	; 0x64
 800620e:	9302      	str	r3, [sp, #8]
 8006210:	2301      	movs	r3, #1
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	2301      	movs	r3, #1
 800621c:	2217      	movs	r2, #23
 800621e:	21d0      	movs	r1, #208	; 0xd0
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7fb fbd1 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8006226:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800622a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800622e:	2364      	movs	r3, #100	; 0x64
 8006230:	9302      	str	r3, [sp, #8]
 8006232:	2301      	movs	r3, #1
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	2301      	movs	r3, #1
 800623e:	2218      	movs	r2, #24
 8006240:	21d0      	movs	r1, #208	; 0xd0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7fb fbc0 	bl	80019c8 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8006248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624a:	4618      	mov	r0, r3
 800624c:	f7fa fd16 	bl	8000c7c <__aeabi_i2f>
 8006250:	4604      	mov	r4, r0
 8006252:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006256:	4618      	mov	r0, r3
 8006258:	f7fa fd0c 	bl	8000c74 <__aeabi_ui2f>
 800625c:	4603      	mov	r3, r0
 800625e:	4619      	mov	r1, r3
 8006260:	4620      	mov	r0, r4
 8006262:	f7fa fe13 	bl	8000e8c <__aeabi_fdiv>
 8006266:	4603      	mov	r3, r0
 8006268:	461a      	mov	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 800626e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006270:	4618      	mov	r0, r3
 8006272:	f7fa fd03 	bl	8000c7c <__aeabi_i2f>
 8006276:	4605      	mov	r5, r0
 8006278:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800627c:	4618      	mov	r0, r3
 800627e:	f7fa fcf9 	bl	8000c74 <__aeabi_ui2f>
 8006282:	4602      	mov	r2, r0
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	1d1c      	adds	r4, r3, #4
 8006288:	4611      	mov	r1, r2
 800628a:	4628      	mov	r0, r5
 800628c:	f7fa fdfe 	bl	8000e8c <__aeabi_fdiv>
 8006290:	4603      	mov	r3, r0
 8006292:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8006294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006296:	4618      	mov	r0, r3
 8006298:	f7fa fcf0 	bl	8000c7c <__aeabi_i2f>
 800629c:	4605      	mov	r5, r0
 800629e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fa fce6 	bl	8000c74 <__aeabi_ui2f>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f103 0408 	add.w	r4, r3, #8
 80062b0:	4611      	mov	r1, r2
 80062b2:	4628      	mov	r0, r5
 80062b4:	f7fa fdea 	bl	8000e8c <__aeabi_fdiv>
 80062b8:	4603      	mov	r3, r0
 80062ba:	6023      	str	r3, [r4, #0]

		printf("-------------------------\r\n");
#endif

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 80062bc:	2300      	movs	r3, #0
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
 80062c0:	2300      	movs	r3, #0
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c4:	2300      	movs	r3, #0
 80062c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 80062c8:	2364      	movs	r3, #100	; 0x64
 80062ca:	9302      	str	r3, [sp, #8]
 80062cc:	2302      	movs	r3, #2
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	2301      	movs	r3, #1
 80062d8:	2277      	movs	r2, #119	; 0x77
 80062da:	21d0      	movs	r1, #208	; 0xd0
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7fb fc6d 	bl	8001bbc <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80062e2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80062ec:	4313      	orrs	r3, r2
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 80062f0:	2364      	movs	r3, #100	; 0x64
 80062f2:	9302      	str	r3, [sp, #8]
 80062f4:	2302      	movs	r3, #2
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	2301      	movs	r3, #1
 8006300:	227a      	movs	r2, #122	; 0x7a
 8006302:	21d0      	movs	r1, #208	; 0xd0
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7fb fc59 	bl	8001bbc <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800630a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8006314:	4313      	orrs	r3, r2
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8006318:	2364      	movs	r3, #100	; 0x64
 800631a:	9302      	str	r3, [sp, #8]
 800631c:	2302      	movs	r3, #2
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	2301      	movs	r3, #1
 8006328:	227d      	movs	r2, #125	; 0x7d
 800632a:	21d0      	movs	r1, #208	; 0xd0
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7fb fc45 	bl	8001bbc <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8006332:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800633c:	4313      	orrs	r3, r2
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8006340:	2301      	movs	r3, #1
 8006342:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8006344:	2300      	movs	r3, #0
 8006346:	f887 3020 	strb.w	r3, [r7, #32]
 800634a:	2300      	movs	r3, #0
 800634c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8006350:	2300      	movs	r3, #0
 8006352:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for(ii = 0; ii < 3; ii++) {
 8006356:	2300      	movs	r3, #0
 8006358:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800635c:	e019      	b.n	8006392 <calibrateMPU9250+0x67e>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 800635e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8006368:	4413      	add	r3, r2
 800636a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800636e:	461a      	mov	r2, r3
 8006370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006372:	4013      	ands	r3, r2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <calibrateMPU9250+0x674>
 8006378:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800637c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8006380:	4413      	add	r3, r2
 8006382:	2201      	movs	r2, #1
 8006384:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 8006388:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800638c:	3301      	adds	r3, #1
 800638e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006392:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006396:	2b02      	cmp	r3, #2
 8006398:	d9e1      	bls.n	800635e <calibrateMPU9250+0x64a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800639a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da00      	bge.n	80063a4 <calibrateMPU9250+0x690>
 80063a2:	3307      	adds	r3, #7
 80063a4:	10db      	asrs	r3, r3, #3
 80063a6:	425b      	negs	r3, r3
 80063a8:	4413      	add	r3, r2
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 80063ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	da00      	bge.n	80063b6 <calibrateMPU9250+0x6a2>
 80063b4:	3307      	adds	r3, #7
 80063b6:	10db      	asrs	r3, r3, #3
 80063b8:	425b      	negs	r3, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 80063be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	da00      	bge.n	80063c8 <calibrateMPU9250+0x6b4>
 80063c6:	3307      	adds	r3, #7
 80063c8:	10db      	asrs	r3, r3, #3
 80063ca:	425b      	negs	r3, r3
 80063cc:	4413      	add	r3, r2
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	121b      	asrs	r3, r3, #8
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80063e2:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80063e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	121b      	asrs	r3, r3, #8
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8006404:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8006408:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800640c:	4313      	orrs	r3, r2
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	121b      	asrs	r3, r3, #8
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8006426:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800642a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800642e:	4313      	orrs	r3, r2
 8006430:	b2db      	uxtb	r3, r3
 8006432:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8006436:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800643a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800643e:	2364      	movs	r3, #100	; 0x64
 8006440:	9302      	str	r3, [sp, #8]
 8006442:	2301      	movs	r3, #1
 8006444:	9301      	str	r3, [sp, #4]
 8006446:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	2301      	movs	r3, #1
 800644e:	2277      	movs	r2, #119	; 0x77
 8006450:	21d0      	movs	r1, #208	; 0xd0
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7fb fab8 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8006458:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800645c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8006460:	2364      	movs	r3, #100	; 0x64
 8006462:	9302      	str	r3, [sp, #8]
 8006464:	2301      	movs	r3, #1
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	2301      	movs	r3, #1
 8006470:	2278      	movs	r2, #120	; 0x78
 8006472:	21d0      	movs	r1, #208	; 0xd0
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7fb faa7 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 800647a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800647e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8006482:	2364      	movs	r3, #100	; 0x64
 8006484:	9302      	str	r3, [sp, #8]
 8006486:	2301      	movs	r3, #1
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	2301      	movs	r3, #1
 8006492:	227a      	movs	r2, #122	; 0x7a
 8006494:	21d0      	movs	r1, #208	; 0xd0
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7fb fa96 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 800649c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80064a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80064a4:	2364      	movs	r3, #100	; 0x64
 80064a6:	9302      	str	r3, [sp, #8]
 80064a8:	2301      	movs	r3, #1
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	2301      	movs	r3, #1
 80064b4:	227b      	movs	r2, #123	; 0x7b
 80064b6:	21d0      	movs	r1, #208	; 0xd0
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f7fb fa85 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 80064be:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80064c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80064c6:	2364      	movs	r3, #100	; 0x64
 80064c8:	9302      	str	r3, [sp, #8]
 80064ca:	2301      	movs	r3, #1
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2301      	movs	r3, #1
 80064d6:	227d      	movs	r2, #125	; 0x7d
 80064d8:	21d0      	movs	r1, #208	; 0xd0
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7fb fa74 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 80064e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80064e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80064e8:	2364      	movs	r3, #100	; 0x64
 80064ea:	9302      	str	r3, [sp, #8]
 80064ec:	2301      	movs	r3, #1
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	2301      	movs	r3, #1
 80064f8:	227e      	movs	r2, #126	; 0x7e
 80064fa:	21d0      	movs	r1, #208	; 0xd0
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7fb fa63 	bl	80019c8 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	4618      	mov	r0, r3
 8006506:	f7fa fbb9 	bl	8000c7c <__aeabi_i2f>
 800650a:	4604      	mov	r4, r0
 800650c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006510:	4618      	mov	r0, r3
 8006512:	f7fa fbaf 	bl	8000c74 <__aeabi_ui2f>
 8006516:	4603      	mov	r3, r0
 8006518:	4619      	mov	r1, r3
 800651a:	4620      	mov	r0, r4
 800651c:	f7fa fcb6 	bl	8000e8c <__aeabi_fdiv>
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	601a      	str	r2, [r3, #0]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 8006528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652a:	4618      	mov	r0, r3
 800652c:	f7fa fba6 	bl	8000c7c <__aeabi_i2f>
 8006530:	4605      	mov	r5, r0
 8006532:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006536:	4618      	mov	r0, r3
 8006538:	f7fa fb9c 	bl	8000c74 <__aeabi_ui2f>
 800653c:	4602      	mov	r2, r0
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	1d1c      	adds	r4, r3, #4
 8006542:	4611      	mov	r1, r2
 8006544:	4628      	mov	r0, r5
 8006546:	f7fa fca1 	bl	8000e8c <__aeabi_fdiv>
 800654a:	4603      	mov	r3, r0
 800654c:	6023      	str	r3, [r4, #0]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	4618      	mov	r0, r3
 8006552:	f7fa fb93 	bl	8000c7c <__aeabi_i2f>
 8006556:	4605      	mov	r5, r0
 8006558:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800655c:	4618      	mov	r0, r3
 800655e:	f7fa fb89 	bl	8000c74 <__aeabi_ui2f>
 8006562:	4602      	mov	r2, r0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f103 0408 	add.w	r4, r3, #8
 800656a:	4611      	mov	r1, r2
 800656c:	4628      	mov	r0, r5
 800656e:	f7fa fc8d 	bl	8000e8c <__aeabi_fdiv>
 8006572:	4603      	mov	r3, r0
 8006574:	6023      	str	r3, [r4, #0]
		printf("Accel bias Y: %f\r\n", accelBiasY);
		printf("Accel bias Z: %f\r\n", accelBiasZ);

		printf("-------------------------\r\n");
#endif
}
 8006576:	bf00      	nop
 8006578:	3768      	adds	r7, #104	; 0x68
 800657a:	46bd      	mov	sp, r7
 800657c:	bdb0      	pop	{r4, r5, r7, pc}
 800657e:	bf00      	nop

08006580 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 8006580:	b5b0      	push	{r4, r5, r7, lr}
 8006582:	b0a8      	sub	sp, #160	; 0xa0
 8006584:	af04      	add	r7, sp, #16
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 800658a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8006594:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	605a      	str	r2, [r3, #4]
 800659e:	609a      	str	r2, [r3, #8]
 80065a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	605a      	str	r2, [r3, #4]
 80065aa:	609a      	str	r2, [r3, #8]
 80065ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	605a      	str	r2, [r3, #4]
 80065b6:	609a      	str	r2, [r3, #8]
 80065b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	605a      	str	r2, [r3, #4]
 80065c2:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 80065ca:	2300      	movs	r3, #0
 80065cc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 80065d0:	2364      	movs	r3, #100	; 0x64
 80065d2:	9302      	str	r3, [sp, #8]
 80065d4:	2301      	movs	r3, #1
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	2301      	movs	r3, #1
 80065e0:	2219      	movs	r2, #25
 80065e2:	21d0      	movs	r1, #208	; 0xd0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7fb f9ef 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 80065ea:	2302      	movs	r3, #2
 80065ec:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80065f0:	2364      	movs	r3, #100	; 0x64
 80065f2:	9302      	str	r3, [sp, #8]
 80065f4:	2301      	movs	r3, #1
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	2301      	movs	r3, #1
 8006600:	221a      	movs	r2, #26
 8006602:	21d0      	movs	r1, #208	; 0xd0
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7fb f9df 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 800660a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8006616:	2364      	movs	r3, #100	; 0x64
 8006618:	9302      	str	r3, [sp, #8]
 800661a:	2301      	movs	r3, #1
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	2301      	movs	r3, #1
 8006626:	221b      	movs	r2, #27
 8006628:	21d0      	movs	r1, #208	; 0xd0
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fb f9cc 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8006630:	2302      	movs	r3, #2
 8006632:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8006636:	2364      	movs	r3, #100	; 0x64
 8006638:	9302      	str	r3, [sp, #8]
 800663a:	2301      	movs	r3, #1
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2301      	movs	r3, #1
 8006646:	221d      	movs	r2, #29
 8006648:	21d0      	movs	r1, #208	; 0xd0
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fb f9bc 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8006650:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	b2db      	uxtb	r3, r3
 8006658:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 800665c:	2364      	movs	r3, #100	; 0x64
 800665e:	9302      	str	r3, [sp, #8]
 8006660:	2301      	movs	r3, #1
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	2301      	movs	r3, #1
 800666c:	221c      	movs	r2, #28
 800666e:	21d0      	movs	r1, #208	; 0xd0
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7fb f9a9 	bl	80019c8 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8006676:	2300      	movs	r3, #0
 8006678:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800667c:	e066      	b.n	800674c <MPU9250SelfTest+0x1cc>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 800667e:	2364      	movs	r3, #100	; 0x64
 8006680:	9302      	str	r3, [sp, #8]
 8006682:	2306      	movs	r3, #6
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	2301      	movs	r3, #1
 800668e:	223b      	movs	r2, #59	; 0x3b
 8006690:	21d0      	movs	r1, #208	; 0xd0
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fb fa92 	bl	8001bbc <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8006698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669a:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800669e:	0212      	lsls	r2, r2, #8
 80066a0:	b211      	sxth	r1, r2
 80066a2:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80066a6:	b212      	sxth	r2, r2
 80066a8:	430a      	orrs	r2, r1
 80066aa:	b212      	sxth	r2, r2
 80066ac:	4413      	add	r3, r2
 80066ae:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80066b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066b2:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80066b6:	0212      	lsls	r2, r2, #8
 80066b8:	b211      	sxth	r1, r2
 80066ba:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80066be:	b212      	sxth	r2, r2
 80066c0:	430a      	orrs	r2, r1
 80066c2:	b212      	sxth	r2, r2
 80066c4:	4413      	add	r3, r2
 80066c6:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80066c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066ca:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80066ce:	0212      	lsls	r2, r2, #8
 80066d0:	b211      	sxth	r1, r2
 80066d2:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80066d6:	b212      	sxth	r2, r2
 80066d8:	430a      	orrs	r2, r1
 80066da:	b212      	sxth	r2, r2
 80066dc:	4413      	add	r3, r2
 80066de:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80066e0:	2364      	movs	r3, #100	; 0x64
 80066e2:	9302      	str	r3, [sp, #8]
 80066e4:	2306      	movs	r3, #6
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	2301      	movs	r3, #1
 80066f0:	2243      	movs	r2, #67	; 0x43
 80066f2:	21d0      	movs	r1, #208	; 0xd0
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fb fa61 	bl	8001bbc <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80066fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066fc:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8006700:	0212      	lsls	r2, r2, #8
 8006702:	b211      	sxth	r1, r2
 8006704:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8006708:	b212      	sxth	r2, r2
 800670a:	430a      	orrs	r2, r1
 800670c:	b212      	sxth	r2, r2
 800670e:	4413      	add	r3, r2
 8006710:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8006712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006714:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8006718:	0212      	lsls	r2, r2, #8
 800671a:	b211      	sxth	r1, r2
 800671c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8006720:	b212      	sxth	r2, r2
 8006722:	430a      	orrs	r2, r1
 8006724:	b212      	sxth	r2, r2
 8006726:	4413      	add	r3, r2
 8006728:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800672a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800672c:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8006730:	0212      	lsls	r2, r2, #8
 8006732:	b211      	sxth	r1, r2
 8006734:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8006738:	b212      	sxth	r2, r2
 800673a:	430a      	orrs	r2, r1
 800673c:	b212      	sxth	r2, r2
 800673e:	4413      	add	r3, r2
 8006740:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 8006742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006746:	3301      	adds	r3, #1
 8006748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800674c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006750:	2bc7      	cmp	r3, #199	; 0xc7
 8006752:	dd94      	ble.n	800667e <MPU9250SelfTest+0xfe>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 8006754:	2300      	movs	r3, #0
 8006756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800675a:	e030      	b.n	80067be <MPU9250SelfTest+0x23e>
		aAvg[ii] /= 200;
 800675c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006766:	4413      	add	r3, r2
 8006768:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800676c:	4a61      	ldr	r2, [pc, #388]	; (80068f4 <MPU9250SelfTest+0x374>)
 800676e:	fb82 1203 	smull	r1, r2, r2, r3
 8006772:	1192      	asrs	r2, r2, #6
 8006774:	17db      	asrs	r3, r3, #31
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8006782:	440b      	add	r3, r1
 8006784:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 8006788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006792:	4413      	add	r3, r2
 8006794:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8006798:	4a56      	ldr	r2, [pc, #344]	; (80068f4 <MPU9250SelfTest+0x374>)
 800679a:	fb82 1203 	smull	r1, r2, r2, r3
 800679e:	1192      	asrs	r2, r2, #6
 80067a0:	17db      	asrs	r3, r3, #31
 80067a2:	1ad2      	subs	r2, r2, r3
 80067a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80067ae:	440b      	add	r3, r1
 80067b0:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 80067b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067b8:	3301      	adds	r3, #1
 80067ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	ddca      	ble.n	800675c <MPU9250SelfTest+0x1dc>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 80067c6:	23e0      	movs	r3, #224	; 0xe0
 80067c8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 80067cc:	2364      	movs	r3, #100	; 0x64
 80067ce:	9302      	str	r3, [sp, #8]
 80067d0:	2301      	movs	r3, #1
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	2301      	movs	r3, #1
 80067dc:	221c      	movs	r2, #28
 80067de:	21d0      	movs	r1, #208	; 0xd0
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fb f8f1 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 80067e6:	23e0      	movs	r3, #224	; 0xe0
 80067e8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80067ec:	2364      	movs	r3, #100	; 0x64
 80067ee:	9302      	str	r3, [sp, #8]
 80067f0:	2301      	movs	r3, #1
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	2301      	movs	r3, #1
 80067fc:	221b      	movs	r2, #27
 80067fe:	21d0      	movs	r1, #208	; 0xd0
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7fb f8e1 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8006806:	2019      	movs	r0, #25
 8006808:	f7fa fcea 	bl	80011e0 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 800680c:	2300      	movs	r3, #0
 800680e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006812:	e066      	b.n	80068e2 <MPU9250SelfTest+0x362>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8006814:	2364      	movs	r3, #100	; 0x64
 8006816:	9302      	str	r3, [sp, #8]
 8006818:	2306      	movs	r3, #6
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	2301      	movs	r3, #1
 8006824:	223b      	movs	r2, #59	; 0x3b
 8006826:	21d0      	movs	r1, #208	; 0xd0
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7fb f9c7 	bl	8001bbc <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800682e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006830:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8006834:	0212      	lsls	r2, r2, #8
 8006836:	b211      	sxth	r1, r2
 8006838:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800683c:	b212      	sxth	r2, r2
 800683e:	430a      	orrs	r2, r1
 8006840:	b212      	sxth	r2, r2
 8006842:	4413      	add	r3, r2
 8006844:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8006846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006848:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800684c:	0212      	lsls	r2, r2, #8
 800684e:	b211      	sxth	r1, r2
 8006850:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8006854:	b212      	sxth	r2, r2
 8006856:	430a      	orrs	r2, r1
 8006858:	b212      	sxth	r2, r2
 800685a:	4413      	add	r3, r2
 800685c:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8006864:	0212      	lsls	r2, r2, #8
 8006866:	b211      	sxth	r1, r2
 8006868:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800686c:	b212      	sxth	r2, r2
 800686e:	430a      	orrs	r2, r1
 8006870:	b212      	sxth	r2, r2
 8006872:	4413      	add	r3, r2
 8006874:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8006876:	2364      	movs	r3, #100	; 0x64
 8006878:	9302      	str	r3, [sp, #8]
 800687a:	2306      	movs	r3, #6
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	2301      	movs	r3, #1
 8006886:	2243      	movs	r2, #67	; 0x43
 8006888:	21d0      	movs	r1, #208	; 0xd0
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fb f996 	bl	8001bbc <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8006896:	0212      	lsls	r2, r2, #8
 8006898:	b211      	sxth	r1, r2
 800689a:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800689e:	b212      	sxth	r2, r2
 80068a0:	430a      	orrs	r2, r1
 80068a2:	b212      	sxth	r2, r2
 80068a4:	4413      	add	r3, r2
 80068a6:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80068a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068aa:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80068ae:	0212      	lsls	r2, r2, #8
 80068b0:	b211      	sxth	r1, r2
 80068b2:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80068b6:	b212      	sxth	r2, r2
 80068b8:	430a      	orrs	r2, r1
 80068ba:	b212      	sxth	r2, r2
 80068bc:	4413      	add	r3, r2
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80068c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c2:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80068c6:	0212      	lsls	r2, r2, #8
 80068c8:	b211      	sxth	r1, r2
 80068ca:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80068ce:	b212      	sxth	r2, r2
 80068d0:	430a      	orrs	r2, r1
 80068d2:	b212      	sxth	r2, r2
 80068d4:	4413      	add	r3, r2
 80068d6:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 80068d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068dc:	3301      	adds	r3, #1
 80068de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068e6:	2bc7      	cmp	r3, #199	; 0xc7
 80068e8:	dd94      	ble.n	8006814 <MPU9250SelfTest+0x294>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 80068ea:	2300      	movs	r3, #0
 80068ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068f0:	e033      	b.n	800695a <MPU9250SelfTest+0x3da>
 80068f2:	bf00      	nop
 80068f4:	51eb851f 	.word	0x51eb851f
		aSTAvg[ii] /= 200;
 80068f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006902:	4413      	add	r3, r2
 8006904:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006908:	4ad7      	ldr	r2, [pc, #860]	; (8006c68 <MPU9250SelfTest+0x6e8>)
 800690a:	fb82 1203 	smull	r1, r2, r2, r3
 800690e:	1192      	asrs	r2, r2, #6
 8006910:	17db      	asrs	r3, r3, #31
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800691e:	440b      	add	r3, r1
 8006920:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 8006924:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800692e:	4413      	add	r3, r2
 8006930:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8006934:	4acc      	ldr	r2, [pc, #816]	; (8006c68 <MPU9250SelfTest+0x6e8>)
 8006936:	fb82 1203 	smull	r1, r2, r2, r3
 800693a:	1192      	asrs	r2, r2, #6
 800693c:	17db      	asrs	r3, r3, #31
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800694a:	440b      	add	r3, r1
 800694c:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 8006950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006954:	3301      	adds	r3, #1
 8006956:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800695a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800695e:	2b02      	cmp	r3, #2
 8006960:	ddca      	ble.n	80068f8 <MPU9250SelfTest+0x378>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8006962:	2300      	movs	r3, #0
 8006964:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8006968:	2364      	movs	r3, #100	; 0x64
 800696a:	9302      	str	r3, [sp, #8]
 800696c:	2301      	movs	r3, #1
 800696e:	9301      	str	r3, [sp, #4]
 8006970:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	2301      	movs	r3, #1
 8006978:	221c      	movs	r2, #28
 800697a:	21d0      	movs	r1, #208	; 0xd0
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7fb f823 	bl	80019c8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8006982:	2300      	movs	r3, #0
 8006984:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8006988:	2364      	movs	r3, #100	; 0x64
 800698a:	9302      	str	r3, [sp, #8]
 800698c:	2301      	movs	r3, #1
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	2301      	movs	r3, #1
 8006998:	221b      	movs	r2, #27
 800699a:	21d0      	movs	r1, #208	; 0xd0
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7fb f813 	bl	80019c8 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80069a2:	2019      	movs	r0, #25
 80069a4:	f7fa fc1c 	bl	80011e0 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 80069a8:	2364      	movs	r3, #100	; 0x64
 80069aa:	9302      	str	r3, [sp, #8]
 80069ac:	2301      	movs	r3, #1
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	2301      	movs	r3, #1
 80069b8:	220d      	movs	r2, #13
 80069ba:	21d0      	movs	r1, #208	; 0xd0
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fb f8fd 	bl	8001bbc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 80069c2:	2364      	movs	r3, #100	; 0x64
 80069c4:	9302      	str	r3, [sp, #8]
 80069c6:	2301      	movs	r3, #1
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80069ce:	3301      	adds	r3, #1
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	2301      	movs	r3, #1
 80069d4:	220e      	movs	r2, #14
 80069d6:	21d0      	movs	r1, #208	; 0xd0
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fb f8ef 	bl	8001bbc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 80069de:	2364      	movs	r3, #100	; 0x64
 80069e0:	9302      	str	r3, [sp, #8]
 80069e2:	2301      	movs	r3, #1
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80069ea:	3302      	adds	r3, #2
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	2301      	movs	r3, #1
 80069f0:	220f      	movs	r2, #15
 80069f2:	21d0      	movs	r1, #208	; 0xd0
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7fb f8e1 	bl	8001bbc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 80069fa:	2364      	movs	r3, #100	; 0x64
 80069fc:	9302      	str	r3, [sp, #8]
 80069fe:	2301      	movs	r3, #1
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a06:	3303      	adds	r3, #3
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	21d0      	movs	r1, #208	; 0xd0
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fb f8d3 	bl	8001bbc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8006a16:	2364      	movs	r3, #100	; 0x64
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a22:	3304      	adds	r3, #4
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	2301      	movs	r3, #1
 8006a28:	2201      	movs	r2, #1
 8006a2a:	21d0      	movs	r1, #208	; 0xd0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fb f8c5 	bl	8001bbc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8006a32:	2364      	movs	r3, #100	; 0x64
 8006a34:	9302      	str	r3, [sp, #8]
 8006a36:	2301      	movs	r3, #1
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a3e:	3305      	adds	r3, #5
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2301      	movs	r3, #1
 8006a44:	2202      	movs	r2, #2
 8006a46:	21d0      	movs	r1, #208	; 0xd0
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7fb f8b7 	bl	8001bbc <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8006a4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006a52:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fa f90e 	bl	8000c7c <__aeabi_i2f>
 8006a60:	4603      	mov	r3, r0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7f9 fcd8 	bl	8000418 <__aeabi_f2d>
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fa f8ff 	bl	8000c74 <__aeabi_ui2f>
 8006a76:	4603      	mov	r3, r0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7f9 fccd 	bl	8000418 <__aeabi_f2d>
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	4b7a      	ldr	r3, [pc, #488]	; (8006c6c <MPU9250SelfTest+0x6ec>)
 8006a84:	f7f9 fb68 	bl	8000158 <__aeabi_dsub>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	a174      	add	r1, pc, #464	; (adr r1, 8006c60 <MPU9250SelfTest+0x6e0>)
 8006a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a92:	f002 fc2b 	bl	80092ec <pow>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	f7f9 fd13 	bl	80004c8 <__aeabi_dmul>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	f7f9 ffdd 	bl	8000a68 <__aeabi_d2f>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	623b      	str	r3, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8006ab2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006ab6:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fa f8dc 	bl	8000c7c <__aeabi_i2f>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7f9 fca6 	bl	8000418 <__aeabi_f2d>
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fa f8cd 	bl	8000c74 <__aeabi_ui2f>
 8006ada:	4603      	mov	r3, r0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7f9 fc9b 	bl	8000418 <__aeabi_f2d>
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	4b61      	ldr	r3, [pc, #388]	; (8006c6c <MPU9250SelfTest+0x6ec>)
 8006ae8:	f7f9 fb36 	bl	8000158 <__aeabi_dsub>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	a15b      	add	r1, pc, #364	; (adr r1, 8006c60 <MPU9250SelfTest+0x6e0>)
 8006af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006af6:	f002 fbf9 	bl	80092ec <pow>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	4620      	mov	r0, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	f7f9 fce1 	bl	80004c8 <__aeabi_dmul>
 8006b06:	4603      	mov	r3, r0
 8006b08:	460c      	mov	r4, r1
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	f7f9 ffab 	bl	8000a68 <__aeabi_d2f>
 8006b12:	4603      	mov	r3, r0
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8006b16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b1a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fa f8aa 	bl	8000c7c <__aeabi_i2f>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7f9 fc74 	bl	8000418 <__aeabi_f2d>
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fa f89b 	bl	8000c74 <__aeabi_ui2f>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7f9 fc69 	bl	8000418 <__aeabi_f2d>
 8006b46:	f04f 0200 	mov.w	r2, #0
 8006b4a:	4b48      	ldr	r3, [pc, #288]	; (8006c6c <MPU9250SelfTest+0x6ec>)
 8006b4c:	f7f9 fb04 	bl	8000158 <__aeabi_dsub>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	a142      	add	r1, pc, #264	; (adr r1, 8006c60 <MPU9250SelfTest+0x6e0>)
 8006b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b5a:	f002 fbc7 	bl	80092ec <pow>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	f7f9 fcaf 	bl	80004c8 <__aeabi_dmul>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	4621      	mov	r1, r4
 8006b72:	f7f9 ff79 	bl	8000a68 <__aeabi_d2f>
 8006b76:	4603      	mov	r3, r0
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8006b7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b7e:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fa f878 	bl	8000c7c <__aeabi_i2f>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7f9 fc42 	bl	8000418 <__aeabi_f2d>
 8006b94:	4604      	mov	r4, r0
 8006b96:	460d      	mov	r5, r1
 8006b98:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fa f869 	bl	8000c74 <__aeabi_ui2f>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7f9 fc37 	bl	8000418 <__aeabi_f2d>
 8006baa:	f04f 0200 	mov.w	r2, #0
 8006bae:	4b2f      	ldr	r3, [pc, #188]	; (8006c6c <MPU9250SelfTest+0x6ec>)
 8006bb0:	f7f9 fad2 	bl	8000158 <__aeabi_dsub>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	a129      	add	r1, pc, #164	; (adr r1, 8006c60 <MPU9250SelfTest+0x6e0>)
 8006bba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bbe:	f002 fb95 	bl	80092ec <pow>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f7f9 fc7d 	bl	80004c8 <__aeabi_dmul>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	f7f9 ff47 	bl	8000a68 <__aeabi_d2f>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8006bde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006be2:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fa f846 	bl	8000c7c <__aeabi_i2f>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7f9 fc10 	bl	8000418 <__aeabi_f2d>
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fa f837 	bl	8000c74 <__aeabi_ui2f>
 8006c06:	4603      	mov	r3, r0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7f9 fc05 	bl	8000418 <__aeabi_f2d>
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <MPU9250SelfTest+0x6ec>)
 8006c14:	f7f9 faa0 	bl	8000158 <__aeabi_dsub>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	a110      	add	r1, pc, #64	; (adr r1, 8006c60 <MPU9250SelfTest+0x6e0>)
 8006c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c22:	f002 fb63 	bl	80092ec <pow>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7f9 fc4b 	bl	80004c8 <__aeabi_dmul>
 8006c32:	4603      	mov	r3, r0
 8006c34:	460c      	mov	r4, r1
 8006c36:	4618      	mov	r0, r3
 8006c38:	4621      	mov	r1, r4
 8006c3a:	f7f9 ff15 	bl	8000a68 <__aeabi_d2f>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8006c42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006c46:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fa f814 	bl	8000c7c <__aeabi_i2f>
 8006c54:	4603      	mov	r3, r0
 8006c56:	4618      	mov	r0, r3
 8006c58:	e00a      	b.n	8006c70 <MPU9250SelfTest+0x6f0>
 8006c5a:	bf00      	nop
 8006c5c:	f3af 8000 	nop.w
 8006c60:	c28f5c29 	.word	0xc28f5c29
 8006c64:	3ff028f5 	.word	0x3ff028f5
 8006c68:	51eb851f 	.word	0x51eb851f
 8006c6c:	3ff00000 	.word	0x3ff00000
 8006c70:	f7f9 fbd2 	bl	8000418 <__aeabi_f2d>
 8006c74:	4604      	mov	r4, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7f9 fff9 	bl	8000c74 <__aeabi_ui2f>
 8006c82:	4603      	mov	r3, r0
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7f9 fbc7 	bl	8000418 <__aeabi_f2d>
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	4ba8      	ldr	r3, [pc, #672]	; (8006f30 <MPU9250SelfTest+0x9b0>)
 8006c90:	f7f9 fa62 	bl	8000158 <__aeabi_dsub>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	a1a3      	add	r1, pc, #652	; (adr r1, 8006f28 <MPU9250SelfTest+0x9a8>)
 8006c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c9e:	f002 fb25 	bl	80092ec <pow>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 fc0d 	bl	80004c8 <__aeabi_dmul>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	f7f9 fed7 	bl	8000a68 <__aeabi_d2f>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cc2:	e092      	b.n	8006dea <MPU9250SelfTest+0x86a>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8006cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006ccc:	4413      	add	r3, r2
 8006cce:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8006cd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8006cda:	440b      	add	r3, r1
 8006cdc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7f9 ffca 	bl	8000c7c <__aeabi_i2f>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7f9 fb94 	bl	8000418 <__aeabi_f2d>
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	4b8f      	ldr	r3, [pc, #572]	; (8006f34 <MPU9250SelfTest+0x9b4>)
 8006cf6:	f7f9 fbe7 	bl	80004c8 <__aeabi_dmul>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	4625      	mov	r5, r4
 8006d00:	461c      	mov	r4, r3
 8006d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7f9 fb81 	bl	8000418 <__aeabi_f2d>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	f7f9 fcfd 	bl	800071c <__aeabi_ddiv>
 8006d22:	4603      	mov	r3, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	4618      	mov	r0, r3
 8006d28:	4621      	mov	r1, r4
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	4b81      	ldr	r3, [pc, #516]	; (8006f34 <MPU9250SelfTest+0x9b4>)
 8006d30:	f7f9 fa12 	bl	8000158 <__aeabi_dsub>
 8006d34:	4603      	mov	r3, r0
 8006d36:	460c      	mov	r4, r1
 8006d38:	4618      	mov	r0, r3
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	f7f9 fe74 	bl	8000a28 <__aeabi_d2uiz>
 8006d40:	4602      	mov	r2, r0
 8006d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8006d4a:	440b      	add	r3, r1
 8006d4c:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8006d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006d58:	4413      	add	r3, r2
 8006d5a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8006d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8006d66:	440b      	add	r3, r1
 8006d68:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7f9 ff84 	bl	8000c7c <__aeabi_i2f>
 8006d74:	4603      	mov	r3, r0
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7f9 fb4e 	bl	8000418 <__aeabi_f2d>
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	4b6c      	ldr	r3, [pc, #432]	; (8006f34 <MPU9250SelfTest+0x9b4>)
 8006d82:	f7f9 fba1 	bl	80004c8 <__aeabi_dmul>
 8006d86:	4603      	mov	r3, r0
 8006d88:	460c      	mov	r4, r1
 8006d8a:	4625      	mov	r5, r4
 8006d8c:	461c      	mov	r4, r3
 8006d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d90:	3303      	adds	r3, #3
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006d98:	4413      	add	r3, r2
 8006d9a:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7f9 fb3a 	bl	8000418 <__aeabi_f2d>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4620      	mov	r0, r4
 8006daa:	4629      	mov	r1, r5
 8006dac:	f7f9 fcb6 	bl	800071c <__aeabi_ddiv>
 8006db0:	4603      	mov	r3, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	4618      	mov	r0, r3
 8006db6:	4621      	mov	r1, r4
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	4b5d      	ldr	r3, [pc, #372]	; (8006f34 <MPU9250SelfTest+0x9b4>)
 8006dbe:	f7f9 f9cb 	bl	8000158 <__aeabi_dsub>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4622      	mov	r2, r4
 8006dca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dcc:	1cdc      	adds	r4, r3, #3
 8006dce:	4608      	mov	r0, r1
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	f7f9 fe29 	bl	8000a28 <__aeabi_d2uiz>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	00a3      	lsls	r3, r4, #2
 8006dda:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8006dde:	440b      	add	r3, r1
 8006de0:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 8006de4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006de6:	3301      	adds	r3, #1
 8006de8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	f77f af69 	ble.w	8006cc4 <MPU9250SelfTest+0x744>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");
#endif

   for (int i = 0; i < 3; i++) {
 8006df2:	2300      	movs	r3, #0
 8006df4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006df6:	e08c      	b.n	8006f12 <MPU9250SelfTest+0x992>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8006df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006e00:	4413      	add	r3, r2
 8006e02:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8006e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8006e0e:	440b      	add	r3, r1
 8006e10:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7f9 ff30 	bl	8000c7c <__aeabi_i2f>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7f9 fafa 	bl	8000418 <__aeabi_f2d>
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	4b42      	ldr	r3, [pc, #264]	; (8006f34 <MPU9250SelfTest+0x9b4>)
 8006e2a:	f7f9 fb4d 	bl	80004c8 <__aeabi_dmul>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	460c      	mov	r4, r1
 8006e32:	4625      	mov	r5, r4
 8006e34:	461c      	mov	r4, r3
 8006e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006e3e:	4413      	add	r3, r2
 8006e40:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7f9 fae7 	bl	8000418 <__aeabi_f2d>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4620      	mov	r0, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	f7f9 fc63 	bl	800071c <__aeabi_ddiv>
 8006e56:	4603      	mov	r3, r0
 8006e58:	460c      	mov	r4, r1
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	4b34      	ldr	r3, [pc, #208]	; (8006f34 <MPU9250SelfTest+0x9b4>)
 8006e64:	f7f9 f978 	bl	8000158 <__aeabi_dsub>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	4621      	mov	r1, r4
 8006e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	18d4      	adds	r4, r2, r3
 8006e78:	f7f9 fdf6 	bl	8000a68 <__aeabi_d2f>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8006e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006e88:	4413      	add	r3, r2
 8006e8a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8006e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8006e96:	440b      	add	r3, r1
 8006e98:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7f9 feec 	bl	8000c7c <__aeabi_i2f>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7f9 fab6 	bl	8000418 <__aeabi_f2d>
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	4b20      	ldr	r3, [pc, #128]	; (8006f34 <MPU9250SelfTest+0x9b4>)
 8006eb2:	f7f9 fb09 	bl	80004c8 <__aeabi_dmul>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	4625      	mov	r5, r4
 8006ebc:	461c      	mov	r4, r3
 8006ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec0:	3303      	adds	r3, #3
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006ec8:	4413      	add	r3, r2
 8006eca:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7f9 faa2 	bl	8000418 <__aeabi_f2d>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4620      	mov	r0, r4
 8006eda:	4629      	mov	r1, r5
 8006edc:	f7f9 fc1e 	bl	800071c <__aeabi_ddiv>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	4b11      	ldr	r3, [pc, #68]	; (8006f34 <MPU9250SelfTest+0x9b4>)
 8006eee:	f7f9 f933 	bl	8000158 <__aeabi_dsub>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	4621      	mov	r1, r4
 8006efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006efc:	3303      	adds	r3, #3
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	18d4      	adds	r4, r2, r3
 8006f04:	f7f9 fdb0 	bl	8000a68 <__aeabi_d2f>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f0e:	3301      	adds	r3, #1
 8006f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	f77f af6f 	ble.w	8006df8 <MPU9250SelfTest+0x878>
   }
}
 8006f1a:	bf00      	nop
 8006f1c:	3790      	adds	r7, #144	; 0x90
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bdb0      	pop	{r4, r5, r7, pc}
 8006f22:	bf00      	nop
 8006f24:	f3af 8000 	nop.w
 8006f28:	c28f5c29 	.word	0xc28f5c29
 8006f2c:	3ff028f5 	.word	0x3ff028f5
 8006f30:	3ff00000 	.word	0x3ff00000
 8006f34:	40590000 	.word	0x40590000

08006f38 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 8006f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3a:	b0ad      	sub	sp, #180	; 0xb4
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8006f46:	4b8a      	ldr	r3, [pc, #552]	; (8007170 <QuaternionUpdate+0x238>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f4e:	4b88      	ldr	r3, [pc, #544]	; (8007170 <QuaternionUpdate+0x238>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f56:	4b86      	ldr	r3, [pc, #536]	; (8007170 <QuaternionUpdate+0x238>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f5e:	4b84      	ldr	r3, [pc, #528]	; (8007170 <QuaternionUpdate+0x238>)
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8006f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7f9 fdd1 	bl	8000b14 <__addsf3>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float _2q2 = 2.0f * q2;
 8006f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7f9 fdc8 	bl	8000b14 <__addsf3>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float _2q3 = 2.0f * q3;
 8006f8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7f9 fdbf 	bl	8000b14 <__addsf3>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float _2q4 = 2.0f * q4;
 8006f9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7f9 fdb6 	bl	8000b14 <__addsf3>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 8006fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7f9 fdad 	bl	8000b14 <__addsf3>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006fc2:	f7f9 feaf 	bl	8000d24 <__aeabi_fmul>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 8006fcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7f9 fd9e 	bl	8000b14 <__addsf3>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	4619      	mov	r1, r3
 8006fdc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006fe0:	f7f9 fea0 	bl	8000d24 <__aeabi_fmul>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 8006fea:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006fee:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006ff2:	f7f9 fe97 	bl	8000d24 <__aeabi_fmul>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 8006ffc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007000:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007004:	f7f9 fe8e 	bl	8000d24 <__aeabi_fmul>
 8007008:	4603      	mov	r3, r0
 800700a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 800700e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007012:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007016:	f7f9 fe85 	bl	8000d24 <__aeabi_fmul>
 800701a:	4603      	mov	r3, r0
 800701c:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1q4 = q1 * q4;
 800701e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007022:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007026:	f7f9 fe7d 	bl	8000d24 <__aeabi_fmul>
 800702a:	4603      	mov	r3, r0
 800702c:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2q2 = q2 * q2;
 800702e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007032:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007036:	f7f9 fe75 	bl	8000d24 <__aeabi_fmul>
 800703a:	4603      	mov	r3, r0
 800703c:	677b      	str	r3, [r7, #116]	; 0x74
    float q2q3 = q2 * q3;
 800703e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007042:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007046:	f7f9 fe6d 	bl	8000d24 <__aeabi_fmul>
 800704a:	4603      	mov	r3, r0
 800704c:	673b      	str	r3, [r7, #112]	; 0x70
    float q2q4 = q2 * q4;
 800704e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007052:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007056:	f7f9 fe65 	bl	8000d24 <__aeabi_fmul>
 800705a:	4603      	mov	r3, r0
 800705c:	66fb      	str	r3, [r7, #108]	; 0x6c
    float q3q3 = q3 * q3;
 800705e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007062:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007066:	f7f9 fe5d 	bl	8000d24 <__aeabi_fmul>
 800706a:	4603      	mov	r3, r0
 800706c:	66bb      	str	r3, [r7, #104]	; 0x68
    float q3q4 = q3 * q4;
 800706e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007072:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007076:	f7f9 fe55 	bl	8000d24 <__aeabi_fmul>
 800707a:	4603      	mov	r3, r0
 800707c:	667b      	str	r3, [r7, #100]	; 0x64
    float q4q4 = q4 * q4;
 800707e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007082:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007086:	f7f9 fe4d 	bl	8000d24 <__aeabi_fmul>
 800708a:	4603      	mov	r3, r0
 800708c:	663b      	str	r3, [r7, #96]	; 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 800708e:	68f9      	ldr	r1, [r7, #12]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7f9 fe47 	bl	8000d24 <__aeabi_fmul>
 8007096:	4603      	mov	r3, r0
 8007098:	461c      	mov	r4, r3
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	68b8      	ldr	r0, [r7, #8]
 800709e:	f7f9 fe41 	bl	8000d24 <__aeabi_fmul>
 80070a2:	4603      	mov	r3, r0
 80070a4:	4619      	mov	r1, r3
 80070a6:	4620      	mov	r0, r4
 80070a8:	f7f9 fd34 	bl	8000b14 <__addsf3>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461c      	mov	r4, r3
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7f9 fe36 	bl	8000d24 <__aeabi_fmul>
 80070b8:	4603      	mov	r3, r0
 80070ba:	4619      	mov	r1, r3
 80070bc:	4620      	mov	r0, r4
 80070be:	f7f9 fd29 	bl	8000b14 <__addsf3>
 80070c2:	4603      	mov	r3, r0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f002 fabd 	bl	8009644 <sqrtf>
 80070ca:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 80070cc:	f04f 0100 	mov.w	r1, #0
 80070d0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80070d2:	f7f9 ffbb 	bl	800104c <__aeabi_fcmpeq>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 87e3 	bne.w	80080a4 <QuaternionUpdate+0x116c>
    norm = 1.0f/norm;
 80070de:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80070e0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80070e4:	f7f9 fed2 	bl	8000e8c <__aeabi_fdiv>
 80070e8:	4603      	mov	r3, r0
 80070ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    ax *= norm;
 80070ec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7f9 fe18 	bl	8000d24 <__aeabi_fmul>
 80070f4:	4603      	mov	r3, r0
 80070f6:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 80070f8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80070fa:	68b8      	ldr	r0, [r7, #8]
 80070fc:	f7f9 fe12 	bl	8000d24 <__aeabi_fmul>
 8007100:	4603      	mov	r3, r0
 8007102:	60bb      	str	r3, [r7, #8]
    az *= norm;
 8007104:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7f9 fe0c 	bl	8000d24 <__aeabi_fmul>
 800710c:	4603      	mov	r3, r0
 800710e:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8007110:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007114:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007118:	f7f9 fe04 	bl	8000d24 <__aeabi_fmul>
 800711c:	4603      	mov	r3, r0
 800711e:	461c      	mov	r4, r3
 8007120:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007124:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8007128:	f7f9 fdfc 	bl	8000d24 <__aeabi_fmul>
 800712c:	4603      	mov	r3, r0
 800712e:	4619      	mov	r1, r3
 8007130:	4620      	mov	r0, r4
 8007132:	f7f9 fcef 	bl	8000b14 <__addsf3>
 8007136:	4603      	mov	r3, r0
 8007138:	461c      	mov	r4, r3
 800713a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800713e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007142:	f7f9 fdef 	bl	8000d24 <__aeabi_fmul>
 8007146:	4603      	mov	r3, r0
 8007148:	4619      	mov	r1, r3
 800714a:	4620      	mov	r0, r4
 800714c:	f7f9 fce2 	bl	8000b14 <__addsf3>
 8007150:	4603      	mov	r3, r0
 8007152:	4618      	mov	r0, r3
 8007154:	f002 fa76 	bl	8009644 <sqrtf>
 8007158:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 800715a:	f04f 0100 	mov.w	r1, #0
 800715e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007160:	f7f9 ff74 	bl	800104c <__aeabi_fcmpeq>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	f040 879e 	bne.w	80080a8 <QuaternionUpdate+0x1170>
 800716c:	e002      	b.n	8007174 <QuaternionUpdate+0x23c>
 800716e:	bf00      	nop
 8007170:	20000010 	.word	0x20000010
    norm = 1.0f/norm;
 8007174:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007176:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800717a:	f7f9 fe87 	bl	8000e8c <__aeabi_fdiv>
 800717e:	4603      	mov	r3, r0
 8007180:	65fb      	str	r3, [r7, #92]	; 0x5c
    mx *= norm;
 8007182:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007184:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007188:	f7f9 fdcc 	bl	8000d24 <__aeabi_fmul>
 800718c:	4603      	mov	r3, r0
 800718e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    my *= norm;
 8007192:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007194:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8007198:	f7f9 fdc4 	bl	8000d24 <__aeabi_fmul>
 800719c:	4603      	mov	r3, r0
 800719e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mz *= norm;
 80071a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80071a4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80071a8:	f7f9 fdbc 	bl	8000d24 <__aeabi_fmul>
 80071ac:	4603      	mov	r3, r0
 80071ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 80071b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071b6:	4619      	mov	r1, r3
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7f9 fcab 	bl	8000b14 <__addsf3>
 80071be:	4603      	mov	r3, r0
 80071c0:	4619      	mov	r1, r3
 80071c2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80071c6:	f7f9 fdad 	bl	8000d24 <__aeabi_fmul>
 80071ca:	4603      	mov	r3, r0
 80071cc:	65bb      	str	r3, [r7, #88]	; 0x58
    _2q1my = 2.0f * q1 * my;
 80071ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071d2:	4619      	mov	r1, r3
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7f9 fc9d 	bl	8000b14 <__addsf3>
 80071da:	4603      	mov	r3, r0
 80071dc:	4619      	mov	r1, r3
 80071de:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80071e2:	f7f9 fd9f 	bl	8000d24 <__aeabi_fmul>
 80071e6:	4603      	mov	r3, r0
 80071e8:	657b      	str	r3, [r7, #84]	; 0x54
    _2q1mz = 2.0f * q1 * mz;
 80071ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ee:	4619      	mov	r1, r3
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7f9 fc8f 	bl	8000b14 <__addsf3>
 80071f6:	4603      	mov	r3, r0
 80071f8:	4619      	mov	r1, r3
 80071fa:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80071fe:	f7f9 fd91 	bl	8000d24 <__aeabi_fmul>
 8007202:	4603      	mov	r3, r0
 8007204:	653b      	str	r3, [r7, #80]	; 0x50
    _2q2mx = 2.0f * q2 * mx;
 8007206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800720a:	4619      	mov	r1, r3
 800720c:	4618      	mov	r0, r3
 800720e:	f7f9 fc81 	bl	8000b14 <__addsf3>
 8007212:	4603      	mov	r3, r0
 8007214:	4619      	mov	r1, r3
 8007216:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800721a:	f7f9 fd83 	bl	8000d24 <__aeabi_fmul>
 800721e:	4603      	mov	r3, r0
 8007220:	64fb      	str	r3, [r7, #76]	; 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8007222:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007226:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800722a:	f7f9 fd7b 	bl	8000d24 <__aeabi_fmul>
 800722e:	4603      	mov	r3, r0
 8007230:	461c      	mov	r4, r3
 8007232:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007236:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007238:	f7f9 fd74 	bl	8000d24 <__aeabi_fmul>
 800723c:	4603      	mov	r3, r0
 800723e:	4619      	mov	r1, r3
 8007240:	4620      	mov	r0, r4
 8007242:	f7f9 fc65 	bl	8000b10 <__aeabi_fsub>
 8007246:	4603      	mov	r3, r0
 8007248:	461c      	mov	r4, r3
 800724a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800724e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007250:	f7f9 fd68 	bl	8000d24 <__aeabi_fmul>
 8007254:	4603      	mov	r3, r0
 8007256:	4619      	mov	r1, r3
 8007258:	4620      	mov	r0, r4
 800725a:	f7f9 fc5b 	bl	8000b14 <__addsf3>
 800725e:	4603      	mov	r3, r0
 8007260:	461c      	mov	r4, r3
 8007262:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007264:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007268:	f7f9 fd5c 	bl	8000d24 <__aeabi_fmul>
 800726c:	4603      	mov	r3, r0
 800726e:	4619      	mov	r1, r3
 8007270:	4620      	mov	r0, r4
 8007272:	f7f9 fc4f 	bl	8000b14 <__addsf3>
 8007276:	4603      	mov	r3, r0
 8007278:	461c      	mov	r4, r3
 800727a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800727e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8007282:	f7f9 fd4f 	bl	8000d24 <__aeabi_fmul>
 8007286:	4603      	mov	r3, r0
 8007288:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800728c:	4618      	mov	r0, r3
 800728e:	f7f9 fd49 	bl	8000d24 <__aeabi_fmul>
 8007292:	4603      	mov	r3, r0
 8007294:	4619      	mov	r1, r3
 8007296:	4620      	mov	r0, r4
 8007298:	f7f9 fc3c 	bl	8000b14 <__addsf3>
 800729c:	4603      	mov	r3, r0
 800729e:	461c      	mov	r4, r3
 80072a0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80072a4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80072a8:	f7f9 fd3c 	bl	8000d24 <__aeabi_fmul>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7f9 fd36 	bl	8000d24 <__aeabi_fmul>
 80072b8:	4603      	mov	r3, r0
 80072ba:	4619      	mov	r1, r3
 80072bc:	4620      	mov	r0, r4
 80072be:	f7f9 fc29 	bl	8000b14 <__addsf3>
 80072c2:	4603      	mov	r3, r0
 80072c4:	461c      	mov	r4, r3
 80072c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072c8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80072cc:	f7f9 fd2a 	bl	8000d24 <__aeabi_fmul>
 80072d0:	4603      	mov	r3, r0
 80072d2:	4619      	mov	r1, r3
 80072d4:	4620      	mov	r0, r4
 80072d6:	f7f9 fc1b 	bl	8000b10 <__aeabi_fsub>
 80072da:	4603      	mov	r3, r0
 80072dc:	461c      	mov	r4, r3
 80072de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80072e0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80072e4:	f7f9 fd1e 	bl	8000d24 <__aeabi_fmul>
 80072e8:	4603      	mov	r3, r0
 80072ea:	4619      	mov	r1, r3
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7f9 fc0f 	bl	8000b10 <__aeabi_fsub>
 80072f2:	4603      	mov	r3, r0
 80072f4:	64bb      	str	r3, [r7, #72]	; 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80072f6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80072fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80072fc:	f7f9 fd12 	bl	8000d24 <__aeabi_fmul>
 8007300:	4603      	mov	r3, r0
 8007302:	461c      	mov	r4, r3
 8007304:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007308:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800730c:	f7f9 fd0a 	bl	8000d24 <__aeabi_fmul>
 8007310:	4603      	mov	r3, r0
 8007312:	4619      	mov	r1, r3
 8007314:	4620      	mov	r0, r4
 8007316:	f7f9 fbfd 	bl	8000b14 <__addsf3>
 800731a:	4603      	mov	r3, r0
 800731c:	461c      	mov	r4, r3
 800731e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007322:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007324:	f7f9 fcfe 	bl	8000d24 <__aeabi_fmul>
 8007328:	4603      	mov	r3, r0
 800732a:	4619      	mov	r1, r3
 800732c:	4620      	mov	r0, r4
 800732e:	f7f9 fbef 	bl	8000b10 <__aeabi_fsub>
 8007332:	4603      	mov	r3, r0
 8007334:	461c      	mov	r4, r3
 8007336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800733a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800733c:	f7f9 fcf2 	bl	8000d24 <__aeabi_fmul>
 8007340:	4603      	mov	r3, r0
 8007342:	4619      	mov	r1, r3
 8007344:	4620      	mov	r0, r4
 8007346:	f7f9 fbe5 	bl	8000b14 <__addsf3>
 800734a:	4603      	mov	r3, r0
 800734c:	461c      	mov	r4, r3
 800734e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007350:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8007354:	f7f9 fce6 	bl	8000d24 <__aeabi_fmul>
 8007358:	4603      	mov	r3, r0
 800735a:	4619      	mov	r1, r3
 800735c:	4620      	mov	r0, r4
 800735e:	f7f9 fbd7 	bl	8000b10 <__aeabi_fsub>
 8007362:	4603      	mov	r3, r0
 8007364:	461c      	mov	r4, r3
 8007366:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007368:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800736c:	f7f9 fcda 	bl	8000d24 <__aeabi_fmul>
 8007370:	4603      	mov	r3, r0
 8007372:	4619      	mov	r1, r3
 8007374:	4620      	mov	r0, r4
 8007376:	f7f9 fbcd 	bl	8000b14 <__addsf3>
 800737a:	4603      	mov	r3, r0
 800737c:	461c      	mov	r4, r3
 800737e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007382:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8007386:	f7f9 fccd 	bl	8000d24 <__aeabi_fmul>
 800738a:	4603      	mov	r3, r0
 800738c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007390:	4618      	mov	r0, r3
 8007392:	f7f9 fcc7 	bl	8000d24 <__aeabi_fmul>
 8007396:	4603      	mov	r3, r0
 8007398:	4619      	mov	r1, r3
 800739a:	4620      	mov	r0, r4
 800739c:	f7f9 fbba 	bl	8000b14 <__addsf3>
 80073a0:	4603      	mov	r3, r0
 80073a2:	461c      	mov	r4, r3
 80073a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80073a6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80073aa:	f7f9 fcbb 	bl	8000d24 <__aeabi_fmul>
 80073ae:	4603      	mov	r3, r0
 80073b0:	4619      	mov	r1, r3
 80073b2:	4620      	mov	r0, r4
 80073b4:	f7f9 fbac 	bl	8000b10 <__aeabi_fsub>
 80073b8:	4603      	mov	r3, r0
 80073ba:	647b      	str	r3, [r7, #68]	; 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 80073bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80073be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80073c0:	f7f9 fcb0 	bl	8000d24 <__aeabi_fmul>
 80073c4:	4603      	mov	r3, r0
 80073c6:	461c      	mov	r4, r3
 80073c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80073cc:	f7f9 fcaa 	bl	8000d24 <__aeabi_fmul>
 80073d0:	4603      	mov	r3, r0
 80073d2:	4619      	mov	r1, r3
 80073d4:	4620      	mov	r0, r4
 80073d6:	f7f9 fb9d 	bl	8000b14 <__addsf3>
 80073da:	4603      	mov	r3, r0
 80073dc:	4618      	mov	r0, r3
 80073de:	f002 f931 	bl	8009644 <sqrtf>
 80073e2:	6438      	str	r0, [r7, #64]	; 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80073e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80073ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7f9 fc98 	bl	8000d24 <__aeabi_fmul>
 80073f4:	4603      	mov	r3, r0
 80073f6:	461c      	mov	r4, r3
 80073f8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80073fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80073fe:	f7f9 fc91 	bl	8000d24 <__aeabi_fmul>
 8007402:	4603      	mov	r3, r0
 8007404:	4619      	mov	r1, r3
 8007406:	4620      	mov	r0, r4
 8007408:	f7f9 fb84 	bl	8000b14 <__addsf3>
 800740c:	4603      	mov	r3, r0
 800740e:	461c      	mov	r4, r3
 8007410:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007414:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007418:	f7f9 fc84 	bl	8000d24 <__aeabi_fmul>
 800741c:	4603      	mov	r3, r0
 800741e:	4619      	mov	r1, r3
 8007420:	4620      	mov	r0, r4
 8007422:	f7f9 fb77 	bl	8000b14 <__addsf3>
 8007426:	4603      	mov	r3, r0
 8007428:	461c      	mov	r4, r3
 800742a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800742e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007430:	f7f9 fc78 	bl	8000d24 <__aeabi_fmul>
 8007434:	4603      	mov	r3, r0
 8007436:	4619      	mov	r1, r3
 8007438:	4620      	mov	r0, r4
 800743a:	f7f9 fb6b 	bl	8000b14 <__addsf3>
 800743e:	4603      	mov	r3, r0
 8007440:	461c      	mov	r4, r3
 8007442:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007444:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007448:	f7f9 fc6c 	bl	8000d24 <__aeabi_fmul>
 800744c:	4603      	mov	r3, r0
 800744e:	4619      	mov	r1, r3
 8007450:	4620      	mov	r0, r4
 8007452:	f7f9 fb5d 	bl	8000b10 <__aeabi_fsub>
 8007456:	4603      	mov	r3, r0
 8007458:	461c      	mov	r4, r3
 800745a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800745e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8007462:	f7f9 fc5f 	bl	8000d24 <__aeabi_fmul>
 8007466:	4603      	mov	r3, r0
 8007468:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800746c:	4618      	mov	r0, r3
 800746e:	f7f9 fc59 	bl	8000d24 <__aeabi_fmul>
 8007472:	4603      	mov	r3, r0
 8007474:	4619      	mov	r1, r3
 8007476:	4620      	mov	r0, r4
 8007478:	f7f9 fb4c 	bl	8000b14 <__addsf3>
 800747c:	4603      	mov	r3, r0
 800747e:	461c      	mov	r4, r3
 8007480:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007482:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007486:	f7f9 fc4d 	bl	8000d24 <__aeabi_fmul>
 800748a:	4603      	mov	r3, r0
 800748c:	4619      	mov	r1, r3
 800748e:	4620      	mov	r0, r4
 8007490:	f7f9 fb3e 	bl	8000b10 <__aeabi_fsub>
 8007494:	4603      	mov	r3, r0
 8007496:	461c      	mov	r4, r3
 8007498:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800749a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800749e:	f7f9 fc41 	bl	8000d24 <__aeabi_fmul>
 80074a2:	4603      	mov	r3, r0
 80074a4:	4619      	mov	r1, r3
 80074a6:	4620      	mov	r0, r4
 80074a8:	f7f9 fb34 	bl	8000b14 <__addsf3>
 80074ac:	4603      	mov	r3, r0
 80074ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    _4bx = 2.0f * _2bx;
 80074b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b2:	4619      	mov	r1, r3
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7f9 fb2d 	bl	8000b14 <__addsf3>
 80074ba:	4603      	mov	r3, r0
 80074bc:	63bb      	str	r3, [r7, #56]	; 0x38
    _4bz = 2.0f * _2bz;
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c0:	4619      	mov	r1, r3
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7f9 fb26 	bl	8000b14 <__addsf3>
 80074c8:	4603      	mov	r3, r0
 80074ca:	637b      	str	r3, [r7, #52]	; 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80074cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074d0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80074d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d6:	4619      	mov	r1, r3
 80074d8:	4618      	mov	r0, r3
 80074da:	f7f9 fb1b 	bl	8000b14 <__addsf3>
 80074de:	4603      	mov	r3, r0
 80074e0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7f9 fb13 	bl	8000b10 <__aeabi_fsub>
 80074ea:	4603      	mov	r3, r0
 80074ec:	68f9      	ldr	r1, [r7, #12]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7f9 fb0e 	bl	8000b10 <__aeabi_fsub>
 80074f4:	4603      	mov	r3, r0
 80074f6:	4619      	mov	r1, r3
 80074f8:	4620      	mov	r0, r4
 80074fa:	f7f9 fc13 	bl	8000d24 <__aeabi_fmul>
 80074fe:	4603      	mov	r3, r0
 8007500:	461c      	mov	r4, r3
 8007502:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007506:	4619      	mov	r1, r3
 8007508:	4618      	mov	r0, r3
 800750a:	f7f9 fb03 	bl	8000b14 <__addsf3>
 800750e:	4603      	mov	r3, r0
 8007510:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007514:	4618      	mov	r0, r3
 8007516:	f7f9 fafd 	bl	8000b14 <__addsf3>
 800751a:	4603      	mov	r3, r0
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	4618      	mov	r0, r3
 8007520:	f7f9 faf6 	bl	8000b10 <__aeabi_fsub>
 8007524:	4603      	mov	r3, r0
 8007526:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800752a:	4618      	mov	r0, r3
 800752c:	f7f9 fbfa 	bl	8000d24 <__aeabi_fmul>
 8007530:	4603      	mov	r3, r0
 8007532:	4619      	mov	r1, r3
 8007534:	4620      	mov	r0, r4
 8007536:	f7f9 faed 	bl	8000b14 <__addsf3>
 800753a:	4603      	mov	r3, r0
 800753c:	461c      	mov	r4, r3
 800753e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007542:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007544:	f7f9 fbee 	bl	8000d24 <__aeabi_fmul>
 8007548:	4603      	mov	r3, r0
 800754a:	461d      	mov	r5, r3
 800754c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800754e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007552:	f7f9 fadd 	bl	8000b10 <__aeabi_fsub>
 8007556:	4603      	mov	r3, r0
 8007558:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800755a:	4618      	mov	r0, r3
 800755c:	f7f9 fad8 	bl	8000b10 <__aeabi_fsub>
 8007560:	4603      	mov	r3, r0
 8007562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007564:	4618      	mov	r0, r3
 8007566:	f7f9 fbdd 	bl	8000d24 <__aeabi_fmul>
 800756a:	4603      	mov	r3, r0
 800756c:	461e      	mov	r6, r3
 800756e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007570:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007572:	f7f9 facd 	bl	8000b10 <__aeabi_fsub>
 8007576:	4603      	mov	r3, r0
 8007578:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800757a:	4618      	mov	r0, r3
 800757c:	f7f9 fbd2 	bl	8000d24 <__aeabi_fmul>
 8007580:	4603      	mov	r3, r0
 8007582:	4619      	mov	r1, r3
 8007584:	4630      	mov	r0, r6
 8007586:	f7f9 fac5 	bl	8000b14 <__addsf3>
 800758a:	4603      	mov	r3, r0
 800758c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007590:	4618      	mov	r0, r3
 8007592:	f7f9 fabd 	bl	8000b10 <__aeabi_fsub>
 8007596:	4603      	mov	r3, r0
 8007598:	4619      	mov	r1, r3
 800759a:	4628      	mov	r0, r5
 800759c:	f7f9 fbc2 	bl	8000d24 <__aeabi_fmul>
 80075a0:	4603      	mov	r3, r0
 80075a2:	4619      	mov	r1, r3
 80075a4:	4620      	mov	r0, r4
 80075a6:	f7f9 fab3 	bl	8000b10 <__aeabi_fsub>
 80075aa:	4603      	mov	r3, r0
 80075ac:	461c      	mov	r4, r3
 80075ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80075b4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7f9 fbb3 	bl	8000d24 <__aeabi_fmul>
 80075be:	4603      	mov	r3, r0
 80075c0:	461d      	mov	r5, r3
 80075c2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80075c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80075c8:	f7f9 fbac 	bl	8000d24 <__aeabi_fmul>
 80075cc:	4603      	mov	r3, r0
 80075ce:	4619      	mov	r1, r3
 80075d0:	4628      	mov	r0, r5
 80075d2:	f7f9 fa9f 	bl	8000b14 <__addsf3>
 80075d6:	4603      	mov	r3, r0
 80075d8:	461d      	mov	r5, r3
 80075da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80075dc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80075de:	f7f9 fa97 	bl	8000b10 <__aeabi_fsub>
 80075e2:	4603      	mov	r3, r0
 80075e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7f9 fb9c 	bl	8000d24 <__aeabi_fmul>
 80075ec:	4603      	mov	r3, r0
 80075ee:	461e      	mov	r6, r3
 80075f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80075f2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80075f6:	f7f9 fa8d 	bl	8000b14 <__addsf3>
 80075fa:	4603      	mov	r3, r0
 80075fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075fe:	4618      	mov	r0, r3
 8007600:	f7f9 fb90 	bl	8000d24 <__aeabi_fmul>
 8007604:	4603      	mov	r3, r0
 8007606:	4619      	mov	r1, r3
 8007608:	4630      	mov	r0, r6
 800760a:	f7f9 fa83 	bl	8000b14 <__addsf3>
 800760e:	4603      	mov	r3, r0
 8007610:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007614:	4618      	mov	r0, r3
 8007616:	f7f9 fa7b 	bl	8000b10 <__aeabi_fsub>
 800761a:	4603      	mov	r3, r0
 800761c:	4619      	mov	r1, r3
 800761e:	4628      	mov	r0, r5
 8007620:	f7f9 fb80 	bl	8000d24 <__aeabi_fmul>
 8007624:	4603      	mov	r3, r0
 8007626:	4619      	mov	r1, r3
 8007628:	4620      	mov	r0, r4
 800762a:	f7f9 fa73 	bl	8000b14 <__addsf3>
 800762e:	4603      	mov	r3, r0
 8007630:	461c      	mov	r4, r3
 8007632:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007636:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007638:	f7f9 fb74 	bl	8000d24 <__aeabi_fmul>
 800763c:	4603      	mov	r3, r0
 800763e:	461d      	mov	r5, r3
 8007640:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007642:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007644:	f7f9 fa66 	bl	8000b14 <__addsf3>
 8007648:	4603      	mov	r3, r0
 800764a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800764c:	4618      	mov	r0, r3
 800764e:	f7f9 fb69 	bl	8000d24 <__aeabi_fmul>
 8007652:	4603      	mov	r3, r0
 8007654:	461e      	mov	r6, r3
 8007656:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007658:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800765c:	f7f9 fa58 	bl	8000b10 <__aeabi_fsub>
 8007660:	4603      	mov	r3, r0
 8007662:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007664:	4618      	mov	r0, r3
 8007666:	f7f9 fa53 	bl	8000b10 <__aeabi_fsub>
 800766a:	4603      	mov	r3, r0
 800766c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800766e:	4618      	mov	r0, r3
 8007670:	f7f9 fb58 	bl	8000d24 <__aeabi_fmul>
 8007674:	4603      	mov	r3, r0
 8007676:	4619      	mov	r1, r3
 8007678:	4630      	mov	r0, r6
 800767a:	f7f9 fa4b 	bl	8000b14 <__addsf3>
 800767e:	4603      	mov	r3, r0
 8007680:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007684:	4618      	mov	r0, r3
 8007686:	f7f9 fa43 	bl	8000b10 <__aeabi_fsub>
 800768a:	4603      	mov	r3, r0
 800768c:	4619      	mov	r1, r3
 800768e:	4628      	mov	r0, r5
 8007690:	f7f9 fb48 	bl	8000d24 <__aeabi_fmul>
 8007694:	4603      	mov	r3, r0
 8007696:	4619      	mov	r1, r3
 8007698:	4620      	mov	r0, r4
 800769a:	f7f9 fa3b 	bl	8000b14 <__addsf3>
 800769e:	4603      	mov	r3, r0
 80076a0:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80076a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a4:	4619      	mov	r1, r3
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7f9 fa34 	bl	8000b14 <__addsf3>
 80076ac:	4603      	mov	r3, r0
 80076ae:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7f9 fa2c 	bl	8000b10 <__aeabi_fsub>
 80076b8:	4603      	mov	r3, r0
 80076ba:	68f9      	ldr	r1, [r7, #12]
 80076bc:	4618      	mov	r0, r3
 80076be:	f7f9 fa27 	bl	8000b10 <__aeabi_fsub>
 80076c2:	4603      	mov	r3, r0
 80076c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7f9 fb2b 	bl	8000d24 <__aeabi_fmul>
 80076ce:	4603      	mov	r3, r0
 80076d0:	461c      	mov	r4, r3
 80076d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076d6:	4619      	mov	r1, r3
 80076d8:	4618      	mov	r0, r3
 80076da:	f7f9 fa1b 	bl	8000b14 <__addsf3>
 80076de:	4603      	mov	r3, r0
 80076e0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7f9 fa15 	bl	8000b14 <__addsf3>
 80076ea:	4603      	mov	r3, r0
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7f9 fa0e 	bl	8000b10 <__aeabi_fsub>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7f9 fb12 	bl	8000d24 <__aeabi_fmul>
 8007700:	4603      	mov	r3, r0
 8007702:	4619      	mov	r1, r3
 8007704:	4620      	mov	r0, r4
 8007706:	f7f9 fa05 	bl	8000b14 <__addsf3>
 800770a:	4603      	mov	r3, r0
 800770c:	461c      	mov	r4, r3
 800770e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8007712:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007716:	f7f9 fb05 	bl	8000d24 <__aeabi_fmul>
 800771a:	4603      	mov	r3, r0
 800771c:	461d      	mov	r5, r3
 800771e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007720:	4619      	mov	r1, r3
 8007722:	4618      	mov	r0, r3
 8007724:	f7f9 f9f6 	bl	8000b14 <__addsf3>
 8007728:	4603      	mov	r3, r0
 800772a:	4619      	mov	r1, r3
 800772c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007730:	f7f9 f9ee 	bl	8000b10 <__aeabi_fsub>
 8007734:	4603      	mov	r3, r0
 8007736:	461e      	mov	r6, r3
 8007738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800773a:	4619      	mov	r1, r3
 800773c:	4618      	mov	r0, r3
 800773e:	f7f9 f9e9 	bl	8000b14 <__addsf3>
 8007742:	4603      	mov	r3, r0
 8007744:	4619      	mov	r1, r3
 8007746:	4630      	mov	r0, r6
 8007748:	f7f9 f9e2 	bl	8000b10 <__aeabi_fsub>
 800774c:	4603      	mov	r3, r0
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4618      	mov	r0, r3
 8007752:	f7f9 f9dd 	bl	8000b10 <__aeabi_fsub>
 8007756:	4603      	mov	r3, r0
 8007758:	4619      	mov	r1, r3
 800775a:	4628      	mov	r0, r5
 800775c:	f7f9 fae2 	bl	8000d24 <__aeabi_fmul>
 8007760:	4603      	mov	r3, r0
 8007762:	4619      	mov	r1, r3
 8007764:	4620      	mov	r0, r4
 8007766:	f7f9 f9d3 	bl	8000b10 <__aeabi_fsub>
 800776a:	4603      	mov	r3, r0
 800776c:	461c      	mov	r4, r3
 800776e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007772:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007774:	f7f9 fad6 	bl	8000d24 <__aeabi_fmul>
 8007778:	4603      	mov	r3, r0
 800777a:	461d      	mov	r5, r3
 800777c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800777e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007782:	f7f9 f9c5 	bl	8000b10 <__aeabi_fsub>
 8007786:	4603      	mov	r3, r0
 8007788:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800778a:	4618      	mov	r0, r3
 800778c:	f7f9 f9c0 	bl	8000b10 <__aeabi_fsub>
 8007790:	4603      	mov	r3, r0
 8007792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007794:	4618      	mov	r0, r3
 8007796:	f7f9 fac5 	bl	8000d24 <__aeabi_fmul>
 800779a:	4603      	mov	r3, r0
 800779c:	461e      	mov	r6, r3
 800779e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077a2:	f7f9 f9b5 	bl	8000b10 <__aeabi_fsub>
 80077a6:	4603      	mov	r3, r0
 80077a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7f9 faba 	bl	8000d24 <__aeabi_fmul>
 80077b0:	4603      	mov	r3, r0
 80077b2:	4619      	mov	r1, r3
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7f9 f9ad 	bl	8000b14 <__addsf3>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7f9 f9a5 	bl	8000b10 <__aeabi_fsub>
 80077c6:	4603      	mov	r3, r0
 80077c8:	4619      	mov	r1, r3
 80077ca:	4628      	mov	r0, r5
 80077cc:	f7f9 faaa 	bl	8000d24 <__aeabi_fmul>
 80077d0:	4603      	mov	r3, r0
 80077d2:	4619      	mov	r1, r3
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7f9 f99d 	bl	8000b14 <__addsf3>
 80077da:	4603      	mov	r3, r0
 80077dc:	461c      	mov	r4, r3
 80077de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80077e4:	f7f9 fa9e 	bl	8000d24 <__aeabi_fmul>
 80077e8:	4603      	mov	r3, r0
 80077ea:	461d      	mov	r5, r3
 80077ec:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80077f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80077f2:	f7f9 fa97 	bl	8000d24 <__aeabi_fmul>
 80077f6:	4603      	mov	r3, r0
 80077f8:	4619      	mov	r1, r3
 80077fa:	4628      	mov	r0, r5
 80077fc:	f7f9 f98a 	bl	8000b14 <__addsf3>
 8007800:	4603      	mov	r3, r0
 8007802:	461d      	mov	r5, r3
 8007804:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007806:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007808:	f7f9 f982 	bl	8000b10 <__aeabi_fsub>
 800780c:	4603      	mov	r3, r0
 800780e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007810:	4618      	mov	r0, r3
 8007812:	f7f9 fa87 	bl	8000d24 <__aeabi_fmul>
 8007816:	4603      	mov	r3, r0
 8007818:	461e      	mov	r6, r3
 800781a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800781c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007820:	f7f9 f978 	bl	8000b14 <__addsf3>
 8007824:	4603      	mov	r3, r0
 8007826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007828:	4618      	mov	r0, r3
 800782a:	f7f9 fa7b 	bl	8000d24 <__aeabi_fmul>
 800782e:	4603      	mov	r3, r0
 8007830:	4619      	mov	r1, r3
 8007832:	4630      	mov	r0, r6
 8007834:	f7f9 f96e 	bl	8000b14 <__addsf3>
 8007838:	4603      	mov	r3, r0
 800783a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800783e:	4618      	mov	r0, r3
 8007840:	f7f9 f966 	bl	8000b10 <__aeabi_fsub>
 8007844:	4603      	mov	r3, r0
 8007846:	4619      	mov	r1, r3
 8007848:	4628      	mov	r0, r5
 800784a:	f7f9 fa6b 	bl	8000d24 <__aeabi_fmul>
 800784e:	4603      	mov	r3, r0
 8007850:	4619      	mov	r1, r3
 8007852:	4620      	mov	r0, r4
 8007854:	f7f9 f95e 	bl	8000b14 <__addsf3>
 8007858:	4603      	mov	r3, r0
 800785a:	461c      	mov	r4, r3
 800785c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007860:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007862:	f7f9 fa5f 	bl	8000d24 <__aeabi_fmul>
 8007866:	4603      	mov	r3, r0
 8007868:	461d      	mov	r5, r3
 800786a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800786e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007870:	f7f9 fa58 	bl	8000d24 <__aeabi_fmul>
 8007874:	4603      	mov	r3, r0
 8007876:	4619      	mov	r1, r3
 8007878:	4628      	mov	r0, r5
 800787a:	f7f9 f949 	bl	8000b10 <__aeabi_fsub>
 800787e:	4603      	mov	r3, r0
 8007880:	461d      	mov	r5, r3
 8007882:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007884:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007886:	f7f9 f945 	bl	8000b14 <__addsf3>
 800788a:	4603      	mov	r3, r0
 800788c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800788e:	4618      	mov	r0, r3
 8007890:	f7f9 fa48 	bl	8000d24 <__aeabi_fmul>
 8007894:	4603      	mov	r3, r0
 8007896:	461e      	mov	r6, r3
 8007898:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800789a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800789e:	f7f9 f937 	bl	8000b10 <__aeabi_fsub>
 80078a2:	4603      	mov	r3, r0
 80078a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7f9 f932 	bl	8000b10 <__aeabi_fsub>
 80078ac:	4603      	mov	r3, r0
 80078ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7f9 fa37 	bl	8000d24 <__aeabi_fmul>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4619      	mov	r1, r3
 80078ba:	4630      	mov	r0, r6
 80078bc:	f7f9 f92a 	bl	8000b14 <__addsf3>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7f9 f922 	bl	8000b10 <__aeabi_fsub>
 80078cc:	4603      	mov	r3, r0
 80078ce:	4619      	mov	r1, r3
 80078d0:	4628      	mov	r0, r5
 80078d2:	f7f9 fa27 	bl	8000d24 <__aeabi_fmul>
 80078d6:	4603      	mov	r3, r0
 80078d8:	4619      	mov	r1, r3
 80078da:	4620      	mov	r0, r4
 80078dc:	f7f9 f91a 	bl	8000b14 <__addsf3>
 80078e0:	4603      	mov	r3, r0
 80078e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80078e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078e8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80078ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ee:	4619      	mov	r1, r3
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7f9 f90f 	bl	8000b14 <__addsf3>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7f9 f907 	bl	8000b10 <__aeabi_fsub>
 8007902:	4603      	mov	r3, r0
 8007904:	68f9      	ldr	r1, [r7, #12]
 8007906:	4618      	mov	r0, r3
 8007908:	f7f9 f902 	bl	8000b10 <__aeabi_fsub>
 800790c:	4603      	mov	r3, r0
 800790e:	4619      	mov	r1, r3
 8007910:	4620      	mov	r0, r4
 8007912:	f7f9 fa07 	bl	8000d24 <__aeabi_fmul>
 8007916:	4603      	mov	r3, r0
 8007918:	461c      	mov	r4, r3
 800791a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800791e:	4619      	mov	r1, r3
 8007920:	4618      	mov	r0, r3
 8007922:	f7f9 f8f7 	bl	8000b14 <__addsf3>
 8007926:	4603      	mov	r3, r0
 8007928:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800792c:	4618      	mov	r0, r3
 800792e:	f7f9 f8f1 	bl	8000b14 <__addsf3>
 8007932:	4603      	mov	r3, r0
 8007934:	68b9      	ldr	r1, [r7, #8]
 8007936:	4618      	mov	r0, r3
 8007938:	f7f9 f8ea 	bl	8000b10 <__aeabi_fsub>
 800793c:	4603      	mov	r3, r0
 800793e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007942:	4618      	mov	r0, r3
 8007944:	f7f9 f9ee 	bl	8000d24 <__aeabi_fmul>
 8007948:	4603      	mov	r3, r0
 800794a:	4619      	mov	r1, r3
 800794c:	4620      	mov	r0, r4
 800794e:	f7f9 f8e1 	bl	8000b14 <__addsf3>
 8007952:	4603      	mov	r3, r0
 8007954:	461c      	mov	r4, r3
 8007956:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800795a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800795e:	f7f9 f9e1 	bl	8000d24 <__aeabi_fmul>
 8007962:	4603      	mov	r3, r0
 8007964:	461d      	mov	r5, r3
 8007966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007968:	4619      	mov	r1, r3
 800796a:	4618      	mov	r0, r3
 800796c:	f7f9 f8d2 	bl	8000b14 <__addsf3>
 8007970:	4603      	mov	r3, r0
 8007972:	4619      	mov	r1, r3
 8007974:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007978:	f7f9 f8ca 	bl	8000b10 <__aeabi_fsub>
 800797c:	4603      	mov	r3, r0
 800797e:	461e      	mov	r6, r3
 8007980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007982:	4619      	mov	r1, r3
 8007984:	4618      	mov	r0, r3
 8007986:	f7f9 f8c5 	bl	8000b14 <__addsf3>
 800798a:	4603      	mov	r3, r0
 800798c:	4619      	mov	r1, r3
 800798e:	4630      	mov	r0, r6
 8007990:	f7f9 f8be 	bl	8000b10 <__aeabi_fsub>
 8007994:	4603      	mov	r3, r0
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	4618      	mov	r0, r3
 800799a:	f7f9 f8b9 	bl	8000b10 <__aeabi_fsub>
 800799e:	4603      	mov	r3, r0
 80079a0:	4619      	mov	r1, r3
 80079a2:	4628      	mov	r0, r5
 80079a4:	f7f9 f9be 	bl	8000d24 <__aeabi_fmul>
 80079a8:	4603      	mov	r3, r0
 80079aa:	4619      	mov	r1, r3
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7f9 f8af 	bl	8000b10 <__aeabi_fsub>
 80079b2:	4603      	mov	r3, r0
 80079b4:	461c      	mov	r4, r3
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80079bc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7f9 f9af 	bl	8000d24 <__aeabi_fmul>
 80079c6:	4603      	mov	r3, r0
 80079c8:	461d      	mov	r5, r3
 80079ca:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80079ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80079d0:	f7f9 f9a8 	bl	8000d24 <__aeabi_fmul>
 80079d4:	4603      	mov	r3, r0
 80079d6:	4619      	mov	r1, r3
 80079d8:	4628      	mov	r0, r5
 80079da:	f7f9 f899 	bl	8000b10 <__aeabi_fsub>
 80079de:	4603      	mov	r3, r0
 80079e0:	461d      	mov	r5, r3
 80079e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079e4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80079e8:	f7f9 f892 	bl	8000b10 <__aeabi_fsub>
 80079ec:	4603      	mov	r3, r0
 80079ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7f9 f88d 	bl	8000b10 <__aeabi_fsub>
 80079f6:	4603      	mov	r3, r0
 80079f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7f9 f992 	bl	8000d24 <__aeabi_fmul>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461e      	mov	r6, r3
 8007a04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a08:	f7f9 f882 	bl	8000b10 <__aeabi_fsub>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7f9 f987 	bl	8000d24 <__aeabi_fmul>
 8007a16:	4603      	mov	r3, r0
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f7f9 f87a 	bl	8000b14 <__addsf3>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7f9 f872 	bl	8000b10 <__aeabi_fsub>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4628      	mov	r0, r5
 8007a32:	f7f9 f977 	bl	8000d24 <__aeabi_fmul>
 8007a36:	4603      	mov	r3, r0
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f7f9 f86a 	bl	8000b14 <__addsf3>
 8007a40:	4603      	mov	r3, r0
 8007a42:	461c      	mov	r4, r3
 8007a44:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007a48:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007a4a:	f7f9 f96b 	bl	8000d24 <__aeabi_fmul>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	461d      	mov	r5, r3
 8007a52:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007a56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a58:	f7f9 f964 	bl	8000d24 <__aeabi_fmul>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4628      	mov	r0, r5
 8007a62:	f7f9 f857 	bl	8000b14 <__addsf3>
 8007a66:	4603      	mov	r3, r0
 8007a68:	461d      	mov	r5, r3
 8007a6a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007a6c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007a6e:	f7f9 f84f 	bl	8000b10 <__aeabi_fsub>
 8007a72:	4603      	mov	r3, r0
 8007a74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7f9 f954 	bl	8000d24 <__aeabi_fmul>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	461e      	mov	r6, r3
 8007a80:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007a82:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007a86:	f7f9 f845 	bl	8000b14 <__addsf3>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7f9 f948 	bl	8000d24 <__aeabi_fmul>
 8007a94:	4603      	mov	r3, r0
 8007a96:	4619      	mov	r1, r3
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7f9 f83b 	bl	8000b14 <__addsf3>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7f9 f833 	bl	8000b10 <__aeabi_fsub>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4619      	mov	r1, r3
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f7f9 f938 	bl	8000d24 <__aeabi_fmul>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f7f9 f82b 	bl	8000b14 <__addsf3>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	461c      	mov	r4, r3
 8007ac2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007ac6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007ac8:	f7f9 f92c 	bl	8000d24 <__aeabi_fmul>
 8007acc:	4603      	mov	r3, r0
 8007ace:	461d      	mov	r5, r3
 8007ad0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ad4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ad6:	f7f9 f925 	bl	8000d24 <__aeabi_fmul>
 8007ada:	4603      	mov	r3, r0
 8007adc:	4619      	mov	r1, r3
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f7f9 f816 	bl	8000b10 <__aeabi_fsub>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	461d      	mov	r5, r3
 8007ae8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007aea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007aec:	f7f9 f812 	bl	8000b14 <__addsf3>
 8007af0:	4603      	mov	r3, r0
 8007af2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7f9 f915 	bl	8000d24 <__aeabi_fmul>
 8007afa:	4603      	mov	r3, r0
 8007afc:	461e      	mov	r6, r3
 8007afe:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007b00:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007b04:	f7f9 f804 	bl	8000b10 <__aeabi_fsub>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7f8 ffff 	bl	8000b10 <__aeabi_fsub>
 8007b12:	4603      	mov	r3, r0
 8007b14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7f9 f904 	bl	8000d24 <__aeabi_fmul>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4630      	mov	r0, r6
 8007b22:	f7f8 fff7 	bl	8000b14 <__addsf3>
 8007b26:	4603      	mov	r3, r0
 8007b28:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7f8 ffef 	bl	8000b10 <__aeabi_fsub>
 8007b32:	4603      	mov	r3, r0
 8007b34:	4619      	mov	r1, r3
 8007b36:	4628      	mov	r0, r5
 8007b38:	f7f9 f8f4 	bl	8000d24 <__aeabi_fmul>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4620      	mov	r0, r4
 8007b42:	f7f8 ffe7 	bl	8000b14 <__addsf3>
 8007b46:	4603      	mov	r3, r0
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8007b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7f8 ffe0 	bl	8000b14 <__addsf3>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f8 ffd8 	bl	8000b10 <__aeabi_fsub>
 8007b60:	4603      	mov	r3, r0
 8007b62:	68f9      	ldr	r1, [r7, #12]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7f8 ffd3 	bl	8000b10 <__aeabi_fsub>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7f9 f8d7 	bl	8000d24 <__aeabi_fmul>
 8007b76:	4603      	mov	r3, r0
 8007b78:	461c      	mov	r4, r3
 8007b7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7f8 ffc7 	bl	8000b14 <__addsf3>
 8007b86:	4603      	mov	r3, r0
 8007b88:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7f8 ffc1 	bl	8000b14 <__addsf3>
 8007b92:	4603      	mov	r3, r0
 8007b94:	68b9      	ldr	r1, [r7, #8]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7f8 ffba 	bl	8000b10 <__aeabi_fsub>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7f9 f8be 	bl	8000d24 <__aeabi_fmul>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	4619      	mov	r1, r3
 8007bac:	4620      	mov	r0, r4
 8007bae:	f7f8 ffb1 	bl	8000b14 <__addsf3>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	461c      	mov	r4, r3
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007bbc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7f9 f8af 	bl	8000d24 <__aeabi_fmul>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	461d      	mov	r5, r3
 8007bca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007bce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007bd0:	f7f9 f8a8 	bl	8000d24 <__aeabi_fmul>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f7f8 ff9b 	bl	8000b14 <__addsf3>
 8007bde:	4603      	mov	r3, r0
 8007be0:	461d      	mov	r5, r3
 8007be2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007be4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007be8:	f7f8 ff92 	bl	8000b10 <__aeabi_fsub>
 8007bec:	4603      	mov	r3, r0
 8007bee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7f8 ff8d 	bl	8000b10 <__aeabi_fsub>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7f9 f892 	bl	8000d24 <__aeabi_fmul>
 8007c00:	4603      	mov	r3, r0
 8007c02:	461e      	mov	r6, r3
 8007c04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c08:	f7f8 ff82 	bl	8000b10 <__aeabi_fsub>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7f9 f887 	bl	8000d24 <__aeabi_fmul>
 8007c16:	4603      	mov	r3, r0
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7f8 ff7a 	bl	8000b14 <__addsf3>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7f8 ff72 	bl	8000b10 <__aeabi_fsub>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4628      	mov	r0, r5
 8007c32:	f7f9 f877 	bl	8000d24 <__aeabi_fmul>
 8007c36:	4603      	mov	r3, r0
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f7f8 ff6a 	bl	8000b14 <__addsf3>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461c      	mov	r4, r3
 8007c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007c4a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7f9 f868 	bl	8000d24 <__aeabi_fmul>
 8007c54:	4603      	mov	r3, r0
 8007c56:	461d      	mov	r5, r3
 8007c58:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c5e:	f7f9 f861 	bl	8000d24 <__aeabi_fmul>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4619      	mov	r1, r3
 8007c66:	4628      	mov	r0, r5
 8007c68:	f7f8 ff54 	bl	8000b14 <__addsf3>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461d      	mov	r5, r3
 8007c70:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007c72:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007c74:	f7f8 ff4c 	bl	8000b10 <__aeabi_fsub>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7f9 f851 	bl	8000d24 <__aeabi_fmul>
 8007c82:	4603      	mov	r3, r0
 8007c84:	461e      	mov	r6, r3
 8007c86:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007c88:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007c8c:	f7f8 ff42 	bl	8000b14 <__addsf3>
 8007c90:	4603      	mov	r3, r0
 8007c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7f9 f845 	bl	8000d24 <__aeabi_fmul>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f7f8 ff38 	bl	8000b14 <__addsf3>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7f8 ff30 	bl	8000b10 <__aeabi_fsub>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f7f9 f835 	bl	8000d24 <__aeabi_fmul>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f7f8 ff28 	bl	8000b14 <__addsf3>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	461c      	mov	r4, r3
 8007cc8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007ccc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007cce:	f7f9 f829 	bl	8000d24 <__aeabi_fmul>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	461d      	mov	r5, r3
 8007cd6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007cd8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007cda:	f7f8 ff1b 	bl	8000b14 <__addsf3>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7f9 f81e 	bl	8000d24 <__aeabi_fmul>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	461e      	mov	r6, r3
 8007cec:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007cee:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007cf2:	f7f8 ff0d 	bl	8000b10 <__aeabi_fsub>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7f8 ff08 	bl	8000b10 <__aeabi_fsub>
 8007d00:	4603      	mov	r3, r0
 8007d02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7f9 f80d 	bl	8000d24 <__aeabi_fmul>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7f8 ff00 	bl	8000b14 <__addsf3>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7f8 fef8 	bl	8000b10 <__aeabi_fsub>
 8007d20:	4603      	mov	r3, r0
 8007d22:	4619      	mov	r1, r3
 8007d24:	4628      	mov	r0, r5
 8007d26:	f7f8 fffd 	bl	8000d24 <__aeabi_fmul>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f7f8 fef0 	bl	8000b14 <__addsf3>
 8007d34:	4603      	mov	r3, r0
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8007d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d3c:	f7f8 fff2 	bl	8000d24 <__aeabi_fmul>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461c      	mov	r4, r3
 8007d44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d48:	f7f8 ffec 	bl	8000d24 <__aeabi_fmul>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4620      	mov	r0, r4
 8007d52:	f7f8 fedf 	bl	8000b14 <__addsf3>
 8007d56:	4603      	mov	r3, r0
 8007d58:	461c      	mov	r4, r3
 8007d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d5e:	f7f8 ffe1 	bl	8000d24 <__aeabi_fmul>
 8007d62:	4603      	mov	r3, r0
 8007d64:	4619      	mov	r1, r3
 8007d66:	4620      	mov	r0, r4
 8007d68:	f7f8 fed4 	bl	8000b14 <__addsf3>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	461c      	mov	r4, r3
 8007d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d74:	f7f8 ffd6 	bl	8000d24 <__aeabi_fmul>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f7f8 fec9 	bl	8000b14 <__addsf3>
 8007d82:	4603      	mov	r3, r0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fc5d 	bl	8009644 <sqrtf>
 8007d8a:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 8007d8c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007d8e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007d92:	f7f9 f87b 	bl	8000e8c <__aeabi_fdiv>
 8007d96:	4603      	mov	r3, r0
 8007d98:	65fb      	str	r3, [r7, #92]	; 0x5c
    s1 *= norm;
 8007d9a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d9e:	f7f8 ffc1 	bl	8000d24 <__aeabi_fmul>
 8007da2:	4603      	mov	r3, r0
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30
    s2 *= norm;
 8007da6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007daa:	f7f8 ffbb 	bl	8000d24 <__aeabi_fmul>
 8007dae:	4603      	mov	r3, r0
 8007db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 *= norm;
 8007db2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db6:	f7f8 ffb5 	bl	8000d24 <__aeabi_fmul>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 *= norm;
 8007dbe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dc2:	f7f8 ffaf 	bl	8000d24 <__aeabi_fmul>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8007dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7f8 ffa5 	bl	8000d24 <__aeabi_fmul>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	461c      	mov	r4, r3
 8007dde:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007de2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007de6:	f7f8 ff9d 	bl	8000d24 <__aeabi_fmul>
 8007dea:	4603      	mov	r3, r0
 8007dec:	4619      	mov	r1, r3
 8007dee:	4620      	mov	r0, r4
 8007df0:	f7f8 fe8e 	bl	8000b10 <__aeabi_fsub>
 8007df4:	4603      	mov	r3, r0
 8007df6:	461c      	mov	r4, r3
 8007df8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007dfc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007e00:	f7f8 ff90 	bl	8000d24 <__aeabi_fmul>
 8007e04:	4603      	mov	r3, r0
 8007e06:	4619      	mov	r1, r3
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f7f8 fe81 	bl	8000b10 <__aeabi_fsub>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7f8 ff85 	bl	8000d24 <__aeabi_fmul>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	461c      	mov	r4, r3
 8007e1e:	4ba4      	ldr	r3, [pc, #656]	; (80080b0 <QuaternionUpdate+0x1178>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7f8 ff7d 	bl	8000d24 <__aeabi_fmul>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f7f8 fe6e 	bl	8000b10 <__aeabi_fsub>
 8007e34:	4603      	mov	r3, r0
 8007e36:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007e3e:	f7f8 ff71 	bl	8000d24 <__aeabi_fmul>
 8007e42:	4603      	mov	r3, r0
 8007e44:	461c      	mov	r4, r3
 8007e46:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007e4a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007e4e:	f7f8 ff69 	bl	8000d24 <__aeabi_fmul>
 8007e52:	4603      	mov	r3, r0
 8007e54:	4619      	mov	r1, r3
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7f8 fe5c 	bl	8000b14 <__addsf3>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	461c      	mov	r4, r3
 8007e60:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007e64:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007e68:	f7f8 ff5c 	bl	8000d24 <__aeabi_fmul>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4620      	mov	r0, r4
 8007e72:	f7f8 fe4d 	bl	8000b10 <__aeabi_fsub>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7f8 ff51 	bl	8000d24 <__aeabi_fmul>
 8007e82:	4603      	mov	r3, r0
 8007e84:	461c      	mov	r4, r3
 8007e86:	4b8a      	ldr	r3, [pc, #552]	; (80080b0 <QuaternionUpdate+0x1178>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7f8 ff49 	bl	8000d24 <__aeabi_fmul>
 8007e92:	4603      	mov	r3, r0
 8007e94:	4619      	mov	r1, r3
 8007e96:	4620      	mov	r0, r4
 8007e98:	f7f8 fe3a 	bl	8000b10 <__aeabi_fsub>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8007ea0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007ea4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007ea8:	f7f8 ff3c 	bl	8000d24 <__aeabi_fmul>
 8007eac:	4603      	mov	r3, r0
 8007eae:	461c      	mov	r4, r3
 8007eb0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007eb4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007eb8:	f7f8 ff34 	bl	8000d24 <__aeabi_fmul>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f7f8 fe25 	bl	8000b10 <__aeabi_fsub>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	461c      	mov	r4, r3
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007ed0:	f7f8 ff28 	bl	8000d24 <__aeabi_fmul>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f7f8 fe1b 	bl	8000b14 <__addsf3>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7f8 ff1d 	bl	8000d24 <__aeabi_fmul>
 8007eea:	4603      	mov	r3, r0
 8007eec:	461c      	mov	r4, r3
 8007eee:	4b70      	ldr	r3, [pc, #448]	; (80080b0 <QuaternionUpdate+0x1178>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7f8 ff15 	bl	8000d24 <__aeabi_fmul>
 8007efa:	4603      	mov	r3, r0
 8007efc:	4619      	mov	r1, r3
 8007efe:	4620      	mov	r0, r4
 8007f00:	f7f8 fe06 	bl	8000b10 <__aeabi_fsub>
 8007f04:	4603      	mov	r3, r0
 8007f06:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8007f08:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007f0c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007f10:	f7f8 ff08 	bl	8000d24 <__aeabi_fmul>
 8007f14:	4603      	mov	r3, r0
 8007f16:	461c      	mov	r4, r3
 8007f18:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007f1c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007f20:	f7f8 ff00 	bl	8000d24 <__aeabi_fmul>
 8007f24:	4603      	mov	r3, r0
 8007f26:	4619      	mov	r1, r3
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f7f8 fdf3 	bl	8000b14 <__addsf3>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	461c      	mov	r4, r3
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007f38:	f7f8 fef4 	bl	8000d24 <__aeabi_fmul>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4620      	mov	r0, r4
 8007f42:	f7f8 fde5 	bl	8000b10 <__aeabi_fsub>
 8007f46:	4603      	mov	r3, r0
 8007f48:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7f8 fee9 	bl	8000d24 <__aeabi_fmul>
 8007f52:	4603      	mov	r3, r0
 8007f54:	461c      	mov	r4, r3
 8007f56:	4b56      	ldr	r3, [pc, #344]	; (80080b0 <QuaternionUpdate+0x1178>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7f8 fee1 	bl	8000d24 <__aeabi_fmul>
 8007f62:	4603      	mov	r3, r0
 8007f64:	4619      	mov	r1, r3
 8007f66:	4620      	mov	r0, r4
 8007f68:	f7f8 fdd2 	bl	8000b10 <__aeabi_fsub>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8007f70:	4b50      	ldr	r3, [pc, #320]	; (80080b4 <QuaternionUpdate+0x117c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6a39      	ldr	r1, [r7, #32]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7f8 fed4 	bl	8000d24 <__aeabi_fmul>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	4619      	mov	r1, r3
 8007f80:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007f84:	f7f8 fdc6 	bl	8000b14 <__addsf3>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q2 += qDot2 * deltat;
 8007f8e:	4b49      	ldr	r3, [pc, #292]	; (80080b4 <QuaternionUpdate+0x117c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69f9      	ldr	r1, [r7, #28]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7f8 fec5 	bl	8000d24 <__aeabi_fmul>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007fa2:	f7f8 fdb7 	bl	8000b14 <__addsf3>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q3 += qDot3 * deltat;
 8007fac:	4b41      	ldr	r3, [pc, #260]	; (80080b4 <QuaternionUpdate+0x117c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69b9      	ldr	r1, [r7, #24]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f8 feb6 	bl	8000d24 <__aeabi_fmul>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007fc0:	f7f8 fda8 	bl	8000b14 <__addsf3>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q4 += qDot4 * deltat;
 8007fca:	4b3a      	ldr	r3, [pc, #232]	; (80080b4 <QuaternionUpdate+0x117c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6979      	ldr	r1, [r7, #20]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7f8 fea7 	bl	8000d24 <__aeabi_fmul>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007fde:	f7f8 fd99 	bl	8000b14 <__addsf3>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8007fe8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007fec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007ff0:	f7f8 fe98 	bl	8000d24 <__aeabi_fmul>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	461c      	mov	r4, r3
 8007ff8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007ffc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008000:	f7f8 fe90 	bl	8000d24 <__aeabi_fmul>
 8008004:	4603      	mov	r3, r0
 8008006:	4619      	mov	r1, r3
 8008008:	4620      	mov	r0, r4
 800800a:	f7f8 fd83 	bl	8000b14 <__addsf3>
 800800e:	4603      	mov	r3, r0
 8008010:	461c      	mov	r4, r3
 8008012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008016:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800801a:	f7f8 fe83 	bl	8000d24 <__aeabi_fmul>
 800801e:	4603      	mov	r3, r0
 8008020:	4619      	mov	r1, r3
 8008022:	4620      	mov	r0, r4
 8008024:	f7f8 fd76 	bl	8000b14 <__addsf3>
 8008028:	4603      	mov	r3, r0
 800802a:	461c      	mov	r4, r3
 800802c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008030:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008034:	f7f8 fe76 	bl	8000d24 <__aeabi_fmul>
 8008038:	4603      	mov	r3, r0
 800803a:	4619      	mov	r1, r3
 800803c:	4620      	mov	r0, r4
 800803e:	f7f8 fd69 	bl	8000b14 <__addsf3>
 8008042:	4603      	mov	r3, r0
 8008044:	4618      	mov	r0, r3
 8008046:	f001 fafd 	bl	8009644 <sqrtf>
 800804a:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 800804c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800804e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008052:	f7f8 ff1b 	bl	8000e8c <__aeabi_fdiv>
 8008056:	4603      	mov	r3, r0
 8008058:	65fb      	str	r3, [r7, #92]	; 0x5c
    q[0] = q1 * norm;
 800805a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800805c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008060:	f7f8 fe60 	bl	8000d24 <__aeabi_fmul>
 8008064:	4603      	mov	r3, r0
 8008066:	461a      	mov	r2, r3
 8008068:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <QuaternionUpdate+0x1180>)
 800806a:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 800806c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800806e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008072:	f7f8 fe57 	bl	8000d24 <__aeabi_fmul>
 8008076:	4603      	mov	r3, r0
 8008078:	461a      	mov	r2, r3
 800807a:	4b0f      	ldr	r3, [pc, #60]	; (80080b8 <QuaternionUpdate+0x1180>)
 800807c:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 800807e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008080:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008084:	f7f8 fe4e 	bl	8000d24 <__aeabi_fmul>
 8008088:	4603      	mov	r3, r0
 800808a:	461a      	mov	r2, r3
 800808c:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <QuaternionUpdate+0x1180>)
 800808e:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 8008090:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008092:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008096:	f7f8 fe45 	bl	8000d24 <__aeabi_fmul>
 800809a:	4603      	mov	r3, r0
 800809c:	461a      	mov	r2, r3
 800809e:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <QuaternionUpdate+0x1180>)
 80080a0:	60da      	str	r2, [r3, #12]
 80080a2:	e002      	b.n	80080aa <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 80080a8:	bf00      	nop

}
 80080aa:	37b4      	adds	r7, #180	; 0xb4
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b0:	2000000c 	.word	0x2000000c
 80080b4:	200000f0 	.word	0x200000f0
 80080b8:	20000010 	.word	0x20000010

080080bc <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80080c0:	2200      	movs	r2, #0
 80080c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080c6:	4802      	ldr	r0, [pc, #8]	; (80080d0 <nRF24_CSN_L+0x14>)
 80080c8:	f7f9 fb14 	bl	80016f4 <HAL_GPIO_WritePin>
}
 80080cc:	bf00      	nop
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	40010c00 	.word	0x40010c00

080080d4 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80080d8:	2201      	movs	r2, #1
 80080da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080de:	4802      	ldr	r0, [pc, #8]	; (80080e8 <nRF24_CSN_H+0x14>)
 80080e0:	f7f9 fb08 	bl	80016f4 <HAL_GPIO_WritePin>
}
 80080e4:	bf00      	nop
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	40010c00 	.word	0x40010c00

080080ec <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	4603      	mov	r3, r0
 80080f4:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {
 80080f6:	f107 020f 	add.w	r2, r7, #15
 80080fa:	1df9      	adds	r1, r7, #7
 80080fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	2301      	movs	r3, #1
 8008104:	4806      	ldr	r0, [pc, #24]	; (8008120 <nRF24_LL_RW+0x34>)
 8008106:	f7fa ffb5 	bl	8003074 <HAL_SPI_TransmitReceive>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <nRF24_LL_RW+0x28>
        Error_Handler();
 8008110:	f7fc fce2 	bl	8004ad8 <Error_Handler>
    };
    return result;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000144 	.word	0x20000144

08008124 <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	4603      	mov	r3, r0
 800812c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800812e:	f7ff ffc5 	bl	80080bc <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	f003 031f 	and.w	r3, r3, #31
 8008138:	b2db      	uxtb	r3, r3
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff ffd6 	bl	80080ec <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8008140:	20ff      	movs	r0, #255	; 0xff
 8008142:	f7ff ffd3 	bl	80080ec <nRF24_LL_RW>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800814a:	f7ff ffc3 	bl	80080d4 <nRF24_CSN_H>

	return value;
 800814e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	460a      	mov	r2, r1
 8008162:	71fb      	strb	r3, [r7, #7]
 8008164:	4613      	mov	r3, r2
 8008166:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8008168:	f7ff ffa8 	bl	80080bc <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 800816c:	79fb      	ldrb	r3, [r7, #7]
 800816e:	2b1f      	cmp	r3, #31
 8008170:	d810      	bhi.n	8008194 <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8008172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008176:	f003 031f 	and.w	r3, r3, #31
 800817a:	b25b      	sxtb	r3, r3
 800817c:	f043 0320 	orr.w	r3, r3, #32
 8008180:	b25b      	sxtb	r3, r3
 8008182:	b2db      	uxtb	r3, r3
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff ffb1 	bl	80080ec <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800818a:	79bb      	ldrb	r3, [r7, #6]
 800818c:	4618      	mov	r0, r3
 800818e:	f7ff ffad 	bl	80080ec <nRF24_LL_RW>
 8008192:	e013      	b.n	80081bc <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8008194:	79fb      	ldrb	r3, [r7, #7]
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff ffa8 	bl	80080ec <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	2be1      	cmp	r3, #225	; 0xe1
 80081a0:	d00c      	beq.n	80081bc <nRF24_WriteReg+0x64>
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	2be2      	cmp	r3, #226	; 0xe2
 80081a6:	d009      	beq.n	80081bc <nRF24_WriteReg+0x64>
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	2be3      	cmp	r3, #227	; 0xe3
 80081ac:	d006      	beq.n	80081bc <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	2bff      	cmp	r3, #255	; 0xff
 80081b2:	d003      	beq.n	80081bc <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 80081b4:	79bb      	ldrb	r3, [r7, #6]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff ff98 	bl	80080ec <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80081bc:	f7ff ff8a 	bl	80080d4 <nRF24_CSN_H>
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 80081c8:	b590      	push	{r4, r7, lr}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	6039      	str	r1, [r7, #0]
 80081d2:	71fb      	strb	r3, [r7, #7]
 80081d4:	4613      	mov	r3, r2
 80081d6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80081d8:	f7ff ff70 	bl	80080bc <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff ff84 	bl	80080ec <nRF24_LL_RW>
	while (count--)
 80081e4:	e007      	b.n	80081f6 <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80081e6:	683c      	ldr	r4, [r7, #0]
 80081e8:	1c63      	adds	r3, r4, #1
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	20ff      	movs	r0, #255	; 0xff
 80081ee:	f7ff ff7d 	bl	80080ec <nRF24_LL_RW>
 80081f2:	4603      	mov	r3, r0
 80081f4:	7023      	strb	r3, [r4, #0]
	while (count--)
 80081f6:	79bb      	ldrb	r3, [r7, #6]
 80081f8:	1e5a      	subs	r2, r3, #1
 80081fa:	71ba      	strb	r2, [r7, #6]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1f2      	bne.n	80081e6 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8008200:	f7ff ff68 	bl	80080d4 <nRF24_CSN_H>
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bd90      	pop	{r4, r7, pc}

0800820c <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
 8008218:	4613      	mov	r3, r2
 800821a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800821c:	f7ff ff4e 	bl	80080bc <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff ff62 	bl	80080ec <nRF24_LL_RW>
	while (count--)
 8008228:	e006      	b.n	8008238 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	603a      	str	r2, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff ff5a 	bl	80080ec <nRF24_LL_RW>
	while (count--)
 8008238:	79bb      	ldrb	r3, [r7, #6]
 800823a:	1e5a      	subs	r2, r3, #1
 800823c:	71ba      	strb	r2, [r7, #6]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1f3      	bne.n	800822a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8008242:	f7ff ff47 	bl	80080d4 <nRF24_CSN_H>
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 8008252:	2108      	movs	r1, #8
 8008254:	2000      	movs	r0, #0
 8008256:	f7ff ff7f 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 800825a:	213f      	movs	r1, #63	; 0x3f
 800825c:	2001      	movs	r0, #1
 800825e:	f7ff ff7b 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 8008262:	2103      	movs	r1, #3
 8008264:	2002      	movs	r0, #2
 8008266:	f7ff ff77 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 800826a:	2103      	movs	r1, #3
 800826c:	2003      	movs	r0, #3
 800826e:	f7ff ff73 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 8008272:	2103      	movs	r1, #3
 8008274:	2004      	movs	r0, #4
 8008276:	f7ff ff6f 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 800827a:	2102      	movs	r1, #2
 800827c:	2005      	movs	r0, #5
 800827e:	f7ff ff6b 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 8008282:	210e      	movs	r1, #14
 8008284:	2006      	movs	r0, #6
 8008286:	f7ff ff67 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800828a:	2100      	movs	r1, #0
 800828c:	2007      	movs	r0, #7
 800828e:	f7ff ff63 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8008292:	2100      	movs	r1, #0
 8008294:	2011      	movs	r0, #17
 8008296:	f7ff ff5f 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800829a:	2100      	movs	r1, #0
 800829c:	2012      	movs	r0, #18
 800829e:	f7ff ff5b 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 80082a2:	2100      	movs	r1, #0
 80082a4:	2013      	movs	r0, #19
 80082a6:	f7ff ff57 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80082aa:	2100      	movs	r1, #0
 80082ac:	2014      	movs	r0, #20
 80082ae:	f7ff ff53 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80082b2:	2100      	movs	r1, #0
 80082b4:	2015      	movs	r0, #21
 80082b6:	f7ff ff4f 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80082ba:	2100      	movs	r1, #0
 80082bc:	2016      	movs	r0, #22
 80082be:	f7ff ff4b 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80082c2:	2100      	movs	r1, #0
 80082c4:	201c      	movs	r0, #28
 80082c6:	f7ff ff47 	bl	8008158 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80082ca:	2100      	movs	r1, #0
 80082cc:	201d      	movs	r0, #29
 80082ce:	f7ff ff43 	bl	8008158 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 80082d2:	f000 f9a4 	bl	800861e <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 80082d6:	f000 f99a 	bl	800860e <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 80082da:	f000 f9a8 	bl	800862e <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 80082de:	f7ff fef9 	bl	80080d4 <nRF24_CSN_H>
}
 80082e2:	bf00      	nop
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80082ee:	4b14      	ldr	r3, [pc, #80]	; (8008340 <nRF24_Check+0x58>)
 80082f0:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80082f2:	2205      	movs	r2, #5
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	2030      	movs	r0, #48	; 0x30
 80082f8:	f7ff ff88 	bl	800820c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80082fc:	463b      	mov	r3, r7
 80082fe:	2205      	movs	r2, #5
 8008300:	4619      	mov	r1, r3
 8008302:	2010      	movs	r0, #16
 8008304:	f7ff ff60 	bl	80081c8 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
 800830c:	e010      	b.n	8008330 <nRF24_Check+0x48>
	{
		if (rxbuf[i] != *ptr++)
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	f107 0210 	add.w	r2, r7, #16
 8008314:	4413      	add	r3, r2
 8008316:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	1c59      	adds	r1, r3, #1
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	429a      	cmp	r2, r3
 8008324:	d001      	beq.n	800832a <nRF24_Check+0x42>
			return 0;
 8008326:	2300      	movs	r3, #0
 8008328:	e006      	b.n	8008338 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++)
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	3301      	adds	r3, #1
 800832e:	73fb      	strb	r3, [r7, #15]
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	2b04      	cmp	r3, #4
 8008334:	d9eb      	bls.n	800830e <nRF24_Check+0x26>
	}

	return 1;
 8008336:	2301      	movs	r3, #1
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	0800ab14 	.word	0x0800ab14

08008344 <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800834e:	2000      	movs	r0, #0
 8008350:	f7ff fee8 	bl	8008124 <nRF24_ReadReg>
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d104      	bne.n	8008368 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	f043 0302 	orr.w	r3, r3, #2
 8008364:	73fb      	strb	r3, [r7, #15]
 8008366:	e003      	b.n	8008370 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	f023 0302 	bic.w	r3, r3, #2
 800836e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	4619      	mov	r1, r3
 8008374:	2000      	movs	r0, #0
 8008376:	f7ff feef 	bl	8008158 <nRF24_WriteReg>
}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	4603      	mov	r3, r0
 800838a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800838c:	2000      	movs	r0, #0
 800838e:	f7ff fec9 	bl	8008124 <nRF24_ReadReg>
 8008392:	4603      	mov	r3, r0
 8008394:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	f023 0301 	bic.w	r3, r3, #1
 800839c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800839e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	b25a      	sxtb	r2, r3
 80083a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	b25b      	sxtb	r3, r3
 80083b0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	4619      	mov	r1, r3
 80083b6:	2000      	movs	r0, #0
 80083b8:	f7ff fece 	bl	8008158 <nRF24_WriteReg>
}
 80083bc:	bf00      	nop
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80083ce:	2000      	movs	r0, #0
 80083d0:	f7ff fea8 	bl	8008124 <nRF24_ReadReg>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	f023 030c 	bic.w	r3, r3, #12
 80083de:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80083e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083e4:	f003 030c 	and.w	r3, r3, #12
 80083e8:	b25a      	sxtb	r2, r3
 80083ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	b25b      	sxtb	r3, r3
 80083f2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	4619      	mov	r1, r3
 80083f8:	2000      	movs	r0, #0
 80083fa:	f7ff fead 	bl	8008158 <nRF24_WriteReg>
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	4603      	mov	r3, r0
 800840e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	4619      	mov	r1, r3
 8008414:	2005      	movs	r0, #5
 8008416:	f7ff fe9f 	bl	8008158 <nRF24_WriteReg>
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	4603      	mov	r3, r0
 800842a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	3b02      	subs	r3, #2
 8008430:	b2db      	uxtb	r3, r3
 8008432:	4619      	mov	r1, r3
 8008434:	2003      	movs	r0, #3
 8008436:	f7ff fe8f 	bl	8008158 <nRF24_WriteReg>
}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	2b06      	cmp	r3, #6
 8008454:	d83e      	bhi.n	80084d4 <nRF24_SetAddr+0x90>
 8008456:	a201      	add	r2, pc, #4	; (adr r2, 800845c <nRF24_SetAddr+0x18>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	08008479 	.word	0x08008479
 8008460:	08008479 	.word	0x08008479
 8008464:	080084c1 	.word	0x080084c1
 8008468:	080084c1 	.word	0x080084c1
 800846c:	080084c1 	.word	0x080084c1
 8008470:	080084c1 	.word	0x080084c1
 8008474:	08008479 	.word	0x08008479
	{
	case nRF24_PIPETX:
	case nRF24_PIPE0:
	case nRF24_PIPE1:
		// Lấy độ dài address
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8008478:	2003      	movs	r0, #3
 800847a:	f7ff fe53 	bl	8008124 <nRF24_ReadReg>
 800847e:	4603      	mov	r3, r0
 8008480:	3301      	adds	r3, #1
 8008482:	73fb      	strb	r3, [r7, #15]

		addr += addr_width;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	4413      	add	r3, r2
 800848a:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 800848c:	f7ff fe16 	bl	80080bc <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	4a13      	ldr	r2, [pc, #76]	; (80084e0 <nRF24_SetAddr+0x9c>)
 8008494:	5cd3      	ldrb	r3, [r2, r3]
 8008496:	f043 0320 	orr.w	r3, r3, #32
 800849a:	b2db      	uxtb	r3, r3
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff fe25 	bl	80080ec <nRF24_LL_RW>
		do
		{
			nRF24_LL_RW(*addr--);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	1e5a      	subs	r2, r3, #1
 80084a6:	603a      	str	r2, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff fe1e 	bl	80080ec <nRF24_LL_RW>
		} while (addr_width--);
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	1e5a      	subs	r2, r3, #1
 80084b4:	73fa      	strb	r2, [r7, #15]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1f3      	bne.n	80084a2 <nRF24_SetAddr+0x5e>
		nRF24_CSN_H();
 80084ba:	f7ff fe0b 	bl	80080d4 <nRF24_CSN_H>
		break;
 80084be:	e00a      	b.n	80084d6 <nRF24_SetAddr+0x92>
	case nRF24_PIPE2:
	case nRF24_PIPE3:
	case nRF24_PIPE4:
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	4a07      	ldr	r2, [pc, #28]	; (80084e0 <nRF24_SetAddr+0x9c>)
 80084c4:	5cd2      	ldrb	r2, [r2, r3]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	4619      	mov	r1, r3
 80084cc:	4610      	mov	r0, r2
 80084ce:	f7ff fe43 	bl	8008158 <nRF24_WriteReg>
		break;
 80084d2:	e000      	b.n	80084d6 <nRF24_SetAddr+0x92>
	default:
		break;
 80084d4:	bf00      	nop
	}
}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	0800ab24 	.word	0x0800ab24

080084e4 <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80084ee:	2006      	movs	r0, #6
 80084f0:	f7ff fe18 	bl	8008124 <nRF24_ReadReg>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	f023 0306 	bic.w	r3, r3, #6
 80084fe:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8008500:	7bfa      	ldrb	r2, [r7, #15]
 8008502:	79fb      	ldrb	r3, [r7, #7]
 8008504:	4313      	orrs	r3, r2
 8008506:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	4619      	mov	r1, r3
 800850c:	2006      	movs	r0, #6
 800850e:	f7ff fe23 	bl	8008158 <nRF24_WriteReg>
}
 8008512:	bf00      	nop
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	4603      	mov	r3, r0
 8008522:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8008524:	2006      	movs	r0, #6
 8008526:	f7ff fdfd 	bl	8008124 <nRF24_ReadReg>
 800852a:	4603      	mov	r3, r0
 800852c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8008534:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8008536:	7bfa      	ldrb	r2, [r7, #15]
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	4313      	orrs	r3, r2
 800853c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	4619      	mov	r1, r3
 8008542:	2006      	movs	r0, #6
 8008544:	f7ff fe08 	bl	8008158 <nRF24_WriteReg>
}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <nRF24_SetRXPipe>:
 * @param pipe Pipe cần cấu hình
 * @param aa_state Bật phản hồi ACK hay không (nRF24_AA_ON or nRF24_AA_OFF)
 * @param payload_len độ dài của payload
 */
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	4603      	mov	r3, r0
 8008558:	71fb      	strb	r3, [r7, #7]
 800855a:	460b      	mov	r3, r1
 800855c:	71bb      	strb	r3, [r7, #6]
 800855e:	4613      	mov	r3, r2
 8008560:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8008562:	2002      	movs	r0, #2
 8008564:	f7ff fdde 	bl	8008124 <nRF24_ReadReg>
 8008568:	4603      	mov	r3, r0
 800856a:	b25a      	sxtb	r2, r3
 800856c:	79fb      	ldrb	r3, [r7, #7]
 800856e:	2101      	movs	r1, #1
 8008570:	fa01 f303 	lsl.w	r3, r1, r3
 8008574:	b25b      	sxtb	r3, r3
 8008576:	4313      	orrs	r3, r2
 8008578:	b25b      	sxtb	r3, r3
 800857a:	b2db      	uxtb	r3, r3
 800857c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008580:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	4619      	mov	r1, r3
 8008586:	2002      	movs	r0, #2
 8008588:	f7ff fde6 	bl	8008158 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	4a19      	ldr	r2, [pc, #100]	; (80085f4 <nRF24_SetRXPipe+0xa4>)
 8008590:	5cd2      	ldrb	r2, [r2, r3]
 8008592:	797b      	ldrb	r3, [r7, #5]
 8008594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008598:	b2db      	uxtb	r3, r3
 800859a:	4619      	mov	r1, r3
 800859c:	4610      	mov	r0, r2
 800859e:	f7ff fddb 	bl	8008158 <nRF24_WriteReg>

	// Set auto acknowledgment
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80085a2:	2001      	movs	r0, #1
 80085a4:	f7ff fdbe 	bl	8008124 <nRF24_ReadReg>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON)
 80085ac:	79bb      	ldrb	r3, [r7, #6]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d10a      	bne.n	80085c8 <nRF24_SetRXPipe+0x78>
	{
		reg |= (1 << pipe);
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	2201      	movs	r2, #1
 80085b6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ba:	b25a      	sxtb	r2, r3
 80085bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b25b      	sxtb	r3, r3
 80085c4:	73fb      	strb	r3, [r7, #15]
 80085c6:	e00b      	b.n	80085e0 <nRF24_SetRXPipe+0x90>
	}
	else
	{
		reg &= ~(1 << pipe);
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	2201      	movs	r2, #1
 80085cc:	fa02 f303 	lsl.w	r3, r2, r3
 80085d0:	b25b      	sxtb	r3, r3
 80085d2:	43db      	mvns	r3, r3
 80085d4:	b25a      	sxtb	r2, r3
 80085d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085da:	4013      	ands	r3, r2
 80085dc:	b25b      	sxtb	r3, r3
 80085de:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	4619      	mov	r1, r3
 80085e4:	2001      	movs	r0, #1
 80085e6:	f7ff fdb7 	bl	8008158 <nRF24_WriteReg>
}
 80085ea:	bf00      	nop
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	0800ab1c 	.word	0x0800ab1c

080085f8 <nRF24_GetStatus_RXFIFO>:
 * @brief Lấy tastus RX FIFO
 *
 * @return uint8_t one of the nRF24_STATUS_RXFIFO_xx values
 */
uint8_t nRF24_GetStatus_RXFIFO(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 80085fc:	2017      	movs	r0, #23
 80085fe:	f7ff fd91 	bl	8008124 <nRF24_ReadReg>
 8008602:	4603      	mov	r3, r0
 8008604:	f003 0303 	and.w	r3, r3, #3
 8008608:	b2db      	uxtb	r3, r3
}
 800860a:	4618      	mov	r0, r3
 800860c:	bd80      	pop	{r7, pc}

0800860e <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8008612:	21ff      	movs	r1, #255	; 0xff
 8008614:	20e1      	movs	r0, #225	; 0xe1
 8008616:	f7ff fd9f 	bl	8008158 <nRF24_WriteReg>
}
 800861a:	bf00      	nop
 800861c:	bd80      	pop	{r7, pc}

0800861e <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8008622:	21ff      	movs	r1, #255	; 0xff
 8008624:	20e2      	movs	r0, #226	; 0xe2
 8008626:	f7ff fd97 	bl	8008158 <nRF24_WriteReg>
}
 800862a:	bf00      	nop
 800862c:	bd80      	pop	{r7, pc}

0800862e <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8008634:	2007      	movs	r0, #7
 8008636:	f7ff fd75 	bl	8008124 <nRF24_ReadReg>
 800863a:	4603      	mov	r3, r0
 800863c:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8008644:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	4619      	mov	r1, r3
 800864a:	2007      	movs	r0, #7
 800864c:	f7ff fd84 	bl	8008158 <nRF24_WriteReg>
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <nRF24_GetRxDplPayloadWidth>:
 * @brief đọc chiều dài của RX payload
 *
 * @return uint8_t độ dài
 */
static uint8_t nRF24_GetRxDplPayloadWidth()
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 800865e:	f7ff fd2d 	bl	80080bc <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8008662:	2060      	movs	r0, #96	; 0x60
 8008664:	f7ff fd42 	bl	80080ec <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8008668:	20ff      	movs	r0, #255	; 0xff
 800866a:	f7ff fd3f 	bl	80080ec <nRF24_LL_RW>
 800866e:	4603      	mov	r3, r0
 8008670:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8008672:	f7ff fd2f 	bl	80080d4 <nRF24_CSN_H>

	return value;
 8008676:	79fb      	ldrb	r3, [r7, #7]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800868e:	2007      	movs	r0, #7
 8008690:	f7ff fd48 	bl	8008124 <nRF24_ReadReg>
 8008694:	4603      	mov	r3, r0
 8008696:	105b      	asrs	r3, r3, #1
 8008698:	b2db      	uxtb	r3, r3
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6)
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	2b05      	cmp	r3, #5
 80086a4:	d829      	bhi.n	80086fa <nRF24_ReadPayloadGeneric+0x7a>
	{
		// Get payload length
		if (dpl)
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00f      	beq.n	80086cc <nRF24_ReadPayloadGeneric+0x4c>
		{
			*length = nRF24_GetRxDplPayloadWidth();
 80086ac:	f7ff ffd4 	bl	8008658 <nRF24_GetRxDplPayloadWidth>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	701a      	strb	r2, [r3, #0]
			if (*length > 32)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d90f      	bls.n	80086e0 <nRF24_ReadPayloadGeneric+0x60>
			{ // broken packet
				*length = 0;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 80086c6:	f7ff ffaa 	bl	800861e <nRF24_FlushRX>
 80086ca:	e009      	b.n	80086e0 <nRF24_ReadPayloadGeneric+0x60>
			}
		}
		else
		{
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]); // đọc payload của pipe x
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	4a0f      	ldr	r2, [pc, #60]	; (800870c <nRF24_ReadPayloadGeneric+0x8c>)
 80086d0:	5cd3      	ldrb	r3, [r2, r3]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fd26 	bl	8008124 <nRF24_ReadReg>
 80086d8:	4603      	mov	r3, r0
 80086da:	461a      	mov	r2, r3
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	701a      	strb	r2, [r3, #0]
		}

		// đọc payload từ RX FIFO
		if (*length)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d006      	beq.n	80086f6 <nRF24_ReadPayloadGeneric+0x76>
		{
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	2061      	movs	r0, #97	; 0x61
 80086f2:	f7ff fd69 	bl	80081c8 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	e003      	b.n	8008702 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2200      	movs	r2, #0
 80086fe:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8008700:	23ff      	movs	r3, #255	; 0xff
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	0800ab1c 	.word	0x0800ab1c

08008710 <nRF24_ReadPayload>:
 * @return   nRF24_RX_PIPEX - đã nhận được dữ liệu từ pipe x
 * @return	 nRF24_RX_EMPTY - the RX FIFO đéo có cc gì
 *
 */
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length, 0);
 800871a:	2200      	movs	r2, #0
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff ffae 	bl	8008680 <nRF24_ReadPayloadGeneric>
 8008724:	4603      	mov	r3, r0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <calculate_PID>:

//-----------------------------------------------------------------------------
// calculate PID
//-----------------------------------------------------------------------------
void calculate_PID(uint16_t roll_rc, uint16_t pitch_rc, uint16_t yaw_rc, float roll_angle, float pitch_angle, float yaw_angle, PID_t *PID_out)
{
 8008730:	b5b0      	push	{r4, r5, r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	607b      	str	r3, [r7, #4]
 8008738:	4603      	mov	r3, r0
 800873a:	81fb      	strh	r3, [r7, #14]
 800873c:	460b      	mov	r3, r1
 800873e:	81bb      	strh	r3, [r7, #12]
 8008740:	4613      	mov	r3, r2
 8008742:	817b      	strh	r3, [r7, #10]
    // set a dead band at zero to improve stability on roll
    if (roll_rc > 1500 || roll_rc < 1440)
 8008744:	89fb      	ldrh	r3, [r7, #14]
 8008746:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800874a:	4293      	cmp	r3, r2
 800874c:	d803      	bhi.n	8008756 <calculate_PID+0x26>
 800874e:	89fb      	ldrh	r3, [r7, #14]
 8008750:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8008754:	d207      	bcs.n	8008766 <calculate_PID+0x36>
    {
        setpoint_roll = roll_rc;
 8008756:	89fb      	ldrh	r3, [r7, #14]
 8008758:	4618      	mov	r0, r3
 800875a:	f7f8 fa8b 	bl	8000c74 <__aeabi_ui2f>
 800875e:	4602      	mov	r2, r0
 8008760:	4b1b      	ldr	r3, [pc, #108]	; (80087d0 <calculate_PID+0xa0>)
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	e002      	b.n	800876c <calculate_PID+0x3c>
    }
    else
    {
        setpoint_roll = 1500;
 8008766:	4b1a      	ldr	r3, [pc, #104]	; (80087d0 <calculate_PID+0xa0>)
 8008768:	4a1a      	ldr	r2, [pc, #104]	; (80087d4 <calculate_PID+0xa4>)
 800876a:	601a      	str	r2, [r3, #0]
    }

    // set a dead band at zero to improve stability on pitch
    if (pitch_rc > 1540 || pitch_rc < 1440)
 800876c:	89bb      	ldrh	r3, [r7, #12]
 800876e:	f240 6204 	movw	r2, #1540	; 0x604
 8008772:	4293      	cmp	r3, r2
 8008774:	d803      	bhi.n	800877e <calculate_PID+0x4e>
 8008776:	89bb      	ldrh	r3, [r7, #12]
 8008778:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800877c:	d207      	bcs.n	800878e <calculate_PID+0x5e>
    {
        setpoint_pitch = pitch_rc;
 800877e:	89bb      	ldrh	r3, [r7, #12]
 8008780:	4618      	mov	r0, r3
 8008782:	f7f8 fa77 	bl	8000c74 <__aeabi_ui2f>
 8008786:	4602      	mov	r2, r0
 8008788:	4b13      	ldr	r3, [pc, #76]	; (80087d8 <calculate_PID+0xa8>)
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	e002      	b.n	8008794 <calculate_PID+0x64>
    }
    else
    {
        setpoint_pitch = 1500;
 800878e:	4b12      	ldr	r3, [pc, #72]	; (80087d8 <calculate_PID+0xa8>)
 8008790:	4a10      	ldr	r2, [pc, #64]	; (80087d4 <calculate_PID+0xa4>)
 8008792:	601a      	str	r2, [r3, #0]
    }

    // set a dead band at zero to improve stability on yaw
    if (yaw_rc > 1390)
 8008794:	897b      	ldrh	r3, [r7, #10]
 8008796:	f240 526e 	movw	r2, #1390	; 0x56e
 800879a:	4293      	cmp	r3, r2
 800879c:	d920      	bls.n	80087e0 <calculate_PID+0xb0>
    {
        setpoint_yaw = setpoint_yaw + 0.7;
 800879e:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <calculate_PID+0xac>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7f7 fe38 	bl	8000418 <__aeabi_f2d>
 80087a8:	a307      	add	r3, pc, #28	; (adr r3, 80087c8 <calculate_PID+0x98>)
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f7f7 fcd5 	bl	800015c <__adddf3>
 80087b2:	4603      	mov	r3, r0
 80087b4:	460c      	mov	r4, r1
 80087b6:	4618      	mov	r0, r3
 80087b8:	4621      	mov	r1, r4
 80087ba:	f7f8 f955 	bl	8000a68 <__aeabi_d2f>
 80087be:	4602      	mov	r2, r0
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <calculate_PID+0xac>)
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	e024      	b.n	8008810 <calculate_PID+0xe0>
 80087c6:	bf00      	nop
 80087c8:	66666666 	.word	0x66666666
 80087cc:	3fe66666 	.word	0x3fe66666
 80087d0:	20000100 	.word	0x20000100
 80087d4:	44bb8000 	.word	0x44bb8000
 80087d8:	20000104 	.word	0x20000104
 80087dc:	20000108 	.word	0x20000108
    }
    else if (yaw_rc < 1357)
 80087e0:	897b      	ldrh	r3, [r7, #10]
 80087e2:	f240 524c 	movw	r2, #1356	; 0x54c
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d812      	bhi.n	8008810 <calculate_PID+0xe0>
    {
        setpoint_yaw = setpoint_yaw - 0.7;
 80087ea:	4bbb      	ldr	r3, [pc, #748]	; (8008ad8 <calculate_PID+0x3a8>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f7 fe12 	bl	8000418 <__aeabi_f2d>
 80087f4:	a3ac      	add	r3, pc, #688	; (adr r3, 8008aa8 <calculate_PID+0x378>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fcad 	bl	8000158 <__aeabi_dsub>
 80087fe:	4603      	mov	r3, r0
 8008800:	460c      	mov	r4, r1
 8008802:	4618      	mov	r0, r3
 8008804:	4621      	mov	r1, r4
 8008806:	f7f8 f92f 	bl	8000a68 <__aeabi_d2f>
 800880a:	4602      	mov	r2, r0
 800880c:	4bb2      	ldr	r3, [pc, #712]	; (8008ad8 <calculate_PID+0x3a8>)
 800880e:	601a      	str	r2, [r3, #0]
    }

    // pitch PID calculations
    error = setpoint_pitch - pitch_angle * 12.5 - 1500;
 8008810:	4bb2      	ldr	r3, [pc, #712]	; (8008adc <calculate_PID+0x3ac>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f7f7 fdff 	bl	8000418 <__aeabi_f2d>
 800881a:	4604      	mov	r4, r0
 800881c:	460d      	mov	r5, r1
 800881e:	6a38      	ldr	r0, [r7, #32]
 8008820:	f7f7 fdfa 	bl	8000418 <__aeabi_f2d>
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	4bad      	ldr	r3, [pc, #692]	; (8008ae0 <calculate_PID+0x3b0>)
 800882a:	f7f7 fe4d 	bl	80004c8 <__aeabi_dmul>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4620      	mov	r0, r4
 8008834:	4629      	mov	r1, r5
 8008836:	f7f7 fc8f 	bl	8000158 <__aeabi_dsub>
 800883a:	4603      	mov	r3, r0
 800883c:	460c      	mov	r4, r1
 800883e:	4618      	mov	r0, r3
 8008840:	4621      	mov	r1, r4
 8008842:	a39b      	add	r3, pc, #620	; (adr r3, 8008ab0 <calculate_PID+0x380>)
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	f7f7 fc86 	bl	8000158 <__aeabi_dsub>
 800884c:	4603      	mov	r3, r0
 800884e:	460c      	mov	r4, r1
 8008850:	4618      	mov	r0, r3
 8008852:	4621      	mov	r1, r4
 8008854:	f7f8 f908 	bl	8000a68 <__aeabi_d2f>
 8008858:	4602      	mov	r2, r0
 800885a:	4ba2      	ldr	r3, [pc, #648]	; (8008ae4 <calculate_PID+0x3b4>)
 800885c:	601a      	str	r2, [r3, #0]
    Pterm_pitch = error * Kp_pitch;
 800885e:	4ba1      	ldr	r3, [pc, #644]	; (8008ae4 <calculate_PID+0x3b4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8008866:	4618      	mov	r0, r3
 8008868:	f7f8 fa5c 	bl	8000d24 <__aeabi_fmul>
 800886c:	4603      	mov	r3, r0
 800886e:	461a      	mov	r2, r3
 8008870:	4b9d      	ldr	r3, [pc, #628]	; (8008ae8 <calculate_PID+0x3b8>)
 8008872:	601a      	str	r2, [r3, #0]
    Iterm_pitch += (error + last_error_pitch) * Ki_pitch * dt / 2;
 8008874:	4b9d      	ldr	r3, [pc, #628]	; (8008aec <calculate_PID+0x3bc>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4618      	mov	r0, r3
 800887a:	f7f7 fdcd 	bl	8000418 <__aeabi_f2d>
 800887e:	4604      	mov	r4, r0
 8008880:	460d      	mov	r5, r1
 8008882:	4b98      	ldr	r3, [pc, #608]	; (8008ae4 <calculate_PID+0x3b4>)
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	4b9a      	ldr	r3, [pc, #616]	; (8008af0 <calculate_PID+0x3c0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4619      	mov	r1, r3
 800888c:	4610      	mov	r0, r2
 800888e:	f7f8 f941 	bl	8000b14 <__addsf3>
 8008892:	4603      	mov	r3, r0
 8008894:	4618      	mov	r0, r3
 8008896:	f7f7 fdbf 	bl	8000418 <__aeabi_f2d>
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	f04f 0300 	mov.w	r3, #0
 80088a2:	f7f7 fe11 	bl	80004c8 <__aeabi_dmul>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4610      	mov	r0, r2
 80088ac:	4619      	mov	r1, r3
 80088ae:	a382      	add	r3, pc, #520	; (adr r3, 8008ab8 <calculate_PID+0x388>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	f7f7 fe08 	bl	80004c8 <__aeabi_dmul>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4610      	mov	r0, r2
 80088be:	4619      	mov	r1, r3
 80088c0:	f04f 0200 	mov.w	r2, #0
 80088c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088c8:	f7f7 ff28 	bl	800071c <__aeabi_ddiv>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4620      	mov	r0, r4
 80088d2:	4629      	mov	r1, r5
 80088d4:	f7f7 fc42 	bl	800015c <__adddf3>
 80088d8:	4603      	mov	r3, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	4618      	mov	r0, r3
 80088de:	4621      	mov	r1, r4
 80088e0:	f7f8 f8c2 	bl	8000a68 <__aeabi_d2f>
 80088e4:	4602      	mov	r2, r0
 80088e6:	4b81      	ldr	r3, [pc, #516]	; (8008aec <calculate_PID+0x3bc>)
 80088e8:	601a      	str	r2, [r3, #0]
    Dterm_pitch = (error - last_error_pitch) * Kd_pitch / dt;
 80088ea:	4b7e      	ldr	r3, [pc, #504]	; (8008ae4 <calculate_PID+0x3b4>)
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4b80      	ldr	r3, [pc, #512]	; (8008af0 <calculate_PID+0x3c0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f7f8 f90b 	bl	8000b10 <__aeabi_fsub>
 80088fa:	4603      	mov	r3, r0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7f7 fd8b 	bl	8000418 <__aeabi_f2d>
 8008902:	a36f      	add	r3, pc, #444	; (adr r3, 8008ac0 <calculate_PID+0x390>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f7 fdde 	bl	80004c8 <__aeabi_dmul>
 800890c:	4603      	mov	r3, r0
 800890e:	460c      	mov	r4, r1
 8008910:	4618      	mov	r0, r3
 8008912:	4621      	mov	r1, r4
 8008914:	a368      	add	r3, pc, #416	; (adr r3, 8008ab8 <calculate_PID+0x388>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f7f7 feff 	bl	800071c <__aeabi_ddiv>
 800891e:	4603      	mov	r3, r0
 8008920:	460c      	mov	r4, r1
 8008922:	4618      	mov	r0, r3
 8008924:	4621      	mov	r1, r4
 8008926:	f7f8 f89f 	bl	8000a68 <__aeabi_d2f>
 800892a:	4602      	mov	r2, r0
 800892c:	4b71      	ldr	r3, [pc, #452]	; (8008af4 <calculate_PID+0x3c4>)
 800892e:	601a      	str	r2, [r3, #0]
    last_error_pitch = error;
 8008930:	4b6c      	ldr	r3, [pc, #432]	; (8008ae4 <calculate_PID+0x3b4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a6e      	ldr	r2, [pc, #440]	; (8008af0 <calculate_PID+0x3c0>)
 8008936:	6013      	str	r3, [r2, #0]
    PID_pitch_out = Pterm_pitch + Iterm_pitch + Dterm_pitch;
 8008938:	4b6b      	ldr	r3, [pc, #428]	; (8008ae8 <calculate_PID+0x3b8>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	4b6b      	ldr	r3, [pc, #428]	; (8008aec <calculate_PID+0x3bc>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7f8 f8e6 	bl	8000b14 <__addsf3>
 8008948:	4603      	mov	r3, r0
 800894a:	461a      	mov	r2, r3
 800894c:	4b69      	ldr	r3, [pc, #420]	; (8008af4 <calculate_PID+0x3c4>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f7f8 f8de 	bl	8000b14 <__addsf3>
 8008958:	4603      	mov	r3, r0
 800895a:	461a      	mov	r2, r3
 800895c:	4b66      	ldr	r3, [pc, #408]	; (8008af8 <calculate_PID+0x3c8>)
 800895e:	601a      	str	r2, [r3, #0]
    if (PID_pitch_out > MAX_pitch_output)
 8008960:	4b65      	ldr	r3, [pc, #404]	; (8008af8 <calculate_PID+0x3c8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4965      	ldr	r1, [pc, #404]	; (8008afc <calculate_PID+0x3cc>)
 8008966:	4618      	mov	r0, r3
 8008968:	f7f8 fb98 	bl	800109c <__aeabi_fcmpgt>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <calculate_PID+0x248>
        PID_pitch_out = MAX_pitch_output;
 8008972:	4b61      	ldr	r3, [pc, #388]	; (8008af8 <calculate_PID+0x3c8>)
 8008974:	4a61      	ldr	r2, [pc, #388]	; (8008afc <calculate_PID+0x3cc>)
 8008976:	601a      	str	r2, [r3, #0]
    if (PID_pitch_out < -MAX_pitch_output)
 8008978:	4b5f      	ldr	r3, [pc, #380]	; (8008af8 <calculate_PID+0x3c8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4960      	ldr	r1, [pc, #384]	; (8008b00 <calculate_PID+0x3d0>)
 800897e:	4618      	mov	r0, r3
 8008980:	f7f8 fb6e 	bl	8001060 <__aeabi_fcmplt>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <calculate_PID+0x260>
        PID_pitch_out = -MAX_pitch_output;
 800898a:	4b5b      	ldr	r3, [pc, #364]	; (8008af8 <calculate_PID+0x3c8>)
 800898c:	4a5c      	ldr	r2, [pc, #368]	; (8008b00 <calculate_PID+0x3d0>)
 800898e:	601a      	str	r2, [r3, #0]

    // roll PID calculations
    error = setpoint_roll + roll_angle * 12.5 - 1500;
 8008990:	4b5c      	ldr	r3, [pc, #368]	; (8008b04 <calculate_PID+0x3d4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f7f7 fd3f 	bl	8000418 <__aeabi_f2d>
 800899a:	4604      	mov	r4, r0
 800899c:	460d      	mov	r5, r1
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7f7 fd3a 	bl	8000418 <__aeabi_f2d>
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	4b4d      	ldr	r3, [pc, #308]	; (8008ae0 <calculate_PID+0x3b0>)
 80089aa:	f7f7 fd8d 	bl	80004c8 <__aeabi_dmul>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4620      	mov	r0, r4
 80089b4:	4629      	mov	r1, r5
 80089b6:	f7f7 fbd1 	bl	800015c <__adddf3>
 80089ba:	4603      	mov	r3, r0
 80089bc:	460c      	mov	r4, r1
 80089be:	4618      	mov	r0, r3
 80089c0:	4621      	mov	r1, r4
 80089c2:	a33b      	add	r3, pc, #236	; (adr r3, 8008ab0 <calculate_PID+0x380>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	f7f7 fbc6 	bl	8000158 <__aeabi_dsub>
 80089cc:	4603      	mov	r3, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	4618      	mov	r0, r3
 80089d2:	4621      	mov	r1, r4
 80089d4:	f7f8 f848 	bl	8000a68 <__aeabi_d2f>
 80089d8:	4602      	mov	r2, r0
 80089da:	4b42      	ldr	r3, [pc, #264]	; (8008ae4 <calculate_PID+0x3b4>)
 80089dc:	601a      	str	r2, [r3, #0]
    Pterm_roll = error * Kp_roll;
 80089de:	4b41      	ldr	r3, [pc, #260]	; (8008ae4 <calculate_PID+0x3b4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7f7 fd18 	bl	8000418 <__aeabi_f2d>
 80089e8:	a337      	add	r3, pc, #220	; (adr r3, 8008ac8 <calculate_PID+0x398>)
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f7f7 fd6b 	bl	80004c8 <__aeabi_dmul>
 80089f2:	4603      	mov	r3, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	4618      	mov	r0, r3
 80089f8:	4621      	mov	r1, r4
 80089fa:	f7f8 f835 	bl	8000a68 <__aeabi_d2f>
 80089fe:	4602      	mov	r2, r0
 8008a00:	4b41      	ldr	r3, [pc, #260]	; (8008b08 <calculate_PID+0x3d8>)
 8008a02:	601a      	str	r2, [r3, #0]
    Iterm_roll += (error + last_error_roll) * Ki_roll * dt / 2;
 8008a04:	4b41      	ldr	r3, [pc, #260]	; (8008b0c <calculate_PID+0x3dc>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f7 fd05 	bl	8000418 <__aeabi_f2d>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	4b34      	ldr	r3, [pc, #208]	; (8008ae4 <calculate_PID+0x3b4>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	4b3e      	ldr	r3, [pc, #248]	; (8008b10 <calculate_PID+0x3e0>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	f7f8 f879 	bl	8000b14 <__addsf3>
 8008a22:	4603      	mov	r3, r0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7f7 fcf7 	bl	8000418 <__aeabi_f2d>
 8008a2a:	f04f 0200 	mov.w	r2, #0
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	f7f7 fd49 	bl	80004c8 <__aeabi_dmul>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	a31e      	add	r3, pc, #120	; (adr r3, 8008ab8 <calculate_PID+0x388>)
 8008a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a44:	f7f7 fd40 	bl	80004c8 <__aeabi_dmul>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4619      	mov	r1, r3
 8008a50:	f04f 0200 	mov.w	r2, #0
 8008a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a58:	f7f7 fe60 	bl	800071c <__aeabi_ddiv>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4620      	mov	r0, r4
 8008a62:	4629      	mov	r1, r5
 8008a64:	f7f7 fb7a 	bl	800015c <__adddf3>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	4621      	mov	r1, r4
 8008a70:	f7f7 fffa 	bl	8000a68 <__aeabi_d2f>
 8008a74:	4602      	mov	r2, r0
 8008a76:	4b25      	ldr	r3, [pc, #148]	; (8008b0c <calculate_PID+0x3dc>)
 8008a78:	601a      	str	r2, [r3, #0]
    Dterm_roll = (error - last_error_roll) * Kd_roll / dt;
 8008a7a:	4b1a      	ldr	r3, [pc, #104]	; (8008ae4 <calculate_PID+0x3b4>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	4b24      	ldr	r3, [pc, #144]	; (8008b10 <calculate_PID+0x3e0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f7f8 f843 	bl	8000b10 <__aeabi_fsub>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7f7 fcc3 	bl	8000418 <__aeabi_f2d>
 8008a92:	a30f      	add	r3, pc, #60	; (adr r3, 8008ad0 <calculate_PID+0x3a0>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f7f7 fd16 	bl	80004c8 <__aeabi_dmul>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	e036      	b.n	8008b14 <calculate_PID+0x3e4>
 8008aa6:	bf00      	nop
 8008aa8:	66666666 	.word	0x66666666
 8008aac:	3fe66666 	.word	0x3fe66666
 8008ab0:	00000000 	.word	0x00000000
 8008ab4:	40977000 	.word	0x40977000
 8008ab8:	47ae147b 	.word	0x47ae147b
 8008abc:	3f847ae1 	.word	0x3f847ae1
 8008ac0:	66666666 	.word	0x66666666
 8008ac4:	400a6666 	.word	0x400a6666
 8008ac8:	9999999a 	.word	0x9999999a
 8008acc:	3fd99999 	.word	0x3fd99999
 8008ad0:	33333333 	.word	0x33333333
 8008ad4:	40133333 	.word	0x40133333
 8008ad8:	20000108 	.word	0x20000108
 8008adc:	20000104 	.word	0x20000104
 8008ae0:	40290000 	.word	0x40290000
 8008ae4:	200003a4 	.word	0x200003a4
 8008ae8:	200003a8 	.word	0x200003a8
 8008aec:	200003a0 	.word	0x200003a0
 8008af0:	20000398 	.word	0x20000398
 8008af4:	200003b0 	.word	0x200003b0
 8008af8:	2000039c 	.word	0x2000039c
 8008afc:	43e30000 	.word	0x43e30000
 8008b00:	c3e30000 	.word	0xc3e30000
 8008b04:	20000100 	.word	0x20000100
 8008b08:	200003b8 	.word	0x200003b8
 8008b0c:	20000394 	.word	0x20000394
 8008b10:	200003ac 	.word	0x200003ac
 8008b14:	a38e      	add	r3, pc, #568	; (adr r3, 8008d50 <calculate_PID+0x620>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 fdff 	bl	800071c <__aeabi_ddiv>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	460c      	mov	r4, r1
 8008b22:	4618      	mov	r0, r3
 8008b24:	4621      	mov	r1, r4
 8008b26:	f7f7 ff9f 	bl	8000a68 <__aeabi_d2f>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	4b8c      	ldr	r3, [pc, #560]	; (8008d60 <calculate_PID+0x630>)
 8008b2e:	601a      	str	r2, [r3, #0]
    last_error_roll = error;
 8008b30:	4b8c      	ldr	r3, [pc, #560]	; (8008d64 <calculate_PID+0x634>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a8c      	ldr	r2, [pc, #560]	; (8008d68 <calculate_PID+0x638>)
 8008b36:	6013      	str	r3, [r2, #0]
    PID_roll_out = Pterm_roll + Iterm_roll + Dterm_roll;
 8008b38:	4b8c      	ldr	r3, [pc, #560]	; (8008d6c <calculate_PID+0x63c>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4b8c      	ldr	r3, [pc, #560]	; (8008d70 <calculate_PID+0x640>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f7f7 ffe6 	bl	8000b14 <__addsf3>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4b84      	ldr	r3, [pc, #528]	; (8008d60 <calculate_PID+0x630>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f7f7 ffde 	bl	8000b14 <__addsf3>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	4b85      	ldr	r3, [pc, #532]	; (8008d74 <calculate_PID+0x644>)
 8008b5e:	601a      	str	r2, [r3, #0]
    if (PID_roll_out > MAX_roll_output)
 8008b60:	4b84      	ldr	r3, [pc, #528]	; (8008d74 <calculate_PID+0x644>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4984      	ldr	r1, [pc, #528]	; (8008d78 <calculate_PID+0x648>)
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7f8 fa98 	bl	800109c <__aeabi_fcmpgt>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <calculate_PID+0x448>
        PID_roll_out = MAX_roll_output;
 8008b72:	4b80      	ldr	r3, [pc, #512]	; (8008d74 <calculate_PID+0x644>)
 8008b74:	4a80      	ldr	r2, [pc, #512]	; (8008d78 <calculate_PID+0x648>)
 8008b76:	601a      	str	r2, [r3, #0]
    if (PID_roll_out < -MAX_roll_output)
 8008b78:	4b7e      	ldr	r3, [pc, #504]	; (8008d74 <calculate_PID+0x644>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	497f      	ldr	r1, [pc, #508]	; (8008d7c <calculate_PID+0x64c>)
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7f8 fa6e 	bl	8001060 <__aeabi_fcmplt>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <calculate_PID+0x460>
        PID_roll_out = -MAX_roll_output;
 8008b8a:	4b7a      	ldr	r3, [pc, #488]	; (8008d74 <calculate_PID+0x644>)
 8008b8c:	4a7b      	ldr	r2, [pc, #492]	; (8008d7c <calculate_PID+0x64c>)
 8008b8e:	601a      	str	r2, [r3, #0]

    // yaw PID calculations
    error = (setpoint_yaw + abs_yaw_angle) * 12.5;
 8008b90:	4b7b      	ldr	r3, [pc, #492]	; (8008d80 <calculate_PID+0x650>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	4b7b      	ldr	r3, [pc, #492]	; (8008d84 <calculate_PID+0x654>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f7f7 ffba 	bl	8000b14 <__addsf3>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	4979      	ldr	r1, [pc, #484]	; (8008d88 <calculate_PID+0x658>)
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7f8 f8bd 	bl	8000d24 <__aeabi_fmul>
 8008baa:	4603      	mov	r3, r0
 8008bac:	461a      	mov	r2, r3
 8008bae:	4b6d      	ldr	r3, [pc, #436]	; (8008d64 <calculate_PID+0x634>)
 8008bb0:	601a      	str	r2, [r3, #0]
    Pterm_yaw = error * Kp_yaw;
 8008bb2:	4b6c      	ldr	r3, [pc, #432]	; (8008d64 <calculate_PID+0x634>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7f7 fc2e 	bl	8000418 <__aeabi_f2d>
 8008bbc:	a366      	add	r3, pc, #408	; (adr r3, 8008d58 <calculate_PID+0x628>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f7 fc81 	bl	80004c8 <__aeabi_dmul>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	460c      	mov	r4, r1
 8008bca:	4618      	mov	r0, r3
 8008bcc:	4621      	mov	r1, r4
 8008bce:	f7f7 ff4b 	bl	8000a68 <__aeabi_d2f>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	4b6d      	ldr	r3, [pc, #436]	; (8008d8c <calculate_PID+0x65c>)
 8008bd6:	601a      	str	r2, [r3, #0]
    Iterm_yaw += (error + last_error_yaw) * Ki_yaw * dt / 2;
 8008bd8:	4b6d      	ldr	r3, [pc, #436]	; (8008d90 <calculate_PID+0x660>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7f7 fc1b 	bl	8000418 <__aeabi_f2d>
 8008be2:	4604      	mov	r4, r0
 8008be4:	460d      	mov	r5, r1
 8008be6:	4b5f      	ldr	r3, [pc, #380]	; (8008d64 <calculate_PID+0x634>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4b6a      	ldr	r3, [pc, #424]	; (8008d94 <calculate_PID+0x664>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	f7f7 ff8f 	bl	8000b14 <__addsf3>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7f7 fc0d 	bl	8000418 <__aeabi_f2d>
 8008bfe:	f04f 0200 	mov.w	r2, #0
 8008c02:	f04f 0300 	mov.w	r3, #0
 8008c06:	f7f7 fc5f 	bl	80004c8 <__aeabi_dmul>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	a34f      	add	r3, pc, #316	; (adr r3, 8008d50 <calculate_PID+0x620>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 fc56 	bl	80004c8 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4610      	mov	r0, r2
 8008c22:	4619      	mov	r1, r3
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c2c:	f7f7 fd76 	bl	800071c <__aeabi_ddiv>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4620      	mov	r0, r4
 8008c36:	4629      	mov	r1, r5
 8008c38:	f7f7 fa90 	bl	800015c <__adddf3>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	4618      	mov	r0, r3
 8008c42:	4621      	mov	r1, r4
 8008c44:	f7f7 ff10 	bl	8000a68 <__aeabi_d2f>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	4b51      	ldr	r3, [pc, #324]	; (8008d90 <calculate_PID+0x660>)
 8008c4c:	601a      	str	r2, [r3, #0]
    Dterm_yaw = (error - last_error_yaw) * Kd_yaw / dt;
 8008c4e:	4b45      	ldr	r3, [pc, #276]	; (8008d64 <calculate_PID+0x634>)
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b50      	ldr	r3, [pc, #320]	; (8008d94 <calculate_PID+0x664>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4619      	mov	r1, r3
 8008c58:	4610      	mov	r0, r2
 8008c5a:	f7f7 ff59 	bl	8000b10 <__aeabi_fsub>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7f7 fbd9 	bl	8000418 <__aeabi_f2d>
 8008c66:	f04f 0200 	mov.w	r2, #0
 8008c6a:	4b4b      	ldr	r3, [pc, #300]	; (8008d98 <calculate_PID+0x668>)
 8008c6c:	f7f7 fc2c 	bl	80004c8 <__aeabi_dmul>
 8008c70:	4603      	mov	r3, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	4618      	mov	r0, r3
 8008c76:	4621      	mov	r1, r4
 8008c78:	a335      	add	r3, pc, #212	; (adr r3, 8008d50 <calculate_PID+0x620>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fd4d 	bl	800071c <__aeabi_ddiv>
 8008c82:	4603      	mov	r3, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	4618      	mov	r0, r3
 8008c88:	4621      	mov	r1, r4
 8008c8a:	f7f7 feed 	bl	8000a68 <__aeabi_d2f>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	4b42      	ldr	r3, [pc, #264]	; (8008d9c <calculate_PID+0x66c>)
 8008c92:	601a      	str	r2, [r3, #0]
    last_error_yaw = error;
 8008c94:	4b33      	ldr	r3, [pc, #204]	; (8008d64 <calculate_PID+0x634>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a3e      	ldr	r2, [pc, #248]	; (8008d94 <calculate_PID+0x664>)
 8008c9a:	6013      	str	r3, [r2, #0]
    PID_yaw_out = Pterm_yaw + (Iterm_yaw * Ki_yaw) + Dterm_yaw;
 8008c9c:	4b3b      	ldr	r3, [pc, #236]	; (8008d8c <calculate_PID+0x65c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7f7 fbb9 	bl	8000418 <__aeabi_f2d>
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	460d      	mov	r5, r1
 8008caa:	4b39      	ldr	r3, [pc, #228]	; (8008d90 <calculate_PID+0x660>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7f7 fbb2 	bl	8000418 <__aeabi_f2d>
 8008cb4:	f04f 0200 	mov.w	r2, #0
 8008cb8:	f04f 0300 	mov.w	r3, #0
 8008cbc:	f7f7 fc04 	bl	80004c8 <__aeabi_dmul>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f7f7 fa48 	bl	800015c <__adddf3>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	4625      	mov	r5, r4
 8008cd2:	461c      	mov	r4, r3
 8008cd4:	4b31      	ldr	r3, [pc, #196]	; (8008d9c <calculate_PID+0x66c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f7 fb9d 	bl	8000418 <__aeabi_f2d>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7f7 fa39 	bl	800015c <__adddf3>
 8008cea:	4603      	mov	r3, r0
 8008cec:	460c      	mov	r4, r1
 8008cee:	4618      	mov	r0, r3
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	f7f7 feb9 	bl	8000a68 <__aeabi_d2f>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	4b29      	ldr	r3, [pc, #164]	; (8008da0 <calculate_PID+0x670>)
 8008cfa:	601a      	str	r2, [r3, #0]
    if (PID_yaw_out > MAX_yaw_output)
 8008cfc:	4b28      	ldr	r3, [pc, #160]	; (8008da0 <calculate_PID+0x670>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	491d      	ldr	r1, [pc, #116]	; (8008d78 <calculate_PID+0x648>)
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f8 f9ca 	bl	800109c <__aeabi_fcmpgt>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <calculate_PID+0x5e4>
        PID_yaw_out = MAX_yaw_output;
 8008d0e:	4b24      	ldr	r3, [pc, #144]	; (8008da0 <calculate_PID+0x670>)
 8008d10:	4a19      	ldr	r2, [pc, #100]	; (8008d78 <calculate_PID+0x648>)
 8008d12:	601a      	str	r2, [r3, #0]
    if (PID_yaw_out < -MAX_yaw_output)
 8008d14:	4b22      	ldr	r3, [pc, #136]	; (8008da0 <calculate_PID+0x670>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4918      	ldr	r1, [pc, #96]	; (8008d7c <calculate_PID+0x64c>)
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7f8 f9a0 	bl	8001060 <__aeabi_fcmplt>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <calculate_PID+0x5fc>
        PID_yaw_out = -MAX_yaw_output;
 8008d26:	4b1e      	ldr	r3, [pc, #120]	; (8008da0 <calculate_PID+0x670>)
 8008d28:	4a14      	ldr	r2, [pc, #80]	; (8008d7c <calculate_PID+0x64c>)
 8008d2a:	601a      	str	r2, [r3, #0]

    PID_out->PID_roll_out = PID_roll_out;
 8008d2c:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <calculate_PID+0x644>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	601a      	str	r2, [r3, #0]
    PID_out->PID_pitch_out = PID_pitch_out;
 8008d34:	4b1b      	ldr	r3, [pc, #108]	; (8008da4 <calculate_PID+0x674>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3a:	605a      	str	r2, [r3, #4]
    PID_out->PID_yaw_out = PID_yaw_out;
 8008d3c:	4b18      	ldr	r3, [pc, #96]	; (8008da0 <calculate_PID+0x670>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	609a      	str	r2, [r3, #8]
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8008d4c:	f3af 8000 	nop.w
 8008d50:	47ae147b 	.word	0x47ae147b
 8008d54:	3f847ae1 	.word	0x3f847ae1
 8008d58:	33333333 	.word	0x33333333
 8008d5c:	3fc33333 	.word	0x3fc33333
 8008d60:	2000037c 	.word	0x2000037c
 8008d64:	200003a4 	.word	0x200003a4
 8008d68:	200003ac 	.word	0x200003ac
 8008d6c:	200003b8 	.word	0x200003b8
 8008d70:	20000394 	.word	0x20000394
 8008d74:	200003b4 	.word	0x200003b4
 8008d78:	43e30000 	.word	0x43e30000
 8008d7c:	c3e30000 	.word	0xc3e30000
 8008d80:	20000108 	.word	0x20000108
 8008d84:	200000ac 	.word	0x200000ac
 8008d88:	41480000 	.word	0x41480000
 8008d8c:	20000390 	.word	0x20000390
 8008d90:	20000384 	.word	0x20000384
 8008d94:	20000380 	.word	0x20000380
 8008d98:	40080000 	.word	0x40080000
 8008d9c:	2000038c 	.word	0x2000038c
 8008da0:	20000388 	.word	0x20000388
 8008da4:	2000039c 	.word	0x2000039c

08008da8 <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8008dac:	2200      	movs	r2, #0
 8008dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008db2:	4802      	ldr	r0, [pc, #8]	; (8008dbc <nRF24_CE_L+0x14>)
 8008db4:	f7f8 fc9e 	bl	80016f4 <HAL_GPIO_WritePin>
}
 8008db8:	bf00      	nop
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	40010800 	.word	0x40010800

08008dc0 <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008dca:	4802      	ldr	r0, [pc, #8]	; (8008dd4 <nRF24_CE_H+0x14>)
 8008dcc:	f7f8 fc92 	bl	80016f4 <HAL_GPIO_WritePin>
}
 8008dd0:	bf00      	nop
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	40010800 	.word	0x40010800

08008dd8 <Delay_ms>:


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7f8 f9fd 	bl	80011e0 <HAL_Delay>
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <Toggle_LED>:

extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8008df4:	2104      	movs	r1, #4
 8008df6:	4802      	ldr	r0, [pc, #8]	; (8008e00 <Toggle_LED+0x10>)
 8008df8:	f7f8 fc94 	bl	8001724 <HAL_GPIO_TogglePin>
}
 8008dfc:	bf00      	nop
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	40010c00 	.word	0x40010c00

08008e04 <runRadio>:
}

#endif // DEMO_TX_

int runRadio(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
#if (DEBUG_FC)
    printf("\r\nSTM32 is online.\r\n");
#endif // debug
    nRF24_CE_L();
 8008e08:	f7ff ffce 	bl	8008da8 <nRF24_CE_L>
#if (DEBUG_FC)
    printf("nRF24L01+ check: ");
#endif
    if (!nRF24_Check())
 8008e0c:	f7ff fa6c 	bl	80082e8 <nRF24_Check>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d105      	bne.n	8008e22 <runRadio+0x1e>
    {
        while (1)
        {
            Toggle_LED();
 8008e16:	f7ff ffeb 	bl	8008df0 <Toggle_LED>
            Delay_ms(50);
 8008e1a:	2032      	movs	r0, #50	; 0x32
 8008e1c:	f7ff ffdc 	bl	8008dd8 <Delay_ms>
            Toggle_LED();
 8008e20:	e7f9      	b.n	8008e16 <runRadio+0x12>
#if (DEBUG_FC)
            printf("FAIL\r\n");
#endif
        }
    }
    nRF24_Init();
 8008e22:	f7ff fa14 	bl	800824e <nRF24_Init>
    // nRF24_CE_L();

/***************************************************************************/
#if (RX_SINGLE)

    nRF24_SetRFChannel(40);
 8008e26:	2028      	movs	r0, #40	; 0x28
 8008e28:	f7ff faed 	bl	8008406 <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8008e2c:	2008      	movs	r0, #8
 8008e2e:	f7ff fb74 	bl	800851a <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8008e32:	200c      	movs	r0, #12
 8008e34:	f7ff fac6 	bl	80083c4 <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 8008e38:	2003      	movs	r0, #3
 8008e3a:	f7ff faf2 	bl	8008422 <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR);
 8008e3e:	490c      	ldr	r1, [pc, #48]	; (8008e70 <runRadio+0x6c>)
 8008e40:	2001      	movs	r0, #1
 8008e42:	f7ff faff 	bl	8008444 <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 24);
 8008e46:	2218      	movs	r2, #24
 8008e48:	2101      	movs	r1, #1
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	f7ff fb80 	bl	8008550 <nRF24_SetRXPipe>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8008e50:	2006      	movs	r0, #6
 8008e52:	f7ff fb47 	bl	80084e4 <nRF24_SetTXPower>
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8008e56:	2001      	movs	r0, #1
 8008e58:	f7ff fa93 	bl	8008382 <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 8008e5c:	f7ff fbe7 	bl	800862e <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8008e60:	2002      	movs	r0, #2
 8008e62:	f7ff fa6f 	bl	8008344 <nRF24_SetPowerMode>
    nRF24_CE_H();
 8008e66:	f7ff ffab 	bl	8008dc0 <nRF24_CE_H>
        Toggle_LED();
        Delay_ms(100);
    }

#endif // TX_SINGLE
}
 8008e6a:	bf00      	nop
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	0800ab2c 	.word	0x0800ab2c

08008e74 <RX_data>:

void RX_data(void)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0

    if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8008e7a:	f7ff fbbd 	bl	80085f8 <nRF24_GetStatus_RXFIFO>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d009      	beq.n	8008e98 <RX_data+0x24>
    {
        nRF24_RXResult pipe = nRF24_ReadPayload((uint8_t *)&payload_packet, &payload_length);
 8008e84:	4906      	ldr	r1, [pc, #24]	; (8008ea0 <RX_data+0x2c>)
 8008e86:	4807      	ldr	r0, [pc, #28]	; (8008ea4 <RX_data+0x30>)
 8008e88:	f7ff fc42 	bl	8008710 <nRF24_ReadPayload>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	71fb      	strb	r3, [r7, #7]
        // Clear all pending IRQ flags
        nRF24_ClearIRQFlags();
 8008e90:	f7ff fbcd 	bl	800862e <nRF24_ClearIRQFlags>
        Toggle_LED();
 8008e94:	f7ff ffac 	bl	8008df0 <Toggle_LED>
    }
    else
    {
        // todo:
    }
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20000020 	.word	0x20000020
 8008ea4:	200003bc 	.word	0x200003bc

08008ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008eae:	4b15      	ldr	r3, [pc, #84]	; (8008f04 <HAL_MspInit+0x5c>)
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	4a14      	ldr	r2, [pc, #80]	; (8008f04 <HAL_MspInit+0x5c>)
 8008eb4:	f043 0301 	orr.w	r3, r3, #1
 8008eb8:	6193      	str	r3, [r2, #24]
 8008eba:	4b12      	ldr	r3, [pc, #72]	; (8008f04 <HAL_MspInit+0x5c>)
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	60bb      	str	r3, [r7, #8]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <HAL_MspInit+0x5c>)
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	4a0e      	ldr	r2, [pc, #56]	; (8008f04 <HAL_MspInit+0x5c>)
 8008ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ed0:	61d3      	str	r3, [r2, #28]
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <HAL_MspInit+0x5c>)
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eda:	607b      	str	r3, [r7, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008ede:	4b0a      	ldr	r3, [pc, #40]	; (8008f08 <HAL_MspInit+0x60>)
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	4a04      	ldr	r2, [pc, #16]	; (8008f08 <HAL_MspInit+0x60>)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bc80      	pop	{r7}
 8008f02:	4770      	bx	lr
 8008f04:	40021000 	.word	0x40021000
 8008f08:	40010000 	.word	0x40010000

08008f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08a      	sub	sp, #40	; 0x28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f14:	f107 0314 	add.w	r3, r7, #20
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	605a      	str	r2, [r3, #4]
 8008f1e:	609a      	str	r2, [r3, #8]
 8008f20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1d      	ldr	r2, [pc, #116]	; (8008f9c <HAL_I2C_MspInit+0x90>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d132      	bne.n	8008f92 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f2c:	4b1c      	ldr	r3, [pc, #112]	; (8008fa0 <HAL_I2C_MspInit+0x94>)
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	4a1b      	ldr	r2, [pc, #108]	; (8008fa0 <HAL_I2C_MspInit+0x94>)
 8008f32:	f043 0308 	orr.w	r3, r3, #8
 8008f36:	6193      	str	r3, [r2, #24]
 8008f38:	4b19      	ldr	r3, [pc, #100]	; (8008fa0 <HAL_I2C_MspInit+0x94>)
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	f003 0308 	and.w	r3, r3, #8
 8008f40:	613b      	str	r3, [r7, #16]
 8008f42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008f44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008f4a:	2312      	movs	r3, #18
 8008f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f52:	f107 0314 	add.w	r3, r7, #20
 8008f56:	4619      	mov	r1, r3
 8008f58:	4812      	ldr	r0, [pc, #72]	; (8008fa4 <HAL_I2C_MspInit+0x98>)
 8008f5a:	f7f8 fa71 	bl	8001440 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8008f5e:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <HAL_I2C_MspInit+0x9c>)
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	f043 0302 	orr.w	r3, r3, #2
 8008f72:	627b      	str	r3, [r7, #36]	; 0x24
 8008f74:	4a0c      	ldr	r2, [pc, #48]	; (8008fa8 <HAL_I2C_MspInit+0x9c>)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008f7a:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <HAL_I2C_MspInit+0x94>)
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	4a08      	ldr	r2, [pc, #32]	; (8008fa0 <HAL_I2C_MspInit+0x94>)
 8008f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f84:	61d3      	str	r3, [r2, #28]
 8008f86:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <HAL_I2C_MspInit+0x94>)
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008f92:	bf00      	nop
 8008f94:	3728      	adds	r7, #40	; 0x28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	40005400 	.word	0x40005400
 8008fa0:	40021000 	.word	0x40021000
 8008fa4:	40010c00 	.word	0x40010c00
 8008fa8:	40010000 	.word	0x40010000

08008fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fb4:	f107 0310 	add.w	r3, r7, #16
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	605a      	str	r2, [r3, #4]
 8008fbe:	609a      	str	r2, [r3, #8]
 8008fc0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a1c      	ldr	r2, [pc, #112]	; (8009038 <HAL_SPI_MspInit+0x8c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d131      	bne.n	8009030 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008fcc:	4b1b      	ldr	r3, [pc, #108]	; (800903c <HAL_SPI_MspInit+0x90>)
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	4a1a      	ldr	r2, [pc, #104]	; (800903c <HAL_SPI_MspInit+0x90>)
 8008fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fd6:	61d3      	str	r3, [r2, #28]
 8008fd8:	4b18      	ldr	r3, [pc, #96]	; (800903c <HAL_SPI_MspInit+0x90>)
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fe4:	4b15      	ldr	r3, [pc, #84]	; (800903c <HAL_SPI_MspInit+0x90>)
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	4a14      	ldr	r2, [pc, #80]	; (800903c <HAL_SPI_MspInit+0x90>)
 8008fea:	f043 0308 	orr.w	r3, r3, #8
 8008fee:	6193      	str	r3, [r2, #24]
 8008ff0:	4b12      	ldr	r3, [pc, #72]	; (800903c <HAL_SPI_MspInit+0x90>)
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f003 0308 	and.w	r3, r3, #8
 8008ff8:	60bb      	str	r3, [r7, #8]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 8008ffc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8009000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009002:	2302      	movs	r3, #2
 8009004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009006:	2303      	movs	r3, #3
 8009008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800900a:	f107 0310 	add.w	r3, r7, #16
 800900e:	4619      	mov	r1, r3
 8009010:	480b      	ldr	r0, [pc, #44]	; (8009040 <HAL_SPI_MspInit+0x94>)
 8009012:	f7f8 fa15 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8009016:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800901a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800901c:	2300      	movs	r3, #0
 800901e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009020:	2300      	movs	r3, #0
 8009022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8009024:	f107 0310 	add.w	r3, r7, #16
 8009028:	4619      	mov	r1, r3
 800902a:	4805      	ldr	r0, [pc, #20]	; (8009040 <HAL_SPI_MspInit+0x94>)
 800902c:	f7f8 fa08 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009030:	bf00      	nop
 8009032:	3720      	adds	r7, #32
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	40003800 	.word	0x40003800
 800903c:	40021000 	.word	0x40021000
 8009040:	40010c00 	.word	0x40010c00

08009044 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a09      	ldr	r2, [pc, #36]	; (8009078 <HAL_TIM_PWM_MspInit+0x34>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d10b      	bne.n	800906e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009056:	4b09      	ldr	r3, [pc, #36]	; (800907c <HAL_TIM_PWM_MspInit+0x38>)
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	4a08      	ldr	r2, [pc, #32]	; (800907c <HAL_TIM_PWM_MspInit+0x38>)
 800905c:	f043 0302 	orr.w	r3, r3, #2
 8009060:	61d3      	str	r3, [r2, #28]
 8009062:	4b06      	ldr	r3, [pc, #24]	; (800907c <HAL_TIM_PWM_MspInit+0x38>)
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800906e:	bf00      	nop
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr
 8009078:	40000400 	.word	0x40000400
 800907c:	40021000 	.word	0x40021000

08009080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a0d      	ldr	r2, [pc, #52]	; (80090c4 <HAL_TIM_Base_MspInit+0x44>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d113      	bne.n	80090ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009092:	4b0d      	ldr	r3, [pc, #52]	; (80090c8 <HAL_TIM_Base_MspInit+0x48>)
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	4a0c      	ldr	r2, [pc, #48]	; (80090c8 <HAL_TIM_Base_MspInit+0x48>)
 8009098:	f043 0304 	orr.w	r3, r3, #4
 800909c:	61d3      	str	r3, [r2, #28]
 800909e:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <HAL_TIM_Base_MspInit+0x48>)
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	f003 0304 	and.w	r3, r3, #4
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80090aa:	2200      	movs	r2, #0
 80090ac:	2101      	movs	r1, #1
 80090ae:	201e      	movs	r0, #30
 80090b0:	f7f8 f98f 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80090b4:	201e      	movs	r0, #30
 80090b6:	f7f8 f9a8 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80090ba:	bf00      	nop
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	40000800 	.word	0x40000800
 80090c8:	40021000 	.word	0x40021000

080090cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b088      	sub	sp, #32
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090d4:	f107 0310 	add.w	r3, r7, #16
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	605a      	str	r2, [r3, #4]
 80090de:	609a      	str	r2, [r3, #8]
 80090e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a0f      	ldr	r2, [pc, #60]	; (8009124 <HAL_TIM_MspPostInit+0x58>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d117      	bne.n	800911c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80090ec:	4b0e      	ldr	r3, [pc, #56]	; (8009128 <HAL_TIM_MspPostInit+0x5c>)
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	4a0d      	ldr	r2, [pc, #52]	; (8009128 <HAL_TIM_MspPostInit+0x5c>)
 80090f2:	f043 0308 	orr.w	r3, r3, #8
 80090f6:	6193      	str	r3, [r2, #24]
 80090f8:	4b0b      	ldr	r3, [pc, #44]	; (8009128 <HAL_TIM_MspPostInit+0x5c>)
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	f003 0308 	and.w	r3, r3, #8
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8009104:	2303      	movs	r3, #3
 8009106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009108:	2302      	movs	r3, #2
 800910a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800910c:	2302      	movs	r3, #2
 800910e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009110:	f107 0310 	add.w	r3, r7, #16
 8009114:	4619      	mov	r1, r3
 8009116:	4805      	ldr	r0, [pc, #20]	; (800912c <HAL_TIM_MspPostInit+0x60>)
 8009118:	f7f8 f992 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800911c:	bf00      	nop
 800911e:	3720      	adds	r7, #32
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40000400 	.word	0x40000400
 8009128:	40021000 	.word	0x40021000
 800912c:	40010c00 	.word	0x40010c00

08009130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009138:	f107 0310 	add.w	r3, r7, #16
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	605a      	str	r2, [r3, #4]
 8009142:	609a      	str	r2, [r3, #8]
 8009144:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a1c      	ldr	r2, [pc, #112]	; (80091bc <HAL_UART_MspInit+0x8c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d131      	bne.n	80091b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009150:	4b1b      	ldr	r3, [pc, #108]	; (80091c0 <HAL_UART_MspInit+0x90>)
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	4a1a      	ldr	r2, [pc, #104]	; (80091c0 <HAL_UART_MspInit+0x90>)
 8009156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800915a:	6193      	str	r3, [r2, #24]
 800915c:	4b18      	ldr	r3, [pc, #96]	; (80091c0 <HAL_UART_MspInit+0x90>)
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009168:	4b15      	ldr	r3, [pc, #84]	; (80091c0 <HAL_UART_MspInit+0x90>)
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	4a14      	ldr	r2, [pc, #80]	; (80091c0 <HAL_UART_MspInit+0x90>)
 800916e:	f043 0304 	orr.w	r3, r3, #4
 8009172:	6193      	str	r3, [r2, #24]
 8009174:	4b12      	ldr	r3, [pc, #72]	; (80091c0 <HAL_UART_MspInit+0x90>)
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	60bb      	str	r3, [r7, #8]
 800917e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009186:	2302      	movs	r3, #2
 8009188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800918a:	2303      	movs	r3, #3
 800918c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800918e:	f107 0310 	add.w	r3, r7, #16
 8009192:	4619      	mov	r1, r3
 8009194:	480b      	ldr	r0, [pc, #44]	; (80091c4 <HAL_UART_MspInit+0x94>)
 8009196:	f7f8 f953 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800919a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800919e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091a0:	2300      	movs	r3, #0
 80091a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091a8:	f107 0310 	add.w	r3, r7, #16
 80091ac:	4619      	mov	r1, r3
 80091ae:	4805      	ldr	r0, [pc, #20]	; (80091c4 <HAL_UART_MspInit+0x94>)
 80091b0:	f7f8 f946 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80091b4:	bf00      	nop
 80091b6:	3720      	adds	r7, #32
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	40013800 	.word	0x40013800
 80091c0:	40021000 	.word	0x40021000
 80091c4:	40010800 	.word	0x40010800

080091c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80091c8:	b480      	push	{r7}
 80091ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80091cc:	bf00      	nop
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bc80      	pop	{r7}
 80091d2:	4770      	bx	lr

080091d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80091d8:	e7fe      	b.n	80091d8 <HardFault_Handler+0x4>

080091da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80091da:	b480      	push	{r7}
 80091dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80091de:	e7fe      	b.n	80091de <MemManage_Handler+0x4>

080091e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80091e4:	e7fe      	b.n	80091e4 <BusFault_Handler+0x4>

080091e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80091e6:	b480      	push	{r7}
 80091e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80091ea:	e7fe      	b.n	80091ea <UsageFault_Handler+0x4>

080091ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80091f0:	bf00      	nop
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bc80      	pop	{r7}
 80091f6:	4770      	bx	lr

080091f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80091fc:	bf00      	nop
 80091fe:	46bd      	mov	sp, r7
 8009200:	bc80      	pop	{r7}
 8009202:	4770      	bx	lr

08009204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009208:	bf00      	nop
 800920a:	46bd      	mov	sp, r7
 800920c:	bc80      	pop	{r7}
 800920e:	4770      	bx	lr

08009210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009214:	f7f7 ffc8 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009218:	bf00      	nop
 800921a:	bd80      	pop	{r7, pc}

0800921c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009220:	4802      	ldr	r0, [pc, #8]	; (800922c <TIM4_IRQHandler+0x10>)
 8009222:	f7fa fb03 	bl	800382c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009226:	bf00      	nop
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	200001a8 	.word	0x200001a8

08009230 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009230:	b480      	push	{r7}
 8009232:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009234:	bf00      	nop
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr

0800923c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800923c:	480c      	ldr	r0, [pc, #48]	; (8009270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800923e:	490d      	ldr	r1, [pc, #52]	; (8009274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009240:	4a0d      	ldr	r2, [pc, #52]	; (8009278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009244:	e002      	b.n	800924c <LoopCopyDataInit>

08009246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800924a:	3304      	adds	r3, #4

0800924c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800924c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800924e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009250:	d3f9      	bcc.n	8009246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009252:	4a0a      	ldr	r2, [pc, #40]	; (800927c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009254:	4c0a      	ldr	r4, [pc, #40]	; (8009280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009258:	e001      	b.n	800925e <LoopFillZerobss>

0800925a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800925a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800925c:	3204      	adds	r2, #4

0800925e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800925e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009260:	d3fb      	bcc.n	800925a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009262:	f7ff ffe5 	bl	8009230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009266:	f000 f815 	bl	8009294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800926a:	f7fb f971 	bl	8004550 <main>
  bx lr
 800926e:	4770      	bx	lr
  ldr r0, =_sdata
 8009270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009274:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8009278:	0800abc0 	.word	0x0800abc0
  ldr r2, =_sbss
 800927c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8009280:	200003d4 	.word	0x200003d4

08009284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009284:	e7fe      	b.n	8009284 <ADC1_2_IRQHandler>
	...

08009288 <__errno>:
 8009288:	4b01      	ldr	r3, [pc, #4]	; (8009290 <__errno+0x8>)
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20000028 	.word	0x20000028

08009294 <__libc_init_array>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	2500      	movs	r5, #0
 8009298:	4e0c      	ldr	r6, [pc, #48]	; (80092cc <__libc_init_array+0x38>)
 800929a:	4c0d      	ldr	r4, [pc, #52]	; (80092d0 <__libc_init_array+0x3c>)
 800929c:	1ba4      	subs	r4, r4, r6
 800929e:	10a4      	asrs	r4, r4, #2
 80092a0:	42a5      	cmp	r5, r4
 80092a2:	d109      	bne.n	80092b8 <__libc_init_array+0x24>
 80092a4:	f001 fc16 	bl	800aad4 <_init>
 80092a8:	2500      	movs	r5, #0
 80092aa:	4e0a      	ldr	r6, [pc, #40]	; (80092d4 <__libc_init_array+0x40>)
 80092ac:	4c0a      	ldr	r4, [pc, #40]	; (80092d8 <__libc_init_array+0x44>)
 80092ae:	1ba4      	subs	r4, r4, r6
 80092b0:	10a4      	asrs	r4, r4, #2
 80092b2:	42a5      	cmp	r5, r4
 80092b4:	d105      	bne.n	80092c2 <__libc_init_array+0x2e>
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092bc:	4798      	blx	r3
 80092be:	3501      	adds	r5, #1
 80092c0:	e7ee      	b.n	80092a0 <__libc_init_array+0xc>
 80092c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092c6:	4798      	blx	r3
 80092c8:	3501      	adds	r5, #1
 80092ca:	e7f2      	b.n	80092b2 <__libc_init_array+0x1e>
 80092cc:	0800abb8 	.word	0x0800abb8
 80092d0:	0800abb8 	.word	0x0800abb8
 80092d4:	0800abb8 	.word	0x0800abb8
 80092d8:	0800abbc 	.word	0x0800abbc

080092dc <memset>:
 80092dc:	4603      	mov	r3, r0
 80092de:	4402      	add	r2, r0
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d100      	bne.n	80092e6 <memset+0xa>
 80092e4:	4770      	bx	lr
 80092e6:	f803 1b01 	strb.w	r1, [r3], #1
 80092ea:	e7f9      	b.n	80092e0 <memset+0x4>

080092ec <pow>:
 80092ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f0:	b08f      	sub	sp, #60	; 0x3c
 80092f2:	461d      	mov	r5, r3
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	4614      	mov	r4, r2
 80092fa:	f000 f9ed 	bl	80096d8 <__ieee754_pow>
 80092fe:	4fa1      	ldr	r7, [pc, #644]	; (8009584 <pow+0x298>)
 8009300:	e9cd 0100 	strd	r0, r1, [sp]
 8009304:	f997 3000 	ldrsb.w	r3, [r7]
 8009308:	463e      	mov	r6, r7
 800930a:	9302      	str	r3, [sp, #8]
 800930c:	3301      	adds	r3, #1
 800930e:	d05f      	beq.n	80093d0 <pow+0xe4>
 8009310:	4622      	mov	r2, r4
 8009312:	462b      	mov	r3, r5
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f7f7 fb70 	bl	80009fc <__aeabi_dcmpun>
 800931c:	4682      	mov	sl, r0
 800931e:	2800      	cmp	r0, #0
 8009320:	d156      	bne.n	80093d0 <pow+0xe4>
 8009322:	4642      	mov	r2, r8
 8009324:	464b      	mov	r3, r9
 8009326:	4640      	mov	r0, r8
 8009328:	4649      	mov	r1, r9
 800932a:	f7f7 fb67 	bl	80009fc <__aeabi_dcmpun>
 800932e:	9003      	str	r0, [sp, #12]
 8009330:	b1e8      	cbz	r0, 800936e <pow+0x82>
 8009332:	2200      	movs	r2, #0
 8009334:	2300      	movs	r3, #0
 8009336:	4620      	mov	r0, r4
 8009338:	4629      	mov	r1, r5
 800933a:	f7f7 fb2d 	bl	8000998 <__aeabi_dcmpeq>
 800933e:	2800      	cmp	r0, #0
 8009340:	d046      	beq.n	80093d0 <pow+0xe4>
 8009342:	2301      	movs	r3, #1
 8009344:	2200      	movs	r2, #0
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	4b8f      	ldr	r3, [pc, #572]	; (8009588 <pow+0x29c>)
 800934a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800934e:	9305      	str	r3, [sp, #20]
 8009350:	4b8e      	ldr	r3, [pc, #568]	; (800958c <pow+0x2a0>)
 8009352:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009356:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800935a:	9b02      	ldr	r3, [sp, #8]
 800935c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009360:	2b02      	cmp	r3, #2
 8009362:	d031      	beq.n	80093c8 <pow+0xdc>
 8009364:	a804      	add	r0, sp, #16
 8009366:	f001 f99c 	bl	800a6a2 <matherr>
 800936a:	bb38      	cbnz	r0, 80093bc <pow+0xd0>
 800936c:	e058      	b.n	8009420 <pow+0x134>
 800936e:	f04f 0a00 	mov.w	sl, #0
 8009372:	f04f 0b00 	mov.w	fp, #0
 8009376:	4652      	mov	r2, sl
 8009378:	465b      	mov	r3, fp
 800937a:	4640      	mov	r0, r8
 800937c:	4649      	mov	r1, r9
 800937e:	f7f7 fb0b 	bl	8000998 <__aeabi_dcmpeq>
 8009382:	2800      	cmp	r0, #0
 8009384:	d051      	beq.n	800942a <pow+0x13e>
 8009386:	4652      	mov	r2, sl
 8009388:	465b      	mov	r3, fp
 800938a:	4620      	mov	r0, r4
 800938c:	4629      	mov	r1, r5
 800938e:	f7f7 fb03 	bl	8000998 <__aeabi_dcmpeq>
 8009392:	4606      	mov	r6, r0
 8009394:	b308      	cbz	r0, 80093da <pow+0xee>
 8009396:	2301      	movs	r3, #1
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	4b7b      	ldr	r3, [pc, #492]	; (8009588 <pow+0x29c>)
 800939c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80093a0:	9305      	str	r3, [sp, #20]
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80093a8:	930c      	str	r3, [sp, #48]	; 0x30
 80093aa:	9b02      	ldr	r3, [sp, #8]
 80093ac:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0d7      	beq.n	8009364 <pow+0x78>
 80093b4:	2200      	movs	r2, #0
 80093b6:	4b75      	ldr	r3, [pc, #468]	; (800958c <pow+0x2a0>)
 80093b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80093bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093be:	b11b      	cbz	r3, 80093c8 <pow+0xdc>
 80093c0:	f7ff ff62 	bl	8009288 <__errno>
 80093c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093c6:	6003      	str	r3, [r0, #0]
 80093c8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80093cc:	e9cd 3400 	strd	r3, r4, [sp]
 80093d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093d4:	b00f      	add	sp, #60	; 0x3c
 80093d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093da:	4620      	mov	r0, r4
 80093dc:	4629      	mov	r1, r5
 80093de:	f001 f95a 	bl	800a696 <finite>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d0f4      	beq.n	80093d0 <pow+0xe4>
 80093e6:	4652      	mov	r2, sl
 80093e8:	465b      	mov	r3, fp
 80093ea:	4620      	mov	r0, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	f7f7 fadd 	bl	80009ac <__aeabi_dcmplt>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d0ec      	beq.n	80093d0 <pow+0xe4>
 80093f6:	2301      	movs	r3, #1
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	4b63      	ldr	r3, [pc, #396]	; (8009588 <pow+0x29c>)
 80093fc:	960c      	str	r6, [sp, #48]	; 0x30
 80093fe:	9305      	str	r3, [sp, #20]
 8009400:	f997 3000 	ldrsb.w	r3, [r7]
 8009404:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009408:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800940c:	b913      	cbnz	r3, 8009414 <pow+0x128>
 800940e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009412:	e7a7      	b.n	8009364 <pow+0x78>
 8009414:	2000      	movs	r0, #0
 8009416:	495e      	ldr	r1, [pc, #376]	; (8009590 <pow+0x2a4>)
 8009418:	2b02      	cmp	r3, #2
 800941a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800941e:	d1a1      	bne.n	8009364 <pow+0x78>
 8009420:	f7ff ff32 	bl	8009288 <__errno>
 8009424:	2321      	movs	r3, #33	; 0x21
 8009426:	6003      	str	r3, [r0, #0]
 8009428:	e7c8      	b.n	80093bc <pow+0xd0>
 800942a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800942e:	f001 f932 	bl	800a696 <finite>
 8009432:	9002      	str	r0, [sp, #8]
 8009434:	2800      	cmp	r0, #0
 8009436:	d177      	bne.n	8009528 <pow+0x23c>
 8009438:	4640      	mov	r0, r8
 800943a:	4649      	mov	r1, r9
 800943c:	f001 f92b 	bl	800a696 <finite>
 8009440:	2800      	cmp	r0, #0
 8009442:	d071      	beq.n	8009528 <pow+0x23c>
 8009444:	4620      	mov	r0, r4
 8009446:	4629      	mov	r1, r5
 8009448:	f001 f925 	bl	800a696 <finite>
 800944c:	2800      	cmp	r0, #0
 800944e:	d06b      	beq.n	8009528 <pow+0x23c>
 8009450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009454:	4619      	mov	r1, r3
 8009456:	4610      	mov	r0, r2
 8009458:	f7f7 fad0 	bl	80009fc <__aeabi_dcmpun>
 800945c:	f997 7000 	ldrsb.w	r7, [r7]
 8009460:	4b49      	ldr	r3, [pc, #292]	; (8009588 <pow+0x29c>)
 8009462:	b1a0      	cbz	r0, 800948e <pow+0x1a2>
 8009464:	2201      	movs	r2, #1
 8009466:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800946a:	9b02      	ldr	r3, [sp, #8]
 800946c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009470:	930c      	str	r3, [sp, #48]	; 0x30
 8009472:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009476:	2f00      	cmp	r7, #0
 8009478:	d0c9      	beq.n	800940e <pow+0x122>
 800947a:	4652      	mov	r2, sl
 800947c:	465b      	mov	r3, fp
 800947e:	4650      	mov	r0, sl
 8009480:	4659      	mov	r1, fp
 8009482:	f7f7 f94b 	bl	800071c <__aeabi_ddiv>
 8009486:	2f02      	cmp	r7, #2
 8009488:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800948c:	e7c7      	b.n	800941e <pow+0x132>
 800948e:	2203      	movs	r2, #3
 8009490:	900c      	str	r0, [sp, #48]	; 0x30
 8009492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009496:	4620      	mov	r0, r4
 8009498:	4629      	mov	r1, r5
 800949a:	2200      	movs	r2, #0
 800949c:	4b3d      	ldr	r3, [pc, #244]	; (8009594 <pow+0x2a8>)
 800949e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80094a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80094a6:	f7f7 f80f 	bl	80004c8 <__aeabi_dmul>
 80094aa:	4604      	mov	r4, r0
 80094ac:	460d      	mov	r5, r1
 80094ae:	bb17      	cbnz	r7, 80094f6 <pow+0x20a>
 80094b0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80094b4:	4b38      	ldr	r3, [pc, #224]	; (8009598 <pow+0x2ac>)
 80094b6:	4640      	mov	r0, r8
 80094b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80094bc:	4649      	mov	r1, r9
 80094be:	4652      	mov	r2, sl
 80094c0:	465b      	mov	r3, fp
 80094c2:	f7f7 fa73 	bl	80009ac <__aeabi_dcmplt>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d054      	beq.n	8009574 <pow+0x288>
 80094ca:	4620      	mov	r0, r4
 80094cc:	4629      	mov	r1, r5
 80094ce:	f001 f8f1 	bl	800a6b4 <rint>
 80094d2:	4622      	mov	r2, r4
 80094d4:	462b      	mov	r3, r5
 80094d6:	f7f7 fa5f 	bl	8000998 <__aeabi_dcmpeq>
 80094da:	b920      	cbnz	r0, 80094e6 <pow+0x1fa>
 80094dc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80094e0:	4b2e      	ldr	r3, [pc, #184]	; (800959c <pow+0x2b0>)
 80094e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80094e6:	f996 3000 	ldrsb.w	r3, [r6]
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d142      	bne.n	8009574 <pow+0x288>
 80094ee:	f7ff fecb 	bl	8009288 <__errno>
 80094f2:	2322      	movs	r3, #34	; 0x22
 80094f4:	e797      	b.n	8009426 <pow+0x13a>
 80094f6:	2200      	movs	r2, #0
 80094f8:	4b29      	ldr	r3, [pc, #164]	; (80095a0 <pow+0x2b4>)
 80094fa:	4640      	mov	r0, r8
 80094fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009500:	4649      	mov	r1, r9
 8009502:	4652      	mov	r2, sl
 8009504:	465b      	mov	r3, fp
 8009506:	f7f7 fa51 	bl	80009ac <__aeabi_dcmplt>
 800950a:	2800      	cmp	r0, #0
 800950c:	d0eb      	beq.n	80094e6 <pow+0x1fa>
 800950e:	4620      	mov	r0, r4
 8009510:	4629      	mov	r1, r5
 8009512:	f001 f8cf 	bl	800a6b4 <rint>
 8009516:	4622      	mov	r2, r4
 8009518:	462b      	mov	r3, r5
 800951a:	f7f7 fa3d 	bl	8000998 <__aeabi_dcmpeq>
 800951e:	2800      	cmp	r0, #0
 8009520:	d1e1      	bne.n	80094e6 <pow+0x1fa>
 8009522:	2200      	movs	r2, #0
 8009524:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <pow+0x2a4>)
 8009526:	e7dc      	b.n	80094e2 <pow+0x1f6>
 8009528:	2200      	movs	r2, #0
 800952a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800952e:	2300      	movs	r3, #0
 8009530:	f7f7 fa32 	bl	8000998 <__aeabi_dcmpeq>
 8009534:	2800      	cmp	r0, #0
 8009536:	f43f af4b 	beq.w	80093d0 <pow+0xe4>
 800953a:	4640      	mov	r0, r8
 800953c:	4649      	mov	r1, r9
 800953e:	f001 f8aa 	bl	800a696 <finite>
 8009542:	2800      	cmp	r0, #0
 8009544:	f43f af44 	beq.w	80093d0 <pow+0xe4>
 8009548:	4620      	mov	r0, r4
 800954a:	4629      	mov	r1, r5
 800954c:	f001 f8a3 	bl	800a696 <finite>
 8009550:	2800      	cmp	r0, #0
 8009552:	f43f af3d 	beq.w	80093d0 <pow+0xe4>
 8009556:	2304      	movs	r3, #4
 8009558:	9304      	str	r3, [sp, #16]
 800955a:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <pow+0x29c>)
 800955c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009560:	9305      	str	r3, [sp, #20]
 8009562:	2300      	movs	r3, #0
 8009564:	2400      	movs	r4, #0
 8009566:	930c      	str	r3, [sp, #48]	; 0x30
 8009568:	2300      	movs	r3, #0
 800956a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800956e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8009572:	e7b8      	b.n	80094e6 <pow+0x1fa>
 8009574:	a804      	add	r0, sp, #16
 8009576:	f001 f894 	bl	800a6a2 <matherr>
 800957a:	2800      	cmp	r0, #0
 800957c:	f47f af1e 	bne.w	80093bc <pow+0xd0>
 8009580:	e7b5      	b.n	80094ee <pow+0x202>
 8009582:	bf00      	nop
 8009584:	2000008c 	.word	0x2000008c
 8009588:	0800ab48 	.word	0x0800ab48
 800958c:	3ff00000 	.word	0x3ff00000
 8009590:	fff00000 	.word	0xfff00000
 8009594:	3fe00000 	.word	0x3fe00000
 8009598:	47efffff 	.word	0x47efffff
 800959c:	c7efffff 	.word	0xc7efffff
 80095a0:	7ff00000 	.word	0x7ff00000

080095a4 <asinf>:
 80095a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a6:	b08b      	sub	sp, #44	; 0x2c
 80095a8:	4604      	mov	r4, r0
 80095aa:	f000 fe4b 	bl	800a244 <__ieee754_asinf>
 80095ae:	4e21      	ldr	r6, [pc, #132]	; (8009634 <asinf+0x90>)
 80095b0:	4605      	mov	r5, r0
 80095b2:	f996 3000 	ldrsb.w	r3, [r6]
 80095b6:	3301      	adds	r3, #1
 80095b8:	d038      	beq.n	800962c <asinf+0x88>
 80095ba:	4621      	mov	r1, r4
 80095bc:	4620      	mov	r0, r4
 80095be:	f7f7 fd77 	bl	80010b0 <__aeabi_fcmpun>
 80095c2:	4607      	mov	r7, r0
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d131      	bne.n	800962c <asinf+0x88>
 80095c8:	4620      	mov	r0, r4
 80095ca:	f001 fa77 	bl	800aabc <fabsf>
 80095ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80095d2:	f7f7 fd63 	bl	800109c <__aeabi_fcmpgt>
 80095d6:	b348      	cbz	r0, 800962c <asinf+0x88>
 80095d8:	2301      	movs	r3, #1
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	4b16      	ldr	r3, [pc, #88]	; (8009638 <asinf+0x94>)
 80095de:	4620      	mov	r0, r4
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	9708      	str	r7, [sp, #32]
 80095e4:	f7f6 ff18 	bl	8000418 <__aeabi_f2d>
 80095e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095f0:	4812      	ldr	r0, [pc, #72]	; (800963c <asinf+0x98>)
 80095f2:	f001 f859 	bl	800a6a8 <nan>
 80095f6:	f996 3000 	ldrsb.w	r3, [r6]
 80095fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d104      	bne.n	800960c <asinf+0x68>
 8009602:	f7ff fe41 	bl	8009288 <__errno>
 8009606:	2321      	movs	r3, #33	; 0x21
 8009608:	6003      	str	r3, [r0, #0]
 800960a:	e004      	b.n	8009616 <asinf+0x72>
 800960c:	4668      	mov	r0, sp
 800960e:	f001 f848 	bl	800a6a2 <matherr>
 8009612:	2800      	cmp	r0, #0
 8009614:	d0f5      	beq.n	8009602 <asinf+0x5e>
 8009616:	9b08      	ldr	r3, [sp, #32]
 8009618:	b11b      	cbz	r3, 8009622 <asinf+0x7e>
 800961a:	f7ff fe35 	bl	8009288 <__errno>
 800961e:	9b08      	ldr	r3, [sp, #32]
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009626:	f7f7 fa1f 	bl	8000a68 <__aeabi_d2f>
 800962a:	4605      	mov	r5, r0
 800962c:	4628      	mov	r0, r5
 800962e:	b00b      	add	sp, #44	; 0x2c
 8009630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009632:	bf00      	nop
 8009634:	2000008c 	.word	0x2000008c
 8009638:	0800ab4c 	.word	0x0800ab4c
 800963c:	0800ab51 	.word	0x0800ab51

08009640 <atan2f>:
 8009640:	f000 bf42 	b.w	800a4c8 <__ieee754_atan2f>

08009644 <sqrtf>:
 8009644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009646:	b08b      	sub	sp, #44	; 0x2c
 8009648:	4604      	mov	r4, r0
 800964a:	f000 ffcd 	bl	800a5e8 <__ieee754_sqrtf>
 800964e:	4b20      	ldr	r3, [pc, #128]	; (80096d0 <sqrtf+0x8c>)
 8009650:	4606      	mov	r6, r0
 8009652:	f993 5000 	ldrsb.w	r5, [r3]
 8009656:	1c6b      	adds	r3, r5, #1
 8009658:	d02a      	beq.n	80096b0 <sqrtf+0x6c>
 800965a:	4621      	mov	r1, r4
 800965c:	4620      	mov	r0, r4
 800965e:	f7f7 fd27 	bl	80010b0 <__aeabi_fcmpun>
 8009662:	4607      	mov	r7, r0
 8009664:	bb20      	cbnz	r0, 80096b0 <sqrtf+0x6c>
 8009666:	2100      	movs	r1, #0
 8009668:	4620      	mov	r0, r4
 800966a:	f7f7 fcf9 	bl	8001060 <__aeabi_fcmplt>
 800966e:	b1f8      	cbz	r0, 80096b0 <sqrtf+0x6c>
 8009670:	2301      	movs	r3, #1
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	4b17      	ldr	r3, [pc, #92]	; (80096d4 <sqrtf+0x90>)
 8009676:	4620      	mov	r0, r4
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	9708      	str	r7, [sp, #32]
 800967c:	f7f6 fecc 	bl	8000418 <__aeabi_f2d>
 8009680:	2200      	movs	r2, #0
 8009682:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800968a:	2300      	movs	r3, #0
 800968c:	b99d      	cbnz	r5, 80096b6 <sqrtf+0x72>
 800968e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009692:	4668      	mov	r0, sp
 8009694:	f001 f805 	bl	800a6a2 <matherr>
 8009698:	b1a8      	cbz	r0, 80096c6 <sqrtf+0x82>
 800969a:	9b08      	ldr	r3, [sp, #32]
 800969c:	b11b      	cbz	r3, 80096a6 <sqrtf+0x62>
 800969e:	f7ff fdf3 	bl	8009288 <__errno>
 80096a2:	9b08      	ldr	r3, [sp, #32]
 80096a4:	6003      	str	r3, [r0, #0]
 80096a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096aa:	f7f7 f9dd 	bl	8000a68 <__aeabi_d2f>
 80096ae:	4606      	mov	r6, r0
 80096b0:	4630      	mov	r0, r6
 80096b2:	b00b      	add	sp, #44	; 0x2c
 80096b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b6:	4610      	mov	r0, r2
 80096b8:	4619      	mov	r1, r3
 80096ba:	f7f7 f82f 	bl	800071c <__aeabi_ddiv>
 80096be:	2d02      	cmp	r5, #2
 80096c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80096c4:	d1e5      	bne.n	8009692 <sqrtf+0x4e>
 80096c6:	f7ff fddf 	bl	8009288 <__errno>
 80096ca:	2321      	movs	r3, #33	; 0x21
 80096cc:	6003      	str	r3, [r0, #0]
 80096ce:	e7e4      	b.n	800969a <sqrtf+0x56>
 80096d0:	2000008c 	.word	0x2000008c
 80096d4:	0800ab52 	.word	0x0800ab52

080096d8 <__ieee754_pow>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	b091      	sub	sp, #68	; 0x44
 80096de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096e2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80096e6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80096ea:	ea55 0302 	orrs.w	r3, r5, r2
 80096ee:	4607      	mov	r7, r0
 80096f0:	4688      	mov	r8, r1
 80096f2:	f000 84b7 	beq.w	800a064 <__ieee754_pow+0x98c>
 80096f6:	4b80      	ldr	r3, [pc, #512]	; (80098f8 <__ieee754_pow+0x220>)
 80096f8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80096fc:	429c      	cmp	r4, r3
 80096fe:	4689      	mov	r9, r1
 8009700:	4682      	mov	sl, r0
 8009702:	dc09      	bgt.n	8009718 <__ieee754_pow+0x40>
 8009704:	d103      	bne.n	800970e <__ieee754_pow+0x36>
 8009706:	b938      	cbnz	r0, 8009718 <__ieee754_pow+0x40>
 8009708:	42a5      	cmp	r5, r4
 800970a:	dc0d      	bgt.n	8009728 <__ieee754_pow+0x50>
 800970c:	e001      	b.n	8009712 <__ieee754_pow+0x3a>
 800970e:	429d      	cmp	r5, r3
 8009710:	dc02      	bgt.n	8009718 <__ieee754_pow+0x40>
 8009712:	429d      	cmp	r5, r3
 8009714:	d10e      	bne.n	8009734 <__ieee754_pow+0x5c>
 8009716:	b16a      	cbz	r2, 8009734 <__ieee754_pow+0x5c>
 8009718:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800971c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009720:	ea54 030a 	orrs.w	r3, r4, sl
 8009724:	f000 849e 	beq.w	800a064 <__ieee754_pow+0x98c>
 8009728:	4874      	ldr	r0, [pc, #464]	; (80098fc <__ieee754_pow+0x224>)
 800972a:	b011      	add	sp, #68	; 0x44
 800972c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	f000 bfba 	b.w	800a6a8 <nan>
 8009734:	f1b9 0f00 	cmp.w	r9, #0
 8009738:	da53      	bge.n	80097e2 <__ieee754_pow+0x10a>
 800973a:	4b71      	ldr	r3, [pc, #452]	; (8009900 <__ieee754_pow+0x228>)
 800973c:	429d      	cmp	r5, r3
 800973e:	dc4e      	bgt.n	80097de <__ieee754_pow+0x106>
 8009740:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009744:	429d      	cmp	r5, r3
 8009746:	dd4c      	ble.n	80097e2 <__ieee754_pow+0x10a>
 8009748:	152b      	asrs	r3, r5, #20
 800974a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800974e:	2b14      	cmp	r3, #20
 8009750:	dd28      	ble.n	80097a4 <__ieee754_pow+0xcc>
 8009752:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009756:	fa22 f103 	lsr.w	r1, r2, r3
 800975a:	fa01 f303 	lsl.w	r3, r1, r3
 800975e:	4293      	cmp	r3, r2
 8009760:	d13f      	bne.n	80097e2 <__ieee754_pow+0x10a>
 8009762:	f001 0101 	and.w	r1, r1, #1
 8009766:	f1c1 0302 	rsb	r3, r1, #2
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	2a00      	cmp	r2, #0
 800976e:	d15c      	bne.n	800982a <__ieee754_pow+0x152>
 8009770:	4b61      	ldr	r3, [pc, #388]	; (80098f8 <__ieee754_pow+0x220>)
 8009772:	429d      	cmp	r5, r3
 8009774:	d126      	bne.n	80097c4 <__ieee754_pow+0xec>
 8009776:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800977a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800977e:	ea53 030a 	orrs.w	r3, r3, sl
 8009782:	f000 846f 	beq.w	800a064 <__ieee754_pow+0x98c>
 8009786:	4b5f      	ldr	r3, [pc, #380]	; (8009904 <__ieee754_pow+0x22c>)
 8009788:	429c      	cmp	r4, r3
 800978a:	dd2c      	ble.n	80097e6 <__ieee754_pow+0x10e>
 800978c:	2e00      	cmp	r6, #0
 800978e:	f280 846f 	bge.w	800a070 <__ieee754_pow+0x998>
 8009792:	f04f 0b00 	mov.w	fp, #0
 8009796:	f04f 0c00 	mov.w	ip, #0
 800979a:	4658      	mov	r0, fp
 800979c:	4661      	mov	r1, ip
 800979e:	b011      	add	sp, #68	; 0x44
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	d13e      	bne.n	8009826 <__ieee754_pow+0x14e>
 80097a8:	f1c3 0314 	rsb	r3, r3, #20
 80097ac:	fa45 f103 	asr.w	r1, r5, r3
 80097b0:	fa01 f303 	lsl.w	r3, r1, r3
 80097b4:	42ab      	cmp	r3, r5
 80097b6:	f040 8463 	bne.w	800a080 <__ieee754_pow+0x9a8>
 80097ba:	f001 0101 	and.w	r1, r1, #1
 80097be:	f1c1 0302 	rsb	r3, r1, #2
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	4b50      	ldr	r3, [pc, #320]	; (8009908 <__ieee754_pow+0x230>)
 80097c6:	429d      	cmp	r5, r3
 80097c8:	d114      	bne.n	80097f4 <__ieee754_pow+0x11c>
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	f280 8454 	bge.w	800a078 <__ieee754_pow+0x9a0>
 80097d0:	463a      	mov	r2, r7
 80097d2:	4643      	mov	r3, r8
 80097d4:	2000      	movs	r0, #0
 80097d6:	494c      	ldr	r1, [pc, #304]	; (8009908 <__ieee754_pow+0x230>)
 80097d8:	f7f6 ffa0 	bl	800071c <__aeabi_ddiv>
 80097dc:	e013      	b.n	8009806 <__ieee754_pow+0x12e>
 80097de:	2302      	movs	r3, #2
 80097e0:	e7c3      	b.n	800976a <__ieee754_pow+0x92>
 80097e2:	2300      	movs	r3, #0
 80097e4:	e7c1      	b.n	800976a <__ieee754_pow+0x92>
 80097e6:	2e00      	cmp	r6, #0
 80097e8:	dad3      	bge.n	8009792 <__ieee754_pow+0xba>
 80097ea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80097ee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80097f2:	e7d2      	b.n	800979a <__ieee754_pow+0xc2>
 80097f4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80097f8:	d108      	bne.n	800980c <__ieee754_pow+0x134>
 80097fa:	463a      	mov	r2, r7
 80097fc:	4643      	mov	r3, r8
 80097fe:	4638      	mov	r0, r7
 8009800:	4641      	mov	r1, r8
 8009802:	f7f6 fe61 	bl	80004c8 <__aeabi_dmul>
 8009806:	4683      	mov	fp, r0
 8009808:	468c      	mov	ip, r1
 800980a:	e7c6      	b.n	800979a <__ieee754_pow+0xc2>
 800980c:	4b3f      	ldr	r3, [pc, #252]	; (800990c <__ieee754_pow+0x234>)
 800980e:	429e      	cmp	r6, r3
 8009810:	d10b      	bne.n	800982a <__ieee754_pow+0x152>
 8009812:	f1b9 0f00 	cmp.w	r9, #0
 8009816:	db08      	blt.n	800982a <__ieee754_pow+0x152>
 8009818:	4638      	mov	r0, r7
 800981a:	4641      	mov	r1, r8
 800981c:	b011      	add	sp, #68	; 0x44
 800981e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009822:	f000 bc63 	b.w	800a0ec <__ieee754_sqrt>
 8009826:	2300      	movs	r3, #0
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	4638      	mov	r0, r7
 800982c:	4641      	mov	r1, r8
 800982e:	f000 ff2e 	bl	800a68e <fabs>
 8009832:	4683      	mov	fp, r0
 8009834:	468c      	mov	ip, r1
 8009836:	f1ba 0f00 	cmp.w	sl, #0
 800983a:	d12b      	bne.n	8009894 <__ieee754_pow+0x1bc>
 800983c:	b124      	cbz	r4, 8009848 <__ieee754_pow+0x170>
 800983e:	4b32      	ldr	r3, [pc, #200]	; (8009908 <__ieee754_pow+0x230>)
 8009840:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8009844:	429a      	cmp	r2, r3
 8009846:	d125      	bne.n	8009894 <__ieee754_pow+0x1bc>
 8009848:	2e00      	cmp	r6, #0
 800984a:	da07      	bge.n	800985c <__ieee754_pow+0x184>
 800984c:	465a      	mov	r2, fp
 800984e:	4663      	mov	r3, ip
 8009850:	2000      	movs	r0, #0
 8009852:	492d      	ldr	r1, [pc, #180]	; (8009908 <__ieee754_pow+0x230>)
 8009854:	f7f6 ff62 	bl	800071c <__aeabi_ddiv>
 8009858:	4683      	mov	fp, r0
 800985a:	468c      	mov	ip, r1
 800985c:	f1b9 0f00 	cmp.w	r9, #0
 8009860:	da9b      	bge.n	800979a <__ieee754_pow+0xc2>
 8009862:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009866:	9b00      	ldr	r3, [sp, #0]
 8009868:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800986c:	4323      	orrs	r3, r4
 800986e:	d108      	bne.n	8009882 <__ieee754_pow+0x1aa>
 8009870:	465a      	mov	r2, fp
 8009872:	4663      	mov	r3, ip
 8009874:	4658      	mov	r0, fp
 8009876:	4661      	mov	r1, ip
 8009878:	f7f6 fc6e 	bl	8000158 <__aeabi_dsub>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	e7aa      	b.n	80097d8 <__ieee754_pow+0x100>
 8009882:	9b00      	ldr	r3, [sp, #0]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d188      	bne.n	800979a <__ieee754_pow+0xc2>
 8009888:	4658      	mov	r0, fp
 800988a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800988e:	4683      	mov	fp, r0
 8009890:	469c      	mov	ip, r3
 8009892:	e782      	b.n	800979a <__ieee754_pow+0xc2>
 8009894:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8009898:	f109 33ff 	add.w	r3, r9, #4294967295
 800989c:	930d      	str	r3, [sp, #52]	; 0x34
 800989e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098a0:	9b00      	ldr	r3, [sp, #0]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	d104      	bne.n	80098b0 <__ieee754_pow+0x1d8>
 80098a6:	463a      	mov	r2, r7
 80098a8:	4643      	mov	r3, r8
 80098aa:	4638      	mov	r0, r7
 80098ac:	4641      	mov	r1, r8
 80098ae:	e7e3      	b.n	8009878 <__ieee754_pow+0x1a0>
 80098b0:	4b17      	ldr	r3, [pc, #92]	; (8009910 <__ieee754_pow+0x238>)
 80098b2:	429d      	cmp	r5, r3
 80098b4:	f340 80fe 	ble.w	8009ab4 <__ieee754_pow+0x3dc>
 80098b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80098bc:	429d      	cmp	r5, r3
 80098be:	dd0b      	ble.n	80098d8 <__ieee754_pow+0x200>
 80098c0:	4b10      	ldr	r3, [pc, #64]	; (8009904 <__ieee754_pow+0x22c>)
 80098c2:	429c      	cmp	r4, r3
 80098c4:	dc0e      	bgt.n	80098e4 <__ieee754_pow+0x20c>
 80098c6:	2e00      	cmp	r6, #0
 80098c8:	f6bf af63 	bge.w	8009792 <__ieee754_pow+0xba>
 80098cc:	a308      	add	r3, pc, #32	; (adr r3, 80098f0 <__ieee754_pow+0x218>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	4610      	mov	r0, r2
 80098d4:	4619      	mov	r1, r3
 80098d6:	e794      	b.n	8009802 <__ieee754_pow+0x12a>
 80098d8:	4b0e      	ldr	r3, [pc, #56]	; (8009914 <__ieee754_pow+0x23c>)
 80098da:	429c      	cmp	r4, r3
 80098dc:	ddf3      	ble.n	80098c6 <__ieee754_pow+0x1ee>
 80098de:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <__ieee754_pow+0x230>)
 80098e0:	429c      	cmp	r4, r3
 80098e2:	dd19      	ble.n	8009918 <__ieee754_pow+0x240>
 80098e4:	2e00      	cmp	r6, #0
 80098e6:	dcf1      	bgt.n	80098cc <__ieee754_pow+0x1f4>
 80098e8:	e753      	b.n	8009792 <__ieee754_pow+0xba>
 80098ea:	bf00      	nop
 80098ec:	f3af 8000 	nop.w
 80098f0:	8800759c 	.word	0x8800759c
 80098f4:	7e37e43c 	.word	0x7e37e43c
 80098f8:	7ff00000 	.word	0x7ff00000
 80098fc:	0800ab51 	.word	0x0800ab51
 8009900:	433fffff 	.word	0x433fffff
 8009904:	3fefffff 	.word	0x3fefffff
 8009908:	3ff00000 	.word	0x3ff00000
 800990c:	3fe00000 	.word	0x3fe00000
 8009910:	41e00000 	.word	0x41e00000
 8009914:	3feffffe 	.word	0x3feffffe
 8009918:	4661      	mov	r1, ip
 800991a:	2200      	movs	r2, #0
 800991c:	4b60      	ldr	r3, [pc, #384]	; (8009aa0 <__ieee754_pow+0x3c8>)
 800991e:	4658      	mov	r0, fp
 8009920:	f7f6 fc1a 	bl	8000158 <__aeabi_dsub>
 8009924:	a354      	add	r3, pc, #336	; (adr r3, 8009a78 <__ieee754_pow+0x3a0>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	4604      	mov	r4, r0
 800992c:	460d      	mov	r5, r1
 800992e:	f7f6 fdcb 	bl	80004c8 <__aeabi_dmul>
 8009932:	a353      	add	r3, pc, #332	; (adr r3, 8009a80 <__ieee754_pow+0x3a8>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	4606      	mov	r6, r0
 800993a:	460f      	mov	r7, r1
 800993c:	4620      	mov	r0, r4
 800993e:	4629      	mov	r1, r5
 8009940:	f7f6 fdc2 	bl	80004c8 <__aeabi_dmul>
 8009944:	2200      	movs	r2, #0
 8009946:	4682      	mov	sl, r0
 8009948:	468b      	mov	fp, r1
 800994a:	4b56      	ldr	r3, [pc, #344]	; (8009aa4 <__ieee754_pow+0x3cc>)
 800994c:	4620      	mov	r0, r4
 800994e:	4629      	mov	r1, r5
 8009950:	f7f6 fdba 	bl	80004c8 <__aeabi_dmul>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	a14b      	add	r1, pc, #300	; (adr r1, 8009a88 <__ieee754_pow+0x3b0>)
 800995a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800995e:	f7f6 fbfb 	bl	8000158 <__aeabi_dsub>
 8009962:	4622      	mov	r2, r4
 8009964:	462b      	mov	r3, r5
 8009966:	f7f6 fdaf 	bl	80004c8 <__aeabi_dmul>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	2000      	movs	r0, #0
 8009970:	494d      	ldr	r1, [pc, #308]	; (8009aa8 <__ieee754_pow+0x3d0>)
 8009972:	f7f6 fbf1 	bl	8000158 <__aeabi_dsub>
 8009976:	4622      	mov	r2, r4
 8009978:	462b      	mov	r3, r5
 800997a:	4680      	mov	r8, r0
 800997c:	4689      	mov	r9, r1
 800997e:	4620      	mov	r0, r4
 8009980:	4629      	mov	r1, r5
 8009982:	f7f6 fda1 	bl	80004c8 <__aeabi_dmul>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4640      	mov	r0, r8
 800998c:	4649      	mov	r1, r9
 800998e:	f7f6 fd9b 	bl	80004c8 <__aeabi_dmul>
 8009992:	a33f      	add	r3, pc, #252	; (adr r3, 8009a90 <__ieee754_pow+0x3b8>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7f6 fd96 	bl	80004c8 <__aeabi_dmul>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4650      	mov	r0, sl
 80099a2:	4659      	mov	r1, fp
 80099a4:	f7f6 fbd8 	bl	8000158 <__aeabi_dsub>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4604      	mov	r4, r0
 80099ae:	460d      	mov	r5, r1
 80099b0:	4630      	mov	r0, r6
 80099b2:	4639      	mov	r1, r7
 80099b4:	f7f6 fbd2 	bl	800015c <__adddf3>
 80099b8:	2000      	movs	r0, #0
 80099ba:	468b      	mov	fp, r1
 80099bc:	4682      	mov	sl, r0
 80099be:	4632      	mov	r2, r6
 80099c0:	463b      	mov	r3, r7
 80099c2:	f7f6 fbc9 	bl	8000158 <__aeabi_dsub>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7f6 fbc3 	bl	8000158 <__aeabi_dsub>
 80099d2:	9b00      	ldr	r3, [sp, #0]
 80099d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099d6:	3b01      	subs	r3, #1
 80099d8:	4313      	orrs	r3, r2
 80099da:	f04f 0300 	mov.w	r3, #0
 80099de:	bf0c      	ite	eq
 80099e0:	4c32      	ldreq	r4, [pc, #200]	; (8009aac <__ieee754_pow+0x3d4>)
 80099e2:	4c2f      	ldrne	r4, [pc, #188]	; (8009aa0 <__ieee754_pow+0x3c8>)
 80099e4:	4606      	mov	r6, r0
 80099e6:	e9cd 3400 	strd	r3, r4, [sp]
 80099ea:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099ee:	2400      	movs	r4, #0
 80099f0:	460f      	mov	r7, r1
 80099f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099f6:	4622      	mov	r2, r4
 80099f8:	462b      	mov	r3, r5
 80099fa:	f7f6 fbad 	bl	8000158 <__aeabi_dsub>
 80099fe:	4652      	mov	r2, sl
 8009a00:	465b      	mov	r3, fp
 8009a02:	f7f6 fd61 	bl	80004c8 <__aeabi_dmul>
 8009a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a0a:	4680      	mov	r8, r0
 8009a0c:	4689      	mov	r9, r1
 8009a0e:	4630      	mov	r0, r6
 8009a10:	4639      	mov	r1, r7
 8009a12:	f7f6 fd59 	bl	80004c8 <__aeabi_dmul>
 8009a16:	4602      	mov	r2, r0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	f7f6 fb9d 	bl	800015c <__adddf3>
 8009a22:	4622      	mov	r2, r4
 8009a24:	462b      	mov	r3, r5
 8009a26:	4680      	mov	r8, r0
 8009a28:	4689      	mov	r9, r1
 8009a2a:	4650      	mov	r0, sl
 8009a2c:	4659      	mov	r1, fp
 8009a2e:	f7f6 fd4b 	bl	80004c8 <__aeabi_dmul>
 8009a32:	4604      	mov	r4, r0
 8009a34:	460d      	mov	r5, r1
 8009a36:	460b      	mov	r3, r1
 8009a38:	4602      	mov	r2, r0
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009a42:	f7f6 fb8b 	bl	800015c <__adddf3>
 8009a46:	4b1a      	ldr	r3, [pc, #104]	; (8009ab0 <__ieee754_pow+0x3d8>)
 8009a48:	4682      	mov	sl, r0
 8009a4a:	4299      	cmp	r1, r3
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	460e      	mov	r6, r1
 8009a50:	f340 82e1 	ble.w	800a016 <__ieee754_pow+0x93e>
 8009a54:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009a58:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009a5c:	4303      	orrs	r3, r0
 8009a5e:	f000 81db 	beq.w	8009e18 <__ieee754_pow+0x740>
 8009a62:	a30d      	add	r3, pc, #52	; (adr r3, 8009a98 <__ieee754_pow+0x3c0>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a6c:	f7f6 fd2c 	bl	80004c8 <__aeabi_dmul>
 8009a70:	a309      	add	r3, pc, #36	; (adr r3, 8009a98 <__ieee754_pow+0x3c0>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	e6c4      	b.n	8009802 <__ieee754_pow+0x12a>
 8009a78:	60000000 	.word	0x60000000
 8009a7c:	3ff71547 	.word	0x3ff71547
 8009a80:	f85ddf44 	.word	0xf85ddf44
 8009a84:	3e54ae0b 	.word	0x3e54ae0b
 8009a88:	55555555 	.word	0x55555555
 8009a8c:	3fd55555 	.word	0x3fd55555
 8009a90:	652b82fe 	.word	0x652b82fe
 8009a94:	3ff71547 	.word	0x3ff71547
 8009a98:	8800759c 	.word	0x8800759c
 8009a9c:	7e37e43c 	.word	0x7e37e43c
 8009aa0:	3ff00000 	.word	0x3ff00000
 8009aa4:	3fd00000 	.word	0x3fd00000
 8009aa8:	3fe00000 	.word	0x3fe00000
 8009aac:	bff00000 	.word	0xbff00000
 8009ab0:	408fffff 	.word	0x408fffff
 8009ab4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	da08      	bge.n	8009ad0 <__ieee754_pow+0x3f8>
 8009abe:	4658      	mov	r0, fp
 8009ac0:	4bcd      	ldr	r3, [pc, #820]	; (8009df8 <__ieee754_pow+0x720>)
 8009ac2:	4661      	mov	r1, ip
 8009ac4:	f7f6 fd00 	bl	80004c8 <__aeabi_dmul>
 8009ac8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009acc:	4683      	mov	fp, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	1523      	asrs	r3, r4, #20
 8009ad2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ad6:	4413      	add	r3, r2
 8009ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8009ada:	4bc8      	ldr	r3, [pc, #800]	; (8009dfc <__ieee754_pow+0x724>)
 8009adc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009ae0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009ae4:	429c      	cmp	r4, r3
 8009ae6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009aea:	dd08      	ble.n	8009afe <__ieee754_pow+0x426>
 8009aec:	4bc4      	ldr	r3, [pc, #784]	; (8009e00 <__ieee754_pow+0x728>)
 8009aee:	429c      	cmp	r4, r3
 8009af0:	f340 815b 	ble.w	8009daa <__ieee754_pow+0x6d2>
 8009af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009af6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009afa:	3301      	adds	r3, #1
 8009afc:	930c      	str	r3, [sp, #48]	; 0x30
 8009afe:	f04f 0800 	mov.w	r8, #0
 8009b02:	4658      	mov	r0, fp
 8009b04:	4629      	mov	r1, r5
 8009b06:	4bbf      	ldr	r3, [pc, #764]	; (8009e04 <__ieee754_pow+0x72c>)
 8009b08:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8009b0c:	444b      	add	r3, r9
 8009b0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b12:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009b16:	461a      	mov	r2, r3
 8009b18:	4623      	mov	r3, r4
 8009b1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009b1e:	f7f6 fb1b 	bl	8000158 <__aeabi_dsub>
 8009b22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b26:	4606      	mov	r6, r0
 8009b28:	460f      	mov	r7, r1
 8009b2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b2e:	f7f6 fb15 	bl	800015c <__adddf3>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	2000      	movs	r0, #0
 8009b38:	49b3      	ldr	r1, [pc, #716]	; (8009e08 <__ieee754_pow+0x730>)
 8009b3a:	f7f6 fdef 	bl	800071c <__aeabi_ddiv>
 8009b3e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4630      	mov	r0, r6
 8009b48:	4639      	mov	r1, r7
 8009b4a:	f7f6 fcbd 	bl	80004c8 <__aeabi_dmul>
 8009b4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b52:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009b56:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	106d      	asrs	r5, r5, #1
 8009b60:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009b6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009b6e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8009b72:	4650      	mov	r0, sl
 8009b74:	4659      	mov	r1, fp
 8009b76:	4614      	mov	r4, r2
 8009b78:	461d      	mov	r5, r3
 8009b7a:	f7f6 fca5 	bl	80004c8 <__aeabi_dmul>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4630      	mov	r0, r6
 8009b84:	4639      	mov	r1, r7
 8009b86:	f7f6 fae7 	bl	8000158 <__aeabi_dsub>
 8009b8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b8e:	4606      	mov	r6, r0
 8009b90:	460f      	mov	r7, r1
 8009b92:	4620      	mov	r0, r4
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7f6 fadf 	bl	8000158 <__aeabi_dsub>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ba2:	f7f6 fad9 	bl	8000158 <__aeabi_dsub>
 8009ba6:	4652      	mov	r2, sl
 8009ba8:	465b      	mov	r3, fp
 8009baa:	f7f6 fc8d 	bl	80004c8 <__aeabi_dmul>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	4639      	mov	r1, r7
 8009bb6:	f7f6 facf 	bl	8000158 <__aeabi_dsub>
 8009bba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009bbe:	f7f6 fc83 	bl	80004c8 <__aeabi_dmul>
 8009bc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009bca:	4610      	mov	r0, r2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	f7f6 fc7b 	bl	80004c8 <__aeabi_dmul>
 8009bd2:	a377      	add	r3, pc, #476	; (adr r3, 8009db0 <__ieee754_pow+0x6d8>)
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	f7f6 fc74 	bl	80004c8 <__aeabi_dmul>
 8009be0:	a375      	add	r3, pc, #468	; (adr r3, 8009db8 <__ieee754_pow+0x6e0>)
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	f7f6 fab9 	bl	800015c <__adddf3>
 8009bea:	4622      	mov	r2, r4
 8009bec:	462b      	mov	r3, r5
 8009bee:	f7f6 fc6b 	bl	80004c8 <__aeabi_dmul>
 8009bf2:	a373      	add	r3, pc, #460	; (adr r3, 8009dc0 <__ieee754_pow+0x6e8>)
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	f7f6 fab0 	bl	800015c <__adddf3>
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	462b      	mov	r3, r5
 8009c00:	f7f6 fc62 	bl	80004c8 <__aeabi_dmul>
 8009c04:	a370      	add	r3, pc, #448	; (adr r3, 8009dc8 <__ieee754_pow+0x6f0>)
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	f7f6 faa7 	bl	800015c <__adddf3>
 8009c0e:	4622      	mov	r2, r4
 8009c10:	462b      	mov	r3, r5
 8009c12:	f7f6 fc59 	bl	80004c8 <__aeabi_dmul>
 8009c16:	a36e      	add	r3, pc, #440	; (adr r3, 8009dd0 <__ieee754_pow+0x6f8>)
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	f7f6 fa9e 	bl	800015c <__adddf3>
 8009c20:	4622      	mov	r2, r4
 8009c22:	462b      	mov	r3, r5
 8009c24:	f7f6 fc50 	bl	80004c8 <__aeabi_dmul>
 8009c28:	a36b      	add	r3, pc, #428	; (adr r3, 8009dd8 <__ieee754_pow+0x700>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f7f6 fa95 	bl	800015c <__adddf3>
 8009c32:	4622      	mov	r2, r4
 8009c34:	4606      	mov	r6, r0
 8009c36:	460f      	mov	r7, r1
 8009c38:	462b      	mov	r3, r5
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	f7f6 fc43 	bl	80004c8 <__aeabi_dmul>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4630      	mov	r0, r6
 8009c48:	4639      	mov	r1, r7
 8009c4a:	f7f6 fc3d 	bl	80004c8 <__aeabi_dmul>
 8009c4e:	4604      	mov	r4, r0
 8009c50:	460d      	mov	r5, r1
 8009c52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c56:	4652      	mov	r2, sl
 8009c58:	465b      	mov	r3, fp
 8009c5a:	f7f6 fa7f 	bl	800015c <__adddf3>
 8009c5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c62:	f7f6 fc31 	bl	80004c8 <__aeabi_dmul>
 8009c66:	4622      	mov	r2, r4
 8009c68:	462b      	mov	r3, r5
 8009c6a:	f7f6 fa77 	bl	800015c <__adddf3>
 8009c6e:	4652      	mov	r2, sl
 8009c70:	4606      	mov	r6, r0
 8009c72:	460f      	mov	r7, r1
 8009c74:	465b      	mov	r3, fp
 8009c76:	4650      	mov	r0, sl
 8009c78:	4659      	mov	r1, fp
 8009c7a:	f7f6 fc25 	bl	80004c8 <__aeabi_dmul>
 8009c7e:	2200      	movs	r2, #0
 8009c80:	4b62      	ldr	r3, [pc, #392]	; (8009e0c <__ieee754_pow+0x734>)
 8009c82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c86:	f7f6 fa69 	bl	800015c <__adddf3>
 8009c8a:	4632      	mov	r2, r6
 8009c8c:	463b      	mov	r3, r7
 8009c8e:	f7f6 fa65 	bl	800015c <__adddf3>
 8009c92:	9804      	ldr	r0, [sp, #16]
 8009c94:	460d      	mov	r5, r1
 8009c96:	4604      	mov	r4, r0
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4650      	mov	r0, sl
 8009c9e:	4659      	mov	r1, fp
 8009ca0:	f7f6 fc12 	bl	80004c8 <__aeabi_dmul>
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	4682      	mov	sl, r0
 8009ca8:	468b      	mov	fp, r1
 8009caa:	4b58      	ldr	r3, [pc, #352]	; (8009e0c <__ieee754_pow+0x734>)
 8009cac:	4620      	mov	r0, r4
 8009cae:	4629      	mov	r1, r5
 8009cb0:	f7f6 fa52 	bl	8000158 <__aeabi_dsub>
 8009cb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cb8:	f7f6 fa4e 	bl	8000158 <__aeabi_dsub>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	f7f6 fa48 	bl	8000158 <__aeabi_dsub>
 8009cc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ccc:	f7f6 fbfc 	bl	80004c8 <__aeabi_dmul>
 8009cd0:	4622      	mov	r2, r4
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cda:	462b      	mov	r3, r5
 8009cdc:	f7f6 fbf4 	bl	80004c8 <__aeabi_dmul>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	4639      	mov	r1, r7
 8009ce8:	f7f6 fa38 	bl	800015c <__adddf3>
 8009cec:	4606      	mov	r6, r0
 8009cee:	460f      	mov	r7, r1
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4650      	mov	r0, sl
 8009cf6:	4659      	mov	r1, fp
 8009cf8:	f7f6 fa30 	bl	800015c <__adddf3>
 8009cfc:	a338      	add	r3, pc, #224	; (adr r3, 8009de0 <__ieee754_pow+0x708>)
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	9804      	ldr	r0, [sp, #16]
 8009d04:	460d      	mov	r5, r1
 8009d06:	4604      	mov	r4, r0
 8009d08:	f7f6 fbde 	bl	80004c8 <__aeabi_dmul>
 8009d0c:	4652      	mov	r2, sl
 8009d0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d12:	465b      	mov	r3, fp
 8009d14:	4620      	mov	r0, r4
 8009d16:	4629      	mov	r1, r5
 8009d18:	f7f6 fa1e 	bl	8000158 <__aeabi_dsub>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f6 fa18 	bl	8000158 <__aeabi_dsub>
 8009d28:	a32f      	add	r3, pc, #188	; (adr r3, 8009de8 <__ieee754_pow+0x710>)
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	f7f6 fbcb 	bl	80004c8 <__aeabi_dmul>
 8009d32:	a32f      	add	r3, pc, #188	; (adr r3, 8009df0 <__ieee754_pow+0x718>)
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	4606      	mov	r6, r0
 8009d3a:	460f      	mov	r7, r1
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	4629      	mov	r1, r5
 8009d40:	f7f6 fbc2 	bl	80004c8 <__aeabi_dmul>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4630      	mov	r0, r6
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	f7f6 fa06 	bl	800015c <__adddf3>
 8009d50:	4b2f      	ldr	r3, [pc, #188]	; (8009e10 <__ieee754_pow+0x738>)
 8009d52:	444b      	add	r3, r9
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f7f6 fa00 	bl	800015c <__adddf3>
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d60:	460d      	mov	r5, r1
 8009d62:	f7f6 fb47 	bl	80003f4 <__aeabi_i2d>
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	4b2a      	ldr	r3, [pc, #168]	; (8009e14 <__ieee754_pow+0x73c>)
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	444b      	add	r3, r9
 8009d70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d74:	462b      	mov	r3, r5
 8009d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d7a:	f7f6 f9ef 	bl	800015c <__adddf3>
 8009d7e:	4642      	mov	r2, r8
 8009d80:	464b      	mov	r3, r9
 8009d82:	f7f6 f9eb 	bl	800015c <__adddf3>
 8009d86:	4632      	mov	r2, r6
 8009d88:	463b      	mov	r3, r7
 8009d8a:	f7f6 f9e7 	bl	800015c <__adddf3>
 8009d8e:	9804      	ldr	r0, [sp, #16]
 8009d90:	4632      	mov	r2, r6
 8009d92:	463b      	mov	r3, r7
 8009d94:	4682      	mov	sl, r0
 8009d96:	468b      	mov	fp, r1
 8009d98:	f7f6 f9de 	bl	8000158 <__aeabi_dsub>
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	464b      	mov	r3, r9
 8009da0:	f7f6 f9da 	bl	8000158 <__aeabi_dsub>
 8009da4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009da8:	e60b      	b.n	80099c2 <__ieee754_pow+0x2ea>
 8009daa:	f04f 0801 	mov.w	r8, #1
 8009dae:	e6a8      	b.n	8009b02 <__ieee754_pow+0x42a>
 8009db0:	4a454eef 	.word	0x4a454eef
 8009db4:	3fca7e28 	.word	0x3fca7e28
 8009db8:	93c9db65 	.word	0x93c9db65
 8009dbc:	3fcd864a 	.word	0x3fcd864a
 8009dc0:	a91d4101 	.word	0xa91d4101
 8009dc4:	3fd17460 	.word	0x3fd17460
 8009dc8:	518f264d 	.word	0x518f264d
 8009dcc:	3fd55555 	.word	0x3fd55555
 8009dd0:	db6fabff 	.word	0xdb6fabff
 8009dd4:	3fdb6db6 	.word	0x3fdb6db6
 8009dd8:	33333303 	.word	0x33333303
 8009ddc:	3fe33333 	.word	0x3fe33333
 8009de0:	e0000000 	.word	0xe0000000
 8009de4:	3feec709 	.word	0x3feec709
 8009de8:	dc3a03fd 	.word	0xdc3a03fd
 8009dec:	3feec709 	.word	0x3feec709
 8009df0:	145b01f5 	.word	0x145b01f5
 8009df4:	be3e2fe0 	.word	0xbe3e2fe0
 8009df8:	43400000 	.word	0x43400000
 8009dfc:	0003988e 	.word	0x0003988e
 8009e00:	000bb679 	.word	0x000bb679
 8009e04:	0800ab58 	.word	0x0800ab58
 8009e08:	3ff00000 	.word	0x3ff00000
 8009e0c:	40080000 	.word	0x40080000
 8009e10:	0800ab78 	.word	0x0800ab78
 8009e14:	0800ab68 	.word	0x0800ab68
 8009e18:	a39b      	add	r3, pc, #620	; (adr r3, 800a088 <__ieee754_pow+0x9b0>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	4640      	mov	r0, r8
 8009e20:	4649      	mov	r1, r9
 8009e22:	f7f6 f99b 	bl	800015c <__adddf3>
 8009e26:	4622      	mov	r2, r4
 8009e28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e2c:	462b      	mov	r3, r5
 8009e2e:	4650      	mov	r0, sl
 8009e30:	4639      	mov	r1, r7
 8009e32:	f7f6 f991 	bl	8000158 <__aeabi_dsub>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e3e:	f7f6 fdd3 	bl	80009e8 <__aeabi_dcmpgt>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f47f ae0d 	bne.w	8009a62 <__ieee754_pow+0x38a>
 8009e48:	4aa3      	ldr	r2, [pc, #652]	; (800a0d8 <__ieee754_pow+0xa00>)
 8009e4a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	f340 8103 	ble.w	800a05a <__ieee754_pow+0x982>
 8009e54:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009e58:	2000      	movs	r0, #0
 8009e5a:	151b      	asrs	r3, r3, #20
 8009e5c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009e60:	fa4a f303 	asr.w	r3, sl, r3
 8009e64:	4433      	add	r3, r6
 8009e66:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009e6a:	4f9c      	ldr	r7, [pc, #624]	; (800a0dc <__ieee754_pow+0xa04>)
 8009e6c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009e70:	4117      	asrs	r7, r2
 8009e72:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009e76:	ea23 0107 	bic.w	r1, r3, r7
 8009e7a:	f1c2 0214 	rsb	r2, r2, #20
 8009e7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009e82:	fa4a fa02 	asr.w	sl, sl, r2
 8009e86:	2e00      	cmp	r6, #0
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4629      	mov	r1, r5
 8009e90:	bfb8      	it	lt
 8009e92:	f1ca 0a00 	rsblt	sl, sl, #0
 8009e96:	f7f6 f95f 	bl	8000158 <__aeabi_dsub>
 8009e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea2:	4642      	mov	r2, r8
 8009ea4:	464b      	mov	r3, r9
 8009ea6:	f7f6 f959 	bl	800015c <__adddf3>
 8009eaa:	a379      	add	r3, pc, #484	; (adr r3, 800a090 <__ieee754_pow+0x9b8>)
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	460d      	mov	r5, r1
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	f7f6 fb07 	bl	80004c8 <__aeabi_dmul>
 8009eba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	460f      	mov	r7, r1
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	f7f6 f947 	bl	8000158 <__aeabi_dsub>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4640      	mov	r0, r8
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	f7f6 f941 	bl	8000158 <__aeabi_dsub>
 8009ed6:	a370      	add	r3, pc, #448	; (adr r3, 800a098 <__ieee754_pow+0x9c0>)
 8009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009edc:	f7f6 faf4 	bl	80004c8 <__aeabi_dmul>
 8009ee0:	a36f      	add	r3, pc, #444	; (adr r3, 800a0a0 <__ieee754_pow+0x9c8>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	4680      	mov	r8, r0
 8009ee8:	4689      	mov	r9, r1
 8009eea:	4620      	mov	r0, r4
 8009eec:	4629      	mov	r1, r5
 8009eee:	f7f6 faeb 	bl	80004c8 <__aeabi_dmul>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	4649      	mov	r1, r9
 8009efa:	f7f6 f92f 	bl	800015c <__adddf3>
 8009efe:	4604      	mov	r4, r0
 8009f00:	460d      	mov	r5, r1
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4630      	mov	r0, r6
 8009f08:	4639      	mov	r1, r7
 8009f0a:	f7f6 f927 	bl	800015c <__adddf3>
 8009f0e:	4632      	mov	r2, r6
 8009f10:	463b      	mov	r3, r7
 8009f12:	4680      	mov	r8, r0
 8009f14:	4689      	mov	r9, r1
 8009f16:	f7f6 f91f 	bl	8000158 <__aeabi_dsub>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4629      	mov	r1, r5
 8009f22:	f7f6 f919 	bl	8000158 <__aeabi_dsub>
 8009f26:	4642      	mov	r2, r8
 8009f28:	4606      	mov	r6, r0
 8009f2a:	460f      	mov	r7, r1
 8009f2c:	464b      	mov	r3, r9
 8009f2e:	4640      	mov	r0, r8
 8009f30:	4649      	mov	r1, r9
 8009f32:	f7f6 fac9 	bl	80004c8 <__aeabi_dmul>
 8009f36:	a35c      	add	r3, pc, #368	; (adr r3, 800a0a8 <__ieee754_pow+0x9d0>)
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	460d      	mov	r5, r1
 8009f40:	f7f6 fac2 	bl	80004c8 <__aeabi_dmul>
 8009f44:	a35a      	add	r3, pc, #360	; (adr r3, 800a0b0 <__ieee754_pow+0x9d8>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	f7f6 f905 	bl	8000158 <__aeabi_dsub>
 8009f4e:	4622      	mov	r2, r4
 8009f50:	462b      	mov	r3, r5
 8009f52:	f7f6 fab9 	bl	80004c8 <__aeabi_dmul>
 8009f56:	a358      	add	r3, pc, #352	; (adr r3, 800a0b8 <__ieee754_pow+0x9e0>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f7f6 f8fe 	bl	800015c <__adddf3>
 8009f60:	4622      	mov	r2, r4
 8009f62:	462b      	mov	r3, r5
 8009f64:	f7f6 fab0 	bl	80004c8 <__aeabi_dmul>
 8009f68:	a355      	add	r3, pc, #340	; (adr r3, 800a0c0 <__ieee754_pow+0x9e8>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f7f6 f8f3 	bl	8000158 <__aeabi_dsub>
 8009f72:	4622      	mov	r2, r4
 8009f74:	462b      	mov	r3, r5
 8009f76:	f7f6 faa7 	bl	80004c8 <__aeabi_dmul>
 8009f7a:	a353      	add	r3, pc, #332	; (adr r3, 800a0c8 <__ieee754_pow+0x9f0>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 f8ec 	bl	800015c <__adddf3>
 8009f84:	4622      	mov	r2, r4
 8009f86:	462b      	mov	r3, r5
 8009f88:	f7f6 fa9e 	bl	80004c8 <__aeabi_dmul>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4640      	mov	r0, r8
 8009f92:	4649      	mov	r1, r9
 8009f94:	f7f6 f8e0 	bl	8000158 <__aeabi_dsub>
 8009f98:	4604      	mov	r4, r0
 8009f9a:	460d      	mov	r5, r1
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	f7f6 fa90 	bl	80004c8 <__aeabi_dmul>
 8009fa8:	2200      	movs	r2, #0
 8009faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	f7f6 f8cf 	bl	8000158 <__aeabi_dsub>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fc2:	f7f6 fbab 	bl	800071c <__aeabi_ddiv>
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	4604      	mov	r4, r0
 8009fca:	460d      	mov	r5, r1
 8009fcc:	463b      	mov	r3, r7
 8009fce:	4640      	mov	r0, r8
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	f7f6 fa79 	bl	80004c8 <__aeabi_dmul>
 8009fd6:	4632      	mov	r2, r6
 8009fd8:	463b      	mov	r3, r7
 8009fda:	f7f6 f8bf 	bl	800015c <__adddf3>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 f8b7 	bl	8000158 <__aeabi_dsub>
 8009fea:	4642      	mov	r2, r8
 8009fec:	464b      	mov	r3, r9
 8009fee:	f7f6 f8b3 	bl	8000158 <__aeabi_dsub>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	4939      	ldr	r1, [pc, #228]	; (800a0e0 <__ieee754_pow+0xa08>)
 8009ffa:	f7f6 f8ad 	bl	8000158 <__aeabi_dsub>
 8009ffe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a002:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a006:	da2b      	bge.n	800a060 <__ieee754_pow+0x988>
 800a008:	4652      	mov	r2, sl
 800a00a:	f000 fbdd 	bl	800a7c8 <scalbn>
 800a00e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a012:	f7ff bbf6 	b.w	8009802 <__ieee754_pow+0x12a>
 800a016:	4b33      	ldr	r3, [pc, #204]	; (800a0e4 <__ieee754_pow+0xa0c>)
 800a018:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a01c:	429f      	cmp	r7, r3
 800a01e:	f77f af13 	ble.w	8009e48 <__ieee754_pow+0x770>
 800a022:	4b31      	ldr	r3, [pc, #196]	; (800a0e8 <__ieee754_pow+0xa10>)
 800a024:	440b      	add	r3, r1
 800a026:	4303      	orrs	r3, r0
 800a028:	d00b      	beq.n	800a042 <__ieee754_pow+0x96a>
 800a02a:	a329      	add	r3, pc, #164	; (adr r3, 800a0d0 <__ieee754_pow+0x9f8>)
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a034:	f7f6 fa48 	bl	80004c8 <__aeabi_dmul>
 800a038:	a325      	add	r3, pc, #148	; (adr r3, 800a0d0 <__ieee754_pow+0x9f8>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7ff bbe0 	b.w	8009802 <__ieee754_pow+0x12a>
 800a042:	4622      	mov	r2, r4
 800a044:	462b      	mov	r3, r5
 800a046:	f7f6 f887 	bl	8000158 <__aeabi_dsub>
 800a04a:	4642      	mov	r2, r8
 800a04c:	464b      	mov	r3, r9
 800a04e:	f7f6 fcc1 	bl	80009d4 <__aeabi_dcmpge>
 800a052:	2800      	cmp	r0, #0
 800a054:	f43f aef8 	beq.w	8009e48 <__ieee754_pow+0x770>
 800a058:	e7e7      	b.n	800a02a <__ieee754_pow+0x952>
 800a05a:	f04f 0a00 	mov.w	sl, #0
 800a05e:	e71e      	b.n	8009e9e <__ieee754_pow+0x7c6>
 800a060:	4621      	mov	r1, r4
 800a062:	e7d4      	b.n	800a00e <__ieee754_pow+0x936>
 800a064:	f04f 0b00 	mov.w	fp, #0
 800a068:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a0e0 <__ieee754_pow+0xa08>
 800a06c:	f7ff bb95 	b.w	800979a <__ieee754_pow+0xc2>
 800a070:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a074:	f7ff bb91 	b.w	800979a <__ieee754_pow+0xc2>
 800a078:	4638      	mov	r0, r7
 800a07a:	4641      	mov	r1, r8
 800a07c:	f7ff bbc3 	b.w	8009806 <__ieee754_pow+0x12e>
 800a080:	9200      	str	r2, [sp, #0]
 800a082:	f7ff bb9f 	b.w	80097c4 <__ieee754_pow+0xec>
 800a086:	bf00      	nop
 800a088:	652b82fe 	.word	0x652b82fe
 800a08c:	3c971547 	.word	0x3c971547
 800a090:	00000000 	.word	0x00000000
 800a094:	3fe62e43 	.word	0x3fe62e43
 800a098:	fefa39ef 	.word	0xfefa39ef
 800a09c:	3fe62e42 	.word	0x3fe62e42
 800a0a0:	0ca86c39 	.word	0x0ca86c39
 800a0a4:	be205c61 	.word	0xbe205c61
 800a0a8:	72bea4d0 	.word	0x72bea4d0
 800a0ac:	3e663769 	.word	0x3e663769
 800a0b0:	c5d26bf1 	.word	0xc5d26bf1
 800a0b4:	3ebbbd41 	.word	0x3ebbbd41
 800a0b8:	af25de2c 	.word	0xaf25de2c
 800a0bc:	3f11566a 	.word	0x3f11566a
 800a0c0:	16bebd93 	.word	0x16bebd93
 800a0c4:	3f66c16c 	.word	0x3f66c16c
 800a0c8:	5555553e 	.word	0x5555553e
 800a0cc:	3fc55555 	.word	0x3fc55555
 800a0d0:	c2f8f359 	.word	0xc2f8f359
 800a0d4:	01a56e1f 	.word	0x01a56e1f
 800a0d8:	3fe00000 	.word	0x3fe00000
 800a0dc:	000fffff 	.word	0x000fffff
 800a0e0:	3ff00000 	.word	0x3ff00000
 800a0e4:	4090cbff 	.word	0x4090cbff
 800a0e8:	3f6f3400 	.word	0x3f6f3400

0800a0ec <__ieee754_sqrt>:
 800a0ec:	4b54      	ldr	r3, [pc, #336]	; (800a240 <__ieee754_sqrt+0x154>)
 800a0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f2:	438b      	bics	r3, r1
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	460d      	mov	r5, r1
 800a0f8:	460a      	mov	r2, r1
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	d10f      	bne.n	800a11e <__ieee754_sqrt+0x32>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	f7f6 f9e1 	bl	80004c8 <__aeabi_dmul>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4630      	mov	r0, r6
 800a10c:	4629      	mov	r1, r5
 800a10e:	f7f6 f825 	bl	800015c <__adddf3>
 800a112:	4606      	mov	r6, r0
 800a114:	460d      	mov	r5, r1
 800a116:	4630      	mov	r0, r6
 800a118:	4629      	mov	r1, r5
 800a11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a11e:	2900      	cmp	r1, #0
 800a120:	4607      	mov	r7, r0
 800a122:	4603      	mov	r3, r0
 800a124:	dc0e      	bgt.n	800a144 <__ieee754_sqrt+0x58>
 800a126:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a12a:	ea5c 0707 	orrs.w	r7, ip, r7
 800a12e:	d0f2      	beq.n	800a116 <__ieee754_sqrt+0x2a>
 800a130:	b141      	cbz	r1, 800a144 <__ieee754_sqrt+0x58>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	f7f6 f80f 	bl	8000158 <__aeabi_dsub>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	f7f6 faed 	bl	800071c <__aeabi_ddiv>
 800a142:	e7e6      	b.n	800a112 <__ieee754_sqrt+0x26>
 800a144:	1512      	asrs	r2, r2, #20
 800a146:	d074      	beq.n	800a232 <__ieee754_sqrt+0x146>
 800a148:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a14c:	07d5      	lsls	r5, r2, #31
 800a14e:	f04f 0500 	mov.w	r5, #0
 800a152:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a156:	bf48      	it	mi
 800a158:	0fd9      	lsrmi	r1, r3, #31
 800a15a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a15e:	bf44      	itt	mi
 800a160:	005b      	lslmi	r3, r3, #1
 800a162:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800a166:	1051      	asrs	r1, r2, #1
 800a168:	0fda      	lsrs	r2, r3, #31
 800a16a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800a16e:	4628      	mov	r0, r5
 800a170:	2216      	movs	r2, #22
 800a172:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a176:	005b      	lsls	r3, r3, #1
 800a178:	1987      	adds	r7, r0, r6
 800a17a:	42a7      	cmp	r7, r4
 800a17c:	bfde      	ittt	le
 800a17e:	19b8      	addle	r0, r7, r6
 800a180:	1be4      	suble	r4, r4, r7
 800a182:	19ad      	addle	r5, r5, r6
 800a184:	0fdf      	lsrs	r7, r3, #31
 800a186:	3a01      	subs	r2, #1
 800a188:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800a18c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a190:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a194:	d1f0      	bne.n	800a178 <__ieee754_sqrt+0x8c>
 800a196:	f04f 0c20 	mov.w	ip, #32
 800a19a:	4696      	mov	lr, r2
 800a19c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a1a0:	4284      	cmp	r4, r0
 800a1a2:	eb06 070e 	add.w	r7, r6, lr
 800a1a6:	dc02      	bgt.n	800a1ae <__ieee754_sqrt+0xc2>
 800a1a8:	d112      	bne.n	800a1d0 <__ieee754_sqrt+0xe4>
 800a1aa:	429f      	cmp	r7, r3
 800a1ac:	d810      	bhi.n	800a1d0 <__ieee754_sqrt+0xe4>
 800a1ae:	2f00      	cmp	r7, #0
 800a1b0:	eb07 0e06 	add.w	lr, r7, r6
 800a1b4:	da42      	bge.n	800a23c <__ieee754_sqrt+0x150>
 800a1b6:	f1be 0f00 	cmp.w	lr, #0
 800a1ba:	db3f      	blt.n	800a23c <__ieee754_sqrt+0x150>
 800a1bc:	f100 0801 	add.w	r8, r0, #1
 800a1c0:	1a24      	subs	r4, r4, r0
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	429f      	cmp	r7, r3
 800a1c6:	bf88      	it	hi
 800a1c8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800a1cc:	1bdb      	subs	r3, r3, r7
 800a1ce:	4432      	add	r2, r6
 800a1d0:	0064      	lsls	r4, r4, #1
 800a1d2:	f1bc 0c01 	subs.w	ip, ip, #1
 800a1d6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800a1da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a1de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1e2:	d1dd      	bne.n	800a1a0 <__ieee754_sqrt+0xb4>
 800a1e4:	4323      	orrs	r3, r4
 800a1e6:	d006      	beq.n	800a1f6 <__ieee754_sqrt+0x10a>
 800a1e8:	1c54      	adds	r4, r2, #1
 800a1ea:	bf0b      	itete	eq
 800a1ec:	4662      	moveq	r2, ip
 800a1ee:	3201      	addne	r2, #1
 800a1f0:	3501      	addeq	r5, #1
 800a1f2:	f022 0201 	bicne.w	r2, r2, #1
 800a1f6:	106b      	asrs	r3, r5, #1
 800a1f8:	0852      	lsrs	r2, r2, #1
 800a1fa:	07e8      	lsls	r0, r5, #31
 800a1fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a200:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a204:	bf48      	it	mi
 800a206:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a20a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800a20e:	4616      	mov	r6, r2
 800a210:	e781      	b.n	800a116 <__ieee754_sqrt+0x2a>
 800a212:	0adc      	lsrs	r4, r3, #11
 800a214:	3915      	subs	r1, #21
 800a216:	055b      	lsls	r3, r3, #21
 800a218:	2c00      	cmp	r4, #0
 800a21a:	d0fa      	beq.n	800a212 <__ieee754_sqrt+0x126>
 800a21c:	02e6      	lsls	r6, r4, #11
 800a21e:	d50a      	bpl.n	800a236 <__ieee754_sqrt+0x14a>
 800a220:	f1c2 0020 	rsb	r0, r2, #32
 800a224:	fa23 f000 	lsr.w	r0, r3, r0
 800a228:	1e55      	subs	r5, r2, #1
 800a22a:	4093      	lsls	r3, r2
 800a22c:	4304      	orrs	r4, r0
 800a22e:	1b4a      	subs	r2, r1, r5
 800a230:	e78a      	b.n	800a148 <__ieee754_sqrt+0x5c>
 800a232:	4611      	mov	r1, r2
 800a234:	e7f0      	b.n	800a218 <__ieee754_sqrt+0x12c>
 800a236:	0064      	lsls	r4, r4, #1
 800a238:	3201      	adds	r2, #1
 800a23a:	e7ef      	b.n	800a21c <__ieee754_sqrt+0x130>
 800a23c:	4680      	mov	r8, r0
 800a23e:	e7bf      	b.n	800a1c0 <__ieee754_sqrt+0xd4>
 800a240:	7ff00000 	.word	0x7ff00000

0800a244 <__ieee754_asinf>:
 800a244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a248:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800a24c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800a250:	4604      	mov	r4, r0
 800a252:	4607      	mov	r7, r0
 800a254:	d10c      	bne.n	800a270 <__ieee754_asinf+0x2c>
 800a256:	498c      	ldr	r1, [pc, #560]	; (800a488 <__ieee754_asinf+0x244>)
 800a258:	f7f6 fd64 	bl	8000d24 <__aeabi_fmul>
 800a25c:	498b      	ldr	r1, [pc, #556]	; (800a48c <__ieee754_asinf+0x248>)
 800a25e:	4605      	mov	r5, r0
 800a260:	4620      	mov	r0, r4
 800a262:	f7f6 fd5f 	bl	8000d24 <__aeabi_fmul>
 800a266:	4601      	mov	r1, r0
 800a268:	4628      	mov	r0, r5
 800a26a:	f7f6 fc53 	bl	8000b14 <__addsf3>
 800a26e:	e006      	b.n	800a27e <__ieee754_asinf+0x3a>
 800a270:	dd09      	ble.n	800a286 <__ieee754_asinf+0x42>
 800a272:	4601      	mov	r1, r0
 800a274:	f7f6 fc4c 	bl	8000b10 <__aeabi_fsub>
 800a278:	4601      	mov	r1, r0
 800a27a:	f7f6 fe07 	bl	8000e8c <__aeabi_fdiv>
 800a27e:	4604      	mov	r4, r0
 800a280:	4620      	mov	r0, r4
 800a282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a286:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800a28a:	da0b      	bge.n	800a2a4 <__ieee754_asinf+0x60>
 800a28c:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800a290:	da73      	bge.n	800a37a <__ieee754_asinf+0x136>
 800a292:	497f      	ldr	r1, [pc, #508]	; (800a490 <__ieee754_asinf+0x24c>)
 800a294:	f7f6 fc3e 	bl	8000b14 <__addsf3>
 800a298:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a29c:	f7f6 fefe 	bl	800109c <__aeabi_fcmpgt>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d1ed      	bne.n	800a280 <__ieee754_asinf+0x3c>
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 fc09 	bl	800aabc <fabsf>
 800a2aa:	4601      	mov	r1, r0
 800a2ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a2b0:	f7f6 fc2e 	bl	8000b10 <__aeabi_fsub>
 800a2b4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a2b8:	f7f6 fd34 	bl	8000d24 <__aeabi_fmul>
 800a2bc:	4604      	mov	r4, r0
 800a2be:	4975      	ldr	r1, [pc, #468]	; (800a494 <__ieee754_asinf+0x250>)
 800a2c0:	f7f6 fd30 	bl	8000d24 <__aeabi_fmul>
 800a2c4:	4974      	ldr	r1, [pc, #464]	; (800a498 <__ieee754_asinf+0x254>)
 800a2c6:	f7f6 fc25 	bl	8000b14 <__addsf3>
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	f7f6 fd2a 	bl	8000d24 <__aeabi_fmul>
 800a2d0:	4972      	ldr	r1, [pc, #456]	; (800a49c <__ieee754_asinf+0x258>)
 800a2d2:	f7f6 fc1d 	bl	8000b10 <__aeabi_fsub>
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	f7f6 fd24 	bl	8000d24 <__aeabi_fmul>
 800a2dc:	4970      	ldr	r1, [pc, #448]	; (800a4a0 <__ieee754_asinf+0x25c>)
 800a2de:	f7f6 fc19 	bl	8000b14 <__addsf3>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	f7f6 fd1e 	bl	8000d24 <__aeabi_fmul>
 800a2e8:	496e      	ldr	r1, [pc, #440]	; (800a4a4 <__ieee754_asinf+0x260>)
 800a2ea:	f7f6 fc11 	bl	8000b10 <__aeabi_fsub>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	f7f6 fd18 	bl	8000d24 <__aeabi_fmul>
 800a2f4:	496c      	ldr	r1, [pc, #432]	; (800a4a8 <__ieee754_asinf+0x264>)
 800a2f6:	f7f6 fc0d 	bl	8000b14 <__addsf3>
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	f7f6 fd12 	bl	8000d24 <__aeabi_fmul>
 800a300:	496a      	ldr	r1, [pc, #424]	; (800a4ac <__ieee754_asinf+0x268>)
 800a302:	4680      	mov	r8, r0
 800a304:	4620      	mov	r0, r4
 800a306:	f7f6 fd0d 	bl	8000d24 <__aeabi_fmul>
 800a30a:	4969      	ldr	r1, [pc, #420]	; (800a4b0 <__ieee754_asinf+0x26c>)
 800a30c:	f7f6 fc00 	bl	8000b10 <__aeabi_fsub>
 800a310:	4621      	mov	r1, r4
 800a312:	f7f6 fd07 	bl	8000d24 <__aeabi_fmul>
 800a316:	4967      	ldr	r1, [pc, #412]	; (800a4b4 <__ieee754_asinf+0x270>)
 800a318:	f7f6 fbfc 	bl	8000b14 <__addsf3>
 800a31c:	4621      	mov	r1, r4
 800a31e:	f7f6 fd01 	bl	8000d24 <__aeabi_fmul>
 800a322:	4965      	ldr	r1, [pc, #404]	; (800a4b8 <__ieee754_asinf+0x274>)
 800a324:	f7f6 fbf4 	bl	8000b10 <__aeabi_fsub>
 800a328:	4621      	mov	r1, r4
 800a32a:	f7f6 fcfb 	bl	8000d24 <__aeabi_fmul>
 800a32e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a332:	f7f6 fbef 	bl	8000b14 <__addsf3>
 800a336:	4681      	mov	r9, r0
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 f955 	bl	800a5e8 <__ieee754_sqrtf>
 800a33e:	4b5f      	ldr	r3, [pc, #380]	; (800a4bc <__ieee754_asinf+0x278>)
 800a340:	4606      	mov	r6, r0
 800a342:	429d      	cmp	r5, r3
 800a344:	dd63      	ble.n	800a40e <__ieee754_asinf+0x1ca>
 800a346:	4649      	mov	r1, r9
 800a348:	4640      	mov	r0, r8
 800a34a:	f7f6 fd9f 	bl	8000e8c <__aeabi_fdiv>
 800a34e:	4631      	mov	r1, r6
 800a350:	f7f6 fce8 	bl	8000d24 <__aeabi_fmul>
 800a354:	4631      	mov	r1, r6
 800a356:	f7f6 fbdd 	bl	8000b14 <__addsf3>
 800a35a:	4601      	mov	r1, r0
 800a35c:	f7f6 fbda 	bl	8000b14 <__addsf3>
 800a360:	4957      	ldr	r1, [pc, #348]	; (800a4c0 <__ieee754_asinf+0x27c>)
 800a362:	f7f6 fbd7 	bl	8000b14 <__addsf3>
 800a366:	4601      	mov	r1, r0
 800a368:	4847      	ldr	r0, [pc, #284]	; (800a488 <__ieee754_asinf+0x244>)
 800a36a:	f7f6 fbd1 	bl	8000b10 <__aeabi_fsub>
 800a36e:	2f00      	cmp	r7, #0
 800a370:	4604      	mov	r4, r0
 800a372:	bfd8      	it	le
 800a374:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800a378:	e782      	b.n	800a280 <__ieee754_asinf+0x3c>
 800a37a:	4601      	mov	r1, r0
 800a37c:	f7f6 fcd2 	bl	8000d24 <__aeabi_fmul>
 800a380:	4605      	mov	r5, r0
 800a382:	4944      	ldr	r1, [pc, #272]	; (800a494 <__ieee754_asinf+0x250>)
 800a384:	f7f6 fcce 	bl	8000d24 <__aeabi_fmul>
 800a388:	4943      	ldr	r1, [pc, #268]	; (800a498 <__ieee754_asinf+0x254>)
 800a38a:	f7f6 fbc3 	bl	8000b14 <__addsf3>
 800a38e:	4629      	mov	r1, r5
 800a390:	f7f6 fcc8 	bl	8000d24 <__aeabi_fmul>
 800a394:	4941      	ldr	r1, [pc, #260]	; (800a49c <__ieee754_asinf+0x258>)
 800a396:	f7f6 fbbb 	bl	8000b10 <__aeabi_fsub>
 800a39a:	4629      	mov	r1, r5
 800a39c:	f7f6 fcc2 	bl	8000d24 <__aeabi_fmul>
 800a3a0:	493f      	ldr	r1, [pc, #252]	; (800a4a0 <__ieee754_asinf+0x25c>)
 800a3a2:	f7f6 fbb7 	bl	8000b14 <__addsf3>
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f7f6 fcbc 	bl	8000d24 <__aeabi_fmul>
 800a3ac:	493d      	ldr	r1, [pc, #244]	; (800a4a4 <__ieee754_asinf+0x260>)
 800a3ae:	f7f6 fbaf 	bl	8000b10 <__aeabi_fsub>
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	f7f6 fcb6 	bl	8000d24 <__aeabi_fmul>
 800a3b8:	493b      	ldr	r1, [pc, #236]	; (800a4a8 <__ieee754_asinf+0x264>)
 800a3ba:	f7f6 fbab 	bl	8000b14 <__addsf3>
 800a3be:	4629      	mov	r1, r5
 800a3c0:	f7f6 fcb0 	bl	8000d24 <__aeabi_fmul>
 800a3c4:	4939      	ldr	r1, [pc, #228]	; (800a4ac <__ieee754_asinf+0x268>)
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	f7f6 fcab 	bl	8000d24 <__aeabi_fmul>
 800a3ce:	4938      	ldr	r1, [pc, #224]	; (800a4b0 <__ieee754_asinf+0x26c>)
 800a3d0:	f7f6 fb9e 	bl	8000b10 <__aeabi_fsub>
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	f7f6 fca5 	bl	8000d24 <__aeabi_fmul>
 800a3da:	4936      	ldr	r1, [pc, #216]	; (800a4b4 <__ieee754_asinf+0x270>)
 800a3dc:	f7f6 fb9a 	bl	8000b14 <__addsf3>
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	f7f6 fc9f 	bl	8000d24 <__aeabi_fmul>
 800a3e6:	4934      	ldr	r1, [pc, #208]	; (800a4b8 <__ieee754_asinf+0x274>)
 800a3e8:	f7f6 fb92 	bl	8000b10 <__aeabi_fsub>
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	f7f6 fc99 	bl	8000d24 <__aeabi_fmul>
 800a3f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a3f6:	f7f6 fb8d 	bl	8000b14 <__addsf3>
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7f6 fd45 	bl	8000e8c <__aeabi_fdiv>
 800a402:	4621      	mov	r1, r4
 800a404:	f7f6 fc8e 	bl	8000d24 <__aeabi_fmul>
 800a408:	4601      	mov	r1, r0
 800a40a:	4620      	mov	r0, r4
 800a40c:	e72d      	b.n	800a26a <__ieee754_asinf+0x26>
 800a40e:	4601      	mov	r1, r0
 800a410:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800a414:	f7f6 fb7e 	bl	8000b14 <__addsf3>
 800a418:	4649      	mov	r1, r9
 800a41a:	4682      	mov	sl, r0
 800a41c:	4640      	mov	r0, r8
 800a41e:	f7f6 fd35 	bl	8000e8c <__aeabi_fdiv>
 800a422:	4601      	mov	r1, r0
 800a424:	4650      	mov	r0, sl
 800a426:	f7f6 fc7d 	bl	8000d24 <__aeabi_fmul>
 800a42a:	f025 050f 	bic.w	r5, r5, #15
 800a42e:	4680      	mov	r8, r0
 800a430:	4629      	mov	r1, r5
 800a432:	4628      	mov	r0, r5
 800a434:	f7f6 fc76 	bl	8000d24 <__aeabi_fmul>
 800a438:	4601      	mov	r1, r0
 800a43a:	4620      	mov	r0, r4
 800a43c:	f7f6 fb68 	bl	8000b10 <__aeabi_fsub>
 800a440:	4631      	mov	r1, r6
 800a442:	4604      	mov	r4, r0
 800a444:	4628      	mov	r0, r5
 800a446:	f7f6 fb65 	bl	8000b14 <__addsf3>
 800a44a:	4601      	mov	r1, r0
 800a44c:	4620      	mov	r0, r4
 800a44e:	f7f6 fd1d 	bl	8000e8c <__aeabi_fdiv>
 800a452:	4601      	mov	r1, r0
 800a454:	f7f6 fb5e 	bl	8000b14 <__addsf3>
 800a458:	4601      	mov	r1, r0
 800a45a:	480c      	ldr	r0, [pc, #48]	; (800a48c <__ieee754_asinf+0x248>)
 800a45c:	f7f6 fb58 	bl	8000b10 <__aeabi_fsub>
 800a460:	4601      	mov	r1, r0
 800a462:	4640      	mov	r0, r8
 800a464:	f7f6 fb54 	bl	8000b10 <__aeabi_fsub>
 800a468:	4629      	mov	r1, r5
 800a46a:	4604      	mov	r4, r0
 800a46c:	4628      	mov	r0, r5
 800a46e:	f7f6 fb51 	bl	8000b14 <__addsf3>
 800a472:	4601      	mov	r1, r0
 800a474:	4813      	ldr	r0, [pc, #76]	; (800a4c4 <__ieee754_asinf+0x280>)
 800a476:	f7f6 fb4b 	bl	8000b10 <__aeabi_fsub>
 800a47a:	4601      	mov	r1, r0
 800a47c:	4620      	mov	r0, r4
 800a47e:	f7f6 fb47 	bl	8000b10 <__aeabi_fsub>
 800a482:	4601      	mov	r1, r0
 800a484:	480f      	ldr	r0, [pc, #60]	; (800a4c4 <__ieee754_asinf+0x280>)
 800a486:	e770      	b.n	800a36a <__ieee754_asinf+0x126>
 800a488:	3fc90fdb 	.word	0x3fc90fdb
 800a48c:	b33bbd2e 	.word	0xb33bbd2e
 800a490:	7149f2ca 	.word	0x7149f2ca
 800a494:	3811ef08 	.word	0x3811ef08
 800a498:	3a4f7f04 	.word	0x3a4f7f04
 800a49c:	3d241146 	.word	0x3d241146
 800a4a0:	3e4e0aa8 	.word	0x3e4e0aa8
 800a4a4:	3ea6b090 	.word	0x3ea6b090
 800a4a8:	3e2aaaab 	.word	0x3e2aaaab
 800a4ac:	3d9dc62e 	.word	0x3d9dc62e
 800a4b0:	3f303361 	.word	0x3f303361
 800a4b4:	4001572d 	.word	0x4001572d
 800a4b8:	4019d139 	.word	0x4019d139
 800a4bc:	3f799999 	.word	0x3f799999
 800a4c0:	333bbd2e 	.word	0x333bbd2e
 800a4c4:	3f490fdb 	.word	0x3f490fdb

0800a4c8 <__ieee754_atan2f>:
 800a4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a4ce:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	dc05      	bgt.n	800a4e2 <__ieee754_atan2f+0x1a>
 800a4d6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a4da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a4de:	4607      	mov	r7, r0
 800a4e0:	dd04      	ble.n	800a4ec <__ieee754_atan2f+0x24>
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7f6 fb16 	bl	8000b14 <__addsf3>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	e024      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a4ec:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a4f0:	d103      	bne.n	800a4fa <__ieee754_atan2f+0x32>
 800a4f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4f6:	f000 b9d5 	b.w	800a8a4 <atanf>
 800a4fa:	178c      	asrs	r4, r1, #30
 800a4fc:	f004 0402 	and.w	r4, r4, #2
 800a500:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a504:	b92a      	cbnz	r2, 800a512 <__ieee754_atan2f+0x4a>
 800a506:	2c02      	cmp	r4, #2
 800a508:	d057      	beq.n	800a5ba <__ieee754_atan2f+0xf2>
 800a50a:	2c03      	cmp	r4, #3
 800a50c:	d113      	bne.n	800a536 <__ieee754_atan2f+0x6e>
 800a50e:	4b2d      	ldr	r3, [pc, #180]	; (800a5c4 <__ieee754_atan2f+0xfc>)
 800a510:	e011      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a512:	b91e      	cbnz	r6, 800a51c <__ieee754_atan2f+0x54>
 800a514:	2f00      	cmp	r7, #0
 800a516:	da52      	bge.n	800a5be <__ieee754_atan2f+0xf6>
 800a518:	4b2b      	ldr	r3, [pc, #172]	; (800a5c8 <__ieee754_atan2f+0x100>)
 800a51a:	e00c      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a51c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a520:	d11a      	bne.n	800a558 <__ieee754_atan2f+0x90>
 800a522:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a526:	d10c      	bne.n	800a542 <__ieee754_atan2f+0x7a>
 800a528:	2c02      	cmp	r4, #2
 800a52a:	d006      	beq.n	800a53a <__ieee754_atan2f+0x72>
 800a52c:	2c03      	cmp	r4, #3
 800a52e:	d006      	beq.n	800a53e <__ieee754_atan2f+0x76>
 800a530:	2c01      	cmp	r4, #1
 800a532:	d140      	bne.n	800a5b6 <__ieee754_atan2f+0xee>
 800a534:	4b25      	ldr	r3, [pc, #148]	; (800a5cc <__ieee754_atan2f+0x104>)
 800a536:	4618      	mov	r0, r3
 800a538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a53a:	4b25      	ldr	r3, [pc, #148]	; (800a5d0 <__ieee754_atan2f+0x108>)
 800a53c:	e7fb      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a53e:	4b25      	ldr	r3, [pc, #148]	; (800a5d4 <__ieee754_atan2f+0x10c>)
 800a540:	e7f9      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a542:	2c02      	cmp	r4, #2
 800a544:	d039      	beq.n	800a5ba <__ieee754_atan2f+0xf2>
 800a546:	2c03      	cmp	r4, #3
 800a548:	d0e1      	beq.n	800a50e <__ieee754_atan2f+0x46>
 800a54a:	2c01      	cmp	r4, #1
 800a54c:	d102      	bne.n	800a554 <__ieee754_atan2f+0x8c>
 800a54e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a552:	e7f0      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a554:	2300      	movs	r3, #0
 800a556:	e7ee      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a558:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a55c:	d0da      	beq.n	800a514 <__ieee754_atan2f+0x4c>
 800a55e:	1b92      	subs	r2, r2, r6
 800a560:	15d2      	asrs	r2, r2, #23
 800a562:	2a3c      	cmp	r2, #60	; 0x3c
 800a564:	dc17      	bgt.n	800a596 <__ieee754_atan2f+0xce>
 800a566:	2900      	cmp	r1, #0
 800a568:	da01      	bge.n	800a56e <__ieee754_atan2f+0xa6>
 800a56a:	323c      	adds	r2, #60	; 0x3c
 800a56c:	db15      	blt.n	800a59a <__ieee754_atan2f+0xd2>
 800a56e:	4618      	mov	r0, r3
 800a570:	f7f6 fc8c 	bl	8000e8c <__aeabi_fdiv>
 800a574:	f000 faa2 	bl	800aabc <fabsf>
 800a578:	f000 f994 	bl	800a8a4 <atanf>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2c01      	cmp	r4, #1
 800a580:	d00d      	beq.n	800a59e <__ieee754_atan2f+0xd6>
 800a582:	2c02      	cmp	r4, #2
 800a584:	d00e      	beq.n	800a5a4 <__ieee754_atan2f+0xdc>
 800a586:	2c00      	cmp	r4, #0
 800a588:	d0d5      	beq.n	800a536 <__ieee754_atan2f+0x6e>
 800a58a:	4913      	ldr	r1, [pc, #76]	; (800a5d8 <__ieee754_atan2f+0x110>)
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7f6 fac1 	bl	8000b14 <__addsf3>
 800a592:	4912      	ldr	r1, [pc, #72]	; (800a5dc <__ieee754_atan2f+0x114>)
 800a594:	e00c      	b.n	800a5b0 <__ieee754_atan2f+0xe8>
 800a596:	4b12      	ldr	r3, [pc, #72]	; (800a5e0 <__ieee754_atan2f+0x118>)
 800a598:	e7f1      	b.n	800a57e <__ieee754_atan2f+0xb6>
 800a59a:	2300      	movs	r3, #0
 800a59c:	e7ef      	b.n	800a57e <__ieee754_atan2f+0xb6>
 800a59e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a5a2:	e7c8      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a5a4:	490c      	ldr	r1, [pc, #48]	; (800a5d8 <__ieee754_atan2f+0x110>)
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7f6 fab4 	bl	8000b14 <__addsf3>
 800a5ac:	4601      	mov	r1, r0
 800a5ae:	480b      	ldr	r0, [pc, #44]	; (800a5dc <__ieee754_atan2f+0x114>)
 800a5b0:	f7f6 faae 	bl	8000b10 <__aeabi_fsub>
 800a5b4:	e798      	b.n	800a4e8 <__ieee754_atan2f+0x20>
 800a5b6:	4b0b      	ldr	r3, [pc, #44]	; (800a5e4 <__ieee754_atan2f+0x11c>)
 800a5b8:	e7bd      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a5ba:	4b08      	ldr	r3, [pc, #32]	; (800a5dc <__ieee754_atan2f+0x114>)
 800a5bc:	e7bb      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a5be:	4b08      	ldr	r3, [pc, #32]	; (800a5e0 <__ieee754_atan2f+0x118>)
 800a5c0:	e7b9      	b.n	800a536 <__ieee754_atan2f+0x6e>
 800a5c2:	bf00      	nop
 800a5c4:	c0490fdb 	.word	0xc0490fdb
 800a5c8:	bfc90fdb 	.word	0xbfc90fdb
 800a5cc:	bf490fdb 	.word	0xbf490fdb
 800a5d0:	4016cbe4 	.word	0x4016cbe4
 800a5d4:	c016cbe4 	.word	0xc016cbe4
 800a5d8:	33bbbd2e 	.word	0x33bbbd2e
 800a5dc:	40490fdb 	.word	0x40490fdb
 800a5e0:	3fc90fdb 	.word	0x3fc90fdb
 800a5e4:	3f490fdb 	.word	0x3f490fdb

0800a5e8 <__ieee754_sqrtf>:
 800a5e8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a5ec:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	d309      	bcc.n	800a60c <__ieee754_sqrtf+0x24>
 800a5f8:	4601      	mov	r1, r0
 800a5fa:	f7f6 fb93 	bl	8000d24 <__aeabi_fmul>
 800a5fe:	4601      	mov	r1, r0
 800a600:	4620      	mov	r0, r4
 800a602:	f7f6 fa87 	bl	8000b14 <__addsf3>
 800a606:	4604      	mov	r4, r0
 800a608:	4620      	mov	r0, r4
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	2a00      	cmp	r2, #0
 800a60e:	d0fb      	beq.n	800a608 <__ieee754_sqrtf+0x20>
 800a610:	2800      	cmp	r0, #0
 800a612:	da06      	bge.n	800a622 <__ieee754_sqrtf+0x3a>
 800a614:	4601      	mov	r1, r0
 800a616:	f7f6 fa7b 	bl	8000b10 <__aeabi_fsub>
 800a61a:	4601      	mov	r1, r0
 800a61c:	f7f6 fc36 	bl	8000e8c <__aeabi_fdiv>
 800a620:	e7f1      	b.n	800a606 <__ieee754_sqrtf+0x1e>
 800a622:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800a626:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800a62a:	d32e      	bcc.n	800a68a <__ieee754_sqrtf+0xa2>
 800a62c:	3c7f      	subs	r4, #127	; 0x7f
 800a62e:	07e2      	lsls	r2, r4, #31
 800a630:	f04f 0200 	mov.w	r2, #0
 800a634:	ea4f 0164 	mov.w	r1, r4, asr #1
 800a638:	4616      	mov	r6, r2
 800a63a:	f04f 0419 	mov.w	r4, #25
 800a63e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a642:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a646:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a64a:	bf48      	it	mi
 800a64c:	005b      	lslmi	r3, r3, #1
 800a64e:	005b      	lsls	r3, r3, #1
 800a650:	1835      	adds	r5, r6, r0
 800a652:	429d      	cmp	r5, r3
 800a654:	bfde      	ittt	le
 800a656:	182e      	addle	r6, r5, r0
 800a658:	1b5b      	suble	r3, r3, r5
 800a65a:	1812      	addle	r2, r2, r0
 800a65c:	3c01      	subs	r4, #1
 800a65e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a662:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a666:	d1f3      	bne.n	800a650 <__ieee754_sqrtf+0x68>
 800a668:	b113      	cbz	r3, 800a670 <__ieee754_sqrtf+0x88>
 800a66a:	3201      	adds	r2, #1
 800a66c:	f022 0201 	bic.w	r2, r2, #1
 800a670:	1054      	asrs	r4, r2, #1
 800a672:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800a676:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800a67a:	e7c5      	b.n	800a608 <__ieee754_sqrtf+0x20>
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	3201      	adds	r2, #1
 800a680:	0219      	lsls	r1, r3, #8
 800a682:	d5fb      	bpl.n	800a67c <__ieee754_sqrtf+0x94>
 800a684:	3a01      	subs	r2, #1
 800a686:	1aa4      	subs	r4, r4, r2
 800a688:	e7d0      	b.n	800a62c <__ieee754_sqrtf+0x44>
 800a68a:	2200      	movs	r2, #0
 800a68c:	e7f8      	b.n	800a680 <__ieee754_sqrtf+0x98>

0800a68e <fabs>:
 800a68e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a692:	4619      	mov	r1, r3
 800a694:	4770      	bx	lr

0800a696 <finite>:
 800a696:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a69a:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800a69e:	0fc0      	lsrs	r0, r0, #31
 800a6a0:	4770      	bx	lr

0800a6a2 <matherr>:
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	4770      	bx	lr
	...

0800a6a8 <nan>:
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	4901      	ldr	r1, [pc, #4]	; (800a6b0 <nan+0x8>)
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	7ff80000 	.word	0x7ff80000

0800a6b4 <rint>:
 800a6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a6ba:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800a6be:	f1bc 0f13 	cmp.w	ip, #19
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	460d      	mov	r5, r1
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800a6ce:	dc5a      	bgt.n	800a786 <rint+0xd2>
 800a6d0:	f1bc 0f00 	cmp.w	ip, #0
 800a6d4:	da2b      	bge.n	800a72e <rint+0x7a>
 800a6d6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a6da:	4302      	orrs	r2, r0
 800a6dc:	d023      	beq.n	800a726 <rint+0x72>
 800a6de:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a6e2:	4302      	orrs	r2, r0
 800a6e4:	4256      	negs	r6, r2
 800a6e6:	4316      	orrs	r6, r2
 800a6e8:	0c4b      	lsrs	r3, r1, #17
 800a6ea:	0b36      	lsrs	r6, r6, #12
 800a6ec:	4934      	ldr	r1, [pc, #208]	; (800a7c0 <rint+0x10c>)
 800a6ee:	045b      	lsls	r3, r3, #17
 800a6f0:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800a6f4:	ea46 0503 	orr.w	r5, r6, r3
 800a6f8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	462b      	mov	r3, r5
 800a700:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	f7f5 fd28 	bl	800015c <__adddf3>
 800a70c:	e9cd 0100 	strd	r0, r1, [sp]
 800a710:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a714:	462b      	mov	r3, r5
 800a716:	4622      	mov	r2, r4
 800a718:	f7f5 fd1e 	bl	8000158 <__aeabi_dsub>
 800a71c:	4604      	mov	r4, r0
 800a71e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a722:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800a726:	4620      	mov	r0, r4
 800a728:	4629      	mov	r1, r5
 800a72a:	b003      	add	sp, #12
 800a72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a72e:	4a25      	ldr	r2, [pc, #148]	; (800a7c4 <rint+0x110>)
 800a730:	fa42 f20c 	asr.w	r2, r2, ip
 800a734:	4011      	ands	r1, r2
 800a736:	4301      	orrs	r1, r0
 800a738:	d0f5      	beq.n	800a726 <rint+0x72>
 800a73a:	0852      	lsrs	r2, r2, #1
 800a73c:	ea05 0102 	and.w	r1, r5, r2
 800a740:	ea50 0601 	orrs.w	r6, r0, r1
 800a744:	d00c      	beq.n	800a760 <rint+0xac>
 800a746:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a74a:	f1bc 0f13 	cmp.w	ip, #19
 800a74e:	bf0c      	ite	eq
 800a750:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800a754:	2600      	movne	r6, #0
 800a756:	ea25 0202 	bic.w	r2, r5, r2
 800a75a:	fa43 f30c 	asr.w	r3, r3, ip
 800a75e:	4313      	orrs	r3, r2
 800a760:	4917      	ldr	r1, [pc, #92]	; (800a7c0 <rint+0x10c>)
 800a762:	4632      	mov	r2, r6
 800a764:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800a768:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a76c:	4620      	mov	r0, r4
 800a76e:	4629      	mov	r1, r5
 800a770:	f7f5 fcf4 	bl	800015c <__adddf3>
 800a774:	e9cd 0100 	strd	r0, r1, [sp]
 800a778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a77c:	4622      	mov	r2, r4
 800a77e:	462b      	mov	r3, r5
 800a780:	f7f5 fcea 	bl	8000158 <__aeabi_dsub>
 800a784:	e008      	b.n	800a798 <rint+0xe4>
 800a786:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800a78a:	dd08      	ble.n	800a79e <rint+0xea>
 800a78c:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800a790:	d1c9      	bne.n	800a726 <rint+0x72>
 800a792:	4602      	mov	r2, r0
 800a794:	f7f5 fce2 	bl	800015c <__adddf3>
 800a798:	4604      	mov	r4, r0
 800a79a:	460d      	mov	r5, r1
 800a79c:	e7c3      	b.n	800a726 <rint+0x72>
 800a79e:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800a7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a6:	40ca      	lsrs	r2, r1
 800a7a8:	4210      	tst	r0, r2
 800a7aa:	d0bc      	beq.n	800a726 <rint+0x72>
 800a7ac:	0852      	lsrs	r2, r2, #1
 800a7ae:	4210      	tst	r0, r2
 800a7b0:	bf1f      	itttt	ne
 800a7b2:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800a7b6:	ea20 0202 	bicne.w	r2, r0, r2
 800a7ba:	410e      	asrne	r6, r1
 800a7bc:	4316      	orrne	r6, r2
 800a7be:	e7cf      	b.n	800a760 <rint+0xac>
 800a7c0:	0800ab88 	.word	0x0800ab88
 800a7c4:	000fffff 	.word	0x000fffff

0800a7c8 <scalbn>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	4616      	mov	r6, r2
 800a7cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	460d      	mov	r5, r1
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	b982      	cbnz	r2, 800a7fa <scalbn+0x32>
 800a7d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7dc:	4303      	orrs	r3, r0
 800a7de:	d034      	beq.n	800a84a <scalbn+0x82>
 800a7e0:	4b2d      	ldr	r3, [pc, #180]	; (800a898 <scalbn+0xd0>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f7f5 fe70 	bl	80004c8 <__aeabi_dmul>
 800a7e8:	4b2c      	ldr	r3, [pc, #176]	; (800a89c <scalbn+0xd4>)
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	429e      	cmp	r6, r3
 800a7ee:	460d      	mov	r5, r1
 800a7f0:	da0d      	bge.n	800a80e <scalbn+0x46>
 800a7f2:	a325      	add	r3, pc, #148	; (adr r3, 800a888 <scalbn+0xc0>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	e01c      	b.n	800a834 <scalbn+0x6c>
 800a7fa:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a7fe:	42ba      	cmp	r2, r7
 800a800:	d109      	bne.n	800a816 <scalbn+0x4e>
 800a802:	4602      	mov	r2, r0
 800a804:	f7f5 fcaa 	bl	800015c <__adddf3>
 800a808:	4604      	mov	r4, r0
 800a80a:	460d      	mov	r5, r1
 800a80c:	e01d      	b.n	800a84a <scalbn+0x82>
 800a80e:	460b      	mov	r3, r1
 800a810:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a814:	3a36      	subs	r2, #54	; 0x36
 800a816:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a81a:	4432      	add	r2, r6
 800a81c:	428a      	cmp	r2, r1
 800a81e:	dd0c      	ble.n	800a83a <scalbn+0x72>
 800a820:	4622      	mov	r2, r4
 800a822:	462b      	mov	r3, r5
 800a824:	a11a      	add	r1, pc, #104	; (adr r1, 800a890 <scalbn+0xc8>)
 800a826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a82a:	f000 f94a 	bl	800aac2 <copysign>
 800a82e:	a318      	add	r3, pc, #96	; (adr r3, 800a890 <scalbn+0xc8>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	f7f5 fe48 	bl	80004c8 <__aeabi_dmul>
 800a838:	e7e6      	b.n	800a808 <scalbn+0x40>
 800a83a:	2a00      	cmp	r2, #0
 800a83c:	dd08      	ble.n	800a850 <scalbn+0x88>
 800a83e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a842:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a846:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a84a:	4620      	mov	r0, r4
 800a84c:	4629      	mov	r1, r5
 800a84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a850:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a854:	da0b      	bge.n	800a86e <scalbn+0xa6>
 800a856:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a85a:	429e      	cmp	r6, r3
 800a85c:	4622      	mov	r2, r4
 800a85e:	462b      	mov	r3, r5
 800a860:	dce0      	bgt.n	800a824 <scalbn+0x5c>
 800a862:	a109      	add	r1, pc, #36	; (adr r1, 800a888 <scalbn+0xc0>)
 800a864:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a868:	f000 f92b 	bl	800aac2 <copysign>
 800a86c:	e7c1      	b.n	800a7f2 <scalbn+0x2a>
 800a86e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a872:	3236      	adds	r2, #54	; 0x36
 800a874:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a878:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a87c:	4620      	mov	r0, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	2200      	movs	r2, #0
 800a882:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <scalbn+0xd8>)
 800a884:	e7d6      	b.n	800a834 <scalbn+0x6c>
 800a886:	bf00      	nop
 800a888:	c2f8f359 	.word	0xc2f8f359
 800a88c:	01a56e1f 	.word	0x01a56e1f
 800a890:	8800759c 	.word	0x8800759c
 800a894:	7e37e43c 	.word	0x7e37e43c
 800a898:	43500000 	.word	0x43500000
 800a89c:	ffff3cb0 	.word	0xffff3cb0
 800a8a0:	3c900000 	.word	0x3c900000

0800a8a4 <atanf>:
 800a8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800a8ac:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	4607      	mov	r7, r0
 800a8b4:	db0e      	blt.n	800a8d4 <atanf+0x30>
 800a8b6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a8ba:	dd04      	ble.n	800a8c6 <atanf+0x22>
 800a8bc:	4601      	mov	r1, r0
 800a8be:	f7f6 f929 	bl	8000b14 <__addsf3>
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	e003      	b.n	800a8ce <atanf+0x2a>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	f340 80cd 	ble.w	800aa66 <atanf+0x1c2>
 800a8cc:	4c67      	ldr	r4, [pc, #412]	; (800aa6c <atanf+0x1c8>)
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d4:	4b66      	ldr	r3, [pc, #408]	; (800aa70 <atanf+0x1cc>)
 800a8d6:	429d      	cmp	r5, r3
 800a8d8:	dc0e      	bgt.n	800a8f8 <atanf+0x54>
 800a8da:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800a8de:	da08      	bge.n	800a8f2 <atanf+0x4e>
 800a8e0:	4964      	ldr	r1, [pc, #400]	; (800aa74 <atanf+0x1d0>)
 800a8e2:	f7f6 f917 	bl	8000b14 <__addsf3>
 800a8e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a8ea:	f7f6 fbd7 	bl	800109c <__aeabi_fcmpgt>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d1ed      	bne.n	800a8ce <atanf+0x2a>
 800a8f2:	f04f 36ff 	mov.w	r6, #4294967295
 800a8f6:	e01c      	b.n	800a932 <atanf+0x8e>
 800a8f8:	f000 f8e0 	bl	800aabc <fabsf>
 800a8fc:	4b5e      	ldr	r3, [pc, #376]	; (800aa78 <atanf+0x1d4>)
 800a8fe:	4604      	mov	r4, r0
 800a900:	429d      	cmp	r5, r3
 800a902:	dc7c      	bgt.n	800a9fe <atanf+0x15a>
 800a904:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a908:	429d      	cmp	r5, r3
 800a90a:	dc67      	bgt.n	800a9dc <atanf+0x138>
 800a90c:	4601      	mov	r1, r0
 800a90e:	f7f6 f901 	bl	8000b14 <__addsf3>
 800a912:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a916:	f7f6 f8fb 	bl	8000b10 <__aeabi_fsub>
 800a91a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a91e:	4605      	mov	r5, r0
 800a920:	4620      	mov	r0, r4
 800a922:	f7f6 f8f7 	bl	8000b14 <__addsf3>
 800a926:	4601      	mov	r1, r0
 800a928:	4628      	mov	r0, r5
 800a92a:	f7f6 faaf 	bl	8000e8c <__aeabi_fdiv>
 800a92e:	2600      	movs	r6, #0
 800a930:	4604      	mov	r4, r0
 800a932:	4621      	mov	r1, r4
 800a934:	4620      	mov	r0, r4
 800a936:	f7f6 f9f5 	bl	8000d24 <__aeabi_fmul>
 800a93a:	4601      	mov	r1, r0
 800a93c:	4680      	mov	r8, r0
 800a93e:	f7f6 f9f1 	bl	8000d24 <__aeabi_fmul>
 800a942:	4605      	mov	r5, r0
 800a944:	494d      	ldr	r1, [pc, #308]	; (800aa7c <atanf+0x1d8>)
 800a946:	f7f6 f9ed 	bl	8000d24 <__aeabi_fmul>
 800a94a:	494d      	ldr	r1, [pc, #308]	; (800aa80 <atanf+0x1dc>)
 800a94c:	f7f6 f8e2 	bl	8000b14 <__addsf3>
 800a950:	4629      	mov	r1, r5
 800a952:	f7f6 f9e7 	bl	8000d24 <__aeabi_fmul>
 800a956:	494b      	ldr	r1, [pc, #300]	; (800aa84 <atanf+0x1e0>)
 800a958:	f7f6 f8dc 	bl	8000b14 <__addsf3>
 800a95c:	4629      	mov	r1, r5
 800a95e:	f7f6 f9e1 	bl	8000d24 <__aeabi_fmul>
 800a962:	4949      	ldr	r1, [pc, #292]	; (800aa88 <atanf+0x1e4>)
 800a964:	f7f6 f8d6 	bl	8000b14 <__addsf3>
 800a968:	4629      	mov	r1, r5
 800a96a:	f7f6 f9db 	bl	8000d24 <__aeabi_fmul>
 800a96e:	4947      	ldr	r1, [pc, #284]	; (800aa8c <atanf+0x1e8>)
 800a970:	f7f6 f8d0 	bl	8000b14 <__addsf3>
 800a974:	4629      	mov	r1, r5
 800a976:	f7f6 f9d5 	bl	8000d24 <__aeabi_fmul>
 800a97a:	4945      	ldr	r1, [pc, #276]	; (800aa90 <atanf+0x1ec>)
 800a97c:	f7f6 f8ca 	bl	8000b14 <__addsf3>
 800a980:	4641      	mov	r1, r8
 800a982:	f7f6 f9cf 	bl	8000d24 <__aeabi_fmul>
 800a986:	4943      	ldr	r1, [pc, #268]	; (800aa94 <atanf+0x1f0>)
 800a988:	4680      	mov	r8, r0
 800a98a:	4628      	mov	r0, r5
 800a98c:	f7f6 f9ca 	bl	8000d24 <__aeabi_fmul>
 800a990:	4941      	ldr	r1, [pc, #260]	; (800aa98 <atanf+0x1f4>)
 800a992:	f7f6 f8bd 	bl	8000b10 <__aeabi_fsub>
 800a996:	4629      	mov	r1, r5
 800a998:	f7f6 f9c4 	bl	8000d24 <__aeabi_fmul>
 800a99c:	493f      	ldr	r1, [pc, #252]	; (800aa9c <atanf+0x1f8>)
 800a99e:	f7f6 f8b7 	bl	8000b10 <__aeabi_fsub>
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	f7f6 f9be 	bl	8000d24 <__aeabi_fmul>
 800a9a8:	493d      	ldr	r1, [pc, #244]	; (800aaa0 <atanf+0x1fc>)
 800a9aa:	f7f6 f8b1 	bl	8000b10 <__aeabi_fsub>
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	f7f6 f9b8 	bl	8000d24 <__aeabi_fmul>
 800a9b4:	493b      	ldr	r1, [pc, #236]	; (800aaa4 <atanf+0x200>)
 800a9b6:	f7f6 f8ab 	bl	8000b10 <__aeabi_fsub>
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	f7f6 f9b2 	bl	8000d24 <__aeabi_fmul>
 800a9c0:	4601      	mov	r1, r0
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	f7f6 f8a6 	bl	8000b14 <__addsf3>
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	f7f6 f9ab 	bl	8000d24 <__aeabi_fmul>
 800a9ce:	1c73      	adds	r3, r6, #1
 800a9d0:	4601      	mov	r1, r0
 800a9d2:	d133      	bne.n	800aa3c <atanf+0x198>
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7f6 f89b 	bl	8000b10 <__aeabi_fsub>
 800a9da:	e772      	b.n	800a8c2 <atanf+0x1e>
 800a9dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a9e0:	f7f6 f896 	bl	8000b10 <__aeabi_fsub>
 800a9e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f7f6 f892 	bl	8000b14 <__addsf3>
 800a9f0:	4601      	mov	r1, r0
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f7f6 fa4a 	bl	8000e8c <__aeabi_fdiv>
 800a9f8:	2601      	movs	r6, #1
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	e799      	b.n	800a932 <atanf+0x8e>
 800a9fe:	4b2a      	ldr	r3, [pc, #168]	; (800aaa8 <atanf+0x204>)
 800aa00:	429d      	cmp	r5, r3
 800aa02:	dc14      	bgt.n	800aa2e <atanf+0x18a>
 800aa04:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800aa08:	f7f6 f882 	bl	8000b10 <__aeabi_fsub>
 800aa0c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800aa10:	4605      	mov	r5, r0
 800aa12:	4620      	mov	r0, r4
 800aa14:	f7f6 f986 	bl	8000d24 <__aeabi_fmul>
 800aa18:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800aa1c:	f7f6 f87a 	bl	8000b14 <__addsf3>
 800aa20:	4601      	mov	r1, r0
 800aa22:	4628      	mov	r0, r5
 800aa24:	f7f6 fa32 	bl	8000e8c <__aeabi_fdiv>
 800aa28:	2602      	movs	r6, #2
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	e781      	b.n	800a932 <atanf+0x8e>
 800aa2e:	4601      	mov	r1, r0
 800aa30:	481e      	ldr	r0, [pc, #120]	; (800aaac <atanf+0x208>)
 800aa32:	f7f6 fa2b 	bl	8000e8c <__aeabi_fdiv>
 800aa36:	2603      	movs	r6, #3
 800aa38:	4604      	mov	r4, r0
 800aa3a:	e77a      	b.n	800a932 <atanf+0x8e>
 800aa3c:	4b1c      	ldr	r3, [pc, #112]	; (800aab0 <atanf+0x20c>)
 800aa3e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800aa42:	f7f6 f865 	bl	8000b10 <__aeabi_fsub>
 800aa46:	4621      	mov	r1, r4
 800aa48:	f7f6 f862 	bl	8000b10 <__aeabi_fsub>
 800aa4c:	4b19      	ldr	r3, [pc, #100]	; (800aab4 <atanf+0x210>)
 800aa4e:	4601      	mov	r1, r0
 800aa50:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aa54:	f7f6 f85c 	bl	8000b10 <__aeabi_fsub>
 800aa58:	2f00      	cmp	r7, #0
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	f6bf af37 	bge.w	800a8ce <atanf+0x2a>
 800aa60:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800aa64:	e733      	b.n	800a8ce <atanf+0x2a>
 800aa66:	4c14      	ldr	r4, [pc, #80]	; (800aab8 <atanf+0x214>)
 800aa68:	e731      	b.n	800a8ce <atanf+0x2a>
 800aa6a:	bf00      	nop
 800aa6c:	3fc90fdb 	.word	0x3fc90fdb
 800aa70:	3edfffff 	.word	0x3edfffff
 800aa74:	7149f2ca 	.word	0x7149f2ca
 800aa78:	3f97ffff 	.word	0x3f97ffff
 800aa7c:	3c8569d7 	.word	0x3c8569d7
 800aa80:	3d4bda59 	.word	0x3d4bda59
 800aa84:	3d886b35 	.word	0x3d886b35
 800aa88:	3dba2e6e 	.word	0x3dba2e6e
 800aa8c:	3e124925 	.word	0x3e124925
 800aa90:	3eaaaaab 	.word	0x3eaaaaab
 800aa94:	bd15a221 	.word	0xbd15a221
 800aa98:	3d6ef16b 	.word	0x3d6ef16b
 800aa9c:	3d9d8795 	.word	0x3d9d8795
 800aaa0:	3de38e38 	.word	0x3de38e38
 800aaa4:	3e4ccccd 	.word	0x3e4ccccd
 800aaa8:	401bffff 	.word	0x401bffff
 800aaac:	bf800000 	.word	0xbf800000
 800aab0:	0800aba8 	.word	0x0800aba8
 800aab4:	0800ab98 	.word	0x0800ab98
 800aab8:	bfc90fdb 	.word	0xbfc90fdb

0800aabc <fabsf>:
 800aabc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800aac0:	4770      	bx	lr

0800aac2 <copysign>:
 800aac2:	b530      	push	{r4, r5, lr}
 800aac4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800aac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aacc:	ea42 0503 	orr.w	r5, r2, r3
 800aad0:	4629      	mov	r1, r5
 800aad2:	bd30      	pop	{r4, r5, pc}

0800aad4 <_init>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr

0800aae0 <_fini>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	bf00      	nop
 800aae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae6:	bc08      	pop	{r3}
 800aae8:	469e      	mov	lr, r3
 800aaea:	4770      	bx	lr
