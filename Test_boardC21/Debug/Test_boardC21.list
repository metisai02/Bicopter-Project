
Test_boardC21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c284  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800c398  0800c398  0001c398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6a0  0800c6a0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800c6a0  0800c6a0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c6a0  0800c6a0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6a0  0800c6a0  0001c6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6a4  0800c6a4  0001c6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c6a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000090  0800c738  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  0800c738  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015419  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c14  00000000  00000000  000354d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  000380e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  000394b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000194b2  00000000  00000000  0003a768  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fec4  00000000  00000000  00053c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091998  00000000  00000000  00063ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5476  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d4c  00000000  00000000  000f54f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c37c 	.word	0x0800c37c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	0800c37c 	.word	0x0800c37c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	d1ed      	bne.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2uiz>:
 80010dc:	0042      	lsls	r2, r0, #1
 80010de:	d20e      	bcs.n	80010fe <__aeabi_f2uiz+0x22>
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30b      	bcc.n	80010fe <__aeabi_f2uiz+0x22>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d409      	bmi.n	8001104 <__aeabi_f2uiz+0x28>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	fa23 f002 	lsr.w	r0, r3, r2
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr
 8001104:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001108:	d101      	bne.n	800110e <__aeabi_f2uiz+0x32>
 800110a:	0242      	lsls	r2, r0, #9
 800110c:	d102      	bne.n	8001114 <__aeabi_f2uiz+0x38>
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	4770      	bx	lr
 8001114:	f04f 0000 	mov.w	r0, #0
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x28>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x28>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f945 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f008 fe84 	bl	8009e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f95d 	bl	8001426 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f925 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000024 	.word	0x20000024
 80011a0:	20000004 	.word	0x20000004
 80011a4:	20000000 	.word	0x20000000

080011a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x1c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x20>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x20>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000004 	.word	0x20000004
 80011c8:	20000140 	.word	0x20000140

080011cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b02      	ldr	r3, [pc, #8]	; (80011dc <HAL_GetTick+0x10>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000140 	.word	0x20000140

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff fff0 	bl	80011cc <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_Delay+0x40>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffe0 	bl	80011cc <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000004 	.word	0x20000004

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4906      	ldr	r1, [pc, #24]	; (80012bc <__NVIC_EnableIRQ+0x34>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff90 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff2d 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff42 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff90 	bl	8001314 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5f 	bl	80012c0 <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff35 	bl	8001288 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e043      	b.n	80014de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_DMA_Init+0xa8>)
 800145e:	4413      	add	r3, r2
 8001460:	4a22      	ldr	r2, [pc, #136]	; (80014ec <HAL_DMA_Init+0xac>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	009a      	lsls	r2, r3, #2
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <HAL_DMA_Init+0xb0>)
 8001472:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800148a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800148e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	bffdfff8 	.word	0xbffdfff8
 80014ec:	cccccccd 	.word	0xcccccccd
 80014f0:	40020000 	.word	0x40020000

080014f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_DMA_Start_IT+0x20>
 8001510:	2302      	movs	r3, #2
 8001512:	e04a      	b.n	80015aa <HAL_DMA_Start_IT+0xb6>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001522:	2b01      	cmp	r3, #1
 8001524:	d13a      	bne.n	800159c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2202      	movs	r2, #2
 800152a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f9e8 	bl	8001920 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 020e 	orr.w	r2, r2, #14
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e00f      	b.n	800158a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0204 	bic.w	r2, r2, #4
 8001578:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 020a 	orr.w	r2, r2, #10
 8001588:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0201 	orr.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e005      	b.n	80015a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015a4:	2302      	movs	r3, #2
 80015a6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d008      	beq.n	80015da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2204      	movs	r2, #4
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e020      	b.n	800161c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 020e 	bic.w	r2, r2, #14
 80015e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800161a:	7bfb      	ldrb	r3, [r7, #15]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
	...

08001628 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800163a:	2b02      	cmp	r3, #2
 800163c:	d005      	beq.n	800164a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2204      	movs	r2, #4
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e051      	b.n	80016ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 020e 	bic.w	r2, r2, #14
 8001658:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <HAL_DMA_Abort_IT+0xd0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d029      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xa0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a20      	ldr	r2, [pc, #128]	; (80016fc <HAL_DMA_Abort_IT+0xd4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d022      	beq.n	80016c4 <HAL_DMA_Abort_IT+0x9c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_DMA_Abort_IT+0xd8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d01a      	beq.n	80016be <HAL_DMA_Abort_IT+0x96>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_DMA_Abort_IT+0xdc>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d012      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x90>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <HAL_DMA_Abort_IT+0xe0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00a      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x8a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1a      	ldr	r2, [pc, #104]	; (800170c <HAL_DMA_Abort_IT+0xe4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d102      	bne.n	80016ac <HAL_DMA_Abort_IT+0x84>
 80016a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016aa:	e00e      	b.n	80016ca <HAL_DMA_Abort_IT+0xa2>
 80016ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016b0:	e00b      	b.n	80016ca <HAL_DMA_Abort_IT+0xa2>
 80016b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b6:	e008      	b.n	80016ca <HAL_DMA_Abort_IT+0xa2>
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	e005      	b.n	80016ca <HAL_DMA_Abort_IT+0xa2>
 80016be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c2:	e002      	b.n	80016ca <HAL_DMA_Abort_IT+0xa2>
 80016c4:	2310      	movs	r3, #16
 80016c6:	e000      	b.n	80016ca <HAL_DMA_Abort_IT+0xa2>
 80016c8:	2301      	movs	r3, #1
 80016ca:	4a11      	ldr	r2, [pc, #68]	; (8001710 <HAL_DMA_Abort_IT+0xe8>)
 80016cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
    } 
  }
  return status;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40020008 	.word	0x40020008
 80016fc:	4002001c 	.word	0x4002001c
 8001700:	40020030 	.word	0x40020030
 8001704:	40020044 	.word	0x40020044
 8001708:	40020058 	.word	0x40020058
 800170c:	4002006c 	.word	0x4002006c
 8001710:	40020000 	.word	0x40020000

08001714 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2204      	movs	r2, #4
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d04f      	beq.n	80017dc <HAL_DMA_IRQHandler+0xc8>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d04a      	beq.n	80017dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0204 	bic.w	r2, r2, #4
 8001762:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a66      	ldr	r2, [pc, #408]	; (8001904 <HAL_DMA_IRQHandler+0x1f0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d029      	beq.n	80017c2 <HAL_DMA_IRQHandler+0xae>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a65      	ldr	r2, [pc, #404]	; (8001908 <HAL_DMA_IRQHandler+0x1f4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d022      	beq.n	80017be <HAL_DMA_IRQHandler+0xaa>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a63      	ldr	r2, [pc, #396]	; (800190c <HAL_DMA_IRQHandler+0x1f8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d01a      	beq.n	80017b8 <HAL_DMA_IRQHandler+0xa4>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a62      	ldr	r2, [pc, #392]	; (8001910 <HAL_DMA_IRQHandler+0x1fc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d012      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x9e>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a60      	ldr	r2, [pc, #384]	; (8001914 <HAL_DMA_IRQHandler+0x200>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00a      	beq.n	80017ac <HAL_DMA_IRQHandler+0x98>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a5f      	ldr	r2, [pc, #380]	; (8001918 <HAL_DMA_IRQHandler+0x204>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d102      	bne.n	80017a6 <HAL_DMA_IRQHandler+0x92>
 80017a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a4:	e00e      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017aa:	e00b      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017b0:	e008      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b6:	e005      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017bc:	e002      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017be:	2340      	movs	r3, #64	; 0x40
 80017c0:	e000      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017c2:	2304      	movs	r3, #4
 80017c4:	4a55      	ldr	r2, [pc, #340]	; (800191c <HAL_DMA_IRQHandler+0x208>)
 80017c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8094 	beq.w	80018fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017da:	e08e      	b.n	80018fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	2202      	movs	r2, #2
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d056      	beq.n	800189a <HAL_DMA_IRQHandler+0x186>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d051      	beq.n	800189a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10b      	bne.n	800181c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020a 	bic.w	r2, r2, #10
 8001812:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a38      	ldr	r2, [pc, #224]	; (8001904 <HAL_DMA_IRQHandler+0x1f0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d029      	beq.n	800187a <HAL_DMA_IRQHandler+0x166>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a37      	ldr	r2, [pc, #220]	; (8001908 <HAL_DMA_IRQHandler+0x1f4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d022      	beq.n	8001876 <HAL_DMA_IRQHandler+0x162>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a35      	ldr	r2, [pc, #212]	; (800190c <HAL_DMA_IRQHandler+0x1f8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d01a      	beq.n	8001870 <HAL_DMA_IRQHandler+0x15c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a34      	ldr	r2, [pc, #208]	; (8001910 <HAL_DMA_IRQHandler+0x1fc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d012      	beq.n	800186a <HAL_DMA_IRQHandler+0x156>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a32      	ldr	r2, [pc, #200]	; (8001914 <HAL_DMA_IRQHandler+0x200>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00a      	beq.n	8001864 <HAL_DMA_IRQHandler+0x150>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a31      	ldr	r2, [pc, #196]	; (8001918 <HAL_DMA_IRQHandler+0x204>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d102      	bne.n	800185e <HAL_DMA_IRQHandler+0x14a>
 8001858:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800185c:	e00e      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 800185e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001862:	e00b      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 8001864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001868:	e008      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 800186a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186e:	e005      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 8001870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001874:	e002      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 8001876:	2320      	movs	r3, #32
 8001878:	e000      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 800187a:	2302      	movs	r3, #2
 800187c:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_DMA_IRQHandler+0x208>)
 800187e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	d034      	beq.n	80018fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001898:	e02f      	b.n	80018fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2208      	movs	r2, #8
 80018a0:	409a      	lsls	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d028      	beq.n	80018fc <HAL_DMA_IRQHandler+0x1e8>
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d023      	beq.n	80018fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 020e 	bic.w	r2, r2, #14
 80018c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	4798      	blx	r3
    }
  }
  return;
 80018fa:	bf00      	nop
 80018fc:	bf00      	nop
}
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40020008 	.word	0x40020008
 8001908:	4002001c 	.word	0x4002001c
 800190c:	40020030 	.word	0x40020030
 8001910:	40020044 	.word	0x40020044
 8001914:	40020058 	.word	0x40020058
 8001918:	4002006c 	.word	0x4002006c
 800191c:	40020000 	.word	0x40020000

08001920 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d108      	bne.n	8001960 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800195e:	e007      	b.n	8001970 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b08b      	sub	sp, #44	; 0x2c
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	e127      	b.n	8001be0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001990:	2201      	movs	r2, #1
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 8116 	bne.w	8001bda <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d034      	beq.n	8001a20 <HAL_GPIO_Init+0xa4>
 80019b6:	2b12      	cmp	r3, #18
 80019b8:	d80d      	bhi.n	80019d6 <HAL_GPIO_Init+0x5a>
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d02b      	beq.n	8001a16 <HAL_GPIO_Init+0x9a>
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d804      	bhi.n	80019cc <HAL_GPIO_Init+0x50>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d031      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d01c      	beq.n	8001a04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ca:	e048      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d043      	beq.n	8001a58 <HAL_GPIO_Init+0xdc>
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d01b      	beq.n	8001a0c <HAL_GPIO_Init+0x90>
          break;
 80019d4:	e043      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019d6:	4a89      	ldr	r2, [pc, #548]	; (8001bfc <HAL_GPIO_Init+0x280>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d026      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
 80019dc:	4a87      	ldr	r2, [pc, #540]	; (8001bfc <HAL_GPIO_Init+0x280>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d806      	bhi.n	80019f0 <HAL_GPIO_Init+0x74>
 80019e2:	4a87      	ldr	r2, [pc, #540]	; (8001c00 <HAL_GPIO_Init+0x284>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d020      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
 80019e8:	4a86      	ldr	r2, [pc, #536]	; (8001c04 <HAL_GPIO_Init+0x288>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01d      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
          break;
 80019ee:	e036      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019f0:	4a85      	ldr	r2, [pc, #532]	; (8001c08 <HAL_GPIO_Init+0x28c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d019      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
 80019f6:	4a85      	ldr	r2, [pc, #532]	; (8001c0c <HAL_GPIO_Init+0x290>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d016      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
 80019fc:	4a84      	ldr	r2, [pc, #528]	; (8001c10 <HAL_GPIO_Init+0x294>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
          break;
 8001a02:	e02c      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	623b      	str	r3, [r7, #32]
          break;
 8001a0a:	e028      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	3304      	adds	r3, #4
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e023      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e01e      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	330c      	adds	r3, #12
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e019      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a32:	2304      	movs	r3, #4
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e012      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d105      	bne.n	8001a4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a40:	2308      	movs	r3, #8
 8001a42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	611a      	str	r2, [r3, #16]
          break;
 8001a4a:	e008      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	615a      	str	r2, [r3, #20]
          break;
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2bff      	cmp	r3, #255	; 0xff
 8001a62:	d801      	bhi.n	8001a68 <HAL_GPIO_Init+0xec>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	e001      	b.n	8001a6c <HAL_GPIO_Init+0xf0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2bff      	cmp	r3, #255	; 0xff
 8001a72:	d802      	bhi.n	8001a7a <HAL_GPIO_Init+0xfe>
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x104>
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	3b08      	subs	r3, #8
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	210f      	movs	r1, #15
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	401a      	ands	r2, r3
 8001a92:	6a39      	ldr	r1, [r7, #32]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 8096 	beq.w	8001bda <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aae:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_GPIO_Init+0x298>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_GPIO_Init+0x298>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b56      	ldr	r3, [pc, #344]	; (8001c14 <HAL_GPIO_Init+0x298>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac6:	4a54      	ldr	r2, [pc, #336]	; (8001c18 <HAL_GPIO_Init+0x29c>)
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	; (8001c1c <HAL_GPIO_Init+0x2a0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0x19e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <HAL_GPIO_Init+0x2a4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00d      	beq.n	8001b16 <HAL_GPIO_Init+0x19a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a49      	ldr	r2, [pc, #292]	; (8001c24 <HAL_GPIO_Init+0x2a8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x196>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <HAL_GPIO_Init+0x2ac>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_GPIO_Init+0x192>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x1a0>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x1a0>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x1a0>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x1a0>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b2c:	493a      	ldr	r1, [pc, #232]	; (8001c18 <HAL_GPIO_Init+0x29c>)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4938      	ldr	r1, [pc, #224]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
 8001b52:	e006      	b.n	8001b62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b54:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4933      	ldr	r1, [pc, #204]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	492e      	ldr	r1, [pc, #184]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
 8001b7a:	e006      	b.n	8001b8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	4929      	ldr	r1, [pc, #164]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d006      	beq.n	8001ba4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b96:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	4924      	ldr	r1, [pc, #144]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
 8001ba2:	e006      	b.n	8001bb2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	491f      	ldr	r1, [pc, #124]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	491a      	ldr	r1, [pc, #104]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60cb      	str	r3, [r1, #12]
 8001bca:	e006      	b.n	8001bda <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	4915      	ldr	r1, [pc, #84]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	3301      	adds	r3, #1
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f47f aed0 	bne.w	8001990 <HAL_GPIO_Init+0x14>
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	372c      	adds	r7, #44	; 0x2c
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	10210000 	.word	0x10210000
 8001c00:	10110000 	.word	0x10110000
 8001c04:	10120000 	.word	0x10120000
 8001c08:	10310000 	.word	0x10310000
 8001c0c:	10320000 	.word	0x10320000
 8001c10:	10220000 	.word	0x10220000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	40010c00 	.word	0x40010c00
 8001c24:	40011000 	.word	0x40011000
 8001c28:	40011400 	.word	0x40011400
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	611a      	str	r2, [r3, #16]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4013      	ands	r3, r2
 8001c78:	041a      	lsls	r2, r3, #16
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43d9      	mvns	r1, r3
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	400b      	ands	r3, r1
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	611a      	str	r2, [r3, #16]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e11f      	b.n	8001ee6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f008 f8f4 	bl	8009ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cf8:	f001 fb90 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8001cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a7b      	ldr	r2, [pc, #492]	; (8001ef0 <HAL_I2C_Init+0x25c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d807      	bhi.n	8001d18 <HAL_I2C_Init+0x84>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ef4 <HAL_I2C_Init+0x260>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	bf94      	ite	ls
 8001d10:	2301      	movls	r3, #1
 8001d12:	2300      	movhi	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e006      	b.n	8001d26 <HAL_I2C_Init+0x92>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a77      	ldr	r2, [pc, #476]	; (8001ef8 <HAL_I2C_Init+0x264>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf94      	ite	ls
 8001d20:	2301      	movls	r3, #1
 8001d22:	2300      	movhi	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0db      	b.n	8001ee6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a72      	ldr	r2, [pc, #456]	; (8001efc <HAL_I2C_Init+0x268>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0c9b      	lsrs	r3, r3, #18
 8001d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a64      	ldr	r2, [pc, #400]	; (8001ef0 <HAL_I2C_Init+0x25c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d802      	bhi.n	8001d68 <HAL_I2C_Init+0xd4>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3301      	adds	r3, #1
 8001d66:	e009      	b.n	8001d7c <HAL_I2C_Init+0xe8>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a63      	ldr	r2, [pc, #396]	; (8001f00 <HAL_I2C_Init+0x26c>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4956      	ldr	r1, [pc, #344]	; (8001ef0 <HAL_I2C_Init+0x25c>)
 8001d98:	428b      	cmp	r3, r1
 8001d9a:	d80d      	bhi.n	8001db8 <HAL_I2C_Init+0x124>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1e59      	subs	r1, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	bf38      	it	cc
 8001db4:	2304      	movcc	r3, #4
 8001db6:	e04f      	b.n	8001e58 <HAL_I2C_Init+0x1c4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d111      	bne.n	8001de4 <HAL_I2C_Init+0x150>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e58      	subs	r0, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	440b      	add	r3, r1
 8001dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e012      	b.n	8001e0a <HAL_I2C_Init+0x176>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1e58      	subs	r0, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	0099      	lsls	r1, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Init+0x17e>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e022      	b.n	8001e58 <HAL_I2C_Init+0x1c4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10e      	bne.n	8001e38 <HAL_I2C_Init+0x1a4>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1e58      	subs	r0, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	440b      	add	r3, r1
 8001e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e36:	e00f      	b.n	8001e58 <HAL_I2C_Init+0x1c4>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1e58      	subs	r0, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	0099      	lsls	r1, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	6809      	ldr	r1, [r1, #0]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6911      	ldr	r1, [r2, #16]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68d2      	ldr	r2, [r2, #12]
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	000186a0 	.word	0x000186a0
 8001ef4:	001e847f 	.word	0x001e847f
 8001ef8:	003d08ff 	.word	0x003d08ff
 8001efc:	431bde83 	.word	0x431bde83
 8001f00:	10624dd3 	.word	0x10624dd3

08001f04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	817b      	strh	r3, [r7, #10]
 8001f16:	460b      	mov	r3, r1
 8001f18:	813b      	strh	r3, [r7, #8]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f1e:	f7ff f955 	bl	80011cc <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	f040 80d9 	bne.w	80020e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2319      	movs	r3, #25
 8001f38:	2201      	movs	r2, #1
 8001f3a:	496d      	ldr	r1, [pc, #436]	; (80020f0 <HAL_I2C_Mem_Write+0x1ec>)
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fcbb 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e0cc      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_I2C_Mem_Write+0x56>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e0c5      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d007      	beq.n	8001f80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2221      	movs	r2, #33	; 0x21
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2240      	movs	r2, #64	; 0x40
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4a4d      	ldr	r2, [pc, #308]	; (80020f4 <HAL_I2C_Mem_Write+0x1f0>)
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fc2:	88f8      	ldrh	r0, [r7, #6]
 8001fc4:	893a      	ldrh	r2, [r7, #8]
 8001fc6:	8979      	ldrh	r1, [r7, #10]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 faf2 	bl	80025bc <I2C_RequestMemoryWrite>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d052      	beq.n	8002084 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e081      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fd3c 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d107      	bne.n	800200a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002008:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e06b      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b04      	cmp	r3, #4
 800204a:	d11b      	bne.n	8002084 <HAL_I2C_Mem_Write+0x180>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d017      	beq.n	8002084 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1aa      	bne.n	8001fe2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 fd28 	bl	8002ae6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d107      	bne.n	80020b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e016      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	00100002 	.word	0x00100002
 80020f4:	ffff0000 	.word	0xffff0000

080020f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4603      	mov	r3, r0
 8002108:	817b      	strh	r3, [r7, #10]
 800210a:	460b      	mov	r3, r1
 800210c:	813b      	strh	r3, [r7, #8]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002116:	f7ff f859 	bl	80011cc <HAL_GetTick>
 800211a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b20      	cmp	r3, #32
 8002126:	f040 823d 	bne.w	80025a4 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2319      	movs	r3, #25
 8002130:	2201      	movs	r2, #1
 8002132:	4981      	ldr	r1, [pc, #516]	; (8002338 <HAL_I2C_Mem_Read+0x240>)
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fbbf 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002140:	2302      	movs	r3, #2
 8002142:	e230      	b.n	80025a6 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Mem_Read+0x5a>
 800214e:	2302      	movs	r3, #2
 8002150:	e229      	b.n	80025a6 <HAL_I2C_Mem_Read+0x4ae>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d007      	beq.n	8002178 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002186:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2222      	movs	r2, #34	; 0x22
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2240      	movs	r2, #64	; 0x40
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a61      	ldr	r2, [pc, #388]	; (800233c <HAL_I2C_Mem_Read+0x244>)
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ba:	88f8      	ldrh	r0, [r7, #6]
 80021bc:	893a      	ldrh	r2, [r7, #8]
 80021be:	8979      	ldrh	r1, [r7, #10]
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4603      	mov	r3, r0
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fa8c 	bl	80026e8 <I2C_RequestMemoryRead>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1e5      	b.n	80025a6 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d113      	bne.n	800220a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e1b9      	b.n	800257e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	2b01      	cmp	r3, #1
 8002210:	d11d      	bne.n	800224e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002220:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002222:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002248:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800224a:	b662      	cpsie	i
 800224c:	e197      	b.n	800257e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	2b02      	cmp	r3, #2
 8002254:	d11d      	bne.n	8002292 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002264:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002266:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800228c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800228e:	b662      	cpsie	i
 8002290:	e175      	b.n	800257e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022a0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80022b8:	e161      	b.n	800257e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	2b03      	cmp	r3, #3
 80022c0:	f200 811a 	bhi.w	80024f8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d123      	bne.n	8002314 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fc49 	bl	8002b68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e162      	b.n	80025a6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002312:	e134      	b.n	800257e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002318:	2b02      	cmp	r3, #2
 800231a:	d150      	bne.n	80023be <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002322:	2200      	movs	r2, #0
 8002324:	4906      	ldr	r1, [pc, #24]	; (8002340 <HAL_I2C_Mem_Read+0x248>)
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 fac6 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e137      	b.n	80025a6 <HAL_I2C_Mem_Read+0x4ae>
 8002336:	bf00      	nop
 8002338:	00100002 	.word	0x00100002
 800233c:	ffff0000 	.word	0xffff0000
 8002340:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002344:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002354:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002388:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023bc:	e0df      	b.n	800257e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	2200      	movs	r2, #0
 80023c6:	497a      	ldr	r1, [pc, #488]	; (80025b0 <HAL_I2C_Mem_Read+0x4b8>)
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fa75 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0e6      	b.n	80025a6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023e8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800241c:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_I2C_Mem_Read+0x4bc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	08db      	lsrs	r3, r3, #3
 8002422:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_I2C_Mem_Read+0x4c0>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	0a1a      	lsrs	r2, r3, #8
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00da      	lsls	r2, r3, #3
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	3b01      	subs	r3, #1
 800243a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d117      	bne.n	8002472 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002464:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e099      	b.n	80025a6 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d1da      	bne.n	8002436 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024c2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024f6:	e042      	b.n	800257e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fb33 	bl	8002b68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e04c      	b.n	80025a6 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b04      	cmp	r3, #4
 800254a:	d118      	bne.n	800257e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	2b00      	cmp	r3, #0
 8002584:	f47f ae99 	bne.w	80022ba <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	00010004 	.word	0x00010004
 80025b4:	20000024 	.word	0x20000024
 80025b8:	14f8b589 	.word	0x14f8b589

080025bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	4608      	mov	r0, r1
 80025c6:	4611      	mov	r1, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	817b      	strh	r3, [r7, #10]
 80025ce:	460b      	mov	r3, r1
 80025d0:	813b      	strh	r3, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f960 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260c:	d103      	bne.n	8002616 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e05f      	b.n	80026da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800261a:	897b      	ldrh	r3, [r7, #10]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002628:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	6a3a      	ldr	r2, [r7, #32]
 800262e:	492d      	ldr	r1, [pc, #180]	; (80026e4 <I2C_RequestMemoryWrite+0x128>)
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f998 	bl	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e04c      	b.n	80026da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	6a39      	ldr	r1, [r7, #32]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fa02 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b04      	cmp	r3, #4
 800266c:	d107      	bne.n	800267e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e02b      	b.n	80026da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002688:	893b      	ldrh	r3, [r7, #8]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	611a      	str	r2, [r3, #16]
 8002692:	e021      	b.n	80026d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002694:	893b      	ldrh	r3, [r7, #8]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	b29b      	uxth	r3, r3
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	6a39      	ldr	r1, [r7, #32]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f9dc 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d107      	bne.n	80026ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e005      	b.n	80026da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ce:	893b      	ldrh	r3, [r7, #8]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	00010002 	.word	0x00010002

080026e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	460b      	mov	r3, r1
 80026fc:	813b      	strh	r3, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002710:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002720:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	2200      	movs	r2, #0
 800272a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f8c2 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00d      	beq.n	8002756 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002748:	d103      	bne.n	8002752 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0aa      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002764:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	6a3a      	ldr	r2, [r7, #32]
 800276a:	4952      	ldr	r1, [pc, #328]	; (80028b4 <I2C_RequestMemoryRead+0x1cc>)
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f8fa 	bl	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e097      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	6a39      	ldr	r1, [r7, #32]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f964 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d107      	bne.n	80027ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e076      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d105      	bne.n	80027d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027c4:	893b      	ldrh	r3, [r7, #8]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	611a      	str	r2, [r3, #16]
 80027ce:	e021      	b.n	8002814 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027d0:	893b      	ldrh	r3, [r7, #8]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f93e 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d107      	bne.n	8002806 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002804:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e050      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800280a:	893b      	ldrh	r3, [r7, #8]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	6a39      	ldr	r1, [r7, #32]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f923 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2b04      	cmp	r3, #4
 800282a:	d107      	bne.n	800283c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e035      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800284e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	2200      	movs	r2, #0
 8002858:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f82b 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00d      	beq.n	8002884 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002876:	d103      	bne.n	8002880 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e013      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002884:	897b      	ldrh	r3, [r7, #10]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	6a3a      	ldr	r2, [r7, #32]
 8002898:	4906      	ldr	r1, [pc, #24]	; (80028b4 <I2C_RequestMemoryRead+0x1cc>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f863 	bl	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	00010002 	.word	0x00010002

080028b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c8:	e025      	b.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d021      	beq.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d2:	f7fe fc7b 	bl	80011cc <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d116      	bne.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e023      	b.n	800295e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d10d      	bne.n	800293c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	e00c      	b.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4013      	ands	r3, r2
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	bf0c      	ite	eq
 800294e:	2301      	moveq	r3, #1
 8002950:	2300      	movne	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	429a      	cmp	r2, r3
 800295a:	d0b6      	beq.n	80028ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002974:	e051      	b.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	d123      	bne.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002994:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800299e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e046      	b.n	8002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d021      	beq.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d6:	f7fe fbf9 	bl	80011cc <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d116      	bne.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0220 	orr.w	r2, r3, #32
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e020      	b.n	8002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d10c      	bne.n	8002a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e00b      	b.n	8002a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	43da      	mvns	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d18d      	bne.n	8002976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a70:	e02d      	b.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f8ce 	bl	8002c14 <I2C_IsAcknowledgeFailed>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e02d      	b.n	8002ade <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d021      	beq.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8a:	f7fe fb9f 	bl	80011cc <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d302      	bcc.n	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d116      	bne.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e007      	b.n	8002ade <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	d1ca      	bne.n	8002a72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002af2:	e02d      	b.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f88d 	bl	8002c14 <I2C_IsAcknowledgeFailed>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e02d      	b.n	8002b60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0a:	d021      	beq.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0c:	f7fe fb5e 	bl	80011cc <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d302      	bcc.n	8002b22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e007      	b.n	8002b60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d1ca      	bne.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b74:	e042      	b.n	8002bfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d119      	bne.n	8002bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0210 	mvn.w	r2, #16
 8002b8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e029      	b.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb8:	f7fe fb08 	bl	80011cc <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d302      	bcc.n	8002bce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e007      	b.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b40      	cmp	r3, #64	; 0x40
 8002c08:	d1b5      	bne.n	8002b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2a:	d11b      	bne.n	8002c64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e26c      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8087 	beq.w	8002d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c90:	4b92      	ldr	r3, [pc, #584]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d00c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c9c:	4b8f      	ldr	r3, [pc, #572]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d112      	bne.n	8002cce <HAL_RCC_OscConfig+0x5e>
 8002ca8:	4b8c      	ldr	r3, [pc, #560]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d10b      	bne.n	8002cce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb6:	4b89      	ldr	r3, [pc, #548]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d06c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x12c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d168      	bne.n	8002d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e246      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x76>
 8002cd8:	4b80      	ldr	r3, [pc, #512]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a7f      	ldr	r2, [pc, #508]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	e02e      	b.n	8002d44 <HAL_RCC_OscConfig+0xd4>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x98>
 8002cee:	4b7b      	ldr	r3, [pc, #492]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7a      	ldr	r2, [pc, #488]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b78      	ldr	r3, [pc, #480]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a77      	ldr	r2, [pc, #476]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e01d      	b.n	8002d44 <HAL_RCC_OscConfig+0xd4>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0xbc>
 8002d12:	4b72      	ldr	r3, [pc, #456]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a71      	ldr	r2, [pc, #452]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b6f      	ldr	r3, [pc, #444]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6e      	ldr	r2, [pc, #440]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0xd4>
 8002d2c:	4b6b      	ldr	r3, [pc, #428]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6a      	ldr	r2, [pc, #424]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b68      	ldr	r3, [pc, #416]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a67      	ldr	r2, [pc, #412]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fa3e 	bl	80011cc <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe fa3a 	bl	80011cc <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1fa      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0xe4>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fa2a 	bl	80011cc <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fa26 	bl	80011cc <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1e6      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	4b53      	ldr	r3, [pc, #332]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x10c>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d063      	beq.n	8002e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002daa:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002db6:	4b49      	ldr	r3, [pc, #292]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d11c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x18c>
 8002dc2:	4b46      	ldr	r3, [pc, #280]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d116      	bne.n	8002dfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	4b43      	ldr	r3, [pc, #268]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_RCC_OscConfig+0x176>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e1ba      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4939      	ldr	r1, [pc, #228]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	e03a      	b.n	8002e72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d020      	beq.n	8002e46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe f9df 	bl	80011cc <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e12:	f7fe f9db 	bl	80011cc <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e19b      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e30:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4927      	ldr	r1, [pc, #156]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]
 8002e44:	e015      	b.n	8002e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e46:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f9be 	bl	80011cc <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e54:	f7fe f9ba 	bl	80011cc <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e17a      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d03a      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d019      	beq.n	8002eba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8c:	f7fe f99e 	bl	80011cc <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e94:	f7fe f99a 	bl	80011cc <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e15a      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f000 fada 	bl	800346c <RCC_Delay>
 8002eb8:	e01c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7fe f984 	bl	80011cc <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec6:	e00f      	b.n	8002ee8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec8:	f7fe f980 	bl	80011cc <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d908      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e140      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	42420000 	.word	0x42420000
 8002ee4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	4b9e      	ldr	r3, [pc, #632]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e9      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a6 	beq.w	800304e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b97      	ldr	r3, [pc, #604]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	4b94      	ldr	r3, [pc, #592]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4a93      	ldr	r2, [pc, #588]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	61d3      	str	r3, [r2, #28]
 8002f1e:	4b91      	ldr	r3, [pc, #580]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b8e      	ldr	r3, [pc, #568]	; (8003168 <HAL_RCC_OscConfig+0x4f8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d118      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <HAL_RCC_OscConfig+0x4f8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a8a      	ldr	r2, [pc, #552]	; (8003168 <HAL_RCC_OscConfig+0x4f8>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f46:	f7fe f941 	bl	80011cc <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4e:	f7fe f93d 	bl	80011cc <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b64      	cmp	r3, #100	; 0x64
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0fd      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	4b81      	ldr	r3, [pc, #516]	; (8003168 <HAL_RCC_OscConfig+0x4f8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x312>
 8002f74:	4b7b      	ldr	r3, [pc, #492]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	4a7a      	ldr	r2, [pc, #488]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6213      	str	r3, [r2, #32]
 8002f80:	e02d      	b.n	8002fde <HAL_RCC_OscConfig+0x36e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x334>
 8002f8a:	4b76      	ldr	r3, [pc, #472]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	4a75      	ldr	r2, [pc, #468]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6213      	str	r3, [r2, #32]
 8002f96:	4b73      	ldr	r3, [pc, #460]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4a72      	ldr	r2, [pc, #456]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	f023 0304 	bic.w	r3, r3, #4
 8002fa0:	6213      	str	r3, [r2, #32]
 8002fa2:	e01c      	b.n	8002fde <HAL_RCC_OscConfig+0x36e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d10c      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x356>
 8002fac:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4a6c      	ldr	r2, [pc, #432]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	6213      	str	r3, [r2, #32]
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4a69      	ldr	r2, [pc, #420]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6213      	str	r3, [r2, #32]
 8002fc4:	e00b      	b.n	8002fde <HAL_RCC_OscConfig+0x36e>
 8002fc6:	4b67      	ldr	r3, [pc, #412]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a66      	ldr	r2, [pc, #408]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	6213      	str	r3, [r2, #32]
 8002fd2:	4b64      	ldr	r3, [pc, #400]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4a63      	ldr	r2, [pc, #396]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	f023 0304 	bic.w	r3, r3, #4
 8002fdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d015      	beq.n	8003012 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe6:	f7fe f8f1 	bl	80011cc <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe f8ed 	bl	80011cc <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0ab      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	4b57      	ldr	r3, [pc, #348]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ee      	beq.n	8002fee <HAL_RCC_OscConfig+0x37e>
 8003010:	e014      	b.n	800303c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003012:	f7fe f8db 	bl	80011cc <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301a:	f7fe f8d7 	bl	80011cc <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f241 3288 	movw	r2, #5000	; 0x1388
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e095      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003030:	4b4c      	ldr	r3, [pc, #304]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ee      	bne.n	800301a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003042:	4b48      	ldr	r3, [pc, #288]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	4a47      	ldr	r2, [pc, #284]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8081 	beq.w	800315a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003058:	4b42      	ldr	r3, [pc, #264]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b08      	cmp	r3, #8
 8003062:	d061      	beq.n	8003128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d146      	bne.n	80030fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306c:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_OscConfig+0x4fc>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe f8ab 	bl	80011cc <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe f8a7 	bl	80011cc <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e067      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308c:	4b35      	ldr	r3, [pc, #212]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a0:	d108      	bne.n	80030b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030a2:	4b30      	ldr	r3, [pc, #192]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	492d      	ldr	r1, [pc, #180]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b4:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a19      	ldr	r1, [r3, #32]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	430b      	orrs	r3, r1
 80030c6:	4927      	ldr	r1, [pc, #156]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x4fc>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fe f87b 	bl	80011cc <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030da:	f7fe f877 	bl	80011cc <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e037      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x46a>
 80030f8:	e02f      	b.n	800315a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	4b1c      	ldr	r3, [pc, #112]	; (800316c <HAL_RCC_OscConfig+0x4fc>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe f864 	bl	80011cc <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe f860 	bl	80011cc <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e020      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x498>
 8003126:	e018      	b.n	800315a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e013      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_OscConfig+0x4f4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	429a      	cmp	r2, r3
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000
 8003168:	40007000 	.word	0x40007000
 800316c:	42420060 	.word	0x42420060

08003170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0d0      	b.n	8003326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b6a      	ldr	r3, [pc, #424]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d910      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b67      	ldr	r3, [pc, #412]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 0207 	bic.w	r2, r3, #7
 800319a:	4965      	ldr	r1, [pc, #404]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0b8      	b.n	8003326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031cc:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	494d      	ldr	r1, [pc, #308]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d040      	beq.n	8003290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d115      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	4b41      	ldr	r3, [pc, #260]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e073      	b.n	8003326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e06b      	b.n	8003326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b39      	ldr	r3, [pc, #228]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4936      	ldr	r1, [pc, #216]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003260:	f7fd ffb4 	bl	80011cc <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fd ffb0 	bl	80011cc <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e053      	b.n	8003326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d210      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 0207 	bic.w	r2, r3, #7
 80032a6:	4922      	ldr	r1, [pc, #136]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e032      	b.n	8003326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4916      	ldr	r1, [pc, #88]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032fe:	f000 f821 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8003302:	4601      	mov	r1, r0
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003310:	5cd3      	ldrb	r3, [r2, r3]
 8003312:	fa21 f303 	lsr.w	r3, r1, r3
 8003316:	4a09      	ldr	r2, [pc, #36]	; (800333c <HAL_RCC_ClockConfig+0x1cc>)
 8003318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1d0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd ff12 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40022000 	.word	0x40022000
 8003334:	40021000 	.word	0x40021000
 8003338:	0800c5e0 	.word	0x0800c5e0
 800333c:	20000024 	.word	0x20000024
 8003340:	20000000 	.word	0x20000000

08003344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	b490      	push	{r4, r7}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800334c:	1d3c      	adds	r4, r7, #4
 800334e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003354:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800336e:	4b23      	ldr	r3, [pc, #140]	; (80033fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b04      	cmp	r3, #4
 800337c:	d002      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x40>
 800337e:	2b08      	cmp	r3, #8
 8003380:	d003      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x46>
 8003382:	e02d      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003386:	623b      	str	r3, [r7, #32]
      break;
 8003388:	e02d      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	0c9b      	lsrs	r3, r3, #18
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003396:	4413      	add	r3, r2
 8003398:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800339c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	0c5b      	lsrs	r3, r3, #17
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033b6:	4413      	add	r3, r2
 80033b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033c2:	fb02 f203 	mul.w	r2, r2, r3
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
 80033ce:	e004      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	623b      	str	r3, [r7, #32]
      break;
 80033de:	e002      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b07      	ldr	r3, [pc, #28]	; (8003400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033e2:	623b      	str	r3, [r7, #32]
      break;
 80033e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e6:	6a3b      	ldr	r3, [r7, #32]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc90      	pop	{r4, r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	0800c398 	.word	0x0800c398
 80033f8:	0800c3a8 	.word	0x0800c3a8
 80033fc:	40021000 	.word	0x40021000
 8003400:	007a1200 	.word	0x007a1200
 8003404:	003d0900 	.word	0x003d0900

08003408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800340c:	4b02      	ldr	r3, [pc, #8]	; (8003418 <HAL_RCC_GetHCLKFreq+0x10>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	20000024 	.word	0x20000024

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003420:	f7ff fff2 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003424:	4601      	mov	r1, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4a03      	ldr	r2, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000
 8003440:	0800c5f0 	.word	0x0800c5f0

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003448:	f7ff ffde 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 800344c:	4601      	mov	r1, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0adb      	lsrs	r3, r3, #11
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4a03      	ldr	r2, [pc, #12]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800345a:	5cd3      	ldrb	r3, [r2, r3]
 800345c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	0800c5f0 	.word	0x0800c5f0

0800346c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <RCC_Delay+0x34>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <RCC_Delay+0x38>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0a5b      	lsrs	r3, r3, #9
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003488:	bf00      	nop
  }
  while (Delay --);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1e5a      	subs	r2, r3, #1
 800348e:	60fa      	str	r2, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f9      	bne.n	8003488 <RCC_Delay+0x1c>
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000024 	.word	0x20000024
 80034a4:	10624dd3 	.word	0x10624dd3

080034a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e076      	b.n	80035a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ca:	d009      	beq.n	80034e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
 80034d2:	e005      	b.n	80034e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f006 fd24 	bl	8009f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003516:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	ea42 0103 	orr.w	r1, r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	0c1a      	lsrs	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f002 0204 	and.w	r2, r2, #4
 8003586:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003596:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08c      	sub	sp, #48	; 0x30
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035be:	2301      	movs	r3, #1
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x26>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e18a      	b.n	80038ec <HAL_SPI_TransmitReceive+0x33c>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035de:	f7fd fdf5 	bl	80011cc <HAL_GetTick>
 80035e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d00f      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x70>
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003606:	d107      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x68>
 8003610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003614:	2b04      	cmp	r3, #4
 8003616:	d003      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003618:	2302      	movs	r3, #2
 800361a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800361e:	e15b      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_SPI_TransmitReceive+0x82>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_SPI_TransmitReceive+0x82>
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d103      	bne.n	800363a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003638:	e14e      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b04      	cmp	r3, #4
 8003644:	d003      	beq.n	800364e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2205      	movs	r2, #5
 800364a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	887a      	ldrh	r2, [r7, #2]
 800365e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	887a      	ldrh	r2, [r7, #2]
 8003676:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d007      	beq.n	80036a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036aa:	d178      	bne.n	800379e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_SPI_TransmitReceive+0x10a>
 80036b4:	8b7b      	ldrh	r3, [r7, #26]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d166      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	1c9a      	adds	r2, r3, #2
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036de:	e053      	b.n	8003788 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d11b      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x176>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d016      	beq.n	8003726 <HAL_SPI_TransmitReceive+0x176>
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d113      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	881a      	ldrh	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	1c9a      	adds	r2, r3, #2
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d119      	bne.n	8003768 <HAL_SPI_TransmitReceive+0x1b8>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d014      	beq.n	8003768 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	b292      	uxth	r2, r2
 800374a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	1c9a      	adds	r2, r3, #2
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003764:	2301      	movs	r3, #1
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003768:	f7fd fd30 	bl	80011cc <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003774:	429a      	cmp	r2, r3
 8003776:	d807      	bhi.n	8003788 <HAL_SPI_TransmitReceive+0x1d8>
 8003778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d003      	beq.n	8003788 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003786:	e0a7      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1a6      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x130>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1a1      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x130>
 800379c:	e07c      	b.n	8003898 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_SPI_TransmitReceive+0x1fc>
 80037a6:	8b7b      	ldrh	r3, [r7, #26]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d16b      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	7812      	ldrb	r2, [r2, #0]
 80037b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037d2:	e057      	b.n	8003884 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d11c      	bne.n	800381c <HAL_SPI_TransmitReceive+0x26c>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d017      	beq.n	800381c <HAL_SPI_TransmitReceive+0x26c>
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d114      	bne.n	800381c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	330c      	adds	r3, #12
 80037fc:	7812      	ldrb	r2, [r2, #0]
 80037fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d119      	bne.n	800385e <HAL_SPI_TransmitReceive+0x2ae>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d014      	beq.n	800385e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800385a:	2301      	movs	r3, #1
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800385e:	f7fd fcb5 	bl	80011cc <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800386a:	429a      	cmp	r2, r3
 800386c:	d803      	bhi.n	8003876 <HAL_SPI_TransmitReceive+0x2c6>
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d102      	bne.n	800387c <HAL_SPI_TransmitReceive+0x2cc>
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	2b00      	cmp	r3, #0
 800387a:	d103      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003882:	e029      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1a2      	bne.n	80037d4 <HAL_SPI_TransmitReceive+0x224>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d19d      	bne.n	80037d4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f8b1 	bl	8003a04 <SPI_EndRxTxTransaction>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d006      	beq.n	80038b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80038b4:	e010      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	e000      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80038d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3730      	adds	r7, #48	; 0x30
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	4613      	mov	r3, r2
 8003902:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003904:	f7fd fc62 	bl	80011cc <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	4413      	add	r3, r2
 8003912:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003914:	f7fd fc5a 	bl	80011cc <HAL_GetTick>
 8003918:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800391a:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	015b      	lsls	r3, r3, #5
 8003920:	0d1b      	lsrs	r3, r3, #20
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	fb02 f303 	mul.w	r3, r2, r3
 8003928:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800392a:	e054      	b.n	80039d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d050      	beq.n	80039d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003934:	f7fd fc4a 	bl	80011cc <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	429a      	cmp	r2, r3
 8003942:	d902      	bls.n	800394a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d13d      	bne.n	80039c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003962:	d111      	bne.n	8003988 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396c:	d004      	beq.n	8003978 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003976:	d107      	bne.n	8003988 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003990:	d10f      	bne.n	80039b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e017      	b.n	80039f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4013      	ands	r3, r2
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	bf0c      	ite	eq
 80039e6:	2301      	moveq	r3, #1
 80039e8:	2300      	movne	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d19b      	bne.n	800392c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000024 	.word	0x20000024

08003a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff ff6a 	bl	80038f4 <SPI_WaitFlagStateUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	f043 0220 	orr.w	r2, r3, #32
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e000      	b.n	8003a38 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e041      	b.n	8003ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f006 fad8 	bl	800a01c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f000 fc14 	bl	80042ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d001      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e03a      	b.n	8003b6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_TIM_Base_Start_IT+0x98>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x58>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b22:	d009      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x58>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <HAL_TIM_Base_Start_IT+0x9c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x58>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d111      	bne.n	8003b5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d010      	beq.n	8003b6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5a:	e007      	b.n	8003b6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800

08003b84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e041      	b.n	8003c1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f006 fa18 	bl	8009fe0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f000 fb72 	bl	80042ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d109      	bne.n	8003c48 <HAL_TIM_PWM_Start+0x24>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e022      	b.n	8003c8e <HAL_TIM_PWM_Start+0x6a>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d109      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x3e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	bf14      	ite	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	2300      	moveq	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	e015      	b.n	8003c8e <HAL_TIM_PWM_Start+0x6a>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d109      	bne.n	8003c7c <HAL_TIM_PWM_Start+0x58>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e008      	b.n	8003c8e <HAL_TIM_PWM_Start+0x6a>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e05e      	b.n	8003d54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_PWM_Start+0x82>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca4:	e013      	b.n	8003cce <HAL_TIM_PWM_Start+0xaa>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_PWM_Start+0x92>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb4:	e00b      	b.n	8003cce <HAL_TIM_PWM_Start+0xaa>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0xa2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc4:	e003      	b.n	8003cce <HAL_TIM_PWM_Start+0xaa>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fd68 	bl	80047ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <HAL_TIM_PWM_Start+0x138>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d107      	bne.n	8003cf6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <HAL_TIM_PWM_Start+0x138>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_TIM_PWM_Start+0xfa>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d08:	d009      	beq.n	8003d1e <HAL_TIM_PWM_Start+0xfa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <HAL_TIM_PWM_Start+0x13c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_TIM_PWM_Start+0xfa>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <HAL_TIM_PWM_Start+0x140>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d111      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d010      	beq.n	8003d52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	e007      	b.n	8003d52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800

08003d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d122      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0202 	mvn.w	r2, #2
 8003d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa62 	bl	8004274 <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa55 	bl	8004262 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fa64 	bl	8004286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d122      	bne.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d11b      	bne.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0204 	mvn.w	r2, #4
 8003de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa38 	bl	8004274 <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fa2b 	bl	8004262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fa3a 	bl	8004286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0208 	mvn.w	r2, #8
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2204      	movs	r2, #4
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fa0e 	bl	8004274 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fa01 	bl	8004262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fa10 	bl	8004286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0210 	mvn.w	r2, #16
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2208      	movs	r2, #8
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9e4 	bl	8004274 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f9d7 	bl	8004262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f9e6 	bl	8004286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d10e      	bne.n	8003eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0201 	mvn.w	r2, #1
 8003ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f001 fe7a 	bl	8005be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d10e      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d107      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fcd5 	bl	80048c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f9aa 	bl	8004298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0220 	mvn.w	r2, #32
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fca0 	bl	80048b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e0ac      	b.n	80040ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	f200 809f 	bhi.w	80040e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fdd 	.word	0x08003fdd
 8003fac:	080040e1 	.word	0x080040e1
 8003fb0:	080040e1 	.word	0x080040e1
 8003fb4:	080040e1 	.word	0x080040e1
 8003fb8:	0800401d 	.word	0x0800401d
 8003fbc:	080040e1 	.word	0x080040e1
 8003fc0:	080040e1 	.word	0x080040e1
 8003fc4:	080040e1 	.word	0x080040e1
 8003fc8:	0800405f 	.word	0x0800405f
 8003fcc:	080040e1 	.word	0x080040e1
 8003fd0:	080040e1 	.word	0x080040e1
 8003fd4:	080040e1 	.word	0x080040e1
 8003fd8:	0800409f 	.word	0x0800409f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f9c4 	bl	8004370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0208 	orr.w	r2, r2, #8
 8003ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0204 	bic.w	r2, r2, #4
 8004006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6999      	ldr	r1, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	619a      	str	r2, [r3, #24]
      break;
 800401a:	e062      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fa0a 	bl	800443c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6999      	ldr	r1, [r3, #24]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	021a      	lsls	r2, r3, #8
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	619a      	str	r2, [r3, #24]
      break;
 800405c:	e041      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fa53 	bl	8004510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0208 	orr.w	r2, r2, #8
 8004078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0204 	bic.w	r2, r2, #4
 8004088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69d9      	ldr	r1, [r3, #28]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	61da      	str	r2, [r3, #28]
      break;
 800409c:	e021      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fa9d 	bl	80045e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69da      	ldr	r2, [r3, #28]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69d9      	ldr	r1, [r3, #28]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	021a      	lsls	r2, r3, #8
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	61da      	str	r2, [r3, #28]
      break;
 80040de:	e000      	b.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_TIM_ConfigClockSource+0x18>
 8004108:	2302      	movs	r3, #2
 800410a:	e0a6      	b.n	800425a <HAL_TIM_ConfigClockSource+0x166>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800412a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004132:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d067      	beq.n	8004214 <HAL_TIM_ConfigClockSource+0x120>
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d80b      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x6c>
 8004148:	2b10      	cmp	r3, #16
 800414a:	d073      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0x140>
 800414c:	2b10      	cmp	r3, #16
 800414e:	d802      	bhi.n	8004156 <HAL_TIM_ConfigClockSource+0x62>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d06f      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004154:	e078      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004156:	2b20      	cmp	r3, #32
 8004158:	d06c      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0x140>
 800415a:	2b30      	cmp	r3, #48	; 0x30
 800415c:	d06a      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800415e:	e073      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004160:	2b70      	cmp	r3, #112	; 0x70
 8004162:	d00d      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0x8c>
 8004164:	2b70      	cmp	r3, #112	; 0x70
 8004166:	d804      	bhi.n	8004172 <HAL_TIM_ConfigClockSource+0x7e>
 8004168:	2b50      	cmp	r3, #80	; 0x50
 800416a:	d033      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0xe0>
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d041      	beq.n	80041f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004170:	e06a      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d066      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x152>
 8004178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417c:	d017      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800417e:	e063      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f000 faed 	bl	800476e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
      break;
 80041ac:	e04c      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f000 fad6 	bl	800476e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d0:	609a      	str	r2, [r3, #8]
      break;
 80041d2:	e039      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	461a      	mov	r2, r3
 80041e2:	f000 fa4d 	bl	8004680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2150      	movs	r1, #80	; 0x50
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 faa4 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 80041f2:	e029      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	461a      	mov	r2, r3
 8004202:	f000 fa6b 	bl	80046dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2160      	movs	r1, #96	; 0x60
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fa94 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 8004212:	e019      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6859      	ldr	r1, [r3, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	461a      	mov	r2, r3
 8004222:	f000 fa2d 	bl	8004680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2140      	movs	r1, #64	; 0x40
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fa84 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 8004232:	e009      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f000 fa7b 	bl	800473a <TIM_ITRx_SetConfig>
        break;
 8004244:	e000      	b.n	8004248 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004246:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr

08004298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
	...

080042ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a29      	ldr	r2, [pc, #164]	; (8004364 <TIM_Base_SetConfig+0xb8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00b      	beq.n	80042dc <TIM_Base_SetConfig+0x30>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ca:	d007      	beq.n	80042dc <TIM_Base_SetConfig+0x30>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a26      	ldr	r2, [pc, #152]	; (8004368 <TIM_Base_SetConfig+0xbc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_Base_SetConfig+0x30>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a25      	ldr	r2, [pc, #148]	; (800436c <TIM_Base_SetConfig+0xc0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d108      	bne.n	80042ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <TIM_Base_SetConfig+0xb8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00b      	beq.n	800430e <TIM_Base_SetConfig+0x62>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fc:	d007      	beq.n	800430e <TIM_Base_SetConfig+0x62>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a19      	ldr	r2, [pc, #100]	; (8004368 <TIM_Base_SetConfig+0xbc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <TIM_Base_SetConfig+0x62>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a18      	ldr	r2, [pc, #96]	; (800436c <TIM_Base_SetConfig+0xc0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d108      	bne.n	8004320 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a07      	ldr	r2, [pc, #28]	; (8004364 <TIM_Base_SetConfig+0xb8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d103      	bne.n	8004354 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	615a      	str	r2, [r3, #20]
}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800

08004370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f023 0302 	bic.w	r3, r3, #2
 80043b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <TIM_OC1_SetConfig+0xc8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d10c      	bne.n	80043e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f023 0308 	bic.w	r3, r3, #8
 80043d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f023 0304 	bic.w	r3, r3, #4
 80043e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a13      	ldr	r2, [pc, #76]	; (8004438 <TIM_OC1_SetConfig+0xc8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d111      	bne.n	8004412 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	621a      	str	r2, [r3, #32]
}
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40012c00 	.word	0x40012c00

0800443c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0210 	bic.w	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f023 0320 	bic.w	r3, r3, #32
 8004486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a1d      	ldr	r2, [pc, #116]	; (800450c <TIM_OC2_SetConfig+0xd0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d10d      	bne.n	80044b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a14      	ldr	r2, [pc, #80]	; (800450c <TIM_OC2_SetConfig+0xd0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d113      	bne.n	80044e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	40012c00 	.word	0x40012c00

08004510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <TIM_OC3_SetConfig+0xd0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10d      	bne.n	800458a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <TIM_OC3_SetConfig+0xd0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d113      	bne.n	80045ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	621a      	str	r2, [r3, #32]
}
 80045d4:	bf00      	nop
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40012c00 	.word	0x40012c00

080045e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800462e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	031b      	lsls	r3, r3, #12
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a0f      	ldr	r2, [pc, #60]	; (800467c <TIM_OC4_SetConfig+0x98>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d109      	bne.n	8004658 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800464a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	019b      	lsls	r3, r3, #6
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	621a      	str	r2, [r3, #32]
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	40012c00 	.word	0x40012c00

08004680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f023 030a 	bic.w	r3, r3, #10
 80046bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f023 0210 	bic.w	r2, r3, #16
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004706:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	031b      	lsls	r3, r3, #12
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004718:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	621a      	str	r2, [r3, #32]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	f043 0307 	orr.w	r3, r3, #7
 800475c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800476e:	b480      	push	{r7}
 8004770:	b087      	sub	sp, #28
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004788:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	021a      	lsls	r2, r3, #8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	431a      	orrs	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4313      	orrs	r3, r2
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	609a      	str	r2, [r3, #8]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	2201      	movs	r2, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	401a      	ands	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1a      	ldr	r2, [r3, #32]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004808:	2302      	movs	r3, #2
 800480a:	e046      	b.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d009      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a10      	ldr	r2, [pc, #64]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10c      	bne.n	8004888 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4313      	orrs	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800

080048b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e03f      	b.n	8004966 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f005 fbe6 	bl	800a0cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	; 0x24
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fd9d 	bl	8005458 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800492c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800493c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800494c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b08a      	sub	sp, #40	; 0x28
 8004972:	af02      	add	r7, sp, #8
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b20      	cmp	r3, #32
 800498c:	d17c      	bne.n	8004a88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_UART_Transmit+0x2c>
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e075      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_UART_Transmit+0x3e>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e06e      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2221      	movs	r2, #33	; 0x21
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c2:	f7fc fc03 	bl	80011cc <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049dc:	d108      	bne.n	80049f0 <HAL_UART_Transmit+0x82>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d104      	bne.n	80049f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	e003      	b.n	80049f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a00:	e02a      	b.n	8004a58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 fb0f 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e036      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	3302      	adds	r3, #2
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	e007      	b.n	8004a4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1cf      	bne.n	8004a02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2140      	movs	r1, #64	; 0x40
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fadf 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e006      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d13c      	bne.n	8004b26 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e035      	b.n	8004b28 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e02e      	b.n	8004b28 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	461a      	mov	r2, r3
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 faf0 	bl	80050c4 <UART_Start_Receive_DMA>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004ae8:	7dfb      	ldrb	r3, [r7, #23]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d119      	bne.n	8004b22 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d113      	bne.n	8004b1e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0210 	orr.w	r2, r2, #16
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	e001      	b.n	8004b22 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	e000      	b.n	8004b28 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10d      	bne.n	8004b82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_UART_IRQHandler+0x52>
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fbc2 	bl	8005304 <UART_Receive_IT>
      return;
 8004b80:	e17c      	b.n	8004e7c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80b1 	beq.w	8004cec <HAL_UART_IRQHandler+0x1bc>
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x70>
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80a6 	beq.w	8004cec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x90>
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f043 0201 	orr.w	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_UART_IRQHandler+0xb0>
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	f043 0202 	orr.w	r2, r3, #2
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_UART_IRQHandler+0xd0>
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	f043 0204 	orr.w	r2, r3, #4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00f      	beq.n	8004c2a <HAL_UART_IRQHandler+0xfa>
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <HAL_UART_IRQHandler+0xee>
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f043 0208 	orr.w	r2, r3, #8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 811f 	beq.w	8004e72 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_UART_IRQHandler+0x11e>
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fb5b 	bl	8005304 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <HAL_UART_IRQHandler+0x146>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d031      	beq.n	8004cda <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fa9d 	bl	80051b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d023      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c98:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d013      	beq.n	8004cca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	4a77      	ldr	r2, [pc, #476]	; (8004e84 <HAL_UART_IRQHandler+0x354>)
 8004ca8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fc fcba 	bl	8001628 <HAL_DMA_Abort_IT>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	e00e      	b.n	8004ce8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8f7 	bl	8004ebe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	e00a      	b.n	8004ce8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f8f3 	bl	8004ebe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	e006      	b.n	8004ce8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f8ef 	bl	8004ebe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ce6:	e0c4      	b.n	8004e72 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	bf00      	nop
    return;
 8004cea:	e0c2      	b.n	8004e72 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	f040 80a1 	bne.w	8004e38 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 809b 	beq.w	8004e38 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8095 	beq.w	8004e38 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d04e      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d3c:	8a3b      	ldrh	r3, [r7, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8099 	beq.w	8004e76 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d48:	8a3a      	ldrh	r2, [r7, #16]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	f080 8093 	bcs.w	8004e76 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8a3a      	ldrh	r2, [r7, #16]
 8004d54:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d02b      	beq.n	8004db8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d6e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d8e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0210 	bic.w	r2, r2, #16
 8004dac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc fbfd 	bl	80015b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 ffb5 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dce:	e052      	b.n	8004e76 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d048      	beq.n	8004e7a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004de8:	8a7b      	ldrh	r3, [r7, #18]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d045      	beq.n	8004e7a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dfc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0210 	bic.w	r2, r2, #16
 8004e2a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e2c:	8a7b      	ldrh	r3, [r7, #18]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 ff81 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e36:	e020      	b.n	8004e7a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_UART_IRQHandler+0x324>
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f9f2 	bl	8005236 <UART_Transmit_IT>
    return;
 8004e52:	e013      	b.n	8004e7c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00e      	beq.n	8004e7c <HAL_UART_IRQHandler+0x34c>
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d009      	beq.n	8004e7c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fa33 	bl	80052d4 <UART_EndTransmit_IT>
    return;
 8004e6e:	bf00      	nop
 8004e70:	e004      	b.n	8004e7c <HAL_UART_IRQHandler+0x34c>
    return;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <HAL_UART_IRQHandler+0x34c>
      return;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <HAL_UART_IRQHandler+0x34c>
      return;
 8004e7a:	bf00      	nop
  }
}
 8004e7c:	3728      	adds	r7, #40	; 0x28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	0800520f 	.word	0x0800520f

08004e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr

08004e9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr

08004eac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr

08004ebe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr

08004ed0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d12a      	bne.n	8004f42 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f00:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695a      	ldr	r2, [r3, #20]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f20:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d107      	bne.n	8004f42 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0210 	bic.w	r2, r2, #16
 8004f40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d106      	bne.n	8004f58 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f4e:	4619      	mov	r1, r3
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fef1 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f56:	e002      	b.n	8004f5e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff ff9e 	bl	8004e9a <HAL_UART_RxCpltCallback>
}
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d108      	bne.n	8004f8e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	4619      	mov	r1, r3
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 fed6 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f8c:	e002      	b.n	8004f94 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff ff8c 	bl	8004eac <HAL_UART_RxHalfCpltCallback>
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b21      	cmp	r3, #33	; 0x21
 8004fce:	d108      	bne.n	8004fe2 <UART_DMAError+0x46>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f000 f8d5 	bl	800518c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b22      	cmp	r3, #34	; 0x22
 8005002:	d108      	bne.n	8005016 <UART_DMAError+0x7a>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2200      	movs	r2, #0
 800500e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005010:	68b8      	ldr	r0, [r7, #8]
 8005012:	f000 f8d0 	bl	80051b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0210 	orr.w	r2, r3, #16
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005022:	68b8      	ldr	r0, [r7, #8]
 8005024:	f7ff ff4b 	bl	8004ebe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005040:	e02c      	b.n	800509c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d028      	beq.n	800509c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <UART_WaitOnFlagUntilTimeout+0x30>
 8005050:	f7fc f8bc 	bl	80011cc <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	429a      	cmp	r2, r3
 800505e:	d21d      	bcs.n	800509c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800506e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e00f      	b.n	80050bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4013      	ands	r3, r2
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	bf0c      	ite	eq
 80050ac:	2301      	moveq	r3, #1
 80050ae:	2300      	movne	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d0c3      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	88fa      	ldrh	r2, [r7, #6]
 80050dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2222      	movs	r2, #34	; 0x22
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	4a23      	ldr	r2, [pc, #140]	; (8005180 <UART_Start_Receive_DMA+0xbc>)
 80050f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	4a22      	ldr	r2, [pc, #136]	; (8005184 <UART_Start_Receive_DMA+0xc0>)
 80050fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	4a21      	ldr	r2, [pc, #132]	; (8005188 <UART_Start_Receive_DMA+0xc4>)
 8005102:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	2200      	movs	r2, #0
 800510a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800510c:	f107 0308 	add.w	r3, r7, #8
 8005110:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	f7fc f9e6 	bl	80014f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005154:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005174:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	08004ed1 	.word	0x08004ed1
 8005184:	08004f67 	.word	0x08004f67
 8005188:	08004f9d 	.word	0x08004f9d

0800518c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80051a2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d107      	bne.n	80051f6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0210 	bic.w	r2, r2, #16
 80051f4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr

0800520e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f7ff fe48 	bl	8004ebe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b21      	cmp	r3, #33	; 0x21
 8005248:	d13e      	bne.n	80052c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d114      	bne.n	800527e <UART_Transmit_IT+0x48>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d110      	bne.n	800527e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005270:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	1c9a      	adds	r2, r3, #2
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	621a      	str	r2, [r3, #32]
 800527c:	e008      	b.n	8005290 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	1c59      	adds	r1, r3, #1
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6211      	str	r1, [r2, #32]
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29b      	uxth	r3, r3
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	4619      	mov	r1, r3
 800529e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10f      	bne.n	80052c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e000      	b.n	80052ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr

080052d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff fdc7 	bl	8004e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b22      	cmp	r3, #34	; 0x22
 8005316:	f040 8099 	bne.w	800544c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005322:	d117      	bne.n	8005354 <UART_Receive_IT+0x50>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d113      	bne.n	8005354 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005342:	b29a      	uxth	r2, r3
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	1c9a      	adds	r2, r3, #2
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	629a      	str	r2, [r3, #40]	; 0x28
 8005352:	e026      	b.n	80053a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005366:	d007      	beq.n	8005378 <UART_Receive_IT+0x74>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <UART_Receive_IT+0x82>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	b2da      	uxtb	r2, r3
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	e008      	b.n	8005398 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005392:	b2da      	uxtb	r2, r3
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4619      	mov	r1, r3
 80053b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d148      	bne.n	8005448 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0220 	bic.w	r2, r2, #32
 80053c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695a      	ldr	r2, [r3, #20]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d123      	bne.n	800543e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0210 	bic.w	r2, r2, #16
 800540a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b10      	cmp	r3, #16
 8005418:	d10a      	bne.n	8005430 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fc7e 	bl	8005d38 <HAL_UARTEx_RxEventCallback>
 800543c:	e002      	b.n	8005444 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fd2b 	bl	8004e9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	e002      	b.n	800544e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	e000      	b.n	800544e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800544c:	2302      	movs	r3, #2
  }
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005492:	f023 030c 	bic.w	r3, r3, #12
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	430b      	orrs	r3, r1
 800549e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2c      	ldr	r2, [pc, #176]	; (800556c <UART_SetConfig+0x114>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d103      	bne.n	80054c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054c0:	f7fd ffc0 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	e002      	b.n	80054ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7fd ffa8 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 80054cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009a      	lsls	r2, r3, #2
 80054d8:	441a      	add	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	4a22      	ldr	r2, [pc, #136]	; (8005570 <UART_SetConfig+0x118>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	0119      	lsls	r1, r3, #4
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	009a      	lsls	r2, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	fbb2 f2f3 	udiv	r2, r2, r3
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <UART_SetConfig+0x118>)
 8005506:	fba3 0302 	umull	r0, r3, r3, r2
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	2064      	movs	r0, #100	; 0x64
 800550e:	fb00 f303 	mul.w	r3, r0, r3
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	3332      	adds	r3, #50	; 0x32
 8005518:	4a15      	ldr	r2, [pc, #84]	; (8005570 <UART_SetConfig+0x118>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005524:	4419      	add	r1, r3
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009a      	lsls	r2, r3, #2
 8005530:	441a      	add	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	fbb2 f2f3 	udiv	r2, r2, r3
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <UART_SetConfig+0x118>)
 800553e:	fba3 0302 	umull	r0, r3, r3, r2
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	2064      	movs	r0, #100	; 0x64
 8005546:	fb00 f303 	mul.w	r3, r0, r3
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	3332      	adds	r3, #50	; 0x32
 8005550:	4a07      	ldr	r2, [pc, #28]	; (8005570 <UART_SetConfig+0x118>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	f003 020f 	and.w	r2, r3, #15
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	440a      	add	r2, r1
 8005562:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40013800 	.word	0x40013800
 8005570:	51eb851f 	.word	0x51eb851f

08005574 <crc16_floating>:
        crc = (crc << 8) ^ crc16tab[(((crc >> 8) ^ (*((uint8_t *)(buf++)))) & 0x00FF)];
    return crc;
}

uint16_t crc16_floating(uint8_t next, uint16_t seed)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	460a      	mov	r2, r1
 800557e:	71fb      	strb	r3, [r7, #7]
 8005580:	4613      	mov	r3, r2
 8005582:	80bb      	strh	r3, [r7, #4]
    return (seed << 8) ^ crc16tab[((seed >> 8) ^ next) & 0x00FF];
 8005584:	88bb      	ldrh	r3, [r7, #4]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	b21a      	sxth	r2, r3
 800558a:	88bb      	ldrh	r3, [r7, #4]
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	b29b      	uxth	r3, r3
 8005590:	4619      	mov	r1, r3
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	404b      	eors	r3, r1
 8005596:	b2db      	uxtb	r3, r3
 8005598:	4905      	ldr	r1, [pc, #20]	; (80055b0 <crc16_floating+0x3c>)
 800559a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800559e:	b21b      	sxth	r3, r3
 80055a0:	4053      	eors	r3, r2
 80055a2:	b21b      	sxth	r3, r3
 80055a4:	b29b      	uxth	r3, r3
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr
 80055b0:	0800c3cc 	.word	0x0800c3cc

080055b4 <SendFrameData>:

#include "frame_uart.h"
#include "crc.h"

void SendFrameData(uint8_t *pu8Src, uint16_t u16Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	607a      	str	r2, [r7, #4]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	460b      	mov	r3, r1
 80055c2:	817b      	strh	r3, [r7, #10]
    const uint8_t *pu8Src_end = pu8Src + u16Src_len;
 80055c4:	897b      	ldrh	r3, [r7, #10]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
    const uint8_t *pu8Dest_start = pu8Dest;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	83fb      	strh	r3, [r7, #30]

    *(pu8Dest++) = START_BYTE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	2245      	movs	r2, #69	; 0x45
 80055dc:	701a      	strb	r2, [r3, #0]
    while (pu8Src < pu8Src_end)
 80055de:	e029      	b.n	8005634 <SendFrameData+0x80>
    {
        if (*pu8Src == START_BYTE || *pu8Src == CHECK_BYTE || *pu8Src == STOP_BYTE)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b45      	cmp	r3, #69	; 0x45
 80055e6:	d007      	beq.n	80055f8 <SendFrameData+0x44>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b60      	cmp	r3, #96	; 0x60
 80055ee:	d003      	beq.n	80055f8 <SendFrameData+0x44>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2bc4      	cmp	r3, #196	; 0xc4
 80055f6:	d10b      	bne.n	8005610 <SendFrameData+0x5c>
        {
            *(pu8Dest++) = CHECK_BYTE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	2260      	movs	r2, #96	; 0x60
 8005600:	701a      	strb	r2, [r3, #0]
            *(pu8Dest++) = *pu8Src;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	7812      	ldrb	r2, [r2, #0]
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e005      	b.n	800561c <SendFrameData+0x68>
        }
        else
        {
            *(pu8Dest++) = *pu8Src;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	701a      	strb	r2, [r3, #0]
        }
        crc = crc16_floating(*pu8Src, crc);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	8bfa      	ldrh	r2, [r7, #30]
 8005622:	4611      	mov	r1, r2
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff ffa5 	bl	8005574 <crc16_floating>
 800562a:	4603      	mov	r3, r0
 800562c:	83fb      	strh	r3, [r7, #30]
        pu8Src++;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
    while (pu8Src < pu8Src_end)
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	429a      	cmp	r2, r3
 800563a:	d3d1      	bcc.n	80055e0 <SendFrameData+0x2c>
    }
    *(pu8Dest) = (char)(crc >> 8);
 800563c:	8bfb      	ldrh	r3, [r7, #30]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	b29b      	uxth	r3, r3
 8005642:	b2da      	uxtb	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3301      	adds	r3, #1
 800564c:	607b      	str	r3, [r7, #4]
    *(pu8Dest) = (char)crc;
 800564e:	8bfb      	ldrh	r3, [r7, #30]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3301      	adds	r3, #1
 800565a:	607b      	str	r3, [r7, #4]
    *(pu8Dest++) = STOP_BYTE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	22c4      	movs	r2, #196	; 0xc4
 8005664:	701a      	strb	r2, [r3, #0]
    *(pu16Dest_len) = pu8Dest - pu8Dest_start;
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	b29a      	uxth	r2, r3
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	801a      	strh	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <receive_value>:
//  {
//    *(pid_para++) = (data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3];
//  }
//}
void receive_value(uint8_t *data_dest, uint8_t *data, uint8_t length)
{
 800567a:	b480      	push	{r7}
 800567c:	b087      	sub	sp, #28
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	4613      	mov	r3, r2
 8005686:	71fb      	strb	r3, [r7, #7]
    for(int i=0; i<length; i++)
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	e00a      	b.n	80056a4 <receive_value+0x2a>
        *data++ = *data_dest++;
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	1c53      	adds	r3, r2, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	1c59      	adds	r1, r3, #1
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	7812      	ldrb	r2, [r2, #0]
 800569c:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<length; i++)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	3301      	adds	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	dbf0      	blt.n	800568e <receive_value+0x14>
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
	...

080056b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80056bc:	f7fb fd2e 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056c0:	f000 f86e 	bl	80057a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056c4:	f000 fa10 	bl	8005ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 80056c8:	f000 f9f0 	bl	8005aac <MX_DMA_Init>
  MX_I2C1_Init();
 80056cc:	f000 f8aa 	bl	8005824 <MX_I2C1_Init>
  MX_SPI2_Init();
 80056d0:	f000 f8d6 	bl	8005880 <MX_SPI2_Init>
  MX_TIM3_Init();
 80056d4:	f000 f90a 	bl	80058ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80056d8:	f000 f9be 	bl	8005a58 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80056dc:	f000 f96e 	bl	80059bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80056e0:	210c      	movs	r1, #12
 80056e2:	4825      	ldr	r0, [pc, #148]	; (8005778 <main+0xc0>)
 80056e4:	f7fe fa9e 	bl	8003c24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80056e8:	2108      	movs	r1, #8
 80056ea:	4823      	ldr	r0, [pc, #140]	; (8005778 <main+0xc0>)
 80056ec:	f7fe fa9a 	bl	8003c24 <HAL_TIM_PWM_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
 80056f0:	2220      	movs	r2, #32
 80056f2:	4922      	ldr	r1, [pc, #136]	; (800577c <main+0xc4>)
 80056f4:	4822      	ldr	r0, [pc, #136]	; (8005780 <main+0xc8>)
 80056f6:	f7ff f9cc 	bl	8004a92 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80056fa:	4b22      	ldr	r3, [pc, #136]	; (8005784 <main+0xcc>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	4b20      	ldr	r3, [pc, #128]	; (8005784 <main+0xcc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0204 	bic.w	r2, r2, #4
 8005708:	601a      	str	r2, [r3, #0]
  runRadio();
 800570a:	f004 fb49 	bl	8009da0 <runRadio>
  while (MPU9255_Init(&hi2c1) == 1)
 800570e:	e006      	b.n	800571e <main+0x66>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8005710:	2104      	movs	r1, #4
 8005712:	481d      	ldr	r0, [pc, #116]	; (8005788 <main+0xd0>)
 8005714:	f7fc faa4 	bl	8001c60 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8005718:	2064      	movs	r0, #100	; 0x64
 800571a:	f7fb fd61 	bl	80011e0 <HAL_Delay>
  while (MPU9255_Init(&hi2c1) == 1)
 800571e:	481b      	ldr	r0, [pc, #108]	; (800578c <main+0xd4>)
 8005720:	f000 fc62 	bl	8005fe8 <MPU9255_Init>
 8005724:	4603      	mov	r3, r0
 8005726:	2b01      	cmp	r3, #1
 8005728:	d0f2      	beq.n	8005710 <main+0x58>
  }
  HAL_Delay(3000);
 800572a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800572e:	f7fb fd57 	bl	80011e0 <HAL_Delay>
  while (payload_packet.throttle > 1050)
 8005732:	e004      	b.n	800573e <main+0x86>
  {
    // Read again
    RX_data();
 8005734:	f004 fb6c 	bl	8009e10 <RX_data>
    HAL_Delay(20);
 8005738:	2014      	movs	r0, #20
 800573a:	f7fb fd51 	bl	80011e0 <HAL_Delay>
  while (payload_packet.throttle > 1050)
 800573e:	4b14      	ldr	r3, [pc, #80]	; (8005790 <main+0xd8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f240 421a 	movw	r2, #1050	; 0x41a
 8005746:	4293      	cmp	r3, r2
 8005748:	d8f4      	bhi.n	8005734 <main+0x7c>
  }

  start_time = HAL_GetTick();
 800574a:	f7fb fd3f 	bl	80011cc <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <main+0xdc>)
 8005752:	601a      	str	r2, [r3, #0]
  while ((HAL_GetTick() - start_time) < 4000)
 8005754:	e003      	b.n	800575e <main+0xa6>
  {
    readAll(&hi2c1, &MPU9255);
 8005756:	4910      	ldr	r1, [pc, #64]	; (8005798 <main+0xe0>)
 8005758:	480c      	ldr	r0, [pc, #48]	; (800578c <main+0xd4>)
 800575a:	f000 fca9 	bl	80060b0 <readAll>
  while ((HAL_GetTick() - start_time) < 4000)
 800575e:	f7fb fd35 	bl	80011cc <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <main+0xdc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800576e:	d3f2      	bcc.n	8005756 <main+0x9e>
  }
//  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
//  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  HAL_TIM_Base_Start_IT(&htim4);
 8005770:	480a      	ldr	r0, [pc, #40]	; (800579c <main+0xe4>)
 8005772:	f7fe f9b5 	bl	8003ae0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005776:	e7fe      	b.n	8005776 <main+0xbe>
 8005778:	200002ac 	.word	0x200002ac
 800577c:	20000398 	.word	0x20000398
 8005780:	2000033c 	.word	0x2000033c
 8005784:	200002f8 	.word	0x200002f8
 8005788:	40010c00 	.word	0x40010c00
 800578c:	20000258 	.word	0x20000258
 8005790:	200004fc 	.word	0x200004fc
 8005794:	200000ac 	.word	0x200000ac
 8005798:	20000154 	.word	0x20000154
 800579c:	200001e8 	.word	0x200001e8

080057a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b090      	sub	sp, #64	; 0x40
 80057a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80057a6:	f107 0318 	add.w	r3, r7, #24
 80057aa:	2228      	movs	r2, #40	; 0x28
 80057ac:	2100      	movs	r1, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f004 fdd4 	bl	800a35c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]
 80057bc:	609a      	str	r2, [r3, #8]
 80057be:	60da      	str	r2, [r3, #12]
 80057c0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80057c2:	2302      	movs	r3, #2
 80057c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057c6:	2301      	movs	r3, #1
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80057ca:	2310      	movs	r3, #16
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057ce:	2302      	movs	r3, #2
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80057d2:	2300      	movs	r3, #0
 80057d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80057d6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057dc:	f107 0318 	add.w	r3, r7, #24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fd fa45 	bl	8002c70 <HAL_RCC_OscConfig>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80057ec:	f000 fafa 	bl	8005de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057f0:	230f      	movs	r3, #15
 80057f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057f4:	2302      	movs	r3, #2
 80057f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80057fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005806:	1d3b      	adds	r3, r7, #4
 8005808:	2102      	movs	r1, #2
 800580a:	4618      	mov	r0, r3
 800580c:	f7fd fcb0 	bl	8003170 <HAL_RCC_ClockConfig>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8005816:	f000 fae5 	bl	8005de4 <Error_Handler>
  }
}
 800581a:	bf00      	nop
 800581c:	3740      	adds	r7, #64	; 0x40
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005828:	4b12      	ldr	r3, [pc, #72]	; (8005874 <MX_I2C1_Init+0x50>)
 800582a:	4a13      	ldr	r2, [pc, #76]	; (8005878 <MX_I2C1_Init+0x54>)
 800582c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <MX_I2C1_Init+0x50>)
 8005830:	4a12      	ldr	r2, [pc, #72]	; (800587c <MX_I2C1_Init+0x58>)
 8005832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005834:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <MX_I2C1_Init+0x50>)
 8005836:	2200      	movs	r2, #0
 8005838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800583a:	4b0e      	ldr	r3, [pc, #56]	; (8005874 <MX_I2C1_Init+0x50>)
 800583c:	2200      	movs	r2, #0
 800583e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005840:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <MX_I2C1_Init+0x50>)
 8005842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <MX_I2C1_Init+0x50>)
 800584a:	2200      	movs	r2, #0
 800584c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <MX_I2C1_Init+0x50>)
 8005850:	2200      	movs	r2, #0
 8005852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005854:	4b07      	ldr	r3, [pc, #28]	; (8005874 <MX_I2C1_Init+0x50>)
 8005856:	2200      	movs	r2, #0
 8005858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <MX_I2C1_Init+0x50>)
 800585c:	2200      	movs	r2, #0
 800585e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005860:	4804      	ldr	r0, [pc, #16]	; (8005874 <MX_I2C1_Init+0x50>)
 8005862:	f7fc fa17 	bl	8001c94 <HAL_I2C_Init>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800586c:	f000 faba 	bl	8005de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005870:	bf00      	nop
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20000258 	.word	0x20000258
 8005878:	40005400 	.word	0x40005400
 800587c:	000186a0 	.word	0x000186a0

08005880 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005884:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <MX_SPI2_Init+0x64>)
 8005886:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <MX_SPI2_Init+0x68>)
 8005888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800588a:	4b16      	ldr	r3, [pc, #88]	; (80058e4 <MX_SPI2_Init+0x64>)
 800588c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005892:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <MX_SPI2_Init+0x64>)
 8005894:	2200      	movs	r2, #0
 8005896:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005898:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <MX_SPI2_Init+0x64>)
 800589a:	2200      	movs	r2, #0
 800589c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800589e:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <MX_SPI2_Init+0x64>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <MX_SPI2_Init+0x64>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80058aa:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <MX_SPI2_Init+0x64>)
 80058ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058b2:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <MX_SPI2_Init+0x64>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <MX_SPI2_Init+0x64>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <MX_SPI2_Init+0x64>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <MX_SPI2_Init+0x64>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <MX_SPI2_Init+0x64>)
 80058cc:	220a      	movs	r2, #10
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80058d0:	4804      	ldr	r0, [pc, #16]	; (80058e4 <MX_SPI2_Init+0x64>)
 80058d2:	f7fd fde9 	bl	80034a8 <HAL_SPI_Init>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80058dc:	f000 fa82 	bl	8005de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80058e0:	bf00      	nop
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000184 	.word	0x20000184
 80058e8:	40003800 	.word	0x40003800

080058ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058f2:	f107 0320 	add.w	r3, r7, #32
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80058fc:	1d3b      	adds	r3, r7, #4
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	609a      	str	r2, [r3, #8]
 8005906:	60da      	str	r2, [r3, #12]
 8005908:	611a      	str	r2, [r3, #16]
 800590a:	615a      	str	r2, [r3, #20]
 800590c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800590e:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <MX_TIM3_Init+0xc8>)
 8005910:	4a29      	ldr	r2, [pc, #164]	; (80059b8 <MX_TIM3_Init+0xcc>)
 8005912:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8005914:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <MX_TIM3_Init+0xc8>)
 8005916:	223f      	movs	r2, #63	; 0x3f
 8005918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800591a:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <MX_TIM3_Init+0xc8>)
 800591c:	2200      	movs	r2, #0
 800591e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8005920:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <MX_TIM3_Init+0xc8>)
 8005922:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005926:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005928:	4b22      	ldr	r3, [pc, #136]	; (80059b4 <MX_TIM3_Init+0xc8>)
 800592a:	2200      	movs	r2, #0
 800592c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800592e:	4b21      	ldr	r3, [pc, #132]	; (80059b4 <MX_TIM3_Init+0xc8>)
 8005930:	2200      	movs	r2, #0
 8005932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005934:	481f      	ldr	r0, [pc, #124]	; (80059b4 <MX_TIM3_Init+0xc8>)
 8005936:	f7fe f925 	bl	8003b84 <HAL_TIM_PWM_Init>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005940:	f000 fa50 	bl	8005de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005944:	2300      	movs	r3, #0
 8005946:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005948:	2300      	movs	r3, #0
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800594c:	f107 0320 	add.w	r3, r7, #32
 8005950:	4619      	mov	r1, r3
 8005952:	4818      	ldr	r0, [pc, #96]	; (80059b4 <MX_TIM3_Init+0xc8>)
 8005954:	f7fe ff4e 	bl	80047f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800595e:	f000 fa41 	bl	8005de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005962:	2360      	movs	r3, #96	; 0x60
 8005964:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8005966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800596a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	2208      	movs	r2, #8
 8005978:	4619      	mov	r1, r3
 800597a:	480e      	ldr	r0, [pc, #56]	; (80059b4 <MX_TIM3_Init+0xc8>)
 800597c:	f7fe fafc 	bl	8003f78 <HAL_TIM_PWM_ConfigChannel>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8005986:	f000 fa2d 	bl	8005de4 <Error_Handler>
  }
  sConfigOC.Pulse = 910;
 800598a:	f240 338e 	movw	r3, #910	; 0x38e
 800598e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005990:	1d3b      	adds	r3, r7, #4
 8005992:	220c      	movs	r2, #12
 8005994:	4619      	mov	r1, r3
 8005996:	4807      	ldr	r0, [pc, #28]	; (80059b4 <MX_TIM3_Init+0xc8>)
 8005998:	f7fe faee 	bl	8003f78 <HAL_TIM_PWM_ConfigChannel>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80059a2:	f000 fa1f 	bl	8005de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80059a6:	4803      	ldr	r0, [pc, #12]	; (80059b4 <MX_TIM3_Init+0xc8>)
 80059a8:	f004 fb5e 	bl	800a068 <HAL_TIM_MspPostInit>

}
 80059ac:	bf00      	nop
 80059ae:	3728      	adds	r7, #40	; 0x28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	200002ac 	.word	0x200002ac
 80059b8:	40000400 	.word	0x40000400

080059bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059c2:	f107 0308 	add.w	r3, r7, #8
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	605a      	str	r2, [r3, #4]
 80059cc:	609a      	str	r2, [r3, #8]
 80059ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059d0:	463b      	mov	r3, r7
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80059d8:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <MX_TIM4_Init+0x94>)
 80059da:	4a1e      	ldr	r2, [pc, #120]	; (8005a54 <MX_TIM4_Init+0x98>)
 80059dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 80059de:	4b1c      	ldr	r3, [pc, #112]	; (8005a50 <MX_TIM4_Init+0x94>)
 80059e0:	f240 227f 	movw	r2, #639	; 0x27f
 80059e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <MX_TIM4_Init+0x94>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80059ec:	4b18      	ldr	r3, [pc, #96]	; (8005a50 <MX_TIM4_Init+0x94>)
 80059ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80059f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059f4:	4b16      	ldr	r3, [pc, #88]	; (8005a50 <MX_TIM4_Init+0x94>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059fa:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <MX_TIM4_Init+0x94>)
 80059fc:	2280      	movs	r2, #128	; 0x80
 80059fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005a00:	4813      	ldr	r0, [pc, #76]	; (8005a50 <MX_TIM4_Init+0x94>)
 8005a02:	f7fe f81d 	bl	8003a40 <HAL_TIM_Base_Init>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005a0c:	f000 f9ea 	bl	8005de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005a16:	f107 0308 	add.w	r3, r7, #8
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	480c      	ldr	r0, [pc, #48]	; (8005a50 <MX_TIM4_Init+0x94>)
 8005a1e:	f7fe fb69 	bl	80040f4 <HAL_TIM_ConfigClockSource>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005a28:	f000 f9dc 	bl	8005de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005a34:	463b      	mov	r3, r7
 8005a36:	4619      	mov	r1, r3
 8005a38:	4805      	ldr	r0, [pc, #20]	; (8005a50 <MX_TIM4_Init+0x94>)
 8005a3a:	f7fe fedb 	bl	80047f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005a44:	f000 f9ce 	bl	8005de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005a48:	bf00      	nop
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	200001e8 	.word	0x200001e8
 8005a54:	40000800 	.word	0x40000800

08005a58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <MX_USART1_UART_Init+0x4c>)
 8005a5e:	4a12      	ldr	r2, [pc, #72]	; (8005aa8 <MX_USART1_UART_Init+0x50>)
 8005a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005a62:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <MX_USART1_UART_Init+0x4c>)
 8005a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005a6a:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <MX_USART1_UART_Init+0x4c>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005a70:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <MX_USART1_UART_Init+0x4c>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005a76:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <MX_USART1_UART_Init+0x4c>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005a7c:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <MX_USART1_UART_Init+0x4c>)
 8005a7e:	220c      	movs	r2, #12
 8005a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <MX_USART1_UART_Init+0x4c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <MX_USART1_UART_Init+0x4c>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005a8e:	4805      	ldr	r0, [pc, #20]	; (8005aa4 <MX_USART1_UART_Init+0x4c>)
 8005a90:	f7fe ff20 	bl	80048d4 <HAL_UART_Init>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005a9a:	f000 f9a3 	bl	8005de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	2000033c 	.word	0x2000033c
 8005aa8:	40013800 	.word	0x40013800

08005aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <MX_DMA_Init+0x38>)
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	4a0b      	ldr	r2, [pc, #44]	; (8005ae4 <MX_DMA_Init+0x38>)
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	6153      	str	r3, [r2, #20]
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <MX_DMA_Init+0x38>)
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	607b      	str	r3, [r7, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005aca:	2200      	movs	r2, #0
 8005acc:	2100      	movs	r1, #0
 8005ace:	200f      	movs	r0, #15
 8005ad0:	f7fb fc7f 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005ad4:	200f      	movs	r0, #15
 8005ad6:	f7fb fc98 	bl	800140a <HAL_NVIC_EnableIRQ>

}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40021000 	.word	0x40021000

08005ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aee:	f107 0310 	add.w	r3, r7, #16
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	605a      	str	r2, [r3, #4]
 8005af8:	609a      	str	r2, [r3, #8]
 8005afa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005afc:	4b33      	ldr	r3, [pc, #204]	; (8005bcc <MX_GPIO_Init+0xe4>)
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	4a32      	ldr	r2, [pc, #200]	; (8005bcc <MX_GPIO_Init+0xe4>)
 8005b02:	f043 0310 	orr.w	r3, r3, #16
 8005b06:	6193      	str	r3, [r2, #24]
 8005b08:	4b30      	ldr	r3, [pc, #192]	; (8005bcc <MX_GPIO_Init+0xe4>)
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b14:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <MX_GPIO_Init+0xe4>)
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	4a2c      	ldr	r2, [pc, #176]	; (8005bcc <MX_GPIO_Init+0xe4>)
 8005b1a:	f043 0308 	orr.w	r3, r3, #8
 8005b1e:	6193      	str	r3, [r2, #24]
 8005b20:	4b2a      	ldr	r3, [pc, #168]	; (8005bcc <MX_GPIO_Init+0xe4>)
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b2c:	4b27      	ldr	r3, [pc, #156]	; (8005bcc <MX_GPIO_Init+0xe4>)
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	4a26      	ldr	r2, [pc, #152]	; (8005bcc <MX_GPIO_Init+0xe4>)
 8005b32:	f043 0304 	orr.w	r3, r3, #4
 8005b36:	6193      	str	r3, [r2, #24]
 8005b38:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <MX_GPIO_Init+0xe4>)
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BUTTON2_Pin|BUTTON3_Pin, GPIO_PIN_RESET);
 8005b44:	2200      	movs	r2, #0
 8005b46:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005b4a:	4821      	ldr	r0, [pc, #132]	; (8005bd0 <MX_GPIO_Init+0xe8>)
 8005b4c:	f7fc f870 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8005b50:	2200      	movs	r2, #0
 8005b52:	f241 0104 	movw	r1, #4100	; 0x1004
 8005b56:	481f      	ldr	r0, [pc, #124]	; (8005bd4 <MX_GPIO_Init+0xec>)
 8005b58:	f7fc f86a 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b62:	481d      	ldr	r0, [pc, #116]	; (8005bd8 <MX_GPIO_Init+0xf0>)
 8005b64:	f7fc f864 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8005b68:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b76:	2302      	movs	r3, #2
 8005b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b7a:	f107 0310 	add.w	r3, r7, #16
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4813      	ldr	r0, [pc, #76]	; (8005bd0 <MX_GPIO_Init+0xe8>)
 8005b82:	f7fb fefb 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|NRF_CSN_Pin;
 8005b86:	f241 0304 	movw	r3, #4100	; 0x1004
 8005b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b94:	2302      	movs	r3, #2
 8005b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b98:	f107 0310 	add.w	r3, r7, #16
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	480d      	ldr	r0, [pc, #52]	; (8005bd4 <MX_GPIO_Init+0xec>)
 8005ba0:	f7fb feec 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8005ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005baa:	2301      	movs	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8005bb6:	f107 0310 	add.w	r3, r7, #16
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4806      	ldr	r0, [pc, #24]	; (8005bd8 <MX_GPIO_Init+0xf0>)
 8005bbe:	f7fb fedd 	bl	800197c <HAL_GPIO_Init>

}
 8005bc2:	bf00      	nop
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40011000 	.word	0x40011000
 8005bd4:	40010c00 	.word	0x40010c00
 8005bd8:	40010800 	.word	0x40010800
 8005bdc:	00000000 	.word	0x00000000

08005be0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b5b0      	push	{r4, r5, r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t start = HAL_GetTick();
 8005be8:	f7fb faf0 	bl	80011cc <HAL_GetTick>
 8005bec:	60f8      	str	r0, [r7, #12]

  if (htim->Instance == htim4.Instance)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4b3f      	ldr	r3, [pc, #252]	; (8005cf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d16a      	bne.n	8005cd0 <HAL_TIM_PeriodElapsedCallback+0xf0>
  {
	  RX_data();
 8005bfa:	f004 f909 	bl	8009e10 <RX_data>
    readAll(&hi2c1, &MPU9255);
 8005bfe:	493d      	ldr	r1, [pc, #244]	; (8005cf4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005c00:	483d      	ldr	r0, [pc, #244]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005c02:	f000 fa55 	bl	80060b0 <readAll>
    abs_yaw_angle = abs_yaw_angle + MPU9255.GyroZ * dt;
 8005c06:	4b3d      	ldr	r3, [pc, #244]	; (8005cfc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fa fc04 	bl	8000418 <__aeabi_f2d>
 8005c10:	4604      	mov	r4, r0
 8005c12:	460d      	mov	r5, r1
 8005c14:	4b37      	ldr	r3, [pc, #220]	; (8005cf4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fa fbfd 	bl	8000418 <__aeabi_f2d>
 8005c1e:	a332      	add	r3, pc, #200	; (adr r3, 8005ce8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f7fa fc50 	bl	80004c8 <__aeabi_dmul>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f7fa fa94 	bl	800015c <__adddf3>
 8005c34:	4603      	mov	r3, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	4618      	mov	r0, r3
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	f7fa ff14 	bl	8000a68 <__aeabi_d2f>
 8005c40:	4602      	mov	r2, r0
 8005c42:	4b2e      	ldr	r3, [pc, #184]	; (8005cfc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005c44:	601a      	str	r2, [r3, #0]

 //   pid_roll(payload_packet.roll, MPU9255.roll, MPU9255.GyroX, &pid);
    pid_pitch(payload_packet.pitch, MPU9255.pitch, MPU9255.GyroY, &pid);
 8005c46:	4b2e      	ldr	r3, [pc, #184]	; (8005d00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	b298      	uxth	r0, r3
 8005c4c:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005c4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8005c56:	f003 ffd3 	bl	8009c00 <pid_pitch>

    // value PWM
    calculate_motor_output(&esc_right, &esc_left, &servo_right, &servo_left, payload_packet.throttle, &pid);
 8005c5a:	4b29      	ldr	r3, [pc, #164]	; (8005d00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	4a28      	ldr	r2, [pc, #160]	; (8005d04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8005c62:	9201      	str	r2, [sp, #4]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	4b28      	ldr	r3, [pc, #160]	; (8005d08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005c68:	4a28      	ldr	r2, [pc, #160]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005c6a:	4929      	ldr	r1, [pc, #164]	; (8005d10 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005c6c:	4829      	ldr	r0, [pc, #164]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005c6e:	f000 f8eb 	bl	8005e48 <calculate_motor_output>

    // htim3.Instance->CCR1 = servo_right;
    // htim3.Instance->CCR2 = servo_left;
    htim3.Instance->CCR3 = esc_right; // trang
 8005c72:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005c74:	881a      	ldrh	r2, [r3, #0]
 8005c76:	4b28      	ldr	r3, [pc, #160]	; (8005d18 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR4 = esc_left;  // vang
 8005c7c:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005c7e:	881a      	ldrh	r2, [r3, #0]
 8005c80:	4b25      	ldr	r3, [pc, #148]	; (8005d18 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40

    // send to GUI
       q_Roll_angle = MPU9255.pitch + 2000 ;
 8005c86:	4b1b      	ldr	r3, [pc, #108]	; (8005cf4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	4924      	ldr	r1, [pc, #144]	; (8005d1c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fa ff41 	bl	8000b14 <__addsf3>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
 8005c96:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005c98:	601a      	str	r2, [r3, #0]
    //q_Roll_angle = MPU9255.GyroY+ 2000 ;

    sprintf((char *)f_trans, "%d%d", (uint16_t)2000 , (uint16_t)q_Roll_angle);
 8005c9a:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fb fa1c 	bl	80010dc <__aeabi_f2uiz>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005cac:	491d      	ldr	r1, [pc, #116]	; (8005d24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005cae:	481e      	ldr	r0, [pc, #120]	; (8005d28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005cb0:	f004 fb5c 	bl	800a36c <siprintf>
    SendFrameData(f_trans, FRAME_DATA_TX, f_dest_trans, &f_dest_len_t);
 8005cb4:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005cb6:	4a1e      	ldr	r2, [pc, #120]	; (8005d30 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005cb8:	2108      	movs	r1, #8
 8005cba:	481b      	ldr	r0, [pc, #108]	; (8005d28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005cbc:	f7ff fc7a 	bl	80055b4 <SendFrameData>
    HAL_UART_Transmit(&huart1, f_dest_trans, f_dest_len_t, 1000);
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005cc2:	881a      	ldrh	r2, [r3, #0]
 8005cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cc8:	4919      	ldr	r1, [pc, #100]	; (8005d30 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005cca:	481a      	ldr	r0, [pc, #104]	; (8005d34 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005ccc:	f7fe fe4f 	bl	800496e <HAL_UART_Transmit>
  }
  uint32_t time = HAL_GetTick() - start;
 8005cd0:	f7fb fa7c 	bl	80011cc <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	60bb      	str	r3, [r7, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ce4:	f3af 8000 	nop.w
 8005ce8:	47ae147b 	.word	0x47ae147b
 8005cec:	3f847ae1 	.word	0x3f847ae1
 8005cf0:	200001e8 	.word	0x200001e8
 8005cf4:	20000154 	.word	0x20000154
 8005cf8:	20000258 	.word	0x20000258
 8005cfc:	200000e0 	.word	0x200000e0
 8005d00:	200004fc 	.word	0x200004fc
 8005d04:	200001dc 	.word	0x200001dc
 8005d08:	200000e6 	.word	0x200000e6
 8005d0c:	200000e4 	.word	0x200000e4
 8005d10:	20000380 	.word	0x20000380
 8005d14:	20000386 	.word	0x20000386
 8005d18:	200002ac 	.word	0x200002ac
 8005d1c:	44fa0000 	.word	0x44fa0000
 8005d20:	200000dc 	.word	0x200000dc
 8005d24:	0800c3ac 	.word	0x0800c3ac
 8005d28:	20000390 	.word	0x20000390
 8005d2c:	200000d8 	.word	0x200000d8
 8005d30:	20000230 	.word	0x20000230
 8005d34:	2000033c 	.word	0x2000033c

08005d38 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	807b      	strh	r3, [r7, #2]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
 8005d44:	2220      	movs	r2, #32
 8005d46:	491b      	ldr	r1, [pc, #108]	; (8005db4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8005d48:	481b      	ldr	r0, [pc, #108]	; (8005db8 <HAL_UARTEx_RxEventCallback+0x80>)
 8005d4a:	f7fe fea2 	bl	8004a92 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8005d4e:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <HAL_UARTEx_RxEventCallback+0x84>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_UARTEx_RxEventCallback+0x84>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0204 	bic.w	r2, r2, #4
 8005d5c:	601a      	str	r2, [r3, #0]
  receive_value(f_recei,(uint8_t*)&pid_para, Size);
 8005d5e:	887b      	ldrh	r3, [r7, #2]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	4916      	ldr	r1, [pc, #88]	; (8005dc0 <HAL_UARTEx_RxEventCallback+0x88>)
 8005d66:	4813      	ldr	r0, [pc, #76]	; (8005db4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8005d68:	f7ff fc87 	bl	800567a <receive_value>
  Kp_rate_pitch = pid_para.Kp_p;
 8005d6c:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <HAL_UARTEx_RxEventCallback+0x88>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8005d72:	6013      	str	r3, [r2, #0]
  Ki_rate_pitch = pid_para.Ki_p;
 8005d74:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <HAL_UARTEx_RxEventCallback+0x88>)
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <HAL_UARTEx_RxEventCallback+0x90>)
 8005d7a:	6013      	str	r3, [r2, #0]
  Kd_rate_pitch = pid_para.Kd_p;
 8005d7c:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <HAL_UARTEx_RxEventCallback+0x88>)
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	4a12      	ldr	r2, [pc, #72]	; (8005dcc <HAL_UARTEx_RxEventCallback+0x94>)
 8005d82:	6013      	str	r3, [r2, #0]

  Kp_angle_pitch = pid_para.Kp_r;
 8005d84:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <HAL_UARTEx_RxEventCallback+0x88>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a11      	ldr	r2, [pc, #68]	; (8005dd0 <HAL_UARTEx_RxEventCallback+0x98>)
 8005d8a:	6013      	str	r3, [r2, #0]
  Ki_angle_pitch = pid_para.Ki_r;
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <HAL_UARTEx_RxEventCallback+0x88>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	4a10      	ldr	r2, [pc, #64]	; (8005dd4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8005d92:	6013      	str	r3, [r2, #0]
  Kd_angle_pitch = pid_para.Kd_r;
 8005d94:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <HAL_UARTEx_RxEventCallback+0x88>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4a0f      	ldr	r2, [pc, #60]	; (8005dd8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8005d9a:	6013      	str	r3, [r2, #0]

  MOTOR_LEFT_OFFSET = pid_para.off_motor_l;
 8005d9c:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <HAL_UARTEx_RxEventCallback+0x88>)
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	4a0e      	ldr	r2, [pc, #56]	; (8005ddc <HAL_UARTEx_RxEventCallback+0xa4>)
 8005da2:	6013      	str	r3, [r2, #0]
  MOTOR_RIGHT_OFFSET = pid_para.off_motor_r;
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <HAL_UARTEx_RxEventCallback+0x88>)
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	4a0d      	ldr	r2, [pc, #52]	; (8005de0 <HAL_UARTEx_RxEventCallback+0xa8>)
 8005daa:	6013      	str	r3, [r2, #0]
//  f_dest_len_r = Size;
}
 8005dac:	bf00      	nop
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20000398 	.word	0x20000398
 8005db8:	2000033c 	.word	0x2000033c
 8005dbc:	200002f8 	.word	0x200002f8
 8005dc0:	200003b8 	.word	0x200003b8
 8005dc4:	200000bc 	.word	0x200000bc
 8005dc8:	200000c0 	.word	0x200000c0
 8005dcc:	200000c4 	.word	0x200000c4
 8005dd0:	200000b0 	.word	0x200000b0
 8005dd4:	200000b4 	.word	0x200000b4
 8005dd8:	200000b8 	.word	0x200000b8
 8005ddc:	200000d4 	.word	0x200000d4
 8005de0:	200000d0 	.word	0x200000d0

08005de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005de8:	bf00      	nop
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <map>:
extern volatile float MOTOR_RIGHT_OFFSET ;
extern volatile float MOTOR_LEFT_OFFSET ;
#endif

static int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
 8005df0:	b490      	push	{r4, r7}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4604      	mov	r4, r0
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4623      	mov	r3, r4
 8005e00:	80fb      	strh	r3, [r7, #6]
 8005e02:	4603      	mov	r3, r0
 8005e04:	80bb      	strh	r3, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	807b      	strh	r3, [r7, #2]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005e0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8005e1c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005e20:	1a8a      	subs	r2, r1, r2
 8005e22:	fb02 f203 	mul.w	r2, r2, r3
 8005e26:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005e2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005e2e:	1acb      	subs	r3, r1, r3
 8005e30:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	883b      	ldrh	r3, [r7, #0]
 8005e38:	4413      	add	r3, r2
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	b21b      	sxth	r3, r3
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc90      	pop	{r4, r7}
 8005e46:	4770      	bx	lr

08005e48 <calculate_motor_output>:

void calculate_motor_output(uint16_t *esc_right, uint16_t *esc_left, uint16_t *servo_right, uint16_t *servo_left, uint16_t throttle_rc, PID_t *pid)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]

    // value PWM
    *esc_right = throttle_rc - pid->PID_pitch_out + MOTOR_RIGHT_OFFSET;
 8005e56:	8b3b      	ldrh	r3, [r7, #24]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fa ff0f 	bl	8000c7c <__aeabi_i2f>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f7fa fe52 	bl	8000b10 <__aeabi_fsub>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	461a      	mov	r2, r3
 8005e70:	4b58      	ldr	r3, [pc, #352]	; (8005fd4 <calculate_motor_output+0x18c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f7fa fe4c 	bl	8000b14 <__addsf3>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fb f92c 	bl	80010dc <__aeabi_f2uiz>
 8005e84:	4603      	mov	r3, r0
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	801a      	strh	r2, [r3, #0]
    *esc_left = throttle_rc + pid->PID_pitch_out + MOTOR_LEFT_OFFSET;
 8005e8c:	8b3b      	ldrh	r3, [r7, #24]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fa fef4 	bl	8000c7c <__aeabi_i2f>
 8005e94:	4602      	mov	r2, r0
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f7fa fe39 	bl	8000b14 <__addsf3>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4b4c      	ldr	r3, [pc, #304]	; (8005fd8 <calculate_motor_output+0x190>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4610      	mov	r0, r2
 8005eae:	f7fa fe31 	bl	8000b14 <__addsf3>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fb f911 	bl	80010dc <__aeabi_f2uiz>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	801a      	strh	r2, [r3, #0]
    *servo_right = 1500 + pid->PID_pitch_out - pid->PID_yaw_out + SERVO_RIGHT_OFFSET;
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	4945      	ldr	r1, [pc, #276]	; (8005fdc <calculate_motor_output+0x194>)
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fa fe23 	bl	8000b14 <__addsf3>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4610      	mov	r0, r2
 8005eda:	f7fa fe19 	bl	8000b10 <__aeabi_fsub>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4b3f      	ldr	r3, [pc, #252]	; (8005fe0 <calculate_motor_output+0x198>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f7fa fe13 	bl	8000b14 <__addsf3>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fb f8f3 	bl	80010dc <__aeabi_f2uiz>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	801a      	strh	r2, [r3, #0]
    *servo_left = 1500 - pid->PID_pitch_out - pid->PID_yaw_out + SERVO_LEFT_OFFSET;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4619      	mov	r1, r3
 8005f04:	4835      	ldr	r0, [pc, #212]	; (8005fdc <calculate_motor_output+0x194>)
 8005f06:	f7fa fe03 	bl	8000b10 <__aeabi_fsub>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f7fa fdfb 	bl	8000b10 <__aeabi_fsub>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b31      	ldr	r3, [pc, #196]	; (8005fe4 <calculate_motor_output+0x19c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f7fa fdf5 	bl	8000b14 <__addsf3>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fb f8d5 	bl	80010dc <__aeabi_f2uiz>
 8005f32:	4603      	mov	r3, r0
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	801a      	strh	r2, [r3, #0]
    if (*esc_right < 1000)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f42:	d203      	bcs.n	8005f4c <calculate_motor_output+0x104>
    {
        *esc_right = 1000;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f4a:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_right > 2000)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f54:	d903      	bls.n	8005f5e <calculate_motor_output+0x116>
    {
        *esc_right = 2000;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f5c:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left < 1000)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f66:	d203      	bcs.n	8005f70 <calculate_motor_output+0x128>
    {
        *esc_left = 1000;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f6e:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left > 2000)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f78:	d903      	bls.n	8005f82 <calculate_motor_output+0x13a>
    {
        *esc_left = 2000;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f80:	801a      	strh	r2, [r3, #0]
    }
    *esc_right = map(*esc_right, 1000, 2000, 1000, 1800); // limited rate of motors
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b218      	sxth	r0, r3
 8005f88:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f92:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f9a:	f7ff ff29 	bl	8005df0 <map>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	801a      	strh	r2, [r3, #0]
    *esc_left = map(*esc_left, 1000, 2000, 930, 1700);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b218      	sxth	r0, r3
 8005fac:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	f240 33a2 	movw	r3, #930	; 0x3a2
 8005fb6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005fba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005fbe:	f7ff ff17 	bl	8005df0 <map>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	801a      	strh	r2, [r3, #0]
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	200000d0 	.word	0x200000d0
 8005fd8:	200000d4 	.word	0x200000d4
 8005fdc:	44bb8000 	.word	0x44bb8000
 8005fe0:	200000c8 	.word	0x200000c8
 8005fe4:	200000cc 	.word	0x200000cc

08005fe8 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af04      	add	r7, sp, #16
 8005fee:	6078      	str	r0, [r7, #4]
	printf("**************************** \r\n");
	printf("MPU9250 STM32 Implementation \r\n");
	printf("**************************** \r\n");
	#endif
	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 8005ff0:	2364      	movs	r3, #100	; 0x64
 8005ff2:	9302      	str	r3, [sp, #8]
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	f107 030f 	add.w	r3, r7, #15
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	2301      	movs	r3, #1
 8006000:	2275      	movs	r2, #117	; 0x75
 8006002:	21d0      	movs	r1, #208	; 0xd0
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fc f877 	bl	80020f8 <HAL_I2C_Mem_Read>

#if DEBUG_MPU
		printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);
#endif

	if (readData == 113) {
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b71      	cmp	r3, #113	; 0x71
 800600e:	d13e      	bne.n	800608e <MPU9255_Init+0xa6>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 8006010:	4921      	ldr	r1, [pc, #132]	; (8006098 <MPU9255_Init+0xb0>)
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 fca4 	bl	8007960 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 8006018:	4a20      	ldr	r2, [pc, #128]	; (800609c <MPU9255_Init+0xb4>)
 800601a:	4921      	ldr	r1, [pc, #132]	; (80060a0 <MPU9255_Init+0xb8>)
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 f869 	bl	80070f4 <calibrateMPU9250>
		HAL_Delay(1000);
 8006022:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006026:	f7fb f8db 	bl	80011e0 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 ff80 	bl	8006f30 <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 8006030:	2322      	movs	r3, #34	; 0x22
 8006032:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 8006034:	2364      	movs	r3, #100	; 0x64
 8006036:	9302      	str	r3, [sp, #8]
 8006038:	2301      	movs	r3, #1
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	f107 030e 	add.w	r3, r7, #14
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	2301      	movs	r3, #1
 8006044:	2237      	movs	r2, #55	; 0x37
 8006046:	21d0      	movs	r1, #208	; 0xd0
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7fb ff5b 	bl	8001f04 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 800604e:	2364      	movs	r3, #100	; 0x64
 8006050:	9302      	str	r3, [sp, #8]
 8006052:	2301      	movs	r3, #1
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	f107 030f 	add.w	r3, r7, #15
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	2301      	movs	r3, #1
 800605e:	2200      	movs	r2, #0
 8006060:	2118      	movs	r1, #24
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fc f848 	bl	80020f8 <HAL_I2C_Mem_Read>
#if (DEBUG_MPU)
		printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);
#endif
		HAL_Delay(1000);
 8006068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800606c:	f7fb f8b8 	bl	80011e0 <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 8006070:	490c      	ldr	r1, [pc, #48]	; (80060a4 <MPU9255_Init+0xbc>)
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fd14 	bl	8006aa0 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 8006078:	4a0b      	ldr	r2, [pc, #44]	; (80060a8 <MPU9255_Init+0xc0>)
 800607a:	490c      	ldr	r1, [pc, #48]	; (80060ac <MPU9255_Init+0xc4>)
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fde5 	bl	8006c4c <calibrateMag>

		HAL_Delay(1000);
 8006082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006086:	f7fb f8ab 	bl	80011e0 <HAL_Delay>
		return 0;
 800608a:	2300      	movs	r3, #0
 800608c:	e000      	b.n	8006090 <MPU9255_Init+0xa8>
	}
	return 1; // Loop forever if communication doesn't happen
 800608e:	2301      	movs	r3, #1
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	200003f8 	.word	0x200003f8
 800609c:	20000100 	.word	0x20000100
 80060a0:	200000f4 	.word	0x200000f4
 80060a4:	200000e8 	.word	0x200000e8
 80060a8:	20000118 	.word	0x20000118
 80060ac:	2000010c 	.word	0x2000010c

080060b0 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 80060b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060b4:	b08b      	sub	sp, #44	; 0x2c
 80060b6:	af06      	add	r7, sp, #24
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 80060bc:	2364      	movs	r3, #100	; 0x64
 80060be:	9302      	str	r3, [sp, #8]
 80060c0:	2301      	movs	r3, #1
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	f107 030f 	add.w	r3, r7, #15
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	2301      	movs	r3, #1
 80060cc:	223a      	movs	r2, #58	; 0x3a
 80060ce:	21d0      	movs	r1, #208	; 0xd0
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fc f811 	bl	80020f8 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8123 	beq.w	8006328 <readAll+0x278>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 80060e2:	4997      	ldr	r1, [pc, #604]	; (8006340 <readAll+0x290>)
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fc29 	bl	800693c <readAccelData>
		getAres();
 80060ea:	f000 fbf9 	bl	80068e0 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 80060ee:	4b94      	ldr	r3, [pc, #592]	; (8006340 <readAll+0x290>)
 80060f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fa fdc1 	bl	8000c7c <__aeabi_i2f>
 80060fa:	4602      	mov	r2, r0
 80060fc:	4b91      	ldr	r3, [pc, #580]	; (8006344 <readAll+0x294>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f7fa fe0e 	bl	8000d24 <__aeabi_fmul>
 8006108:	4603      	mov	r3, r0
 800610a:	461a      	mov	r2, r3
 800610c:	4b8e      	ldr	r3, [pc, #568]	; (8006348 <readAll+0x298>)
 800610e:	601a      	str	r2, [r3, #0]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 8006110:	4b8b      	ldr	r3, [pc, #556]	; (8006340 <readAll+0x290>)
 8006112:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006116:	4618      	mov	r0, r3
 8006118:	f7fa fdb0 	bl	8000c7c <__aeabi_i2f>
 800611c:	4602      	mov	r2, r0
 800611e:	4b89      	ldr	r3, [pc, #548]	; (8006344 <readAll+0x294>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f7fa fdfd 	bl	8000d24 <__aeabi_fmul>
 800612a:	4603      	mov	r3, r0
 800612c:	461a      	mov	r2, r3
 800612e:	4b87      	ldr	r3, [pc, #540]	; (800634c <readAll+0x29c>)
 8006130:	601a      	str	r2, [r3, #0]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 8006132:	4b83      	ldr	r3, [pc, #524]	; (8006340 <readAll+0x290>)
 8006134:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006138:	4618      	mov	r0, r3
 800613a:	f7fa fd9f 	bl	8000c7c <__aeabi_i2f>
 800613e:	4602      	mov	r2, r0
 8006140:	4b80      	ldr	r3, [pc, #512]	; (8006344 <readAll+0x294>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f7fa fdec 	bl	8000d24 <__aeabi_fmul>
 800614c:	4603      	mov	r3, r0
 800614e:	461a      	mov	r2, r3
 8006150:	4b7f      	ldr	r3, [pc, #508]	; (8006350 <readAll+0x2a0>)
 8006152:	601a      	str	r2, [r3, #0]

		DataStruct->AccelX = ax;
 8006154:	4b7c      	ldr	r3, [pc, #496]	; (8006348 <readAll+0x298>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 800615c:	4b7b      	ldr	r3, [pc, #492]	; (800634c <readAll+0x29c>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8006164:	4b7a      	ldr	r3, [pc, #488]	; (8006350 <readAll+0x2a0>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 800616c:	4979      	ldr	r1, [pc, #484]	; (8006354 <readAll+0x2a4>)
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fc17 	bl	80069a2 <readGyroData>
		getGres();
 8006174:	f000 fb82 	bl	800687c <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8006178:	4b76      	ldr	r3, [pc, #472]	; (8006354 <readAll+0x2a4>)
 800617a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800617e:	4618      	mov	r0, r3
 8006180:	f7fa fd7c 	bl	8000c7c <__aeabi_i2f>
 8006184:	4602      	mov	r2, r0
 8006186:	4b74      	ldr	r3, [pc, #464]	; (8006358 <readAll+0x2a8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7fa fdc9 	bl	8000d24 <__aeabi_fmul>
 8006192:	4603      	mov	r3, r0
 8006194:	461a      	mov	r2, r3
 8006196:	4b71      	ldr	r3, [pc, #452]	; (800635c <readAll+0x2ac>)
 8006198:	601a      	str	r2, [r3, #0]
		gy = (float)gyroCount[1]*gRes;
 800619a:	4b6e      	ldr	r3, [pc, #440]	; (8006354 <readAll+0x2a4>)
 800619c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fa fd6b 	bl	8000c7c <__aeabi_i2f>
 80061a6:	4602      	mov	r2, r0
 80061a8:	4b6b      	ldr	r3, [pc, #428]	; (8006358 <readAll+0x2a8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f7fa fdb8 	bl	8000d24 <__aeabi_fmul>
 80061b4:	4603      	mov	r3, r0
 80061b6:	461a      	mov	r2, r3
 80061b8:	4b69      	ldr	r3, [pc, #420]	; (8006360 <readAll+0x2b0>)
 80061ba:	601a      	str	r2, [r3, #0]
		gz = (float)gyroCount[2]*gRes;
 80061bc:	4b65      	ldr	r3, [pc, #404]	; (8006354 <readAll+0x2a4>)
 80061be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fa fd5a 	bl	8000c7c <__aeabi_i2f>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b63      	ldr	r3, [pc, #396]	; (8006358 <readAll+0x2a8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f7fa fda7 	bl	8000d24 <__aeabi_fmul>
 80061d6:	4603      	mov	r3, r0
 80061d8:	461a      	mov	r2, r3
 80061da:	4b62      	ldr	r3, [pc, #392]	; (8006364 <readAll+0x2b4>)
 80061dc:	601a      	str	r2, [r3, #0]

		DataStruct->GyroX = gx;
 80061de:	4b5f      	ldr	r3, [pc, #380]	; (800635c <readAll+0x2ac>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 80061e6:	4b5e      	ldr	r3, [pc, #376]	; (8006360 <readAll+0x2b0>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 80061ee:	4b5d      	ldr	r3, [pc, #372]	; (8006364 <readAll+0x2b4>)
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 80061f6:	495c      	ldr	r1, [pc, #368]	; (8006368 <readAll+0x2b8>)
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fc05 	bl	8006a08 <readMagData>
		getMres();
 80061fe:	f000 fb1f 	bl	8006840 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 8006202:	4b59      	ldr	r3, [pc, #356]	; (8006368 <readAll+0x2b8>)
 8006204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006208:	4618      	mov	r0, r3
 800620a:	f7fa fd37 	bl	8000c7c <__aeabi_i2f>
 800620e:	4602      	mov	r2, r0
 8006210:	4b56      	ldr	r3, [pc, #344]	; (800636c <readAll+0x2bc>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4619      	mov	r1, r3
 8006216:	4610      	mov	r0, r2
 8006218:	f7fa fd84 	bl	8000d24 <__aeabi_fmul>
 800621c:	4603      	mov	r3, r0
 800621e:	461a      	mov	r2, r3
 8006220:	4b53      	ldr	r3, [pc, #332]	; (8006370 <readAll+0x2c0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f7fa fd7c 	bl	8000d24 <__aeabi_fmul>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	4b50      	ldr	r3, [pc, #320]	; (8006374 <readAll+0x2c4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f7fa fc6a 	bl	8000b10 <__aeabi_fsub>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	4b4d      	ldr	r3, [pc, #308]	; (8006378 <readAll+0x2c8>)
 8006242:	601a      	str	r2, [r3, #0]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 8006244:	4b48      	ldr	r3, [pc, #288]	; (8006368 <readAll+0x2b8>)
 8006246:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800624a:	4618      	mov	r0, r3
 800624c:	f7fa fd16 	bl	8000c7c <__aeabi_i2f>
 8006250:	4602      	mov	r2, r0
 8006252:	4b46      	ldr	r3, [pc, #280]	; (800636c <readAll+0x2bc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f7fa fd63 	bl	8000d24 <__aeabi_fmul>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	4b43      	ldr	r3, [pc, #268]	; (8006370 <readAll+0x2c0>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f7fa fd5b 	bl	8000d24 <__aeabi_fmul>
 800626e:	4603      	mov	r3, r0
 8006270:	461a      	mov	r2, r3
 8006272:	4b40      	ldr	r3, [pc, #256]	; (8006374 <readAll+0x2c4>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f7fa fc49 	bl	8000b10 <__aeabi_fsub>
 800627e:	4603      	mov	r3, r0
 8006280:	461a      	mov	r2, r3
 8006282:	4b3e      	ldr	r3, [pc, #248]	; (800637c <readAll+0x2cc>)
 8006284:	601a      	str	r2, [r3, #0]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 8006286:	4b38      	ldr	r3, [pc, #224]	; (8006368 <readAll+0x2b8>)
 8006288:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800628c:	4618      	mov	r0, r3
 800628e:	f7fa fcf5 	bl	8000c7c <__aeabi_i2f>
 8006292:	4602      	mov	r2, r0
 8006294:	4b35      	ldr	r3, [pc, #212]	; (800636c <readAll+0x2bc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f7fa fd42 	bl	8000d24 <__aeabi_fmul>
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	4b32      	ldr	r3, [pc, #200]	; (8006370 <readAll+0x2c0>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	4619      	mov	r1, r3
 80062aa:	4610      	mov	r0, r2
 80062ac:	f7fa fd3a 	bl	8000d24 <__aeabi_fmul>
 80062b0:	4603      	mov	r3, r0
 80062b2:	461a      	mov	r2, r3
 80062b4:	4b2f      	ldr	r3, [pc, #188]	; (8006374 <readAll+0x2c4>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f7fa fc28 	bl	8000b10 <__aeabi_fsub>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	4b2e      	ldr	r3, [pc, #184]	; (8006380 <readAll+0x2d0>)
 80062c6:	601a      	str	r2, [r3, #0]
		mx *= magScale[0];
 80062c8:	4b2e      	ldr	r3, [pc, #184]	; (8006384 <readAll+0x2d4>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <readAll+0x2c8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4619      	mov	r1, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	f7fa fd26 	bl	8000d24 <__aeabi_fmul>
 80062d8:	4603      	mov	r3, r0
 80062da:	461a      	mov	r2, r3
 80062dc:	4b26      	ldr	r3, [pc, #152]	; (8006378 <readAll+0x2c8>)
 80062de:	601a      	str	r2, [r3, #0]
		my *= magScale[1];
 80062e0:	4b28      	ldr	r3, [pc, #160]	; (8006384 <readAll+0x2d4>)
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	4b25      	ldr	r3, [pc, #148]	; (800637c <readAll+0x2cc>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f7fa fd1a 	bl	8000d24 <__aeabi_fmul>
 80062f0:	4603      	mov	r3, r0
 80062f2:	461a      	mov	r2, r3
 80062f4:	4b21      	ldr	r3, [pc, #132]	; (800637c <readAll+0x2cc>)
 80062f6:	601a      	str	r2, [r3, #0]
		mz *= magScale[2];
 80062f8:	4b22      	ldr	r3, [pc, #136]	; (8006384 <readAll+0x2d4>)
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	4b20      	ldr	r3, [pc, #128]	; (8006380 <readAll+0x2d0>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	f7fa fd0e 	bl	8000d24 <__aeabi_fmul>
 8006308:	4603      	mov	r3, r0
 800630a:	461a      	mov	r2, r3
 800630c:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <readAll+0x2d0>)
 800630e:	601a      	str	r2, [r3, #0]

		DataStruct->MagX = mx;
 8006310:	4b19      	ldr	r3, [pc, #100]	; (8006378 <readAll+0x2c8>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 8006318:	4b18      	ldr	r3, [pc, #96]	; (800637c <readAll+0x2cc>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8006320:	4b17      	ldr	r3, [pc, #92]	; (8006380 <readAll+0x2d0>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8006328:	f7fa ff50 	bl	80011cc <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	4b16      	ldr	r3, [pc, #88]	; (8006388 <readAll+0x2d8>)
 8006330:	601a      	str	r2, [r3, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <readAll+0x2d8>)
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4b15      	ldr	r3, [pc, #84]	; (800638c <readAll+0x2dc>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	4618      	mov	r0, r3
 800633e:	e027      	b.n	8006390 <readAll+0x2e0>
 8006340:	200003f0 	.word	0x200003f0
 8006344:	2000042c 	.word	0x2000042c
 8006348:	20000428 	.word	0x20000428
 800634c:	20000470 	.word	0x20000470
 8006350:	20000414 	.word	0x20000414
 8006354:	20000418 	.word	0x20000418
 8006358:	20000448 	.word	0x20000448
 800635c:	2000046c 	.word	0x2000046c
 8006360:	20000410 	.word	0x20000410
 8006364:	20000440 	.word	0x20000440
 8006368:	20000458 	.word	0x20000458
 800636c:	20000468 	.word	0x20000468
 8006370:	200000e8 	.word	0x200000e8
 8006374:	2000010c 	.word	0x2000010c
 8006378:	20000474 	.word	0x20000474
 800637c:	20000420 	.word	0x20000420
 8006380:	2000044c 	.word	0x2000044c
 8006384:	20000118 	.word	0x20000118
 8006388:	20000130 	.word	0x20000130
 800638c:	2000012c 	.word	0x2000012c
 8006390:	f7fa fc70 	bl	8000c74 <__aeabi_ui2f>
 8006394:	4603      	mov	r3, r0
 8006396:	499c      	ldr	r1, [pc, #624]	; (8006608 <readAll+0x558>)
 8006398:	4618      	mov	r0, r3
 800639a:	f7fa fd77 	bl	8000e8c <__aeabi_fdiv>
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	4b9a      	ldr	r3, [pc, #616]	; (800660c <readAll+0x55c>)
 80063a4:	601a      	str	r2, [r3, #0]
	lastUpdate = Now;
 80063a6:	4b9a      	ldr	r3, [pc, #616]	; (8006610 <readAll+0x560>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a9a      	ldr	r2, [pc, #616]	; (8006614 <readAll+0x564>)
 80063ac:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 80063ae:	4b9a      	ldr	r3, [pc, #616]	; (8006618 <readAll+0x568>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b96      	ldr	r3, [pc, #600]	; (800660c <readAll+0x55c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4619      	mov	r1, r3
 80063b8:	4610      	mov	r0, r2
 80063ba:	f7fa fbab 	bl	8000b14 <__addsf3>
 80063be:	4603      	mov	r3, r0
 80063c0:	461a      	mov	r2, r3
 80063c2:	4b95      	ldr	r3, [pc, #596]	; (8006618 <readAll+0x568>)
 80063c4:	601a      	str	r2, [r3, #0]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 80063c6:	4b95      	ldr	r3, [pc, #596]	; (800661c <readAll+0x56c>)
 80063c8:	681c      	ldr	r4, [r3, #0]
 80063ca:	4b95      	ldr	r3, [pc, #596]	; (8006620 <readAll+0x570>)
 80063cc:	681d      	ldr	r5, [r3, #0]
 80063ce:	4b95      	ldr	r3, [pc, #596]	; (8006624 <readAll+0x574>)
 80063d0:	681e      	ldr	r6, [r3, #0]
 80063d2:	4b95      	ldr	r3, [pc, #596]	; (8006628 <readAll+0x578>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fa f81e 	bl	8000418 <__aeabi_f2d>
 80063dc:	a388      	add	r3, pc, #544	; (adr r3, 8006600 <readAll+0x550>)
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	f7fa f871 	bl	80004c8 <__aeabi_dmul>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4610      	mov	r0, r2
 80063ec:	4619      	mov	r1, r3
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	4b8e      	ldr	r3, [pc, #568]	; (800662c <readAll+0x57c>)
 80063f4:	f7fa f992 	bl	800071c <__aeabi_ddiv>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4610      	mov	r0, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	f7fa fb32 	bl	8000a68 <__aeabi_d2f>
 8006404:	4681      	mov	r9, r0
 8006406:	4b8a      	ldr	r3, [pc, #552]	; (8006630 <readAll+0x580>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f7fa f804 	bl	8000418 <__aeabi_f2d>
 8006410:	a37b      	add	r3, pc, #492	; (adr r3, 8006600 <readAll+0x550>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f7fa f857 	bl	80004c8 <__aeabi_dmul>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4610      	mov	r0, r2
 8006420:	4619      	mov	r1, r3
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	4b81      	ldr	r3, [pc, #516]	; (800662c <readAll+0x57c>)
 8006428:	f7fa f978 	bl	800071c <__aeabi_ddiv>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4610      	mov	r0, r2
 8006432:	4619      	mov	r1, r3
 8006434:	f7fa fb18 	bl	8000a68 <__aeabi_d2f>
 8006438:	4680      	mov	r8, r0
 800643a:	4b7e      	ldr	r3, [pc, #504]	; (8006634 <readAll+0x584>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f7f9 ffea 	bl	8000418 <__aeabi_f2d>
 8006444:	a36e      	add	r3, pc, #440	; (adr r3, 8006600 <readAll+0x550>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7fa f83d 	bl	80004c8 <__aeabi_dmul>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4610      	mov	r0, r2
 8006454:	4619      	mov	r1, r3
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	4b74      	ldr	r3, [pc, #464]	; (800662c <readAll+0x57c>)
 800645c:	f7fa f95e 	bl	800071c <__aeabi_ddiv>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4610      	mov	r0, r2
 8006466:	4619      	mov	r1, r3
 8006468:	f7fa fafe 	bl	8000a68 <__aeabi_d2f>
 800646c:	4b72      	ldr	r3, [pc, #456]	; (8006638 <readAll+0x588>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a72      	ldr	r2, [pc, #456]	; (800663c <readAll+0x58c>)
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	4972      	ldr	r1, [pc, #456]	; (8006640 <readAll+0x590>)
 8006476:	6809      	ldr	r1, [r1, #0]
 8006478:	9104      	str	r1, [sp, #16]
 800647a:	9203      	str	r2, [sp, #12]
 800647c:	9302      	str	r3, [sp, #8]
 800647e:	9001      	str	r0, [sp, #4]
 8006480:	f8cd 8000 	str.w	r8, [sp]
 8006484:	464b      	mov	r3, r9
 8006486:	4632      	mov	r2, r6
 8006488:	4629      	mov	r1, r5
 800648a:	4620      	mov	r0, r4
 800648c:	f001 ff44 	bl	8008318 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8006490:	4b6c      	ldr	r3, [pc, #432]	; (8006644 <readAll+0x594>)
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	4b6b      	ldr	r3, [pc, #428]	; (8006644 <readAll+0x594>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	4619      	mov	r1, r3
 800649a:	4610      	mov	r0, r2
 800649c:	f7fa fc42 	bl	8000d24 <__aeabi_fmul>
 80064a0:	4603      	mov	r3, r0
 80064a2:	461c      	mov	r4, r3
 80064a4:	4b67      	ldr	r3, [pc, #412]	; (8006644 <readAll+0x594>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	4b66      	ldr	r3, [pc, #408]	; (8006644 <readAll+0x594>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f7fa fc38 	bl	8000d24 <__aeabi_fmul>
 80064b4:	4603      	mov	r3, r0
 80064b6:	4619      	mov	r1, r3
 80064b8:	4620      	mov	r0, r4
 80064ba:	f7fa fb2b 	bl	8000b14 <__addsf3>
 80064be:	4603      	mov	r3, r0
 80064c0:	4619      	mov	r1, r3
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fa fb26 	bl	8000b14 <__addsf3>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	4b5e      	ldr	r3, [pc, #376]	; (8006648 <readAll+0x598>)
 80064ce:	601a      	str	r2, [r3, #0]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 80064d0:	4b5c      	ldr	r3, [pc, #368]	; (8006644 <readAll+0x594>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b5b      	ldr	r3, [pc, #364]	; (8006644 <readAll+0x594>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f7fa fc22 	bl	8000d24 <__aeabi_fmul>
 80064e0:	4603      	mov	r3, r0
 80064e2:	461c      	mov	r4, r3
 80064e4:	4b57      	ldr	r3, [pc, #348]	; (8006644 <readAll+0x594>)
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	4b56      	ldr	r3, [pc, #344]	; (8006644 <readAll+0x594>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f7fa fc18 	bl	8000d24 <__aeabi_fmul>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4619      	mov	r1, r3
 80064f8:	4620      	mov	r0, r4
 80064fa:	f7fa fb0b 	bl	8000b14 <__addsf3>
 80064fe:	4603      	mov	r3, r0
 8006500:	461c      	mov	r4, r3
 8006502:	4b50      	ldr	r3, [pc, #320]	; (8006644 <readAll+0x594>)
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <readAll+0x594>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f7fa fc09 	bl	8000d24 <__aeabi_fmul>
 8006512:	4603      	mov	r3, r0
 8006514:	4619      	mov	r1, r3
 8006516:	4620      	mov	r0, r4
 8006518:	f7fa fafa 	bl	8000b10 <__aeabi_fsub>
 800651c:	4603      	mov	r3, r0
 800651e:	461c      	mov	r4, r3
 8006520:	4b48      	ldr	r3, [pc, #288]	; (8006644 <readAll+0x594>)
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	4b47      	ldr	r3, [pc, #284]	; (8006644 <readAll+0x594>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f7fa fbfa 	bl	8000d24 <__aeabi_fmul>
 8006530:	4603      	mov	r3, r0
 8006532:	4619      	mov	r1, r3
 8006534:	4620      	mov	r0, r4
 8006536:	f7fa faeb 	bl	8000b10 <__aeabi_fsub>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	4b43      	ldr	r3, [pc, #268]	; (800664c <readAll+0x59c>)
 8006540:	601a      	str	r2, [r3, #0]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 8006542:	4b40      	ldr	r3, [pc, #256]	; (8006644 <readAll+0x594>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <readAll+0x594>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f7fa fbe9 	bl	8000d24 <__aeabi_fmul>
 8006552:	4603      	mov	r3, r0
 8006554:	461c      	mov	r4, r3
 8006556:	4b3b      	ldr	r3, [pc, #236]	; (8006644 <readAll+0x594>)
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	4b3a      	ldr	r3, [pc, #232]	; (8006644 <readAll+0x594>)
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	4619      	mov	r1, r3
 8006560:	4610      	mov	r0, r2
 8006562:	f7fa fbdf 	bl	8000d24 <__aeabi_fmul>
 8006566:	4603      	mov	r3, r0
 8006568:	4619      	mov	r1, r3
 800656a:	4620      	mov	r0, r4
 800656c:	f7fa fad2 	bl	8000b14 <__addsf3>
 8006570:	4603      	mov	r3, r0
 8006572:	4619      	mov	r1, r3
 8006574:	4618      	mov	r0, r3
 8006576:	f7fa facd 	bl	8000b14 <__addsf3>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	4b34      	ldr	r3, [pc, #208]	; (8006650 <readAll+0x5a0>)
 8006580:	601a      	str	r2, [r3, #0]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 8006582:	4b30      	ldr	r3, [pc, #192]	; (8006644 <readAll+0x594>)
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	4b2f      	ldr	r3, [pc, #188]	; (8006644 <readAll+0x594>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	4619      	mov	r1, r3
 800658c:	4610      	mov	r0, r2
 800658e:	f7fa fbc9 	bl	8000d24 <__aeabi_fmul>
 8006592:	4603      	mov	r3, r0
 8006594:	461c      	mov	r4, r3
 8006596:	4b2b      	ldr	r3, [pc, #172]	; (8006644 <readAll+0x594>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <readAll+0x594>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7fa fbbf 	bl	8000d24 <__aeabi_fmul>
 80065a6:	4603      	mov	r3, r0
 80065a8:	4619      	mov	r1, r3
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7fa fab0 	bl	8000b10 <__aeabi_fsub>
 80065b0:	4603      	mov	r3, r0
 80065b2:	4619      	mov	r1, r3
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fa faad 	bl	8000b14 <__addsf3>
 80065ba:	4603      	mov	r3, r0
 80065bc:	461a      	mov	r2, r3
 80065be:	4b25      	ldr	r3, [pc, #148]	; (8006654 <readAll+0x5a4>)
 80065c0:	601a      	str	r2, [r3, #0]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 80065c2:	4b20      	ldr	r3, [pc, #128]	; (8006644 <readAll+0x594>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b1f      	ldr	r3, [pc, #124]	; (8006644 <readAll+0x594>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f7fa fba9 	bl	8000d24 <__aeabi_fmul>
 80065d2:	4603      	mov	r3, r0
 80065d4:	461c      	mov	r4, r3
 80065d6:	4b1b      	ldr	r3, [pc, #108]	; (8006644 <readAll+0x594>)
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	4b1a      	ldr	r3, [pc, #104]	; (8006644 <readAll+0x594>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f7fa fb9f 	bl	8000d24 <__aeabi_fmul>
 80065e6:	4603      	mov	r3, r0
 80065e8:	4619      	mov	r1, r3
 80065ea:	4620      	mov	r0, r4
 80065ec:	f7fa fa90 	bl	8000b10 <__aeabi_fsub>
 80065f0:	4603      	mov	r3, r0
 80065f2:	461c      	mov	r4, r3
 80065f4:	4b13      	ldr	r3, [pc, #76]	; (8006644 <readAll+0x594>)
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	4b12      	ldr	r3, [pc, #72]	; (8006644 <readAll+0x594>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	e02c      	b.n	8006658 <readAll+0x5a8>
 80065fe:	bf00      	nop
 8006600:	35f80991 	.word	0x35f80991
 8006604:	40092492 	.word	0x40092492
 8006608:	447a0000 	.word	0x447a0000
 800660c:	20000124 	.word	0x20000124
 8006610:	20000130 	.word	0x20000130
 8006614:	2000012c 	.word	0x2000012c
 8006618:	20000128 	.word	0x20000128
 800661c:	20000428 	.word	0x20000428
 8006620:	20000470 	.word	0x20000470
 8006624:	20000414 	.word	0x20000414
 8006628:	2000046c 	.word	0x2000046c
 800662c:	40668000 	.word	0x40668000
 8006630:	20000410 	.word	0x20000410
 8006634:	20000440 	.word	0x20000440
 8006638:	20000420 	.word	0x20000420
 800663c:	20000474 	.word	0x20000474
 8006640:	2000044c 	.word	0x2000044c
 8006644:	20000010 	.word	0x20000010
 8006648:	20000430 	.word	0x20000430
 800664c:	20000434 	.word	0x20000434
 8006650:	20000438 	.word	0x20000438
 8006654:	2000043c 	.word	0x2000043c
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f7fa fb62 	bl	8000d24 <__aeabi_fmul>
 8006660:	4603      	mov	r3, r0
 8006662:	4619      	mov	r1, r3
 8006664:	4620      	mov	r0, r4
 8006666:	f7fa fa53 	bl	8000b10 <__aeabi_fsub>
 800666a:	4603      	mov	r3, r0
 800666c:	461c      	mov	r4, r3
 800666e:	4b62      	ldr	r3, [pc, #392]	; (80067f8 <readAll+0x748>)
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	4b61      	ldr	r3, [pc, #388]	; (80067f8 <readAll+0x748>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7fa fb53 	bl	8000d24 <__aeabi_fmul>
 800667e:	4603      	mov	r3, r0
 8006680:	4619      	mov	r1, r3
 8006682:	4620      	mov	r0, r4
 8006684:	f7fa fa46 	bl	8000b14 <__addsf3>
 8006688:	4603      	mov	r3, r0
 800668a:	461a      	mov	r2, r3
 800668c:	4b5b      	ldr	r3, [pc, #364]	; (80067fc <readAll+0x74c>)
 800668e:	601a      	str	r2, [r3, #0]

	pitch = -asinf(a32);
 8006690:	4b5b      	ldr	r3, [pc, #364]	; (8006800 <readAll+0x750>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4618      	mov	r0, r3
 8006696:	f004 fbd7 	bl	800ae48 <asinf>
 800669a:	4603      	mov	r3, r0
 800669c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80066a0:	4a58      	ldr	r2, [pc, #352]	; (8006804 <readAll+0x754>)
 80066a2:	6013      	str	r3, [r2, #0]
	roll  = atan2f(a31, a33);
 80066a4:	4b58      	ldr	r3, [pc, #352]	; (8006808 <readAll+0x758>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	4b54      	ldr	r3, [pc, #336]	; (80067fc <readAll+0x74c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4619      	mov	r1, r3
 80066ae:	4610      	mov	r0, r2
 80066b0:	f004 fc18 	bl	800aee4 <atan2f>
 80066b4:	4602      	mov	r2, r0
 80066b6:	4b55      	ldr	r3, [pc, #340]	; (800680c <readAll+0x75c>)
 80066b8:	601a      	str	r2, [r3, #0]
	yaw   = atan2f(a12, a22);
 80066ba:	4b55      	ldr	r3, [pc, #340]	; (8006810 <readAll+0x760>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b55      	ldr	r3, [pc, #340]	; (8006814 <readAll+0x764>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f004 fc0d 	bl	800aee4 <atan2f>
 80066ca:	4602      	mov	r2, r0
 80066cc:	4b52      	ldr	r3, [pc, #328]	; (8006818 <readAll+0x768>)
 80066ce:	601a      	str	r2, [r3, #0]
	pitch *= 180.0f / PI;
 80066d0:	4b4c      	ldr	r3, [pc, #304]	; (8006804 <readAll+0x754>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7f9 fe9f 	bl	8000418 <__aeabi_f2d>
 80066da:	a345      	add	r3, pc, #276	; (adr r3, 80067f0 <readAll+0x740>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f7f9 fef2 	bl	80004c8 <__aeabi_dmul>
 80066e4:	4603      	mov	r3, r0
 80066e6:	460c      	mov	r4, r1
 80066e8:	4618      	mov	r0, r3
 80066ea:	4621      	mov	r1, r4
 80066ec:	f7fa f9bc 	bl	8000a68 <__aeabi_d2f>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4b44      	ldr	r3, [pc, #272]	; (8006804 <readAll+0x754>)
 80066f4:	601a      	str	r2, [r3, #0]
	yaw   *= 180.0f / PI;
 80066f6:	4b48      	ldr	r3, [pc, #288]	; (8006818 <readAll+0x768>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7f9 fe8c 	bl	8000418 <__aeabi_f2d>
 8006700:	a33b      	add	r3, pc, #236	; (adr r3, 80067f0 <readAll+0x740>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f7f9 fedf 	bl	80004c8 <__aeabi_dmul>
 800670a:	4603      	mov	r3, r0
 800670c:	460c      	mov	r4, r1
 800670e:	4618      	mov	r0, r3
 8006710:	4621      	mov	r1, r4
 8006712:	f7fa f9a9 	bl	8000a68 <__aeabi_d2f>
 8006716:	4602      	mov	r2, r0
 8006718:	4b3f      	ldr	r3, [pc, #252]	; (8006818 <readAll+0x768>)
 800671a:	601a      	str	r2, [r3, #0]
	yaw   += 5.53f; // Declination
 800671c:	4b3e      	ldr	r3, [pc, #248]	; (8006818 <readAll+0x768>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	493e      	ldr	r1, [pc, #248]	; (800681c <readAll+0x76c>)
 8006722:	4618      	mov	r0, r3
 8006724:	f7fa f9f6 	bl	8000b14 <__addsf3>
 8006728:	4603      	mov	r3, r0
 800672a:	461a      	mov	r2, r3
 800672c:	4b3a      	ldr	r3, [pc, #232]	; (8006818 <readAll+0x768>)
 800672e:	601a      	str	r2, [r3, #0]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 8006730:	4b39      	ldr	r3, [pc, #228]	; (8006818 <readAll+0x768>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f04f 0100 	mov.w	r1, #0
 8006738:	4618      	mov	r0, r3
 800673a:	f7fa fc91 	bl	8001060 <__aeabi_fcmplt>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d009      	beq.n	8006758 <readAll+0x6a8>
 8006744:	4b34      	ldr	r3, [pc, #208]	; (8006818 <readAll+0x768>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4935      	ldr	r1, [pc, #212]	; (8006820 <readAll+0x770>)
 800674a:	4618      	mov	r0, r3
 800674c:	f7fa f9e2 	bl	8000b14 <__addsf3>
 8006750:	4603      	mov	r3, r0
 8006752:	461a      	mov	r2, r3
 8006754:	4b30      	ldr	r3, [pc, #192]	; (8006818 <readAll+0x768>)
 8006756:	601a      	str	r2, [r3, #0]
	roll  *= 180.0f / PI;
 8006758:	4b2c      	ldr	r3, [pc, #176]	; (800680c <readAll+0x75c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4618      	mov	r0, r3
 800675e:	f7f9 fe5b 	bl	8000418 <__aeabi_f2d>
 8006762:	a323      	add	r3, pc, #140	; (adr r3, 80067f0 <readAll+0x740>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f7f9 feae 	bl	80004c8 <__aeabi_dmul>
 800676c:	4603      	mov	r3, r0
 800676e:	460c      	mov	r4, r1
 8006770:	4618      	mov	r0, r3
 8006772:	4621      	mov	r1, r4
 8006774:	f7fa f978 	bl	8000a68 <__aeabi_d2f>
 8006778:	4602      	mov	r2, r0
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <readAll+0x75c>)
 800677c:	601a      	str	r2, [r3, #0]
	lin_ax = ax + a31;
 800677e:	4b29      	ldr	r3, [pc, #164]	; (8006824 <readAll+0x774>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b21      	ldr	r3, [pc, #132]	; (8006808 <readAll+0x758>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fa f9c3 	bl	8000b14 <__addsf3>
 800678e:	4603      	mov	r3, r0
 8006790:	461a      	mov	r2, r3
 8006792:	4b25      	ldr	r3, [pc, #148]	; (8006828 <readAll+0x778>)
 8006794:	601a      	str	r2, [r3, #0]
	lin_ay = ay + a32;
 8006796:	4b25      	ldr	r3, [pc, #148]	; (800682c <readAll+0x77c>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b19      	ldr	r3, [pc, #100]	; (8006800 <readAll+0x750>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f7fa f9b7 	bl	8000b14 <__addsf3>
 80067a6:	4603      	mov	r3, r0
 80067a8:	461a      	mov	r2, r3
 80067aa:	4b21      	ldr	r3, [pc, #132]	; (8006830 <readAll+0x780>)
 80067ac:	601a      	str	r2, [r3, #0]
	lin_az = az - a33;
 80067ae:	4b21      	ldr	r3, [pc, #132]	; (8006834 <readAll+0x784>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b12      	ldr	r3, [pc, #72]	; (80067fc <readAll+0x74c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f7fa f9a9 	bl	8000b10 <__aeabi_fsub>
 80067be:	4603      	mov	r3, r0
 80067c0:	461a      	mov	r2, r3
 80067c2:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <readAll+0x788>)
 80067c4:	601a      	str	r2, [r3, #0]


	DataStruct->yaw = yaw;
 80067c6:	4b14      	ldr	r3, [pc, #80]	; (8006818 <readAll+0x768>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 80067ce:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <readAll+0x754>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 80067d6:	4b0d      	ldr	r3, [pc, #52]	; (800680c <readAll+0x75c>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	629a      	str	r2, [r3, #40]	; 0x28
#if DEBUG_MPU
//	printf("Roll: %f		Pitch: %f		Yaz: %f\n",roll,pitch,yaw);
#endif
	sum = 0;
 80067de:	4b17      	ldr	r3, [pc, #92]	; (800683c <readAll+0x78c>)
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
	}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067f0:	d0051a32 	.word	0xd0051a32
 80067f4:	404ca2e8 	.word	0x404ca2e8
 80067f8:	20000010 	.word	0x20000010
 80067fc:	200003ec 	.word	0x200003ec
 8006800:	2000043c 	.word	0x2000043c
 8006804:	20000460 	.word	0x20000460
 8006808:	20000438 	.word	0x20000438
 800680c:	20000464 	.word	0x20000464
 8006810:	20000430 	.word	0x20000430
 8006814:	20000434 	.word	0x20000434
 8006818:	20000454 	.word	0x20000454
 800681c:	40b0f5c3 	.word	0x40b0f5c3
 8006820:	43b40000 	.word	0x43b40000
 8006824:	20000428 	.word	0x20000428
 8006828:	20000444 	.word	0x20000444
 800682c:	20000470 	.word	0x20000470
 8006830:	20000424 	.word	0x20000424
 8006834:	20000414 	.word	0x20000414
 8006838:	20000450 	.word	0x20000450
 800683c:	20000128 	.word	0x20000128

08006840 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  switch (Mscale)
 8006844:	4b09      	ldr	r3, [pc, #36]	; (800686c <getMres+0x2c>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <getMres+0x12>
 800684c:	2b01      	cmp	r3, #1
 800684e:	d004      	beq.n	800685a <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8006850:	e007      	b.n	8006862 <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 8006852:	4b07      	ldr	r3, [pc, #28]	; (8006870 <getMres+0x30>)
 8006854:	4a07      	ldr	r2, [pc, #28]	; (8006874 <getMres+0x34>)
 8006856:	601a      	str	r2, [r3, #0]
          break;
 8006858:	e003      	b.n	8006862 <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <getMres+0x30>)
 800685c:	4a06      	ldr	r2, [pc, #24]	; (8006878 <getMres+0x38>)
 800685e:	601a      	str	r2, [r3, #0]
          break;
 8006860:	bf00      	nop
}
 8006862:	bf00      	nop
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000007 	.word	0x20000007
 8006870:	20000468 	.word	0x20000468
 8006874:	40bfebff 	.word	0x40bfebff
 8006878:	3fbfebff 	.word	0x3fbfebff

0800687c <getGres>:

void getGres() {
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  switch (Gscale)
 8006880:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <getGres+0x4c>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d81b      	bhi.n	80068c0 <getGres+0x44>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <getGres+0x14>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068a1 	.word	0x080068a1
 8006894:	080068a9 	.word	0x080068a9
 8006898:	080068b1 	.word	0x080068b1
 800689c:	080068b9 	.word	0x080068b9
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <getGres+0x50>)
 80068a2:	4a0b      	ldr	r2, [pc, #44]	; (80068d0 <getGres+0x54>)
 80068a4:	601a      	str	r2, [r3, #0]
          break;
 80068a6:	e00b      	b.n	80068c0 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 80068a8:	4b08      	ldr	r3, [pc, #32]	; (80068cc <getGres+0x50>)
 80068aa:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <getGres+0x58>)
 80068ac:	601a      	str	r2, [r3, #0]
          break;
 80068ae:	e007      	b.n	80068c0 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <getGres+0x50>)
 80068b2:	4a09      	ldr	r2, [pc, #36]	; (80068d8 <getGres+0x5c>)
 80068b4:	601a      	str	r2, [r3, #0]
          break;
 80068b6:	e003      	b.n	80068c0 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 80068b8:	4b04      	ldr	r3, [pc, #16]	; (80068cc <getGres+0x50>)
 80068ba:	4a08      	ldr	r2, [pc, #32]	; (80068dc <getGres+0x60>)
 80068bc:	601a      	str	r2, [r3, #0]
          break;
 80068be:	bf00      	nop
  }
}
 80068c0:	bf00      	nop
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr
 80068c8:	20000005 	.word	0x20000005
 80068cc:	20000448 	.word	0x20000448
 80068d0:	3bfa0000 	.word	0x3bfa0000
 80068d4:	3c7a0000 	.word	0x3c7a0000
 80068d8:	3cfa0000 	.word	0x3cfa0000
 80068dc:	3d7a0000 	.word	0x3d7a0000

080068e0 <getAres>:

void getAres() {
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  switch (Ascale)
 80068e4:	4b13      	ldr	r3, [pc, #76]	; (8006934 <getAres+0x54>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d81f      	bhi.n	800692c <getAres+0x4c>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <getAres+0x14>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006905 	.word	0x08006905
 80068f8:	0800690f 	.word	0x0800690f
 80068fc:	08006919 	.word	0x08006919
 8006900:	08006923 	.word	0x08006923
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 8006904:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <getAres+0x58>)
 8006906:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800690a:	601a      	str	r2, [r3, #0]
          break;
 800690c:	e00e      	b.n	800692c <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 800690e:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <getAres+0x58>)
 8006910:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8006914:	601a      	str	r2, [r3, #0]
          break;
 8006916:	e009      	b.n	800692c <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <getAres+0x58>)
 800691a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800691e:	601a      	str	r2, [r3, #0]
          break;
 8006920:	e004      	b.n	800692c <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <getAres+0x58>)
 8006924:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8006928:	601a      	str	r2, [r3, #0]
          break;
 800692a:	bf00      	nop
  }
}
 800692c:	bf00      	nop
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr
 8006934:	20000006 	.word	0x20000006
 8006938:	2000042c 	.word	0x2000042c

0800693c <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af04      	add	r7, sp, #16
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8006946:	2364      	movs	r3, #100	; 0x64
 8006948:	9302      	str	r3, [sp, #8]
 800694a:	2306      	movs	r3, #6
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	f107 0308 	add.w	r3, r7, #8
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	2301      	movs	r3, #1
 8006956:	223b      	movs	r2, #59	; 0x3b
 8006958:	21d0      	movs	r1, #208	; 0xd0
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fb fbcc 	bl	80020f8 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8006960:	7a3b      	ldrb	r3, [r7, #8]
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	b21a      	sxth	r2, r3
 8006966:	7a7b      	ldrb	r3, [r7, #9]
 8006968:	b21b      	sxth	r3, r3
 800696a:	4313      	orrs	r3, r2
 800696c:	b21a      	sxth	r2, r3
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8006972:	7abb      	ldrb	r3, [r7, #10]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	b219      	sxth	r1, r3
 8006978:	7afb      	ldrb	r3, [r7, #11]
 800697a:	b21a      	sxth	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	3302      	adds	r3, #2
 8006980:	430a      	orrs	r2, r1
 8006982:	b212      	sxth	r2, r2
 8006984:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8006986:	7b3b      	ldrb	r3, [r7, #12]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	b219      	sxth	r1, r3
 800698c:	7b7b      	ldrb	r3, [r7, #13]
 800698e:	b21a      	sxth	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	3304      	adds	r3, #4
 8006994:	430a      	orrs	r2, r1
 8006996:	b212      	sxth	r2, r2
 8006998:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b088      	sub	sp, #32
 80069a6:	af04      	add	r7, sp, #16
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 80069ac:	2364      	movs	r3, #100	; 0x64
 80069ae:	9302      	str	r3, [sp, #8]
 80069b0:	2306      	movs	r3, #6
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	f107 0308 	add.w	r3, r7, #8
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	2301      	movs	r3, #1
 80069bc:	2243      	movs	r2, #67	; 0x43
 80069be:	21d0      	movs	r1, #208	; 0xd0
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fb fb99 	bl	80020f8 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80069c6:	7a3b      	ldrb	r3, [r7, #8]
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	b21a      	sxth	r2, r3
 80069cc:	7a7b      	ldrb	r3, [r7, #9]
 80069ce:	b21b      	sxth	r3, r3
 80069d0:	4313      	orrs	r3, r2
 80069d2:	b21a      	sxth	r2, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 80069d8:	7abb      	ldrb	r3, [r7, #10]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	b219      	sxth	r1, r3
 80069de:	7afb      	ldrb	r3, [r7, #11]
 80069e0:	b21a      	sxth	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	3302      	adds	r3, #2
 80069e6:	430a      	orrs	r2, r1
 80069e8:	b212      	sxth	r2, r2
 80069ea:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 80069ec:	7b3b      	ldrb	r3, [r7, #12]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	b219      	sxth	r1, r3
 80069f2:	7b7b      	ldrb	r3, [r7, #13]
 80069f4:	b21a      	sxth	r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	3304      	adds	r3, #4
 80069fa:	430a      	orrs	r2, r1
 80069fc:	b212      	sxth	r2, r2
 80069fe:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	; 0x28
 8006a0c:	af04      	add	r7, sp, #16
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 8006a12:	2364      	movs	r3, #100	; 0x64
 8006a14:	9302      	str	r3, [sp, #8]
 8006a16:	2301      	movs	r3, #1
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	f107 0316 	add.w	r3, r7, #22
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	2301      	movs	r3, #1
 8006a22:	2202      	movs	r2, #2
 8006a24:	2118      	movs	r1, #24
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fb fb66 	bl	80020f8 <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 8006a2c:	7dbb      	ldrb	r3, [r7, #22]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d030      	beq.n	8006a98 <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 8006a36:	2364      	movs	r3, #100	; 0x64
 8006a38:	9302      	str	r3, [sp, #8]
 8006a3a:	2307      	movs	r3, #7
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	f107 030c 	add.w	r3, r7, #12
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	2301      	movs	r3, #1
 8006a46:	2203      	movs	r2, #3
 8006a48:	2118      	movs	r1, #24
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fb fb54 	bl	80020f8 <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 8006a50:	7cbb      	ldrb	r3, [r7, #18]
 8006a52:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d11c      	bne.n	8006a98 <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 8006a5e:	7b7b      	ldrb	r3, [r7, #13]
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	b21a      	sxth	r2, r3
 8006a64:	7b3b      	ldrb	r3, [r7, #12]
 8006a66:	b21b      	sxth	r3, r3
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	b21a      	sxth	r2, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	b219      	sxth	r1, r3
 8006a76:	7bbb      	ldrb	r3, [r7, #14]
 8006a78:	b21a      	sxth	r2, r3
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	3302      	adds	r3, #2
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	b212      	sxth	r2, r2
 8006a82:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 8006a84:	7c7b      	ldrb	r3, [r7, #17]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	b219      	sxth	r1, r3
 8006a8a:	7c3b      	ldrb	r3, [r7, #16]
 8006a8c:	b21a      	sxth	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	3304      	adds	r3, #4
 8006a92:	430a      	orrs	r2, r1
 8006a94:	b212      	sxth	r2, r2
 8006a96:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 8006a98:	bf00      	nop
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 8006aa0:	b590      	push	{r4, r7, lr}
 8006aa2:	b089      	sub	sp, #36	; 0x24
 8006aa4:	af04      	add	r7, sp, #16
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 8006aae:	2364      	movs	r3, #100	; 0x64
 8006ab0:	9302      	str	r3, [sp, #8]
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	f107 030f 	add.w	r3, r7, #15
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	2301      	movs	r3, #1
 8006abe:	220a      	movs	r2, #10
 8006ac0:	2118      	movs	r1, #24
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fb fa1e 	bl	8001f04 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8006ac8:	2064      	movs	r0, #100	; 0x64
 8006aca:	f7fa fb89 	bl	80011e0 <HAL_Delay>

  writeData = 0x0F;
 8006ace:	230f      	movs	r3, #15
 8006ad0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 8006ad2:	2364      	movs	r3, #100	; 0x64
 8006ad4:	9302      	str	r3, [sp, #8]
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	f107 030f 	add.w	r3, r7, #15
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	220a      	movs	r2, #10
 8006ae4:	2118      	movs	r1, #24
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fb fa0c 	bl	8001f04 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8006aec:	2064      	movs	r0, #100	; 0x64
 8006aee:	f7fa fb77 	bl	80011e0 <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 8006af2:	2364      	movs	r3, #100	; 0x64
 8006af4:	9302      	str	r3, [sp, #8]
 8006af6:	2303      	movs	r3, #3
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	f107 030c 	add.w	r3, r7, #12
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	2301      	movs	r3, #1
 8006b02:	2210      	movs	r2, #16
 8006b04:	2118      	movs	r1, #24
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fb faf6 	bl	80020f8 <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8006b0c:	7b3b      	ldrb	r3, [r7, #12]
 8006b0e:	3b80      	subs	r3, #128	; 0x80
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fa f8b3 	bl	8000c7c <__aeabi_i2f>
 8006b16:	4603      	mov	r3, r0
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7f9 fc7d 	bl	8000418 <__aeabi_f2d>
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	4b46      	ldr	r3, [pc, #280]	; (8006c3c <initAK8963+0x19c>)
 8006b24:	f7f9 fdfa 	bl	800071c <__aeabi_ddiv>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	4621      	mov	r1, r4
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	4b42      	ldr	r3, [pc, #264]	; (8006c40 <initAK8963+0x1a0>)
 8006b36:	f7f9 fb11 	bl	800015c <__adddf3>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	4618      	mov	r0, r3
 8006b40:	4621      	mov	r1, r4
 8006b42:	f7f9 ff91 	bl	8000a68 <__aeabi_d2f>
 8006b46:	4602      	mov	r2, r0
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 8006b4c:	7b7b      	ldrb	r3, [r7, #13]
 8006b4e:	3b80      	subs	r3, #128	; 0x80
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fa f893 	bl	8000c7c <__aeabi_i2f>
 8006b56:	4603      	mov	r3, r0
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7f9 fc5d 	bl	8000418 <__aeabi_f2d>
 8006b5e:	f04f 0200 	mov.w	r2, #0
 8006b62:	4b36      	ldr	r3, [pc, #216]	; (8006c3c <initAK8963+0x19c>)
 8006b64:	f7f9 fdda 	bl	800071c <__aeabi_ddiv>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	4621      	mov	r1, r4
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	4b32      	ldr	r3, [pc, #200]	; (8006c40 <initAK8963+0x1a0>)
 8006b76:	f7f9 faf1 	bl	800015c <__adddf3>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4622      	mov	r2, r4
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	1d1c      	adds	r4, r3, #4
 8006b86:	4608      	mov	r0, r1
 8006b88:	4611      	mov	r1, r2
 8006b8a:	f7f9 ff6d 	bl	8000a68 <__aeabi_d2f>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	3b80      	subs	r3, #128	; 0x80
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fa f870 	bl	8000c7c <__aeabi_i2f>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7f9 fc3a 	bl	8000418 <__aeabi_f2d>
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <initAK8963+0x19c>)
 8006baa:	f7f9 fdb7 	bl	800071c <__aeabi_ddiv>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	f04f 0200 	mov.w	r2, #0
 8006bba:	4b21      	ldr	r3, [pc, #132]	; (8006c40 <initAK8963+0x1a0>)
 8006bbc:	f7f9 face 	bl	800015c <__adddf3>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f103 0408 	add.w	r4, r3, #8
 8006bce:	4608      	mov	r0, r1
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	f7f9 ff49 	bl	8000a68 <__aeabi_d2f>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	6023      	str	r3, [r4, #0]
	printf("Mag cal off Y: %f\r\n", destination[1]);
	printf("Mag cal off Z: %f\r\n", destination[2]);
	printf("-------------------------\r\n");
#endif

  writeData = 0x00;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 8006bde:	2364      	movs	r3, #100	; 0x64
 8006be0:	9302      	str	r3, [sp, #8]
 8006be2:	2301      	movs	r3, #1
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	f107 030f 	add.w	r3, r7, #15
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	2301      	movs	r3, #1
 8006bee:	220a      	movs	r2, #10
 8006bf0:	2118      	movs	r1, #24
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fb f986 	bl	8001f04 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8006bf8:	2064      	movs	r0, #100	; 0x64
 8006bfa:	f7fa faf1 	bl	80011e0 <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 8006bfe:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <initAK8963+0x1a4>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	b25a      	sxtb	r2, r3
 8006c06:	4b10      	ldr	r3, [pc, #64]	; (8006c48 <initAK8963+0x1a8>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	b25b      	sxtb	r3, r3
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	b25b      	sxtb	r3, r3
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 8006c14:	2364      	movs	r3, #100	; 0x64
 8006c16:	9302      	str	r3, [sp, #8]
 8006c18:	2301      	movs	r3, #1
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	f107 030f 	add.w	r3, r7, #15
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	2301      	movs	r3, #1
 8006c24:	220a      	movs	r2, #10
 8006c26:	2118      	movs	r1, #24
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7fb f96b 	bl	8001f04 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 8006c2e:	200a      	movs	r0, #10
 8006c30:	f7fa fad6 	bl	80011e0 <HAL_Delay>

#if(DEBUG_MPU)
  printf("MAG Init Succesful! \r\n");
#endif
}
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd90      	pop	{r4, r7, pc}
 8006c3c:	40700000 	.word	0x40700000
 8006c40:	3ff00000 	.word	0x3ff00000
 8006c44:	20000007 	.word	0x20000007
 8006c48:	20000008 	.word	0x20000008

08006c4c <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8006c4c:	b590      	push	{r4, r7, lr}
 8006c4e:	b095      	sub	sp, #84	; 0x54
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 8006c64:	2300      	movs	r3, #0
 8006c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c70:	2300      	movs	r3, #0
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c74:	2300      	movs	r3, #0
 8006c76:	633b      	str	r3, [r7, #48]	; 0x30
 8006c78:	2300      	movs	r3, #0
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8006c7c:	4aa6      	ldr	r2, [pc, #664]	; (8006f18 <calibrateMag+0x2cc>)
 8006c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c86:	6018      	str	r0, [r3, #0]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	8019      	strh	r1, [r3, #0]
 8006c8c:	4aa3      	ldr	r2, [pc, #652]	; (8006f1c <calibrateMag+0x2d0>)
 8006c8e:	f107 031c 	add.w	r3, r7, #28
 8006c92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c96:	6018      	str	r0, [r3, #0]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	8019      	strh	r1, [r3, #0]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	82bb      	strh	r3, [r7, #20]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	82fb      	strh	r3, [r7, #22]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	833b      	strh	r3, [r7, #24]

#if (DEBUG_MPU)
  printf("Mag Calibration: Wave device in a figure eight until done!\r\n");
#endif
  HAL_Delay(4000);
 8006ca8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006cac:	f7fa fa98 	bl	80011e0 <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8006cb0:	4b9b      	ldr	r3, [pc, #620]	; (8006f20 <calibrateMag+0x2d4>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d102      	bne.n	8006cbe <calibrateMag+0x72>
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 8006cbe:	4b98      	ldr	r3, [pc, #608]	; (8006f20 <calibrateMag+0x2d4>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b06      	cmp	r3, #6
 8006cc4:	d103      	bne.n	8006cce <calibrateMag+0x82>
 8006cc6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8006cca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006cd4:	e05d      	b.n	8006d92 <calibrateMag+0x146>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 8006cd6:	f107 0314 	add.w	r3, r7, #20
 8006cda:	4619      	mov	r1, r3
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff fe93 	bl	8006a08 <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce6:	e03e      	b.n	8006d66 <calibrateMag+0x11a>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8006ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006cfe:	440b      	add	r3, r1
 8006d00:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	dd0d      	ble.n	8006d24 <calibrateMag+0xd8>
 8006d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d10:	4413      	add	r3, r2
 8006d12:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006d1e:	440b      	add	r3, r1
 8006d20:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8006d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006d3a:	440b      	add	r3, r1
 8006d3c:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	da0d      	bge.n	8006d60 <calibrateMag+0x114>
 8006d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006d5a:	440b      	add	r3, r1
 8006d5c:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 8006d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d62:	3301      	adds	r3, #1
 8006d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	ddbd      	ble.n	8006ce8 <calibrateMag+0x9c>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8006d6c:	4b6c      	ldr	r3, [pc, #432]	; (8006f20 <calibrateMag+0x2d4>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d102      	bne.n	8006d7a <calibrateMag+0x12e>
 8006d74:	2087      	movs	r0, #135	; 0x87
 8006d76:	f7fa fa33 	bl	80011e0 <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 8006d7a:	4b69      	ldr	r3, [pc, #420]	; (8006f20 <calibrateMag+0x2d4>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b06      	cmp	r3, #6
 8006d80:	d102      	bne.n	8006d88 <calibrateMag+0x13c>
 8006d82:	200c      	movs	r0, #12
 8006d84:	f7fa fa2c 	bl	80011e0 <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 8006d88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006d92:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006d96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d39b      	bcc.n	8006cd6 <calibrateMag+0x8a>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8006d9e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006da2:	461a      	mov	r2, r3
 8006da4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	0fda      	lsrs	r2, r3, #31
 8006dac:	4413      	add	r3, r2
 8006dae:	105b      	asrs	r3, r3, #1
 8006db0:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8006db2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006db6:	461a      	mov	r2, r3
 8006db8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	0fda      	lsrs	r2, r3, #31
 8006dc0:	4413      	add	r3, r2
 8006dc2:	105b      	asrs	r3, r3, #1
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8006dc6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	0fda      	lsrs	r2, r3, #31
 8006dd4:	4413      	add	r3, r2
 8006dd6:	105b      	asrs	r3, r3, #1
 8006dd8:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7f9 ff4d 	bl	8000c7c <__aeabi_i2f>
 8006de2:	4602      	mov	r2, r0
 8006de4:	4b4f      	ldr	r3, [pc, #316]	; (8006f24 <calibrateMag+0x2d8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4619      	mov	r1, r3
 8006dea:	4610      	mov	r0, r2
 8006dec:	f7f9 ff9a 	bl	8000d24 <__aeabi_fmul>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	4b4c      	ldr	r3, [pc, #304]	; (8006f28 <calibrateMag+0x2dc>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f7f9 ff92 	bl	8000d24 <__aeabi_fmul>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8006e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7f9 ff36 	bl	8000c7c <__aeabi_i2f>
 8006e10:	4602      	mov	r2, r0
 8006e12:	4b44      	ldr	r3, [pc, #272]	; (8006f24 <calibrateMag+0x2d8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	4610      	mov	r0, r2
 8006e1a:	f7f9 ff83 	bl	8000d24 <__aeabi_fmul>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4618      	mov	r0, r3
 8006e22:	4b41      	ldr	r3, [pc, #260]	; (8006f28 <calibrateMag+0x2dc>)
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	1d1c      	adds	r4, r3, #4
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	f7f9 ff7a 	bl	8000d24 <__aeabi_fmul>
 8006e30:	4603      	mov	r3, r0
 8006e32:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8006e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7f9 ff20 	bl	8000c7c <__aeabi_i2f>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4b39      	ldr	r3, [pc, #228]	; (8006f24 <calibrateMag+0x2d8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4619      	mov	r1, r3
 8006e44:	4610      	mov	r0, r2
 8006e46:	f7f9 ff6d 	bl	8000d24 <__aeabi_fmul>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	4b36      	ldr	r3, [pc, #216]	; (8006f28 <calibrateMag+0x2dc>)
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f103 0408 	add.w	r4, r3, #8
 8006e58:	4611      	mov	r1, r2
 8006e5a:	f7f9 ff63 	bl	8000d24 <__aeabi_fmul>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8006e62:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006e66:	461a      	mov	r2, r3
 8006e68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	0fda      	lsrs	r2, r3, #31
 8006e70:	4413      	add	r3, r2
 8006e72:	105b      	asrs	r3, r3, #1
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8006e76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	0fda      	lsrs	r2, r3, #31
 8006e84:	4413      	add	r3, r2
 8006e86:	105b      	asrs	r3, r3, #1
 8006e88:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8006e8a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	0fda      	lsrs	r2, r3, #31
 8006e98:	4413      	add	r3, r2
 8006e9a:	105b      	asrs	r3, r3, #1
 8006e9c:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8006e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	441a      	add	r2, r3
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	4413      	add	r3, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7f9 fee7 	bl	8000c7c <__aeabi_i2f>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	647b      	str	r3, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 8006eb2:	491e      	ldr	r1, [pc, #120]	; (8006f2c <calibrateMag+0x2e0>)
 8006eb4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006eb6:	f7f9 ffe9 	bl	8000e8c <__aeabi_fdiv>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	647b      	str	r3, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7f9 fedb 	bl	8000c7c <__aeabi_i2f>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006ecc:	f7f9 ffde 	bl	8000e8c <__aeabi_fdiv>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7f9 fece 	bl	8000c7c <__aeabi_i2f>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	1d1c      	adds	r4, r3, #4
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006eea:	f7f9 ffcf 	bl	8000e8c <__aeabi_fdiv>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7f9 fec1 	bl	8000c7c <__aeabi_i2f>
 8006efa:	4602      	mov	r2, r0
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f103 0408 	add.w	r4, r3, #8
 8006f02:	4611      	mov	r1, r2
 8006f04:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006f06:	f7f9 ffc1 	bl	8000e8c <__aeabi_fdiv>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	6023      	str	r3, [r4, #0]

#if (DEBUG_MPU)
    printf("Mag Calibration done!\r\n");
#endif
}
 8006f0e:	bf00      	nop
 8006f10:	3754      	adds	r7, #84	; 0x54
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd90      	pop	{r4, r7, pc}
 8006f16:	bf00      	nop
 8006f18:	0800c3b4 	.word	0x0800c3b4
 8006f1c:	0800c3bc 	.word	0x0800c3bc
 8006f20:	20000008 	.word	0x20000008
 8006f24:	20000468 	.word	0x20000468
 8006f28:	200000e8 	.word	0x200000e8
 8006f2c:	40400000 	.word	0x40400000

08006f30 <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af04      	add	r7, sp, #16
 8006f36:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8006f3c:	2364      	movs	r3, #100	; 0x64
 8006f3e:	9302      	str	r3, [sp, #8]
 8006f40:	2301      	movs	r3, #1
 8006f42:	9301      	str	r3, [sp, #4]
 8006f44:	f107 030e 	add.w	r3, r7, #14
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	226b      	movs	r2, #107	; 0x6b
 8006f4e:	21d0      	movs	r1, #208	; 0xd0
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fa ffd7 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8006f56:	2064      	movs	r0, #100	; 0x64
 8006f58:	f7fa f942 	bl	80011e0 <HAL_Delay>

	writeData = 0x01;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8006f60:	2364      	movs	r3, #100	; 0x64
 8006f62:	9302      	str	r3, [sp, #8]
 8006f64:	2301      	movs	r3, #1
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	f107 030e 	add.w	r3, r7, #14
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	2301      	movs	r3, #1
 8006f70:	226b      	movs	r2, #107	; 0x6b
 8006f72:	21d0      	movs	r1, #208	; 0xd0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7fa ffc5 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8006f7a:	2064      	movs	r0, #100	; 0x64
 8006f7c:	f7fa f930 	bl	80011e0 <HAL_Delay>

	writeData = 0x03;
 8006f80:	2303      	movs	r3, #3
 8006f82:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8006f84:	2364      	movs	r3, #100	; 0x64
 8006f86:	9302      	str	r3, [sp, #8]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	f107 030e 	add.w	r3, r7, #14
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	2301      	movs	r3, #1
 8006f94:	221a      	movs	r2, #26
 8006f96:	21d0      	movs	r1, #208	; 0xd0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7fa ffb3 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8006f9e:	2064      	movs	r0, #100	; 0x64
 8006fa0:	f7fa f91e 	bl	80011e0 <HAL_Delay>

	writeData = 0x04;
 8006fa4:	2304      	movs	r3, #4
 8006fa6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8006fa8:	2364      	movs	r3, #100	; 0x64
 8006faa:	9302      	str	r3, [sp, #8]
 8006fac:	2301      	movs	r3, #1
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	f107 030e 	add.w	r3, r7, #14
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	2219      	movs	r2, #25
 8006fba:	21d0      	movs	r1, #208	; 0xd0
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7fa ffa1 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8006fc2:	2064      	movs	r0, #100	; 0x64
 8006fc4:	f7fa f90c 	bl	80011e0 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8006fc8:	2364      	movs	r3, #100	; 0x64
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	2301      	movs	r3, #1
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	f107 030f 	add.w	r3, r7, #15
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	221b      	movs	r2, #27
 8006fda:	21d0      	movs	r1, #208	; 0xd0
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7fb f88b 	bl	80020f8 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	f023 0303 	bic.w	r3, r3, #3
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	f023 0318 	bic.w	r3, r3, #24
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 8006ff6:	4b3d      	ldr	r3, [pc, #244]	; (80070ec <initMPU9250+0x1bc>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	b25a      	sxtb	r2, r3
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	b25b      	sxtb	r3, r3
 8007002:	4313      	orrs	r3, r2
 8007004:	b25b      	sxtb	r3, r3
 8007006:	b2db      	uxtb	r3, r3
 8007008:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 800700a:	2064      	movs	r0, #100	; 0x64
 800700c:	f7fa f8e8 	bl	80011e0 <HAL_Delay>

	writeData = readData;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8007014:	2364      	movs	r3, #100	; 0x64
 8007016:	9302      	str	r3, [sp, #8]
 8007018:	2301      	movs	r3, #1
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	f107 030e 	add.w	r3, r7, #14
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	2301      	movs	r3, #1
 8007024:	221b      	movs	r2, #27
 8007026:	21d0      	movs	r1, #208	; 0xd0
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7fa ff6b 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800702e:	2064      	movs	r0, #100	; 0x64
 8007030:	f7fa f8d6 	bl	80011e0 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8007034:	2364      	movs	r3, #100	; 0x64
 8007036:	9302      	str	r3, [sp, #8]
 8007038:	2301      	movs	r3, #1
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	f107 030f 	add.w	r3, r7, #15
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	2301      	movs	r3, #1
 8007044:	221c      	movs	r2, #28
 8007046:	21d0      	movs	r1, #208	; 0xd0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7fb f855 	bl	80020f8 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	f023 0318 	bic.w	r3, r3, #24
 8007054:	b2db      	uxtb	r3, r3
 8007056:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8007058:	4b25      	ldr	r3, [pc, #148]	; (80070f0 <initMPU9250+0x1c0>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	b25a      	sxtb	r2, r3
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	b25b      	sxtb	r3, r3
 8007064:	4313      	orrs	r3, r2
 8007066:	b25b      	sxtb	r3, r3
 8007068:	b2db      	uxtb	r3, r3
 800706a:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8007070:	2364      	movs	r3, #100	; 0x64
 8007072:	9302      	str	r3, [sp, #8]
 8007074:	2301      	movs	r3, #1
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	f107 030e 	add.w	r3, r7, #14
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	2301      	movs	r3, #1
 8007080:	221c      	movs	r2, #28
 8007082:	21d0      	movs	r1, #208	; 0xd0
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7fa ff3d 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800708a:	2064      	movs	r0, #100	; 0x64
 800708c:	f7fa f8a8 	bl	80011e0 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8007090:	2364      	movs	r3, #100	; 0x64
 8007092:	9302      	str	r3, [sp, #8]
 8007094:	2301      	movs	r3, #1
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	f107 030f 	add.w	r3, r7, #15
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	2301      	movs	r3, #1
 80070a0:	221d      	movs	r2, #29
 80070a2:	21d0      	movs	r1, #208	; 0xd0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fb f827 	bl	80020f8 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	f023 030f 	bic.w	r3, r3, #15
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	f043 0303 	orr.w	r3, r3, #3
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 80070c2:	2364      	movs	r3, #100	; 0x64
 80070c4:	9302      	str	r3, [sp, #8]
 80070c6:	2301      	movs	r3, #1
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	f107 030e 	add.w	r3, r7, #14
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2301      	movs	r3, #1
 80070d2:	221d      	movs	r2, #29
 80070d4:	21d0      	movs	r1, #208	; 0xd0
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fa ff14 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80070dc:	2064      	movs	r0, #100	; 0x64
 80070de:	f7fa f87f 	bl	80011e0 <HAL_Delay>

#if(DEBUG_MPU)
	printf("MPU Init Succesful! \r\n");
#endif
}
 80070e2:	bf00      	nop
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000005 	.word	0x20000005
 80070f0:	20000006 	.word	0x20000006

080070f4 <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 80070f4:	b5b0      	push	{r4, r5, r7, lr}
 80070f6:	b09e      	sub	sp, #120	; 0x78
 80070f8:	af04      	add	r7, sp, #16
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8007100:	2300      	movs	r3, #0
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007104:	2300      	movs	r3, #0
 8007106:	643b      	str	r3, [r7, #64]	; 0x40
 8007108:	2300      	movs	r3, #0
 800710a:	647b      	str	r3, [r7, #68]	; 0x44
 800710c:	2300      	movs	r3, #0
 800710e:	633b      	str	r3, [r7, #48]	; 0x30
 8007110:	2300      	movs	r3, #0
 8007112:	637b      	str	r3, [r7, #52]	; 0x34
 8007114:	2300      	movs	r3, #0
 8007116:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8007118:	2380      	movs	r3, #128	; 0x80
 800711a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 800711e:	2364      	movs	r3, #100	; 0x64
 8007120:	9302      	str	r3, [sp, #8]
 8007122:	2301      	movs	r3, #1
 8007124:	9301      	str	r3, [sp, #4]
 8007126:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	2301      	movs	r3, #1
 800712e:	226b      	movs	r2, #107	; 0x6b
 8007130:	21d0      	movs	r1, #208	; 0xd0
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7fa fee6 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8007138:	2064      	movs	r0, #100	; 0x64
 800713a:	f7fa f851 	bl	80011e0 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8007144:	2364      	movs	r3, #100	; 0x64
 8007146:	9302      	str	r3, [sp, #8]
 8007148:	2301      	movs	r3, #1
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	2301      	movs	r3, #1
 8007154:	226b      	movs	r2, #107	; 0x6b
 8007156:	21d0      	movs	r1, #208	; 0xd0
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f7fa fed3 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800715e:	2300      	movs	r3, #0
 8007160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8007164:	2364      	movs	r3, #100	; 0x64
 8007166:	9302      	str	r3, [sp, #8]
 8007168:	2301      	movs	r3, #1
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	2301      	movs	r3, #1
 8007174:	226c      	movs	r2, #108	; 0x6c
 8007176:	21d0      	movs	r1, #208	; 0xd0
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f7fa fec3 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800717e:	20c8      	movs	r0, #200	; 0xc8
 8007180:	f7fa f82e 	bl	80011e0 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8007184:	2300      	movs	r3, #0
 8007186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 800718a:	2364      	movs	r3, #100	; 0x64
 800718c:	9302      	str	r3, [sp, #8]
 800718e:	2301      	movs	r3, #1
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	2301      	movs	r3, #1
 800719a:	2238      	movs	r2, #56	; 0x38
 800719c:	21d0      	movs	r1, #208	; 0xd0
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7fa feb0 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80071a4:	2300      	movs	r3, #0
 80071a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 80071aa:	2364      	movs	r3, #100	; 0x64
 80071ac:	9302      	str	r3, [sp, #8]
 80071ae:	2301      	movs	r3, #1
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2301      	movs	r3, #1
 80071ba:	2223      	movs	r2, #35	; 0x23
 80071bc:	21d0      	movs	r1, #208	; 0xd0
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f7fa fea0 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 80071ca:	2364      	movs	r3, #100	; 0x64
 80071cc:	9302      	str	r3, [sp, #8]
 80071ce:	2301      	movs	r3, #1
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	2301      	movs	r3, #1
 80071da:	226b      	movs	r2, #107	; 0x6b
 80071dc:	21d0      	movs	r1, #208	; 0xd0
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7fa fe90 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80071e4:	2300      	movs	r3, #0
 80071e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 80071ea:	2364      	movs	r3, #100	; 0x64
 80071ec:	9302      	str	r3, [sp, #8]
 80071ee:	2301      	movs	r3, #1
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	2301      	movs	r3, #1
 80071fa:	2224      	movs	r2, #36	; 0x24
 80071fc:	21d0      	movs	r1, #208	; 0xd0
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7fa fe80 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007204:	2300      	movs	r3, #0
 8007206:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 800720a:	2364      	movs	r3, #100	; 0x64
 800720c:	9302      	str	r3, [sp, #8]
 800720e:	2301      	movs	r3, #1
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2301      	movs	r3, #1
 800721a:	226a      	movs	r2, #106	; 0x6a
 800721c:	21d0      	movs	r1, #208	; 0xd0
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7fa fe70 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8007224:	230c      	movs	r3, #12
 8007226:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 800722a:	2364      	movs	r3, #100	; 0x64
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	2301      	movs	r3, #1
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	2301      	movs	r3, #1
 800723a:	226a      	movs	r2, #106	; 0x6a
 800723c:	21d0      	movs	r1, #208	; 0xd0
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f7fa fe60 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8007244:	200f      	movs	r0, #15
 8007246:	f7f9 ffcb 	bl	80011e0 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8007250:	2364      	movs	r3, #100	; 0x64
 8007252:	9302      	str	r3, [sp, #8]
 8007254:	2301      	movs	r3, #1
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	2301      	movs	r3, #1
 8007260:	221a      	movs	r2, #26
 8007262:	21d0      	movs	r1, #208	; 0xd0
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7fa fe4d 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800726a:	2300      	movs	r3, #0
 800726c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8007270:	2364      	movs	r3, #100	; 0x64
 8007272:	9302      	str	r3, [sp, #8]
 8007274:	2301      	movs	r3, #1
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	2301      	movs	r3, #1
 8007280:	2219      	movs	r2, #25
 8007282:	21d0      	movs	r1, #208	; 0xd0
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7fa fe3d 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800728a:	2300      	movs	r3, #0
 800728c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8007290:	2364      	movs	r3, #100	; 0x64
 8007292:	9302      	str	r3, [sp, #8]
 8007294:	2301      	movs	r3, #1
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	2301      	movs	r3, #1
 80072a0:	221b      	movs	r2, #27
 80072a2:	21d0      	movs	r1, #208	; 0xd0
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7fa fe2d 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80072aa:	2300      	movs	r3, #0
 80072ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 80072b0:	2364      	movs	r3, #100	; 0x64
 80072b2:	9302      	str	r3, [sp, #8]
 80072b4:	2301      	movs	r3, #1
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	2301      	movs	r3, #1
 80072c0:	221c      	movs	r2, #28
 80072c2:	21d0      	movs	r1, #208	; 0xd0
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f7fa fe1d 	bl	8001f04 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 80072ca:	2383      	movs	r3, #131	; 0x83
 80072cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 80072d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072d4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 80072d8:	2340      	movs	r3, #64	; 0x40
 80072da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 80072de:	2364      	movs	r3, #100	; 0x64
 80072e0:	9302      	str	r3, [sp, #8]
 80072e2:	2301      	movs	r3, #1
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	2301      	movs	r3, #1
 80072ee:	226a      	movs	r2, #106	; 0x6a
 80072f0:	21d0      	movs	r1, #208	; 0xd0
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f7fa fe06 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 80072f8:	2378      	movs	r3, #120	; 0x78
 80072fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 80072fe:	2364      	movs	r3, #100	; 0x64
 8007300:	9302      	str	r3, [sp, #8]
 8007302:	2301      	movs	r3, #1
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	2301      	movs	r3, #1
 800730e:	2223      	movs	r2, #35	; 0x23
 8007310:	21d0      	movs	r1, #208	; 0xd0
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7fa fdf6 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8007318:	2028      	movs	r0, #40	; 0x28
 800731a:	f7f9 ff61 	bl	80011e0 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 800731e:	2300      	movs	r3, #0
 8007320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8007324:	2364      	movs	r3, #100	; 0x64
 8007326:	9302      	str	r3, [sp, #8]
 8007328:	2301      	movs	r3, #1
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	2301      	movs	r3, #1
 8007334:	2223      	movs	r2, #35	; 0x23
 8007336:	21d0      	movs	r1, #208	; 0xd0
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f7fa fde3 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 800733e:	2364      	movs	r3, #100	; 0x64
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	2302      	movs	r3, #2
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	2301      	movs	r3, #1
 800734e:	2272      	movs	r2, #114	; 0x72
 8007350:	21d0      	movs	r1, #208	; 0xd0
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7fa fed0 	bl	80020f8 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8007358:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	b21a      	sxth	r2, r3
 8007360:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8007364:	b21b      	sxth	r3, r3
 8007366:	4313      	orrs	r3, r2
 8007368:	b21b      	sxth	r3, r3
 800736a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 800736e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8007372:	4a5a      	ldr	r2, [pc, #360]	; (80074dc <calibrateMPU9250+0x3e8>)
 8007374:	fba2 2303 	umull	r2, r3, r2, r3
 8007378:	08db      	lsrs	r3, r3, #3
 800737a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 800737e:	2300      	movs	r3, #0
 8007380:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007384:	e077      	b.n	8007476 <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8007386:	2300      	movs	r3, #0
 8007388:	833b      	strh	r3, [r7, #24]
 800738a:	2300      	movs	r3, #0
 800738c:	837b      	strh	r3, [r7, #26]
 800738e:	2300      	movs	r3, #0
 8007390:	83bb      	strh	r3, [r7, #28]
 8007392:	2300      	movs	r3, #0
 8007394:	823b      	strh	r3, [r7, #16]
 8007396:	2300      	movs	r3, #0
 8007398:	827b      	strh	r3, [r7, #18]
 800739a:	2300      	movs	r3, #0
 800739c:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 800739e:	2364      	movs	r3, #100	; 0x64
 80073a0:	9302      	str	r3, [sp, #8]
 80073a2:	230c      	movs	r3, #12
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	2301      	movs	r3, #1
 80073ae:	2274      	movs	r2, #116	; 0x74
 80073b0:	21d0      	movs	r1, #208	; 0xd0
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7fa fea0 	bl	80020f8 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 80073b8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	b21a      	sxth	r2, r3
 80073c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80073c4:	b21b      	sxth	r3, r3
 80073c6:	4313      	orrs	r3, r2
 80073c8:	b21b      	sxth	r3, r3
 80073ca:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 80073cc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80073d0:	021b      	lsls	r3, r3, #8
 80073d2:	b21a      	sxth	r2, r3
 80073d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80073d8:	b21b      	sxth	r3, r3
 80073da:	4313      	orrs	r3, r2
 80073dc:	b21b      	sxth	r3, r3
 80073de:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 80073e0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80073e4:	021b      	lsls	r3, r3, #8
 80073e6:	b21a      	sxth	r2, r3
 80073e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	4313      	orrs	r3, r2
 80073f0:	b21b      	sxth	r3, r3
 80073f2:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 80073f4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	b21a      	sxth	r2, r3
 80073fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007400:	b21b      	sxth	r3, r3
 8007402:	4313      	orrs	r3, r2
 8007404:	b21b      	sxth	r3, r3
 8007406:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8007408:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	b21a      	sxth	r2, r3
 8007410:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8007414:	b21b      	sxth	r3, r3
 8007416:	4313      	orrs	r3, r2
 8007418:	b21b      	sxth	r3, r3
 800741a:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 800741c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8007420:	021b      	lsls	r3, r3, #8
 8007422:	b21a      	sxth	r2, r3
 8007424:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007428:	b21b      	sxth	r3, r3
 800742a:	4313      	orrs	r3, r2
 800742c:	b21b      	sxth	r3, r3
 800742e:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007436:	4413      	add	r3, r2
 8007438:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 800743a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8007440:	4413      	add	r3, r2
 8007442:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 800744e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007450:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007454:	4413      	add	r3, r2
 8007456:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8007458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800745e:	4413      	add	r3, r2
 8007460:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8007462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007464:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007468:	4413      	add	r3, r2
 800746a:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 800746c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007470:	3301      	adds	r3, #1
 8007472:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007476:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800747a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800747e:	429a      	cmp	r2, r3
 8007480:	d381      	bcc.n	8007386 <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8007482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007484:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007488:	fb92 f3f3 	sdiv	r3, r2, r3
 800748c:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 800748e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007490:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007494:	fb92 f3f3 	sdiv	r3, r2, r3
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 800749a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800749c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80074a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80074a4:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 80074a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80074ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 80074b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80074b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80074bc:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 80074be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80074c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80074c8:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd07      	ble.n	80074e0 <calibrateMPU9250+0x3ec>
 80074d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074da:	e006      	b.n	80074ea <calibrateMPU9250+0x3f6>
 80074dc:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 80074e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80074e6:	4413      	add	r3, r2
 80074e8:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80074ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ec:	425b      	negs	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da00      	bge.n	80074f4 <calibrateMPU9250+0x400>
 80074f2:	3303      	adds	r3, #3
 80074f4:	109b      	asrs	r3, r3, #2
 80074f6:	121b      	asrs	r3, r3, #8
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80074fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007500:	425b      	negs	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	da00      	bge.n	8007508 <calibrateMPU9250+0x414>
 8007506:	3303      	adds	r3, #3
 8007508:	109b      	asrs	r3, r3, #2
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8007510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007512:	425b      	negs	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	da00      	bge.n	800751a <calibrateMPU9250+0x426>
 8007518:	3303      	adds	r3, #3
 800751a:	109b      	asrs	r3, r3, #2
 800751c:	121b      	asrs	r3, r3, #8
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8007524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007526:	425b      	negs	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	da00      	bge.n	800752e <calibrateMPU9250+0x43a>
 800752c:	3303      	adds	r3, #3
 800752e:	109b      	asrs	r3, r3, #2
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8007536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007538:	425b      	negs	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	da00      	bge.n	8007540 <calibrateMPU9250+0x44c>
 800753e:	3303      	adds	r3, #3
 8007540:	109b      	asrs	r3, r3, #2
 8007542:	121b      	asrs	r3, r3, #8
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 800754a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800754c:	425b      	negs	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	da00      	bge.n	8007554 <calibrateMPU9250+0x460>
 8007552:	3303      	adds	r3, #3
 8007554:	109b      	asrs	r3, r3, #2
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 800755c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8007564:	2364      	movs	r3, #100	; 0x64
 8007566:	9302      	str	r3, [sp, #8]
 8007568:	2301      	movs	r3, #1
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	2301      	movs	r3, #1
 8007574:	2213      	movs	r2, #19
 8007576:	21d0      	movs	r1, #208	; 0xd0
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f7fa fcc3 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 800757e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8007582:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8007586:	2364      	movs	r3, #100	; 0x64
 8007588:	9302      	str	r3, [sp, #8]
 800758a:	2301      	movs	r3, #1
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	2301      	movs	r3, #1
 8007596:	2214      	movs	r2, #20
 8007598:	21d0      	movs	r1, #208	; 0xd0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7fa fcb2 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 80075a0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80075a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80075a8:	2364      	movs	r3, #100	; 0x64
 80075aa:	9302      	str	r3, [sp, #8]
 80075ac:	2301      	movs	r3, #1
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	2301      	movs	r3, #1
 80075b8:	2215      	movs	r2, #21
 80075ba:	21d0      	movs	r1, #208	; 0xd0
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7fa fca1 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 80075c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80075c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80075ca:	2364      	movs	r3, #100	; 0x64
 80075cc:	9302      	str	r3, [sp, #8]
 80075ce:	2301      	movs	r3, #1
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2301      	movs	r3, #1
 80075da:	2216      	movs	r2, #22
 80075dc:	21d0      	movs	r1, #208	; 0xd0
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7fa fc90 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 80075e4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80075e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80075ec:	2364      	movs	r3, #100	; 0x64
 80075ee:	9302      	str	r3, [sp, #8]
 80075f0:	2301      	movs	r3, #1
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	2301      	movs	r3, #1
 80075fc:	2217      	movs	r2, #23
 80075fe:	21d0      	movs	r1, #208	; 0xd0
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f7fa fc7f 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8007606:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800760a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800760e:	2364      	movs	r3, #100	; 0x64
 8007610:	9302      	str	r3, [sp, #8]
 8007612:	2301      	movs	r3, #1
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	2301      	movs	r3, #1
 800761e:	2218      	movs	r2, #24
 8007620:	21d0      	movs	r1, #208	; 0xd0
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7fa fc6e 	bl	8001f04 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8007628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762a:	4618      	mov	r0, r3
 800762c:	f7f9 fb26 	bl	8000c7c <__aeabi_i2f>
 8007630:	4604      	mov	r4, r0
 8007632:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007636:	4618      	mov	r0, r3
 8007638:	f7f9 fb1c 	bl	8000c74 <__aeabi_ui2f>
 800763c:	4603      	mov	r3, r0
 800763e:	4619      	mov	r1, r3
 8007640:	4620      	mov	r0, r4
 8007642:	f7f9 fc23 	bl	8000e8c <__aeabi_fdiv>
 8007646:	4603      	mov	r3, r0
 8007648:	461a      	mov	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 800764e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007650:	4618      	mov	r0, r3
 8007652:	f7f9 fb13 	bl	8000c7c <__aeabi_i2f>
 8007656:	4605      	mov	r5, r0
 8007658:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800765c:	4618      	mov	r0, r3
 800765e:	f7f9 fb09 	bl	8000c74 <__aeabi_ui2f>
 8007662:	4602      	mov	r2, r0
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	1d1c      	adds	r4, r3, #4
 8007668:	4611      	mov	r1, r2
 800766a:	4628      	mov	r0, r5
 800766c:	f7f9 fc0e 	bl	8000e8c <__aeabi_fdiv>
 8007670:	4603      	mov	r3, r0
 8007672:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8007674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007676:	4618      	mov	r0, r3
 8007678:	f7f9 fb00 	bl	8000c7c <__aeabi_i2f>
 800767c:	4605      	mov	r5, r0
 800767e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007682:	4618      	mov	r0, r3
 8007684:	f7f9 faf6 	bl	8000c74 <__aeabi_ui2f>
 8007688:	4602      	mov	r2, r0
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f103 0408 	add.w	r4, r3, #8
 8007690:	4611      	mov	r1, r2
 8007692:	4628      	mov	r0, r5
 8007694:	f7f9 fbfa 	bl	8000e8c <__aeabi_fdiv>
 8007698:	4603      	mov	r3, r0
 800769a:	6023      	str	r3, [r4, #0]

		printf("-------------------------\r\n");
#endif

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 800769c:	2300      	movs	r3, #0
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
 80076a0:	2300      	movs	r3, #0
 80076a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076a4:	2300      	movs	r3, #0
 80076a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 80076a8:	2364      	movs	r3, #100	; 0x64
 80076aa:	9302      	str	r3, [sp, #8]
 80076ac:	2302      	movs	r3, #2
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	2301      	movs	r3, #1
 80076b8:	2277      	movs	r2, #119	; 0x77
 80076ba:	21d0      	movs	r1, #208	; 0xd0
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7fa fd1b 	bl	80020f8 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80076c2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80076cc:	4313      	orrs	r3, r2
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 80076d0:	2364      	movs	r3, #100	; 0x64
 80076d2:	9302      	str	r3, [sp, #8]
 80076d4:	2302      	movs	r3, #2
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	2301      	movs	r3, #1
 80076e0:	227a      	movs	r2, #122	; 0x7a
 80076e2:	21d0      	movs	r1, #208	; 0xd0
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7fa fd07 	bl	80020f8 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80076ea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80076f4:	4313      	orrs	r3, r2
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 80076f8:	2364      	movs	r3, #100	; 0x64
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	2302      	movs	r3, #2
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	2301      	movs	r3, #1
 8007708:	227d      	movs	r2, #125	; 0x7d
 800770a:	21d0      	movs	r1, #208	; 0xd0
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f7fa fcf3 	bl	80020f8 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8007712:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800771c:	4313      	orrs	r3, r2
 800771e:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8007720:	2301      	movs	r3, #1
 8007722:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8007724:	2300      	movs	r3, #0
 8007726:	f887 3020 	strb.w	r3, [r7, #32]
 800772a:	2300      	movs	r3, #0
 800772c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007730:	2300      	movs	r3, #0
 8007732:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for(ii = 0; ii < 3; ii++) {
 8007736:	2300      	movs	r3, #0
 8007738:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800773c:	e019      	b.n	8007772 <calibrateMPU9250+0x67e>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 800773e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007748:	4413      	add	r3, r2
 800774a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800774e:	461a      	mov	r2, r3
 8007750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007752:	4013      	ands	r3, r2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d007      	beq.n	8007768 <calibrateMPU9250+0x674>
 8007758:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800775c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007760:	4413      	add	r3, r2
 8007762:	2201      	movs	r2, #1
 8007764:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 8007768:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800776c:	3301      	adds	r3, #1
 800776e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007772:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007776:	2b02      	cmp	r3, #2
 8007778:	d9e1      	bls.n	800773e <calibrateMPU9250+0x64a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800777a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	2b00      	cmp	r3, #0
 8007780:	da00      	bge.n	8007784 <calibrateMPU9250+0x690>
 8007782:	3307      	adds	r3, #7
 8007784:	10db      	asrs	r3, r3, #3
 8007786:	425b      	negs	r3, r3
 8007788:	4413      	add	r3, r2
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 800778c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007790:	2b00      	cmp	r3, #0
 8007792:	da00      	bge.n	8007796 <calibrateMPU9250+0x6a2>
 8007794:	3307      	adds	r3, #7
 8007796:	10db      	asrs	r3, r3, #3
 8007798:	425b      	negs	r3, r3
 800779a:	4413      	add	r3, r2
 800779c:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 800779e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	da00      	bge.n	80077a8 <calibrateMPU9250+0x6b4>
 80077a6:	3307      	adds	r3, #7
 80077a8:	10db      	asrs	r3, r3, #3
 80077aa:	425b      	negs	r3, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	121b      	asrs	r3, r3, #8
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80077c2:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80077c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	121b      	asrs	r3, r3, #8
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80077e4:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80077e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80077ec:	4313      	orrs	r3, r2
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	121b      	asrs	r3, r3, #8
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	b2db      	uxtb	r3, r3
 8007802:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8007806:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800780a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800780e:	4313      	orrs	r3, r2
 8007810:	b2db      	uxtb	r3, r3
 8007812:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8007816:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800781a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800781e:	2364      	movs	r3, #100	; 0x64
 8007820:	9302      	str	r3, [sp, #8]
 8007822:	2301      	movs	r3, #1
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	2301      	movs	r3, #1
 800782e:	2277      	movs	r2, #119	; 0x77
 8007830:	21d0      	movs	r1, #208	; 0xd0
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7fa fb66 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8007838:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800783c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8007840:	2364      	movs	r3, #100	; 0x64
 8007842:	9302      	str	r3, [sp, #8]
 8007844:	2301      	movs	r3, #1
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	2301      	movs	r3, #1
 8007850:	2278      	movs	r2, #120	; 0x78
 8007852:	21d0      	movs	r1, #208	; 0xd0
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f7fa fb55 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 800785a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800785e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8007862:	2364      	movs	r3, #100	; 0x64
 8007864:	9302      	str	r3, [sp, #8]
 8007866:	2301      	movs	r3, #1
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	2301      	movs	r3, #1
 8007872:	227a      	movs	r2, #122	; 0x7a
 8007874:	21d0      	movs	r1, #208	; 0xd0
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7fa fb44 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 800787c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8007884:	2364      	movs	r3, #100	; 0x64
 8007886:	9302      	str	r3, [sp, #8]
 8007888:	2301      	movs	r3, #1
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	2301      	movs	r3, #1
 8007894:	227b      	movs	r2, #123	; 0x7b
 8007896:	21d0      	movs	r1, #208	; 0xd0
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f7fa fb33 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 800789e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80078a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80078a6:	2364      	movs	r3, #100	; 0x64
 80078a8:	9302      	str	r3, [sp, #8]
 80078aa:	2301      	movs	r3, #1
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	2301      	movs	r3, #1
 80078b6:	227d      	movs	r2, #125	; 0x7d
 80078b8:	21d0      	movs	r1, #208	; 0xd0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f7fa fb22 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 80078c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80078c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80078c8:	2364      	movs	r3, #100	; 0x64
 80078ca:	9302      	str	r3, [sp, #8]
 80078cc:	2301      	movs	r3, #1
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	2301      	movs	r3, #1
 80078d8:	227e      	movs	r2, #126	; 0x7e
 80078da:	21d0      	movs	r1, #208	; 0xd0
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f7fa fb11 	bl	8001f04 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7f9 f9c9 	bl	8000c7c <__aeabi_i2f>
 80078ea:	4604      	mov	r4, r0
 80078ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7f9 f9bf 	bl	8000c74 <__aeabi_ui2f>
 80078f6:	4603      	mov	r3, r0
 80078f8:	4619      	mov	r1, r3
 80078fa:	4620      	mov	r0, r4
 80078fc:	f7f9 fac6 	bl	8000e8c <__aeabi_fdiv>
 8007900:	4603      	mov	r3, r0
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 8007908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790a:	4618      	mov	r0, r3
 800790c:	f7f9 f9b6 	bl	8000c7c <__aeabi_i2f>
 8007910:	4605      	mov	r5, r0
 8007912:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007916:	4618      	mov	r0, r3
 8007918:	f7f9 f9ac 	bl	8000c74 <__aeabi_ui2f>
 800791c:	4602      	mov	r2, r0
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	1d1c      	adds	r4, r3, #4
 8007922:	4611      	mov	r1, r2
 8007924:	4628      	mov	r0, r5
 8007926:	f7f9 fab1 	bl	8000e8c <__aeabi_fdiv>
 800792a:	4603      	mov	r3, r0
 800792c:	6023      	str	r3, [r4, #0]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	4618      	mov	r0, r3
 8007932:	f7f9 f9a3 	bl	8000c7c <__aeabi_i2f>
 8007936:	4605      	mov	r5, r0
 8007938:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800793c:	4618      	mov	r0, r3
 800793e:	f7f9 f999 	bl	8000c74 <__aeabi_ui2f>
 8007942:	4602      	mov	r2, r0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f103 0408 	add.w	r4, r3, #8
 800794a:	4611      	mov	r1, r2
 800794c:	4628      	mov	r0, r5
 800794e:	f7f9 fa9d 	bl	8000e8c <__aeabi_fdiv>
 8007952:	4603      	mov	r3, r0
 8007954:	6023      	str	r3, [r4, #0]
		printf("Accel bias Y: %f\r\n", accelBiasY);
		printf("Accel bias Z: %f\r\n", accelBiasZ);

		printf("-------------------------\r\n");
#endif
}
 8007956:	bf00      	nop
 8007958:	3768      	adds	r7, #104	; 0x68
 800795a:	46bd      	mov	sp, r7
 800795c:	bdb0      	pop	{r4, r5, r7, pc}
 800795e:	bf00      	nop

08007960 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 8007960:	b5b0      	push	{r4, r5, r7, lr}
 8007962:	b0a8      	sub	sp, #160	; 0xa0
 8007964:	af04      	add	r7, sp, #16
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 800796a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8007974:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	605a      	str	r2, [r3, #4]
 800797e:	609a      	str	r2, [r3, #8]
 8007980:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	605a      	str	r2, [r3, #4]
 800798a:	609a      	str	r2, [r3, #8]
 800798c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	605a      	str	r2, [r3, #4]
 8007996:	609a      	str	r2, [r3, #8]
 8007998:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	605a      	str	r2, [r3, #4]
 80079a2:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 80079aa:	2300      	movs	r3, #0
 80079ac:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 80079b0:	2364      	movs	r3, #100	; 0x64
 80079b2:	9302      	str	r3, [sp, #8]
 80079b4:	2301      	movs	r3, #1
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	2301      	movs	r3, #1
 80079c0:	2219      	movs	r2, #25
 80079c2:	21d0      	movs	r1, #208	; 0xd0
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7fa fa9d 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 80079ca:	2302      	movs	r3, #2
 80079cc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80079d0:	2364      	movs	r3, #100	; 0x64
 80079d2:	9302      	str	r3, [sp, #8]
 80079d4:	2301      	movs	r3, #1
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	2301      	movs	r3, #1
 80079e0:	221a      	movs	r2, #26
 80079e2:	21d0      	movs	r1, #208	; 0xd0
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7fa fa8d 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 80079ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 80079f6:	2364      	movs	r3, #100	; 0x64
 80079f8:	9302      	str	r3, [sp, #8]
 80079fa:	2301      	movs	r3, #1
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	2301      	movs	r3, #1
 8007a06:	221b      	movs	r2, #27
 8007a08:	21d0      	movs	r1, #208	; 0xd0
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7fa fa7a 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8007a10:	2302      	movs	r3, #2
 8007a12:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8007a16:	2364      	movs	r3, #100	; 0x64
 8007a18:	9302      	str	r3, [sp, #8]
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	2301      	movs	r3, #1
 8007a26:	221d      	movs	r2, #29
 8007a28:	21d0      	movs	r1, #208	; 0xd0
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7fa fa6a 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8007a30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 8007a3c:	2364      	movs	r3, #100	; 0x64
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	2301      	movs	r3, #1
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	221c      	movs	r2, #28
 8007a4e:	21d0      	movs	r1, #208	; 0xd0
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7fa fa57 	bl	8001f04 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8007a56:	2300      	movs	r3, #0
 8007a58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a5c:	e066      	b.n	8007b2c <MPU9250SelfTest+0x1cc>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8007a5e:	2364      	movs	r3, #100	; 0x64
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	2306      	movs	r3, #6
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	223b      	movs	r2, #59	; 0x3b
 8007a70:	21d0      	movs	r1, #208	; 0xd0
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fa fb40 	bl	80020f8 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a7a:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007a7e:	0212      	lsls	r2, r2, #8
 8007a80:	b211      	sxth	r1, r2
 8007a82:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007a86:	b212      	sxth	r2, r2
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	b212      	sxth	r2, r2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a92:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007a96:	0212      	lsls	r2, r2, #8
 8007a98:	b211      	sxth	r1, r2
 8007a9a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007a9e:	b212      	sxth	r2, r2
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	b212      	sxth	r2, r2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aaa:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007aae:	0212      	lsls	r2, r2, #8
 8007ab0:	b211      	sxth	r1, r2
 8007ab2:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007ab6:	b212      	sxth	r2, r2
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	b212      	sxth	r2, r2
 8007abc:	4413      	add	r3, r2
 8007abe:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8007ac0:	2364      	movs	r3, #100	; 0x64
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	2306      	movs	r3, #6
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	2301      	movs	r3, #1
 8007ad0:	2243      	movs	r2, #67	; 0x43
 8007ad2:	21d0      	movs	r1, #208	; 0xd0
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fa fb0f 	bl	80020f8 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007adc:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007ae0:	0212      	lsls	r2, r2, #8
 8007ae2:	b211      	sxth	r1, r2
 8007ae4:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007ae8:	b212      	sxth	r2, r2
 8007aea:	430a      	orrs	r2, r1
 8007aec:	b212      	sxth	r2, r2
 8007aee:	4413      	add	r3, r2
 8007af0:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007af4:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007af8:	0212      	lsls	r2, r2, #8
 8007afa:	b211      	sxth	r1, r2
 8007afc:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007b00:	b212      	sxth	r2, r2
 8007b02:	430a      	orrs	r2, r1
 8007b04:	b212      	sxth	r2, r2
 8007b06:	4413      	add	r3, r2
 8007b08:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b0c:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007b10:	0212      	lsls	r2, r2, #8
 8007b12:	b211      	sxth	r1, r2
 8007b14:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007b18:	b212      	sxth	r2, r2
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	b212      	sxth	r2, r2
 8007b1e:	4413      	add	r3, r2
 8007b20:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 8007b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b26:	3301      	adds	r3, #1
 8007b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b30:	2bc7      	cmp	r3, #199	; 0xc7
 8007b32:	dd94      	ble.n	8007a5e <MPU9250SelfTest+0xfe>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 8007b34:	2300      	movs	r3, #0
 8007b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b3a:	e030      	b.n	8007b9e <MPU9250SelfTest+0x23e>
		aAvg[ii] /= 200;
 8007b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007b46:	4413      	add	r3, r2
 8007b48:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8007b4c:	4a61      	ldr	r2, [pc, #388]	; (8007cd4 <MPU9250SelfTest+0x374>)
 8007b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8007b52:	1192      	asrs	r2, r2, #6
 8007b54:	17db      	asrs	r3, r3, #31
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8007b62:	440b      	add	r3, r1
 8007b64:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 8007b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007b72:	4413      	add	r3, r2
 8007b74:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8007b78:	4a56      	ldr	r2, [pc, #344]	; (8007cd4 <MPU9250SelfTest+0x374>)
 8007b7a:	fb82 1203 	smull	r1, r2, r2, r3
 8007b7e:	1192      	asrs	r2, r2, #6
 8007b80:	17db      	asrs	r3, r3, #31
 8007b82:	1ad2      	subs	r2, r2, r3
 8007b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8007b8e:	440b      	add	r3, r1
 8007b90:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 8007b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b98:	3301      	adds	r3, #1
 8007b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	ddca      	ble.n	8007b3c <MPU9250SelfTest+0x1dc>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 8007ba6:	23e0      	movs	r3, #224	; 0xe0
 8007ba8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8007bac:	2364      	movs	r3, #100	; 0x64
 8007bae:	9302      	str	r3, [sp, #8]
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	2301      	movs	r3, #1
 8007bbc:	221c      	movs	r2, #28
 8007bbe:	21d0      	movs	r1, #208	; 0xd0
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7fa f99f 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 8007bc6:	23e0      	movs	r3, #224	; 0xe0
 8007bc8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8007bcc:	2364      	movs	r3, #100	; 0x64
 8007bce:	9302      	str	r3, [sp, #8]
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	2301      	movs	r3, #1
 8007bdc:	221b      	movs	r2, #27
 8007bde:	21d0      	movs	r1, #208	; 0xd0
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7fa f98f 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8007be6:	2019      	movs	r0, #25
 8007be8:	f7f9 fafa 	bl	80011e0 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8007bec:	2300      	movs	r3, #0
 8007bee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bf2:	e066      	b.n	8007cc2 <MPU9250SelfTest+0x362>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8007bf4:	2364      	movs	r3, #100	; 0x64
 8007bf6:	9302      	str	r3, [sp, #8]
 8007bf8:	2306      	movs	r3, #6
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	2301      	movs	r3, #1
 8007c04:	223b      	movs	r2, #59	; 0x3b
 8007c06:	21d0      	movs	r1, #208	; 0xd0
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7fa fa75 	bl	80020f8 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c10:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007c14:	0212      	lsls	r2, r2, #8
 8007c16:	b211      	sxth	r1, r2
 8007c18:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007c1c:	b212      	sxth	r2, r2
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	b212      	sxth	r2, r2
 8007c22:	4413      	add	r3, r2
 8007c24:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c28:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007c2c:	0212      	lsls	r2, r2, #8
 8007c2e:	b211      	sxth	r1, r2
 8007c30:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007c34:	b212      	sxth	r2, r2
 8007c36:	430a      	orrs	r2, r1
 8007c38:	b212      	sxth	r2, r2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c40:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007c44:	0212      	lsls	r2, r2, #8
 8007c46:	b211      	sxth	r1, r2
 8007c48:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007c4c:	b212      	sxth	r2, r2
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	b212      	sxth	r2, r2
 8007c52:	4413      	add	r3, r2
 8007c54:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8007c56:	2364      	movs	r3, #100	; 0x64
 8007c58:	9302      	str	r3, [sp, #8]
 8007c5a:	2306      	movs	r3, #6
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	2301      	movs	r3, #1
 8007c66:	2243      	movs	r2, #67	; 0x43
 8007c68:	21d0      	movs	r1, #208	; 0xd0
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fa fa44 	bl	80020f8 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007c76:	0212      	lsls	r2, r2, #8
 8007c78:	b211      	sxth	r1, r2
 8007c7a:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007c7e:	b212      	sxth	r2, r2
 8007c80:	430a      	orrs	r2, r1
 8007c82:	b212      	sxth	r2, r2
 8007c84:	4413      	add	r3, r2
 8007c86:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007c8e:	0212      	lsls	r2, r2, #8
 8007c90:	b211      	sxth	r1, r2
 8007c92:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007c96:	b212      	sxth	r2, r2
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	b212      	sxth	r2, r2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca2:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007ca6:	0212      	lsls	r2, r2, #8
 8007ca8:	b211      	sxth	r1, r2
 8007caa:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007cae:	b212      	sxth	r2, r2
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	b212      	sxth	r2, r2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 8007cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cc6:	2bc7      	cmp	r3, #199	; 0xc7
 8007cc8:	dd94      	ble.n	8007bf4 <MPU9250SelfTest+0x294>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cd0:	e033      	b.n	8007d3a <MPU9250SelfTest+0x3da>
 8007cd2:	bf00      	nop
 8007cd4:	51eb851f 	.word	0x51eb851f
		aSTAvg[ii] /= 200;
 8007cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ce8:	4ad7      	ldr	r2, [pc, #860]	; (8008048 <MPU9250SelfTest+0x6e8>)
 8007cea:	fb82 1203 	smull	r1, r2, r2, r3
 8007cee:	1192      	asrs	r2, r2, #6
 8007cf0:	17db      	asrs	r3, r3, #31
 8007cf2:	1ad2      	subs	r2, r2, r3
 8007cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8007cfe:	440b      	add	r3, r1
 8007d00:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 8007d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007d0e:	4413      	add	r3, r2
 8007d10:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8007d14:	4acc      	ldr	r2, [pc, #816]	; (8008048 <MPU9250SelfTest+0x6e8>)
 8007d16:	fb82 1203 	smull	r1, r2, r2, r3
 8007d1a:	1192      	asrs	r2, r2, #6
 8007d1c:	17db      	asrs	r3, r3, #31
 8007d1e:	1ad2      	subs	r2, r2, r3
 8007d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8007d2a:	440b      	add	r3, r1
 8007d2c:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 8007d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d34:	3301      	adds	r3, #1
 8007d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	ddca      	ble.n	8007cd8 <MPU9250SelfTest+0x378>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8007d42:	2300      	movs	r3, #0
 8007d44:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8007d48:	2364      	movs	r3, #100	; 0x64
 8007d4a:	9302      	str	r3, [sp, #8]
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2301      	movs	r3, #1
 8007d58:	221c      	movs	r2, #28
 8007d5a:	21d0      	movs	r1, #208	; 0xd0
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7fa f8d1 	bl	8001f04 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007d62:	2300      	movs	r3, #0
 8007d64:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8007d68:	2364      	movs	r3, #100	; 0x64
 8007d6a:	9302      	str	r3, [sp, #8]
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	2301      	movs	r3, #1
 8007d78:	221b      	movs	r2, #27
 8007d7a:	21d0      	movs	r1, #208	; 0xd0
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fa f8c1 	bl	8001f04 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8007d82:	2019      	movs	r0, #25
 8007d84:	f7f9 fa2c 	bl	80011e0 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 8007d88:	2364      	movs	r3, #100	; 0x64
 8007d8a:	9302      	str	r3, [sp, #8]
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	9301      	str	r3, [sp, #4]
 8007d90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	2301      	movs	r3, #1
 8007d98:	220d      	movs	r2, #13
 8007d9a:	21d0      	movs	r1, #208	; 0xd0
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7fa f9ab 	bl	80020f8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 8007da2:	2364      	movs	r3, #100	; 0x64
 8007da4:	9302      	str	r3, [sp, #8]
 8007da6:	2301      	movs	r3, #1
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007dae:	3301      	adds	r3, #1
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	2301      	movs	r3, #1
 8007db4:	220e      	movs	r2, #14
 8007db6:	21d0      	movs	r1, #208	; 0xd0
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7fa f99d 	bl	80020f8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 8007dbe:	2364      	movs	r3, #100	; 0x64
 8007dc0:	9302      	str	r3, [sp, #8]
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007dca:	3302      	adds	r3, #2
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	2301      	movs	r3, #1
 8007dd0:	220f      	movs	r2, #15
 8007dd2:	21d0      	movs	r1, #208	; 0xd0
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7fa f98f 	bl	80020f8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 8007dda:	2364      	movs	r3, #100	; 0x64
 8007ddc:	9302      	str	r3, [sp, #8]
 8007dde:	2301      	movs	r3, #1
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007de6:	3303      	adds	r3, #3
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	2301      	movs	r3, #1
 8007dec:	2200      	movs	r2, #0
 8007dee:	21d0      	movs	r1, #208	; 0xd0
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7fa f981 	bl	80020f8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8007df6:	2364      	movs	r3, #100	; 0x64
 8007df8:	9302      	str	r3, [sp, #8]
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e02:	3304      	adds	r3, #4
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	2301      	movs	r3, #1
 8007e08:	2201      	movs	r2, #1
 8007e0a:	21d0      	movs	r1, #208	; 0xd0
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fa f973 	bl	80020f8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8007e12:	2364      	movs	r3, #100	; 0x64
 8007e14:	9302      	str	r3, [sp, #8]
 8007e16:	2301      	movs	r3, #1
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e1e:	3305      	adds	r3, #5
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	2301      	movs	r3, #1
 8007e24:	2202      	movs	r2, #2
 8007e26:	21d0      	movs	r1, #208	; 0xd0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7fa f965 	bl	80020f8 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8007e2e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007e32:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7f8 ff1e 	bl	8000c7c <__aeabi_i2f>
 8007e40:	4603      	mov	r3, r0
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7f8 fae8 	bl	8000418 <__aeabi_f2d>
 8007e48:	4604      	mov	r4, r0
 8007e4a:	460d      	mov	r5, r1
 8007e4c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7f8 ff0f 	bl	8000c74 <__aeabi_ui2f>
 8007e56:	4603      	mov	r3, r0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7f8 fadd 	bl	8000418 <__aeabi_f2d>
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	4b7a      	ldr	r3, [pc, #488]	; (800804c <MPU9250SelfTest+0x6ec>)
 8007e64:	f7f8 f978 	bl	8000158 <__aeabi_dsub>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	a174      	add	r1, pc, #464	; (adr r1, 8008040 <MPU9250SelfTest+0x6e0>)
 8007e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e72:	f002 fe8d 	bl	800ab90 <pow>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	f7f8 fb23 	bl	80004c8 <__aeabi_dmul>
 8007e82:	4603      	mov	r3, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	4618      	mov	r0, r3
 8007e88:	4621      	mov	r1, r4
 8007e8a:	f7f8 fded 	bl	8000a68 <__aeabi_d2f>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	623b      	str	r3, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8007e92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007e96:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7f8 feec 	bl	8000c7c <__aeabi_i2f>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7f8 fab6 	bl	8000418 <__aeabi_f2d>
 8007eac:	4604      	mov	r4, r0
 8007eae:	460d      	mov	r5, r1
 8007eb0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7f8 fedd 	bl	8000c74 <__aeabi_ui2f>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f8 faab 	bl	8000418 <__aeabi_f2d>
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	4b61      	ldr	r3, [pc, #388]	; (800804c <MPU9250SelfTest+0x6ec>)
 8007ec8:	f7f8 f946 	bl	8000158 <__aeabi_dsub>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	a15b      	add	r1, pc, #364	; (adr r1, 8008040 <MPU9250SelfTest+0x6e0>)
 8007ed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ed6:	f002 fe5b 	bl	800ab90 <pow>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7f8 faf1 	bl	80004c8 <__aeabi_dmul>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	460c      	mov	r4, r1
 8007eea:	4618      	mov	r0, r3
 8007eec:	4621      	mov	r1, r4
 8007eee:	f7f8 fdbb 	bl	8000a68 <__aeabi_d2f>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8007ef6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007efa:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7f8 feba 	bl	8000c7c <__aeabi_i2f>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7f8 fa84 	bl	8000418 <__aeabi_f2d>
 8007f10:	4604      	mov	r4, r0
 8007f12:	460d      	mov	r5, r1
 8007f14:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7f8 feab 	bl	8000c74 <__aeabi_ui2f>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7f8 fa79 	bl	8000418 <__aeabi_f2d>
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	4b48      	ldr	r3, [pc, #288]	; (800804c <MPU9250SelfTest+0x6ec>)
 8007f2c:	f7f8 f914 	bl	8000158 <__aeabi_dsub>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	a142      	add	r1, pc, #264	; (adr r1, 8008040 <MPU9250SelfTest+0x6e0>)
 8007f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f3a:	f002 fe29 	bl	800ab90 <pow>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4620      	mov	r0, r4
 8007f44:	4629      	mov	r1, r5
 8007f46:	f7f8 fabf 	bl	80004c8 <__aeabi_dmul>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	4618      	mov	r0, r3
 8007f50:	4621      	mov	r1, r4
 8007f52:	f7f8 fd89 	bl	8000a68 <__aeabi_d2f>
 8007f56:	4603      	mov	r3, r0
 8007f58:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8007f5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007f5e:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7f8 fe88 	bl	8000c7c <__aeabi_i2f>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7f8 fa52 	bl	8000418 <__aeabi_f2d>
 8007f74:	4604      	mov	r4, r0
 8007f76:	460d      	mov	r5, r1
 8007f78:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7f8 fe79 	bl	8000c74 <__aeabi_ui2f>
 8007f82:	4603      	mov	r3, r0
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7f8 fa47 	bl	8000418 <__aeabi_f2d>
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	4b2f      	ldr	r3, [pc, #188]	; (800804c <MPU9250SelfTest+0x6ec>)
 8007f90:	f7f8 f8e2 	bl	8000158 <__aeabi_dsub>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	a129      	add	r1, pc, #164	; (adr r1, 8008040 <MPU9250SelfTest+0x6e0>)
 8007f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f9e:	f002 fdf7 	bl	800ab90 <pow>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f8 fa8d 	bl	80004c8 <__aeabi_dmul>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	f7f8 fd57 	bl	8000a68 <__aeabi_d2f>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8007fbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007fc2:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7f8 fe56 	bl	8000c7c <__aeabi_i2f>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7f8 fa20 	bl	8000418 <__aeabi_f2d>
 8007fd8:	4604      	mov	r4, r0
 8007fda:	460d      	mov	r5, r1
 8007fdc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7f8 fe47 	bl	8000c74 <__aeabi_ui2f>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7f8 fa15 	bl	8000418 <__aeabi_f2d>
 8007fee:	f04f 0200 	mov.w	r2, #0
 8007ff2:	4b16      	ldr	r3, [pc, #88]	; (800804c <MPU9250SelfTest+0x6ec>)
 8007ff4:	f7f8 f8b0 	bl	8000158 <__aeabi_dsub>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	a110      	add	r1, pc, #64	; (adr r1, 8008040 <MPU9250SelfTest+0x6e0>)
 8007ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008002:	f002 fdc5 	bl	800ab90 <pow>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4620      	mov	r0, r4
 800800c:	4629      	mov	r1, r5
 800800e:	f7f8 fa5b 	bl	80004c8 <__aeabi_dmul>
 8008012:	4603      	mov	r3, r0
 8008014:	460c      	mov	r4, r1
 8008016:	4618      	mov	r0, r3
 8008018:	4621      	mov	r1, r4
 800801a:	f7f8 fd25 	bl	8000a68 <__aeabi_d2f>
 800801e:	4603      	mov	r3, r0
 8008020:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8008022:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008026:	f640 223c 	movw	r2, #2620	; 0xa3c
 800802a:	fa02 f303 	lsl.w	r3, r2, r3
 800802e:	4618      	mov	r0, r3
 8008030:	f7f8 fe24 	bl	8000c7c <__aeabi_i2f>
 8008034:	4603      	mov	r3, r0
 8008036:	4618      	mov	r0, r3
 8008038:	e00a      	b.n	8008050 <MPU9250SelfTest+0x6f0>
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w
 8008040:	c28f5c29 	.word	0xc28f5c29
 8008044:	3ff028f5 	.word	0x3ff028f5
 8008048:	51eb851f 	.word	0x51eb851f
 800804c:	3ff00000 	.word	0x3ff00000
 8008050:	f7f8 f9e2 	bl	8000418 <__aeabi_f2d>
 8008054:	4604      	mov	r4, r0
 8008056:	460d      	mov	r5, r1
 8008058:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800805c:	4618      	mov	r0, r3
 800805e:	f7f8 fe09 	bl	8000c74 <__aeabi_ui2f>
 8008062:	4603      	mov	r3, r0
 8008064:	4618      	mov	r0, r3
 8008066:	f7f8 f9d7 	bl	8000418 <__aeabi_f2d>
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	4ba8      	ldr	r3, [pc, #672]	; (8008310 <MPU9250SelfTest+0x9b0>)
 8008070:	f7f8 f872 	bl	8000158 <__aeabi_dsub>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	a1a3      	add	r1, pc, #652	; (adr r1, 8008308 <MPU9250SelfTest+0x9a8>)
 800807a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800807e:	f002 fd87 	bl	800ab90 <pow>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 fa1d 	bl	80004c8 <__aeabi_dmul>
 800808e:	4603      	mov	r3, r0
 8008090:	460c      	mov	r4, r1
 8008092:	4618      	mov	r0, r3
 8008094:	4621      	mov	r1, r4
 8008096:	f7f8 fce7 	bl	8000a68 <__aeabi_d2f>
 800809a:	4603      	mov	r3, r0
 800809c:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 800809e:	2300      	movs	r3, #0
 80080a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080a2:	e092      	b.n	80081ca <MPU9250SelfTest+0x86a>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 80080a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80080ac:	4413      	add	r3, r2
 80080ae:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80080b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80080ba:	440b      	add	r3, r1
 80080bc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7f8 fdda 	bl	8000c7c <__aeabi_i2f>
 80080c8:	4603      	mov	r3, r0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7f8 f9a4 	bl	8000418 <__aeabi_f2d>
 80080d0:	f04f 0200 	mov.w	r2, #0
 80080d4:	4b8f      	ldr	r3, [pc, #572]	; (8008314 <MPU9250SelfTest+0x9b4>)
 80080d6:	f7f8 f9f7 	bl	80004c8 <__aeabi_dmul>
 80080da:	4603      	mov	r3, r0
 80080dc:	460c      	mov	r4, r1
 80080de:	4625      	mov	r5, r4
 80080e0:	461c      	mov	r4, r3
 80080e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80080ea:	4413      	add	r3, r2
 80080ec:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7f8 f991 	bl	8000418 <__aeabi_f2d>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4620      	mov	r0, r4
 80080fc:	4629      	mov	r1, r5
 80080fe:	f7f8 fb0d 	bl	800071c <__aeabi_ddiv>
 8008102:	4603      	mov	r3, r0
 8008104:	460c      	mov	r4, r1
 8008106:	4618      	mov	r0, r3
 8008108:	4621      	mov	r1, r4
 800810a:	f04f 0200 	mov.w	r2, #0
 800810e:	4b81      	ldr	r3, [pc, #516]	; (8008314 <MPU9250SelfTest+0x9b4>)
 8008110:	f7f8 f822 	bl	8000158 <__aeabi_dsub>
 8008114:	4603      	mov	r3, r0
 8008116:	460c      	mov	r4, r1
 8008118:	4618      	mov	r0, r3
 800811a:	4621      	mov	r1, r4
 800811c:	f7f8 fc84 	bl	8000a28 <__aeabi_d2uiz>
 8008120:	4602      	mov	r2, r0
 8008122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800812a:	440b      	add	r3, r1
 800812c:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8008130:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008138:	4413      	add	r3, r2
 800813a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800813e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8008146:	440b      	add	r3, r1
 8008148:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	4618      	mov	r0, r3
 8008150:	f7f8 fd94 	bl	8000c7c <__aeabi_i2f>
 8008154:	4603      	mov	r3, r0
 8008156:	4618      	mov	r0, r3
 8008158:	f7f8 f95e 	bl	8000418 <__aeabi_f2d>
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	4b6c      	ldr	r3, [pc, #432]	; (8008314 <MPU9250SelfTest+0x9b4>)
 8008162:	f7f8 f9b1 	bl	80004c8 <__aeabi_dmul>
 8008166:	4603      	mov	r3, r0
 8008168:	460c      	mov	r4, r1
 800816a:	4625      	mov	r5, r4
 800816c:	461c      	mov	r4, r3
 800816e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008170:	3303      	adds	r3, #3
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008178:	4413      	add	r3, r2
 800817a:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800817e:	4618      	mov	r0, r3
 8008180:	f7f8 f94a 	bl	8000418 <__aeabi_f2d>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4620      	mov	r0, r4
 800818a:	4629      	mov	r1, r5
 800818c:	f7f8 fac6 	bl	800071c <__aeabi_ddiv>
 8008190:	4603      	mov	r3, r0
 8008192:	460c      	mov	r4, r1
 8008194:	4618      	mov	r0, r3
 8008196:	4621      	mov	r1, r4
 8008198:	f04f 0200 	mov.w	r2, #0
 800819c:	4b5d      	ldr	r3, [pc, #372]	; (8008314 <MPU9250SelfTest+0x9b4>)
 800819e:	f7f7 ffdb 	bl	8000158 <__aeabi_dsub>
 80081a2:	4603      	mov	r3, r0
 80081a4:	460c      	mov	r4, r1
 80081a6:	4619      	mov	r1, r3
 80081a8:	4622      	mov	r2, r4
 80081aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081ac:	1cdc      	adds	r4, r3, #3
 80081ae:	4608      	mov	r0, r1
 80081b0:	4611      	mov	r1, r2
 80081b2:	f7f8 fc39 	bl	8000a28 <__aeabi_d2uiz>
 80081b6:	4602      	mov	r2, r0
 80081b8:	00a3      	lsls	r3, r4, #2
 80081ba:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80081be:	440b      	add	r3, r1
 80081c0:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 80081c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081c6:	3301      	adds	r3, #1
 80081c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	f77f af69 	ble.w	80080a4 <MPU9250SelfTest+0x744>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");
#endif

   for (int i = 0; i < 3; i++) {
 80081d2:	2300      	movs	r3, #0
 80081d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80081d6:	e08c      	b.n	80082f2 <MPU9250SelfTest+0x992>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 80081d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80081e0:	4413      	add	r3, r2
 80081e2:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80081e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80081ee:	440b      	add	r3, r1
 80081f0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7f8 fd40 	bl	8000c7c <__aeabi_i2f>
 80081fc:	4603      	mov	r3, r0
 80081fe:	4618      	mov	r0, r3
 8008200:	f7f8 f90a 	bl	8000418 <__aeabi_f2d>
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	4b42      	ldr	r3, [pc, #264]	; (8008314 <MPU9250SelfTest+0x9b4>)
 800820a:	f7f8 f95d 	bl	80004c8 <__aeabi_dmul>
 800820e:	4603      	mov	r3, r0
 8008210:	460c      	mov	r4, r1
 8008212:	4625      	mov	r5, r4
 8008214:	461c      	mov	r4, r3
 8008216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800821e:	4413      	add	r3, r2
 8008220:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8008224:	4618      	mov	r0, r3
 8008226:	f7f8 f8f7 	bl	8000418 <__aeabi_f2d>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4620      	mov	r0, r4
 8008230:	4629      	mov	r1, r5
 8008232:	f7f8 fa73 	bl	800071c <__aeabi_ddiv>
 8008236:	4603      	mov	r3, r0
 8008238:	460c      	mov	r4, r1
 800823a:	4618      	mov	r0, r3
 800823c:	4621      	mov	r1, r4
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	4b34      	ldr	r3, [pc, #208]	; (8008314 <MPU9250SelfTest+0x9b4>)
 8008244:	f7f7 ff88 	bl	8000158 <__aeabi_dsub>
 8008248:	4603      	mov	r3, r0
 800824a:	460c      	mov	r4, r1
 800824c:	4618      	mov	r0, r3
 800824e:	4621      	mov	r1, r4
 8008250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	18d4      	adds	r4, r2, r3
 8008258:	f7f8 fc06 	bl	8000a68 <__aeabi_d2f>
 800825c:	4603      	mov	r3, r0
 800825e:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8008260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008268:	4413      	add	r3, r2
 800826a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800826e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8008276:	440b      	add	r3, r1
 8008278:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	4618      	mov	r0, r3
 8008280:	f7f8 fcfc 	bl	8000c7c <__aeabi_i2f>
 8008284:	4603      	mov	r3, r0
 8008286:	4618      	mov	r0, r3
 8008288:	f7f8 f8c6 	bl	8000418 <__aeabi_f2d>
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	4b20      	ldr	r3, [pc, #128]	; (8008314 <MPU9250SelfTest+0x9b4>)
 8008292:	f7f8 f919 	bl	80004c8 <__aeabi_dmul>
 8008296:	4603      	mov	r3, r0
 8008298:	460c      	mov	r4, r1
 800829a:	4625      	mov	r5, r4
 800829c:	461c      	mov	r4, r3
 800829e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082a0:	3303      	adds	r3, #3
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80082a8:	4413      	add	r3, r2
 80082aa:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7f8 f8b2 	bl	8000418 <__aeabi_f2d>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4620      	mov	r0, r4
 80082ba:	4629      	mov	r1, r5
 80082bc:	f7f8 fa2e 	bl	800071c <__aeabi_ddiv>
 80082c0:	4603      	mov	r3, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	4618      	mov	r0, r3
 80082c6:	4621      	mov	r1, r4
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	4b11      	ldr	r3, [pc, #68]	; (8008314 <MPU9250SelfTest+0x9b4>)
 80082ce:	f7f7 ff43 	bl	8000158 <__aeabi_dsub>
 80082d2:	4603      	mov	r3, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	4618      	mov	r0, r3
 80082d8:	4621      	mov	r1, r4
 80082da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082dc:	3303      	adds	r3, #3
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	18d4      	adds	r4, r2, r3
 80082e4:	f7f8 fbc0 	bl	8000a68 <__aeabi_d2f>
 80082e8:	4603      	mov	r3, r0
 80082ea:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 80082ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082ee:	3301      	adds	r3, #1
 80082f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80082f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	f77f af6f 	ble.w	80081d8 <MPU9250SelfTest+0x878>
   }
}
 80082fa:	bf00      	nop
 80082fc:	3790      	adds	r7, #144	; 0x90
 80082fe:	46bd      	mov	sp, r7
 8008300:	bdb0      	pop	{r4, r5, r7, pc}
 8008302:	bf00      	nop
 8008304:	f3af 8000 	nop.w
 8008308:	c28f5c29 	.word	0xc28f5c29
 800830c:	3ff028f5 	.word	0x3ff028f5
 8008310:	3ff00000 	.word	0x3ff00000
 8008314:	40590000 	.word	0x40590000

08008318 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 8008318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800831a:	b0ad      	sub	sp, #180	; 0xb4
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8008326:	4b8a      	ldr	r3, [pc, #552]	; (8008550 <QuaternionUpdate+0x238>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800832e:	4b88      	ldr	r3, [pc, #544]	; (8008550 <QuaternionUpdate+0x238>)
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008336:	4b86      	ldr	r3, [pc, #536]	; (8008550 <QuaternionUpdate+0x238>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800833e:	4b84      	ldr	r3, [pc, #528]	; (8008550 <QuaternionUpdate+0x238>)
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8008346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800834a:	4619      	mov	r1, r3
 800834c:	4618      	mov	r0, r3
 800834e:	f7f8 fbe1 	bl	8000b14 <__addsf3>
 8008352:	4603      	mov	r3, r0
 8008354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float _2q2 = 2.0f * q2;
 8008358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800835c:	4619      	mov	r1, r3
 800835e:	4618      	mov	r0, r3
 8008360:	f7f8 fbd8 	bl	8000b14 <__addsf3>
 8008364:	4603      	mov	r3, r0
 8008366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float _2q3 = 2.0f * q3;
 800836a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800836e:	4619      	mov	r1, r3
 8008370:	4618      	mov	r0, r3
 8008372:	f7f8 fbcf 	bl	8000b14 <__addsf3>
 8008376:	4603      	mov	r3, r0
 8008378:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float _2q4 = 2.0f * q4;
 800837c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008380:	4619      	mov	r1, r3
 8008382:	4618      	mov	r0, r3
 8008384:	f7f8 fbc6 	bl	8000b14 <__addsf3>
 8008388:	4603      	mov	r3, r0
 800838a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 800838e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008392:	4619      	mov	r1, r3
 8008394:	4618      	mov	r0, r3
 8008396:	f7f8 fbbd 	bl	8000b14 <__addsf3>
 800839a:	4603      	mov	r3, r0
 800839c:	4619      	mov	r1, r3
 800839e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80083a2:	f7f8 fcbf 	bl	8000d24 <__aeabi_fmul>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 80083ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7f8 fbae 	bl	8000b14 <__addsf3>
 80083b8:	4603      	mov	r3, r0
 80083ba:	4619      	mov	r1, r3
 80083bc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80083c0:	f7f8 fcb0 	bl	8000d24 <__aeabi_fmul>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 80083ca:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80083ce:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80083d2:	f7f8 fca7 	bl	8000d24 <__aeabi_fmul>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 80083dc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80083e0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80083e4:	f7f8 fc9e 	bl	8000d24 <__aeabi_fmul>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 80083ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083f2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80083f6:	f7f8 fc95 	bl	8000d24 <__aeabi_fmul>
 80083fa:	4603      	mov	r3, r0
 80083fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1q4 = q1 * q4;
 80083fe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008402:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008406:	f7f8 fc8d 	bl	8000d24 <__aeabi_fmul>
 800840a:	4603      	mov	r3, r0
 800840c:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2q2 = q2 * q2;
 800840e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008412:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008416:	f7f8 fc85 	bl	8000d24 <__aeabi_fmul>
 800841a:	4603      	mov	r3, r0
 800841c:	677b      	str	r3, [r7, #116]	; 0x74
    float q2q3 = q2 * q3;
 800841e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008422:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008426:	f7f8 fc7d 	bl	8000d24 <__aeabi_fmul>
 800842a:	4603      	mov	r3, r0
 800842c:	673b      	str	r3, [r7, #112]	; 0x70
    float q2q4 = q2 * q4;
 800842e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008432:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008436:	f7f8 fc75 	bl	8000d24 <__aeabi_fmul>
 800843a:	4603      	mov	r3, r0
 800843c:	66fb      	str	r3, [r7, #108]	; 0x6c
    float q3q3 = q3 * q3;
 800843e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008442:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008446:	f7f8 fc6d 	bl	8000d24 <__aeabi_fmul>
 800844a:	4603      	mov	r3, r0
 800844c:	66bb      	str	r3, [r7, #104]	; 0x68
    float q3q4 = q3 * q4;
 800844e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008452:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008456:	f7f8 fc65 	bl	8000d24 <__aeabi_fmul>
 800845a:	4603      	mov	r3, r0
 800845c:	667b      	str	r3, [r7, #100]	; 0x64
    float q4q4 = q4 * q4;
 800845e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008462:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008466:	f7f8 fc5d 	bl	8000d24 <__aeabi_fmul>
 800846a:	4603      	mov	r3, r0
 800846c:	663b      	str	r3, [r7, #96]	; 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 800846e:	68f9      	ldr	r1, [r7, #12]
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f7f8 fc57 	bl	8000d24 <__aeabi_fmul>
 8008476:	4603      	mov	r3, r0
 8008478:	461c      	mov	r4, r3
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	68b8      	ldr	r0, [r7, #8]
 800847e:	f7f8 fc51 	bl	8000d24 <__aeabi_fmul>
 8008482:	4603      	mov	r3, r0
 8008484:	4619      	mov	r1, r3
 8008486:	4620      	mov	r0, r4
 8008488:	f7f8 fb44 	bl	8000b14 <__addsf3>
 800848c:	4603      	mov	r3, r0
 800848e:	461c      	mov	r4, r3
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7f8 fc46 	bl	8000d24 <__aeabi_fmul>
 8008498:	4603      	mov	r3, r0
 800849a:	4619      	mov	r1, r3
 800849c:	4620      	mov	r0, r4
 800849e:	f7f8 fb39 	bl	8000b14 <__addsf3>
 80084a2:	4603      	mov	r3, r0
 80084a4:	4618      	mov	r0, r3
 80084a6:	f002 fd1f 	bl	800aee8 <sqrtf>
 80084aa:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 80084ac:	f04f 0100 	mov.w	r1, #0
 80084b0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80084b2:	f7f8 fdcb 	bl	800104c <__aeabi_fcmpeq>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f040 87e3 	bne.w	8009484 <QuaternionUpdate+0x116c>
    norm = 1.0f/norm;
 80084be:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80084c0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80084c4:	f7f8 fce2 	bl	8000e8c <__aeabi_fdiv>
 80084c8:	4603      	mov	r3, r0
 80084ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    ax *= norm;
 80084cc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7f8 fc28 	bl	8000d24 <__aeabi_fmul>
 80084d4:	4603      	mov	r3, r0
 80084d6:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 80084d8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80084da:	68b8      	ldr	r0, [r7, #8]
 80084dc:	f7f8 fc22 	bl	8000d24 <__aeabi_fmul>
 80084e0:	4603      	mov	r3, r0
 80084e2:	60bb      	str	r3, [r7, #8]
    az *= norm;
 80084e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7f8 fc1c 	bl	8000d24 <__aeabi_fmul>
 80084ec:	4603      	mov	r3, r0
 80084ee:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 80084f0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80084f4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80084f8:	f7f8 fc14 	bl	8000d24 <__aeabi_fmul>
 80084fc:	4603      	mov	r3, r0
 80084fe:	461c      	mov	r4, r3
 8008500:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008504:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8008508:	f7f8 fc0c 	bl	8000d24 <__aeabi_fmul>
 800850c:	4603      	mov	r3, r0
 800850e:	4619      	mov	r1, r3
 8008510:	4620      	mov	r0, r4
 8008512:	f7f8 faff 	bl	8000b14 <__addsf3>
 8008516:	4603      	mov	r3, r0
 8008518:	461c      	mov	r4, r3
 800851a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800851e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008522:	f7f8 fbff 	bl	8000d24 <__aeabi_fmul>
 8008526:	4603      	mov	r3, r0
 8008528:	4619      	mov	r1, r3
 800852a:	4620      	mov	r0, r4
 800852c:	f7f8 faf2 	bl	8000b14 <__addsf3>
 8008530:	4603      	mov	r3, r0
 8008532:	4618      	mov	r0, r3
 8008534:	f002 fcd8 	bl	800aee8 <sqrtf>
 8008538:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 800853a:	f04f 0100 	mov.w	r1, #0
 800853e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008540:	f7f8 fd84 	bl	800104c <__aeabi_fcmpeq>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	f040 879e 	bne.w	8009488 <QuaternionUpdate+0x1170>
 800854c:	e002      	b.n	8008554 <QuaternionUpdate+0x23c>
 800854e:	bf00      	nop
 8008550:	20000010 	.word	0x20000010
    norm = 1.0f/norm;
 8008554:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008556:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800855a:	f7f8 fc97 	bl	8000e8c <__aeabi_fdiv>
 800855e:	4603      	mov	r3, r0
 8008560:	65fb      	str	r3, [r7, #92]	; 0x5c
    mx *= norm;
 8008562:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008564:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008568:	f7f8 fbdc 	bl	8000d24 <__aeabi_fmul>
 800856c:	4603      	mov	r3, r0
 800856e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    my *= norm;
 8008572:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008574:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8008578:	f7f8 fbd4 	bl	8000d24 <__aeabi_fmul>
 800857c:	4603      	mov	r3, r0
 800857e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mz *= norm;
 8008582:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008584:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008588:	f7f8 fbcc 	bl	8000d24 <__aeabi_fmul>
 800858c:	4603      	mov	r3, r0
 800858e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 8008592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008596:	4619      	mov	r1, r3
 8008598:	4618      	mov	r0, r3
 800859a:	f7f8 fabb 	bl	8000b14 <__addsf3>
 800859e:	4603      	mov	r3, r0
 80085a0:	4619      	mov	r1, r3
 80085a2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80085a6:	f7f8 fbbd 	bl	8000d24 <__aeabi_fmul>
 80085aa:	4603      	mov	r3, r0
 80085ac:	65bb      	str	r3, [r7, #88]	; 0x58
    _2q1my = 2.0f * q1 * my;
 80085ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085b2:	4619      	mov	r1, r3
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7f8 faad 	bl	8000b14 <__addsf3>
 80085ba:	4603      	mov	r3, r0
 80085bc:	4619      	mov	r1, r3
 80085be:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80085c2:	f7f8 fbaf 	bl	8000d24 <__aeabi_fmul>
 80085c6:	4603      	mov	r3, r0
 80085c8:	657b      	str	r3, [r7, #84]	; 0x54
    _2q1mz = 2.0f * q1 * mz;
 80085ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085ce:	4619      	mov	r1, r3
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7f8 fa9f 	bl	8000b14 <__addsf3>
 80085d6:	4603      	mov	r3, r0
 80085d8:	4619      	mov	r1, r3
 80085da:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80085de:	f7f8 fba1 	bl	8000d24 <__aeabi_fmul>
 80085e2:	4603      	mov	r3, r0
 80085e4:	653b      	str	r3, [r7, #80]	; 0x50
    _2q2mx = 2.0f * q2 * mx;
 80085e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085ea:	4619      	mov	r1, r3
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7f8 fa91 	bl	8000b14 <__addsf3>
 80085f2:	4603      	mov	r3, r0
 80085f4:	4619      	mov	r1, r3
 80085f6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80085fa:	f7f8 fb93 	bl	8000d24 <__aeabi_fmul>
 80085fe:	4603      	mov	r3, r0
 8008600:	64fb      	str	r3, [r7, #76]	; 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8008602:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008606:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800860a:	f7f8 fb8b 	bl	8000d24 <__aeabi_fmul>
 800860e:	4603      	mov	r3, r0
 8008610:	461c      	mov	r4, r3
 8008612:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008616:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008618:	f7f8 fb84 	bl	8000d24 <__aeabi_fmul>
 800861c:	4603      	mov	r3, r0
 800861e:	4619      	mov	r1, r3
 8008620:	4620      	mov	r0, r4
 8008622:	f7f8 fa75 	bl	8000b10 <__aeabi_fsub>
 8008626:	4603      	mov	r3, r0
 8008628:	461c      	mov	r4, r3
 800862a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800862e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008630:	f7f8 fb78 	bl	8000d24 <__aeabi_fmul>
 8008634:	4603      	mov	r3, r0
 8008636:	4619      	mov	r1, r3
 8008638:	4620      	mov	r0, r4
 800863a:	f7f8 fa6b 	bl	8000b14 <__addsf3>
 800863e:	4603      	mov	r3, r0
 8008640:	461c      	mov	r4, r3
 8008642:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008644:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008648:	f7f8 fb6c 	bl	8000d24 <__aeabi_fmul>
 800864c:	4603      	mov	r3, r0
 800864e:	4619      	mov	r1, r3
 8008650:	4620      	mov	r0, r4
 8008652:	f7f8 fa5f 	bl	8000b14 <__addsf3>
 8008656:	4603      	mov	r3, r0
 8008658:	461c      	mov	r4, r3
 800865a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800865e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008662:	f7f8 fb5f 	bl	8000d24 <__aeabi_fmul>
 8008666:	4603      	mov	r3, r0
 8008668:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800866c:	4618      	mov	r0, r3
 800866e:	f7f8 fb59 	bl	8000d24 <__aeabi_fmul>
 8008672:	4603      	mov	r3, r0
 8008674:	4619      	mov	r1, r3
 8008676:	4620      	mov	r0, r4
 8008678:	f7f8 fa4c 	bl	8000b14 <__addsf3>
 800867c:	4603      	mov	r3, r0
 800867e:	461c      	mov	r4, r3
 8008680:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008684:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008688:	f7f8 fb4c 	bl	8000d24 <__aeabi_fmul>
 800868c:	4603      	mov	r3, r0
 800868e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008692:	4618      	mov	r0, r3
 8008694:	f7f8 fb46 	bl	8000d24 <__aeabi_fmul>
 8008698:	4603      	mov	r3, r0
 800869a:	4619      	mov	r1, r3
 800869c:	4620      	mov	r0, r4
 800869e:	f7f8 fa39 	bl	8000b14 <__addsf3>
 80086a2:	4603      	mov	r3, r0
 80086a4:	461c      	mov	r4, r3
 80086a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086a8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80086ac:	f7f8 fb3a 	bl	8000d24 <__aeabi_fmul>
 80086b0:	4603      	mov	r3, r0
 80086b2:	4619      	mov	r1, r3
 80086b4:	4620      	mov	r0, r4
 80086b6:	f7f8 fa2b 	bl	8000b10 <__aeabi_fsub>
 80086ba:	4603      	mov	r3, r0
 80086bc:	461c      	mov	r4, r3
 80086be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80086c0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80086c4:	f7f8 fb2e 	bl	8000d24 <__aeabi_fmul>
 80086c8:	4603      	mov	r3, r0
 80086ca:	4619      	mov	r1, r3
 80086cc:	4620      	mov	r0, r4
 80086ce:	f7f8 fa1f 	bl	8000b10 <__aeabi_fsub>
 80086d2:	4603      	mov	r3, r0
 80086d4:	64bb      	str	r3, [r7, #72]	; 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80086d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80086da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80086dc:	f7f8 fb22 	bl	8000d24 <__aeabi_fmul>
 80086e0:	4603      	mov	r3, r0
 80086e2:	461c      	mov	r4, r3
 80086e4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80086e8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80086ec:	f7f8 fb1a 	bl	8000d24 <__aeabi_fmul>
 80086f0:	4603      	mov	r3, r0
 80086f2:	4619      	mov	r1, r3
 80086f4:	4620      	mov	r0, r4
 80086f6:	f7f8 fa0d 	bl	8000b14 <__addsf3>
 80086fa:	4603      	mov	r3, r0
 80086fc:	461c      	mov	r4, r3
 80086fe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008702:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008704:	f7f8 fb0e 	bl	8000d24 <__aeabi_fmul>
 8008708:	4603      	mov	r3, r0
 800870a:	4619      	mov	r1, r3
 800870c:	4620      	mov	r0, r4
 800870e:	f7f8 f9ff 	bl	8000b10 <__aeabi_fsub>
 8008712:	4603      	mov	r3, r0
 8008714:	461c      	mov	r4, r3
 8008716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800871a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800871c:	f7f8 fb02 	bl	8000d24 <__aeabi_fmul>
 8008720:	4603      	mov	r3, r0
 8008722:	4619      	mov	r1, r3
 8008724:	4620      	mov	r0, r4
 8008726:	f7f8 f9f5 	bl	8000b14 <__addsf3>
 800872a:	4603      	mov	r3, r0
 800872c:	461c      	mov	r4, r3
 800872e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008730:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8008734:	f7f8 faf6 	bl	8000d24 <__aeabi_fmul>
 8008738:	4603      	mov	r3, r0
 800873a:	4619      	mov	r1, r3
 800873c:	4620      	mov	r0, r4
 800873e:	f7f8 f9e7 	bl	8000b10 <__aeabi_fsub>
 8008742:	4603      	mov	r3, r0
 8008744:	461c      	mov	r4, r3
 8008746:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008748:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800874c:	f7f8 faea 	bl	8000d24 <__aeabi_fmul>
 8008750:	4603      	mov	r3, r0
 8008752:	4619      	mov	r1, r3
 8008754:	4620      	mov	r0, r4
 8008756:	f7f8 f9dd 	bl	8000b14 <__addsf3>
 800875a:	4603      	mov	r3, r0
 800875c:	461c      	mov	r4, r3
 800875e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008762:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008766:	f7f8 fadd 	bl	8000d24 <__aeabi_fmul>
 800876a:	4603      	mov	r3, r0
 800876c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008770:	4618      	mov	r0, r3
 8008772:	f7f8 fad7 	bl	8000d24 <__aeabi_fmul>
 8008776:	4603      	mov	r3, r0
 8008778:	4619      	mov	r1, r3
 800877a:	4620      	mov	r0, r4
 800877c:	f7f8 f9ca 	bl	8000b14 <__addsf3>
 8008780:	4603      	mov	r3, r0
 8008782:	461c      	mov	r4, r3
 8008784:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008786:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800878a:	f7f8 facb 	bl	8000d24 <__aeabi_fmul>
 800878e:	4603      	mov	r3, r0
 8008790:	4619      	mov	r1, r3
 8008792:	4620      	mov	r0, r4
 8008794:	f7f8 f9bc 	bl	8000b10 <__aeabi_fsub>
 8008798:	4603      	mov	r3, r0
 800879a:	647b      	str	r3, [r7, #68]	; 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 800879c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800879e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80087a0:	f7f8 fac0 	bl	8000d24 <__aeabi_fmul>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461c      	mov	r4, r3
 80087a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80087ac:	f7f8 faba 	bl	8000d24 <__aeabi_fmul>
 80087b0:	4603      	mov	r3, r0
 80087b2:	4619      	mov	r1, r3
 80087b4:	4620      	mov	r0, r4
 80087b6:	f7f8 f9ad 	bl	8000b14 <__addsf3>
 80087ba:	4603      	mov	r3, r0
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 fb93 	bl	800aee8 <sqrtf>
 80087c2:	6438      	str	r0, [r7, #64]	; 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80087c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80087ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7f8 faa8 	bl	8000d24 <__aeabi_fmul>
 80087d4:	4603      	mov	r3, r0
 80087d6:	461c      	mov	r4, r3
 80087d8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80087dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80087de:	f7f8 faa1 	bl	8000d24 <__aeabi_fmul>
 80087e2:	4603      	mov	r3, r0
 80087e4:	4619      	mov	r1, r3
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7f8 f994 	bl	8000b14 <__addsf3>
 80087ec:	4603      	mov	r3, r0
 80087ee:	461c      	mov	r4, r3
 80087f0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80087f4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80087f8:	f7f8 fa94 	bl	8000d24 <__aeabi_fmul>
 80087fc:	4603      	mov	r3, r0
 80087fe:	4619      	mov	r1, r3
 8008800:	4620      	mov	r0, r4
 8008802:	f7f8 f987 	bl	8000b14 <__addsf3>
 8008806:	4603      	mov	r3, r0
 8008808:	461c      	mov	r4, r3
 800880a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800880e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008810:	f7f8 fa88 	bl	8000d24 <__aeabi_fmul>
 8008814:	4603      	mov	r3, r0
 8008816:	4619      	mov	r1, r3
 8008818:	4620      	mov	r0, r4
 800881a:	f7f8 f97b 	bl	8000b14 <__addsf3>
 800881e:	4603      	mov	r3, r0
 8008820:	461c      	mov	r4, r3
 8008822:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008824:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008828:	f7f8 fa7c 	bl	8000d24 <__aeabi_fmul>
 800882c:	4603      	mov	r3, r0
 800882e:	4619      	mov	r1, r3
 8008830:	4620      	mov	r0, r4
 8008832:	f7f8 f96d 	bl	8000b10 <__aeabi_fsub>
 8008836:	4603      	mov	r3, r0
 8008838:	461c      	mov	r4, r3
 800883a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800883e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008842:	f7f8 fa6f 	bl	8000d24 <__aeabi_fmul>
 8008846:	4603      	mov	r3, r0
 8008848:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800884c:	4618      	mov	r0, r3
 800884e:	f7f8 fa69 	bl	8000d24 <__aeabi_fmul>
 8008852:	4603      	mov	r3, r0
 8008854:	4619      	mov	r1, r3
 8008856:	4620      	mov	r0, r4
 8008858:	f7f8 f95c 	bl	8000b14 <__addsf3>
 800885c:	4603      	mov	r3, r0
 800885e:	461c      	mov	r4, r3
 8008860:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008862:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008866:	f7f8 fa5d 	bl	8000d24 <__aeabi_fmul>
 800886a:	4603      	mov	r3, r0
 800886c:	4619      	mov	r1, r3
 800886e:	4620      	mov	r0, r4
 8008870:	f7f8 f94e 	bl	8000b10 <__aeabi_fsub>
 8008874:	4603      	mov	r3, r0
 8008876:	461c      	mov	r4, r3
 8008878:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800887a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800887e:	f7f8 fa51 	bl	8000d24 <__aeabi_fmul>
 8008882:	4603      	mov	r3, r0
 8008884:	4619      	mov	r1, r3
 8008886:	4620      	mov	r0, r4
 8008888:	f7f8 f944 	bl	8000b14 <__addsf3>
 800888c:	4603      	mov	r3, r0
 800888e:	63fb      	str	r3, [r7, #60]	; 0x3c
    _4bx = 2.0f * _2bx;
 8008890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008892:	4619      	mov	r1, r3
 8008894:	4618      	mov	r0, r3
 8008896:	f7f8 f93d 	bl	8000b14 <__addsf3>
 800889a:	4603      	mov	r3, r0
 800889c:	63bb      	str	r3, [r7, #56]	; 0x38
    _4bz = 2.0f * _2bz;
 800889e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a0:	4619      	mov	r1, r3
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7f8 f936 	bl	8000b14 <__addsf3>
 80088a8:	4603      	mov	r3, r0
 80088aa:	637b      	str	r3, [r7, #52]	; 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80088ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088b0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80088b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b6:	4619      	mov	r1, r3
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7f8 f92b 	bl	8000b14 <__addsf3>
 80088be:	4603      	mov	r3, r0
 80088c0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7f8 f923 	bl	8000b10 <__aeabi_fsub>
 80088ca:	4603      	mov	r3, r0
 80088cc:	68f9      	ldr	r1, [r7, #12]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7f8 f91e 	bl	8000b10 <__aeabi_fsub>
 80088d4:	4603      	mov	r3, r0
 80088d6:	4619      	mov	r1, r3
 80088d8:	4620      	mov	r0, r4
 80088da:	f7f8 fa23 	bl	8000d24 <__aeabi_fmul>
 80088de:	4603      	mov	r3, r0
 80088e0:	461c      	mov	r4, r3
 80088e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088e6:	4619      	mov	r1, r3
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7f8 f913 	bl	8000b14 <__addsf3>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7f8 f90d 	bl	8000b14 <__addsf3>
 80088fa:	4603      	mov	r3, r0
 80088fc:	68b9      	ldr	r1, [r7, #8]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f8 f906 	bl	8000b10 <__aeabi_fsub>
 8008904:	4603      	mov	r3, r0
 8008906:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800890a:	4618      	mov	r0, r3
 800890c:	f7f8 fa0a 	bl	8000d24 <__aeabi_fmul>
 8008910:	4603      	mov	r3, r0
 8008912:	4619      	mov	r1, r3
 8008914:	4620      	mov	r0, r4
 8008916:	f7f8 f8fd 	bl	8000b14 <__addsf3>
 800891a:	4603      	mov	r3, r0
 800891c:	461c      	mov	r4, r3
 800891e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008922:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008924:	f7f8 f9fe 	bl	8000d24 <__aeabi_fmul>
 8008928:	4603      	mov	r3, r0
 800892a:	461d      	mov	r5, r3
 800892c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800892e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008932:	f7f8 f8ed 	bl	8000b10 <__aeabi_fsub>
 8008936:	4603      	mov	r3, r0
 8008938:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800893a:	4618      	mov	r0, r3
 800893c:	f7f8 f8e8 	bl	8000b10 <__aeabi_fsub>
 8008940:	4603      	mov	r3, r0
 8008942:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008944:	4618      	mov	r0, r3
 8008946:	f7f8 f9ed 	bl	8000d24 <__aeabi_fmul>
 800894a:	4603      	mov	r3, r0
 800894c:	461e      	mov	r6, r3
 800894e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008950:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008952:	f7f8 f8dd 	bl	8000b10 <__aeabi_fsub>
 8008956:	4603      	mov	r3, r0
 8008958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800895a:	4618      	mov	r0, r3
 800895c:	f7f8 f9e2 	bl	8000d24 <__aeabi_fmul>
 8008960:	4603      	mov	r3, r0
 8008962:	4619      	mov	r1, r3
 8008964:	4630      	mov	r0, r6
 8008966:	f7f8 f8d5 	bl	8000b14 <__addsf3>
 800896a:	4603      	mov	r3, r0
 800896c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008970:	4618      	mov	r0, r3
 8008972:	f7f8 f8cd 	bl	8000b10 <__aeabi_fsub>
 8008976:	4603      	mov	r3, r0
 8008978:	4619      	mov	r1, r3
 800897a:	4628      	mov	r0, r5
 800897c:	f7f8 f9d2 	bl	8000d24 <__aeabi_fmul>
 8008980:	4603      	mov	r3, r0
 8008982:	4619      	mov	r1, r3
 8008984:	4620      	mov	r0, r4
 8008986:	f7f8 f8c3 	bl	8000b10 <__aeabi_fsub>
 800898a:	4603      	mov	r3, r0
 800898c:	461c      	mov	r4, r3
 800898e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008990:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008994:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008998:	4618      	mov	r0, r3
 800899a:	f7f8 f9c3 	bl	8000d24 <__aeabi_fmul>
 800899e:	4603      	mov	r3, r0
 80089a0:	461d      	mov	r5, r3
 80089a2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80089a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80089a8:	f7f8 f9bc 	bl	8000d24 <__aeabi_fmul>
 80089ac:	4603      	mov	r3, r0
 80089ae:	4619      	mov	r1, r3
 80089b0:	4628      	mov	r0, r5
 80089b2:	f7f8 f8af 	bl	8000b14 <__addsf3>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461d      	mov	r5, r3
 80089ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80089bc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80089be:	f7f8 f8a7 	bl	8000b10 <__aeabi_fsub>
 80089c2:	4603      	mov	r3, r0
 80089c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7f8 f9ac 	bl	8000d24 <__aeabi_fmul>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461e      	mov	r6, r3
 80089d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80089d2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80089d6:	f7f8 f89d 	bl	8000b14 <__addsf3>
 80089da:	4603      	mov	r3, r0
 80089dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089de:	4618      	mov	r0, r3
 80089e0:	f7f8 f9a0 	bl	8000d24 <__aeabi_fmul>
 80089e4:	4603      	mov	r3, r0
 80089e6:	4619      	mov	r1, r3
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7f8 f893 	bl	8000b14 <__addsf3>
 80089ee:	4603      	mov	r3, r0
 80089f0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7f8 f88b 	bl	8000b10 <__aeabi_fsub>
 80089fa:	4603      	mov	r3, r0
 80089fc:	4619      	mov	r1, r3
 80089fe:	4628      	mov	r0, r5
 8008a00:	f7f8 f990 	bl	8000d24 <__aeabi_fmul>
 8008a04:	4603      	mov	r3, r0
 8008a06:	4619      	mov	r1, r3
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7f8 f883 	bl	8000b14 <__addsf3>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	461c      	mov	r4, r3
 8008a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a16:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008a18:	f7f8 f984 	bl	8000d24 <__aeabi_fmul>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461d      	mov	r5, r3
 8008a20:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008a22:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008a24:	f7f8 f876 	bl	8000b14 <__addsf3>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7f8 f979 	bl	8000d24 <__aeabi_fmul>
 8008a32:	4603      	mov	r3, r0
 8008a34:	461e      	mov	r6, r3
 8008a36:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008a38:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008a3c:	f7f8 f868 	bl	8000b10 <__aeabi_fsub>
 8008a40:	4603      	mov	r3, r0
 8008a42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7f8 f863 	bl	8000b10 <__aeabi_fsub>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f8 f968 	bl	8000d24 <__aeabi_fmul>
 8008a54:	4603      	mov	r3, r0
 8008a56:	4619      	mov	r1, r3
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f7f8 f85b 	bl	8000b14 <__addsf3>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7f8 f853 	bl	8000b10 <__aeabi_fsub>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f7f8 f958 	bl	8000d24 <__aeabi_fmul>
 8008a74:	4603      	mov	r3, r0
 8008a76:	4619      	mov	r1, r3
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f7f8 f84b 	bl	8000b14 <__addsf3>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8008a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a84:	4619      	mov	r1, r3
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7f8 f844 	bl	8000b14 <__addsf3>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7f8 f83c 	bl	8000b10 <__aeabi_fsub>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	68f9      	ldr	r1, [r7, #12]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7f8 f837 	bl	8000b10 <__aeabi_fsub>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7f8 f93b 	bl	8000d24 <__aeabi_fmul>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	461c      	mov	r4, r3
 8008ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7f8 f82b 	bl	8000b14 <__addsf3>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f8 f825 	bl	8000b14 <__addsf3>
 8008aca:	4603      	mov	r3, r0
 8008acc:	68b9      	ldr	r1, [r7, #8]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7f8 f81e 	bl	8000b10 <__aeabi_fsub>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7f8 f922 	bl	8000d24 <__aeabi_fmul>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f7f8 f815 	bl	8000b14 <__addsf3>
 8008aea:	4603      	mov	r3, r0
 8008aec:	461c      	mov	r4, r3
 8008aee:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8008af2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008af6:	f7f8 f915 	bl	8000d24 <__aeabi_fmul>
 8008afa:	4603      	mov	r3, r0
 8008afc:	461d      	mov	r5, r3
 8008afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b00:	4619      	mov	r1, r3
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f8 f806 	bl	8000b14 <__addsf3>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008b10:	f7f7 fffe 	bl	8000b10 <__aeabi_fsub>
 8008b14:	4603      	mov	r3, r0
 8008b16:	461e      	mov	r6, r3
 8008b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7f7 fff9 	bl	8000b14 <__addsf3>
 8008b22:	4603      	mov	r3, r0
 8008b24:	4619      	mov	r1, r3
 8008b26:	4630      	mov	r0, r6
 8008b28:	f7f7 fff2 	bl	8000b10 <__aeabi_fsub>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f7 ffed 	bl	8000b10 <__aeabi_fsub>
 8008b36:	4603      	mov	r3, r0
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f7f8 f8f2 	bl	8000d24 <__aeabi_fmul>
 8008b40:	4603      	mov	r3, r0
 8008b42:	4619      	mov	r1, r3
 8008b44:	4620      	mov	r0, r4
 8008b46:	f7f7 ffe3 	bl	8000b10 <__aeabi_fsub>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	461c      	mov	r4, r3
 8008b4e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008b52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b54:	f7f8 f8e6 	bl	8000d24 <__aeabi_fmul>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461d      	mov	r5, r3
 8008b5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b5e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008b62:	f7f7 ffd5 	bl	8000b10 <__aeabi_fsub>
 8008b66:	4603      	mov	r3, r0
 8008b68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7f7 ffd0 	bl	8000b10 <__aeabi_fsub>
 8008b70:	4603      	mov	r3, r0
 8008b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7f8 f8d5 	bl	8000d24 <__aeabi_fmul>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	461e      	mov	r6, r3
 8008b7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b82:	f7f7 ffc5 	bl	8000b10 <__aeabi_fsub>
 8008b86:	4603      	mov	r3, r0
 8008b88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7f8 f8ca 	bl	8000d24 <__aeabi_fmul>
 8008b90:	4603      	mov	r3, r0
 8008b92:	4619      	mov	r1, r3
 8008b94:	4630      	mov	r0, r6
 8008b96:	f7f7 ffbd 	bl	8000b14 <__addsf3>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7f7 ffb5 	bl	8000b10 <__aeabi_fsub>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4628      	mov	r0, r5
 8008bac:	f7f8 f8ba 	bl	8000d24 <__aeabi_fmul>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f7f7 ffad 	bl	8000b14 <__addsf3>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	461c      	mov	r4, r3
 8008bbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008bc2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008bc4:	f7f8 f8ae 	bl	8000d24 <__aeabi_fmul>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	461d      	mov	r5, r3
 8008bcc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008bd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008bd2:	f7f8 f8a7 	bl	8000d24 <__aeabi_fmul>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f7f7 ff9a 	bl	8000b14 <__addsf3>
 8008be0:	4603      	mov	r3, r0
 8008be2:	461d      	mov	r5, r3
 8008be4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008be6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008be8:	f7f7 ff92 	bl	8000b10 <__aeabi_fsub>
 8008bec:	4603      	mov	r3, r0
 8008bee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7f8 f897 	bl	8000d24 <__aeabi_fmul>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	461e      	mov	r6, r3
 8008bfa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008bfc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008c00:	f7f7 ff88 	bl	8000b14 <__addsf3>
 8008c04:	4603      	mov	r3, r0
 8008c06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7f8 f88b 	bl	8000d24 <__aeabi_fmul>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	4619      	mov	r1, r3
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7f7 ff7e 	bl	8000b14 <__addsf3>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7f7 ff76 	bl	8000b10 <__aeabi_fsub>
 8008c24:	4603      	mov	r3, r0
 8008c26:	4619      	mov	r1, r3
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f7f8 f87b 	bl	8000d24 <__aeabi_fmul>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	4619      	mov	r1, r3
 8008c32:	4620      	mov	r0, r4
 8008c34:	f7f7 ff6e 	bl	8000b14 <__addsf3>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	461c      	mov	r4, r3
 8008c3c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008c40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008c42:	f7f8 f86f 	bl	8000d24 <__aeabi_fmul>
 8008c46:	4603      	mov	r3, r0
 8008c48:	461d      	mov	r5, r3
 8008c4a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008c4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008c50:	f7f8 f868 	bl	8000d24 <__aeabi_fmul>
 8008c54:	4603      	mov	r3, r0
 8008c56:	4619      	mov	r1, r3
 8008c58:	4628      	mov	r0, r5
 8008c5a:	f7f7 ff59 	bl	8000b10 <__aeabi_fsub>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	461d      	mov	r5, r3
 8008c62:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008c64:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008c66:	f7f7 ff55 	bl	8000b14 <__addsf3>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7f8 f858 	bl	8000d24 <__aeabi_fmul>
 8008c74:	4603      	mov	r3, r0
 8008c76:	461e      	mov	r6, r3
 8008c78:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008c7a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008c7e:	f7f7 ff47 	bl	8000b10 <__aeabi_fsub>
 8008c82:	4603      	mov	r3, r0
 8008c84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f7 ff42 	bl	8000b10 <__aeabi_fsub>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7f8 f847 	bl	8000d24 <__aeabi_fmul>
 8008c96:	4603      	mov	r3, r0
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7f7 ff3a 	bl	8000b14 <__addsf3>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7f7 ff32 	bl	8000b10 <__aeabi_fsub>
 8008cac:	4603      	mov	r3, r0
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f7f8 f837 	bl	8000d24 <__aeabi_fmul>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f7f7 ff2a 	bl	8000b14 <__addsf3>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8008cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cc8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8008ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7f7 ff1f 	bl	8000b14 <__addsf3>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7f7 ff17 	bl	8000b10 <__aeabi_fsub>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	68f9      	ldr	r1, [r7, #12]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7f7 ff12 	bl	8000b10 <__aeabi_fsub>
 8008cec:	4603      	mov	r3, r0
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f7f8 f817 	bl	8000d24 <__aeabi_fmul>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	461c      	mov	r4, r3
 8008cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cfe:	4619      	mov	r1, r3
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7f7 ff07 	bl	8000b14 <__addsf3>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7f7 ff01 	bl	8000b14 <__addsf3>
 8008d12:	4603      	mov	r3, r0
 8008d14:	68b9      	ldr	r1, [r7, #8]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f7 fefa 	bl	8000b10 <__aeabi_fsub>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7f7 fffe 	bl	8000d24 <__aeabi_fmul>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f7f7 fef1 	bl	8000b14 <__addsf3>
 8008d32:	4603      	mov	r3, r0
 8008d34:	461c      	mov	r4, r3
 8008d36:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8008d3a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008d3e:	f7f7 fff1 	bl	8000d24 <__aeabi_fmul>
 8008d42:	4603      	mov	r3, r0
 8008d44:	461d      	mov	r5, r3
 8008d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7f7 fee2 	bl	8000b14 <__addsf3>
 8008d50:	4603      	mov	r3, r0
 8008d52:	4619      	mov	r1, r3
 8008d54:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008d58:	f7f7 feda 	bl	8000b10 <__aeabi_fsub>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	461e      	mov	r6, r3
 8008d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d62:	4619      	mov	r1, r3
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7f7 fed5 	bl	8000b14 <__addsf3>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7f7 fece 	bl	8000b10 <__aeabi_fsub>
 8008d74:	4603      	mov	r3, r0
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7f7 fec9 	bl	8000b10 <__aeabi_fsub>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4619      	mov	r1, r3
 8008d82:	4628      	mov	r0, r5
 8008d84:	f7f7 ffce 	bl	8000d24 <__aeabi_fmul>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7f7 febf 	bl	8000b10 <__aeabi_fsub>
 8008d92:	4603      	mov	r3, r0
 8008d94:	461c      	mov	r4, r3
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008d9c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7f7 ffbf 	bl	8000d24 <__aeabi_fmul>
 8008da6:	4603      	mov	r3, r0
 8008da8:	461d      	mov	r5, r3
 8008daa:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008dae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008db0:	f7f7 ffb8 	bl	8000d24 <__aeabi_fmul>
 8008db4:	4603      	mov	r3, r0
 8008db6:	4619      	mov	r1, r3
 8008db8:	4628      	mov	r0, r5
 8008dba:	f7f7 fea9 	bl	8000b10 <__aeabi_fsub>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	461d      	mov	r5, r3
 8008dc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008dc4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008dc8:	f7f7 fea2 	bl	8000b10 <__aeabi_fsub>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7f7 fe9d 	bl	8000b10 <__aeabi_fsub>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7f7 ffa2 	bl	8000d24 <__aeabi_fmul>
 8008de0:	4603      	mov	r3, r0
 8008de2:	461e      	mov	r6, r3
 8008de4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008de6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008de8:	f7f7 fe92 	bl	8000b10 <__aeabi_fsub>
 8008dec:	4603      	mov	r3, r0
 8008dee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7f7 ff97 	bl	8000d24 <__aeabi_fmul>
 8008df6:	4603      	mov	r3, r0
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7f7 fe8a 	bl	8000b14 <__addsf3>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7f7 fe82 	bl	8000b10 <__aeabi_fsub>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4628      	mov	r0, r5
 8008e12:	f7f7 ff87 	bl	8000d24 <__aeabi_fmul>
 8008e16:	4603      	mov	r3, r0
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f7f7 fe7a 	bl	8000b14 <__addsf3>
 8008e20:	4603      	mov	r3, r0
 8008e22:	461c      	mov	r4, r3
 8008e24:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008e28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008e2a:	f7f7 ff7b 	bl	8000d24 <__aeabi_fmul>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	461d      	mov	r5, r3
 8008e32:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008e36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e38:	f7f7 ff74 	bl	8000d24 <__aeabi_fmul>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	4619      	mov	r1, r3
 8008e40:	4628      	mov	r0, r5
 8008e42:	f7f7 fe67 	bl	8000b14 <__addsf3>
 8008e46:	4603      	mov	r3, r0
 8008e48:	461d      	mov	r5, r3
 8008e4a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008e4c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008e4e:	f7f7 fe5f 	bl	8000b10 <__aeabi_fsub>
 8008e52:	4603      	mov	r3, r0
 8008e54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7f7 ff64 	bl	8000d24 <__aeabi_fmul>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	461e      	mov	r6, r3
 8008e60:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008e62:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008e66:	f7f7 fe55 	bl	8000b14 <__addsf3>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7f7 ff58 	bl	8000d24 <__aeabi_fmul>
 8008e74:	4603      	mov	r3, r0
 8008e76:	4619      	mov	r1, r3
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7f7 fe4b 	bl	8000b14 <__addsf3>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7f7 fe43 	bl	8000b10 <__aeabi_fsub>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f7f7 ff48 	bl	8000d24 <__aeabi_fmul>
 8008e94:	4603      	mov	r3, r0
 8008e96:	4619      	mov	r1, r3
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f7f7 fe3b 	bl	8000b14 <__addsf3>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	461c      	mov	r4, r3
 8008ea2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008ea6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008ea8:	f7f7 ff3c 	bl	8000d24 <__aeabi_fmul>
 8008eac:	4603      	mov	r3, r0
 8008eae:	461d      	mov	r5, r3
 8008eb0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008eb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008eb6:	f7f7 ff35 	bl	8000d24 <__aeabi_fmul>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f7f7 fe26 	bl	8000b10 <__aeabi_fsub>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	461d      	mov	r5, r3
 8008ec8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008eca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008ecc:	f7f7 fe22 	bl	8000b14 <__addsf3>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7f7 ff25 	bl	8000d24 <__aeabi_fmul>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461e      	mov	r6, r3
 8008ede:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008ee0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008ee4:	f7f7 fe14 	bl	8000b10 <__aeabi_fsub>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7f7 fe0f 	bl	8000b10 <__aeabi_fsub>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7f7 ff14 	bl	8000d24 <__aeabi_fmul>
 8008efc:	4603      	mov	r3, r0
 8008efe:	4619      	mov	r1, r3
 8008f00:	4630      	mov	r0, r6
 8008f02:	f7f7 fe07 	bl	8000b14 <__addsf3>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7f7 fdff 	bl	8000b10 <__aeabi_fsub>
 8008f12:	4603      	mov	r3, r0
 8008f14:	4619      	mov	r1, r3
 8008f16:	4628      	mov	r0, r5
 8008f18:	f7f7 ff04 	bl	8000d24 <__aeabi_fmul>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4620      	mov	r0, r4
 8008f22:	f7f7 fdf7 	bl	8000b14 <__addsf3>
 8008f26:	4603      	mov	r3, r0
 8008f28:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8008f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7f7 fdf0 	bl	8000b14 <__addsf3>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7f7 fde8 	bl	8000b10 <__aeabi_fsub>
 8008f40:	4603      	mov	r3, r0
 8008f42:	68f9      	ldr	r1, [r7, #12]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7f7 fde3 	bl	8000b10 <__aeabi_fsub>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7f7 fee7 	bl	8000d24 <__aeabi_fmul>
 8008f56:	4603      	mov	r3, r0
 8008f58:	461c      	mov	r4, r3
 8008f5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7f7 fdd7 	bl	8000b14 <__addsf3>
 8008f66:	4603      	mov	r3, r0
 8008f68:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7f7 fdd1 	bl	8000b14 <__addsf3>
 8008f72:	4603      	mov	r3, r0
 8008f74:	68b9      	ldr	r1, [r7, #8]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7f7 fdca 	bl	8000b10 <__aeabi_fsub>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7f7 fece 	bl	8000d24 <__aeabi_fmul>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f7f7 fdc1 	bl	8000b14 <__addsf3>
 8008f92:	4603      	mov	r3, r0
 8008f94:	461c      	mov	r4, r3
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008f9c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7f7 febf 	bl	8000d24 <__aeabi_fmul>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	461d      	mov	r5, r3
 8008faa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008fae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008fb0:	f7f7 feb8 	bl	8000d24 <__aeabi_fmul>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f7f7 fdab 	bl	8000b14 <__addsf3>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	461d      	mov	r5, r3
 8008fc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fc4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008fc8:	f7f7 fda2 	bl	8000b10 <__aeabi_fsub>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7f7 fd9d 	bl	8000b10 <__aeabi_fsub>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7f7 fea2 	bl	8000d24 <__aeabi_fmul>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461e      	mov	r6, r3
 8008fe4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008fe6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008fe8:	f7f7 fd92 	bl	8000b10 <__aeabi_fsub>
 8008fec:	4603      	mov	r3, r0
 8008fee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7f7 fe97 	bl	8000d24 <__aeabi_fmul>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7f7 fd8a 	bl	8000b14 <__addsf3>
 8009000:	4603      	mov	r3, r0
 8009002:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009006:	4618      	mov	r0, r3
 8009008:	f7f7 fd82 	bl	8000b10 <__aeabi_fsub>
 800900c:	4603      	mov	r3, r0
 800900e:	4619      	mov	r1, r3
 8009010:	4628      	mov	r0, r5
 8009012:	f7f7 fe87 	bl	8000d24 <__aeabi_fmul>
 8009016:	4603      	mov	r3, r0
 8009018:	4619      	mov	r1, r3
 800901a:	4620      	mov	r0, r4
 800901c:	f7f7 fd7a 	bl	8000b14 <__addsf3>
 8009020:	4603      	mov	r3, r0
 8009022:	461c      	mov	r4, r3
 8009024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009026:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800902a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800902e:	4618      	mov	r0, r3
 8009030:	f7f7 fe78 	bl	8000d24 <__aeabi_fmul>
 8009034:	4603      	mov	r3, r0
 8009036:	461d      	mov	r5, r3
 8009038:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800903c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800903e:	f7f7 fe71 	bl	8000d24 <__aeabi_fmul>
 8009042:	4603      	mov	r3, r0
 8009044:	4619      	mov	r1, r3
 8009046:	4628      	mov	r0, r5
 8009048:	f7f7 fd64 	bl	8000b14 <__addsf3>
 800904c:	4603      	mov	r3, r0
 800904e:	461d      	mov	r5, r3
 8009050:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009052:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009054:	f7f7 fd5c 	bl	8000b10 <__aeabi_fsub>
 8009058:	4603      	mov	r3, r0
 800905a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800905c:	4618      	mov	r0, r3
 800905e:	f7f7 fe61 	bl	8000d24 <__aeabi_fmul>
 8009062:	4603      	mov	r3, r0
 8009064:	461e      	mov	r6, r3
 8009066:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009068:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800906c:	f7f7 fd52 	bl	8000b14 <__addsf3>
 8009070:	4603      	mov	r3, r0
 8009072:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009074:	4618      	mov	r0, r3
 8009076:	f7f7 fe55 	bl	8000d24 <__aeabi_fmul>
 800907a:	4603      	mov	r3, r0
 800907c:	4619      	mov	r1, r3
 800907e:	4630      	mov	r0, r6
 8009080:	f7f7 fd48 	bl	8000b14 <__addsf3>
 8009084:	4603      	mov	r3, r0
 8009086:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800908a:	4618      	mov	r0, r3
 800908c:	f7f7 fd40 	bl	8000b10 <__aeabi_fsub>
 8009090:	4603      	mov	r3, r0
 8009092:	4619      	mov	r1, r3
 8009094:	4628      	mov	r0, r5
 8009096:	f7f7 fe45 	bl	8000d24 <__aeabi_fmul>
 800909a:	4603      	mov	r3, r0
 800909c:	4619      	mov	r1, r3
 800909e:	4620      	mov	r0, r4
 80090a0:	f7f7 fd38 	bl	8000b14 <__addsf3>
 80090a4:	4603      	mov	r3, r0
 80090a6:	461c      	mov	r4, r3
 80090a8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80090ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80090ae:	f7f7 fe39 	bl	8000d24 <__aeabi_fmul>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461d      	mov	r5, r3
 80090b6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80090b8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80090ba:	f7f7 fd2b 	bl	8000b14 <__addsf3>
 80090be:	4603      	mov	r3, r0
 80090c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7f7 fe2e 	bl	8000d24 <__aeabi_fmul>
 80090c8:	4603      	mov	r3, r0
 80090ca:	461e      	mov	r6, r3
 80090cc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80090ce:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80090d2:	f7f7 fd1d 	bl	8000b10 <__aeabi_fsub>
 80090d6:	4603      	mov	r3, r0
 80090d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090da:	4618      	mov	r0, r3
 80090dc:	f7f7 fd18 	bl	8000b10 <__aeabi_fsub>
 80090e0:	4603      	mov	r3, r0
 80090e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7f7 fe1d 	bl	8000d24 <__aeabi_fmul>
 80090ea:	4603      	mov	r3, r0
 80090ec:	4619      	mov	r1, r3
 80090ee:	4630      	mov	r0, r6
 80090f0:	f7f7 fd10 	bl	8000b14 <__addsf3>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f7 fd08 	bl	8000b10 <__aeabi_fsub>
 8009100:	4603      	mov	r3, r0
 8009102:	4619      	mov	r1, r3
 8009104:	4628      	mov	r0, r5
 8009106:	f7f7 fe0d 	bl	8000d24 <__aeabi_fmul>
 800910a:	4603      	mov	r3, r0
 800910c:	4619      	mov	r1, r3
 800910e:	4620      	mov	r0, r4
 8009110:	f7f7 fd00 	bl	8000b14 <__addsf3>
 8009114:	4603      	mov	r3, r0
 8009116:	627b      	str	r3, [r7, #36]	; 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8009118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800911a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800911c:	f7f7 fe02 	bl	8000d24 <__aeabi_fmul>
 8009120:	4603      	mov	r3, r0
 8009122:	461c      	mov	r4, r3
 8009124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009128:	f7f7 fdfc 	bl	8000d24 <__aeabi_fmul>
 800912c:	4603      	mov	r3, r0
 800912e:	4619      	mov	r1, r3
 8009130:	4620      	mov	r0, r4
 8009132:	f7f7 fcef 	bl	8000b14 <__addsf3>
 8009136:	4603      	mov	r3, r0
 8009138:	461c      	mov	r4, r3
 800913a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800913c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800913e:	f7f7 fdf1 	bl	8000d24 <__aeabi_fmul>
 8009142:	4603      	mov	r3, r0
 8009144:	4619      	mov	r1, r3
 8009146:	4620      	mov	r0, r4
 8009148:	f7f7 fce4 	bl	8000b14 <__addsf3>
 800914c:	4603      	mov	r3, r0
 800914e:	461c      	mov	r4, r3
 8009150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009154:	f7f7 fde6 	bl	8000d24 <__aeabi_fmul>
 8009158:	4603      	mov	r3, r0
 800915a:	4619      	mov	r1, r3
 800915c:	4620      	mov	r0, r4
 800915e:	f7f7 fcd9 	bl	8000b14 <__addsf3>
 8009162:	4603      	mov	r3, r0
 8009164:	4618      	mov	r0, r3
 8009166:	f001 febf 	bl	800aee8 <sqrtf>
 800916a:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 800916c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800916e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009172:	f7f7 fe8b 	bl	8000e8c <__aeabi_fdiv>
 8009176:	4603      	mov	r3, r0
 8009178:	65fb      	str	r3, [r7, #92]	; 0x5c
    s1 *= norm;
 800917a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800917c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800917e:	f7f7 fdd1 	bl	8000d24 <__aeabi_fmul>
 8009182:	4603      	mov	r3, r0
 8009184:	633b      	str	r3, [r7, #48]	; 0x30
    s2 *= norm;
 8009186:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009188:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800918a:	f7f7 fdcb 	bl	8000d24 <__aeabi_fmul>
 800918e:	4603      	mov	r3, r0
 8009190:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 *= norm;
 8009192:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009196:	f7f7 fdc5 	bl	8000d24 <__aeabi_fmul>
 800919a:	4603      	mov	r3, r0
 800919c:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 *= norm;
 800919e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80091a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091a2:	f7f7 fdbf 	bl	8000d24 <__aeabi_fmul>
 80091a6:	4603      	mov	r3, r0
 80091a8:	627b      	str	r3, [r7, #36]	; 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 80091aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7f7 fdb5 	bl	8000d24 <__aeabi_fmul>
 80091ba:	4603      	mov	r3, r0
 80091bc:	461c      	mov	r4, r3
 80091be:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80091c2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80091c6:	f7f7 fdad 	bl	8000d24 <__aeabi_fmul>
 80091ca:	4603      	mov	r3, r0
 80091cc:	4619      	mov	r1, r3
 80091ce:	4620      	mov	r0, r4
 80091d0:	f7f7 fc9e 	bl	8000b10 <__aeabi_fsub>
 80091d4:	4603      	mov	r3, r0
 80091d6:	461c      	mov	r4, r3
 80091d8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80091dc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80091e0:	f7f7 fda0 	bl	8000d24 <__aeabi_fmul>
 80091e4:	4603      	mov	r3, r0
 80091e6:	4619      	mov	r1, r3
 80091e8:	4620      	mov	r0, r4
 80091ea:	f7f7 fc91 	bl	8000b10 <__aeabi_fsub>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f7 fd95 	bl	8000d24 <__aeabi_fmul>
 80091fa:	4603      	mov	r3, r0
 80091fc:	461c      	mov	r4, r3
 80091fe:	4ba4      	ldr	r3, [pc, #656]	; (8009490 <QuaternionUpdate+0x1178>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009204:	4618      	mov	r0, r3
 8009206:	f7f7 fd8d 	bl	8000d24 <__aeabi_fmul>
 800920a:	4603      	mov	r3, r0
 800920c:	4619      	mov	r1, r3
 800920e:	4620      	mov	r0, r4
 8009210:	f7f7 fc7e 	bl	8000b10 <__aeabi_fsub>
 8009214:	4603      	mov	r3, r0
 8009216:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800921e:	f7f7 fd81 	bl	8000d24 <__aeabi_fmul>
 8009222:	4603      	mov	r3, r0
 8009224:	461c      	mov	r4, r3
 8009226:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800922a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800922e:	f7f7 fd79 	bl	8000d24 <__aeabi_fmul>
 8009232:	4603      	mov	r3, r0
 8009234:	4619      	mov	r1, r3
 8009236:	4620      	mov	r0, r4
 8009238:	f7f7 fc6c 	bl	8000b14 <__addsf3>
 800923c:	4603      	mov	r3, r0
 800923e:	461c      	mov	r4, r3
 8009240:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8009244:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009248:	f7f7 fd6c 	bl	8000d24 <__aeabi_fmul>
 800924c:	4603      	mov	r3, r0
 800924e:	4619      	mov	r1, r3
 8009250:	4620      	mov	r0, r4
 8009252:	f7f7 fc5d 	bl	8000b10 <__aeabi_fsub>
 8009256:	4603      	mov	r3, r0
 8009258:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800925c:	4618      	mov	r0, r3
 800925e:	f7f7 fd61 	bl	8000d24 <__aeabi_fmul>
 8009262:	4603      	mov	r3, r0
 8009264:	461c      	mov	r4, r3
 8009266:	4b8a      	ldr	r3, [pc, #552]	; (8009490 <QuaternionUpdate+0x1178>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800926c:	4618      	mov	r0, r3
 800926e:	f7f7 fd59 	bl	8000d24 <__aeabi_fmul>
 8009272:	4603      	mov	r3, r0
 8009274:	4619      	mov	r1, r3
 8009276:	4620      	mov	r0, r4
 8009278:	f7f7 fc4a 	bl	8000b10 <__aeabi_fsub>
 800927c:	4603      	mov	r3, r0
 800927e:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8009280:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8009284:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009288:	f7f7 fd4c 	bl	8000d24 <__aeabi_fmul>
 800928c:	4603      	mov	r3, r0
 800928e:	461c      	mov	r4, r3
 8009290:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8009294:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009298:	f7f7 fd44 	bl	8000d24 <__aeabi_fmul>
 800929c:	4603      	mov	r3, r0
 800929e:	4619      	mov	r1, r3
 80092a0:	4620      	mov	r0, r4
 80092a2:	f7f7 fc35 	bl	8000b10 <__aeabi_fsub>
 80092a6:	4603      	mov	r3, r0
 80092a8:	461c      	mov	r4, r3
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80092b0:	f7f7 fd38 	bl	8000d24 <__aeabi_fmul>
 80092b4:	4603      	mov	r3, r0
 80092b6:	4619      	mov	r1, r3
 80092b8:	4620      	mov	r0, r4
 80092ba:	f7f7 fc2b 	bl	8000b14 <__addsf3>
 80092be:	4603      	mov	r3, r0
 80092c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f7 fd2d 	bl	8000d24 <__aeabi_fmul>
 80092ca:	4603      	mov	r3, r0
 80092cc:	461c      	mov	r4, r3
 80092ce:	4b70      	ldr	r3, [pc, #448]	; (8009490 <QuaternionUpdate+0x1178>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7f7 fd25 	bl	8000d24 <__aeabi_fmul>
 80092da:	4603      	mov	r3, r0
 80092dc:	4619      	mov	r1, r3
 80092de:	4620      	mov	r0, r4
 80092e0:	f7f7 fc16 	bl	8000b10 <__aeabi_fsub>
 80092e4:	4603      	mov	r3, r0
 80092e6:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 80092e8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80092ec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80092f0:	f7f7 fd18 	bl	8000d24 <__aeabi_fmul>
 80092f4:	4603      	mov	r3, r0
 80092f6:	461c      	mov	r4, r3
 80092f8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80092fc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009300:	f7f7 fd10 	bl	8000d24 <__aeabi_fmul>
 8009304:	4603      	mov	r3, r0
 8009306:	4619      	mov	r1, r3
 8009308:	4620      	mov	r0, r4
 800930a:	f7f7 fc03 	bl	8000b14 <__addsf3>
 800930e:	4603      	mov	r3, r0
 8009310:	461c      	mov	r4, r3
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009318:	f7f7 fd04 	bl	8000d24 <__aeabi_fmul>
 800931c:	4603      	mov	r3, r0
 800931e:	4619      	mov	r1, r3
 8009320:	4620      	mov	r0, r4
 8009322:	f7f7 fbf5 	bl	8000b10 <__aeabi_fsub>
 8009326:	4603      	mov	r3, r0
 8009328:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800932c:	4618      	mov	r0, r3
 800932e:	f7f7 fcf9 	bl	8000d24 <__aeabi_fmul>
 8009332:	4603      	mov	r3, r0
 8009334:	461c      	mov	r4, r3
 8009336:	4b56      	ldr	r3, [pc, #344]	; (8009490 <QuaternionUpdate+0x1178>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800933c:	4618      	mov	r0, r3
 800933e:	f7f7 fcf1 	bl	8000d24 <__aeabi_fmul>
 8009342:	4603      	mov	r3, r0
 8009344:	4619      	mov	r1, r3
 8009346:	4620      	mov	r0, r4
 8009348:	f7f7 fbe2 	bl	8000b10 <__aeabi_fsub>
 800934c:	4603      	mov	r3, r0
 800934e:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8009350:	4b50      	ldr	r3, [pc, #320]	; (8009494 <QuaternionUpdate+0x117c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6a39      	ldr	r1, [r7, #32]
 8009356:	4618      	mov	r0, r3
 8009358:	f7f7 fce4 	bl	8000d24 <__aeabi_fmul>
 800935c:	4603      	mov	r3, r0
 800935e:	4619      	mov	r1, r3
 8009360:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009364:	f7f7 fbd6 	bl	8000b14 <__addsf3>
 8009368:	4603      	mov	r3, r0
 800936a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q2 += qDot2 * deltat;
 800936e:	4b49      	ldr	r3, [pc, #292]	; (8009494 <QuaternionUpdate+0x117c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	69f9      	ldr	r1, [r7, #28]
 8009374:	4618      	mov	r0, r3
 8009376:	f7f7 fcd5 	bl	8000d24 <__aeabi_fmul>
 800937a:	4603      	mov	r3, r0
 800937c:	4619      	mov	r1, r3
 800937e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009382:	f7f7 fbc7 	bl	8000b14 <__addsf3>
 8009386:	4603      	mov	r3, r0
 8009388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q3 += qDot3 * deltat;
 800938c:	4b41      	ldr	r3, [pc, #260]	; (8009494 <QuaternionUpdate+0x117c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	69b9      	ldr	r1, [r7, #24]
 8009392:	4618      	mov	r0, r3
 8009394:	f7f7 fcc6 	bl	8000d24 <__aeabi_fmul>
 8009398:	4603      	mov	r3, r0
 800939a:	4619      	mov	r1, r3
 800939c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80093a0:	f7f7 fbb8 	bl	8000b14 <__addsf3>
 80093a4:	4603      	mov	r3, r0
 80093a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q4 += qDot4 * deltat;
 80093aa:	4b3a      	ldr	r3, [pc, #232]	; (8009494 <QuaternionUpdate+0x117c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6979      	ldr	r1, [r7, #20]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7f7 fcb7 	bl	8000d24 <__aeabi_fmul>
 80093b6:	4603      	mov	r3, r0
 80093b8:	4619      	mov	r1, r3
 80093ba:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80093be:	f7f7 fba9 	bl	8000b14 <__addsf3>
 80093c2:	4603      	mov	r3, r0
 80093c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80093c8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80093cc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80093d0:	f7f7 fca8 	bl	8000d24 <__aeabi_fmul>
 80093d4:	4603      	mov	r3, r0
 80093d6:	461c      	mov	r4, r3
 80093d8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80093dc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80093e0:	f7f7 fca0 	bl	8000d24 <__aeabi_fmul>
 80093e4:	4603      	mov	r3, r0
 80093e6:	4619      	mov	r1, r3
 80093e8:	4620      	mov	r0, r4
 80093ea:	f7f7 fb93 	bl	8000b14 <__addsf3>
 80093ee:	4603      	mov	r3, r0
 80093f0:	461c      	mov	r4, r3
 80093f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093f6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80093fa:	f7f7 fc93 	bl	8000d24 <__aeabi_fmul>
 80093fe:	4603      	mov	r3, r0
 8009400:	4619      	mov	r1, r3
 8009402:	4620      	mov	r0, r4
 8009404:	f7f7 fb86 	bl	8000b14 <__addsf3>
 8009408:	4603      	mov	r3, r0
 800940a:	461c      	mov	r4, r3
 800940c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009410:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009414:	f7f7 fc86 	bl	8000d24 <__aeabi_fmul>
 8009418:	4603      	mov	r3, r0
 800941a:	4619      	mov	r1, r3
 800941c:	4620      	mov	r0, r4
 800941e:	f7f7 fb79 	bl	8000b14 <__addsf3>
 8009422:	4603      	mov	r3, r0
 8009424:	4618      	mov	r0, r3
 8009426:	f001 fd5f 	bl	800aee8 <sqrtf>
 800942a:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 800942c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800942e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009432:	f7f7 fd2b 	bl	8000e8c <__aeabi_fdiv>
 8009436:	4603      	mov	r3, r0
 8009438:	65fb      	str	r3, [r7, #92]	; 0x5c
    q[0] = q1 * norm;
 800943a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800943c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009440:	f7f7 fc70 	bl	8000d24 <__aeabi_fmul>
 8009444:	4603      	mov	r3, r0
 8009446:	461a      	mov	r2, r3
 8009448:	4b13      	ldr	r3, [pc, #76]	; (8009498 <QuaternionUpdate+0x1180>)
 800944a:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 800944c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800944e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009452:	f7f7 fc67 	bl	8000d24 <__aeabi_fmul>
 8009456:	4603      	mov	r3, r0
 8009458:	461a      	mov	r2, r3
 800945a:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <QuaternionUpdate+0x1180>)
 800945c:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 800945e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009460:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009464:	f7f7 fc5e 	bl	8000d24 <__aeabi_fmul>
 8009468:	4603      	mov	r3, r0
 800946a:	461a      	mov	r2, r3
 800946c:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <QuaternionUpdate+0x1180>)
 800946e:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 8009470:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009472:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009476:	f7f7 fc55 	bl	8000d24 <__aeabi_fmul>
 800947a:	4603      	mov	r3, r0
 800947c:	461a      	mov	r2, r3
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <QuaternionUpdate+0x1180>)
 8009480:	60da      	str	r2, [r3, #12]
 8009482:	e002      	b.n	800948a <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8009484:	bf00      	nop
 8009486:	e000      	b.n	800948a <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8009488:	bf00      	nop

}
 800948a:	37b4      	adds	r7, #180	; 0xb4
 800948c:	46bd      	mov	sp, r7
 800948e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009490:	2000000c 	.word	0x2000000c
 8009494:	20000124 	.word	0x20000124
 8009498:	20000010 	.word	0x20000010

0800949c <nRF24_CSN_L>:
{
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L()
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80094a0:	2200      	movs	r2, #0
 80094a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80094a6:	4802      	ldr	r0, [pc, #8]	; (80094b0 <nRF24_CSN_L+0x14>)
 80094a8:	f7f8 fbc2 	bl	8001c30 <HAL_GPIO_WritePin>
}
 80094ac:	bf00      	nop
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40010c00 	.word	0x40010c00

080094b4 <nRF24_CSN_H>:

static inline void nRF24_CSN_H()
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80094b8:	2201      	movs	r2, #1
 80094ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80094be:	4802      	ldr	r0, [pc, #8]	; (80094c8 <nRF24_CSN_H+0x14>)
 80094c0:	f7f8 fbb6 	bl	8001c30 <HAL_GPIO_WritePin>
}
 80094c4:	bf00      	nop
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40010c00 	.word	0x40010c00

080094cc <nRF24_LL_RW>:

static inline uint8_t nRF24_LL_RW(uint8_t data)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	4603      	mov	r3, r0
 80094d4:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if (HAL_SPI_TransmitReceive(&hspi2, &data, &result, 1, 2000) != HAL_OK)
 80094d6:	f107 020f 	add.w	r2, r7, #15
 80094da:	1df9      	adds	r1, r7, #7
 80094dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	2301      	movs	r3, #1
 80094e4:	4806      	ldr	r0, [pc, #24]	; (8009500 <nRF24_LL_RW+0x34>)
 80094e6:	f7fa f863 	bl	80035b0 <HAL_SPI_TransmitReceive>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <nRF24_LL_RW+0x28>
    {
        Error_Handler();
 80094f0:	f7fc fc78 	bl	8005de4 <Error_Handler>
    };
    return result;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20000184 	.word	0x20000184

08009504 <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800950e:	f7ff ffc5 	bl	800949c <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	f003 031f 	and.w	r3, r3, #31
 8009518:	b2db      	uxtb	r3, r3
 800951a:	4618      	mov	r0, r3
 800951c:	f7ff ffd6 	bl	80094cc <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8009520:	20ff      	movs	r0, #255	; 0xff
 8009522:	f7ff ffd3 	bl	80094cc <nRF24_LL_RW>
 8009526:	4603      	mov	r3, r0
 8009528:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800952a:	f7ff ffc3 	bl	80094b4 <nRF24_CSN_H>

	return value;
 800952e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	460a      	mov	r2, r1
 8009542:	71fb      	strb	r3, [r7, #7]
 8009544:	4613      	mov	r3, r2
 8009546:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8009548:	f7ff ffa8 	bl	800949c <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	2b1f      	cmp	r3, #31
 8009550:	d810      	bhi.n	8009574 <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8009552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009556:	f003 031f 	and.w	r3, r3, #31
 800955a:	b25b      	sxtb	r3, r3
 800955c:	f043 0320 	orr.w	r3, r3, #32
 8009560:	b25b      	sxtb	r3, r3
 8009562:	b2db      	uxtb	r3, r3
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff ffb1 	bl	80094cc <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800956a:	79bb      	ldrb	r3, [r7, #6]
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff ffad 	bl	80094cc <nRF24_LL_RW>
 8009572:	e013      	b.n	800959c <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff ffa8 	bl	80094cc <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	2be1      	cmp	r3, #225	; 0xe1
 8009580:	d00c      	beq.n	800959c <nRF24_WriteReg+0x64>
 8009582:	79fb      	ldrb	r3, [r7, #7]
 8009584:	2be2      	cmp	r3, #226	; 0xe2
 8009586:	d009      	beq.n	800959c <nRF24_WriteReg+0x64>
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	2be3      	cmp	r3, #227	; 0xe3
 800958c:	d006      	beq.n	800959c <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	2bff      	cmp	r3, #255	; 0xff
 8009592:	d003      	beq.n	800959c <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 8009594:	79bb      	ldrb	r3, [r7, #6]
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff ff98 	bl	80094cc <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800959c:	f7ff ff8a 	bl	80094b4 <nRF24_CSN_H>
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 80095a8:	b590      	push	{r4, r7, lr}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	6039      	str	r1, [r7, #0]
 80095b2:	71fb      	strb	r3, [r7, #7]
 80095b4:	4613      	mov	r3, r2
 80095b6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80095b8:	f7ff ff70 	bl	800949c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff ff84 	bl	80094cc <nRF24_LL_RW>
	while (count--)
 80095c4:	e007      	b.n	80095d6 <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80095c6:	683c      	ldr	r4, [r7, #0]
 80095c8:	1c63      	adds	r3, r4, #1
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	20ff      	movs	r0, #255	; 0xff
 80095ce:	f7ff ff7d 	bl	80094cc <nRF24_LL_RW>
 80095d2:	4603      	mov	r3, r0
 80095d4:	7023      	strb	r3, [r4, #0]
	while (count--)
 80095d6:	79bb      	ldrb	r3, [r7, #6]
 80095d8:	1e5a      	subs	r2, r3, #1
 80095da:	71ba      	strb	r2, [r7, #6]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1f2      	bne.n	80095c6 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80095e0:	f7ff ff68 	bl	80094b4 <nRF24_CSN_H>
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd90      	pop	{r4, r7, pc}

080095ec <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
 80095f8:	4613      	mov	r3, r2
 80095fa:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80095fc:	f7ff ff4e 	bl	800949c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8009600:	79fb      	ldrb	r3, [r7, #7]
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff ff62 	bl	80094cc <nRF24_LL_RW>
	while (count--)
 8009608:	e006      	b.n	8009618 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	603a      	str	r2, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff ff5a 	bl	80094cc <nRF24_LL_RW>
	while (count--)
 8009618:	79bb      	ldrb	r3, [r7, #6]
 800961a:	1e5a      	subs	r2, r3, #1
 800961c:	71ba      	strb	r2, [r7, #6]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1f3      	bne.n	800960a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8009622:	f7ff ff47 	bl	80094b4 <nRF24_CSN_H>
}
 8009626:	bf00      	nop
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 8009632:	2108      	movs	r1, #8
 8009634:	2000      	movs	r0, #0
 8009636:	f7ff ff7f 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 800963a:	213f      	movs	r1, #63	; 0x3f
 800963c:	2001      	movs	r0, #1
 800963e:	f7ff ff7b 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 8009642:	2103      	movs	r1, #3
 8009644:	2002      	movs	r0, #2
 8009646:	f7ff ff77 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 800964a:	2103      	movs	r1, #3
 800964c:	2003      	movs	r0, #3
 800964e:	f7ff ff73 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 8009652:	2103      	movs	r1, #3
 8009654:	2004      	movs	r0, #4
 8009656:	f7ff ff6f 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 800965a:	2102      	movs	r1, #2
 800965c:	2005      	movs	r0, #5
 800965e:	f7ff ff6b 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 8009662:	210e      	movs	r1, #14
 8009664:	2006      	movs	r0, #6
 8009666:	f7ff ff67 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800966a:	2100      	movs	r1, #0
 800966c:	2007      	movs	r0, #7
 800966e:	f7ff ff63 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8009672:	2100      	movs	r1, #0
 8009674:	2011      	movs	r0, #17
 8009676:	f7ff ff5f 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800967a:	2100      	movs	r1, #0
 800967c:	2012      	movs	r0, #18
 800967e:	f7ff ff5b 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8009682:	2100      	movs	r1, #0
 8009684:	2013      	movs	r0, #19
 8009686:	f7ff ff57 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800968a:	2100      	movs	r1, #0
 800968c:	2014      	movs	r0, #20
 800968e:	f7ff ff53 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8009692:	2100      	movs	r1, #0
 8009694:	2015      	movs	r0, #21
 8009696:	f7ff ff4f 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800969a:	2100      	movs	r1, #0
 800969c:	2016      	movs	r0, #22
 800969e:	f7ff ff4b 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80096a2:	2100      	movs	r1, #0
 80096a4:	201c      	movs	r0, #28
 80096a6:	f7ff ff47 	bl	8009538 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80096aa:	2100      	movs	r1, #0
 80096ac:	201d      	movs	r0, #29
 80096ae:	f7ff ff43 	bl	8009538 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 80096b2:	f000 f9a4 	bl	80099fe <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 80096b6:	f000 f99a 	bl	80099ee <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 80096ba:	f000 f9a8 	bl	8009a0e <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 80096be:	f7ff fef9 	bl	80094b4 <nRF24_CSN_H>
}
 80096c2:	bf00      	nop
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80096ce:	4b14      	ldr	r3, [pc, #80]	; (8009720 <nRF24_Check+0x58>)
 80096d0:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80096d2:	2205      	movs	r2, #5
 80096d4:	68b9      	ldr	r1, [r7, #8]
 80096d6:	2030      	movs	r0, #48	; 0x30
 80096d8:	f7ff ff88 	bl	80095ec <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80096dc:	463b      	mov	r3, r7
 80096de:	2205      	movs	r2, #5
 80096e0:	4619      	mov	r1, r3
 80096e2:	2010      	movs	r0, #16
 80096e4:	f7ff ff60 	bl	80095a8 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]
 80096ec:	e010      	b.n	8009710 <nRF24_Check+0x48>
	{
		if (rxbuf[i] != *ptr++)
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
 80096f0:	f107 0210 	add.w	r2, r7, #16
 80096f4:	4413      	add	r3, r2
 80096f6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	1c59      	adds	r1, r3, #1
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d001      	beq.n	800970a <nRF24_Check+0x42>
			return 0;
 8009706:	2300      	movs	r3, #0
 8009708:	e006      	b.n	8009718 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++)
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	3301      	adds	r3, #1
 800970e:	73fb      	strb	r3, [r7, #15]
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	2b04      	cmp	r3, #4
 8009714:	d9eb      	bls.n	80096ee <nRF24_Check+0x26>
	}

	return 1;
 8009716:	2301      	movs	r3, #1
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	0800c3c4 	.word	0x0800c3c4

08009724 <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800972e:	2000      	movs	r0, #0
 8009730:	f7ff fee8 	bl	8009504 <nRF24_ReadReg>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d104      	bne.n	8009748 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	f043 0302 	orr.w	r3, r3, #2
 8009744:	73fb      	strb	r3, [r7, #15]
 8009746:	e003      	b.n	8009750 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	f023 0302 	bic.w	r3, r3, #2
 800974e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	4619      	mov	r1, r3
 8009754:	2000      	movs	r0, #0
 8009756:	f7ff feef 	bl	8009538 <nRF24_WriteReg>
}
 800975a:	bf00      	nop
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	4603      	mov	r3, r0
 800976a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800976c:	2000      	movs	r0, #0
 800976e:	f7ff fec9 	bl	8009504 <nRF24_ReadReg>
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	f023 0301 	bic.w	r3, r3, #1
 800977c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800977e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	b25a      	sxtb	r2, r3
 8009788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800978c:	4313      	orrs	r3, r2
 800978e:	b25b      	sxtb	r3, r3
 8009790:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	4619      	mov	r1, r3
 8009796:	2000      	movs	r0, #0
 8009798:	f7ff fece 	bl	8009538 <nRF24_WriteReg>
}
 800979c:	bf00      	nop
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80097ae:	2000      	movs	r0, #0
 80097b0:	f7ff fea8 	bl	8009504 <nRF24_ReadReg>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	f023 030c 	bic.w	r3, r3, #12
 80097be:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80097c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097c4:	f003 030c 	and.w	r3, r3, #12
 80097c8:	b25a      	sxtb	r2, r3
 80097ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	b25b      	sxtb	r3, r3
 80097d2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	4619      	mov	r1, r3
 80097d8:	2000      	movs	r0, #0
 80097da:	f7ff fead 	bl	8009538 <nRF24_WriteReg>
}
 80097de:	bf00      	nop
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	4603      	mov	r3, r0
 80097ee:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	4619      	mov	r1, r3
 80097f4:	2005      	movs	r0, #5
 80097f6:	f7ff fe9f 	bl	8009538 <nRF24_WriteReg>
}
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	4603      	mov	r3, r0
 800980a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	3b02      	subs	r3, #2
 8009810:	b2db      	uxtb	r3, r3
 8009812:	4619      	mov	r1, r3
 8009814:	2003      	movs	r0, #3
 8009816:	f7ff fe8f 	bl	8009538 <nRF24_WriteReg>
}
 800981a:	bf00      	nop
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	6039      	str	r1, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b06      	cmp	r3, #6
 8009834:	d83e      	bhi.n	80098b4 <nRF24_SetAddr+0x90>
 8009836:	a201      	add	r2, pc, #4	; (adr r2, 800983c <nRF24_SetAddr+0x18>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	08009859 	.word	0x08009859
 8009840:	08009859 	.word	0x08009859
 8009844:	080098a1 	.word	0x080098a1
 8009848:	080098a1 	.word	0x080098a1
 800984c:	080098a1 	.word	0x080098a1
 8009850:	080098a1 	.word	0x080098a1
 8009854:	08009859 	.word	0x08009859
	{
	case nRF24_PIPETX:
	case nRF24_PIPE0:
	case nRF24_PIPE1:
		// Lấy độ dài address
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8009858:	2003      	movs	r0, #3
 800985a:	f7ff fe53 	bl	8009504 <nRF24_ReadReg>
 800985e:	4603      	mov	r3, r0
 8009860:	3301      	adds	r3, #1
 8009862:	73fb      	strb	r3, [r7, #15]

		addr += addr_width;
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	4413      	add	r3, r2
 800986a:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 800986c:	f7ff fe16 	bl	800949c <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	4a13      	ldr	r2, [pc, #76]	; (80098c0 <nRF24_SetAddr+0x9c>)
 8009874:	5cd3      	ldrb	r3, [r2, r3]
 8009876:	f043 0320 	orr.w	r3, r3, #32
 800987a:	b2db      	uxtb	r3, r3
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff fe25 	bl	80094cc <nRF24_LL_RW>
		do
		{
			nRF24_LL_RW(*addr--);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	1e5a      	subs	r2, r3, #1
 8009886:	603a      	str	r2, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff fe1e 	bl	80094cc <nRF24_LL_RW>
		} while (addr_width--);
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	1e5a      	subs	r2, r3, #1
 8009894:	73fa      	strb	r2, [r7, #15]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1f3      	bne.n	8009882 <nRF24_SetAddr+0x5e>
		nRF24_CSN_H();
 800989a:	f7ff fe0b 	bl	80094b4 <nRF24_CSN_H>
		break;
 800989e:	e00a      	b.n	80098b6 <nRF24_SetAddr+0x92>
	case nRF24_PIPE2:
	case nRF24_PIPE3:
	case nRF24_PIPE4:
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80098a0:	79fb      	ldrb	r3, [r7, #7]
 80098a2:	4a07      	ldr	r2, [pc, #28]	; (80098c0 <nRF24_SetAddr+0x9c>)
 80098a4:	5cd2      	ldrb	r2, [r2, r3]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	4619      	mov	r1, r3
 80098ac:	4610      	mov	r0, r2
 80098ae:	f7ff fe43 	bl	8009538 <nRF24_WriteReg>
		break;
 80098b2:	e000      	b.n	80098b6 <nRF24_SetAddr+0x92>
	default:
		break;
 80098b4:	bf00      	nop
	}
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	0800c5d4 	.word	0x0800c5d4

080098c4 <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80098ce:	2006      	movs	r0, #6
 80098d0:	f7ff fe18 	bl	8009504 <nRF24_ReadReg>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
 80098da:	f023 0306 	bic.w	r3, r3, #6
 80098de:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80098e0:	7bfa      	ldrb	r2, [r7, #15]
 80098e2:	79fb      	ldrb	r3, [r7, #7]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	4619      	mov	r1, r3
 80098ec:	2006      	movs	r0, #6
 80098ee:	f7ff fe23 	bl	8009538 <nRF24_WriteReg>
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	4603      	mov	r3, r0
 8009902:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8009904:	2006      	movs	r0, #6
 8009906:	f7ff fdfd 	bl	8009504 <nRF24_ReadReg>
 800990a:	4603      	mov	r3, r0
 800990c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800990e:	7bfb      	ldrb	r3, [r7, #15]
 8009910:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009914:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8009916:	7bfa      	ldrb	r2, [r7, #15]
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	4313      	orrs	r3, r2
 800991c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	4619      	mov	r1, r3
 8009922:	2006      	movs	r0, #6
 8009924:	f7ff fe08 	bl	8009538 <nRF24_WriteReg>
}
 8009928:	bf00      	nop
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <nRF24_SetRXPipe>:
 * @param pipe Pipe cần cấu hình
 * @param aa_state Bật phản hồi ACK hay không (nRF24_AA_ON or nRF24_AA_OFF)
 * @param payload_len độ dài của payload
 */
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	4603      	mov	r3, r0
 8009938:	71fb      	strb	r3, [r7, #7]
 800993a:	460b      	mov	r3, r1
 800993c:	71bb      	strb	r3, [r7, #6]
 800993e:	4613      	mov	r3, r2
 8009940:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8009942:	2002      	movs	r0, #2
 8009944:	f7ff fdde 	bl	8009504 <nRF24_ReadReg>
 8009948:	4603      	mov	r3, r0
 800994a:	b25a      	sxtb	r2, r3
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	2101      	movs	r1, #1
 8009950:	fa01 f303 	lsl.w	r3, r1, r3
 8009954:	b25b      	sxtb	r3, r3
 8009956:	4313      	orrs	r3, r2
 8009958:	b25b      	sxtb	r3, r3
 800995a:	b2db      	uxtb	r3, r3
 800995c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009960:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8009962:	7bfb      	ldrb	r3, [r7, #15]
 8009964:	4619      	mov	r1, r3
 8009966:	2002      	movs	r0, #2
 8009968:	f7ff fde6 	bl	8009538 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	4a19      	ldr	r2, [pc, #100]	; (80099d4 <nRF24_SetRXPipe+0xa4>)
 8009970:	5cd2      	ldrb	r2, [r2, r3]
 8009972:	797b      	ldrb	r3, [r7, #5]
 8009974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009978:	b2db      	uxtb	r3, r3
 800997a:	4619      	mov	r1, r3
 800997c:	4610      	mov	r0, r2
 800997e:	f7ff fddb 	bl	8009538 <nRF24_WriteReg>

	// Set auto acknowledgment
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8009982:	2001      	movs	r0, #1
 8009984:	f7ff fdbe 	bl	8009504 <nRF24_ReadReg>
 8009988:	4603      	mov	r3, r0
 800998a:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON)
 800998c:	79bb      	ldrb	r3, [r7, #6]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d10a      	bne.n	80099a8 <nRF24_SetRXPipe+0x78>
	{
		reg |= (1 << pipe);
 8009992:	79fb      	ldrb	r3, [r7, #7]
 8009994:	2201      	movs	r2, #1
 8009996:	fa02 f303 	lsl.w	r3, r2, r3
 800999a:	b25a      	sxtb	r2, r3
 800999c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	b25b      	sxtb	r3, r3
 80099a4:	73fb      	strb	r3, [r7, #15]
 80099a6:	e00b      	b.n	80099c0 <nRF24_SetRXPipe+0x90>
	}
	else
	{
		reg &= ~(1 << pipe);
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	2201      	movs	r2, #1
 80099ac:	fa02 f303 	lsl.w	r3, r2, r3
 80099b0:	b25b      	sxtb	r3, r3
 80099b2:	43db      	mvns	r3, r3
 80099b4:	b25a      	sxtb	r2, r3
 80099b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ba:	4013      	ands	r3, r2
 80099bc:	b25b      	sxtb	r3, r3
 80099be:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	4619      	mov	r1, r3
 80099c4:	2001      	movs	r0, #1
 80099c6:	f7ff fdb7 	bl	8009538 <nRF24_WriteReg>
}
 80099ca:	bf00      	nop
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	0800c5cc 	.word	0x0800c5cc

080099d8 <nRF24_GetStatus_RXFIFO>:
 * @brief Lấy tastus RX FIFO
 *
 * @return uint8_t one of the nRF24_STATUS_RXFIFO_xx values
 */
uint8_t nRF24_GetStatus_RXFIFO(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 80099dc:	2017      	movs	r0, #23
 80099de:	f7ff fd91 	bl	8009504 <nRF24_ReadReg>
 80099e2:	4603      	mov	r3, r0
 80099e4:	f003 0303 	and.w	r3, r3, #3
 80099e8:	b2db      	uxtb	r3, r3
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	bd80      	pop	{r7, pc}

080099ee <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80099f2:	21ff      	movs	r1, #255	; 0xff
 80099f4:	20e1      	movs	r0, #225	; 0xe1
 80099f6:	f7ff fd9f 	bl	8009538 <nRF24_WriteReg>
}
 80099fa:	bf00      	nop
 80099fc:	bd80      	pop	{r7, pc}

080099fe <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8009a02:	21ff      	movs	r1, #255	; 0xff
 8009a04:	20e2      	movs	r0, #226	; 0xe2
 8009a06:	f7ff fd97 	bl	8009538 <nRF24_WriteReg>
}
 8009a0a:	bf00      	nop
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b082      	sub	sp, #8
 8009a12:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8009a14:	2007      	movs	r0, #7
 8009a16:	f7ff fd75 	bl	8009504 <nRF24_ReadReg>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009a24:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	2007      	movs	r0, #7
 8009a2c:	f7ff fd84 	bl	8009538 <nRF24_WriteReg>
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <nRF24_GetRxDplPayloadWidth>:
 * @brief đọc chiều dài của RX payload
 *
 * @return uint8_t độ dài
 */
static uint8_t nRF24_GetRxDplPayloadWidth()
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8009a3e:	f7ff fd2d 	bl	800949c <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8009a42:	2060      	movs	r0, #96	; 0x60
 8009a44:	f7ff fd42 	bl	80094cc <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8009a48:	20ff      	movs	r0, #255	; 0xff
 8009a4a:	f7ff fd3f 	bl	80094cc <nRF24_LL_RW>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8009a52:	f7ff fd2f 	bl	80094b4 <nRF24_CSN_H>

	return value;
 8009a56:	79fb      	ldrb	r3, [r7, #7]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8009a6e:	2007      	movs	r0, #7
 8009a70:	f7ff fd48 	bl	8009504 <nRF24_ReadReg>
 8009a74:	4603      	mov	r3, r0
 8009a76:	105b      	asrs	r3, r3, #1
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	f003 0307 	and.w	r3, r3, #7
 8009a7e:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6)
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	2b05      	cmp	r3, #5
 8009a84:	d829      	bhi.n	8009ada <nRF24_ReadPayloadGeneric+0x7a>
	{
		// Get payload length
		if (dpl)
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00f      	beq.n	8009aac <nRF24_ReadPayloadGeneric+0x4c>
		{
			*length = nRF24_GetRxDplPayloadWidth();
 8009a8c:	f7ff ffd4 	bl	8009a38 <nRF24_GetRxDplPayloadWidth>
 8009a90:	4603      	mov	r3, r0
 8009a92:	461a      	mov	r2, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	701a      	strb	r2, [r3, #0]
			if (*length > 32)
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	d90f      	bls.n	8009ac0 <nRF24_ReadPayloadGeneric+0x60>
			{ // broken packet
				*length = 0;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8009aa6:	f7ff ffaa 	bl	80099fe <nRF24_FlushRX>
 8009aaa:	e009      	b.n	8009ac0 <nRF24_ReadPayloadGeneric+0x60>
			}
		}
		else
		{
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]); // đọc payload của pipe x
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
 8009aae:	4a0f      	ldr	r2, [pc, #60]	; (8009aec <nRF24_ReadPayloadGeneric+0x8c>)
 8009ab0:	5cd3      	ldrb	r3, [r2, r3]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff fd26 	bl	8009504 <nRF24_ReadReg>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	461a      	mov	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	701a      	strb	r2, [r3, #0]
		}

		// đọc payload từ RX FIFO
		if (*length)
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d006      	beq.n	8009ad6 <nRF24_ReadPayloadGeneric+0x76>
		{
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	68f9      	ldr	r1, [r7, #12]
 8009ad0:	2061      	movs	r0, #97	; 0x61
 8009ad2:	f7ff fd69 	bl	80095a8 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	e003      	b.n	8009ae2 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	2200      	movs	r2, #0
 8009ade:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8009ae0:	23ff      	movs	r3, #255	; 0xff
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	0800c5cc 	.word	0x0800c5cc

08009af0 <nRF24_ReadPayload>:
 * @return   nRF24_RX_PIPEX - đã nhận được dữ liệu từ pipe x
 * @return	 nRF24_RX_EMPTY - the RX FIFO đéo có cc gì
 *
 */
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length, 0);
 8009afa:	2200      	movs	r2, #0
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7ff ffae 	bl	8009a60 <nRF24_ReadPayloadGeneric>
 8009b04:	4603      	mov	r3, r0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
	...

08009b10 <pid_calculate>:
        value = min;
    return value;
}

void pid_calculate(float Error, float P, float I, float D, float PrevError, float PrevIterm)
{
 8009b10:	b5b0      	push	{r4, r5, r7, lr}
 8009b12:	b088      	sub	sp, #32
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
    float Pterm = P * Error;
 8009b1e:	68f9      	ldr	r1, [r7, #12]
 8009b20:	68b8      	ldr	r0, [r7, #8]
 8009b22:	f7f7 f8ff 	bl	8000d24 <__aeabi_fmul>
 8009b26:	4603      	mov	r3, r0
 8009b28:	61fb      	str	r3, [r7, #28]
    float Iterm = PrevIterm + I * (Error + PrevError) * dt / 2;
 8009b2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009b2c:	f7f6 fc74 	bl	8000418 <__aeabi_f2d>
 8009b30:	4604      	mov	r4, r0
 8009b32:	460d      	mov	r5, r1
 8009b34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f7f6 ffec 	bl	8000b14 <__addsf3>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7f7 f8ef 	bl	8000d24 <__aeabi_fmul>
 8009b46:	4603      	mov	r3, r0
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7f6 fc65 	bl	8000418 <__aeabi_f2d>
 8009b4e:	a328      	add	r3, pc, #160	; (adr r3, 8009bf0 <pid_calculate+0xe0>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	f7f6 fcb8 	bl	80004c8 <__aeabi_dmul>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	4619      	mov	r1, r3
 8009b60:	f04f 0200 	mov.w	r2, #0
 8009b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b68:	f7f6 fdd8 	bl	800071c <__aeabi_ddiv>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	4620      	mov	r0, r4
 8009b72:	4629      	mov	r1, r5
 8009b74:	f7f6 faf2 	bl	800015c <__adddf3>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	4621      	mov	r1, r4
 8009b80:	f7f6 ff72 	bl	8000a68 <__aeabi_d2f>
 8009b84:	4603      	mov	r3, r0
 8009b86:	61bb      	str	r3, [r7, #24]
//        Iterm = 400;
//
//    else if (Iterm < -400)
//        Iterm = -400;

    float Dterm = D * (Error - PrevError) / dt;
 8009b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f7f6 ffc0 	bl	8000b10 <__aeabi_fsub>
 8009b90:	4603      	mov	r3, r0
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7f7 f8c5 	bl	8000d24 <__aeabi_fmul>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7f6 fc3b 	bl	8000418 <__aeabi_f2d>
 8009ba2:	a313      	add	r3, pc, #76	; (adr r3, 8009bf0 <pid_calculate+0xe0>)
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f7f6 fdb8 	bl	800071c <__aeabi_ddiv>
 8009bac:	4603      	mov	r3, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	f7f6 ff58 	bl	8000a68 <__aeabi_d2f>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	617b      	str	r3, [r7, #20]
    float PIDOutput = Pterm + Iterm + Dterm;
 8009bbc:	69b9      	ldr	r1, [r7, #24]
 8009bbe:	69f8      	ldr	r0, [r7, #28]
 8009bc0:	f7f6 ffa8 	bl	8000b14 <__addsf3>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6978      	ldr	r0, [r7, #20]
 8009bca:	f7f6 ffa3 	bl	8000b14 <__addsf3>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	613b      	str	r3, [r7, #16]

    PIDReturn[0] = PIDOutput;
 8009bd2:	4a09      	ldr	r2, [pc, #36]	; (8009bf8 <pid_calculate+0xe8>)
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	6013      	str	r3, [r2, #0]
    PIDReturn[1] = Error;
 8009bd8:	4a07      	ldr	r2, [pc, #28]	; (8009bf8 <pid_calculate+0xe8>)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6053      	str	r3, [r2, #4]
      PIDReturn[2] = Iterm;
 8009bde:	4a06      	ldr	r2, [pc, #24]	; (8009bf8 <pid_calculate+0xe8>)
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	6093      	str	r3, [r2, #8]
}
 8009be4:	bf00      	nop
 8009be6:	3720      	adds	r7, #32
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bdb0      	pop	{r4, r5, r7, pc}
 8009bec:	f3af 8000 	nop.w
 8009bf0:	47ae147b 	.word	0x47ae147b
 8009bf4:	3f847ae1 	.word	0x3f847ae1
 8009bf8:	200004dc 	.word	0x200004dc
 8009bfc:	00000000 	.word	0x00000000

08009c00 <pid_pitch>:

    // Gioi han PWM
}

void pid_pitch(uint16_t pitch_rc, float pitch_angle, float pitch_rate, PID_t *PID_out)
{
 8009c00:	b5b0      	push	{r4, r5, r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af02      	add	r7, sp, #8
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]
 8009c0a:	603b      	str	r3, [r7, #0]
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	81fb      	strh	r3, [r7, #14]
    if (pitch_rc > 1540 || pitch_rc < 1440)
 8009c10:	89fb      	ldrh	r3, [r7, #14]
 8009c12:	f240 6204 	movw	r2, #1540	; 0x604
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d807      	bhi.n	8009c2a <pid_pitch+0x2a>
 8009c1a:	89fb      	ldrh	r3, [r7, #14]
 8009c1c:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8009c20:	d303      	bcc.n	8009c2a <pid_pitch+0x2a>
        pitch_rc = pitch_rc;

    }
    else
    {
        pitch_rc = 1500;
 8009c22:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009c26:	81fb      	strh	r3, [r7, #14]
 8009c28:	e000      	b.n	8009c2c <pid_pitch+0x2c>
        pitch_rc = pitch_rc;
 8009c2a:	bf00      	nop
    }
    pitch_rc = 1500;
 8009c2c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009c30:	81fb      	strh	r3, [r7, #14]
    error = 0.08 * (pitch_rc - 1500) - pitch_angle;
 8009c32:	89fb      	ldrh	r3, [r7, #14]
 8009c34:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7f6 fbdb 	bl	80003f4 <__aeabi_i2d>
 8009c3e:	a332      	add	r3, pc, #200	; (adr r3, 8009d08 <pid_pitch+0x108>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f7f6 fc40 	bl	80004c8 <__aeabi_dmul>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	4625      	mov	r5, r4
 8009c4e:	461c      	mov	r4, r3
 8009c50:	68b8      	ldr	r0, [r7, #8]
 8009c52:	f7f6 fbe1 	bl	8000418 <__aeabi_f2d>
 8009c56:	4602      	mov	r2, r0
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	f7f6 fa7b 	bl	8000158 <__aeabi_dsub>
 8009c62:	4603      	mov	r3, r0
 8009c64:	460c      	mov	r4, r1
 8009c66:	4618      	mov	r0, r3
 8009c68:	4621      	mov	r1, r4
 8009c6a:	f7f6 fefd 	bl	8000a68 <__aeabi_d2f>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	4b27      	ldr	r3, [pc, #156]	; (8009d10 <pid_pitch+0x110>)
 8009c72:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_angle_pitch, Ki_angle_pitch, Kd_angle_pitch, last_error_angle[1], last_Iterm_angle[1]);
 8009c74:	4b26      	ldr	r3, [pc, #152]	; (8009d10 <pid_pitch+0x110>)
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	4b26      	ldr	r3, [pc, #152]	; (8009d14 <pid_pitch+0x114>)
 8009c7a:	6819      	ldr	r1, [r3, #0]
 8009c7c:	4b26      	ldr	r3, [pc, #152]	; (8009d18 <pid_pitch+0x118>)
 8009c7e:	681c      	ldr	r4, [r3, #0]
 8009c80:	4b26      	ldr	r3, [pc, #152]	; (8009d1c <pid_pitch+0x11c>)
 8009c82:	681d      	ldr	r5, [r3, #0]
 8009c84:	4b26      	ldr	r3, [pc, #152]	; (8009d20 <pid_pitch+0x120>)
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4a26      	ldr	r2, [pc, #152]	; (8009d24 <pid_pitch+0x124>)
 8009c8a:	6852      	ldr	r2, [r2, #4]
 8009c8c:	9201      	str	r2, [sp, #4]
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	462b      	mov	r3, r5
 8009c92:	4622      	mov	r2, r4
 8009c94:	f7ff ff3c 	bl	8009b10 <pid_calculate>
    setpoint_rate_pitch = PIDReturn[0];
 8009c98:	4b23      	ldr	r3, [pc, #140]	; (8009d28 <pid_pitch+0x128>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a23      	ldr	r2, [pc, #140]	; (8009d2c <pid_pitch+0x12c>)
 8009c9e:	6013      	str	r3, [r2, #0]
    last_error_angle[1] = PIDReturn[1];
 8009ca0:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <pid_pitch+0x128>)
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	4a1e      	ldr	r2, [pc, #120]	; (8009d20 <pid_pitch+0x120>)
 8009ca6:	6053      	str	r3, [r2, #4]
    last_Iterm_angle[1] = PIDReturn[2];
 8009ca8:	4b1f      	ldr	r3, [pc, #124]	; (8009d28 <pid_pitch+0x128>)
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	4a1d      	ldr	r2, [pc, #116]	; (8009d24 <pid_pitch+0x124>)
 8009cae:	6053      	str	r3, [r2, #4]
   // setpoint_rate_pitch = math_constrain(setpoint_rate_pitch, -60, 60);

    // Gioi han ratepitch
	//setpoint_rate_pitch = 0;

    error = setpoint_rate_pitch - pitch_rate;
 8009cb0:	4b1e      	ldr	r3, [pc, #120]	; (8009d2c <pid_pitch+0x12c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7f6 ff2a 	bl	8000b10 <__aeabi_fsub>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	4b13      	ldr	r3, [pc, #76]	; (8009d10 <pid_pitch+0x110>)
 8009cc2:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_rate_pitch, Ki_rate_pitch, Kd_rate_pitch, last_error_rate[0], last_Iterm_rate[0]);
 8009cc4:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <pid_pitch+0x110>)
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	4b19      	ldr	r3, [pc, #100]	; (8009d30 <pid_pitch+0x130>)
 8009cca:	6819      	ldr	r1, [r3, #0]
 8009ccc:	4b19      	ldr	r3, [pc, #100]	; (8009d34 <pid_pitch+0x134>)
 8009cce:	681c      	ldr	r4, [r3, #0]
 8009cd0:	4b19      	ldr	r3, [pc, #100]	; (8009d38 <pid_pitch+0x138>)
 8009cd2:	681d      	ldr	r5, [r3, #0]
 8009cd4:	4b19      	ldr	r3, [pc, #100]	; (8009d3c <pid_pitch+0x13c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a19      	ldr	r2, [pc, #100]	; (8009d40 <pid_pitch+0x140>)
 8009cda:	6812      	ldr	r2, [r2, #0]
 8009cdc:	9201      	str	r2, [sp, #4]
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	462b      	mov	r3, r5
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	f7ff ff14 	bl	8009b10 <pid_calculate>
    PID_out->PID_pitch_out = PIDReturn[0];
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <pid_pitch+0x128>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	605a      	str	r2, [r3, #4]
    last_error_rate[1] = PIDReturn[1];
 8009cf0:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <pid_pitch+0x128>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	4a11      	ldr	r2, [pc, #68]	; (8009d3c <pid_pitch+0x13c>)
 8009cf6:	6053      	str	r3, [r2, #4]
    last_Iterm_rate[1] = PIDReturn[2];
 8009cf8:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <pid_pitch+0x128>)
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	4a10      	ldr	r2, [pc, #64]	; (8009d40 <pid_pitch+0x140>)
 8009cfe:	6053      	str	r3, [r2, #4]

    // Gioi han PWM
}
 8009d00:	bf00      	nop
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bdb0      	pop	{r4, r5, r7, pc}
 8009d08:	47ae147b 	.word	0x47ae147b
 8009d0c:	3fb47ae1 	.word	0x3fb47ae1
 8009d10:	200004d0 	.word	0x200004d0
 8009d14:	200000b0 	.word	0x200000b0
 8009d18:	200000b4 	.word	0x200000b4
 8009d1c:	200000b8 	.word	0x200000b8
 8009d20:	2000047c 	.word	0x2000047c
 8009d24:	200004a0 	.word	0x200004a0
 8009d28:	200004dc 	.word	0x200004dc
 8009d2c:	20000488 	.word	0x20000488
 8009d30:	200000bc 	.word	0x200000bc
 8009d34:	200000c0 	.word	0x200000c0
 8009d38:	200000c4 	.word	0x200000c4
 8009d3c:	2000048c 	.word	0x2000048c
 8009d40:	200004e8 	.word	0x200004e8

08009d44 <nRF24_CE_L>:
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009d4e:	4802      	ldr	r0, [pc, #8]	; (8009d58 <nRF24_CE_L+0x14>)
 8009d50:	f7f7 ff6e 	bl	8001c30 <HAL_GPIO_WritePin>
}
 8009d54:	bf00      	nop
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	40010800 	.word	0x40010800

08009d5c <nRF24_CE_H>:
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8009d60:	2201      	movs	r2, #1
 8009d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009d66:	4802      	ldr	r0, [pc, #8]	; (8009d70 <nRF24_CE_H+0x14>)
 8009d68:	f7f7 ff62 	bl	8001c30 <HAL_GPIO_WritePin>
}
 8009d6c:	bf00      	nop
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	40010800 	.word	0x40010800

08009d74 <Delay_ms>:

static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7f7 fa2f 	bl	80011e0 <HAL_Delay>
 8009d82:	bf00      	nop
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <Toggle_LED>:

extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009d90:	2104      	movs	r1, #4
 8009d92:	4802      	ldr	r0, [pc, #8]	; (8009d9c <Toggle_LED+0x10>)
 8009d94:	f7f7 ff64 	bl	8001c60 <HAL_GPIO_TogglePin>
}
 8009d98:	bf00      	nop
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	40010c00 	.word	0x40010c00

08009da0 <runRadio>:
}

#endif // DEMO_TX_

int runRadio(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
#if (DEBUG_RX)
    printf("\r\nSTM32 is online.\r\n");
#endif // debug
    nRF24_CE_L();
 8009da4:	f7ff ffce 	bl	8009d44 <nRF24_CE_L>
#if (DEBUG_RX)
    printf("nRF24L01+ check: ");
#endif
    while (!nRF24_Check())
 8009da8:	e004      	b.n	8009db4 <runRadio+0x14>
    {
            Toggle_LED();
 8009daa:	f7ff ffef 	bl	8009d8c <Toggle_LED>
            Delay_ms(50);
 8009dae:	2032      	movs	r0, #50	; 0x32
 8009db0:	f7ff ffe0 	bl	8009d74 <Delay_ms>
    while (!nRF24_Check())
 8009db4:	f7ff fc88 	bl	80096c8 <nRF24_Check>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0f5      	beq.n	8009daa <runRadio+0xa>
    }
    nRF24_Init();
 8009dbe:	f7ff fc36 	bl	800962e <nRF24_Init>
    // nRF24_CE_L();

/***************************************************************************/
#if (RX_SINGLE)

    nRF24_SetRFChannel(40);
 8009dc2:	2028      	movs	r0, #40	; 0x28
 8009dc4:	f7ff fd0f 	bl	80097e6 <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8009dc8:	2008      	movs	r0, #8
 8009dca:	f7ff fd96 	bl	80098fa <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8009dce:	200c      	movs	r0, #12
 8009dd0:	f7ff fce8 	bl	80097a4 <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 8009dd4:	2003      	movs	r0, #3
 8009dd6:	f7ff fd14 	bl	8009802 <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR);
 8009dda:	490c      	ldr	r1, [pc, #48]	; (8009e0c <runRadio+0x6c>)
 8009ddc:	2001      	movs	r0, #1
 8009dde:	f7ff fd21 	bl	8009824 <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 24);
 8009de2:	2218      	movs	r2, #24
 8009de4:	2101      	movs	r1, #1
 8009de6:	2001      	movs	r0, #1
 8009de8:	f7ff fda2 	bl	8009930 <nRF24_SetRXPipe>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8009dec:	2006      	movs	r0, #6
 8009dee:	f7ff fd69 	bl	80098c4 <nRF24_SetTXPower>
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8009df2:	2001      	movs	r0, #1
 8009df4:	f7ff fcb5 	bl	8009762 <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 8009df8:	f7ff fe09 	bl	8009a0e <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8009dfc:	2002      	movs	r0, #2
 8009dfe:	f7ff fc91 	bl	8009724 <nRF24_SetPowerMode>
    nRF24_CE_H();
 8009e02:	f7ff ffab 	bl	8009d5c <nRF24_CE_H>
        Toggle_LED();
        Delay_ms(100);
    }

#endif // TX_SINGLE
}
 8009e06:	bf00      	nop
 8009e08:	4618      	mov	r0, r3
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	0800c5dc 	.word	0x0800c5dc

08009e10 <RX_data>:

void RX_data(void)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0

    if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8009e16:	f7ff fddf 	bl	80099d8 <nRF24_GetStatus_RXFIFO>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d009      	beq.n	8009e34 <RX_data+0x24>
    {
        nRF24_RXResult pipe = nRF24_ReadPayload((uint8_t *)&payload_packet, &payload_length);
 8009e20:	4906      	ldr	r1, [pc, #24]	; (8009e3c <RX_data+0x2c>)
 8009e22:	4807      	ldr	r0, [pc, #28]	; (8009e40 <RX_data+0x30>)
 8009e24:	f7ff fe64 	bl	8009af0 <nRF24_ReadPayload>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	71fb      	strb	r3, [r7, #7]
        // Clear all pending IRQ flags
        nRF24_ClearIRQFlags();
 8009e2c:	f7ff fdef 	bl	8009a0e <nRF24_ClearIRQFlags>
        Toggle_LED();
 8009e30:	f7ff ffac 	bl	8009d8c <Toggle_LED>
    }
    else
    {
        // todo:
    }
}
 8009e34:	bf00      	nop
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20000020 	.word	0x20000020
 8009e40:	200004fc 	.word	0x200004fc

08009e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009e4a:	4b15      	ldr	r3, [pc, #84]	; (8009ea0 <HAL_MspInit+0x5c>)
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	4a14      	ldr	r2, [pc, #80]	; (8009ea0 <HAL_MspInit+0x5c>)
 8009e50:	f043 0301 	orr.w	r3, r3, #1
 8009e54:	6193      	str	r3, [r2, #24]
 8009e56:	4b12      	ldr	r3, [pc, #72]	; (8009ea0 <HAL_MspInit+0x5c>)
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	60bb      	str	r3, [r7, #8]
 8009e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e62:	4b0f      	ldr	r3, [pc, #60]	; (8009ea0 <HAL_MspInit+0x5c>)
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	4a0e      	ldr	r2, [pc, #56]	; (8009ea0 <HAL_MspInit+0x5c>)
 8009e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e6c:	61d3      	str	r3, [r2, #28]
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ea0 <HAL_MspInit+0x5c>)
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e76:	607b      	str	r3, [r7, #4]
 8009e78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009e7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <HAL_MspInit+0x60>)
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <HAL_MspInit+0x60>)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009e96:	bf00      	nop
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bc80      	pop	{r7}
 8009e9e:	4770      	bx	lr
 8009ea0:	40021000 	.word	0x40021000
 8009ea4:	40010000 	.word	0x40010000

08009ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08a      	sub	sp, #40	; 0x28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009eb0:	f107 0314 	add.w	r3, r7, #20
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	605a      	str	r2, [r3, #4]
 8009eba:	609a      	str	r2, [r3, #8]
 8009ebc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a1d      	ldr	r2, [pc, #116]	; (8009f38 <HAL_I2C_MspInit+0x90>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d132      	bne.n	8009f2e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ec8:	4b1c      	ldr	r3, [pc, #112]	; (8009f3c <HAL_I2C_MspInit+0x94>)
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	4a1b      	ldr	r2, [pc, #108]	; (8009f3c <HAL_I2C_MspInit+0x94>)
 8009ece:	f043 0308 	orr.w	r3, r3, #8
 8009ed2:	6193      	str	r3, [r2, #24]
 8009ed4:	4b19      	ldr	r3, [pc, #100]	; (8009f3c <HAL_I2C_MspInit+0x94>)
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	f003 0308 	and.w	r3, r3, #8
 8009edc:	613b      	str	r3, [r7, #16]
 8009ede:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009ee0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009ee6:	2312      	movs	r3, #18
 8009ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009eea:	2303      	movs	r3, #3
 8009eec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009eee:	f107 0314 	add.w	r3, r7, #20
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4812      	ldr	r0, [pc, #72]	; (8009f40 <HAL_I2C_MspInit+0x98>)
 8009ef6:	f7f7 fd41 	bl	800197c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8009efa:	4b12      	ldr	r3, [pc, #72]	; (8009f44 <HAL_I2C_MspInit+0x9c>)
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	627b      	str	r3, [r7, #36]	; 0x24
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	f043 0302 	orr.w	r3, r3, #2
 8009f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f10:	4a0c      	ldr	r2, [pc, #48]	; (8009f44 <HAL_I2C_MspInit+0x9c>)
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009f16:	4b09      	ldr	r3, [pc, #36]	; (8009f3c <HAL_I2C_MspInit+0x94>)
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	4a08      	ldr	r2, [pc, #32]	; (8009f3c <HAL_I2C_MspInit+0x94>)
 8009f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f20:	61d3      	str	r3, [r2, #28]
 8009f22:	4b06      	ldr	r3, [pc, #24]	; (8009f3c <HAL_I2C_MspInit+0x94>)
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009f2e:	bf00      	nop
 8009f30:	3728      	adds	r7, #40	; 0x28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	40005400 	.word	0x40005400
 8009f3c:	40021000 	.word	0x40021000
 8009f40:	40010c00 	.word	0x40010c00
 8009f44:	40010000 	.word	0x40010000

08009f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f50:	f107 0310 	add.w	r3, r7, #16
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	605a      	str	r2, [r3, #4]
 8009f5a:	609a      	str	r2, [r3, #8]
 8009f5c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a1c      	ldr	r2, [pc, #112]	; (8009fd4 <HAL_SPI_MspInit+0x8c>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d131      	bne.n	8009fcc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009f68:	4b1b      	ldr	r3, [pc, #108]	; (8009fd8 <HAL_SPI_MspInit+0x90>)
 8009f6a:	69db      	ldr	r3, [r3, #28]
 8009f6c:	4a1a      	ldr	r2, [pc, #104]	; (8009fd8 <HAL_SPI_MspInit+0x90>)
 8009f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f72:	61d3      	str	r3, [r2, #28]
 8009f74:	4b18      	ldr	r3, [pc, #96]	; (8009fd8 <HAL_SPI_MspInit+0x90>)
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f80:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <HAL_SPI_MspInit+0x90>)
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	4a14      	ldr	r2, [pc, #80]	; (8009fd8 <HAL_SPI_MspInit+0x90>)
 8009f86:	f043 0308 	orr.w	r3, r3, #8
 8009f8a:	6193      	str	r3, [r2, #24]
 8009f8c:	4b12      	ldr	r3, [pc, #72]	; (8009fd8 <HAL_SPI_MspInit+0x90>)
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	f003 0308 	and.w	r3, r3, #8
 8009f94:	60bb      	str	r3, [r7, #8]
 8009f96:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 8009f98:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8009f9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fa6:	f107 0310 	add.w	r3, r7, #16
 8009faa:	4619      	mov	r1, r3
 8009fac:	480b      	ldr	r0, [pc, #44]	; (8009fdc <HAL_SPI_MspInit+0x94>)
 8009fae:	f7f7 fce5 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8009fb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8009fc0:	f107 0310 	add.w	r3, r7, #16
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4805      	ldr	r0, [pc, #20]	; (8009fdc <HAL_SPI_MspInit+0x94>)
 8009fc8:	f7f7 fcd8 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009fcc:	bf00      	nop
 8009fce:	3720      	adds	r7, #32
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	40003800 	.word	0x40003800
 8009fd8:	40021000 	.word	0x40021000
 8009fdc:	40010c00 	.word	0x40010c00

08009fe0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a09      	ldr	r2, [pc, #36]	; (800a014 <HAL_TIM_PWM_MspInit+0x34>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d10b      	bne.n	800a00a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009ff2:	4b09      	ldr	r3, [pc, #36]	; (800a018 <HAL_TIM_PWM_MspInit+0x38>)
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	4a08      	ldr	r2, [pc, #32]	; (800a018 <HAL_TIM_PWM_MspInit+0x38>)
 8009ff8:	f043 0302 	orr.w	r3, r3, #2
 8009ffc:	61d3      	str	r3, [r2, #28]
 8009ffe:	4b06      	ldr	r3, [pc, #24]	; (800a018 <HAL_TIM_PWM_MspInit+0x38>)
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	f003 0302 	and.w	r3, r3, #2
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800a00a:	bf00      	nop
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	bc80      	pop	{r7}
 800a012:	4770      	bx	lr
 800a014:	40000400 	.word	0x40000400
 800a018:	40021000 	.word	0x40021000

0800a01c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a0d      	ldr	r2, [pc, #52]	; (800a060 <HAL_TIM_Base_MspInit+0x44>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d113      	bne.n	800a056 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a02e:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <HAL_TIM_Base_MspInit+0x48>)
 800a030:	69db      	ldr	r3, [r3, #28]
 800a032:	4a0c      	ldr	r2, [pc, #48]	; (800a064 <HAL_TIM_Base_MspInit+0x48>)
 800a034:	f043 0304 	orr.w	r3, r3, #4
 800a038:	61d3      	str	r3, [r2, #28]
 800a03a:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <HAL_TIM_Base_MspInit+0x48>)
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	f003 0304 	and.w	r3, r3, #4
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800a046:	2200      	movs	r2, #0
 800a048:	2102      	movs	r1, #2
 800a04a:	201e      	movs	r0, #30
 800a04c:	f7f7 f9c1 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a050:	201e      	movs	r0, #30
 800a052:	f7f7 f9da 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	40000800 	.word	0x40000800
 800a064:	40021000 	.word	0x40021000

0800a068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a070:	f107 0310 	add.w	r3, r7, #16
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]
 800a078:	605a      	str	r2, [r3, #4]
 800a07a:	609a      	str	r2, [r3, #8]
 800a07c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a0f      	ldr	r2, [pc, #60]	; (800a0c0 <HAL_TIM_MspPostInit+0x58>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d117      	bne.n	800a0b8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a088:	4b0e      	ldr	r3, [pc, #56]	; (800a0c4 <HAL_TIM_MspPostInit+0x5c>)
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	4a0d      	ldr	r2, [pc, #52]	; (800a0c4 <HAL_TIM_MspPostInit+0x5c>)
 800a08e:	f043 0308 	orr.w	r3, r3, #8
 800a092:	6193      	str	r3, [r2, #24]
 800a094:	4b0b      	ldr	r3, [pc, #44]	; (800a0c4 <HAL_TIM_MspPostInit+0x5c>)
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	f003 0308 	and.w	r3, r3, #8
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0ac:	f107 0310 	add.w	r3, r7, #16
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4805      	ldr	r0, [pc, #20]	; (800a0c8 <HAL_TIM_MspPostInit+0x60>)
 800a0b4:	f7f7 fc62 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800a0b8:	bf00      	nop
 800a0ba:	3720      	adds	r7, #32
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	40000400 	.word	0x40000400
 800a0c4:	40021000 	.word	0x40021000
 800a0c8:	40010c00 	.word	0x40010c00

0800a0cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0d4:	f107 0310 	add.w	r3, r7, #16
 800a0d8:	2200      	movs	r2, #0
 800a0da:	601a      	str	r2, [r3, #0]
 800a0dc:	605a      	str	r2, [r3, #4]
 800a0de:	609a      	str	r2, [r3, #8]
 800a0e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a33      	ldr	r2, [pc, #204]	; (800a1b4 <HAL_UART_MspInit+0xe8>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d15f      	bne.n	800a1ac <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a0ec:	4b32      	ldr	r3, [pc, #200]	; (800a1b8 <HAL_UART_MspInit+0xec>)
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	4a31      	ldr	r2, [pc, #196]	; (800a1b8 <HAL_UART_MspInit+0xec>)
 800a0f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0f6:	6193      	str	r3, [r2, #24]
 800a0f8:	4b2f      	ldr	r3, [pc, #188]	; (800a1b8 <HAL_UART_MspInit+0xec>)
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a104:	4b2c      	ldr	r3, [pc, #176]	; (800a1b8 <HAL_UART_MspInit+0xec>)
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	4a2b      	ldr	r2, [pc, #172]	; (800a1b8 <HAL_UART_MspInit+0xec>)
 800a10a:	f043 0304 	orr.w	r3, r3, #4
 800a10e:	6193      	str	r3, [r2, #24]
 800a110:	4b29      	ldr	r3, [pc, #164]	; (800a1b8 <HAL_UART_MspInit+0xec>)
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	60bb      	str	r3, [r7, #8]
 800a11a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a11c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a120:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a122:	2302      	movs	r3, #2
 800a124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a126:	2303      	movs	r3, #3
 800a128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a12a:	f107 0310 	add.w	r3, r7, #16
 800a12e:	4619      	mov	r1, r3
 800a130:	4822      	ldr	r0, [pc, #136]	; (800a1bc <HAL_UART_MspInit+0xf0>)
 800a132:	f7f7 fc23 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a13a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a13c:	2300      	movs	r3, #0
 800a13e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a140:	2300      	movs	r3, #0
 800a142:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a144:	f107 0310 	add.w	r3, r7, #16
 800a148:	4619      	mov	r1, r3
 800a14a:	481c      	ldr	r0, [pc, #112]	; (800a1bc <HAL_UART_MspInit+0xf0>)
 800a14c:	f7f7 fc16 	bl	800197c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800a150:	4b1b      	ldr	r3, [pc, #108]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a152:	4a1c      	ldr	r2, [pc, #112]	; (800a1c4 <HAL_UART_MspInit+0xf8>)
 800a154:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a156:	4b1a      	ldr	r3, [pc, #104]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a158:	2200      	movs	r2, #0
 800a15a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a15c:	4b18      	ldr	r3, [pc, #96]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a15e:	2200      	movs	r2, #0
 800a160:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a162:	4b17      	ldr	r3, [pc, #92]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a164:	2280      	movs	r2, #128	; 0x80
 800a166:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a168:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a16e:	4b14      	ldr	r3, [pc, #80]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a170:	2200      	movs	r2, #0
 800a172:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a174:	4b12      	ldr	r3, [pc, #72]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a176:	2200      	movs	r2, #0
 800a178:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a17a:	4b11      	ldr	r3, [pc, #68]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a180:	480f      	ldr	r0, [pc, #60]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a182:	f7f7 f95d 	bl	8001440 <HAL_DMA_Init>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800a18c:	f7fb fe2a 	bl	8005de4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a0b      	ldr	r2, [pc, #44]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a194:	639a      	str	r2, [r3, #56]	; 0x38
 800a196:	4a0a      	ldr	r2, [pc, #40]	; (800a1c0 <HAL_UART_MspInit+0xf4>)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800a19c:	2200      	movs	r2, #0
 800a19e:	2101      	movs	r1, #1
 800a1a0:	2025      	movs	r0, #37	; 0x25
 800a1a2:	f7f7 f916 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a1a6:	2025      	movs	r0, #37	; 0x25
 800a1a8:	f7f7 f92f 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a1ac:	bf00      	nop
 800a1ae:	3720      	adds	r7, #32
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	40013800 	.word	0x40013800
 800a1b8:	40021000 	.word	0x40021000
 800a1bc:	40010800 	.word	0x40010800
 800a1c0:	200002f8 	.word	0x200002f8
 800a1c4:	40020058 	.word	0x40020058

0800a1c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a1cc:	bf00      	nop
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bc80      	pop	{r7}
 800a1d2:	4770      	bx	lr

0800a1d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a1d8:	e7fe      	b.n	800a1d8 <HardFault_Handler+0x4>

0800a1da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a1de:	e7fe      	b.n	800a1de <MemManage_Handler+0x4>

0800a1e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a1e4:	e7fe      	b.n	800a1e4 <BusFault_Handler+0x4>

0800a1e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a1ea:	e7fe      	b.n	800a1ea <UsageFault_Handler+0x4>

0800a1ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a1f0:	bf00      	nop
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bc80      	pop	{r7}
 800a1f6:	4770      	bx	lr

0800a1f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a1fc:	bf00      	nop
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bc80      	pop	{r7}
 800a202:	4770      	bx	lr

0800a204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a204:	b480      	push	{r7}
 800a206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a208:	bf00      	nop
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bc80      	pop	{r7}
 800a20e:	4770      	bx	lr

0800a210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a214:	f7f6 ffc8 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a218:	bf00      	nop
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a220:	4802      	ldr	r0, [pc, #8]	; (800a22c <DMA1_Channel5_IRQHandler+0x10>)
 800a222:	f7f7 fa77 	bl	8001714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a226:	bf00      	nop
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	200002f8 	.word	0x200002f8

0800a230 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a234:	4802      	ldr	r0, [pc, #8]	; (800a240 <TIM4_IRQHandler+0x10>)
 800a236:	f7f9 fd97 	bl	8003d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a23a:	bf00      	nop
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	200001e8 	.word	0x200001e8

0800a244 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a248:	4802      	ldr	r0, [pc, #8]	; (800a254 <USART1_IRQHandler+0x10>)
 800a24a:	f7fa fc71 	bl	8004b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a24e:	bf00      	nop
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	2000033c 	.word	0x2000033c

0800a258 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a260:	4b11      	ldr	r3, [pc, #68]	; (800a2a8 <_sbrk+0x50>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d102      	bne.n	800a26e <_sbrk+0x16>
		heap_end = &end;
 800a268:	4b0f      	ldr	r3, [pc, #60]	; (800a2a8 <_sbrk+0x50>)
 800a26a:	4a10      	ldr	r2, [pc, #64]	; (800a2ac <_sbrk+0x54>)
 800a26c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a26e:	4b0e      	ldr	r3, [pc, #56]	; (800a2a8 <_sbrk+0x50>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a274:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <_sbrk+0x50>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4413      	add	r3, r2
 800a27c:	466a      	mov	r2, sp
 800a27e:	4293      	cmp	r3, r2
 800a280:	d907      	bls.n	800a292 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a282:	f000 f841 	bl	800a308 <__errno>
 800a286:	4602      	mov	r2, r0
 800a288:	230c      	movs	r3, #12
 800a28a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a28c:	f04f 33ff 	mov.w	r3, #4294967295
 800a290:	e006      	b.n	800a2a0 <_sbrk+0x48>
	}

	heap_end += incr;
 800a292:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <_sbrk+0x50>)
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4413      	add	r3, r2
 800a29a:	4a03      	ldr	r2, [pc, #12]	; (800a2a8 <_sbrk+0x50>)
 800a29c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a29e:	68fb      	ldr	r3, [r7, #12]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20000134 	.word	0x20000134
 800a2ac:	20000518 	.word	0x20000518

0800a2b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a2b4:	bf00      	nop
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bc80      	pop	{r7}
 800a2ba:	4770      	bx	lr

0800a2bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a2bc:	480c      	ldr	r0, [pc, #48]	; (800a2f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a2be:	490d      	ldr	r1, [pc, #52]	; (800a2f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a2c0:	4a0d      	ldr	r2, [pc, #52]	; (800a2f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a2c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a2c4:	e002      	b.n	800a2cc <LoopCopyDataInit>

0800a2c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a2c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a2c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a2ca:	3304      	adds	r3, #4

0800a2cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a2cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a2ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a2d0:	d3f9      	bcc.n	800a2c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a2d2:	4a0a      	ldr	r2, [pc, #40]	; (800a2fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a2d4:	4c0a      	ldr	r4, [pc, #40]	; (800a300 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a2d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a2d8:	e001      	b.n	800a2de <LoopFillZerobss>

0800a2da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a2da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a2dc:	3204      	adds	r2, #4

0800a2de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a2de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a2e0:	d3fb      	bcc.n	800a2da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a2e2:	f7ff ffe5 	bl	800a2b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a2e6:	f000 f815 	bl	800a314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a2ea:	f7fb f9e5 	bl	80056b8 <main>
  bx lr
 800a2ee:	4770      	bx	lr
  ldr r0, =_sdata
 800a2f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a2f4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800a2f8:	0800c6a8 	.word	0x0800c6a8
  ldr r2, =_sbss
 800a2fc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800a300:	20000518 	.word	0x20000518

0800a304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a304:	e7fe      	b.n	800a304 <ADC1_2_IRQHandler>
	...

0800a308 <__errno>:
 800a308:	4b01      	ldr	r3, [pc, #4]	; (800a310 <__errno+0x8>)
 800a30a:	6818      	ldr	r0, [r3, #0]
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	20000028 	.word	0x20000028

0800a314 <__libc_init_array>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	2500      	movs	r5, #0
 800a318:	4e0c      	ldr	r6, [pc, #48]	; (800a34c <__libc_init_array+0x38>)
 800a31a:	4c0d      	ldr	r4, [pc, #52]	; (800a350 <__libc_init_array+0x3c>)
 800a31c:	1ba4      	subs	r4, r4, r6
 800a31e:	10a4      	asrs	r4, r4, #2
 800a320:	42a5      	cmp	r5, r4
 800a322:	d109      	bne.n	800a338 <__libc_init_array+0x24>
 800a324:	f002 f82a 	bl	800c37c <_init>
 800a328:	2500      	movs	r5, #0
 800a32a:	4e0a      	ldr	r6, [pc, #40]	; (800a354 <__libc_init_array+0x40>)
 800a32c:	4c0a      	ldr	r4, [pc, #40]	; (800a358 <__libc_init_array+0x44>)
 800a32e:	1ba4      	subs	r4, r4, r6
 800a330:	10a4      	asrs	r4, r4, #2
 800a332:	42a5      	cmp	r5, r4
 800a334:	d105      	bne.n	800a342 <__libc_init_array+0x2e>
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a33c:	4798      	blx	r3
 800a33e:	3501      	adds	r5, #1
 800a340:	e7ee      	b.n	800a320 <__libc_init_array+0xc>
 800a342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a346:	4798      	blx	r3
 800a348:	3501      	adds	r5, #1
 800a34a:	e7f2      	b.n	800a332 <__libc_init_array+0x1e>
 800a34c:	0800c6a0 	.word	0x0800c6a0
 800a350:	0800c6a0 	.word	0x0800c6a0
 800a354:	0800c6a0 	.word	0x0800c6a0
 800a358:	0800c6a4 	.word	0x0800c6a4

0800a35c <memset>:
 800a35c:	4603      	mov	r3, r0
 800a35e:	4402      	add	r2, r0
 800a360:	4293      	cmp	r3, r2
 800a362:	d100      	bne.n	800a366 <memset+0xa>
 800a364:	4770      	bx	lr
 800a366:	f803 1b01 	strb.w	r1, [r3], #1
 800a36a:	e7f9      	b.n	800a360 <memset+0x4>

0800a36c <siprintf>:
 800a36c:	b40e      	push	{r1, r2, r3}
 800a36e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a372:	b500      	push	{lr}
 800a374:	b09c      	sub	sp, #112	; 0x70
 800a376:	ab1d      	add	r3, sp, #116	; 0x74
 800a378:	9002      	str	r0, [sp, #8]
 800a37a:	9006      	str	r0, [sp, #24]
 800a37c:	9107      	str	r1, [sp, #28]
 800a37e:	9104      	str	r1, [sp, #16]
 800a380:	4808      	ldr	r0, [pc, #32]	; (800a3a4 <siprintf+0x38>)
 800a382:	4909      	ldr	r1, [pc, #36]	; (800a3a8 <siprintf+0x3c>)
 800a384:	f853 2b04 	ldr.w	r2, [r3], #4
 800a388:	9105      	str	r1, [sp, #20]
 800a38a:	6800      	ldr	r0, [r0, #0]
 800a38c:	a902      	add	r1, sp, #8
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	f000 f866 	bl	800a460 <_svfiprintf_r>
 800a394:	2200      	movs	r2, #0
 800a396:	9b02      	ldr	r3, [sp, #8]
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	b01c      	add	sp, #112	; 0x70
 800a39c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3a0:	b003      	add	sp, #12
 800a3a2:	4770      	bx	lr
 800a3a4:	20000028 	.word	0x20000028
 800a3a8:	ffff0208 	.word	0xffff0208

0800a3ac <__ssputs_r>:
 800a3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b0:	688e      	ldr	r6, [r1, #8]
 800a3b2:	4682      	mov	sl, r0
 800a3b4:	429e      	cmp	r6, r3
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	4690      	mov	r8, r2
 800a3ba:	4699      	mov	r9, r3
 800a3bc:	d837      	bhi.n	800a42e <__ssputs_r+0x82>
 800a3be:	898a      	ldrh	r2, [r1, #12]
 800a3c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3c4:	d031      	beq.n	800a42a <__ssputs_r+0x7e>
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	6825      	ldr	r5, [r4, #0]
 800a3ca:	6909      	ldr	r1, [r1, #16]
 800a3cc:	1a6f      	subs	r7, r5, r1
 800a3ce:	6965      	ldr	r5, [r4, #20]
 800a3d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3d4:	fb95 f5f3 	sdiv	r5, r5, r3
 800a3d8:	f109 0301 	add.w	r3, r9, #1
 800a3dc:	443b      	add	r3, r7
 800a3de:	429d      	cmp	r5, r3
 800a3e0:	bf38      	it	cc
 800a3e2:	461d      	movcc	r5, r3
 800a3e4:	0553      	lsls	r3, r2, #21
 800a3e6:	d530      	bpl.n	800a44a <__ssputs_r+0x9e>
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	f000 fb37 	bl	800aa5c <_malloc_r>
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	b950      	cbnz	r0, 800a408 <__ssputs_r+0x5c>
 800a3f2:	230c      	movs	r3, #12
 800a3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f8:	f8ca 3000 	str.w	r3, [sl]
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a402:	81a3      	strh	r3, [r4, #12]
 800a404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a408:	463a      	mov	r2, r7
 800a40a:	6921      	ldr	r1, [r4, #16]
 800a40c:	f000 fab6 	bl	800a97c <memcpy>
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a41a:	81a3      	strh	r3, [r4, #12]
 800a41c:	6126      	str	r6, [r4, #16]
 800a41e:	443e      	add	r6, r7
 800a420:	6026      	str	r6, [r4, #0]
 800a422:	464e      	mov	r6, r9
 800a424:	6165      	str	r5, [r4, #20]
 800a426:	1bed      	subs	r5, r5, r7
 800a428:	60a5      	str	r5, [r4, #8]
 800a42a:	454e      	cmp	r6, r9
 800a42c:	d900      	bls.n	800a430 <__ssputs_r+0x84>
 800a42e:	464e      	mov	r6, r9
 800a430:	4632      	mov	r2, r6
 800a432:	4641      	mov	r1, r8
 800a434:	6820      	ldr	r0, [r4, #0]
 800a436:	f000 faac 	bl	800a992 <memmove>
 800a43a:	68a3      	ldr	r3, [r4, #8]
 800a43c:	2000      	movs	r0, #0
 800a43e:	1b9b      	subs	r3, r3, r6
 800a440:	60a3      	str	r3, [r4, #8]
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	441e      	add	r6, r3
 800a446:	6026      	str	r6, [r4, #0]
 800a448:	e7dc      	b.n	800a404 <__ssputs_r+0x58>
 800a44a:	462a      	mov	r2, r5
 800a44c:	f000 fb60 	bl	800ab10 <_realloc_r>
 800a450:	4606      	mov	r6, r0
 800a452:	2800      	cmp	r0, #0
 800a454:	d1e2      	bne.n	800a41c <__ssputs_r+0x70>
 800a456:	6921      	ldr	r1, [r4, #16]
 800a458:	4650      	mov	r0, sl
 800a45a:	f000 fab3 	bl	800a9c4 <_free_r>
 800a45e:	e7c8      	b.n	800a3f2 <__ssputs_r+0x46>

0800a460 <_svfiprintf_r>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	461d      	mov	r5, r3
 800a466:	898b      	ldrh	r3, [r1, #12]
 800a468:	b09d      	sub	sp, #116	; 0x74
 800a46a:	061f      	lsls	r7, r3, #24
 800a46c:	4680      	mov	r8, r0
 800a46e:	460c      	mov	r4, r1
 800a470:	4616      	mov	r6, r2
 800a472:	d50f      	bpl.n	800a494 <_svfiprintf_r+0x34>
 800a474:	690b      	ldr	r3, [r1, #16]
 800a476:	b96b      	cbnz	r3, 800a494 <_svfiprintf_r+0x34>
 800a478:	2140      	movs	r1, #64	; 0x40
 800a47a:	f000 faef 	bl	800aa5c <_malloc_r>
 800a47e:	6020      	str	r0, [r4, #0]
 800a480:	6120      	str	r0, [r4, #16]
 800a482:	b928      	cbnz	r0, 800a490 <_svfiprintf_r+0x30>
 800a484:	230c      	movs	r3, #12
 800a486:	f8c8 3000 	str.w	r3, [r8]
 800a48a:	f04f 30ff 	mov.w	r0, #4294967295
 800a48e:	e0c8      	b.n	800a622 <_svfiprintf_r+0x1c2>
 800a490:	2340      	movs	r3, #64	; 0x40
 800a492:	6163      	str	r3, [r4, #20]
 800a494:	2300      	movs	r3, #0
 800a496:	9309      	str	r3, [sp, #36]	; 0x24
 800a498:	2320      	movs	r3, #32
 800a49a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a49e:	2330      	movs	r3, #48	; 0x30
 800a4a0:	f04f 0b01 	mov.w	fp, #1
 800a4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4a8:	9503      	str	r5, [sp, #12]
 800a4aa:	4637      	mov	r7, r6
 800a4ac:	463d      	mov	r5, r7
 800a4ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a4b2:	b10b      	cbz	r3, 800a4b8 <_svfiprintf_r+0x58>
 800a4b4:	2b25      	cmp	r3, #37	; 0x25
 800a4b6:	d13e      	bne.n	800a536 <_svfiprintf_r+0xd6>
 800a4b8:	ebb7 0a06 	subs.w	sl, r7, r6
 800a4bc:	d00b      	beq.n	800a4d6 <_svfiprintf_r+0x76>
 800a4be:	4653      	mov	r3, sl
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4640      	mov	r0, r8
 800a4c6:	f7ff ff71 	bl	800a3ac <__ssputs_r>
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	f000 80a4 	beq.w	800a618 <_svfiprintf_r+0x1b8>
 800a4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d2:	4453      	add	r3, sl
 800a4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d6:	783b      	ldrb	r3, [r7, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 809d 	beq.w	800a618 <_svfiprintf_r+0x1b8>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4e8:	9304      	str	r3, [sp, #16]
 800a4ea:	9307      	str	r3, [sp, #28]
 800a4ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4f0:	931a      	str	r3, [sp, #104]	; 0x68
 800a4f2:	462f      	mov	r7, r5
 800a4f4:	2205      	movs	r2, #5
 800a4f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a4fa:	4850      	ldr	r0, [pc, #320]	; (800a63c <_svfiprintf_r+0x1dc>)
 800a4fc:	f000 fa30 	bl	800a960 <memchr>
 800a500:	9b04      	ldr	r3, [sp, #16]
 800a502:	b9d0      	cbnz	r0, 800a53a <_svfiprintf_r+0xda>
 800a504:	06d9      	lsls	r1, r3, #27
 800a506:	bf44      	itt	mi
 800a508:	2220      	movmi	r2, #32
 800a50a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a50e:	071a      	lsls	r2, r3, #28
 800a510:	bf44      	itt	mi
 800a512:	222b      	movmi	r2, #43	; 0x2b
 800a514:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a518:	782a      	ldrb	r2, [r5, #0]
 800a51a:	2a2a      	cmp	r2, #42	; 0x2a
 800a51c:	d015      	beq.n	800a54a <_svfiprintf_r+0xea>
 800a51e:	462f      	mov	r7, r5
 800a520:	2000      	movs	r0, #0
 800a522:	250a      	movs	r5, #10
 800a524:	9a07      	ldr	r2, [sp, #28]
 800a526:	4639      	mov	r1, r7
 800a528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a52c:	3b30      	subs	r3, #48	; 0x30
 800a52e:	2b09      	cmp	r3, #9
 800a530:	d94d      	bls.n	800a5ce <_svfiprintf_r+0x16e>
 800a532:	b1b8      	cbz	r0, 800a564 <_svfiprintf_r+0x104>
 800a534:	e00f      	b.n	800a556 <_svfiprintf_r+0xf6>
 800a536:	462f      	mov	r7, r5
 800a538:	e7b8      	b.n	800a4ac <_svfiprintf_r+0x4c>
 800a53a:	4a40      	ldr	r2, [pc, #256]	; (800a63c <_svfiprintf_r+0x1dc>)
 800a53c:	463d      	mov	r5, r7
 800a53e:	1a80      	subs	r0, r0, r2
 800a540:	fa0b f000 	lsl.w	r0, fp, r0
 800a544:	4318      	orrs	r0, r3
 800a546:	9004      	str	r0, [sp, #16]
 800a548:	e7d3      	b.n	800a4f2 <_svfiprintf_r+0x92>
 800a54a:	9a03      	ldr	r2, [sp, #12]
 800a54c:	1d11      	adds	r1, r2, #4
 800a54e:	6812      	ldr	r2, [r2, #0]
 800a550:	9103      	str	r1, [sp, #12]
 800a552:	2a00      	cmp	r2, #0
 800a554:	db01      	blt.n	800a55a <_svfiprintf_r+0xfa>
 800a556:	9207      	str	r2, [sp, #28]
 800a558:	e004      	b.n	800a564 <_svfiprintf_r+0x104>
 800a55a:	4252      	negs	r2, r2
 800a55c:	f043 0302 	orr.w	r3, r3, #2
 800a560:	9207      	str	r2, [sp, #28]
 800a562:	9304      	str	r3, [sp, #16]
 800a564:	783b      	ldrb	r3, [r7, #0]
 800a566:	2b2e      	cmp	r3, #46	; 0x2e
 800a568:	d10c      	bne.n	800a584 <_svfiprintf_r+0x124>
 800a56a:	787b      	ldrb	r3, [r7, #1]
 800a56c:	2b2a      	cmp	r3, #42	; 0x2a
 800a56e:	d133      	bne.n	800a5d8 <_svfiprintf_r+0x178>
 800a570:	9b03      	ldr	r3, [sp, #12]
 800a572:	3702      	adds	r7, #2
 800a574:	1d1a      	adds	r2, r3, #4
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	9203      	str	r2, [sp, #12]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	bfb8      	it	lt
 800a57e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a582:	9305      	str	r3, [sp, #20]
 800a584:	4d2e      	ldr	r5, [pc, #184]	; (800a640 <_svfiprintf_r+0x1e0>)
 800a586:	2203      	movs	r2, #3
 800a588:	7839      	ldrb	r1, [r7, #0]
 800a58a:	4628      	mov	r0, r5
 800a58c:	f000 f9e8 	bl	800a960 <memchr>
 800a590:	b138      	cbz	r0, 800a5a2 <_svfiprintf_r+0x142>
 800a592:	2340      	movs	r3, #64	; 0x40
 800a594:	1b40      	subs	r0, r0, r5
 800a596:	fa03 f000 	lsl.w	r0, r3, r0
 800a59a:	9b04      	ldr	r3, [sp, #16]
 800a59c:	3701      	adds	r7, #1
 800a59e:	4303      	orrs	r3, r0
 800a5a0:	9304      	str	r3, [sp, #16]
 800a5a2:	7839      	ldrb	r1, [r7, #0]
 800a5a4:	2206      	movs	r2, #6
 800a5a6:	4827      	ldr	r0, [pc, #156]	; (800a644 <_svfiprintf_r+0x1e4>)
 800a5a8:	1c7e      	adds	r6, r7, #1
 800a5aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5ae:	f000 f9d7 	bl	800a960 <memchr>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d038      	beq.n	800a628 <_svfiprintf_r+0x1c8>
 800a5b6:	4b24      	ldr	r3, [pc, #144]	; (800a648 <_svfiprintf_r+0x1e8>)
 800a5b8:	bb13      	cbnz	r3, 800a600 <_svfiprintf_r+0x1a0>
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	3307      	adds	r3, #7
 800a5be:	f023 0307 	bic.w	r3, r3, #7
 800a5c2:	3308      	adds	r3, #8
 800a5c4:	9303      	str	r3, [sp, #12]
 800a5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c8:	444b      	add	r3, r9
 800a5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a5cc:	e76d      	b.n	800a4aa <_svfiprintf_r+0x4a>
 800a5ce:	fb05 3202 	mla	r2, r5, r2, r3
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	460f      	mov	r7, r1
 800a5d6:	e7a6      	b.n	800a526 <_svfiprintf_r+0xc6>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	250a      	movs	r5, #10
 800a5dc:	4619      	mov	r1, r3
 800a5de:	3701      	adds	r7, #1
 800a5e0:	9305      	str	r3, [sp, #20]
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5e8:	3a30      	subs	r2, #48	; 0x30
 800a5ea:	2a09      	cmp	r2, #9
 800a5ec:	d903      	bls.n	800a5f6 <_svfiprintf_r+0x196>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0c8      	beq.n	800a584 <_svfiprintf_r+0x124>
 800a5f2:	9105      	str	r1, [sp, #20]
 800a5f4:	e7c6      	b.n	800a584 <_svfiprintf_r+0x124>
 800a5f6:	fb05 2101 	mla	r1, r5, r1, r2
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	4607      	mov	r7, r0
 800a5fe:	e7f0      	b.n	800a5e2 <_svfiprintf_r+0x182>
 800a600:	ab03      	add	r3, sp, #12
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	4622      	mov	r2, r4
 800a606:	4b11      	ldr	r3, [pc, #68]	; (800a64c <_svfiprintf_r+0x1ec>)
 800a608:	a904      	add	r1, sp, #16
 800a60a:	4640      	mov	r0, r8
 800a60c:	f3af 8000 	nop.w
 800a610:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a614:	4681      	mov	r9, r0
 800a616:	d1d6      	bne.n	800a5c6 <_svfiprintf_r+0x166>
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	065b      	lsls	r3, r3, #25
 800a61c:	f53f af35 	bmi.w	800a48a <_svfiprintf_r+0x2a>
 800a620:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a622:	b01d      	add	sp, #116	; 0x74
 800a624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a628:	ab03      	add	r3, sp, #12
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	4622      	mov	r2, r4
 800a62e:	4b07      	ldr	r3, [pc, #28]	; (800a64c <_svfiprintf_r+0x1ec>)
 800a630:	a904      	add	r1, sp, #16
 800a632:	4640      	mov	r0, r8
 800a634:	f000 f882 	bl	800a73c <_printf_i>
 800a638:	e7ea      	b.n	800a610 <_svfiprintf_r+0x1b0>
 800a63a:	bf00      	nop
 800a63c:	0800c5f8 	.word	0x0800c5f8
 800a640:	0800c5fe 	.word	0x0800c5fe
 800a644:	0800c602 	.word	0x0800c602
 800a648:	00000000 	.word	0x00000000
 800a64c:	0800a3ad 	.word	0x0800a3ad

0800a650 <_printf_common>:
 800a650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a654:	4691      	mov	r9, r2
 800a656:	461f      	mov	r7, r3
 800a658:	688a      	ldr	r2, [r1, #8]
 800a65a:	690b      	ldr	r3, [r1, #16]
 800a65c:	4606      	mov	r6, r0
 800a65e:	4293      	cmp	r3, r2
 800a660:	bfb8      	it	lt
 800a662:	4613      	movlt	r3, r2
 800a664:	f8c9 3000 	str.w	r3, [r9]
 800a668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a66c:	460c      	mov	r4, r1
 800a66e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a672:	b112      	cbz	r2, 800a67a <_printf_common+0x2a>
 800a674:	3301      	adds	r3, #1
 800a676:	f8c9 3000 	str.w	r3, [r9]
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	0699      	lsls	r1, r3, #26
 800a67e:	bf42      	ittt	mi
 800a680:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a684:	3302      	addmi	r3, #2
 800a686:	f8c9 3000 	strmi.w	r3, [r9]
 800a68a:	6825      	ldr	r5, [r4, #0]
 800a68c:	f015 0506 	ands.w	r5, r5, #6
 800a690:	d107      	bne.n	800a6a2 <_printf_common+0x52>
 800a692:	f104 0a19 	add.w	sl, r4, #25
 800a696:	68e3      	ldr	r3, [r4, #12]
 800a698:	f8d9 2000 	ldr.w	r2, [r9]
 800a69c:	1a9b      	subs	r3, r3, r2
 800a69e:	42ab      	cmp	r3, r5
 800a6a0:	dc29      	bgt.n	800a6f6 <_printf_common+0xa6>
 800a6a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	3300      	adds	r3, #0
 800a6aa:	bf18      	it	ne
 800a6ac:	2301      	movne	r3, #1
 800a6ae:	0692      	lsls	r2, r2, #26
 800a6b0:	d42e      	bmi.n	800a710 <_printf_common+0xc0>
 800a6b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	47c0      	blx	r8
 800a6bc:	3001      	adds	r0, #1
 800a6be:	d021      	beq.n	800a704 <_printf_common+0xb4>
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	68e5      	ldr	r5, [r4, #12]
 800a6c4:	f003 0306 	and.w	r3, r3, #6
 800a6c8:	2b04      	cmp	r3, #4
 800a6ca:	bf18      	it	ne
 800a6cc:	2500      	movne	r5, #0
 800a6ce:	f8d9 2000 	ldr.w	r2, [r9]
 800a6d2:	f04f 0900 	mov.w	r9, #0
 800a6d6:	bf08      	it	eq
 800a6d8:	1aad      	subeq	r5, r5, r2
 800a6da:	68a3      	ldr	r3, [r4, #8]
 800a6dc:	6922      	ldr	r2, [r4, #16]
 800a6de:	bf08      	it	eq
 800a6e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	bfc4      	itt	gt
 800a6e8:	1a9b      	subgt	r3, r3, r2
 800a6ea:	18ed      	addgt	r5, r5, r3
 800a6ec:	341a      	adds	r4, #26
 800a6ee:	454d      	cmp	r5, r9
 800a6f0:	d11a      	bne.n	800a728 <_printf_common+0xd8>
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	e008      	b.n	800a708 <_printf_common+0xb8>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	4652      	mov	r2, sl
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	47c0      	blx	r8
 800a700:	3001      	adds	r0, #1
 800a702:	d103      	bne.n	800a70c <_printf_common+0xbc>
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70c:	3501      	adds	r5, #1
 800a70e:	e7c2      	b.n	800a696 <_printf_common+0x46>
 800a710:	2030      	movs	r0, #48	; 0x30
 800a712:	18e1      	adds	r1, r4, r3
 800a714:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a718:	1c5a      	adds	r2, r3, #1
 800a71a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a71e:	4422      	add	r2, r4
 800a720:	3302      	adds	r3, #2
 800a722:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a726:	e7c4      	b.n	800a6b2 <_printf_common+0x62>
 800a728:	2301      	movs	r3, #1
 800a72a:	4622      	mov	r2, r4
 800a72c:	4639      	mov	r1, r7
 800a72e:	4630      	mov	r0, r6
 800a730:	47c0      	blx	r8
 800a732:	3001      	adds	r0, #1
 800a734:	d0e6      	beq.n	800a704 <_printf_common+0xb4>
 800a736:	f109 0901 	add.w	r9, r9, #1
 800a73a:	e7d8      	b.n	800a6ee <_printf_common+0x9e>

0800a73c <_printf_i>:
 800a73c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a740:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a744:	460c      	mov	r4, r1
 800a746:	7e09      	ldrb	r1, [r1, #24]
 800a748:	b085      	sub	sp, #20
 800a74a:	296e      	cmp	r1, #110	; 0x6e
 800a74c:	4617      	mov	r7, r2
 800a74e:	4606      	mov	r6, r0
 800a750:	4698      	mov	r8, r3
 800a752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a754:	f000 80b3 	beq.w	800a8be <_printf_i+0x182>
 800a758:	d822      	bhi.n	800a7a0 <_printf_i+0x64>
 800a75a:	2963      	cmp	r1, #99	; 0x63
 800a75c:	d036      	beq.n	800a7cc <_printf_i+0x90>
 800a75e:	d80a      	bhi.n	800a776 <_printf_i+0x3a>
 800a760:	2900      	cmp	r1, #0
 800a762:	f000 80b9 	beq.w	800a8d8 <_printf_i+0x19c>
 800a766:	2958      	cmp	r1, #88	; 0x58
 800a768:	f000 8083 	beq.w	800a872 <_printf_i+0x136>
 800a76c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a770:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a774:	e032      	b.n	800a7dc <_printf_i+0xa0>
 800a776:	2964      	cmp	r1, #100	; 0x64
 800a778:	d001      	beq.n	800a77e <_printf_i+0x42>
 800a77a:	2969      	cmp	r1, #105	; 0x69
 800a77c:	d1f6      	bne.n	800a76c <_printf_i+0x30>
 800a77e:	6820      	ldr	r0, [r4, #0]
 800a780:	6813      	ldr	r3, [r2, #0]
 800a782:	0605      	lsls	r5, r0, #24
 800a784:	f103 0104 	add.w	r1, r3, #4
 800a788:	d52a      	bpl.n	800a7e0 <_printf_i+0xa4>
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6011      	str	r1, [r2, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	da03      	bge.n	800a79a <_printf_i+0x5e>
 800a792:	222d      	movs	r2, #45	; 0x2d
 800a794:	425b      	negs	r3, r3
 800a796:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a79a:	486f      	ldr	r0, [pc, #444]	; (800a958 <_printf_i+0x21c>)
 800a79c:	220a      	movs	r2, #10
 800a79e:	e039      	b.n	800a814 <_printf_i+0xd8>
 800a7a0:	2973      	cmp	r1, #115	; 0x73
 800a7a2:	f000 809d 	beq.w	800a8e0 <_printf_i+0x1a4>
 800a7a6:	d808      	bhi.n	800a7ba <_printf_i+0x7e>
 800a7a8:	296f      	cmp	r1, #111	; 0x6f
 800a7aa:	d020      	beq.n	800a7ee <_printf_i+0xb2>
 800a7ac:	2970      	cmp	r1, #112	; 0x70
 800a7ae:	d1dd      	bne.n	800a76c <_printf_i+0x30>
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	f043 0320 	orr.w	r3, r3, #32
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	e003      	b.n	800a7c2 <_printf_i+0x86>
 800a7ba:	2975      	cmp	r1, #117	; 0x75
 800a7bc:	d017      	beq.n	800a7ee <_printf_i+0xb2>
 800a7be:	2978      	cmp	r1, #120	; 0x78
 800a7c0:	d1d4      	bne.n	800a76c <_printf_i+0x30>
 800a7c2:	2378      	movs	r3, #120	; 0x78
 800a7c4:	4865      	ldr	r0, [pc, #404]	; (800a95c <_printf_i+0x220>)
 800a7c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7ca:	e055      	b.n	800a878 <_printf_i+0x13c>
 800a7cc:	6813      	ldr	r3, [r2, #0]
 800a7ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7d2:	1d19      	adds	r1, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6011      	str	r1, [r2, #0]
 800a7d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e08c      	b.n	800a8fa <_printf_i+0x1be>
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7e6:	6011      	str	r1, [r2, #0]
 800a7e8:	bf18      	it	ne
 800a7ea:	b21b      	sxthne	r3, r3
 800a7ec:	e7cf      	b.n	800a78e <_printf_i+0x52>
 800a7ee:	6813      	ldr	r3, [r2, #0]
 800a7f0:	6825      	ldr	r5, [r4, #0]
 800a7f2:	1d18      	adds	r0, r3, #4
 800a7f4:	6010      	str	r0, [r2, #0]
 800a7f6:	0628      	lsls	r0, r5, #24
 800a7f8:	d501      	bpl.n	800a7fe <_printf_i+0xc2>
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	e002      	b.n	800a804 <_printf_i+0xc8>
 800a7fe:	0668      	lsls	r0, r5, #25
 800a800:	d5fb      	bpl.n	800a7fa <_printf_i+0xbe>
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	296f      	cmp	r1, #111	; 0x6f
 800a806:	bf14      	ite	ne
 800a808:	220a      	movne	r2, #10
 800a80a:	2208      	moveq	r2, #8
 800a80c:	4852      	ldr	r0, [pc, #328]	; (800a958 <_printf_i+0x21c>)
 800a80e:	2100      	movs	r1, #0
 800a810:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a814:	6865      	ldr	r5, [r4, #4]
 800a816:	2d00      	cmp	r5, #0
 800a818:	60a5      	str	r5, [r4, #8]
 800a81a:	f2c0 8095 	blt.w	800a948 <_printf_i+0x20c>
 800a81e:	6821      	ldr	r1, [r4, #0]
 800a820:	f021 0104 	bic.w	r1, r1, #4
 800a824:	6021      	str	r1, [r4, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d13d      	bne.n	800a8a6 <_printf_i+0x16a>
 800a82a:	2d00      	cmp	r5, #0
 800a82c:	f040 808e 	bne.w	800a94c <_printf_i+0x210>
 800a830:	4665      	mov	r5, ip
 800a832:	2a08      	cmp	r2, #8
 800a834:	d10b      	bne.n	800a84e <_printf_i+0x112>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	07db      	lsls	r3, r3, #31
 800a83a:	d508      	bpl.n	800a84e <_printf_i+0x112>
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	6862      	ldr	r2, [r4, #4]
 800a840:	429a      	cmp	r2, r3
 800a842:	bfde      	ittt	le
 800a844:	2330      	movle	r3, #48	; 0x30
 800a846:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a84a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a84e:	ebac 0305 	sub.w	r3, ip, r5
 800a852:	6123      	str	r3, [r4, #16]
 800a854:	f8cd 8000 	str.w	r8, [sp]
 800a858:	463b      	mov	r3, r7
 800a85a:	aa03      	add	r2, sp, #12
 800a85c:	4621      	mov	r1, r4
 800a85e:	4630      	mov	r0, r6
 800a860:	f7ff fef6 	bl	800a650 <_printf_common>
 800a864:	3001      	adds	r0, #1
 800a866:	d14d      	bne.n	800a904 <_printf_i+0x1c8>
 800a868:	f04f 30ff 	mov.w	r0, #4294967295
 800a86c:	b005      	add	sp, #20
 800a86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a872:	4839      	ldr	r0, [pc, #228]	; (800a958 <_printf_i+0x21c>)
 800a874:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a878:	6813      	ldr	r3, [r2, #0]
 800a87a:	6821      	ldr	r1, [r4, #0]
 800a87c:	1d1d      	adds	r5, r3, #4
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6015      	str	r5, [r2, #0]
 800a882:	060a      	lsls	r2, r1, #24
 800a884:	d50b      	bpl.n	800a89e <_printf_i+0x162>
 800a886:	07ca      	lsls	r2, r1, #31
 800a888:	bf44      	itt	mi
 800a88a:	f041 0120 	orrmi.w	r1, r1, #32
 800a88e:	6021      	strmi	r1, [r4, #0]
 800a890:	b91b      	cbnz	r3, 800a89a <_printf_i+0x15e>
 800a892:	6822      	ldr	r2, [r4, #0]
 800a894:	f022 0220 	bic.w	r2, r2, #32
 800a898:	6022      	str	r2, [r4, #0]
 800a89a:	2210      	movs	r2, #16
 800a89c:	e7b7      	b.n	800a80e <_printf_i+0xd2>
 800a89e:	064d      	lsls	r5, r1, #25
 800a8a0:	bf48      	it	mi
 800a8a2:	b29b      	uxthmi	r3, r3
 800a8a4:	e7ef      	b.n	800a886 <_printf_i+0x14a>
 800a8a6:	4665      	mov	r5, ip
 800a8a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8ac:	fb02 3311 	mls	r3, r2, r1, r3
 800a8b0:	5cc3      	ldrb	r3, [r0, r3]
 800a8b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	2900      	cmp	r1, #0
 800a8ba:	d1f5      	bne.n	800a8a8 <_printf_i+0x16c>
 800a8bc:	e7b9      	b.n	800a832 <_printf_i+0xf6>
 800a8be:	6813      	ldr	r3, [r2, #0]
 800a8c0:	6825      	ldr	r5, [r4, #0]
 800a8c2:	1d18      	adds	r0, r3, #4
 800a8c4:	6961      	ldr	r1, [r4, #20]
 800a8c6:	6010      	str	r0, [r2, #0]
 800a8c8:	0628      	lsls	r0, r5, #24
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	d501      	bpl.n	800a8d2 <_printf_i+0x196>
 800a8ce:	6019      	str	r1, [r3, #0]
 800a8d0:	e002      	b.n	800a8d8 <_printf_i+0x19c>
 800a8d2:	066a      	lsls	r2, r5, #25
 800a8d4:	d5fb      	bpl.n	800a8ce <_printf_i+0x192>
 800a8d6:	8019      	strh	r1, [r3, #0]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	4665      	mov	r5, ip
 800a8dc:	6123      	str	r3, [r4, #16]
 800a8de:	e7b9      	b.n	800a854 <_printf_i+0x118>
 800a8e0:	6813      	ldr	r3, [r2, #0]
 800a8e2:	1d19      	adds	r1, r3, #4
 800a8e4:	6011      	str	r1, [r2, #0]
 800a8e6:	681d      	ldr	r5, [r3, #0]
 800a8e8:	6862      	ldr	r2, [r4, #4]
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f000 f837 	bl	800a960 <memchr>
 800a8f2:	b108      	cbz	r0, 800a8f8 <_printf_i+0x1bc>
 800a8f4:	1b40      	subs	r0, r0, r5
 800a8f6:	6060      	str	r0, [r4, #4]
 800a8f8:	6863      	ldr	r3, [r4, #4]
 800a8fa:	6123      	str	r3, [r4, #16]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a902:	e7a7      	b.n	800a854 <_printf_i+0x118>
 800a904:	6923      	ldr	r3, [r4, #16]
 800a906:	462a      	mov	r2, r5
 800a908:	4639      	mov	r1, r7
 800a90a:	4630      	mov	r0, r6
 800a90c:	47c0      	blx	r8
 800a90e:	3001      	adds	r0, #1
 800a910:	d0aa      	beq.n	800a868 <_printf_i+0x12c>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	079b      	lsls	r3, r3, #30
 800a916:	d413      	bmi.n	800a940 <_printf_i+0x204>
 800a918:	68e0      	ldr	r0, [r4, #12]
 800a91a:	9b03      	ldr	r3, [sp, #12]
 800a91c:	4298      	cmp	r0, r3
 800a91e:	bfb8      	it	lt
 800a920:	4618      	movlt	r0, r3
 800a922:	e7a3      	b.n	800a86c <_printf_i+0x130>
 800a924:	2301      	movs	r3, #1
 800a926:	464a      	mov	r2, r9
 800a928:	4639      	mov	r1, r7
 800a92a:	4630      	mov	r0, r6
 800a92c:	47c0      	blx	r8
 800a92e:	3001      	adds	r0, #1
 800a930:	d09a      	beq.n	800a868 <_printf_i+0x12c>
 800a932:	3501      	adds	r5, #1
 800a934:	68e3      	ldr	r3, [r4, #12]
 800a936:	9a03      	ldr	r2, [sp, #12]
 800a938:	1a9b      	subs	r3, r3, r2
 800a93a:	42ab      	cmp	r3, r5
 800a93c:	dcf2      	bgt.n	800a924 <_printf_i+0x1e8>
 800a93e:	e7eb      	b.n	800a918 <_printf_i+0x1dc>
 800a940:	2500      	movs	r5, #0
 800a942:	f104 0919 	add.w	r9, r4, #25
 800a946:	e7f5      	b.n	800a934 <_printf_i+0x1f8>
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1ac      	bne.n	800a8a6 <_printf_i+0x16a>
 800a94c:	7803      	ldrb	r3, [r0, #0]
 800a94e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a952:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a956:	e76c      	b.n	800a832 <_printf_i+0xf6>
 800a958:	0800c609 	.word	0x0800c609
 800a95c:	0800c61a 	.word	0x0800c61a

0800a960 <memchr>:
 800a960:	b510      	push	{r4, lr}
 800a962:	b2c9      	uxtb	r1, r1
 800a964:	4402      	add	r2, r0
 800a966:	4290      	cmp	r0, r2
 800a968:	4603      	mov	r3, r0
 800a96a:	d101      	bne.n	800a970 <memchr+0x10>
 800a96c:	2300      	movs	r3, #0
 800a96e:	e003      	b.n	800a978 <memchr+0x18>
 800a970:	781c      	ldrb	r4, [r3, #0]
 800a972:	3001      	adds	r0, #1
 800a974:	428c      	cmp	r4, r1
 800a976:	d1f6      	bne.n	800a966 <memchr+0x6>
 800a978:	4618      	mov	r0, r3
 800a97a:	bd10      	pop	{r4, pc}

0800a97c <memcpy>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	1e43      	subs	r3, r0, #1
 800a980:	440a      	add	r2, r1
 800a982:	4291      	cmp	r1, r2
 800a984:	d100      	bne.n	800a988 <memcpy+0xc>
 800a986:	bd10      	pop	{r4, pc}
 800a988:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a98c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a990:	e7f7      	b.n	800a982 <memcpy+0x6>

0800a992 <memmove>:
 800a992:	4288      	cmp	r0, r1
 800a994:	b510      	push	{r4, lr}
 800a996:	eb01 0302 	add.w	r3, r1, r2
 800a99a:	d807      	bhi.n	800a9ac <memmove+0x1a>
 800a99c:	1e42      	subs	r2, r0, #1
 800a99e:	4299      	cmp	r1, r3
 800a9a0:	d00a      	beq.n	800a9b8 <memmove+0x26>
 800a9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a9aa:	e7f8      	b.n	800a99e <memmove+0xc>
 800a9ac:	4283      	cmp	r3, r0
 800a9ae:	d9f5      	bls.n	800a99c <memmove+0xa>
 800a9b0:	1881      	adds	r1, r0, r2
 800a9b2:	1ad2      	subs	r2, r2, r3
 800a9b4:	42d3      	cmn	r3, r2
 800a9b6:	d100      	bne.n	800a9ba <memmove+0x28>
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a9c2:	e7f7      	b.n	800a9b4 <memmove+0x22>

0800a9c4 <_free_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	2900      	cmp	r1, #0
 800a9ca:	d043      	beq.n	800aa54 <_free_r+0x90>
 800a9cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d0:	1f0c      	subs	r4, r1, #4
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	bfb8      	it	lt
 800a9d6:	18e4      	addlt	r4, r4, r3
 800a9d8:	f000 f8d0 	bl	800ab7c <__malloc_lock>
 800a9dc:	4a1e      	ldr	r2, [pc, #120]	; (800aa58 <_free_r+0x94>)
 800a9de:	6813      	ldr	r3, [r2, #0]
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	b933      	cbnz	r3, 800a9f2 <_free_r+0x2e>
 800a9e4:	6063      	str	r3, [r4, #4]
 800a9e6:	6014      	str	r4, [r2, #0]
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ee:	f000 b8c6 	b.w	800ab7e <__malloc_unlock>
 800a9f2:	42a3      	cmp	r3, r4
 800a9f4:	d90b      	bls.n	800aa0e <_free_r+0x4a>
 800a9f6:	6821      	ldr	r1, [r4, #0]
 800a9f8:	1862      	adds	r2, r4, r1
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	bf01      	itttt	eq
 800a9fe:	681a      	ldreq	r2, [r3, #0]
 800aa00:	685b      	ldreq	r3, [r3, #4]
 800aa02:	1852      	addeq	r2, r2, r1
 800aa04:	6022      	streq	r2, [r4, #0]
 800aa06:	6063      	str	r3, [r4, #4]
 800aa08:	6004      	str	r4, [r0, #0]
 800aa0a:	e7ed      	b.n	800a9e8 <_free_r+0x24>
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	b10a      	cbz	r2, 800aa16 <_free_r+0x52>
 800aa12:	42a2      	cmp	r2, r4
 800aa14:	d9fa      	bls.n	800aa0c <_free_r+0x48>
 800aa16:	6819      	ldr	r1, [r3, #0]
 800aa18:	1858      	adds	r0, r3, r1
 800aa1a:	42a0      	cmp	r0, r4
 800aa1c:	d10b      	bne.n	800aa36 <_free_r+0x72>
 800aa1e:	6820      	ldr	r0, [r4, #0]
 800aa20:	4401      	add	r1, r0
 800aa22:	1858      	adds	r0, r3, r1
 800aa24:	4282      	cmp	r2, r0
 800aa26:	6019      	str	r1, [r3, #0]
 800aa28:	d1de      	bne.n	800a9e8 <_free_r+0x24>
 800aa2a:	6810      	ldr	r0, [r2, #0]
 800aa2c:	6852      	ldr	r2, [r2, #4]
 800aa2e:	4401      	add	r1, r0
 800aa30:	6019      	str	r1, [r3, #0]
 800aa32:	605a      	str	r2, [r3, #4]
 800aa34:	e7d8      	b.n	800a9e8 <_free_r+0x24>
 800aa36:	d902      	bls.n	800aa3e <_free_r+0x7a>
 800aa38:	230c      	movs	r3, #12
 800aa3a:	602b      	str	r3, [r5, #0]
 800aa3c:	e7d4      	b.n	800a9e8 <_free_r+0x24>
 800aa3e:	6820      	ldr	r0, [r4, #0]
 800aa40:	1821      	adds	r1, r4, r0
 800aa42:	428a      	cmp	r2, r1
 800aa44:	bf01      	itttt	eq
 800aa46:	6811      	ldreq	r1, [r2, #0]
 800aa48:	6852      	ldreq	r2, [r2, #4]
 800aa4a:	1809      	addeq	r1, r1, r0
 800aa4c:	6021      	streq	r1, [r4, #0]
 800aa4e:	6062      	str	r2, [r4, #4]
 800aa50:	605c      	str	r4, [r3, #4]
 800aa52:	e7c9      	b.n	800a9e8 <_free_r+0x24>
 800aa54:	bd38      	pop	{r3, r4, r5, pc}
 800aa56:	bf00      	nop
 800aa58:	20000138 	.word	0x20000138

0800aa5c <_malloc_r>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	1ccd      	adds	r5, r1, #3
 800aa60:	f025 0503 	bic.w	r5, r5, #3
 800aa64:	3508      	adds	r5, #8
 800aa66:	2d0c      	cmp	r5, #12
 800aa68:	bf38      	it	cc
 800aa6a:	250c      	movcc	r5, #12
 800aa6c:	2d00      	cmp	r5, #0
 800aa6e:	4606      	mov	r6, r0
 800aa70:	db01      	blt.n	800aa76 <_malloc_r+0x1a>
 800aa72:	42a9      	cmp	r1, r5
 800aa74:	d903      	bls.n	800aa7e <_malloc_r+0x22>
 800aa76:	230c      	movs	r3, #12
 800aa78:	6033      	str	r3, [r6, #0]
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	bd70      	pop	{r4, r5, r6, pc}
 800aa7e:	f000 f87d 	bl	800ab7c <__malloc_lock>
 800aa82:	4a21      	ldr	r2, [pc, #132]	; (800ab08 <_malloc_r+0xac>)
 800aa84:	6814      	ldr	r4, [r2, #0]
 800aa86:	4621      	mov	r1, r4
 800aa88:	b991      	cbnz	r1, 800aab0 <_malloc_r+0x54>
 800aa8a:	4c20      	ldr	r4, [pc, #128]	; (800ab0c <_malloc_r+0xb0>)
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	b91b      	cbnz	r3, 800aa98 <_malloc_r+0x3c>
 800aa90:	4630      	mov	r0, r6
 800aa92:	f000 f863 	bl	800ab5c <_sbrk_r>
 800aa96:	6020      	str	r0, [r4, #0]
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f000 f85e 	bl	800ab5c <_sbrk_r>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	d124      	bne.n	800aaee <_malloc_r+0x92>
 800aaa4:	230c      	movs	r3, #12
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	6033      	str	r3, [r6, #0]
 800aaaa:	f000 f868 	bl	800ab7e <__malloc_unlock>
 800aaae:	e7e4      	b.n	800aa7a <_malloc_r+0x1e>
 800aab0:	680b      	ldr	r3, [r1, #0]
 800aab2:	1b5b      	subs	r3, r3, r5
 800aab4:	d418      	bmi.n	800aae8 <_malloc_r+0x8c>
 800aab6:	2b0b      	cmp	r3, #11
 800aab8:	d90f      	bls.n	800aada <_malloc_r+0x7e>
 800aaba:	600b      	str	r3, [r1, #0]
 800aabc:	18cc      	adds	r4, r1, r3
 800aabe:	50cd      	str	r5, [r1, r3]
 800aac0:	4630      	mov	r0, r6
 800aac2:	f000 f85c 	bl	800ab7e <__malloc_unlock>
 800aac6:	f104 000b 	add.w	r0, r4, #11
 800aaca:	1d23      	adds	r3, r4, #4
 800aacc:	f020 0007 	bic.w	r0, r0, #7
 800aad0:	1ac3      	subs	r3, r0, r3
 800aad2:	d0d3      	beq.n	800aa7c <_malloc_r+0x20>
 800aad4:	425a      	negs	r2, r3
 800aad6:	50e2      	str	r2, [r4, r3]
 800aad8:	e7d0      	b.n	800aa7c <_malloc_r+0x20>
 800aada:	684b      	ldr	r3, [r1, #4]
 800aadc:	428c      	cmp	r4, r1
 800aade:	bf16      	itet	ne
 800aae0:	6063      	strne	r3, [r4, #4]
 800aae2:	6013      	streq	r3, [r2, #0]
 800aae4:	460c      	movne	r4, r1
 800aae6:	e7eb      	b.n	800aac0 <_malloc_r+0x64>
 800aae8:	460c      	mov	r4, r1
 800aaea:	6849      	ldr	r1, [r1, #4]
 800aaec:	e7cc      	b.n	800aa88 <_malloc_r+0x2c>
 800aaee:	1cc4      	adds	r4, r0, #3
 800aaf0:	f024 0403 	bic.w	r4, r4, #3
 800aaf4:	42a0      	cmp	r0, r4
 800aaf6:	d005      	beq.n	800ab04 <_malloc_r+0xa8>
 800aaf8:	1a21      	subs	r1, r4, r0
 800aafa:	4630      	mov	r0, r6
 800aafc:	f000 f82e 	bl	800ab5c <_sbrk_r>
 800ab00:	3001      	adds	r0, #1
 800ab02:	d0cf      	beq.n	800aaa4 <_malloc_r+0x48>
 800ab04:	6025      	str	r5, [r4, #0]
 800ab06:	e7db      	b.n	800aac0 <_malloc_r+0x64>
 800ab08:	20000138 	.word	0x20000138
 800ab0c:	2000013c 	.word	0x2000013c

0800ab10 <_realloc_r>:
 800ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab12:	4607      	mov	r7, r0
 800ab14:	4614      	mov	r4, r2
 800ab16:	460e      	mov	r6, r1
 800ab18:	b921      	cbnz	r1, 800ab24 <_realloc_r+0x14>
 800ab1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab1e:	4611      	mov	r1, r2
 800ab20:	f7ff bf9c 	b.w	800aa5c <_malloc_r>
 800ab24:	b922      	cbnz	r2, 800ab30 <_realloc_r+0x20>
 800ab26:	f7ff ff4d 	bl	800a9c4 <_free_r>
 800ab2a:	4625      	mov	r5, r4
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab30:	f000 f826 	bl	800ab80 <_malloc_usable_size_r>
 800ab34:	42a0      	cmp	r0, r4
 800ab36:	d20f      	bcs.n	800ab58 <_realloc_r+0x48>
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	f7ff ff8e 	bl	800aa5c <_malloc_r>
 800ab40:	4605      	mov	r5, r0
 800ab42:	2800      	cmp	r0, #0
 800ab44:	d0f2      	beq.n	800ab2c <_realloc_r+0x1c>
 800ab46:	4631      	mov	r1, r6
 800ab48:	4622      	mov	r2, r4
 800ab4a:	f7ff ff17 	bl	800a97c <memcpy>
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4638      	mov	r0, r7
 800ab52:	f7ff ff37 	bl	800a9c4 <_free_r>
 800ab56:	e7e9      	b.n	800ab2c <_realloc_r+0x1c>
 800ab58:	4635      	mov	r5, r6
 800ab5a:	e7e7      	b.n	800ab2c <_realloc_r+0x1c>

0800ab5c <_sbrk_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	2300      	movs	r3, #0
 800ab60:	4c05      	ldr	r4, [pc, #20]	; (800ab78 <_sbrk_r+0x1c>)
 800ab62:	4605      	mov	r5, r0
 800ab64:	4608      	mov	r0, r1
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	f7ff fb76 	bl	800a258 <_sbrk>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_sbrk_r+0x1a>
 800ab70:	6823      	ldr	r3, [r4, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_sbrk_r+0x1a>
 800ab74:	602b      	str	r3, [r5, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	20000514 	.word	0x20000514

0800ab7c <__malloc_lock>:
 800ab7c:	4770      	bx	lr

0800ab7e <__malloc_unlock>:
 800ab7e:	4770      	bx	lr

0800ab80 <_malloc_usable_size_r>:
 800ab80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab84:	1f18      	subs	r0, r3, #4
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	bfbc      	itt	lt
 800ab8a:	580b      	ldrlt	r3, [r1, r0]
 800ab8c:	18c0      	addlt	r0, r0, r3
 800ab8e:	4770      	bx	lr

0800ab90 <pow>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	b08f      	sub	sp, #60	; 0x3c
 800ab96:	461d      	mov	r5, r3
 800ab98:	4680      	mov	r8, r0
 800ab9a:	4689      	mov	r9, r1
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	f000 f9ef 	bl	800af80 <__ieee754_pow>
 800aba2:	4fa1      	ldr	r7, [pc, #644]	; (800ae28 <pow+0x298>)
 800aba4:	e9cd 0100 	strd	r0, r1, [sp]
 800aba8:	f997 3000 	ldrsb.w	r3, [r7]
 800abac:	463e      	mov	r6, r7
 800abae:	9302      	str	r3, [sp, #8]
 800abb0:	3301      	adds	r3, #1
 800abb2:	d05f      	beq.n	800ac74 <pow+0xe4>
 800abb4:	4622      	mov	r2, r4
 800abb6:	462b      	mov	r3, r5
 800abb8:	4620      	mov	r0, r4
 800abba:	4629      	mov	r1, r5
 800abbc:	f7f5 ff1e 	bl	80009fc <__aeabi_dcmpun>
 800abc0:	4682      	mov	sl, r0
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d156      	bne.n	800ac74 <pow+0xe4>
 800abc6:	4642      	mov	r2, r8
 800abc8:	464b      	mov	r3, r9
 800abca:	4640      	mov	r0, r8
 800abcc:	4649      	mov	r1, r9
 800abce:	f7f5 ff15 	bl	80009fc <__aeabi_dcmpun>
 800abd2:	9003      	str	r0, [sp, #12]
 800abd4:	b1e8      	cbz	r0, 800ac12 <pow+0x82>
 800abd6:	2200      	movs	r2, #0
 800abd8:	2300      	movs	r3, #0
 800abda:	4620      	mov	r0, r4
 800abdc:	4629      	mov	r1, r5
 800abde:	f7f5 fedb 	bl	8000998 <__aeabi_dcmpeq>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d046      	beq.n	800ac74 <pow+0xe4>
 800abe6:	2301      	movs	r3, #1
 800abe8:	2200      	movs	r2, #0
 800abea:	9304      	str	r3, [sp, #16]
 800abec:	4b8f      	ldr	r3, [pc, #572]	; (800ae2c <pow+0x29c>)
 800abee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800abf2:	9305      	str	r3, [sp, #20]
 800abf4:	4b8e      	ldr	r3, [pc, #568]	; (800ae30 <pow+0x2a0>)
 800abf6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800abfa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800abfe:	9b02      	ldr	r3, [sp, #8]
 800ac00:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d031      	beq.n	800ac6c <pow+0xdc>
 800ac08:	a804      	add	r0, sp, #16
 800ac0a:	f001 f99e 	bl	800bf4a <matherr>
 800ac0e:	bb38      	cbnz	r0, 800ac60 <pow+0xd0>
 800ac10:	e058      	b.n	800acc4 <pow+0x134>
 800ac12:	f04f 0a00 	mov.w	sl, #0
 800ac16:	f04f 0b00 	mov.w	fp, #0
 800ac1a:	4652      	mov	r2, sl
 800ac1c:	465b      	mov	r3, fp
 800ac1e:	4640      	mov	r0, r8
 800ac20:	4649      	mov	r1, r9
 800ac22:	f7f5 feb9 	bl	8000998 <__aeabi_dcmpeq>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d051      	beq.n	800acce <pow+0x13e>
 800ac2a:	4652      	mov	r2, sl
 800ac2c:	465b      	mov	r3, fp
 800ac2e:	4620      	mov	r0, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7f5 feb1 	bl	8000998 <__aeabi_dcmpeq>
 800ac36:	4606      	mov	r6, r0
 800ac38:	b308      	cbz	r0, 800ac7e <pow+0xee>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	9304      	str	r3, [sp, #16]
 800ac3e:	4b7b      	ldr	r3, [pc, #492]	; (800ae2c <pow+0x29c>)
 800ac40:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ac44:	9305      	str	r3, [sp, #20]
 800ac46:	9b03      	ldr	r3, [sp, #12]
 800ac48:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ac4c:	930c      	str	r3, [sp, #48]	; 0x30
 800ac4e:	9b02      	ldr	r3, [sp, #8]
 800ac50:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d0d7      	beq.n	800ac08 <pow+0x78>
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4b75      	ldr	r3, [pc, #468]	; (800ae30 <pow+0x2a0>)
 800ac5c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ac60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac62:	b11b      	cbz	r3, 800ac6c <pow+0xdc>
 800ac64:	f7ff fb50 	bl	800a308 <__errno>
 800ac68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac6a:	6003      	str	r3, [r0, #0]
 800ac6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800ac70:	e9cd 3400 	strd	r3, r4, [sp]
 800ac74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac78:	b00f      	add	sp, #60	; 0x3c
 800ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7e:	4620      	mov	r0, r4
 800ac80:	4629      	mov	r1, r5
 800ac82:	f001 f95c 	bl	800bf3e <finite>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d0f4      	beq.n	800ac74 <pow+0xe4>
 800ac8a:	4652      	mov	r2, sl
 800ac8c:	465b      	mov	r3, fp
 800ac8e:	4620      	mov	r0, r4
 800ac90:	4629      	mov	r1, r5
 800ac92:	f7f5 fe8b 	bl	80009ac <__aeabi_dcmplt>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d0ec      	beq.n	800ac74 <pow+0xe4>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	9304      	str	r3, [sp, #16]
 800ac9e:	4b63      	ldr	r3, [pc, #396]	; (800ae2c <pow+0x29c>)
 800aca0:	960c      	str	r6, [sp, #48]	; 0x30
 800aca2:	9305      	str	r3, [sp, #20]
 800aca4:	f997 3000 	ldrsb.w	r3, [r7]
 800aca8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800acac:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800acb0:	b913      	cbnz	r3, 800acb8 <pow+0x128>
 800acb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800acb6:	e7a7      	b.n	800ac08 <pow+0x78>
 800acb8:	2000      	movs	r0, #0
 800acba:	495e      	ldr	r1, [pc, #376]	; (800ae34 <pow+0x2a4>)
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800acc2:	d1a1      	bne.n	800ac08 <pow+0x78>
 800acc4:	f7ff fb20 	bl	800a308 <__errno>
 800acc8:	2321      	movs	r3, #33	; 0x21
 800acca:	6003      	str	r3, [r0, #0]
 800accc:	e7c8      	b.n	800ac60 <pow+0xd0>
 800acce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acd2:	f001 f934 	bl	800bf3e <finite>
 800acd6:	9002      	str	r0, [sp, #8]
 800acd8:	2800      	cmp	r0, #0
 800acda:	d177      	bne.n	800adcc <pow+0x23c>
 800acdc:	4640      	mov	r0, r8
 800acde:	4649      	mov	r1, r9
 800ace0:	f001 f92d 	bl	800bf3e <finite>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d071      	beq.n	800adcc <pow+0x23c>
 800ace8:	4620      	mov	r0, r4
 800acea:	4629      	mov	r1, r5
 800acec:	f001 f927 	bl	800bf3e <finite>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d06b      	beq.n	800adcc <pow+0x23c>
 800acf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acf8:	4619      	mov	r1, r3
 800acfa:	4610      	mov	r0, r2
 800acfc:	f7f5 fe7e 	bl	80009fc <__aeabi_dcmpun>
 800ad00:	f997 7000 	ldrsb.w	r7, [r7]
 800ad04:	4b49      	ldr	r3, [pc, #292]	; (800ae2c <pow+0x29c>)
 800ad06:	b1a0      	cbz	r0, 800ad32 <pow+0x1a2>
 800ad08:	2201      	movs	r2, #1
 800ad0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad0e:	9b02      	ldr	r3, [sp, #8]
 800ad10:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ad14:	930c      	str	r3, [sp, #48]	; 0x30
 800ad16:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ad1a:	2f00      	cmp	r7, #0
 800ad1c:	d0c9      	beq.n	800acb2 <pow+0x122>
 800ad1e:	4652      	mov	r2, sl
 800ad20:	465b      	mov	r3, fp
 800ad22:	4650      	mov	r0, sl
 800ad24:	4659      	mov	r1, fp
 800ad26:	f7f5 fcf9 	bl	800071c <__aeabi_ddiv>
 800ad2a:	2f02      	cmp	r7, #2
 800ad2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ad30:	e7c7      	b.n	800acc2 <pow+0x132>
 800ad32:	2203      	movs	r2, #3
 800ad34:	900c      	str	r0, [sp, #48]	; 0x30
 800ad36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	2200      	movs	r2, #0
 800ad40:	4b3d      	ldr	r3, [pc, #244]	; (800ae38 <pow+0x2a8>)
 800ad42:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ad46:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ad4a:	f7f5 fbbd 	bl	80004c8 <__aeabi_dmul>
 800ad4e:	4604      	mov	r4, r0
 800ad50:	460d      	mov	r5, r1
 800ad52:	bb17      	cbnz	r7, 800ad9a <pow+0x20a>
 800ad54:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ad58:	4b38      	ldr	r3, [pc, #224]	; (800ae3c <pow+0x2ac>)
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ad60:	4649      	mov	r1, r9
 800ad62:	4652      	mov	r2, sl
 800ad64:	465b      	mov	r3, fp
 800ad66:	f7f5 fe21 	bl	80009ac <__aeabi_dcmplt>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d054      	beq.n	800ae18 <pow+0x288>
 800ad6e:	4620      	mov	r0, r4
 800ad70:	4629      	mov	r1, r5
 800ad72:	f001 f8f3 	bl	800bf5c <rint>
 800ad76:	4622      	mov	r2, r4
 800ad78:	462b      	mov	r3, r5
 800ad7a:	f7f5 fe0d 	bl	8000998 <__aeabi_dcmpeq>
 800ad7e:	b920      	cbnz	r0, 800ad8a <pow+0x1fa>
 800ad80:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ad84:	4b2e      	ldr	r3, [pc, #184]	; (800ae40 <pow+0x2b0>)
 800ad86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ad8a:	f996 3000 	ldrsb.w	r3, [r6]
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d142      	bne.n	800ae18 <pow+0x288>
 800ad92:	f7ff fab9 	bl	800a308 <__errno>
 800ad96:	2322      	movs	r3, #34	; 0x22
 800ad98:	e797      	b.n	800acca <pow+0x13a>
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	4b29      	ldr	r3, [pc, #164]	; (800ae44 <pow+0x2b4>)
 800ad9e:	4640      	mov	r0, r8
 800ada0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ada4:	4649      	mov	r1, r9
 800ada6:	4652      	mov	r2, sl
 800ada8:	465b      	mov	r3, fp
 800adaa:	f7f5 fdff 	bl	80009ac <__aeabi_dcmplt>
 800adae:	2800      	cmp	r0, #0
 800adb0:	d0eb      	beq.n	800ad8a <pow+0x1fa>
 800adb2:	4620      	mov	r0, r4
 800adb4:	4629      	mov	r1, r5
 800adb6:	f001 f8d1 	bl	800bf5c <rint>
 800adba:	4622      	mov	r2, r4
 800adbc:	462b      	mov	r3, r5
 800adbe:	f7f5 fdeb 	bl	8000998 <__aeabi_dcmpeq>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d1e1      	bne.n	800ad8a <pow+0x1fa>
 800adc6:	2200      	movs	r2, #0
 800adc8:	4b1a      	ldr	r3, [pc, #104]	; (800ae34 <pow+0x2a4>)
 800adca:	e7dc      	b.n	800ad86 <pow+0x1f6>
 800adcc:	2200      	movs	r2, #0
 800adce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800add2:	2300      	movs	r3, #0
 800add4:	f7f5 fde0 	bl	8000998 <__aeabi_dcmpeq>
 800add8:	2800      	cmp	r0, #0
 800adda:	f43f af4b 	beq.w	800ac74 <pow+0xe4>
 800adde:	4640      	mov	r0, r8
 800ade0:	4649      	mov	r1, r9
 800ade2:	f001 f8ac 	bl	800bf3e <finite>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f43f af44 	beq.w	800ac74 <pow+0xe4>
 800adec:	4620      	mov	r0, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	f001 f8a5 	bl	800bf3e <finite>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f43f af3d 	beq.w	800ac74 <pow+0xe4>
 800adfa:	2304      	movs	r3, #4
 800adfc:	9304      	str	r3, [sp, #16]
 800adfe:	4b0b      	ldr	r3, [pc, #44]	; (800ae2c <pow+0x29c>)
 800ae00:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ae04:	9305      	str	r3, [sp, #20]
 800ae06:	2300      	movs	r3, #0
 800ae08:	2400      	movs	r4, #0
 800ae0a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ae12:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800ae16:	e7b8      	b.n	800ad8a <pow+0x1fa>
 800ae18:	a804      	add	r0, sp, #16
 800ae1a:	f001 f896 	bl	800bf4a <matherr>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	f47f af1e 	bne.w	800ac60 <pow+0xd0>
 800ae24:	e7b5      	b.n	800ad92 <pow+0x202>
 800ae26:	bf00      	nop
 800ae28:	2000008c 	.word	0x2000008c
 800ae2c:	0800c62b 	.word	0x0800c62b
 800ae30:	3ff00000 	.word	0x3ff00000
 800ae34:	fff00000 	.word	0xfff00000
 800ae38:	3fe00000 	.word	0x3fe00000
 800ae3c:	47efffff 	.word	0x47efffff
 800ae40:	c7efffff 	.word	0xc7efffff
 800ae44:	7ff00000 	.word	0x7ff00000

0800ae48 <asinf>:
 800ae48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae4a:	b08b      	sub	sp, #44	; 0x2c
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	f000 fe4d 	bl	800baec <__ieee754_asinf>
 800ae52:	4e21      	ldr	r6, [pc, #132]	; (800aed8 <asinf+0x90>)
 800ae54:	4605      	mov	r5, r0
 800ae56:	f996 3000 	ldrsb.w	r3, [r6]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	d038      	beq.n	800aed0 <asinf+0x88>
 800ae5e:	4621      	mov	r1, r4
 800ae60:	4620      	mov	r0, r4
 800ae62:	f7f6 f925 	bl	80010b0 <__aeabi_fcmpun>
 800ae66:	4607      	mov	r7, r0
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d131      	bne.n	800aed0 <asinf+0x88>
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f001 fa79 	bl	800c364 <fabsf>
 800ae72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ae76:	f7f6 f911 	bl	800109c <__aeabi_fcmpgt>
 800ae7a:	b348      	cbz	r0, 800aed0 <asinf+0x88>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	4b16      	ldr	r3, [pc, #88]	; (800aedc <asinf+0x94>)
 800ae82:	4620      	mov	r0, r4
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	9708      	str	r7, [sp, #32]
 800ae88:	f7f5 fac6 	bl	8000418 <__aeabi_f2d>
 800ae8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae94:	4812      	ldr	r0, [pc, #72]	; (800aee0 <asinf+0x98>)
 800ae96:	f001 f85b 	bl	800bf50 <nan>
 800ae9a:	f996 3000 	ldrsb.w	r3, [r6]
 800ae9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d104      	bne.n	800aeb0 <asinf+0x68>
 800aea6:	f7ff fa2f 	bl	800a308 <__errno>
 800aeaa:	2321      	movs	r3, #33	; 0x21
 800aeac:	6003      	str	r3, [r0, #0]
 800aeae:	e004      	b.n	800aeba <asinf+0x72>
 800aeb0:	4668      	mov	r0, sp
 800aeb2:	f001 f84a 	bl	800bf4a <matherr>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d0f5      	beq.n	800aea6 <asinf+0x5e>
 800aeba:	9b08      	ldr	r3, [sp, #32]
 800aebc:	b11b      	cbz	r3, 800aec6 <asinf+0x7e>
 800aebe:	f7ff fa23 	bl	800a308 <__errno>
 800aec2:	9b08      	ldr	r3, [sp, #32]
 800aec4:	6003      	str	r3, [r0, #0]
 800aec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeca:	f7f5 fdcd 	bl	8000a68 <__aeabi_d2f>
 800aece:	4605      	mov	r5, r0
 800aed0:	4628      	mov	r0, r5
 800aed2:	b00b      	add	sp, #44	; 0x2c
 800aed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed6:	bf00      	nop
 800aed8:	2000008c 	.word	0x2000008c
 800aedc:	0800c62f 	.word	0x0800c62f
 800aee0:	0800c5fd 	.word	0x0800c5fd

0800aee4 <atan2f>:
 800aee4:	f000 bf44 	b.w	800bd70 <__ieee754_atan2f>

0800aee8 <sqrtf>:
 800aee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeea:	b08b      	sub	sp, #44	; 0x2c
 800aeec:	4604      	mov	r4, r0
 800aeee:	f000 ffcf 	bl	800be90 <__ieee754_sqrtf>
 800aef2:	4b20      	ldr	r3, [pc, #128]	; (800af74 <sqrtf+0x8c>)
 800aef4:	4606      	mov	r6, r0
 800aef6:	f993 5000 	ldrsb.w	r5, [r3]
 800aefa:	1c6b      	adds	r3, r5, #1
 800aefc:	d02a      	beq.n	800af54 <sqrtf+0x6c>
 800aefe:	4621      	mov	r1, r4
 800af00:	4620      	mov	r0, r4
 800af02:	f7f6 f8d5 	bl	80010b0 <__aeabi_fcmpun>
 800af06:	4607      	mov	r7, r0
 800af08:	bb20      	cbnz	r0, 800af54 <sqrtf+0x6c>
 800af0a:	2100      	movs	r1, #0
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7f6 f8a7 	bl	8001060 <__aeabi_fcmplt>
 800af12:	b1f8      	cbz	r0, 800af54 <sqrtf+0x6c>
 800af14:	2301      	movs	r3, #1
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	4b17      	ldr	r3, [pc, #92]	; (800af78 <sqrtf+0x90>)
 800af1a:	4620      	mov	r0, r4
 800af1c:	9301      	str	r3, [sp, #4]
 800af1e:	9708      	str	r7, [sp, #32]
 800af20:	f7f5 fa7a 	bl	8000418 <__aeabi_f2d>
 800af24:	2200      	movs	r2, #0
 800af26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af2e:	2300      	movs	r3, #0
 800af30:	b99d      	cbnz	r5, 800af5a <sqrtf+0x72>
 800af32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af36:	4668      	mov	r0, sp
 800af38:	f001 f807 	bl	800bf4a <matherr>
 800af3c:	b1a8      	cbz	r0, 800af6a <sqrtf+0x82>
 800af3e:	9b08      	ldr	r3, [sp, #32]
 800af40:	b11b      	cbz	r3, 800af4a <sqrtf+0x62>
 800af42:	f7ff f9e1 	bl	800a308 <__errno>
 800af46:	9b08      	ldr	r3, [sp, #32]
 800af48:	6003      	str	r3, [r0, #0]
 800af4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af4e:	f7f5 fd8b 	bl	8000a68 <__aeabi_d2f>
 800af52:	4606      	mov	r6, r0
 800af54:	4630      	mov	r0, r6
 800af56:	b00b      	add	sp, #44	; 0x2c
 800af58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af5a:	4610      	mov	r0, r2
 800af5c:	4619      	mov	r1, r3
 800af5e:	f7f5 fbdd 	bl	800071c <__aeabi_ddiv>
 800af62:	2d02      	cmp	r5, #2
 800af64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af68:	d1e5      	bne.n	800af36 <sqrtf+0x4e>
 800af6a:	f7ff f9cd 	bl	800a308 <__errno>
 800af6e:	2321      	movs	r3, #33	; 0x21
 800af70:	6003      	str	r3, [r0, #0]
 800af72:	e7e4      	b.n	800af3e <sqrtf+0x56>
 800af74:	2000008c 	.word	0x2000008c
 800af78:	0800c635 	.word	0x0800c635
 800af7c:	00000000 	.word	0x00000000

0800af80 <__ieee754_pow>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	b091      	sub	sp, #68	; 0x44
 800af86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af8a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800af8e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800af92:	ea55 0302 	orrs.w	r3, r5, r2
 800af96:	4607      	mov	r7, r0
 800af98:	4688      	mov	r8, r1
 800af9a:	f000 84b7 	beq.w	800b90c <__ieee754_pow+0x98c>
 800af9e:	4b80      	ldr	r3, [pc, #512]	; (800b1a0 <__ieee754_pow+0x220>)
 800afa0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800afa4:	429c      	cmp	r4, r3
 800afa6:	4689      	mov	r9, r1
 800afa8:	4682      	mov	sl, r0
 800afaa:	dc09      	bgt.n	800afc0 <__ieee754_pow+0x40>
 800afac:	d103      	bne.n	800afb6 <__ieee754_pow+0x36>
 800afae:	b938      	cbnz	r0, 800afc0 <__ieee754_pow+0x40>
 800afb0:	42a5      	cmp	r5, r4
 800afb2:	dc0d      	bgt.n	800afd0 <__ieee754_pow+0x50>
 800afb4:	e001      	b.n	800afba <__ieee754_pow+0x3a>
 800afb6:	429d      	cmp	r5, r3
 800afb8:	dc02      	bgt.n	800afc0 <__ieee754_pow+0x40>
 800afba:	429d      	cmp	r5, r3
 800afbc:	d10e      	bne.n	800afdc <__ieee754_pow+0x5c>
 800afbe:	b16a      	cbz	r2, 800afdc <__ieee754_pow+0x5c>
 800afc0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800afc4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800afc8:	ea54 030a 	orrs.w	r3, r4, sl
 800afcc:	f000 849e 	beq.w	800b90c <__ieee754_pow+0x98c>
 800afd0:	4874      	ldr	r0, [pc, #464]	; (800b1a4 <__ieee754_pow+0x224>)
 800afd2:	b011      	add	sp, #68	; 0x44
 800afd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd8:	f000 bfba 	b.w	800bf50 <nan>
 800afdc:	f1b9 0f00 	cmp.w	r9, #0
 800afe0:	da53      	bge.n	800b08a <__ieee754_pow+0x10a>
 800afe2:	4b71      	ldr	r3, [pc, #452]	; (800b1a8 <__ieee754_pow+0x228>)
 800afe4:	429d      	cmp	r5, r3
 800afe6:	dc4e      	bgt.n	800b086 <__ieee754_pow+0x106>
 800afe8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800afec:	429d      	cmp	r5, r3
 800afee:	dd4c      	ble.n	800b08a <__ieee754_pow+0x10a>
 800aff0:	152b      	asrs	r3, r5, #20
 800aff2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aff6:	2b14      	cmp	r3, #20
 800aff8:	dd28      	ble.n	800b04c <__ieee754_pow+0xcc>
 800affa:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800affe:	fa22 f103 	lsr.w	r1, r2, r3
 800b002:	fa01 f303 	lsl.w	r3, r1, r3
 800b006:	4293      	cmp	r3, r2
 800b008:	d13f      	bne.n	800b08a <__ieee754_pow+0x10a>
 800b00a:	f001 0101 	and.w	r1, r1, #1
 800b00e:	f1c1 0302 	rsb	r3, r1, #2
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	2a00      	cmp	r2, #0
 800b016:	d15c      	bne.n	800b0d2 <__ieee754_pow+0x152>
 800b018:	4b61      	ldr	r3, [pc, #388]	; (800b1a0 <__ieee754_pow+0x220>)
 800b01a:	429d      	cmp	r5, r3
 800b01c:	d126      	bne.n	800b06c <__ieee754_pow+0xec>
 800b01e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b022:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b026:	ea53 030a 	orrs.w	r3, r3, sl
 800b02a:	f000 846f 	beq.w	800b90c <__ieee754_pow+0x98c>
 800b02e:	4b5f      	ldr	r3, [pc, #380]	; (800b1ac <__ieee754_pow+0x22c>)
 800b030:	429c      	cmp	r4, r3
 800b032:	dd2c      	ble.n	800b08e <__ieee754_pow+0x10e>
 800b034:	2e00      	cmp	r6, #0
 800b036:	f280 846f 	bge.w	800b918 <__ieee754_pow+0x998>
 800b03a:	f04f 0b00 	mov.w	fp, #0
 800b03e:	f04f 0c00 	mov.w	ip, #0
 800b042:	4658      	mov	r0, fp
 800b044:	4661      	mov	r1, ip
 800b046:	b011      	add	sp, #68	; 0x44
 800b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04c:	2a00      	cmp	r2, #0
 800b04e:	d13e      	bne.n	800b0ce <__ieee754_pow+0x14e>
 800b050:	f1c3 0314 	rsb	r3, r3, #20
 800b054:	fa45 f103 	asr.w	r1, r5, r3
 800b058:	fa01 f303 	lsl.w	r3, r1, r3
 800b05c:	42ab      	cmp	r3, r5
 800b05e:	f040 8463 	bne.w	800b928 <__ieee754_pow+0x9a8>
 800b062:	f001 0101 	and.w	r1, r1, #1
 800b066:	f1c1 0302 	rsb	r3, r1, #2
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	4b50      	ldr	r3, [pc, #320]	; (800b1b0 <__ieee754_pow+0x230>)
 800b06e:	429d      	cmp	r5, r3
 800b070:	d114      	bne.n	800b09c <__ieee754_pow+0x11c>
 800b072:	2e00      	cmp	r6, #0
 800b074:	f280 8454 	bge.w	800b920 <__ieee754_pow+0x9a0>
 800b078:	463a      	mov	r2, r7
 800b07a:	4643      	mov	r3, r8
 800b07c:	2000      	movs	r0, #0
 800b07e:	494c      	ldr	r1, [pc, #304]	; (800b1b0 <__ieee754_pow+0x230>)
 800b080:	f7f5 fb4c 	bl	800071c <__aeabi_ddiv>
 800b084:	e013      	b.n	800b0ae <__ieee754_pow+0x12e>
 800b086:	2302      	movs	r3, #2
 800b088:	e7c3      	b.n	800b012 <__ieee754_pow+0x92>
 800b08a:	2300      	movs	r3, #0
 800b08c:	e7c1      	b.n	800b012 <__ieee754_pow+0x92>
 800b08e:	2e00      	cmp	r6, #0
 800b090:	dad3      	bge.n	800b03a <__ieee754_pow+0xba>
 800b092:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b096:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b09a:	e7d2      	b.n	800b042 <__ieee754_pow+0xc2>
 800b09c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800b0a0:	d108      	bne.n	800b0b4 <__ieee754_pow+0x134>
 800b0a2:	463a      	mov	r2, r7
 800b0a4:	4643      	mov	r3, r8
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	4641      	mov	r1, r8
 800b0aa:	f7f5 fa0d 	bl	80004c8 <__aeabi_dmul>
 800b0ae:	4683      	mov	fp, r0
 800b0b0:	468c      	mov	ip, r1
 800b0b2:	e7c6      	b.n	800b042 <__ieee754_pow+0xc2>
 800b0b4:	4b3f      	ldr	r3, [pc, #252]	; (800b1b4 <__ieee754_pow+0x234>)
 800b0b6:	429e      	cmp	r6, r3
 800b0b8:	d10b      	bne.n	800b0d2 <__ieee754_pow+0x152>
 800b0ba:	f1b9 0f00 	cmp.w	r9, #0
 800b0be:	db08      	blt.n	800b0d2 <__ieee754_pow+0x152>
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	4641      	mov	r1, r8
 800b0c4:	b011      	add	sp, #68	; 0x44
 800b0c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ca:	f000 bc63 	b.w	800b994 <__ieee754_sqrt>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	4641      	mov	r1, r8
 800b0d6:	f000 ff2e 	bl	800bf36 <fabs>
 800b0da:	4683      	mov	fp, r0
 800b0dc:	468c      	mov	ip, r1
 800b0de:	f1ba 0f00 	cmp.w	sl, #0
 800b0e2:	d12b      	bne.n	800b13c <__ieee754_pow+0x1bc>
 800b0e4:	b124      	cbz	r4, 800b0f0 <__ieee754_pow+0x170>
 800b0e6:	4b32      	ldr	r3, [pc, #200]	; (800b1b0 <__ieee754_pow+0x230>)
 800b0e8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d125      	bne.n	800b13c <__ieee754_pow+0x1bc>
 800b0f0:	2e00      	cmp	r6, #0
 800b0f2:	da07      	bge.n	800b104 <__ieee754_pow+0x184>
 800b0f4:	465a      	mov	r2, fp
 800b0f6:	4663      	mov	r3, ip
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	492d      	ldr	r1, [pc, #180]	; (800b1b0 <__ieee754_pow+0x230>)
 800b0fc:	f7f5 fb0e 	bl	800071c <__aeabi_ddiv>
 800b100:	4683      	mov	fp, r0
 800b102:	468c      	mov	ip, r1
 800b104:	f1b9 0f00 	cmp.w	r9, #0
 800b108:	da9b      	bge.n	800b042 <__ieee754_pow+0xc2>
 800b10a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b10e:	9b00      	ldr	r3, [sp, #0]
 800b110:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b114:	4323      	orrs	r3, r4
 800b116:	d108      	bne.n	800b12a <__ieee754_pow+0x1aa>
 800b118:	465a      	mov	r2, fp
 800b11a:	4663      	mov	r3, ip
 800b11c:	4658      	mov	r0, fp
 800b11e:	4661      	mov	r1, ip
 800b120:	f7f5 f81a 	bl	8000158 <__aeabi_dsub>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	e7aa      	b.n	800b080 <__ieee754_pow+0x100>
 800b12a:	9b00      	ldr	r3, [sp, #0]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d188      	bne.n	800b042 <__ieee754_pow+0xc2>
 800b130:	4658      	mov	r0, fp
 800b132:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b136:	4683      	mov	fp, r0
 800b138:	469c      	mov	ip, r3
 800b13a:	e782      	b.n	800b042 <__ieee754_pow+0xc2>
 800b13c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800b140:	f109 33ff 	add.w	r3, r9, #4294967295
 800b144:	930d      	str	r3, [sp, #52]	; 0x34
 800b146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b148:	9b00      	ldr	r3, [sp, #0]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	d104      	bne.n	800b158 <__ieee754_pow+0x1d8>
 800b14e:	463a      	mov	r2, r7
 800b150:	4643      	mov	r3, r8
 800b152:	4638      	mov	r0, r7
 800b154:	4641      	mov	r1, r8
 800b156:	e7e3      	b.n	800b120 <__ieee754_pow+0x1a0>
 800b158:	4b17      	ldr	r3, [pc, #92]	; (800b1b8 <__ieee754_pow+0x238>)
 800b15a:	429d      	cmp	r5, r3
 800b15c:	f340 80fe 	ble.w	800b35c <__ieee754_pow+0x3dc>
 800b160:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b164:	429d      	cmp	r5, r3
 800b166:	dd0b      	ble.n	800b180 <__ieee754_pow+0x200>
 800b168:	4b10      	ldr	r3, [pc, #64]	; (800b1ac <__ieee754_pow+0x22c>)
 800b16a:	429c      	cmp	r4, r3
 800b16c:	dc0e      	bgt.n	800b18c <__ieee754_pow+0x20c>
 800b16e:	2e00      	cmp	r6, #0
 800b170:	f6bf af63 	bge.w	800b03a <__ieee754_pow+0xba>
 800b174:	a308      	add	r3, pc, #32	; (adr r3, 800b198 <__ieee754_pow+0x218>)
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	4610      	mov	r0, r2
 800b17c:	4619      	mov	r1, r3
 800b17e:	e794      	b.n	800b0aa <__ieee754_pow+0x12a>
 800b180:	4b0e      	ldr	r3, [pc, #56]	; (800b1bc <__ieee754_pow+0x23c>)
 800b182:	429c      	cmp	r4, r3
 800b184:	ddf3      	ble.n	800b16e <__ieee754_pow+0x1ee>
 800b186:	4b0a      	ldr	r3, [pc, #40]	; (800b1b0 <__ieee754_pow+0x230>)
 800b188:	429c      	cmp	r4, r3
 800b18a:	dd19      	ble.n	800b1c0 <__ieee754_pow+0x240>
 800b18c:	2e00      	cmp	r6, #0
 800b18e:	dcf1      	bgt.n	800b174 <__ieee754_pow+0x1f4>
 800b190:	e753      	b.n	800b03a <__ieee754_pow+0xba>
 800b192:	bf00      	nop
 800b194:	f3af 8000 	nop.w
 800b198:	8800759c 	.word	0x8800759c
 800b19c:	7e37e43c 	.word	0x7e37e43c
 800b1a0:	7ff00000 	.word	0x7ff00000
 800b1a4:	0800c5fd 	.word	0x0800c5fd
 800b1a8:	433fffff 	.word	0x433fffff
 800b1ac:	3fefffff 	.word	0x3fefffff
 800b1b0:	3ff00000 	.word	0x3ff00000
 800b1b4:	3fe00000 	.word	0x3fe00000
 800b1b8:	41e00000 	.word	0x41e00000
 800b1bc:	3feffffe 	.word	0x3feffffe
 800b1c0:	4661      	mov	r1, ip
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	4b60      	ldr	r3, [pc, #384]	; (800b348 <__ieee754_pow+0x3c8>)
 800b1c6:	4658      	mov	r0, fp
 800b1c8:	f7f4 ffc6 	bl	8000158 <__aeabi_dsub>
 800b1cc:	a354      	add	r3, pc, #336	; (adr r3, 800b320 <__ieee754_pow+0x3a0>)
 800b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	460d      	mov	r5, r1
 800b1d6:	f7f5 f977 	bl	80004c8 <__aeabi_dmul>
 800b1da:	a353      	add	r3, pc, #332	; (adr r3, 800b328 <__ieee754_pow+0x3a8>)
 800b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	460f      	mov	r7, r1
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	f7f5 f96e 	bl	80004c8 <__aeabi_dmul>
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	4682      	mov	sl, r0
 800b1f0:	468b      	mov	fp, r1
 800b1f2:	4b56      	ldr	r3, [pc, #344]	; (800b34c <__ieee754_pow+0x3cc>)
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 f966 	bl	80004c8 <__aeabi_dmul>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	a14b      	add	r1, pc, #300	; (adr r1, 800b330 <__ieee754_pow+0x3b0>)
 800b202:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b206:	f7f4 ffa7 	bl	8000158 <__aeabi_dsub>
 800b20a:	4622      	mov	r2, r4
 800b20c:	462b      	mov	r3, r5
 800b20e:	f7f5 f95b 	bl	80004c8 <__aeabi_dmul>
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	2000      	movs	r0, #0
 800b218:	494d      	ldr	r1, [pc, #308]	; (800b350 <__ieee754_pow+0x3d0>)
 800b21a:	f7f4 ff9d 	bl	8000158 <__aeabi_dsub>
 800b21e:	4622      	mov	r2, r4
 800b220:	462b      	mov	r3, r5
 800b222:	4680      	mov	r8, r0
 800b224:	4689      	mov	r9, r1
 800b226:	4620      	mov	r0, r4
 800b228:	4629      	mov	r1, r5
 800b22a:	f7f5 f94d 	bl	80004c8 <__aeabi_dmul>
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	4640      	mov	r0, r8
 800b234:	4649      	mov	r1, r9
 800b236:	f7f5 f947 	bl	80004c8 <__aeabi_dmul>
 800b23a:	a33f      	add	r3, pc, #252	; (adr r3, 800b338 <__ieee754_pow+0x3b8>)
 800b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b240:	f7f5 f942 	bl	80004c8 <__aeabi_dmul>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4650      	mov	r0, sl
 800b24a:	4659      	mov	r1, fp
 800b24c:	f7f4 ff84 	bl	8000158 <__aeabi_dsub>
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	4604      	mov	r4, r0
 800b256:	460d      	mov	r5, r1
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f4 ff7e 	bl	800015c <__adddf3>
 800b260:	2000      	movs	r0, #0
 800b262:	468b      	mov	fp, r1
 800b264:	4682      	mov	sl, r0
 800b266:	4632      	mov	r2, r6
 800b268:	463b      	mov	r3, r7
 800b26a:	f7f4 ff75 	bl	8000158 <__aeabi_dsub>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	4620      	mov	r0, r4
 800b274:	4629      	mov	r1, r5
 800b276:	f7f4 ff6f 	bl	8000158 <__aeabi_dsub>
 800b27a:	9b00      	ldr	r3, [sp, #0]
 800b27c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b27e:	3b01      	subs	r3, #1
 800b280:	4313      	orrs	r3, r2
 800b282:	f04f 0300 	mov.w	r3, #0
 800b286:	bf0c      	ite	eq
 800b288:	4c32      	ldreq	r4, [pc, #200]	; (800b354 <__ieee754_pow+0x3d4>)
 800b28a:	4c2f      	ldrne	r4, [pc, #188]	; (800b348 <__ieee754_pow+0x3c8>)
 800b28c:	4606      	mov	r6, r0
 800b28e:	e9cd 3400 	strd	r3, r4, [sp]
 800b292:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b296:	2400      	movs	r4, #0
 800b298:	460f      	mov	r7, r1
 800b29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29e:	4622      	mov	r2, r4
 800b2a0:	462b      	mov	r3, r5
 800b2a2:	f7f4 ff59 	bl	8000158 <__aeabi_dsub>
 800b2a6:	4652      	mov	r2, sl
 800b2a8:	465b      	mov	r3, fp
 800b2aa:	f7f5 f90d 	bl	80004c8 <__aeabi_dmul>
 800b2ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	4689      	mov	r9, r1
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	f7f5 f905 	bl	80004c8 <__aeabi_dmul>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	f7f4 ff49 	bl	800015c <__adddf3>
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	462b      	mov	r3, r5
 800b2ce:	4680      	mov	r8, r0
 800b2d0:	4689      	mov	r9, r1
 800b2d2:	4650      	mov	r0, sl
 800b2d4:	4659      	mov	r1, fp
 800b2d6:	f7f5 f8f7 	bl	80004c8 <__aeabi_dmul>
 800b2da:	4604      	mov	r4, r0
 800b2dc:	460d      	mov	r5, r1
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b2ea:	f7f4 ff37 	bl	800015c <__adddf3>
 800b2ee:	4b1a      	ldr	r3, [pc, #104]	; (800b358 <__ieee754_pow+0x3d8>)
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	4299      	cmp	r1, r3
 800b2f4:	460f      	mov	r7, r1
 800b2f6:	460e      	mov	r6, r1
 800b2f8:	f340 82e1 	ble.w	800b8be <__ieee754_pow+0x93e>
 800b2fc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b300:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b304:	4303      	orrs	r3, r0
 800b306:	f000 81db 	beq.w	800b6c0 <__ieee754_pow+0x740>
 800b30a:	a30d      	add	r3, pc, #52	; (adr r3, 800b340 <__ieee754_pow+0x3c0>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b314:	f7f5 f8d8 	bl	80004c8 <__aeabi_dmul>
 800b318:	a309      	add	r3, pc, #36	; (adr r3, 800b340 <__ieee754_pow+0x3c0>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	e6c4      	b.n	800b0aa <__ieee754_pow+0x12a>
 800b320:	60000000 	.word	0x60000000
 800b324:	3ff71547 	.word	0x3ff71547
 800b328:	f85ddf44 	.word	0xf85ddf44
 800b32c:	3e54ae0b 	.word	0x3e54ae0b
 800b330:	55555555 	.word	0x55555555
 800b334:	3fd55555 	.word	0x3fd55555
 800b338:	652b82fe 	.word	0x652b82fe
 800b33c:	3ff71547 	.word	0x3ff71547
 800b340:	8800759c 	.word	0x8800759c
 800b344:	7e37e43c 	.word	0x7e37e43c
 800b348:	3ff00000 	.word	0x3ff00000
 800b34c:	3fd00000 	.word	0x3fd00000
 800b350:	3fe00000 	.word	0x3fe00000
 800b354:	bff00000 	.word	0xbff00000
 800b358:	408fffff 	.word	0x408fffff
 800b35c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b360:	f04f 0200 	mov.w	r2, #0
 800b364:	da08      	bge.n	800b378 <__ieee754_pow+0x3f8>
 800b366:	4658      	mov	r0, fp
 800b368:	4bcd      	ldr	r3, [pc, #820]	; (800b6a0 <__ieee754_pow+0x720>)
 800b36a:	4661      	mov	r1, ip
 800b36c:	f7f5 f8ac 	bl	80004c8 <__aeabi_dmul>
 800b370:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b374:	4683      	mov	fp, r0
 800b376:	460c      	mov	r4, r1
 800b378:	1523      	asrs	r3, r4, #20
 800b37a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b37e:	4413      	add	r3, r2
 800b380:	930c      	str	r3, [sp, #48]	; 0x30
 800b382:	4bc8      	ldr	r3, [pc, #800]	; (800b6a4 <__ieee754_pow+0x724>)
 800b384:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b388:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b38c:	429c      	cmp	r4, r3
 800b38e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b392:	dd08      	ble.n	800b3a6 <__ieee754_pow+0x426>
 800b394:	4bc4      	ldr	r3, [pc, #784]	; (800b6a8 <__ieee754_pow+0x728>)
 800b396:	429c      	cmp	r4, r3
 800b398:	f340 815b 	ble.w	800b652 <__ieee754_pow+0x6d2>
 800b39c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b39e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	930c      	str	r3, [sp, #48]	; 0x30
 800b3a6:	f04f 0800 	mov.w	r8, #0
 800b3aa:	4658      	mov	r0, fp
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	4bbf      	ldr	r3, [pc, #764]	; (800b6ac <__ieee754_pow+0x72c>)
 800b3b0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800b3b4:	444b      	add	r3, r9
 800b3b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3ba:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	4623      	mov	r3, r4
 800b3c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b3c6:	f7f4 fec7 	bl	8000158 <__aeabi_dsub>
 800b3ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	460f      	mov	r7, r1
 800b3d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b3d6:	f7f4 fec1 	bl	800015c <__adddf3>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	2000      	movs	r0, #0
 800b3e0:	49b3      	ldr	r1, [pc, #716]	; (800b6b0 <__ieee754_pow+0x730>)
 800b3e2:	f7f5 f99b 	bl	800071c <__aeabi_ddiv>
 800b3e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	4639      	mov	r1, r7
 800b3f2:	f7f5 f869 	bl	80004c8 <__aeabi_dmul>
 800b3f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b3fa:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b3fe:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b402:	2300      	movs	r3, #0
 800b404:	2200      	movs	r2, #0
 800b406:	106d      	asrs	r5, r5, #1
 800b408:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b40c:	9304      	str	r3, [sp, #16]
 800b40e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b412:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b416:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800b41a:	4650      	mov	r0, sl
 800b41c:	4659      	mov	r1, fp
 800b41e:	4614      	mov	r4, r2
 800b420:	461d      	mov	r5, r3
 800b422:	f7f5 f851 	bl	80004c8 <__aeabi_dmul>
 800b426:	4602      	mov	r2, r0
 800b428:	460b      	mov	r3, r1
 800b42a:	4630      	mov	r0, r6
 800b42c:	4639      	mov	r1, r7
 800b42e:	f7f4 fe93 	bl	8000158 <__aeabi_dsub>
 800b432:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b436:	4606      	mov	r6, r0
 800b438:	460f      	mov	r7, r1
 800b43a:	4620      	mov	r0, r4
 800b43c:	4629      	mov	r1, r5
 800b43e:	f7f4 fe8b 	bl	8000158 <__aeabi_dsub>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b44a:	f7f4 fe85 	bl	8000158 <__aeabi_dsub>
 800b44e:	4652      	mov	r2, sl
 800b450:	465b      	mov	r3, fp
 800b452:	f7f5 f839 	bl	80004c8 <__aeabi_dmul>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4630      	mov	r0, r6
 800b45c:	4639      	mov	r1, r7
 800b45e:	f7f4 fe7b 	bl	8000158 <__aeabi_dsub>
 800b462:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b466:	f7f5 f82f 	bl	80004c8 <__aeabi_dmul>
 800b46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b46e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b472:	4610      	mov	r0, r2
 800b474:	4619      	mov	r1, r3
 800b476:	f7f5 f827 	bl	80004c8 <__aeabi_dmul>
 800b47a:	a377      	add	r3, pc, #476	; (adr r3, 800b658 <__ieee754_pow+0x6d8>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	4604      	mov	r4, r0
 800b482:	460d      	mov	r5, r1
 800b484:	f7f5 f820 	bl	80004c8 <__aeabi_dmul>
 800b488:	a375      	add	r3, pc, #468	; (adr r3, 800b660 <__ieee754_pow+0x6e0>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	f7f4 fe65 	bl	800015c <__adddf3>
 800b492:	4622      	mov	r2, r4
 800b494:	462b      	mov	r3, r5
 800b496:	f7f5 f817 	bl	80004c8 <__aeabi_dmul>
 800b49a:	a373      	add	r3, pc, #460	; (adr r3, 800b668 <__ieee754_pow+0x6e8>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7f4 fe5c 	bl	800015c <__adddf3>
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	462b      	mov	r3, r5
 800b4a8:	f7f5 f80e 	bl	80004c8 <__aeabi_dmul>
 800b4ac:	a370      	add	r3, pc, #448	; (adr r3, 800b670 <__ieee754_pow+0x6f0>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	f7f4 fe53 	bl	800015c <__adddf3>
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	f7f5 f805 	bl	80004c8 <__aeabi_dmul>
 800b4be:	a36e      	add	r3, pc, #440	; (adr r3, 800b678 <__ieee754_pow+0x6f8>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f4 fe4a 	bl	800015c <__adddf3>
 800b4c8:	4622      	mov	r2, r4
 800b4ca:	462b      	mov	r3, r5
 800b4cc:	f7f4 fffc 	bl	80004c8 <__aeabi_dmul>
 800b4d0:	a36b      	add	r3, pc, #428	; (adr r3, 800b680 <__ieee754_pow+0x700>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	f7f4 fe41 	bl	800015c <__adddf3>
 800b4da:	4622      	mov	r2, r4
 800b4dc:	4606      	mov	r6, r0
 800b4de:	460f      	mov	r7, r1
 800b4e0:	462b      	mov	r3, r5
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	f7f4 ffef 	bl	80004c8 <__aeabi_dmul>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	4639      	mov	r1, r7
 800b4f2:	f7f4 ffe9 	bl	80004c8 <__aeabi_dmul>
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	460d      	mov	r5, r1
 800b4fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4fe:	4652      	mov	r2, sl
 800b500:	465b      	mov	r3, fp
 800b502:	f7f4 fe2b 	bl	800015c <__adddf3>
 800b506:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b50a:	f7f4 ffdd 	bl	80004c8 <__aeabi_dmul>
 800b50e:	4622      	mov	r2, r4
 800b510:	462b      	mov	r3, r5
 800b512:	f7f4 fe23 	bl	800015c <__adddf3>
 800b516:	4652      	mov	r2, sl
 800b518:	4606      	mov	r6, r0
 800b51a:	460f      	mov	r7, r1
 800b51c:	465b      	mov	r3, fp
 800b51e:	4650      	mov	r0, sl
 800b520:	4659      	mov	r1, fp
 800b522:	f7f4 ffd1 	bl	80004c8 <__aeabi_dmul>
 800b526:	2200      	movs	r2, #0
 800b528:	4b62      	ldr	r3, [pc, #392]	; (800b6b4 <__ieee754_pow+0x734>)
 800b52a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b52e:	f7f4 fe15 	bl	800015c <__adddf3>
 800b532:	4632      	mov	r2, r6
 800b534:	463b      	mov	r3, r7
 800b536:	f7f4 fe11 	bl	800015c <__adddf3>
 800b53a:	9804      	ldr	r0, [sp, #16]
 800b53c:	460d      	mov	r5, r1
 800b53e:	4604      	mov	r4, r0
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4650      	mov	r0, sl
 800b546:	4659      	mov	r1, fp
 800b548:	f7f4 ffbe 	bl	80004c8 <__aeabi_dmul>
 800b54c:	2200      	movs	r2, #0
 800b54e:	4682      	mov	sl, r0
 800b550:	468b      	mov	fp, r1
 800b552:	4b58      	ldr	r3, [pc, #352]	; (800b6b4 <__ieee754_pow+0x734>)
 800b554:	4620      	mov	r0, r4
 800b556:	4629      	mov	r1, r5
 800b558:	f7f4 fdfe 	bl	8000158 <__aeabi_dsub>
 800b55c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b560:	f7f4 fdfa 	bl	8000158 <__aeabi_dsub>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	f7f4 fdf4 	bl	8000158 <__aeabi_dsub>
 800b570:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b574:	f7f4 ffa8 	bl	80004c8 <__aeabi_dmul>
 800b578:	4622      	mov	r2, r4
 800b57a:	4606      	mov	r6, r0
 800b57c:	460f      	mov	r7, r1
 800b57e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b582:	462b      	mov	r3, r5
 800b584:	f7f4 ffa0 	bl	80004c8 <__aeabi_dmul>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4630      	mov	r0, r6
 800b58e:	4639      	mov	r1, r7
 800b590:	f7f4 fde4 	bl	800015c <__adddf3>
 800b594:	4606      	mov	r6, r0
 800b596:	460f      	mov	r7, r1
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4650      	mov	r0, sl
 800b59e:	4659      	mov	r1, fp
 800b5a0:	f7f4 fddc 	bl	800015c <__adddf3>
 800b5a4:	a338      	add	r3, pc, #224	; (adr r3, 800b688 <__ieee754_pow+0x708>)
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	9804      	ldr	r0, [sp, #16]
 800b5ac:	460d      	mov	r5, r1
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	f7f4 ff8a 	bl	80004c8 <__aeabi_dmul>
 800b5b4:	4652      	mov	r2, sl
 800b5b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b5ba:	465b      	mov	r3, fp
 800b5bc:	4620      	mov	r0, r4
 800b5be:	4629      	mov	r1, r5
 800b5c0:	f7f4 fdca 	bl	8000158 <__aeabi_dsub>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	f7f4 fdc4 	bl	8000158 <__aeabi_dsub>
 800b5d0:	a32f      	add	r3, pc, #188	; (adr r3, 800b690 <__ieee754_pow+0x710>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	f7f4 ff77 	bl	80004c8 <__aeabi_dmul>
 800b5da:	a32f      	add	r3, pc, #188	; (adr r3, 800b698 <__ieee754_pow+0x718>)
 800b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	460f      	mov	r7, r1
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	4629      	mov	r1, r5
 800b5e8:	f7f4 ff6e 	bl	80004c8 <__aeabi_dmul>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	4639      	mov	r1, r7
 800b5f4:	f7f4 fdb2 	bl	800015c <__adddf3>
 800b5f8:	4b2f      	ldr	r3, [pc, #188]	; (800b6b8 <__ieee754_pow+0x738>)
 800b5fa:	444b      	add	r3, r9
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f7f4 fdac 	bl	800015c <__adddf3>
 800b604:	4604      	mov	r4, r0
 800b606:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b608:	460d      	mov	r5, r1
 800b60a:	f7f4 fef3 	bl	80003f4 <__aeabi_i2d>
 800b60e:	4606      	mov	r6, r0
 800b610:	460f      	mov	r7, r1
 800b612:	4b2a      	ldr	r3, [pc, #168]	; (800b6bc <__ieee754_pow+0x73c>)
 800b614:	4622      	mov	r2, r4
 800b616:	444b      	add	r3, r9
 800b618:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b61c:	462b      	mov	r3, r5
 800b61e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b622:	f7f4 fd9b 	bl	800015c <__adddf3>
 800b626:	4642      	mov	r2, r8
 800b628:	464b      	mov	r3, r9
 800b62a:	f7f4 fd97 	bl	800015c <__adddf3>
 800b62e:	4632      	mov	r2, r6
 800b630:	463b      	mov	r3, r7
 800b632:	f7f4 fd93 	bl	800015c <__adddf3>
 800b636:	9804      	ldr	r0, [sp, #16]
 800b638:	4632      	mov	r2, r6
 800b63a:	463b      	mov	r3, r7
 800b63c:	4682      	mov	sl, r0
 800b63e:	468b      	mov	fp, r1
 800b640:	f7f4 fd8a 	bl	8000158 <__aeabi_dsub>
 800b644:	4642      	mov	r2, r8
 800b646:	464b      	mov	r3, r9
 800b648:	f7f4 fd86 	bl	8000158 <__aeabi_dsub>
 800b64c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b650:	e60b      	b.n	800b26a <__ieee754_pow+0x2ea>
 800b652:	f04f 0801 	mov.w	r8, #1
 800b656:	e6a8      	b.n	800b3aa <__ieee754_pow+0x42a>
 800b658:	4a454eef 	.word	0x4a454eef
 800b65c:	3fca7e28 	.word	0x3fca7e28
 800b660:	93c9db65 	.word	0x93c9db65
 800b664:	3fcd864a 	.word	0x3fcd864a
 800b668:	a91d4101 	.word	0xa91d4101
 800b66c:	3fd17460 	.word	0x3fd17460
 800b670:	518f264d 	.word	0x518f264d
 800b674:	3fd55555 	.word	0x3fd55555
 800b678:	db6fabff 	.word	0xdb6fabff
 800b67c:	3fdb6db6 	.word	0x3fdb6db6
 800b680:	33333303 	.word	0x33333303
 800b684:	3fe33333 	.word	0x3fe33333
 800b688:	e0000000 	.word	0xe0000000
 800b68c:	3feec709 	.word	0x3feec709
 800b690:	dc3a03fd 	.word	0xdc3a03fd
 800b694:	3feec709 	.word	0x3feec709
 800b698:	145b01f5 	.word	0x145b01f5
 800b69c:	be3e2fe0 	.word	0xbe3e2fe0
 800b6a0:	43400000 	.word	0x43400000
 800b6a4:	0003988e 	.word	0x0003988e
 800b6a8:	000bb679 	.word	0x000bb679
 800b6ac:	0800c640 	.word	0x0800c640
 800b6b0:	3ff00000 	.word	0x3ff00000
 800b6b4:	40080000 	.word	0x40080000
 800b6b8:	0800c660 	.word	0x0800c660
 800b6bc:	0800c650 	.word	0x0800c650
 800b6c0:	a39b      	add	r3, pc, #620	; (adr r3, 800b930 <__ieee754_pow+0x9b0>)
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	4640      	mov	r0, r8
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	f7f4 fd47 	bl	800015c <__adddf3>
 800b6ce:	4622      	mov	r2, r4
 800b6d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6d4:	462b      	mov	r3, r5
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	4639      	mov	r1, r7
 800b6da:	f7f4 fd3d 	bl	8000158 <__aeabi_dsub>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6e6:	f7f5 f97f 	bl	80009e8 <__aeabi_dcmpgt>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	f47f ae0d 	bne.w	800b30a <__ieee754_pow+0x38a>
 800b6f0:	4aa3      	ldr	r2, [pc, #652]	; (800b980 <__ieee754_pow+0xa00>)
 800b6f2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	f340 8103 	ble.w	800b902 <__ieee754_pow+0x982>
 800b6fc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b700:	2000      	movs	r0, #0
 800b702:	151b      	asrs	r3, r3, #20
 800b704:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b708:	fa4a f303 	asr.w	r3, sl, r3
 800b70c:	4433      	add	r3, r6
 800b70e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b712:	4f9c      	ldr	r7, [pc, #624]	; (800b984 <__ieee754_pow+0xa04>)
 800b714:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b718:	4117      	asrs	r7, r2
 800b71a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b71e:	ea23 0107 	bic.w	r1, r3, r7
 800b722:	f1c2 0214 	rsb	r2, r2, #20
 800b726:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b72a:	fa4a fa02 	asr.w	sl, sl, r2
 800b72e:	2e00      	cmp	r6, #0
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4620      	mov	r0, r4
 800b736:	4629      	mov	r1, r5
 800b738:	bfb8      	it	lt
 800b73a:	f1ca 0a00 	rsblt	sl, sl, #0
 800b73e:	f7f4 fd0b 	bl	8000158 <__aeabi_dsub>
 800b742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b74a:	4642      	mov	r2, r8
 800b74c:	464b      	mov	r3, r9
 800b74e:	f7f4 fd05 	bl	800015c <__adddf3>
 800b752:	a379      	add	r3, pc, #484	; (adr r3, 800b938 <__ieee754_pow+0x9b8>)
 800b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b758:	2000      	movs	r0, #0
 800b75a:	460d      	mov	r5, r1
 800b75c:	4604      	mov	r4, r0
 800b75e:	f7f4 feb3 	bl	80004c8 <__aeabi_dmul>
 800b762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b766:	4606      	mov	r6, r0
 800b768:	460f      	mov	r7, r1
 800b76a:	4620      	mov	r0, r4
 800b76c:	4629      	mov	r1, r5
 800b76e:	f7f4 fcf3 	bl	8000158 <__aeabi_dsub>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f4 fced 	bl	8000158 <__aeabi_dsub>
 800b77e:	a370      	add	r3, pc, #448	; (adr r3, 800b940 <__ieee754_pow+0x9c0>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f7f4 fea0 	bl	80004c8 <__aeabi_dmul>
 800b788:	a36f      	add	r3, pc, #444	; (adr r3, 800b948 <__ieee754_pow+0x9c8>)
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	4680      	mov	r8, r0
 800b790:	4689      	mov	r9, r1
 800b792:	4620      	mov	r0, r4
 800b794:	4629      	mov	r1, r5
 800b796:	f7f4 fe97 	bl	80004c8 <__aeabi_dmul>
 800b79a:	4602      	mov	r2, r0
 800b79c:	460b      	mov	r3, r1
 800b79e:	4640      	mov	r0, r8
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	f7f4 fcdb 	bl	800015c <__adddf3>
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	460d      	mov	r5, r1
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	f7f4 fcd3 	bl	800015c <__adddf3>
 800b7b6:	4632      	mov	r2, r6
 800b7b8:	463b      	mov	r3, r7
 800b7ba:	4680      	mov	r8, r0
 800b7bc:	4689      	mov	r9, r1
 800b7be:	f7f4 fccb 	bl	8000158 <__aeabi_dsub>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7f4 fcc5 	bl	8000158 <__aeabi_dsub>
 800b7ce:	4642      	mov	r2, r8
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	460f      	mov	r7, r1
 800b7d4:	464b      	mov	r3, r9
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	4649      	mov	r1, r9
 800b7da:	f7f4 fe75 	bl	80004c8 <__aeabi_dmul>
 800b7de:	a35c      	add	r3, pc, #368	; (adr r3, 800b950 <__ieee754_pow+0x9d0>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	460d      	mov	r5, r1
 800b7e8:	f7f4 fe6e 	bl	80004c8 <__aeabi_dmul>
 800b7ec:	a35a      	add	r3, pc, #360	; (adr r3, 800b958 <__ieee754_pow+0x9d8>)
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	f7f4 fcb1 	bl	8000158 <__aeabi_dsub>
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	462b      	mov	r3, r5
 800b7fa:	f7f4 fe65 	bl	80004c8 <__aeabi_dmul>
 800b7fe:	a358      	add	r3, pc, #352	; (adr r3, 800b960 <__ieee754_pow+0x9e0>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f7f4 fcaa 	bl	800015c <__adddf3>
 800b808:	4622      	mov	r2, r4
 800b80a:	462b      	mov	r3, r5
 800b80c:	f7f4 fe5c 	bl	80004c8 <__aeabi_dmul>
 800b810:	a355      	add	r3, pc, #340	; (adr r3, 800b968 <__ieee754_pow+0x9e8>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	f7f4 fc9f 	bl	8000158 <__aeabi_dsub>
 800b81a:	4622      	mov	r2, r4
 800b81c:	462b      	mov	r3, r5
 800b81e:	f7f4 fe53 	bl	80004c8 <__aeabi_dmul>
 800b822:	a353      	add	r3, pc, #332	; (adr r3, 800b970 <__ieee754_pow+0x9f0>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 fc98 	bl	800015c <__adddf3>
 800b82c:	4622      	mov	r2, r4
 800b82e:	462b      	mov	r3, r5
 800b830:	f7f4 fe4a 	bl	80004c8 <__aeabi_dmul>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4640      	mov	r0, r8
 800b83a:	4649      	mov	r1, r9
 800b83c:	f7f4 fc8c 	bl	8000158 <__aeabi_dsub>
 800b840:	4604      	mov	r4, r0
 800b842:	460d      	mov	r5, r1
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4640      	mov	r0, r8
 800b84a:	4649      	mov	r1, r9
 800b84c:	f7f4 fe3c 	bl	80004c8 <__aeabi_dmul>
 800b850:	2200      	movs	r2, #0
 800b852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b85a:	4620      	mov	r0, r4
 800b85c:	4629      	mov	r1, r5
 800b85e:	f7f4 fc7b 	bl	8000158 <__aeabi_dsub>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b86a:	f7f4 ff57 	bl	800071c <__aeabi_ddiv>
 800b86e:	4632      	mov	r2, r6
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	463b      	mov	r3, r7
 800b876:	4640      	mov	r0, r8
 800b878:	4649      	mov	r1, r9
 800b87a:	f7f4 fe25 	bl	80004c8 <__aeabi_dmul>
 800b87e:	4632      	mov	r2, r6
 800b880:	463b      	mov	r3, r7
 800b882:	f7f4 fc6b 	bl	800015c <__adddf3>
 800b886:	4602      	mov	r2, r0
 800b888:	460b      	mov	r3, r1
 800b88a:	4620      	mov	r0, r4
 800b88c:	4629      	mov	r1, r5
 800b88e:	f7f4 fc63 	bl	8000158 <__aeabi_dsub>
 800b892:	4642      	mov	r2, r8
 800b894:	464b      	mov	r3, r9
 800b896:	f7f4 fc5f 	bl	8000158 <__aeabi_dsub>
 800b89a:	4602      	mov	r2, r0
 800b89c:	460b      	mov	r3, r1
 800b89e:	2000      	movs	r0, #0
 800b8a0:	4939      	ldr	r1, [pc, #228]	; (800b988 <__ieee754_pow+0xa08>)
 800b8a2:	f7f4 fc59 	bl	8000158 <__aeabi_dsub>
 800b8a6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b8aa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b8ae:	da2b      	bge.n	800b908 <__ieee754_pow+0x988>
 800b8b0:	4652      	mov	r2, sl
 800b8b2:	f000 fbdd 	bl	800c070 <scalbn>
 800b8b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8ba:	f7ff bbf6 	b.w	800b0aa <__ieee754_pow+0x12a>
 800b8be:	4b33      	ldr	r3, [pc, #204]	; (800b98c <__ieee754_pow+0xa0c>)
 800b8c0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b8c4:	429f      	cmp	r7, r3
 800b8c6:	f77f af13 	ble.w	800b6f0 <__ieee754_pow+0x770>
 800b8ca:	4b31      	ldr	r3, [pc, #196]	; (800b990 <__ieee754_pow+0xa10>)
 800b8cc:	440b      	add	r3, r1
 800b8ce:	4303      	orrs	r3, r0
 800b8d0:	d00b      	beq.n	800b8ea <__ieee754_pow+0x96a>
 800b8d2:	a329      	add	r3, pc, #164	; (adr r3, 800b978 <__ieee754_pow+0x9f8>)
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8dc:	f7f4 fdf4 	bl	80004c8 <__aeabi_dmul>
 800b8e0:	a325      	add	r3, pc, #148	; (adr r3, 800b978 <__ieee754_pow+0x9f8>)
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	f7ff bbe0 	b.w	800b0aa <__ieee754_pow+0x12a>
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	462b      	mov	r3, r5
 800b8ee:	f7f4 fc33 	bl	8000158 <__aeabi_dsub>
 800b8f2:	4642      	mov	r2, r8
 800b8f4:	464b      	mov	r3, r9
 800b8f6:	f7f5 f86d 	bl	80009d4 <__aeabi_dcmpge>
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	f43f aef8 	beq.w	800b6f0 <__ieee754_pow+0x770>
 800b900:	e7e7      	b.n	800b8d2 <__ieee754_pow+0x952>
 800b902:	f04f 0a00 	mov.w	sl, #0
 800b906:	e71e      	b.n	800b746 <__ieee754_pow+0x7c6>
 800b908:	4621      	mov	r1, r4
 800b90a:	e7d4      	b.n	800b8b6 <__ieee754_pow+0x936>
 800b90c:	f04f 0b00 	mov.w	fp, #0
 800b910:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b988 <__ieee754_pow+0xa08>
 800b914:	f7ff bb95 	b.w	800b042 <__ieee754_pow+0xc2>
 800b918:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b91c:	f7ff bb91 	b.w	800b042 <__ieee754_pow+0xc2>
 800b920:	4638      	mov	r0, r7
 800b922:	4641      	mov	r1, r8
 800b924:	f7ff bbc3 	b.w	800b0ae <__ieee754_pow+0x12e>
 800b928:	9200      	str	r2, [sp, #0]
 800b92a:	f7ff bb9f 	b.w	800b06c <__ieee754_pow+0xec>
 800b92e:	bf00      	nop
 800b930:	652b82fe 	.word	0x652b82fe
 800b934:	3c971547 	.word	0x3c971547
 800b938:	00000000 	.word	0x00000000
 800b93c:	3fe62e43 	.word	0x3fe62e43
 800b940:	fefa39ef 	.word	0xfefa39ef
 800b944:	3fe62e42 	.word	0x3fe62e42
 800b948:	0ca86c39 	.word	0x0ca86c39
 800b94c:	be205c61 	.word	0xbe205c61
 800b950:	72bea4d0 	.word	0x72bea4d0
 800b954:	3e663769 	.word	0x3e663769
 800b958:	c5d26bf1 	.word	0xc5d26bf1
 800b95c:	3ebbbd41 	.word	0x3ebbbd41
 800b960:	af25de2c 	.word	0xaf25de2c
 800b964:	3f11566a 	.word	0x3f11566a
 800b968:	16bebd93 	.word	0x16bebd93
 800b96c:	3f66c16c 	.word	0x3f66c16c
 800b970:	5555553e 	.word	0x5555553e
 800b974:	3fc55555 	.word	0x3fc55555
 800b978:	c2f8f359 	.word	0xc2f8f359
 800b97c:	01a56e1f 	.word	0x01a56e1f
 800b980:	3fe00000 	.word	0x3fe00000
 800b984:	000fffff 	.word	0x000fffff
 800b988:	3ff00000 	.word	0x3ff00000
 800b98c:	4090cbff 	.word	0x4090cbff
 800b990:	3f6f3400 	.word	0x3f6f3400

0800b994 <__ieee754_sqrt>:
 800b994:	4b54      	ldr	r3, [pc, #336]	; (800bae8 <__ieee754_sqrt+0x154>)
 800b996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99a:	438b      	bics	r3, r1
 800b99c:	4606      	mov	r6, r0
 800b99e:	460d      	mov	r5, r1
 800b9a0:	460a      	mov	r2, r1
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	d10f      	bne.n	800b9c6 <__ieee754_sqrt+0x32>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	f7f4 fd8d 	bl	80004c8 <__aeabi_dmul>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	f7f4 fbd1 	bl	800015c <__adddf3>
 800b9ba:	4606      	mov	r6, r0
 800b9bc:	460d      	mov	r5, r1
 800b9be:	4630      	mov	r0, r6
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c6:	2900      	cmp	r1, #0
 800b9c8:	4607      	mov	r7, r0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	dc0e      	bgt.n	800b9ec <__ieee754_sqrt+0x58>
 800b9ce:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b9d2:	ea5c 0707 	orrs.w	r7, ip, r7
 800b9d6:	d0f2      	beq.n	800b9be <__ieee754_sqrt+0x2a>
 800b9d8:	b141      	cbz	r1, 800b9ec <__ieee754_sqrt+0x58>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	460b      	mov	r3, r1
 800b9de:	f7f4 fbbb 	bl	8000158 <__aeabi_dsub>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	f7f4 fe99 	bl	800071c <__aeabi_ddiv>
 800b9ea:	e7e6      	b.n	800b9ba <__ieee754_sqrt+0x26>
 800b9ec:	1512      	asrs	r2, r2, #20
 800b9ee:	d074      	beq.n	800bada <__ieee754_sqrt+0x146>
 800b9f0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b9f4:	07d5      	lsls	r5, r2, #31
 800b9f6:	f04f 0500 	mov.w	r5, #0
 800b9fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b9fe:	bf48      	it	mi
 800ba00:	0fd9      	lsrmi	r1, r3, #31
 800ba02:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800ba06:	bf44      	itt	mi
 800ba08:	005b      	lslmi	r3, r3, #1
 800ba0a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800ba0e:	1051      	asrs	r1, r2, #1
 800ba10:	0fda      	lsrs	r2, r3, #31
 800ba12:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800ba16:	4628      	mov	r0, r5
 800ba18:	2216      	movs	r2, #22
 800ba1a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	1987      	adds	r7, r0, r6
 800ba22:	42a7      	cmp	r7, r4
 800ba24:	bfde      	ittt	le
 800ba26:	19b8      	addle	r0, r7, r6
 800ba28:	1be4      	suble	r4, r4, r7
 800ba2a:	19ad      	addle	r5, r5, r6
 800ba2c:	0fdf      	lsrs	r7, r3, #31
 800ba2e:	3a01      	subs	r2, #1
 800ba30:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800ba34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ba3c:	d1f0      	bne.n	800ba20 <__ieee754_sqrt+0x8c>
 800ba3e:	f04f 0c20 	mov.w	ip, #32
 800ba42:	4696      	mov	lr, r2
 800ba44:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ba48:	4284      	cmp	r4, r0
 800ba4a:	eb06 070e 	add.w	r7, r6, lr
 800ba4e:	dc02      	bgt.n	800ba56 <__ieee754_sqrt+0xc2>
 800ba50:	d112      	bne.n	800ba78 <__ieee754_sqrt+0xe4>
 800ba52:	429f      	cmp	r7, r3
 800ba54:	d810      	bhi.n	800ba78 <__ieee754_sqrt+0xe4>
 800ba56:	2f00      	cmp	r7, #0
 800ba58:	eb07 0e06 	add.w	lr, r7, r6
 800ba5c:	da42      	bge.n	800bae4 <__ieee754_sqrt+0x150>
 800ba5e:	f1be 0f00 	cmp.w	lr, #0
 800ba62:	db3f      	blt.n	800bae4 <__ieee754_sqrt+0x150>
 800ba64:	f100 0801 	add.w	r8, r0, #1
 800ba68:	1a24      	subs	r4, r4, r0
 800ba6a:	4640      	mov	r0, r8
 800ba6c:	429f      	cmp	r7, r3
 800ba6e:	bf88      	it	hi
 800ba70:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800ba74:	1bdb      	subs	r3, r3, r7
 800ba76:	4432      	add	r2, r6
 800ba78:	0064      	lsls	r4, r4, #1
 800ba7a:	f1bc 0c01 	subs.w	ip, ip, #1
 800ba7e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800ba82:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ba86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba8a:	d1dd      	bne.n	800ba48 <__ieee754_sqrt+0xb4>
 800ba8c:	4323      	orrs	r3, r4
 800ba8e:	d006      	beq.n	800ba9e <__ieee754_sqrt+0x10a>
 800ba90:	1c54      	adds	r4, r2, #1
 800ba92:	bf0b      	itete	eq
 800ba94:	4662      	moveq	r2, ip
 800ba96:	3201      	addne	r2, #1
 800ba98:	3501      	addeq	r5, #1
 800ba9a:	f022 0201 	bicne.w	r2, r2, #1
 800ba9e:	106b      	asrs	r3, r5, #1
 800baa0:	0852      	lsrs	r2, r2, #1
 800baa2:	07e8      	lsls	r0, r5, #31
 800baa4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800baa8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800baac:	bf48      	it	mi
 800baae:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bab2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800bab6:	4616      	mov	r6, r2
 800bab8:	e781      	b.n	800b9be <__ieee754_sqrt+0x2a>
 800baba:	0adc      	lsrs	r4, r3, #11
 800babc:	3915      	subs	r1, #21
 800babe:	055b      	lsls	r3, r3, #21
 800bac0:	2c00      	cmp	r4, #0
 800bac2:	d0fa      	beq.n	800baba <__ieee754_sqrt+0x126>
 800bac4:	02e6      	lsls	r6, r4, #11
 800bac6:	d50a      	bpl.n	800bade <__ieee754_sqrt+0x14a>
 800bac8:	f1c2 0020 	rsb	r0, r2, #32
 800bacc:	fa23 f000 	lsr.w	r0, r3, r0
 800bad0:	1e55      	subs	r5, r2, #1
 800bad2:	4093      	lsls	r3, r2
 800bad4:	4304      	orrs	r4, r0
 800bad6:	1b4a      	subs	r2, r1, r5
 800bad8:	e78a      	b.n	800b9f0 <__ieee754_sqrt+0x5c>
 800bada:	4611      	mov	r1, r2
 800badc:	e7f0      	b.n	800bac0 <__ieee754_sqrt+0x12c>
 800bade:	0064      	lsls	r4, r4, #1
 800bae0:	3201      	adds	r2, #1
 800bae2:	e7ef      	b.n	800bac4 <__ieee754_sqrt+0x130>
 800bae4:	4680      	mov	r8, r0
 800bae6:	e7bf      	b.n	800ba68 <__ieee754_sqrt+0xd4>
 800bae8:	7ff00000 	.word	0x7ff00000

0800baec <__ieee754_asinf>:
 800baec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baf0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800baf4:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800baf8:	4604      	mov	r4, r0
 800bafa:	4607      	mov	r7, r0
 800bafc:	d10c      	bne.n	800bb18 <__ieee754_asinf+0x2c>
 800bafe:	498c      	ldr	r1, [pc, #560]	; (800bd30 <__ieee754_asinf+0x244>)
 800bb00:	f7f5 f910 	bl	8000d24 <__aeabi_fmul>
 800bb04:	498b      	ldr	r1, [pc, #556]	; (800bd34 <__ieee754_asinf+0x248>)
 800bb06:	4605      	mov	r5, r0
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f7f5 f90b 	bl	8000d24 <__aeabi_fmul>
 800bb0e:	4601      	mov	r1, r0
 800bb10:	4628      	mov	r0, r5
 800bb12:	f7f4 ffff 	bl	8000b14 <__addsf3>
 800bb16:	e006      	b.n	800bb26 <__ieee754_asinf+0x3a>
 800bb18:	dd09      	ble.n	800bb2e <__ieee754_asinf+0x42>
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	f7f4 fff8 	bl	8000b10 <__aeabi_fsub>
 800bb20:	4601      	mov	r1, r0
 800bb22:	f7f5 f9b3 	bl	8000e8c <__aeabi_fdiv>
 800bb26:	4604      	mov	r4, r0
 800bb28:	4620      	mov	r0, r4
 800bb2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb2e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800bb32:	da0b      	bge.n	800bb4c <__ieee754_asinf+0x60>
 800bb34:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800bb38:	da73      	bge.n	800bc22 <__ieee754_asinf+0x136>
 800bb3a:	497f      	ldr	r1, [pc, #508]	; (800bd38 <__ieee754_asinf+0x24c>)
 800bb3c:	f7f4 ffea 	bl	8000b14 <__addsf3>
 800bb40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb44:	f7f5 faaa 	bl	800109c <__aeabi_fcmpgt>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d1ed      	bne.n	800bb28 <__ieee754_asinf+0x3c>
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f000 fc09 	bl	800c364 <fabsf>
 800bb52:	4601      	mov	r1, r0
 800bb54:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bb58:	f7f4 ffda 	bl	8000b10 <__aeabi_fsub>
 800bb5c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bb60:	f7f5 f8e0 	bl	8000d24 <__aeabi_fmul>
 800bb64:	4604      	mov	r4, r0
 800bb66:	4975      	ldr	r1, [pc, #468]	; (800bd3c <__ieee754_asinf+0x250>)
 800bb68:	f7f5 f8dc 	bl	8000d24 <__aeabi_fmul>
 800bb6c:	4974      	ldr	r1, [pc, #464]	; (800bd40 <__ieee754_asinf+0x254>)
 800bb6e:	f7f4 ffd1 	bl	8000b14 <__addsf3>
 800bb72:	4621      	mov	r1, r4
 800bb74:	f7f5 f8d6 	bl	8000d24 <__aeabi_fmul>
 800bb78:	4972      	ldr	r1, [pc, #456]	; (800bd44 <__ieee754_asinf+0x258>)
 800bb7a:	f7f4 ffc9 	bl	8000b10 <__aeabi_fsub>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	f7f5 f8d0 	bl	8000d24 <__aeabi_fmul>
 800bb84:	4970      	ldr	r1, [pc, #448]	; (800bd48 <__ieee754_asinf+0x25c>)
 800bb86:	f7f4 ffc5 	bl	8000b14 <__addsf3>
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	f7f5 f8ca 	bl	8000d24 <__aeabi_fmul>
 800bb90:	496e      	ldr	r1, [pc, #440]	; (800bd4c <__ieee754_asinf+0x260>)
 800bb92:	f7f4 ffbd 	bl	8000b10 <__aeabi_fsub>
 800bb96:	4621      	mov	r1, r4
 800bb98:	f7f5 f8c4 	bl	8000d24 <__aeabi_fmul>
 800bb9c:	496c      	ldr	r1, [pc, #432]	; (800bd50 <__ieee754_asinf+0x264>)
 800bb9e:	f7f4 ffb9 	bl	8000b14 <__addsf3>
 800bba2:	4621      	mov	r1, r4
 800bba4:	f7f5 f8be 	bl	8000d24 <__aeabi_fmul>
 800bba8:	496a      	ldr	r1, [pc, #424]	; (800bd54 <__ieee754_asinf+0x268>)
 800bbaa:	4680      	mov	r8, r0
 800bbac:	4620      	mov	r0, r4
 800bbae:	f7f5 f8b9 	bl	8000d24 <__aeabi_fmul>
 800bbb2:	4969      	ldr	r1, [pc, #420]	; (800bd58 <__ieee754_asinf+0x26c>)
 800bbb4:	f7f4 ffac 	bl	8000b10 <__aeabi_fsub>
 800bbb8:	4621      	mov	r1, r4
 800bbba:	f7f5 f8b3 	bl	8000d24 <__aeabi_fmul>
 800bbbe:	4967      	ldr	r1, [pc, #412]	; (800bd5c <__ieee754_asinf+0x270>)
 800bbc0:	f7f4 ffa8 	bl	8000b14 <__addsf3>
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	f7f5 f8ad 	bl	8000d24 <__aeabi_fmul>
 800bbca:	4965      	ldr	r1, [pc, #404]	; (800bd60 <__ieee754_asinf+0x274>)
 800bbcc:	f7f4 ffa0 	bl	8000b10 <__aeabi_fsub>
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	f7f5 f8a7 	bl	8000d24 <__aeabi_fmul>
 800bbd6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bbda:	f7f4 ff9b 	bl	8000b14 <__addsf3>
 800bbde:	4681      	mov	r9, r0
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f000 f955 	bl	800be90 <__ieee754_sqrtf>
 800bbe6:	4b5f      	ldr	r3, [pc, #380]	; (800bd64 <__ieee754_asinf+0x278>)
 800bbe8:	4606      	mov	r6, r0
 800bbea:	429d      	cmp	r5, r3
 800bbec:	dd63      	ble.n	800bcb6 <__ieee754_asinf+0x1ca>
 800bbee:	4649      	mov	r1, r9
 800bbf0:	4640      	mov	r0, r8
 800bbf2:	f7f5 f94b 	bl	8000e8c <__aeabi_fdiv>
 800bbf6:	4631      	mov	r1, r6
 800bbf8:	f7f5 f894 	bl	8000d24 <__aeabi_fmul>
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	f7f4 ff89 	bl	8000b14 <__addsf3>
 800bc02:	4601      	mov	r1, r0
 800bc04:	f7f4 ff86 	bl	8000b14 <__addsf3>
 800bc08:	4957      	ldr	r1, [pc, #348]	; (800bd68 <__ieee754_asinf+0x27c>)
 800bc0a:	f7f4 ff83 	bl	8000b14 <__addsf3>
 800bc0e:	4601      	mov	r1, r0
 800bc10:	4847      	ldr	r0, [pc, #284]	; (800bd30 <__ieee754_asinf+0x244>)
 800bc12:	f7f4 ff7d 	bl	8000b10 <__aeabi_fsub>
 800bc16:	2f00      	cmp	r7, #0
 800bc18:	4604      	mov	r4, r0
 800bc1a:	bfd8      	it	le
 800bc1c:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800bc20:	e782      	b.n	800bb28 <__ieee754_asinf+0x3c>
 800bc22:	4601      	mov	r1, r0
 800bc24:	f7f5 f87e 	bl	8000d24 <__aeabi_fmul>
 800bc28:	4605      	mov	r5, r0
 800bc2a:	4944      	ldr	r1, [pc, #272]	; (800bd3c <__ieee754_asinf+0x250>)
 800bc2c:	f7f5 f87a 	bl	8000d24 <__aeabi_fmul>
 800bc30:	4943      	ldr	r1, [pc, #268]	; (800bd40 <__ieee754_asinf+0x254>)
 800bc32:	f7f4 ff6f 	bl	8000b14 <__addsf3>
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7f5 f874 	bl	8000d24 <__aeabi_fmul>
 800bc3c:	4941      	ldr	r1, [pc, #260]	; (800bd44 <__ieee754_asinf+0x258>)
 800bc3e:	f7f4 ff67 	bl	8000b10 <__aeabi_fsub>
 800bc42:	4629      	mov	r1, r5
 800bc44:	f7f5 f86e 	bl	8000d24 <__aeabi_fmul>
 800bc48:	493f      	ldr	r1, [pc, #252]	; (800bd48 <__ieee754_asinf+0x25c>)
 800bc4a:	f7f4 ff63 	bl	8000b14 <__addsf3>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f7f5 f868 	bl	8000d24 <__aeabi_fmul>
 800bc54:	493d      	ldr	r1, [pc, #244]	; (800bd4c <__ieee754_asinf+0x260>)
 800bc56:	f7f4 ff5b 	bl	8000b10 <__aeabi_fsub>
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7f5 f862 	bl	8000d24 <__aeabi_fmul>
 800bc60:	493b      	ldr	r1, [pc, #236]	; (800bd50 <__ieee754_asinf+0x264>)
 800bc62:	f7f4 ff57 	bl	8000b14 <__addsf3>
 800bc66:	4629      	mov	r1, r5
 800bc68:	f7f5 f85c 	bl	8000d24 <__aeabi_fmul>
 800bc6c:	4939      	ldr	r1, [pc, #228]	; (800bd54 <__ieee754_asinf+0x268>)
 800bc6e:	4606      	mov	r6, r0
 800bc70:	4628      	mov	r0, r5
 800bc72:	f7f5 f857 	bl	8000d24 <__aeabi_fmul>
 800bc76:	4938      	ldr	r1, [pc, #224]	; (800bd58 <__ieee754_asinf+0x26c>)
 800bc78:	f7f4 ff4a 	bl	8000b10 <__aeabi_fsub>
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	f7f5 f851 	bl	8000d24 <__aeabi_fmul>
 800bc82:	4936      	ldr	r1, [pc, #216]	; (800bd5c <__ieee754_asinf+0x270>)
 800bc84:	f7f4 ff46 	bl	8000b14 <__addsf3>
 800bc88:	4629      	mov	r1, r5
 800bc8a:	f7f5 f84b 	bl	8000d24 <__aeabi_fmul>
 800bc8e:	4934      	ldr	r1, [pc, #208]	; (800bd60 <__ieee754_asinf+0x274>)
 800bc90:	f7f4 ff3e 	bl	8000b10 <__aeabi_fsub>
 800bc94:	4629      	mov	r1, r5
 800bc96:	f7f5 f845 	bl	8000d24 <__aeabi_fmul>
 800bc9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc9e:	f7f4 ff39 	bl	8000b14 <__addsf3>
 800bca2:	4601      	mov	r1, r0
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7f5 f8f1 	bl	8000e8c <__aeabi_fdiv>
 800bcaa:	4621      	mov	r1, r4
 800bcac:	f7f5 f83a 	bl	8000d24 <__aeabi_fmul>
 800bcb0:	4601      	mov	r1, r0
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	e72d      	b.n	800bb12 <__ieee754_asinf+0x26>
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800bcbc:	f7f4 ff2a 	bl	8000b14 <__addsf3>
 800bcc0:	4649      	mov	r1, r9
 800bcc2:	4682      	mov	sl, r0
 800bcc4:	4640      	mov	r0, r8
 800bcc6:	f7f5 f8e1 	bl	8000e8c <__aeabi_fdiv>
 800bcca:	4601      	mov	r1, r0
 800bccc:	4650      	mov	r0, sl
 800bcce:	f7f5 f829 	bl	8000d24 <__aeabi_fmul>
 800bcd2:	f025 050f 	bic.w	r5, r5, #15
 800bcd6:	4680      	mov	r8, r0
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f7f5 f822 	bl	8000d24 <__aeabi_fmul>
 800bce0:	4601      	mov	r1, r0
 800bce2:	4620      	mov	r0, r4
 800bce4:	f7f4 ff14 	bl	8000b10 <__aeabi_fsub>
 800bce8:	4631      	mov	r1, r6
 800bcea:	4604      	mov	r4, r0
 800bcec:	4628      	mov	r0, r5
 800bcee:	f7f4 ff11 	bl	8000b14 <__addsf3>
 800bcf2:	4601      	mov	r1, r0
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f7f5 f8c9 	bl	8000e8c <__aeabi_fdiv>
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	f7f4 ff0a 	bl	8000b14 <__addsf3>
 800bd00:	4601      	mov	r1, r0
 800bd02:	480c      	ldr	r0, [pc, #48]	; (800bd34 <__ieee754_asinf+0x248>)
 800bd04:	f7f4 ff04 	bl	8000b10 <__aeabi_fsub>
 800bd08:	4601      	mov	r1, r0
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	f7f4 ff00 	bl	8000b10 <__aeabi_fsub>
 800bd10:	4629      	mov	r1, r5
 800bd12:	4604      	mov	r4, r0
 800bd14:	4628      	mov	r0, r5
 800bd16:	f7f4 fefd 	bl	8000b14 <__addsf3>
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	4813      	ldr	r0, [pc, #76]	; (800bd6c <__ieee754_asinf+0x280>)
 800bd1e:	f7f4 fef7 	bl	8000b10 <__aeabi_fsub>
 800bd22:	4601      	mov	r1, r0
 800bd24:	4620      	mov	r0, r4
 800bd26:	f7f4 fef3 	bl	8000b10 <__aeabi_fsub>
 800bd2a:	4601      	mov	r1, r0
 800bd2c:	480f      	ldr	r0, [pc, #60]	; (800bd6c <__ieee754_asinf+0x280>)
 800bd2e:	e770      	b.n	800bc12 <__ieee754_asinf+0x126>
 800bd30:	3fc90fdb 	.word	0x3fc90fdb
 800bd34:	b33bbd2e 	.word	0xb33bbd2e
 800bd38:	7149f2ca 	.word	0x7149f2ca
 800bd3c:	3811ef08 	.word	0x3811ef08
 800bd40:	3a4f7f04 	.word	0x3a4f7f04
 800bd44:	3d241146 	.word	0x3d241146
 800bd48:	3e4e0aa8 	.word	0x3e4e0aa8
 800bd4c:	3ea6b090 	.word	0x3ea6b090
 800bd50:	3e2aaaab 	.word	0x3e2aaaab
 800bd54:	3d9dc62e 	.word	0x3d9dc62e
 800bd58:	3f303361 	.word	0x3f303361
 800bd5c:	4001572d 	.word	0x4001572d
 800bd60:	4019d139 	.word	0x4019d139
 800bd64:	3f799999 	.word	0x3f799999
 800bd68:	333bbd2e 	.word	0x333bbd2e
 800bd6c:	3f490fdb 	.word	0x3f490fdb

0800bd70 <__ieee754_atan2f>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bd76:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	dc05      	bgt.n	800bd8a <__ieee754_atan2f+0x1a>
 800bd7e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800bd82:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bd86:	4607      	mov	r7, r0
 800bd88:	dd04      	ble.n	800bd94 <__ieee754_atan2f+0x24>
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7f4 fec2 	bl	8000b14 <__addsf3>
 800bd90:	4603      	mov	r3, r0
 800bd92:	e024      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800bd94:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800bd98:	d103      	bne.n	800bda2 <__ieee754_atan2f+0x32>
 800bd9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd9e:	f000 b9d5 	b.w	800c14c <atanf>
 800bda2:	178c      	asrs	r4, r1, #30
 800bda4:	f004 0402 	and.w	r4, r4, #2
 800bda8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bdac:	b92a      	cbnz	r2, 800bdba <__ieee754_atan2f+0x4a>
 800bdae:	2c02      	cmp	r4, #2
 800bdb0:	d057      	beq.n	800be62 <__ieee754_atan2f+0xf2>
 800bdb2:	2c03      	cmp	r4, #3
 800bdb4:	d113      	bne.n	800bdde <__ieee754_atan2f+0x6e>
 800bdb6:	4b2d      	ldr	r3, [pc, #180]	; (800be6c <__ieee754_atan2f+0xfc>)
 800bdb8:	e011      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800bdba:	b91e      	cbnz	r6, 800bdc4 <__ieee754_atan2f+0x54>
 800bdbc:	2f00      	cmp	r7, #0
 800bdbe:	da52      	bge.n	800be66 <__ieee754_atan2f+0xf6>
 800bdc0:	4b2b      	ldr	r3, [pc, #172]	; (800be70 <__ieee754_atan2f+0x100>)
 800bdc2:	e00c      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800bdc4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800bdc8:	d11a      	bne.n	800be00 <__ieee754_atan2f+0x90>
 800bdca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bdce:	d10c      	bne.n	800bdea <__ieee754_atan2f+0x7a>
 800bdd0:	2c02      	cmp	r4, #2
 800bdd2:	d006      	beq.n	800bde2 <__ieee754_atan2f+0x72>
 800bdd4:	2c03      	cmp	r4, #3
 800bdd6:	d006      	beq.n	800bde6 <__ieee754_atan2f+0x76>
 800bdd8:	2c01      	cmp	r4, #1
 800bdda:	d140      	bne.n	800be5e <__ieee754_atan2f+0xee>
 800bddc:	4b25      	ldr	r3, [pc, #148]	; (800be74 <__ieee754_atan2f+0x104>)
 800bdde:	4618      	mov	r0, r3
 800bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde2:	4b25      	ldr	r3, [pc, #148]	; (800be78 <__ieee754_atan2f+0x108>)
 800bde4:	e7fb      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800bde6:	4b25      	ldr	r3, [pc, #148]	; (800be7c <__ieee754_atan2f+0x10c>)
 800bde8:	e7f9      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800bdea:	2c02      	cmp	r4, #2
 800bdec:	d039      	beq.n	800be62 <__ieee754_atan2f+0xf2>
 800bdee:	2c03      	cmp	r4, #3
 800bdf0:	d0e1      	beq.n	800bdb6 <__ieee754_atan2f+0x46>
 800bdf2:	2c01      	cmp	r4, #1
 800bdf4:	d102      	bne.n	800bdfc <__ieee754_atan2f+0x8c>
 800bdf6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdfa:	e7f0      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	e7ee      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800be00:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800be04:	d0da      	beq.n	800bdbc <__ieee754_atan2f+0x4c>
 800be06:	1b92      	subs	r2, r2, r6
 800be08:	15d2      	asrs	r2, r2, #23
 800be0a:	2a3c      	cmp	r2, #60	; 0x3c
 800be0c:	dc17      	bgt.n	800be3e <__ieee754_atan2f+0xce>
 800be0e:	2900      	cmp	r1, #0
 800be10:	da01      	bge.n	800be16 <__ieee754_atan2f+0xa6>
 800be12:	323c      	adds	r2, #60	; 0x3c
 800be14:	db15      	blt.n	800be42 <__ieee754_atan2f+0xd2>
 800be16:	4618      	mov	r0, r3
 800be18:	f7f5 f838 	bl	8000e8c <__aeabi_fdiv>
 800be1c:	f000 faa2 	bl	800c364 <fabsf>
 800be20:	f000 f994 	bl	800c14c <atanf>
 800be24:	4603      	mov	r3, r0
 800be26:	2c01      	cmp	r4, #1
 800be28:	d00d      	beq.n	800be46 <__ieee754_atan2f+0xd6>
 800be2a:	2c02      	cmp	r4, #2
 800be2c:	d00e      	beq.n	800be4c <__ieee754_atan2f+0xdc>
 800be2e:	2c00      	cmp	r4, #0
 800be30:	d0d5      	beq.n	800bdde <__ieee754_atan2f+0x6e>
 800be32:	4913      	ldr	r1, [pc, #76]	; (800be80 <__ieee754_atan2f+0x110>)
 800be34:	4618      	mov	r0, r3
 800be36:	f7f4 fe6d 	bl	8000b14 <__addsf3>
 800be3a:	4912      	ldr	r1, [pc, #72]	; (800be84 <__ieee754_atan2f+0x114>)
 800be3c:	e00c      	b.n	800be58 <__ieee754_atan2f+0xe8>
 800be3e:	4b12      	ldr	r3, [pc, #72]	; (800be88 <__ieee754_atan2f+0x118>)
 800be40:	e7f1      	b.n	800be26 <__ieee754_atan2f+0xb6>
 800be42:	2300      	movs	r3, #0
 800be44:	e7ef      	b.n	800be26 <__ieee754_atan2f+0xb6>
 800be46:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be4a:	e7c8      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800be4c:	490c      	ldr	r1, [pc, #48]	; (800be80 <__ieee754_atan2f+0x110>)
 800be4e:	4618      	mov	r0, r3
 800be50:	f7f4 fe60 	bl	8000b14 <__addsf3>
 800be54:	4601      	mov	r1, r0
 800be56:	480b      	ldr	r0, [pc, #44]	; (800be84 <__ieee754_atan2f+0x114>)
 800be58:	f7f4 fe5a 	bl	8000b10 <__aeabi_fsub>
 800be5c:	e798      	b.n	800bd90 <__ieee754_atan2f+0x20>
 800be5e:	4b0b      	ldr	r3, [pc, #44]	; (800be8c <__ieee754_atan2f+0x11c>)
 800be60:	e7bd      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800be62:	4b08      	ldr	r3, [pc, #32]	; (800be84 <__ieee754_atan2f+0x114>)
 800be64:	e7bb      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800be66:	4b08      	ldr	r3, [pc, #32]	; (800be88 <__ieee754_atan2f+0x118>)
 800be68:	e7b9      	b.n	800bdde <__ieee754_atan2f+0x6e>
 800be6a:	bf00      	nop
 800be6c:	c0490fdb 	.word	0xc0490fdb
 800be70:	bfc90fdb 	.word	0xbfc90fdb
 800be74:	bf490fdb 	.word	0xbf490fdb
 800be78:	4016cbe4 	.word	0x4016cbe4
 800be7c:	c016cbe4 	.word	0xc016cbe4
 800be80:	33bbbd2e 	.word	0x33bbbd2e
 800be84:	40490fdb 	.word	0x40490fdb
 800be88:	3fc90fdb 	.word	0x3fc90fdb
 800be8c:	3f490fdb 	.word	0x3f490fdb

0800be90 <__ieee754_sqrtf>:
 800be90:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800be94:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	4603      	mov	r3, r0
 800be9c:	4604      	mov	r4, r0
 800be9e:	d309      	bcc.n	800beb4 <__ieee754_sqrtf+0x24>
 800bea0:	4601      	mov	r1, r0
 800bea2:	f7f4 ff3f 	bl	8000d24 <__aeabi_fmul>
 800bea6:	4601      	mov	r1, r0
 800bea8:	4620      	mov	r0, r4
 800beaa:	f7f4 fe33 	bl	8000b14 <__addsf3>
 800beae:	4604      	mov	r4, r0
 800beb0:	4620      	mov	r0, r4
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
 800beb4:	2a00      	cmp	r2, #0
 800beb6:	d0fb      	beq.n	800beb0 <__ieee754_sqrtf+0x20>
 800beb8:	2800      	cmp	r0, #0
 800beba:	da06      	bge.n	800beca <__ieee754_sqrtf+0x3a>
 800bebc:	4601      	mov	r1, r0
 800bebe:	f7f4 fe27 	bl	8000b10 <__aeabi_fsub>
 800bec2:	4601      	mov	r1, r0
 800bec4:	f7f4 ffe2 	bl	8000e8c <__aeabi_fdiv>
 800bec8:	e7f1      	b.n	800beae <__ieee754_sqrtf+0x1e>
 800beca:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800bece:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800bed2:	d32e      	bcc.n	800bf32 <__ieee754_sqrtf+0xa2>
 800bed4:	3c7f      	subs	r4, #127	; 0x7f
 800bed6:	07e2      	lsls	r2, r4, #31
 800bed8:	f04f 0200 	mov.w	r2, #0
 800bedc:	ea4f 0164 	mov.w	r1, r4, asr #1
 800bee0:	4616      	mov	r6, r2
 800bee2:	f04f 0419 	mov.w	r4, #25
 800bee6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800beea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800beee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bef2:	bf48      	it	mi
 800bef4:	005b      	lslmi	r3, r3, #1
 800bef6:	005b      	lsls	r3, r3, #1
 800bef8:	1835      	adds	r5, r6, r0
 800befa:	429d      	cmp	r5, r3
 800befc:	bfde      	ittt	le
 800befe:	182e      	addle	r6, r5, r0
 800bf00:	1b5b      	suble	r3, r3, r5
 800bf02:	1812      	addle	r2, r2, r0
 800bf04:	3c01      	subs	r4, #1
 800bf06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf0a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800bf0e:	d1f3      	bne.n	800bef8 <__ieee754_sqrtf+0x68>
 800bf10:	b113      	cbz	r3, 800bf18 <__ieee754_sqrtf+0x88>
 800bf12:	3201      	adds	r2, #1
 800bf14:	f022 0201 	bic.w	r2, r2, #1
 800bf18:	1054      	asrs	r4, r2, #1
 800bf1a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800bf1e:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800bf22:	e7c5      	b.n	800beb0 <__ieee754_sqrtf+0x20>
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	3201      	adds	r2, #1
 800bf28:	0219      	lsls	r1, r3, #8
 800bf2a:	d5fb      	bpl.n	800bf24 <__ieee754_sqrtf+0x94>
 800bf2c:	3a01      	subs	r2, #1
 800bf2e:	1aa4      	subs	r4, r4, r2
 800bf30:	e7d0      	b.n	800bed4 <__ieee754_sqrtf+0x44>
 800bf32:	2200      	movs	r2, #0
 800bf34:	e7f8      	b.n	800bf28 <__ieee754_sqrtf+0x98>

0800bf36 <fabs>:
 800bf36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4770      	bx	lr

0800bf3e <finite>:
 800bf3e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800bf42:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800bf46:	0fc0      	lsrs	r0, r0, #31
 800bf48:	4770      	bx	lr

0800bf4a <matherr>:
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	4770      	bx	lr
	...

0800bf50 <nan>:
 800bf50:	2000      	movs	r0, #0
 800bf52:	4901      	ldr	r1, [pc, #4]	; (800bf58 <nan+0x8>)
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	7ff80000 	.word	0x7ff80000

0800bf5c <rint>:
 800bf5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf62:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800bf66:	f1bc 0f13 	cmp.w	ip, #19
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	460d      	mov	r5, r1
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4606      	mov	r6, r0
 800bf72:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800bf76:	dc5a      	bgt.n	800c02e <rint+0xd2>
 800bf78:	f1bc 0f00 	cmp.w	ip, #0
 800bf7c:	da2b      	bge.n	800bfd6 <rint+0x7a>
 800bf7e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bf82:	4302      	orrs	r2, r0
 800bf84:	d023      	beq.n	800bfce <rint+0x72>
 800bf86:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800bf8a:	4302      	orrs	r2, r0
 800bf8c:	4256      	negs	r6, r2
 800bf8e:	4316      	orrs	r6, r2
 800bf90:	0c4b      	lsrs	r3, r1, #17
 800bf92:	0b36      	lsrs	r6, r6, #12
 800bf94:	4934      	ldr	r1, [pc, #208]	; (800c068 <rint+0x10c>)
 800bf96:	045b      	lsls	r3, r3, #17
 800bf98:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800bf9c:	ea46 0503 	orr.w	r5, r6, r3
 800bfa0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	462b      	mov	r3, r5
 800bfa8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bfac:	4620      	mov	r0, r4
 800bfae:	4629      	mov	r1, r5
 800bfb0:	f7f4 f8d4 	bl	800015c <__adddf3>
 800bfb4:	e9cd 0100 	strd	r0, r1, [sp]
 800bfb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	4622      	mov	r2, r4
 800bfc0:	f7f4 f8ca 	bl	8000158 <__aeabi_dsub>
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfca:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	b003      	add	sp, #12
 800bfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd6:	4a25      	ldr	r2, [pc, #148]	; (800c06c <rint+0x110>)
 800bfd8:	fa42 f20c 	asr.w	r2, r2, ip
 800bfdc:	4011      	ands	r1, r2
 800bfde:	4301      	orrs	r1, r0
 800bfe0:	d0f5      	beq.n	800bfce <rint+0x72>
 800bfe2:	0852      	lsrs	r2, r2, #1
 800bfe4:	ea05 0102 	and.w	r1, r5, r2
 800bfe8:	ea50 0601 	orrs.w	r6, r0, r1
 800bfec:	d00c      	beq.n	800c008 <rint+0xac>
 800bfee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bff2:	f1bc 0f13 	cmp.w	ip, #19
 800bff6:	bf0c      	ite	eq
 800bff8:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800bffc:	2600      	movne	r6, #0
 800bffe:	ea25 0202 	bic.w	r2, r5, r2
 800c002:	fa43 f30c 	asr.w	r3, r3, ip
 800c006:	4313      	orrs	r3, r2
 800c008:	4917      	ldr	r1, [pc, #92]	; (800c068 <rint+0x10c>)
 800c00a:	4632      	mov	r2, r6
 800c00c:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800c010:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c014:	4620      	mov	r0, r4
 800c016:	4629      	mov	r1, r5
 800c018:	f7f4 f8a0 	bl	800015c <__adddf3>
 800c01c:	e9cd 0100 	strd	r0, r1, [sp]
 800c020:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c024:	4622      	mov	r2, r4
 800c026:	462b      	mov	r3, r5
 800c028:	f7f4 f896 	bl	8000158 <__aeabi_dsub>
 800c02c:	e008      	b.n	800c040 <rint+0xe4>
 800c02e:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800c032:	dd08      	ble.n	800c046 <rint+0xea>
 800c034:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800c038:	d1c9      	bne.n	800bfce <rint+0x72>
 800c03a:	4602      	mov	r2, r0
 800c03c:	f7f4 f88e 	bl	800015c <__adddf3>
 800c040:	4604      	mov	r4, r0
 800c042:	460d      	mov	r5, r1
 800c044:	e7c3      	b.n	800bfce <rint+0x72>
 800c046:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800c04a:	f04f 32ff 	mov.w	r2, #4294967295
 800c04e:	40ca      	lsrs	r2, r1
 800c050:	4210      	tst	r0, r2
 800c052:	d0bc      	beq.n	800bfce <rint+0x72>
 800c054:	0852      	lsrs	r2, r2, #1
 800c056:	4210      	tst	r0, r2
 800c058:	bf1f      	itttt	ne
 800c05a:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800c05e:	ea20 0202 	bicne.w	r2, r0, r2
 800c062:	410e      	asrne	r6, r1
 800c064:	4316      	orrne	r6, r2
 800c066:	e7cf      	b.n	800c008 <rint+0xac>
 800c068:	0800c670 	.word	0x0800c670
 800c06c:	000fffff 	.word	0x000fffff

0800c070 <scalbn>:
 800c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c072:	4616      	mov	r6, r2
 800c074:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c078:	4604      	mov	r4, r0
 800c07a:	460d      	mov	r5, r1
 800c07c:	460b      	mov	r3, r1
 800c07e:	b982      	cbnz	r2, 800c0a2 <scalbn+0x32>
 800c080:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c084:	4303      	orrs	r3, r0
 800c086:	d034      	beq.n	800c0f2 <scalbn+0x82>
 800c088:	4b2d      	ldr	r3, [pc, #180]	; (800c140 <scalbn+0xd0>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	f7f4 fa1c 	bl	80004c8 <__aeabi_dmul>
 800c090:	4b2c      	ldr	r3, [pc, #176]	; (800c144 <scalbn+0xd4>)
 800c092:	4604      	mov	r4, r0
 800c094:	429e      	cmp	r6, r3
 800c096:	460d      	mov	r5, r1
 800c098:	da0d      	bge.n	800c0b6 <scalbn+0x46>
 800c09a:	a325      	add	r3, pc, #148	; (adr r3, 800c130 <scalbn+0xc0>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	e01c      	b.n	800c0dc <scalbn+0x6c>
 800c0a2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c0a6:	42ba      	cmp	r2, r7
 800c0a8:	d109      	bne.n	800c0be <scalbn+0x4e>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	f7f4 f856 	bl	800015c <__adddf3>
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	460d      	mov	r5, r1
 800c0b4:	e01d      	b.n	800c0f2 <scalbn+0x82>
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c0bc:	3a36      	subs	r2, #54	; 0x36
 800c0be:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c0c2:	4432      	add	r2, r6
 800c0c4:	428a      	cmp	r2, r1
 800c0c6:	dd0c      	ble.n	800c0e2 <scalbn+0x72>
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	462b      	mov	r3, r5
 800c0cc:	a11a      	add	r1, pc, #104	; (adr r1, 800c138 <scalbn+0xc8>)
 800c0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0d2:	f000 f94a 	bl	800c36a <copysign>
 800c0d6:	a318      	add	r3, pc, #96	; (adr r3, 800c138 <scalbn+0xc8>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	f7f4 f9f4 	bl	80004c8 <__aeabi_dmul>
 800c0e0:	e7e6      	b.n	800c0b0 <scalbn+0x40>
 800c0e2:	2a00      	cmp	r2, #0
 800c0e4:	dd08      	ble.n	800c0f8 <scalbn+0x88>
 800c0e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c0ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c0ee:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c0fc:	da0b      	bge.n	800c116 <scalbn+0xa6>
 800c0fe:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c102:	429e      	cmp	r6, r3
 800c104:	4622      	mov	r2, r4
 800c106:	462b      	mov	r3, r5
 800c108:	dce0      	bgt.n	800c0cc <scalbn+0x5c>
 800c10a:	a109      	add	r1, pc, #36	; (adr r1, 800c130 <scalbn+0xc0>)
 800c10c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c110:	f000 f92b 	bl	800c36a <copysign>
 800c114:	e7c1      	b.n	800c09a <scalbn+0x2a>
 800c116:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c11a:	3236      	adds	r2, #54	; 0x36
 800c11c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c120:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c124:	4620      	mov	r0, r4
 800c126:	4629      	mov	r1, r5
 800c128:	2200      	movs	r2, #0
 800c12a:	4b07      	ldr	r3, [pc, #28]	; (800c148 <scalbn+0xd8>)
 800c12c:	e7d6      	b.n	800c0dc <scalbn+0x6c>
 800c12e:	bf00      	nop
 800c130:	c2f8f359 	.word	0xc2f8f359
 800c134:	01a56e1f 	.word	0x01a56e1f
 800c138:	8800759c 	.word	0x8800759c
 800c13c:	7e37e43c 	.word	0x7e37e43c
 800c140:	43500000 	.word	0x43500000
 800c144:	ffff3cb0 	.word	0xffff3cb0
 800c148:	3c900000 	.word	0x3c900000

0800c14c <atanf>:
 800c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c150:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c154:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c158:	4604      	mov	r4, r0
 800c15a:	4607      	mov	r7, r0
 800c15c:	db0e      	blt.n	800c17c <atanf+0x30>
 800c15e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c162:	dd04      	ble.n	800c16e <atanf+0x22>
 800c164:	4601      	mov	r1, r0
 800c166:	f7f4 fcd5 	bl	8000b14 <__addsf3>
 800c16a:	4604      	mov	r4, r0
 800c16c:	e003      	b.n	800c176 <atanf+0x2a>
 800c16e:	2800      	cmp	r0, #0
 800c170:	f340 80cd 	ble.w	800c30e <atanf+0x1c2>
 800c174:	4c67      	ldr	r4, [pc, #412]	; (800c314 <atanf+0x1c8>)
 800c176:	4620      	mov	r0, r4
 800c178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c17c:	4b66      	ldr	r3, [pc, #408]	; (800c318 <atanf+0x1cc>)
 800c17e:	429d      	cmp	r5, r3
 800c180:	dc0e      	bgt.n	800c1a0 <atanf+0x54>
 800c182:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c186:	da08      	bge.n	800c19a <atanf+0x4e>
 800c188:	4964      	ldr	r1, [pc, #400]	; (800c31c <atanf+0x1d0>)
 800c18a:	f7f4 fcc3 	bl	8000b14 <__addsf3>
 800c18e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c192:	f7f4 ff83 	bl	800109c <__aeabi_fcmpgt>
 800c196:	2800      	cmp	r0, #0
 800c198:	d1ed      	bne.n	800c176 <atanf+0x2a>
 800c19a:	f04f 36ff 	mov.w	r6, #4294967295
 800c19e:	e01c      	b.n	800c1da <atanf+0x8e>
 800c1a0:	f000 f8e0 	bl	800c364 <fabsf>
 800c1a4:	4b5e      	ldr	r3, [pc, #376]	; (800c320 <atanf+0x1d4>)
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	429d      	cmp	r5, r3
 800c1aa:	dc7c      	bgt.n	800c2a6 <atanf+0x15a>
 800c1ac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c1b0:	429d      	cmp	r5, r3
 800c1b2:	dc67      	bgt.n	800c284 <atanf+0x138>
 800c1b4:	4601      	mov	r1, r0
 800c1b6:	f7f4 fcad 	bl	8000b14 <__addsf3>
 800c1ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c1be:	f7f4 fca7 	bl	8000b10 <__aeabi_fsub>
 800c1c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f7f4 fca3 	bl	8000b14 <__addsf3>
 800c1ce:	4601      	mov	r1, r0
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f7f4 fe5b 	bl	8000e8c <__aeabi_fdiv>
 800c1d6:	2600      	movs	r6, #0
 800c1d8:	4604      	mov	r4, r0
 800c1da:	4621      	mov	r1, r4
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f7f4 fda1 	bl	8000d24 <__aeabi_fmul>
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	4680      	mov	r8, r0
 800c1e6:	f7f4 fd9d 	bl	8000d24 <__aeabi_fmul>
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	494d      	ldr	r1, [pc, #308]	; (800c324 <atanf+0x1d8>)
 800c1ee:	f7f4 fd99 	bl	8000d24 <__aeabi_fmul>
 800c1f2:	494d      	ldr	r1, [pc, #308]	; (800c328 <atanf+0x1dc>)
 800c1f4:	f7f4 fc8e 	bl	8000b14 <__addsf3>
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f7f4 fd93 	bl	8000d24 <__aeabi_fmul>
 800c1fe:	494b      	ldr	r1, [pc, #300]	; (800c32c <atanf+0x1e0>)
 800c200:	f7f4 fc88 	bl	8000b14 <__addsf3>
 800c204:	4629      	mov	r1, r5
 800c206:	f7f4 fd8d 	bl	8000d24 <__aeabi_fmul>
 800c20a:	4949      	ldr	r1, [pc, #292]	; (800c330 <atanf+0x1e4>)
 800c20c:	f7f4 fc82 	bl	8000b14 <__addsf3>
 800c210:	4629      	mov	r1, r5
 800c212:	f7f4 fd87 	bl	8000d24 <__aeabi_fmul>
 800c216:	4947      	ldr	r1, [pc, #284]	; (800c334 <atanf+0x1e8>)
 800c218:	f7f4 fc7c 	bl	8000b14 <__addsf3>
 800c21c:	4629      	mov	r1, r5
 800c21e:	f7f4 fd81 	bl	8000d24 <__aeabi_fmul>
 800c222:	4945      	ldr	r1, [pc, #276]	; (800c338 <atanf+0x1ec>)
 800c224:	f7f4 fc76 	bl	8000b14 <__addsf3>
 800c228:	4641      	mov	r1, r8
 800c22a:	f7f4 fd7b 	bl	8000d24 <__aeabi_fmul>
 800c22e:	4943      	ldr	r1, [pc, #268]	; (800c33c <atanf+0x1f0>)
 800c230:	4680      	mov	r8, r0
 800c232:	4628      	mov	r0, r5
 800c234:	f7f4 fd76 	bl	8000d24 <__aeabi_fmul>
 800c238:	4941      	ldr	r1, [pc, #260]	; (800c340 <atanf+0x1f4>)
 800c23a:	f7f4 fc69 	bl	8000b10 <__aeabi_fsub>
 800c23e:	4629      	mov	r1, r5
 800c240:	f7f4 fd70 	bl	8000d24 <__aeabi_fmul>
 800c244:	493f      	ldr	r1, [pc, #252]	; (800c344 <atanf+0x1f8>)
 800c246:	f7f4 fc63 	bl	8000b10 <__aeabi_fsub>
 800c24a:	4629      	mov	r1, r5
 800c24c:	f7f4 fd6a 	bl	8000d24 <__aeabi_fmul>
 800c250:	493d      	ldr	r1, [pc, #244]	; (800c348 <atanf+0x1fc>)
 800c252:	f7f4 fc5d 	bl	8000b10 <__aeabi_fsub>
 800c256:	4629      	mov	r1, r5
 800c258:	f7f4 fd64 	bl	8000d24 <__aeabi_fmul>
 800c25c:	493b      	ldr	r1, [pc, #236]	; (800c34c <atanf+0x200>)
 800c25e:	f7f4 fc57 	bl	8000b10 <__aeabi_fsub>
 800c262:	4629      	mov	r1, r5
 800c264:	f7f4 fd5e 	bl	8000d24 <__aeabi_fmul>
 800c268:	4601      	mov	r1, r0
 800c26a:	4640      	mov	r0, r8
 800c26c:	f7f4 fc52 	bl	8000b14 <__addsf3>
 800c270:	4621      	mov	r1, r4
 800c272:	f7f4 fd57 	bl	8000d24 <__aeabi_fmul>
 800c276:	1c73      	adds	r3, r6, #1
 800c278:	4601      	mov	r1, r0
 800c27a:	d133      	bne.n	800c2e4 <atanf+0x198>
 800c27c:	4620      	mov	r0, r4
 800c27e:	f7f4 fc47 	bl	8000b10 <__aeabi_fsub>
 800c282:	e772      	b.n	800c16a <atanf+0x1e>
 800c284:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c288:	f7f4 fc42 	bl	8000b10 <__aeabi_fsub>
 800c28c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c290:	4605      	mov	r5, r0
 800c292:	4620      	mov	r0, r4
 800c294:	f7f4 fc3e 	bl	8000b14 <__addsf3>
 800c298:	4601      	mov	r1, r0
 800c29a:	4628      	mov	r0, r5
 800c29c:	f7f4 fdf6 	bl	8000e8c <__aeabi_fdiv>
 800c2a0:	2601      	movs	r6, #1
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	e799      	b.n	800c1da <atanf+0x8e>
 800c2a6:	4b2a      	ldr	r3, [pc, #168]	; (800c350 <atanf+0x204>)
 800c2a8:	429d      	cmp	r5, r3
 800c2aa:	dc14      	bgt.n	800c2d6 <atanf+0x18a>
 800c2ac:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c2b0:	f7f4 fc2e 	bl	8000b10 <__aeabi_fsub>
 800c2b4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f7f4 fd32 	bl	8000d24 <__aeabi_fmul>
 800c2c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c2c4:	f7f4 fc26 	bl	8000b14 <__addsf3>
 800c2c8:	4601      	mov	r1, r0
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f7f4 fdde 	bl	8000e8c <__aeabi_fdiv>
 800c2d0:	2602      	movs	r6, #2
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	e781      	b.n	800c1da <atanf+0x8e>
 800c2d6:	4601      	mov	r1, r0
 800c2d8:	481e      	ldr	r0, [pc, #120]	; (800c354 <atanf+0x208>)
 800c2da:	f7f4 fdd7 	bl	8000e8c <__aeabi_fdiv>
 800c2de:	2603      	movs	r6, #3
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	e77a      	b.n	800c1da <atanf+0x8e>
 800c2e4:	4b1c      	ldr	r3, [pc, #112]	; (800c358 <atanf+0x20c>)
 800c2e6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c2ea:	f7f4 fc11 	bl	8000b10 <__aeabi_fsub>
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	f7f4 fc0e 	bl	8000b10 <__aeabi_fsub>
 800c2f4:	4b19      	ldr	r3, [pc, #100]	; (800c35c <atanf+0x210>)
 800c2f6:	4601      	mov	r1, r0
 800c2f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c2fc:	f7f4 fc08 	bl	8000b10 <__aeabi_fsub>
 800c300:	2f00      	cmp	r7, #0
 800c302:	4604      	mov	r4, r0
 800c304:	f6bf af37 	bge.w	800c176 <atanf+0x2a>
 800c308:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800c30c:	e733      	b.n	800c176 <atanf+0x2a>
 800c30e:	4c14      	ldr	r4, [pc, #80]	; (800c360 <atanf+0x214>)
 800c310:	e731      	b.n	800c176 <atanf+0x2a>
 800c312:	bf00      	nop
 800c314:	3fc90fdb 	.word	0x3fc90fdb
 800c318:	3edfffff 	.word	0x3edfffff
 800c31c:	7149f2ca 	.word	0x7149f2ca
 800c320:	3f97ffff 	.word	0x3f97ffff
 800c324:	3c8569d7 	.word	0x3c8569d7
 800c328:	3d4bda59 	.word	0x3d4bda59
 800c32c:	3d886b35 	.word	0x3d886b35
 800c330:	3dba2e6e 	.word	0x3dba2e6e
 800c334:	3e124925 	.word	0x3e124925
 800c338:	3eaaaaab 	.word	0x3eaaaaab
 800c33c:	bd15a221 	.word	0xbd15a221
 800c340:	3d6ef16b 	.word	0x3d6ef16b
 800c344:	3d9d8795 	.word	0x3d9d8795
 800c348:	3de38e38 	.word	0x3de38e38
 800c34c:	3e4ccccd 	.word	0x3e4ccccd
 800c350:	401bffff 	.word	0x401bffff
 800c354:	bf800000 	.word	0xbf800000
 800c358:	0800c690 	.word	0x0800c690
 800c35c:	0800c680 	.word	0x0800c680
 800c360:	bfc90fdb 	.word	0xbfc90fdb

0800c364 <fabsf>:
 800c364:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c368:	4770      	bx	lr

0800c36a <copysign>:
 800c36a:	b530      	push	{r4, r5, lr}
 800c36c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c374:	ea42 0503 	orr.w	r5, r2, r3
 800c378:	4629      	mov	r1, r5
 800c37a:	bd30      	pop	{r4, r5, pc}

0800c37c <_init>:
 800c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37e:	bf00      	nop
 800c380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c382:	bc08      	pop	{r3}
 800c384:	469e      	mov	lr, r3
 800c386:	4770      	bx	lr

0800c388 <_fini>:
 800c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38a:	bf00      	nop
 800c38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c38e:	bc08      	pop	{r3}
 800c390:	469e      	mov	lr, r3
 800c392:	4770      	bx	lr
