
Test_boardC21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c31c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800c430  0800c430  0001c430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c738  0800c738  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c738  0800c738  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c738  0800c738  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c738  0800c738  0001c738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c73c  0800c73c  0001c73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800c740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200000a8  0800c7e8  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800c7e8  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130b6  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cdf  00000000  00000000  00033187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00035e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  00037238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190a5  00000000  00000000  000384f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f14  00000000  00000000  0005159d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000915b4  00000000  00000000  000684b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9a65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f0c  00000000  00000000  000f9ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c414 	.word	0x0800c414

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	0800c414 	.word	0x0800c414

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2iz>:
 80010dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30f      	bcc.n	8001106 <__aeabi_f2iz+0x2a>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d90d      	bls.n	800110c <__aeabi_f2iz+0x30>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	bf18      	it	ne
 8001102:	4240      	negne	r0, r0
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2iz+0x3a>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d105      	bne.n	8001122 <__aeabi_f2iz+0x46>
 8001116:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800111a:	bf08      	it	eq
 800111c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr

08001128 <__aeabi_f2uiz>:
 8001128:	0042      	lsls	r2, r0, #1
 800112a:	d20e      	bcs.n	800114a <__aeabi_f2uiz+0x22>
 800112c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001130:	d30b      	bcc.n	800114a <__aeabi_f2uiz+0x22>
 8001132:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001136:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800113a:	d409      	bmi.n	8001150 <__aeabi_f2uiz+0x28>
 800113c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	4770      	bx	lr
 800114a:	f04f 0000 	mov.w	r0, #0
 800114e:	4770      	bx	lr
 8001150:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001154:	d101      	bne.n	800115a <__aeabi_f2uiz+0x32>
 8001156:	0242      	lsls	r2, r0, #9
 8001158:	d102      	bne.n	8001160 <__aeabi_f2uiz+0x38>
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	4770      	bx	lr
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_Init+0x28>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_Init+0x28>)
 8001172:	f043 0310 	orr.w	r3, r3, #16
 8001176:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f947 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f008 ffea 	bl	800a15c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f95f 	bl	8001476 <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f927 	bl	8001422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000040 	.word	0x20000040
 80011ec:	20000004 	.word	0x20000004
 80011f0:	20000000 	.word	0x20000000

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <HAL_IncTick+0x20>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000004 	.word	0x20000004
 8001214:	200000c4 	.word	0x200000c4

08001218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	200000c4 	.word	0x200000c4

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff0 	bl	8001218 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffe0 	bl	8001218 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000004 	.word	0x20000004

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4906      	ldr	r1, [pc, #24]	; (800130c <__NVIC_EnableIRQ+0x34>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ff90 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff2d 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff42 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff90 	bl	8001364 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5f 	bl	8001310 <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff35 	bl	80012d8 <__NVIC_EnableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffa2 	bl	80013c8 <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e043      	b.n	800152e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_DMA_Init+0xa8>)
 80014ae:	4413      	add	r3, r2
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_DMA_Init+0xac>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	009a      	lsls	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_DMA_Init+0xb0>)
 80014c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	bffdfff8 	.word	0xbffdfff8
 800153c:	cccccccd 	.word	0xcccccccd
 8001540:	40020000 	.word	0x40020000

08001544 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_DMA_Start_IT+0x20>
 8001560:	2302      	movs	r3, #2
 8001562:	e04a      	b.n	80015fa <HAL_DMA_Start_IT+0xb6>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001572:	2b01      	cmp	r3, #1
 8001574:	d13a      	bne.n	80015ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 f9e8 	bl	8001970 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 020e 	orr.w	r2, r2, #14
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e00f      	b.n	80015da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0204 	bic.w	r2, r2, #4
 80015c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 020a 	orr.w	r2, r2, #10
 80015d8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e005      	b.n	80015f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015f4:	2302      	movs	r3, #2
 80015f6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001614:	2b02      	cmp	r3, #2
 8001616:	d008      	beq.n	800162a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2204      	movs	r2, #4
 800161c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e020      	b.n	800166c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 020e 	bic.w	r2, r2, #14
 8001638:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800168a:	2b02      	cmp	r3, #2
 800168c:	d005      	beq.n	800169a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2204      	movs	r2, #4
 8001692:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e051      	b.n	800173e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 020e 	bic.w	r2, r2, #14
 80016a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a22      	ldr	r2, [pc, #136]	; (8001748 <HAL_DMA_Abort_IT+0xd0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d029      	beq.n	8001718 <HAL_DMA_Abort_IT+0xa0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a20      	ldr	r2, [pc, #128]	; (800174c <HAL_DMA_Abort_IT+0xd4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d022      	beq.n	8001714 <HAL_DMA_Abort_IT+0x9c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_DMA_Abort_IT+0xd8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d01a      	beq.n	800170e <HAL_DMA_Abort_IT+0x96>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <HAL_DMA_Abort_IT+0xdc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d012      	beq.n	8001708 <HAL_DMA_Abort_IT+0x90>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_DMA_Abort_IT+0xe0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d00a      	beq.n	8001702 <HAL_DMA_Abort_IT+0x8a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1a      	ldr	r2, [pc, #104]	; (800175c <HAL_DMA_Abort_IT+0xe4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d102      	bne.n	80016fc <HAL_DMA_Abort_IT+0x84>
 80016f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016fa:	e00e      	b.n	800171a <HAL_DMA_Abort_IT+0xa2>
 80016fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001700:	e00b      	b.n	800171a <HAL_DMA_Abort_IT+0xa2>
 8001702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001706:	e008      	b.n	800171a <HAL_DMA_Abort_IT+0xa2>
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	e005      	b.n	800171a <HAL_DMA_Abort_IT+0xa2>
 800170e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001712:	e002      	b.n	800171a <HAL_DMA_Abort_IT+0xa2>
 8001714:	2310      	movs	r3, #16
 8001716:	e000      	b.n	800171a <HAL_DMA_Abort_IT+0xa2>
 8001718:	2301      	movs	r3, #1
 800171a:	4a11      	ldr	r2, [pc, #68]	; (8001760 <HAL_DMA_Abort_IT+0xe8>)
 800171c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4798      	blx	r3
    } 
  }
  return status;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40020008 	.word	0x40020008
 800174c:	4002001c 	.word	0x4002001c
 8001750:	40020030 	.word	0x40020030
 8001754:	40020044 	.word	0x40020044
 8001758:	40020058 	.word	0x40020058
 800175c:	4002006c 	.word	0x4002006c
 8001760:	40020000 	.word	0x40020000

08001764 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	2204      	movs	r2, #4
 8001782:	409a      	lsls	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d04f      	beq.n	800182c <HAL_DMA_IRQHandler+0xc8>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d04a      	beq.n	800182c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0320 	and.w	r3, r3, #32
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0204 	bic.w	r2, r2, #4
 80017b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a66      	ldr	r2, [pc, #408]	; (8001954 <HAL_DMA_IRQHandler+0x1f0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d029      	beq.n	8001812 <HAL_DMA_IRQHandler+0xae>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a65      	ldr	r2, [pc, #404]	; (8001958 <HAL_DMA_IRQHandler+0x1f4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d022      	beq.n	800180e <HAL_DMA_IRQHandler+0xaa>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a63      	ldr	r2, [pc, #396]	; (800195c <HAL_DMA_IRQHandler+0x1f8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01a      	beq.n	8001808 <HAL_DMA_IRQHandler+0xa4>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a62      	ldr	r2, [pc, #392]	; (8001960 <HAL_DMA_IRQHandler+0x1fc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d012      	beq.n	8001802 <HAL_DMA_IRQHandler+0x9e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a60      	ldr	r2, [pc, #384]	; (8001964 <HAL_DMA_IRQHandler+0x200>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00a      	beq.n	80017fc <HAL_DMA_IRQHandler+0x98>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a5f      	ldr	r2, [pc, #380]	; (8001968 <HAL_DMA_IRQHandler+0x204>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d102      	bne.n	80017f6 <HAL_DMA_IRQHandler+0x92>
 80017f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f4:	e00e      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 80017f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017fa:	e00b      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 80017fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001800:	e008      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 8001802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001806:	e005      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 8001808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180c:	e002      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 800180e:	2340      	movs	r3, #64	; 0x40
 8001810:	e000      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 8001812:	2304      	movs	r3, #4
 8001814:	4a55      	ldr	r2, [pc, #340]	; (800196c <HAL_DMA_IRQHandler+0x208>)
 8001816:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 8094 	beq.w	800194a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800182a:	e08e      	b.n	800194a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2202      	movs	r2, #2
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d056      	beq.n	80018ea <HAL_DMA_IRQHandler+0x186>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d051      	beq.n	80018ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10b      	bne.n	800186c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 020a 	bic.w	r2, r2, #10
 8001862:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a38      	ldr	r2, [pc, #224]	; (8001954 <HAL_DMA_IRQHandler+0x1f0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d029      	beq.n	80018ca <HAL_DMA_IRQHandler+0x166>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a37      	ldr	r2, [pc, #220]	; (8001958 <HAL_DMA_IRQHandler+0x1f4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d022      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x162>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a35      	ldr	r2, [pc, #212]	; (800195c <HAL_DMA_IRQHandler+0x1f8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01a      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x15c>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a34      	ldr	r2, [pc, #208]	; (8001960 <HAL_DMA_IRQHandler+0x1fc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d012      	beq.n	80018ba <HAL_DMA_IRQHandler+0x156>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a32      	ldr	r2, [pc, #200]	; (8001964 <HAL_DMA_IRQHandler+0x200>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00a      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x150>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a31      	ldr	r2, [pc, #196]	; (8001968 <HAL_DMA_IRQHandler+0x204>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d102      	bne.n	80018ae <HAL_DMA_IRQHandler+0x14a>
 80018a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018ac:	e00e      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b2:	e00b      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b8:	e008      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018be:	e005      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c4:	e002      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018c6:	2320      	movs	r3, #32
 80018c8:	e000      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018ca:	2302      	movs	r3, #2
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_DMA_IRQHandler+0x208>)
 80018ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d034      	beq.n	800194a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018e8:	e02f      	b.n	800194a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2208      	movs	r2, #8
 80018f0:	409a      	lsls	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d028      	beq.n	800194c <HAL_DMA_IRQHandler+0x1e8>
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020e 	bic.w	r2, r2, #14
 8001912:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
    }
  }
  return;
 800194a:	bf00      	nop
 800194c:	bf00      	nop
}
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40020008 	.word	0x40020008
 8001958:	4002001c 	.word	0x4002001c
 800195c:	40020030 	.word	0x40020030
 8001960:	40020044 	.word	0x40020044
 8001964:	40020058 	.word	0x40020058
 8001968:	4002006c 	.word	0x4002006c
 800196c:	40020000 	.word	0x40020000

08001970 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d108      	bne.n	80019b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019ae:	e007      	b.n	80019c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	60da      	str	r2, [r3, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b08b      	sub	sp, #44	; 0x2c
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e169      	b.n	8001cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e0:	2201      	movs	r2, #1
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f040 8158 	bne.w	8001cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4a9a      	ldr	r2, [pc, #616]	; (8001c6c <HAL_GPIO_Init+0x2a0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d05e      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a08:	4a98      	ldr	r2, [pc, #608]	; (8001c6c <HAL_GPIO_Init+0x2a0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d875      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a0e:	4a98      	ldr	r2, [pc, #608]	; (8001c70 <HAL_GPIO_Init+0x2a4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d058      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a14:	4a96      	ldr	r2, [pc, #600]	; (8001c70 <HAL_GPIO_Init+0x2a4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d86f      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a1a:	4a96      	ldr	r2, [pc, #600]	; (8001c74 <HAL_GPIO_Init+0x2a8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d052      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a20:	4a94      	ldr	r2, [pc, #592]	; (8001c74 <HAL_GPIO_Init+0x2a8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d869      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a26:	4a94      	ldr	r2, [pc, #592]	; (8001c78 <HAL_GPIO_Init+0x2ac>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d04c      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a2c:	4a92      	ldr	r2, [pc, #584]	; (8001c78 <HAL_GPIO_Init+0x2ac>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d863      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a32:	4a92      	ldr	r2, [pc, #584]	; (8001c7c <HAL_GPIO_Init+0x2b0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d046      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a38:	4a90      	ldr	r2, [pc, #576]	; (8001c7c <HAL_GPIO_Init+0x2b0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d85d      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d82a      	bhi.n	8001a98 <HAL_GPIO_Init+0xcc>
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d859      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a46:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <HAL_GPIO_Init+0x80>)
 8001a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4c:	08001ac7 	.word	0x08001ac7
 8001a50:	08001aa1 	.word	0x08001aa1
 8001a54:	08001ab3 	.word	0x08001ab3
 8001a58:	08001af5 	.word	0x08001af5
 8001a5c:	08001afb 	.word	0x08001afb
 8001a60:	08001afb 	.word	0x08001afb
 8001a64:	08001afb 	.word	0x08001afb
 8001a68:	08001afb 	.word	0x08001afb
 8001a6c:	08001afb 	.word	0x08001afb
 8001a70:	08001afb 	.word	0x08001afb
 8001a74:	08001afb 	.word	0x08001afb
 8001a78:	08001afb 	.word	0x08001afb
 8001a7c:	08001afb 	.word	0x08001afb
 8001a80:	08001afb 	.word	0x08001afb
 8001a84:	08001afb 	.word	0x08001afb
 8001a88:	08001afb 	.word	0x08001afb
 8001a8c:	08001afb 	.word	0x08001afb
 8001a90:	08001aa9 	.word	0x08001aa9
 8001a94:	08001abd 	.word	0x08001abd
 8001a98:	4a79      	ldr	r2, [pc, #484]	; (8001c80 <HAL_GPIO_Init+0x2b4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a9e:	e02c      	b.n	8001afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	623b      	str	r3, [r7, #32]
          break;
 8001aa6:	e029      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	3304      	adds	r3, #4
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e024      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e01f      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	623b      	str	r3, [r7, #32]
          break;
 8001ac4:	e01a      	b.n	8001afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e013      	b.n	8001afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	611a      	str	r2, [r3, #16]
          break;
 8001ae6:	e009      	b.n	8001afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	615a      	str	r2, [r3, #20]
          break;
 8001af2:	e003      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
          break;
 8001af8:	e000      	b.n	8001afc <HAL_GPIO_Init+0x130>
          break;
 8001afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d801      	bhi.n	8001b06 <HAL_GPIO_Init+0x13a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	e001      	b.n	8001b0a <HAL_GPIO_Init+0x13e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
 8001b10:	d802      	bhi.n	8001b18 <HAL_GPIO_Init+0x14c>
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_Init+0x152>
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3b08      	subs	r3, #8
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	210f      	movs	r1, #15
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	6a39      	ldr	r1, [r7, #32]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80b1 	beq.w	8001cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a4c      	ldr	r2, [pc, #304]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b64:	4a48      	ldr	r2, [pc, #288]	; (8001c88 <HAL_GPIO_Init+0x2bc>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a40      	ldr	r2, [pc, #256]	; (8001c8c <HAL_GPIO_Init+0x2c0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_GPIO_Init+0x1ec>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3f      	ldr	r2, [pc, #252]	; (8001c90 <HAL_GPIO_Init+0x2c4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00d      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	; (8001c94 <HAL_GPIO_Init+0x2c8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d007      	beq.n	8001bb0 <HAL_GPIO_Init+0x1e4>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a3d      	ldr	r2, [pc, #244]	; (8001c98 <HAL_GPIO_Init+0x2cc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_GPIO_Init+0x1e0>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e004      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	f002 0203 	and.w	r2, r2, #3
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	4093      	lsls	r3, r2
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bca:	492f      	ldr	r1, [pc, #188]	; (8001c88 <HAL_GPIO_Init+0x2bc>)
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	492c      	ldr	r1, [pc, #176]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4928      	ldr	r1, [pc, #160]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4922      	ldr	r1, [pc, #136]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	491e      	ldr	r1, [pc, #120]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4918      	ldr	r1, [pc, #96]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4914      	ldr	r1, [pc, #80]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d021      	beq.n	8001ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60cb      	str	r3, [r1, #12]
 8001c68:	e021      	b.n	8001cae <HAL_GPIO_Init+0x2e2>
 8001c6a:	bf00      	nop
 8001c6c:	10320000 	.word	0x10320000
 8001c70:	10310000 	.word	0x10310000
 8001c74:	10220000 	.word	0x10220000
 8001c78:	10210000 	.word	0x10210000
 8001c7c:	10120000 	.word	0x10120000
 8001c80:	10110000 	.word	0x10110000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	40010c00 	.word	0x40010c00
 8001c94:	40011000 	.word	0x40011000
 8001c98:	40011400 	.word	0x40011400
 8001c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4909      	ldr	r1, [pc, #36]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f47f ae8e 	bne.w	80019e0 <HAL_GPIO_Init+0x14>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	372c      	adds	r7, #44	; 0x2c
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43d9      	mvns	r1, r3
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	400b      	ands	r3, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e12b      	b.n	8001fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f008 fa2e 	bl	800a1c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	; 0x24
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d9c:	f001 fba0 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8001da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a81      	ldr	r2, [pc, #516]	; (8001fac <HAL_I2C_Init+0x274>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d807      	bhi.n	8001dbc <HAL_I2C_Init+0x84>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <HAL_I2C_Init+0x278>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bf94      	ite	ls
 8001db4:	2301      	movls	r3, #1
 8001db6:	2300      	movhi	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	e006      	b.n	8001dca <HAL_I2C_Init+0x92>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a7d      	ldr	r2, [pc, #500]	; (8001fb4 <HAL_I2C_Init+0x27c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	bf94      	ite	ls
 8001dc4:	2301      	movls	r3, #1
 8001dc6:	2300      	movhi	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0e7      	b.n	8001fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4a78      	ldr	r2, [pc, #480]	; (8001fb8 <HAL_I2C_Init+0x280>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0c9b      	lsrs	r3, r3, #18
 8001ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a6a      	ldr	r2, [pc, #424]	; (8001fac <HAL_I2C_Init+0x274>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d802      	bhi.n	8001e0c <HAL_I2C_Init+0xd4>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	e009      	b.n	8001e20 <HAL_I2C_Init+0xe8>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	4a69      	ldr	r2, [pc, #420]	; (8001fbc <HAL_I2C_Init+0x284>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	3301      	adds	r3, #1
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	495c      	ldr	r1, [pc, #368]	; (8001fac <HAL_I2C_Init+0x274>)
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	d819      	bhi.n	8001e74 <HAL_I2C_Init+0x13c>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1e59      	subs	r1, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e4e:	1c59      	adds	r1, r3, #1
 8001e50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e54:	400b      	ands	r3, r1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_I2C_Init+0x138>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1e59      	subs	r1, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6e:	e051      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001e70:	2304      	movs	r3, #4
 8001e72:	e04f      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d111      	bne.n	8001ea0 <HAL_I2C_Init+0x168>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	440b      	add	r3, r1
 8001e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	e012      	b.n	8001ec6 <HAL_I2C_Init+0x18e>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e58      	subs	r0, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	0099      	lsls	r1, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Init+0x196>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e022      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_I2C_Init+0x1bc>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e58      	subs	r0, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	440b      	add	r3, r1
 8001ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef2:	e00f      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e58      	subs	r0, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	0099      	lsls	r1, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	6809      	ldr	r1, [r1, #0]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6911      	ldr	r1, [r2, #16]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68d2      	ldr	r2, [r2, #12]
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	000186a0 	.word	0x000186a0
 8001fb0:	001e847f 	.word	0x001e847f
 8001fb4:	003d08ff 	.word	0x003d08ff
 8001fb8:	431bde83 	.word	0x431bde83
 8001fbc:	10624dd3 	.word	0x10624dd3

08001fc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	4608      	mov	r0, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	817b      	strh	r3, [r7, #10]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	813b      	strh	r3, [r7, #8]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fda:	f7ff f91d 	bl	8001218 <HAL_GetTick>
 8001fde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	f040 80d9 	bne.w	80021a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2319      	movs	r3, #25
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	496d      	ldr	r1, [pc, #436]	; (80021ac <HAL_I2C_Mem_Write+0x1ec>)
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 fcc1 	bl	8002980 <I2C_WaitOnFlagUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002004:	2302      	movs	r3, #2
 8002006:	e0cc      	b.n	80021a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_I2C_Mem_Write+0x56>
 8002012:	2302      	movs	r3, #2
 8002014:	e0c5      	b.n	80021a2 <HAL_I2C_Mem_Write+0x1e2>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d007      	beq.n	800203c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2221      	movs	r2, #33	; 0x21
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800206c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a4d      	ldr	r2, [pc, #308]	; (80021b0 <HAL_I2C_Mem_Write+0x1f0>)
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800207e:	88f8      	ldrh	r0, [r7, #6]
 8002080:	893a      	ldrh	r2, [r7, #8]
 8002082:	8979      	ldrh	r1, [r7, #10]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	4603      	mov	r3, r0
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 faf8 	bl	8002684 <I2C_RequestMemoryWrite>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d052      	beq.n	8002140 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e081      	b.n	80021a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fd42 	bl	8002b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00d      	beq.n	80020ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d107      	bne.n	80020c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e06b      	b.n	80021a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	781a      	ldrb	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b04      	cmp	r3, #4
 8002106:	d11b      	bne.n	8002140 <HAL_I2C_Mem_Write+0x180>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	d017      	beq.n	8002140 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1aa      	bne.n	800209e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fd2e 	bl	8002bae <I2C_WaitOnBTFFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b04      	cmp	r3, #4
 800215e:	d107      	bne.n	8002170 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e016      	b.n	80021a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e000      	b.n	80021a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
  }
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	00100002 	.word	0x00100002
 80021b0:	ffff0000 	.word	0xffff0000

080021b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	; 0x30
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	817b      	strh	r3, [r7, #10]
 80021c6:	460b      	mov	r3, r1
 80021c8:	813b      	strh	r3, [r7, #8]
 80021ca:	4613      	mov	r3, r2
 80021cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021d2:	f7ff f821 	bl	8001218 <HAL_GetTick>
 80021d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	f040 8244 	bne.w	800266e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2319      	movs	r3, #25
 80021ec:	2201      	movs	r2, #1
 80021ee:	4982      	ldr	r1, [pc, #520]	; (80023f8 <HAL_I2C_Mem_Read+0x244>)
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 fbc5 	bl	8002980 <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80021fc:	2302      	movs	r3, #2
 80021fe:	e237      	b.n	8002670 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_I2C_Mem_Read+0x5a>
 800220a:	2302      	movs	r3, #2
 800220c:	e230      	b.n	8002670 <HAL_I2C_Mem_Read+0x4bc>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d007      	beq.n	8002234 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002242:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2222      	movs	r2, #34	; 0x22
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800225e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a62      	ldr	r2, [pc, #392]	; (80023fc <HAL_I2C_Mem_Read+0x248>)
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002276:	88f8      	ldrh	r0, [r7, #6]
 8002278:	893a      	ldrh	r2, [r7, #8]
 800227a:	8979      	ldrh	r1, [r7, #10]
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	4603      	mov	r3, r0
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fa92 	bl	80027b0 <I2C_RequestMemoryRead>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e1ec      	b.n	8002670 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	2b00      	cmp	r3, #0
 800229c:	d113      	bne.n	80022c6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e1c0      	b.n	8002648 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d11e      	bne.n	800230c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022dc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022de:	b672      	cpsid	i
}
 80022e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002306:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002308:	b662      	cpsie	i
}
 800230a:	e035      	b.n	8002378 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	2b02      	cmp	r3, #2
 8002312:	d11e      	bne.n	8002352 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002322:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800234e:	b662      	cpsie	i
}
 8002350:	e012      	b.n	8002378 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002360:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002378:	e166      	b.n	8002648 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b03      	cmp	r3, #3
 8002380:	f200 811f 	bhi.w	80025c2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	2b01      	cmp	r3, #1
 800238a:	d123      	bne.n	80023d4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fc4d 	bl	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e167      	b.n	8002670 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023d2:	e139      	b.n	8002648 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d152      	bne.n	8002482 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	2200      	movs	r2, #0
 80023e4:	4906      	ldr	r1, [pc, #24]	; (8002400 <HAL_I2C_Mem_Read+0x24c>)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 faca 	bl	8002980 <I2C_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e13c      	b.n	8002670 <HAL_I2C_Mem_Read+0x4bc>
 80023f6:	bf00      	nop
 80023f8:	00100002 	.word	0x00100002
 80023fc:	ffff0000 	.word	0xffff0000
 8002400:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
}
 8002406:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800244a:	b662      	cpsie	i
}
 800244c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002480:	e0e2      	b.n	8002648 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002488:	2200      	movs	r2, #0
 800248a:	497b      	ldr	r1, [pc, #492]	; (8002678 <HAL_I2C_Mem_Read+0x4c4>)
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fa77 	bl	8002980 <I2C_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0e9      	b.n	8002670 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024ac:	b672      	cpsid	i
}
 80024ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80024e2:	4b66      	ldr	r3, [pc, #408]	; (800267c <HAL_I2C_Mem_Read+0x4c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	4a65      	ldr	r2, [pc, #404]	; (8002680 <HAL_I2C_Mem_Read+0x4cc>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0a1a      	lsrs	r2, r3, #8
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00da      	lsls	r2, r3, #3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	3b01      	subs	r3, #1
 8002500:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d118      	bne.n	800253a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800252a:	b662      	cpsie	i
}
 800252c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e09a      	b.n	8002670 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d1d9      	bne.n	80024fc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800258a:	b662      	cpsie	i
}
 800258c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025c0:	e042      	b.n	8002648 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fb32 	bl	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e04c      	b.n	8002670 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d118      	bne.n	8002648 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f ae94 	bne.w	800237a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800266e:	2302      	movs	r3, #2
  }
}
 8002670:	4618      	mov	r0, r3
 8002672:	3728      	adds	r7, #40	; 0x28
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	00010004 	.word	0x00010004
 800267c:	20000040 	.word	0x20000040
 8002680:	14f8b589 	.word	0x14f8b589

08002684 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4603      	mov	r3, r0
 8002694:	817b      	strh	r3, [r7, #10]
 8002696:	460b      	mov	r3, r1
 8002698:	813b      	strh	r3, [r7, #8]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f960 	bl	8002980 <I2C_WaitOnFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00d      	beq.n	80026e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d4:	d103      	bne.n	80026de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e05f      	b.n	80027a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	6a3a      	ldr	r2, [r7, #32]
 80026f6:	492d      	ldr	r1, [pc, #180]	; (80027ac <I2C_RequestMemoryWrite+0x128>)
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f998 	bl	8002a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e04c      	b.n	80027a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	6a39      	ldr	r1, [r7, #32]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fa02 	bl	8002b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00d      	beq.n	800274a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2b04      	cmp	r3, #4
 8002734:	d107      	bne.n	8002746 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002744:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e02b      	b.n	80027a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002750:	893b      	ldrh	r3, [r7, #8]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	611a      	str	r2, [r3, #16]
 800275a:	e021      	b.n	80027a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800275c:	893b      	ldrh	r3, [r7, #8]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	b29b      	uxth	r3, r3
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	6a39      	ldr	r1, [r7, #32]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f9dc 	bl	8002b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00d      	beq.n	8002796 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2b04      	cmp	r3, #4
 8002780:	d107      	bne.n	8002792 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002790:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e005      	b.n	80027a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002796:	893b      	ldrh	r3, [r7, #8]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	00010002 	.word	0x00010002

080027b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	817b      	strh	r3, [r7, #10]
 80027c2:	460b      	mov	r3, r1
 80027c4:	813b      	strh	r3, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f8c2 	bl	8002980 <I2C_WaitOnFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002810:	d103      	bne.n	800281a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0aa      	b.n	8002974 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800281e:	897b      	ldrh	r3, [r7, #10]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800282c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	6a3a      	ldr	r2, [r7, #32]
 8002832:	4952      	ldr	r1, [pc, #328]	; (800297c <I2C_RequestMemoryRead+0x1cc>)
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f8fa 	bl	8002a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e097      	b.n	8002974 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800285a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285c:	6a39      	ldr	r1, [r7, #32]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f964 	bl	8002b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b04      	cmp	r3, #4
 8002870:	d107      	bne.n	8002882 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002880:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e076      	b.n	8002974 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800288c:	893b      	ldrh	r3, [r7, #8]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	e021      	b.n	80028dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002898:	893b      	ldrh	r3, [r7, #8]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	b29b      	uxth	r3, r3
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	6a39      	ldr	r1, [r7, #32]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f93e 	bl	8002b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d107      	bne.n	80028ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e050      	b.n	8002974 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028d2:	893b      	ldrh	r3, [r7, #8]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028de:	6a39      	ldr	r1, [r7, #32]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f923 	bl	8002b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d107      	bne.n	8002904 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e035      	b.n	8002974 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002916:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2200      	movs	r2, #0
 8002920:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f82b 	bl	8002980 <I2C_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800293e:	d103      	bne.n	8002948 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e013      	b.n	8002974 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	6a3a      	ldr	r2, [r7, #32]
 8002960:	4906      	ldr	r1, [pc, #24]	; (800297c <I2C_RequestMemoryRead+0x1cc>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f863 	bl	8002a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	00010002 	.word	0x00010002

08002980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002990:	e025      	b.n	80029de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d021      	beq.n	80029de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7fe fc3d 	bl	8001218 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d116      	bne.n	80029de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f043 0220 	orr.w	r2, r3, #32
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e023      	b.n	8002a26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d10d      	bne.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4013      	ands	r3, r2
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf0c      	ite	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	2300      	movne	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	e00c      	b.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d0b6      	beq.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a3c:	e051      	b.n	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4c:	d123      	bne.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0204 	orr.w	r2, r3, #4
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e046      	b.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d021      	beq.n	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9e:	f7fe fbbb 	bl	8001218 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d302      	bcc.n	8002ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d116      	bne.n	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f043 0220 	orr.w	r2, r3, #32
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e020      	b.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d10c      	bne.n	8002b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4013      	ands	r3, r2
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf14      	ite	ne
 8002afe:	2301      	movne	r3, #1
 8002b00:	2300      	moveq	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	e00b      	b.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4013      	ands	r3, r2
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d18d      	bne.n	8002a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b38:	e02d      	b.n	8002b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f8ce 	bl	8002cdc <I2C_IsAcknowledgeFailed>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e02d      	b.n	8002ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d021      	beq.n	8002b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7fe fb61 	bl	8001218 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0220 	orr.w	r2, r3, #32
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e007      	b.n	8002ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d1ca      	bne.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bba:	e02d      	b.n	8002c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f88d 	bl	8002cdc <I2C_IsAcknowledgeFailed>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e02d      	b.n	8002c28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd2:	d021      	beq.n	8002c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd4:	f7fe fb20 	bl	8001218 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d302      	bcc.n	8002bea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e007      	b.n	8002c28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d1ca      	bne.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c3c:	e042      	b.n	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d119      	bne.n	8002c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0210 	mvn.w	r2, #16
 8002c54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e029      	b.n	8002cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c80:	f7fe faca 	bl	8001218 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d302      	bcc.n	8002c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f043 0220 	orr.w	r2, r3, #32
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e007      	b.n	8002cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d1b5      	bne.n	8002c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf2:	d11b      	bne.n	8002d2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f043 0204 	orr.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e272      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 8087 	beq.w	8002e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d58:	4b92      	ldr	r3, [pc, #584]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d00c      	beq.n	8002d7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d64:	4b8f      	ldr	r3, [pc, #572]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d112      	bne.n	8002d96 <HAL_RCC_OscConfig+0x5e>
 8002d70:	4b8c      	ldr	r3, [pc, #560]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7c:	d10b      	bne.n	8002d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7e:	4b89      	ldr	r3, [pc, #548]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d06c      	beq.n	8002e64 <HAL_RCC_OscConfig+0x12c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d168      	bne.n	8002e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e24c      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x76>
 8002da0:	4b80      	ldr	r3, [pc, #512]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a7f      	ldr	r2, [pc, #508]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	e02e      	b.n	8002e0c <HAL_RCC_OscConfig+0xd4>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x98>
 8002db6:	4b7b      	ldr	r3, [pc, #492]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7a      	ldr	r2, [pc, #488]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b78      	ldr	r3, [pc, #480]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a77      	ldr	r2, [pc, #476]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0xd4>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0xbc>
 8002dda:	4b72      	ldr	r3, [pc, #456]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a71      	ldr	r2, [pc, #452]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6e      	ldr	r2, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xd4>
 8002df4:	4b6b      	ldr	r3, [pc, #428]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a6a      	ldr	r2, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b68      	ldr	r3, [pc, #416]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a67      	ldr	r2, [pc, #412]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fa00 	bl	8001218 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe f9fc 	bl	8001218 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e200      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xe4>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe f9ec 	bl	8001218 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe f9e8 	bl	8001218 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1ec      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x10c>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e72:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e7e:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x18c>
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x176>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1c0      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4939      	ldr	r1, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_RCC_OscConfig+0x270>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe f9a1 	bl	8001218 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe f99d 	bl	8001218 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e1a1      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4927      	ldr	r1, [pc, #156]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_RCC_OscConfig+0x270>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe f980 	bl	8001218 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fe f97c 	bl	8001218 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e180      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d03a      	beq.n	8002fbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d019      	beq.n	8002f82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <HAL_RCC_OscConfig+0x274>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f54:	f7fe f960 	bl	8001218 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe f95c 	bl	8001218 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e160      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f000 fad8 	bl	8003530 <RCC_Delay>
 8002f80:	e01c      	b.n	8002fbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_RCC_OscConfig+0x274>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f88:	f7fe f946 	bl	8001218 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8e:	e00f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f90:	f7fe f942 	bl	8001218 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d908      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e146      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	42420000 	.word	0x42420000
 8002fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	4b92      	ldr	r3, [pc, #584]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e9      	bne.n	8002f90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a6 	beq.w	8003116 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fce:	4b8b      	ldr	r3, [pc, #556]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	4b88      	ldr	r3, [pc, #544]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4a87      	ldr	r2, [pc, #540]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	61d3      	str	r3, [r2, #28]
 8002fe6:	4b85      	ldr	r3, [pc, #532]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b82      	ldr	r3, [pc, #520]	; (8003200 <HAL_RCC_OscConfig+0x4c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003002:	4b7f      	ldr	r3, [pc, #508]	; (8003200 <HAL_RCC_OscConfig+0x4c8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7e      	ldr	r2, [pc, #504]	; (8003200 <HAL_RCC_OscConfig+0x4c8>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300e:	f7fe f903 	bl	8001218 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003016:	f7fe f8ff 	bl	8001218 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b64      	cmp	r3, #100	; 0x64
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e103      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b75      	ldr	r3, [pc, #468]	; (8003200 <HAL_RCC_OscConfig+0x4c8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x312>
 800303c:	4b6f      	ldr	r3, [pc, #444]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4a6e      	ldr	r2, [pc, #440]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6213      	str	r3, [r2, #32]
 8003048:	e02d      	b.n	80030a6 <HAL_RCC_OscConfig+0x36e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x334>
 8003052:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4a69      	ldr	r2, [pc, #420]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	6213      	str	r3, [r2, #32]
 800305e:	4b67      	ldr	r3, [pc, #412]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4a66      	ldr	r2, [pc, #408]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	6213      	str	r3, [r2, #32]
 800306a:	e01c      	b.n	80030a6 <HAL_RCC_OscConfig+0x36e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d10c      	bne.n	800308e <HAL_RCC_OscConfig+0x356>
 8003074:	4b61      	ldr	r3, [pc, #388]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4a60      	ldr	r2, [pc, #384]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	6213      	str	r3, [r2, #32]
 8003080:	4b5e      	ldr	r3, [pc, #376]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a5d      	ldr	r2, [pc, #372]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6213      	str	r3, [r2, #32]
 800308c:	e00b      	b.n	80030a6 <HAL_RCC_OscConfig+0x36e>
 800308e:	4b5b      	ldr	r3, [pc, #364]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4a5a      	ldr	r2, [pc, #360]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6213      	str	r3, [r2, #32]
 800309a:	4b58      	ldr	r3, [pc, #352]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4a57      	ldr	r2, [pc, #348]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d015      	beq.n	80030da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7fe f8b3 	bl	8001218 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe f8af 	bl	8001218 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0b1      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ee      	beq.n	80030b6 <HAL_RCC_OscConfig+0x37e>
 80030d8:	e014      	b.n	8003104 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fe f89d 	bl	8001218 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe f899 	bl	8001218 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e09b      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f8:	4b40      	ldr	r3, [pc, #256]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ee      	bne.n	80030e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4b3c      	ldr	r3, [pc, #240]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4a3b      	ldr	r2, [pc, #236]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003114:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8087 	beq.w	800322e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003120:	4b36      	ldr	r3, [pc, #216]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d061      	beq.n	80031f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d146      	bne.n	80031c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003134:	4b33      	ldr	r3, [pc, #204]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe f86d 	bl	8001218 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003142:	f7fe f869 	bl	8001218 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e06d      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003154:	4b29      	ldr	r3, [pc, #164]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d108      	bne.n	800317c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800316a:	4b24      	ldr	r3, [pc, #144]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	4921      	ldr	r1, [pc, #132]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a19      	ldr	r1, [r3, #32]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	430b      	orrs	r3, r1
 800318e:	491b      	ldr	r1, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fe f83d 	bl	8001218 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a2:	f7fe f839 	bl	8001218 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e03d      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x46a>
 80031c0:	e035      	b.n	800322e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_RCC_OscConfig+0x4cc>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe f826 	bl	8001218 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe f822 	bl	8001218 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e026      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x498>
 80031ee:	e01e      	b.n	800322e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e019      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
 80031fc:	40021000 	.word	0x40021000
 8003200:	40007000 	.word	0x40007000
 8003204:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_OscConfig+0x500>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	429a      	cmp	r2, r3
 800321a:	d106      	bne.n	800322a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000

0800323c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0d0      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003250:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d910      	bls.n	8003280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 0207 	bic.w	r2, r3, #7
 8003266:	4965      	ldr	r1, [pc, #404]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b63      	ldr	r3, [pc, #396]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0b8      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003298:	4b59      	ldr	r3, [pc, #356]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a58      	ldr	r2, [pc, #352]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b0:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032bc:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	494d      	ldr	r1, [pc, #308]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d040      	beq.n	800335c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	4b47      	ldr	r3, [pc, #284]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d115      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e07f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e073      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330a:	4b3d      	ldr	r3, [pc, #244]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e06b      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4b39      	ldr	r3, [pc, #228]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4936      	ldr	r1, [pc, #216]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800332c:	f7fd ff74 	bl	8001218 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fd ff70 	bl	8001218 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e053      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 020c 	and.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	429a      	cmp	r2, r3
 800335a:	d1eb      	bne.n	8003334 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d210      	bcs.n	800338c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 0207 	bic.w	r2, r3, #7
 8003372:	4922      	ldr	r1, [pc, #136]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e032      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4916      	ldr	r1, [pc, #88]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033b6:	4b12      	ldr	r3, [pc, #72]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	490e      	ldr	r1, [pc, #56]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ca:	f000 f821 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033ce:	4602      	mov	r2, r0
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	490a      	ldr	r1, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80033dc:	5ccb      	ldrb	r3, [r1, r3]
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	4a09      	ldr	r2, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1cc>)
 80033e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033e6:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_ClockConfig+0x1d0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fed2 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40022000 	.word	0x40022000
 8003400:	40021000 	.word	0x40021000
 8003404:	0800c680 	.word	0x0800c680
 8003408:	20000040 	.word	0x20000040
 800340c:	20000000 	.word	0x20000000

08003410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	b490      	push	{r4, r7}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCC_GetSysClockFreq+0xac>)
 8003418:	1d3c      	adds	r4, r7, #4
 800341a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800341c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003420:	f240 2301 	movw	r3, #513	; 0x201
 8003424:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800343a:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b04      	cmp	r3, #4
 8003448:	d002      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x40>
 800344a:	2b08      	cmp	r3, #8
 800344c:	d003      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x46>
 800344e:	e02b      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003450:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003452:	623b      	str	r3, [r7, #32]
      break;
 8003454:	e02b      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	0c9b      	lsrs	r3, r3, #18
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	3328      	adds	r3, #40	; 0x28
 8003460:	443b      	add	r3, r7
 8003462:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003466:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0c5b      	lsrs	r3, r3, #17
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	3328      	adds	r3, #40	; 0x28
 800347e:	443b      	add	r3, r7
 8003480:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003484:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800348a:	fb03 f202 	mul.w	r2, r3, r2
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
 8003496:	e004      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	623b      	str	r3, [r7, #32]
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034aa:	623b      	str	r3, [r7, #32]
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	6a3b      	ldr	r3, [r7, #32]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc90      	pop	{r4, r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	0800c430 	.word	0x0800c430
 80034c0:	40021000 	.word	0x40021000
 80034c4:	007a1200 	.word	0x007a1200
 80034c8:	003d0900 	.word	0x003d0900

080034cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d0:	4b02      	ldr	r3, [pc, #8]	; (80034dc <HAL_RCC_GetHCLKFreq+0x10>)
 80034d2:	681b      	ldr	r3, [r3, #0]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	20000040 	.word	0x20000040

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034e4:	f7ff fff2 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4903      	ldr	r1, [pc, #12]	; (8003504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	0800c690 	.word	0x0800c690

08003508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800350c:	f7ff ffde 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	0adb      	lsrs	r3, r3, #11
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_GetPCLK2Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	0800c690 	.word	0x0800c690

08003530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <RCC_Delay+0x34>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <RCC_Delay+0x38>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	0a5b      	lsrs	r3, r3, #9
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800354c:	bf00      	nop
  }
  while (Delay --);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	60fa      	str	r2, [r7, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f9      	bne.n	800354c <RCC_Delay+0x1c>
}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr
 8003564:	20000040 	.word	0x20000040
 8003568:	10624dd3 	.word	0x10624dd3

0800356c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e076      	b.n	800366c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800358e:	d009      	beq.n	80035a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	61da      	str	r2, [r3, #28]
 8003596:	e005      	b.n	80035a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f006 fe4e 	bl	800a260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003628:	ea42 0103 	orr.w	r1, r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	0c1a      	lsrs	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f002 0204 	and.w	r2, r2, #4
 800364a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800365a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	; 0x30
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003682:	2301      	movs	r3, #1
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_SPI_TransmitReceive+0x26>
 8003696:	2302      	movs	r3, #2
 8003698:	e18a      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x33c>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a2:	f7fd fdb9 	bl	8001218 <HAL_GetTick>
 80036a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036b8:	887b      	ldrh	r3, [r7, #2]
 80036ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d00f      	beq.n	80036e4 <HAL_SPI_TransmitReceive+0x70>
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ca:	d107      	bne.n	80036dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d103      	bne.n	80036dc <HAL_SPI_TransmitReceive+0x68>
 80036d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d003      	beq.n	80036e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036dc:	2302      	movs	r3, #2
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036e2:	e15b      	b.n	800399c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_SPI_TransmitReceive+0x82>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_SPI_TransmitReceive+0x82>
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036fc:	e14e      	b.n	800399c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b04      	cmp	r3, #4
 8003708:	d003      	beq.n	8003712 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2205      	movs	r2, #5
 800370e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	887a      	ldrh	r2, [r7, #2]
 8003722:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	887a      	ldrh	r2, [r7, #2]
 800373a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d007      	beq.n	8003766 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003764:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376e:	d178      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_SPI_TransmitReceive+0x10a>
 8003778:	8b7b      	ldrh	r3, [r7, #26]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d166      	bne.n	800384c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	881a      	ldrh	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	1c9a      	adds	r2, r3, #2
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a2:	e053      	b.n	800384c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d11b      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x176>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d016      	beq.n	80037ea <HAL_SPI_TransmitReceive+0x176>
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d113      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	881a      	ldrh	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	1c9a      	adds	r2, r3, #2
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d119      	bne.n	800382c <HAL_SPI_TransmitReceive+0x1b8>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d014      	beq.n	800382c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	b292      	uxth	r2, r2
 800380e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003828:	2301      	movs	r3, #1
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800382c:	f7fd fcf4 	bl	8001218 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003838:	429a      	cmp	r2, r3
 800383a:	d807      	bhi.n	800384c <HAL_SPI_TransmitReceive+0x1d8>
 800383c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d003      	beq.n	800384c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800384a:	e0a7      	b.n	800399c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1a6      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x130>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1a1      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x130>
 8003860:	e07c      	b.n	800395c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_SPI_TransmitReceive+0x1fc>
 800386a:	8b7b      	ldrh	r3, [r7, #26]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d16b      	bne.n	8003948 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	7812      	ldrb	r2, [r2, #0]
 800387c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003896:	e057      	b.n	8003948 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d11c      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x26c>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <HAL_SPI_TransmitReceive+0x26c>
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d114      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	7812      	ldrb	r2, [r2, #0]
 80038c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d119      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x2ae>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d014      	beq.n	8003922 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800391e:	2301      	movs	r3, #1
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003922:	f7fd fc79 	bl	8001218 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800392e:	429a      	cmp	r2, r3
 8003930:	d803      	bhi.n	800393a <HAL_SPI_TransmitReceive+0x2c6>
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d102      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x2cc>
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003946:	e029      	b.n	800399c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1a2      	bne.n	8003898 <HAL_SPI_TransmitReceive+0x224>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d19d      	bne.n	8003898 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f8b1 	bl	8003ac8 <SPI_EndRxTxTransaction>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d006      	beq.n	800397a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003978:	e010      	b.n	800399c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	e000      	b.n	800399c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800399a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3730      	adds	r7, #48	; 0x30
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039c8:	f7fd fc26 	bl	8001218 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039d8:	f7fd fc1e 	bl	8001218 <HAL_GetTick>
 80039dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	015b      	lsls	r3, r3, #5
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ee:	e054      	b.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d050      	beq.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f8:	f7fd fc0e 	bl	8001218 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d902      	bls.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13d      	bne.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a26:	d111      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a30:	d004      	beq.n	8003a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3a:	d107      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a54:	d10f      	bne.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e017      	b.n	8003aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d19b      	bne.n	80039f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000040 	.word	0x20000040

08003ac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2200      	movs	r2, #0
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7ff ff6a 	bl	80039b8 <SPI_WaitFlagStateUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	f043 0220 	orr.w	r2, r3, #32
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e000      	b.n	8003afc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e041      	b.n	8003b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f006 fc02 	bl	800a334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f000 fc20 	bl	8004388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d001      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e03a      	b.n	8003c32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <HAL_TIM_Base_Start_IT+0x98>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x58>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be6:	d009      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x58>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <HAL_TIM_Base_Start_IT+0x9c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x58>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <HAL_TIM_Base_Start_IT+0xa0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d111      	bne.n	8003c20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b06      	cmp	r3, #6
 8003c0c:	d010      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1e:	e007      	b.n	8003c30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40000400 	.word	0x40000400
 8003c44:	40000800 	.word	0x40000800

08003c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e041      	b.n	8003cde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f006 fb42 	bl	800a2f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f000 fb7e 	bl	8004388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <HAL_TIM_PWM_Start+0x24>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e022      	b.n	8003d52 <HAL_TIM_PWM_Start+0x6a>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d109      	bne.n	8003d26 <HAL_TIM_PWM_Start+0x3e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	bf14      	ite	ne
 8003d1e:	2301      	movne	r3, #1
 8003d20:	2300      	moveq	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	e015      	b.n	8003d52 <HAL_TIM_PWM_Start+0x6a>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d109      	bne.n	8003d40 <HAL_TIM_PWM_Start+0x58>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e008      	b.n	8003d52 <HAL_TIM_PWM_Start+0x6a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e05e      	b.n	8003e18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_PWM_Start+0x82>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d68:	e013      	b.n	8003d92 <HAL_TIM_PWM_Start+0xaa>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_PWM_Start+0x92>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d78:	e00b      	b.n	8003d92 <HAL_TIM_PWM_Start+0xaa>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_PWM_Start+0xa2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	e003      	b.n	8003d92 <HAL_TIM_PWM_Start+0xaa>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2201      	movs	r2, #1
 8003d98:	6839      	ldr	r1, [r7, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fd74 	bl	8004888 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_TIM_PWM_Start+0x138>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d107      	bne.n	8003dba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a18      	ldr	r2, [pc, #96]	; (8003e20 <HAL_TIM_PWM_Start+0x138>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_TIM_PWM_Start+0xfa>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d009      	beq.n	8003de2 <HAL_TIM_PWM_Start+0xfa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <HAL_TIM_PWM_Start+0x13c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_TIM_PWM_Start+0xfa>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <HAL_TIM_PWM_Start+0x140>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d111      	bne.n	8003e06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b06      	cmp	r3, #6
 8003df2:	d010      	beq.n	8003e16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e04:	e007      	b.n	8003e16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800

08003e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d122      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d11b      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0202 	mvn.w	r2, #2
 8003e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fa6f 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fa62 	bl	8004340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fa71 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d122      	bne.n	8003edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d11b      	bne.n	8003edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0204 	mvn.w	r2, #4
 8003eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fa45 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa38 	bl	8004340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fa47 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d122      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0208 	mvn.w	r2, #8
 8003f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2204      	movs	r2, #4
 8003f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fa1b 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa0e 	bl	8004340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fa1d 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d122      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d11b      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0210 	mvn.w	r2, #16
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f9f1 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f9e4 	bl	8004340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f9f3 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d10e      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d107      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0201 	mvn.w	r2, #1
 8003fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f001 fe82 	bl	8005cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	d10e      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d107      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fce1 	bl	800499e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d10e      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d107      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f9b7 	bl	8004376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b20      	cmp	r3, #32
 8004014:	d10e      	bne.n	8004034 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b20      	cmp	r3, #32
 8004022:	d107      	bne.n	8004034 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0220 	mvn.w	r2, #32
 800402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fcac 	bl	800498c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004052:	2302      	movs	r3, #2
 8004054:	e0ac      	b.n	80041b0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b0c      	cmp	r3, #12
 8004062:	f200 809f 	bhi.w	80041a4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	080040a1 	.word	0x080040a1
 8004070:	080041a5 	.word	0x080041a5
 8004074:	080041a5 	.word	0x080041a5
 8004078:	080041a5 	.word	0x080041a5
 800407c:	080040e1 	.word	0x080040e1
 8004080:	080041a5 	.word	0x080041a5
 8004084:	080041a5 	.word	0x080041a5
 8004088:	080041a5 	.word	0x080041a5
 800408c:	08004123 	.word	0x08004123
 8004090:	080041a5 	.word	0x080041a5
 8004094:	080041a5 	.word	0x080041a5
 8004098:	080041a5 	.word	0x080041a5
 800409c:	08004163 	.word	0x08004163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f9d0 	bl	800444c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	619a      	str	r2, [r3, #24]
      break;
 80040de:	e062      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fa16 	bl	8004518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6999      	ldr	r1, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	619a      	str	r2, [r3, #24]
      break;
 8004120:	e041      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fa5f 	bl	80045ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0208 	orr.w	r2, r2, #8
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0204 	bic.w	r2, r2, #4
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
      break;
 8004160:	e021      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 faa9 	bl	80046c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69d9      	ldr	r1, [r3, #28]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	021a      	lsls	r2, r3, #8
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	61da      	str	r2, [r3, #28]
      break;
 80041a2:	e000      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80041a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIM_ConfigClockSource+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e0b3      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x180>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004208:	d03e      	beq.n	8004288 <HAL_TIM_ConfigClockSource+0xd0>
 800420a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420e:	f200 8087 	bhi.w	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004216:	f000 8085 	beq.w	8004324 <HAL_TIM_ConfigClockSource+0x16c>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	d87f      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004220:	2b70      	cmp	r3, #112	; 0x70
 8004222:	d01a      	beq.n	800425a <HAL_TIM_ConfigClockSource+0xa2>
 8004224:	2b70      	cmp	r3, #112	; 0x70
 8004226:	d87b      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004228:	2b60      	cmp	r3, #96	; 0x60
 800422a:	d050      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x116>
 800422c:	2b60      	cmp	r3, #96	; 0x60
 800422e:	d877      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004230:	2b50      	cmp	r3, #80	; 0x50
 8004232:	d03c      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0xf6>
 8004234:	2b50      	cmp	r3, #80	; 0x50
 8004236:	d873      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d058      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x136>
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d86f      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004240:	2b30      	cmp	r3, #48	; 0x30
 8004242:	d064      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x156>
 8004244:	2b30      	cmp	r3, #48	; 0x30
 8004246:	d86b      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004248:	2b20      	cmp	r3, #32
 800424a:	d060      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x156>
 800424c:	2b20      	cmp	r3, #32
 800424e:	d867      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d05c      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x156>
 8004254:	2b10      	cmp	r3, #16
 8004256:	d05a      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004258:	e062      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6899      	ldr	r1, [r3, #8]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f000 faee 	bl	800484a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800427c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	609a      	str	r2, [r3, #8]
      break;
 8004286:	e04e      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	6899      	ldr	r1, [r3, #8]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f000 fad7 	bl	800484a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042aa:	609a      	str	r2, [r3, #8]
      break;
 80042ac:	e03b      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f000 fa4e 	bl	800475c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2150      	movs	r1, #80	; 0x50
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 faa5 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 80042cc:	e02b      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	461a      	mov	r2, r3
 80042dc:	f000 fa6c 	bl	80047b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2160      	movs	r1, #96	; 0x60
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fa95 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 80042ec:	e01b      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f000 fa2e 	bl	800475c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2140      	movs	r1, #64	; 0x40
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fa85 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 800430c:	e00b      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	4610      	mov	r0, r2
 800431a:	f000 fa7c 	bl	8004816 <TIM_ITRx_SetConfig>
        break;
 800431e:	e002      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004320:	bf00      	nop
 8004322:	e000      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004324:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a29      	ldr	r2, [pc, #164]	; (8004440 <TIM_Base_SetConfig+0xb8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00b      	beq.n	80043b8 <TIM_Base_SetConfig+0x30>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a6:	d007      	beq.n	80043b8 <TIM_Base_SetConfig+0x30>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a26      	ldr	r2, [pc, #152]	; (8004444 <TIM_Base_SetConfig+0xbc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_Base_SetConfig+0x30>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a25      	ldr	r2, [pc, #148]	; (8004448 <TIM_Base_SetConfig+0xc0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d108      	bne.n	80043ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <TIM_Base_SetConfig+0xb8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00b      	beq.n	80043ea <TIM_Base_SetConfig+0x62>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d8:	d007      	beq.n	80043ea <TIM_Base_SetConfig+0x62>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <TIM_Base_SetConfig+0xbc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d003      	beq.n	80043ea <TIM_Base_SetConfig+0x62>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <TIM_Base_SetConfig+0xc0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d108      	bne.n	80043fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a07      	ldr	r2, [pc, #28]	; (8004440 <TIM_Base_SetConfig+0xb8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d103      	bne.n	8004430 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	615a      	str	r2, [r3, #20]
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800

0800444c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f023 0201 	bic.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 0302 	bic.w	r3, r3, #2
 8004494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <TIM_OC1_SetConfig+0xc8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d10c      	bne.n	80044c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0308 	bic.w	r3, r3, #8
 80044ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a13      	ldr	r2, [pc, #76]	; (8004514 <TIM_OC1_SetConfig+0xc8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d111      	bne.n	80044ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	621a      	str	r2, [r3, #32]
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40012c00 	.word	0x40012c00

08004518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0210 	bic.w	r2, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0320 	bic.w	r3, r3, #32
 8004562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <TIM_OC2_SetConfig+0xd0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10d      	bne.n	8004594 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004592:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <TIM_OC2_SetConfig+0xd0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d113      	bne.n	80045c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	40012c00 	.word	0x40012c00

080045ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <TIM_OC3_SetConfig+0xd0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d10d      	bne.n	8004666 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <TIM_OC3_SetConfig+0xd0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d113      	bne.n	8004696 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	621a      	str	r2, [r3, #32]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40012c00 	.word	0x40012c00

080046c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800470a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	031b      	lsls	r3, r3, #12
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a0f      	ldr	r2, [pc, #60]	; (8004758 <TIM_OC4_SetConfig+0x98>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d109      	bne.n	8004734 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr
 8004758:	40012c00 	.word	0x40012c00

0800475c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0201 	bic.w	r2, r3, #1
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f023 030a 	bic.w	r3, r3, #10
 8004798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f023 0210 	bic.w	r2, r3, #16
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	031b      	lsls	r3, r3, #12
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	621a      	str	r2, [r3, #32]
}
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	f043 0307 	orr.w	r3, r3, #7
 8004838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr

0800484a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004864:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	021a      	lsls	r2, r3, #8
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	431a      	orrs	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4313      	orrs	r3, r2
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	609a      	str	r2, [r3, #8]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2201      	movs	r2, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1a      	ldr	r2, [r3, #32]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e046      	b.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a16      	ldr	r2, [pc, #88]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00e      	beq.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d009      	beq.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a12      	ldr	r2, [pc, #72]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a10      	ldr	r2, [pc, #64]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d10c      	bne.n	8004964 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	4313      	orrs	r3, r2
 800495a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr
 8004980:	40012c00 	.word	0x40012c00
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800

0800498c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr

0800499e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e03f      	b.n	8004a42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f005 fd04 	bl	800a3e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2224      	movs	r2, #36	; 0x24
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fd9b 	bl	8005530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695a      	ldr	r2, [r3, #20]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b08a      	sub	sp, #40	; 0x28
 8004a4e:	af02      	add	r7, sp, #8
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d17c      	bne.n	8004b64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <HAL_UART_Transmit+0x2c>
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e075      	b.n	8004b66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_UART_Transmit+0x3e>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e06e      	b.n	8004b66 <HAL_UART_Transmit+0x11c>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2221      	movs	r2, #33	; 0x21
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a9e:	f7fc fbbb 	bl	8001218 <HAL_GetTick>
 8004aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	88fa      	ldrh	r2, [r7, #6]
 8004aa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	88fa      	ldrh	r2, [r7, #6]
 8004aae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab8:	d108      	bne.n	8004acc <HAL_UART_Transmit+0x82>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d104      	bne.n	8004acc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	e003      	b.n	8004ad4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004adc:	e02a      	b.n	8004b34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2180      	movs	r1, #128	; 0x80
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fb0d 	bl	8005108 <UART_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e036      	b.n	8004b66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10b      	bne.n	8004b16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	3302      	adds	r3, #2
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	e007      	b.n	8004b26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	3301      	adds	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1cf      	bne.n	8004ade <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2140      	movs	r1, #64	; 0x40
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fadd 	bl	8005108 <UART_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e006      	b.n	8004b66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e000      	b.n	8004b66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d13c      	bne.n	8004c02 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e035      	b.n	8004c04 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e02e      	b.n	8004c04 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 faee 	bl	800519c <UART_Start_Receive_DMA>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d119      	bne.n	8004bfe <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d113      	bne.n	8004bfa <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0210 	orr.w	r2, r2, #16
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	e001      	b.n	8004bfe <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	e000      	b.n	8004c04 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_UART_IRQHandler+0x52>
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fbc0 	bl	80053dc <UART_Receive_IT>
      return;
 8004c5c:	e17b      	b.n	8004f56 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80b1 	beq.w	8004dc8 <HAL_UART_IRQHandler+0x1bc>
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <HAL_UART_IRQHandler+0x70>
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 80a6 	beq.w	8004dc8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_UART_IRQHandler+0x90>
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f043 0201 	orr.w	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_UART_IRQHandler+0xb0>
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f043 0202 	orr.w	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_UART_IRQHandler+0xd0>
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f043 0204 	orr.w	r2, r3, #4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00f      	beq.n	8004d06 <HAL_UART_IRQHandler+0xfa>
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d104      	bne.n	8004cfa <HAL_UART_IRQHandler+0xee>
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f043 0208 	orr.w	r2, r3, #8
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 811e 	beq.w	8004f4c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_UART_IRQHandler+0x11e>
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fb59 	bl	80053dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf14      	ite	ne
 8004d38:	2301      	movne	r3, #1
 8004d3a:	2300      	moveq	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <HAL_UART_IRQHandler+0x146>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d031      	beq.n	8004db6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fa9b 	bl	800528e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d023      	beq.n	8004dae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d013      	beq.n	8004da6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	4a76      	ldr	r2, [pc, #472]	; (8004f5c <HAL_UART_IRQHandler+0x350>)
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fc fc74 	bl	8001678 <HAL_DMA_Abort_IT>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004da0:	4610      	mov	r0, r2
 8004da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da4:	e00e      	b.n	8004dc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8f5 	bl	8004f96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	e00a      	b.n	8004dc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f8f1 	bl	8004f96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	e006      	b.n	8004dc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8ed 	bl	8004f96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004dc2:	e0c3      	b.n	8004f4c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc4:	bf00      	nop
    return;
 8004dc6:	e0c1      	b.n	8004f4c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	f040 80a1 	bne.w	8004f14 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 809b 	beq.w	8004f14 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8095 	beq.w	8004f14 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d04e      	beq.n	8004eac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004e18:	8a3b      	ldrh	r3, [r7, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8098 	beq.w	8004f50 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e24:	8a3a      	ldrh	r2, [r7, #16]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	f080 8092 	bcs.w	8004f50 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8a3a      	ldrh	r2, [r7, #16]
 8004e30:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d02b      	beq.n	8004e94 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e4a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0201 	bic.w	r2, r2, #1
 8004e5a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e6a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0210 	bic.w	r2, r2, #16
 8004e88:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fc fbb7 	bl	8001602 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 ffab 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004eaa:	e051      	b.n	8004f50 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d047      	beq.n	8004f54 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004ec4:	8a7b      	ldrh	r3, [r7, #18]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d044      	beq.n	8004f54 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ed8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0201 	bic.w	r2, r2, #1
 8004ee8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0210 	bic.w	r2, r2, #16
 8004f06:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f08:	8a7b      	ldrh	r3, [r7, #18]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 ff77 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f12:	e01f      	b.n	8004f54 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d008      	beq.n	8004f30 <HAL_UART_IRQHandler+0x324>
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f9f0 	bl	800530e <UART_Transmit_IT>
    return;
 8004f2e:	e012      	b.n	8004f56 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00d      	beq.n	8004f56 <HAL_UART_IRQHandler+0x34a>
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fa31 	bl	80053ac <UART_EndTransmit_IT>
    return;
 8004f4a:	e004      	b.n	8004f56 <HAL_UART_IRQHandler+0x34a>
    return;
 8004f4c:	bf00      	nop
 8004f4e:	e002      	b.n	8004f56 <HAL_UART_IRQHandler+0x34a>
      return;
 8004f50:	bf00      	nop
 8004f52:	e000      	b.n	8004f56 <HAL_UART_IRQHandler+0x34a>
      return;
 8004f54:	bf00      	nop
  }
}
 8004f56:	3728      	adds	r7, #40	; 0x28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	080052e7 	.word	0x080052e7

08004f60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr

08004f72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d12a      	bne.n	800501a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fd8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
 8004fe8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	2b01      	cmp	r3, #1
 8005008:	d107      	bne.n	800501a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0210 	bic.w	r2, r2, #16
 8005018:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	2b01      	cmp	r3, #1
 8005020:	d106      	bne.n	8005030 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005026:	4619      	mov	r1, r3
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fee9 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800502e:	e002      	b.n	8005036 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff ff9e 	bl	8004f72 <HAL_UART_RxCpltCallback>
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	2b01      	cmp	r3, #1
 8005052:	d108      	bne.n	8005066 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	b29b      	uxth	r3, r3
 800505c:	4619      	mov	r1, r3
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fece 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005064:	e002      	b.n	800506c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff ff8c 	bl	8004f84 <HAL_UART_RxHalfCpltCallback>
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b21      	cmp	r3, #33	; 0x21
 80050a6:	d108      	bne.n	80050ba <UART_DMAError+0x46>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2200      	movs	r2, #0
 80050b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80050b4:	68b8      	ldr	r0, [r7, #8]
 80050b6:	f000 f8d5 	bl	8005264 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b22      	cmp	r3, #34	; 0x22
 80050da:	d108      	bne.n	80050ee <UART_DMAError+0x7a>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80050e8:	68b8      	ldr	r0, [r7, #8]
 80050ea:	f000 f8d0 	bl	800528e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f043 0210 	orr.w	r2, r3, #16
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050fa:	68b8      	ldr	r0, [r7, #8]
 80050fc:	f7ff ff4b 	bl	8004f96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005118:	e02c      	b.n	8005174 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d028      	beq.n	8005174 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <UART_WaitOnFlagUntilTimeout+0x30>
 8005128:	f7fc f876 	bl	8001218 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	429a      	cmp	r2, r3
 8005136:	d21d      	bcs.n	8005174 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005146:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e00f      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	429a      	cmp	r2, r3
 8005190:	d0c3      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2222      	movs	r2, #34	; 0x22
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	4a23      	ldr	r2, [pc, #140]	; (8005258 <UART_Start_Receive_DMA+0xbc>)
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	4a22      	ldr	r2, [pc, #136]	; (800525c <UART_Start_Receive_DMA+0xc0>)
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	4a21      	ldr	r2, [pc, #132]	; (8005260 <UART_Start_Receive_DMA+0xc4>)
 80051da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	2200      	movs	r2, #0
 80051e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80051e4:	f107 0308 	add.w	r3, r7, #8
 80051e8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	f7fc f9a2 	bl	8001544 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005200:	2300      	movs	r3, #0
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800522c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695a      	ldr	r2, [r3, #20]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800524c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	08004fa9 	.word	0x08004fa9
 800525c:	0800503f 	.word	0x0800503f
 8005260:	08005075 	.word	0x08005075

08005264 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800527a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0201 	bic.w	r2, r2, #1
 80052b4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d107      	bne.n	80052ce <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0210 	bic.w	r2, r2, #16
 80052cc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff fe48 	bl	8004f96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005306:	bf00      	nop
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b21      	cmp	r3, #33	; 0x21
 8005320:	d13e      	bne.n	80053a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532a:	d114      	bne.n	8005356 <UART_Transmit_IT+0x48>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d110      	bne.n	8005356 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005348:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	1c9a      	adds	r2, r3, #2
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	621a      	str	r2, [r3, #32]
 8005354:	e008      	b.n	8005368 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	1c59      	adds	r1, r3, #1
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6211      	str	r1, [r2, #32]
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29b      	uxth	r3, r3
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4619      	mov	r1, r3
 8005376:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10f      	bne.n	800539c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800538a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800539a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7ff fdc7 	bl	8004f60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b22      	cmp	r3, #34	; 0x22
 80053ee:	f040 8099 	bne.w	8005524 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	d117      	bne.n	800542c <UART_Receive_IT+0x50>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d113      	bne.n	800542c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541a:	b29a      	uxth	r2, r3
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	1c9a      	adds	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	629a      	str	r2, [r3, #40]	; 0x28
 800542a:	e026      	b.n	800547a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543e:	d007      	beq.n	8005450 <UART_Receive_IT+0x74>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <UART_Receive_IT+0x82>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	b2da      	uxtb	r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	e008      	b.n	8005470 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800546a:	b2da      	uxtb	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29b      	uxth	r3, r3
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	4619      	mov	r1, r3
 8005488:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800548a:	2b00      	cmp	r3, #0
 800548c:	d148      	bne.n	8005520 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0220 	bic.w	r2, r2, #32
 800549c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d123      	bne.n	8005516 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0210 	bic.w	r2, r2, #16
 80054e2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b10      	cmp	r3, #16
 80054f0:	d10a      	bne.n	8005508 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fc76 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
 8005514:	e002      	b.n	800551c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff fd2b 	bl	8004f72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	e002      	b.n	8005526 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800556a:	f023 030c 	bic.w	r3, r3, #12
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	430b      	orrs	r3, r1
 8005576:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2c      	ldr	r2, [pc, #176]	; (8005644 <UART_SetConfig+0x114>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d103      	bne.n	80055a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005598:	f7fd ffb6 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	e002      	b.n	80055a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055a0:	f7fd ff9e 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 80055a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	009a      	lsls	r2, r3, #2
 80055b0:	441a      	add	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	4a22      	ldr	r2, [pc, #136]	; (8005648 <UART_SetConfig+0x118>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	0119      	lsls	r1, r3, #4
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009a      	lsls	r2, r3, #2
 80055d0:	441a      	add	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055dc:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <UART_SetConfig+0x118>)
 80055de:	fba3 0302 	umull	r0, r3, r3, r2
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	2064      	movs	r0, #100	; 0x64
 80055e6:	fb00 f303 	mul.w	r3, r0, r3
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	3332      	adds	r3, #50	; 0x32
 80055f0:	4a15      	ldr	r2, [pc, #84]	; (8005648 <UART_SetConfig+0x118>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055fc:	4419      	add	r1, r3
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	009a      	lsls	r2, r3, #2
 8005608:	441a      	add	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	fbb2 f2f3 	udiv	r2, r2, r3
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <UART_SetConfig+0x118>)
 8005616:	fba3 0302 	umull	r0, r3, r3, r2
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	2064      	movs	r0, #100	; 0x64
 800561e:	fb00 f303 	mul.w	r3, r0, r3
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	3332      	adds	r3, #50	; 0x32
 8005628:	4a07      	ldr	r2, [pc, #28]	; (8005648 <UART_SetConfig+0x118>)
 800562a:	fba2 2303 	umull	r2, r3, r2, r3
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	f003 020f 	and.w	r2, r3, #15
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	440a      	add	r2, r1
 800563a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40013800 	.word	0x40013800
 8005648:	51eb851f 	.word	0x51eb851f

0800564c <crc16_floating>:
        crc = (crc << 8) ^ crc16tab[(((crc >> 8) ^ (*((uint8_t *)(buf++)))) & 0x00FF)];
    return crc;
}

uint16_t crc16_floating(uint8_t next, uint16_t seed)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	460a      	mov	r2, r1
 8005656:	71fb      	strb	r3, [r7, #7]
 8005658:	4613      	mov	r3, r2
 800565a:	80bb      	strh	r3, [r7, #4]
    return (seed << 8) ^ crc16tab[((seed >> 8) ^ next) & 0x00FF];
 800565c:	88bb      	ldrh	r3, [r7, #4]
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	b21a      	sxth	r2, r3
 8005662:	88bb      	ldrh	r3, [r7, #4]
 8005664:	0a1b      	lsrs	r3, r3, #8
 8005666:	b29b      	uxth	r3, r3
 8005668:	4619      	mov	r1, r3
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	404b      	eors	r3, r1
 800566e:	b2db      	uxtb	r3, r3
 8005670:	4905      	ldr	r1, [pc, #20]	; (8005688 <crc16_floating+0x3c>)
 8005672:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005676:	b21b      	sxth	r3, r3
 8005678:	4053      	eors	r3, r2
 800567a:	b21b      	sxth	r3, r3
 800567c:	b29b      	uxth	r3, r3
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr
 8005688:	0800c46c 	.word	0x0800c46c

0800568c <SendFrameData>:

#include "frame_uart.h"
#include "crc.h"

void SendFrameData(uint8_t *pu8Src, uint16_t u16Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	460b      	mov	r3, r1
 800569a:	817b      	strh	r3, [r7, #10]
    const uint8_t *pu8Src_end = pu8Src + u16Src_len;
 800569c:	897b      	ldrh	r3, [r7, #10]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
    const uint8_t *pu8Dest_start = pu8Dest;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	83fb      	strh	r3, [r7, #30]

    *(pu8Dest++) = START_BYTE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	2245      	movs	r2, #69	; 0x45
 80056b4:	701a      	strb	r2, [r3, #0]
    while (pu8Src < pu8Src_end)
 80056b6:	e029      	b.n	800570c <SendFrameData+0x80>
    {
        if (*pu8Src == START_BYTE || *pu8Src == CHECK_BYTE || *pu8Src == STOP_BYTE)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b45      	cmp	r3, #69	; 0x45
 80056be:	d007      	beq.n	80056d0 <SendFrameData+0x44>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b60      	cmp	r3, #96	; 0x60
 80056c6:	d003      	beq.n	80056d0 <SendFrameData+0x44>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2bc4      	cmp	r3, #196	; 0xc4
 80056ce:	d10b      	bne.n	80056e8 <SendFrameData+0x5c>
        {
            *(pu8Dest++) = CHECK_BYTE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	2260      	movs	r2, #96	; 0x60
 80056d8:	701a      	strb	r2, [r3, #0]
            *(pu8Dest++) = *pu8Src;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	7812      	ldrb	r2, [r2, #0]
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e005      	b.n	80056f4 <SendFrameData+0x68>
        }
        else
        {
            *(pu8Dest++) = *pu8Src;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	7812      	ldrb	r2, [r2, #0]
 80056f2:	701a      	strb	r2, [r3, #0]
        }
        crc = crc16_floating(*pu8Src, crc);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	8bfa      	ldrh	r2, [r7, #30]
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff ffa5 	bl	800564c <crc16_floating>
 8005702:	4603      	mov	r3, r0
 8005704:	83fb      	strh	r3, [r7, #30]
        pu8Src++;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
    while (pu8Src < pu8Src_end)
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	429a      	cmp	r2, r3
 8005712:	d3d1      	bcc.n	80056b8 <SendFrameData+0x2c>
    }
    *(pu8Dest) = (char)(crc >> 8);
 8005714:	8bfb      	ldrh	r3, [r7, #30]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	b29b      	uxth	r3, r3
 800571a:	b2da      	uxtb	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3301      	adds	r3, #1
 8005724:	607b      	str	r3, [r7, #4]
    *(pu8Dest) = (char)crc;
 8005726:	8bfb      	ldrh	r3, [r7, #30]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3301      	adds	r3, #1
 8005732:	607b      	str	r3, [r7, #4]
    *(pu8Dest++) = STOP_BYTE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	607a      	str	r2, [r7, #4]
 800573a:	22c4      	movs	r2, #196	; 0xc4
 800573c:	701a      	strb	r2, [r3, #0]
    *(pu16Dest_len) = pu8Dest - pu8Dest_start;
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	b29a      	uxth	r2, r3
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	801a      	strh	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <receive_value>:
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
  return len;
}

void receive_value(uint8_t *data_dest, uint8_t *data, uint8_t length)
{
 8005752:	b480      	push	{r7}
 8005754:	b087      	sub	sp, #28
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	4613      	mov	r3, r2
 800575e:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < length; i++)
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e00a      	b.n	800577c <receive_value+0x2a>
    *data++ = *data_dest++;
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	1c53      	adds	r3, r2, #1
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	7812      	ldrb	r2, [r2, #0]
 8005774:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	3301      	adds	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	429a      	cmp	r2, r3
 8005782:	dbf0      	blt.n	8005766 <receive_value+0x14>
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005794:	f7fb fce8 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005798:	f000 f86e 	bl	8005878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800579c:	f000 fa10 	bl	8005bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80057a0:	f000 f9f0 	bl	8005b84 <MX_DMA_Init>
  MX_I2C1_Init();
 80057a4:	f000 f8aa 	bl	80058fc <MX_I2C1_Init>
  MX_SPI2_Init();
 80057a8:	f000 f8d6 	bl	8005958 <MX_SPI2_Init>
  MX_TIM3_Init();
 80057ac:	f000 f90a 	bl	80059c4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80057b0:	f000 f9be 	bl	8005b30 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80057b4:	f000 f96e 	bl	8005a94 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80057b8:	210c      	movs	r1, #12
 80057ba:	4825      	ldr	r0, [pc, #148]	; (8005850 <main+0xc0>)
 80057bc:	f7fe fa94 	bl	8003ce8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80057c0:	2108      	movs	r1, #8
 80057c2:	4823      	ldr	r0, [pc, #140]	; (8005850 <main+0xc0>)
 80057c4:	f7fe fa90 	bl	8003ce8 <HAL_TIM_PWM_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
 80057c8:	2224      	movs	r2, #36	; 0x24
 80057ca:	4922      	ldr	r1, [pc, #136]	; (8005854 <main+0xc4>)
 80057cc:	4822      	ldr	r0, [pc, #136]	; (8005858 <main+0xc8>)
 80057ce:	f7ff f9ce 	bl	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80057d2:	4b22      	ldr	r3, [pc, #136]	; (800585c <main+0xcc>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4b20      	ldr	r3, [pc, #128]	; (800585c <main+0xcc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0204 	bic.w	r2, r2, #4
 80057e0:	601a      	str	r2, [r3, #0]
  runRadio();
 80057e2:	f004 fc69 	bl	800a0b8 <runRadio>
  while (MPU9255_Init(&hi2c1) == 1)
 80057e6:	e006      	b.n	80057f6 <main+0x66>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80057e8:	2104      	movs	r1, #4
 80057ea:	481d      	ldr	r0, [pc, #116]	; (8005860 <main+0xd0>)
 80057ec:	f7fc fa8a 	bl	8001d04 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80057f0:	2064      	movs	r0, #100	; 0x64
 80057f2:	f7fb fd1b 	bl	800122c <HAL_Delay>
  while (MPU9255_Init(&hi2c1) == 1)
 80057f6:	481b      	ldr	r0, [pc, #108]	; (8005864 <main+0xd4>)
 80057f8:	f000 fc64 	bl	80060c4 <MPU9255_Init>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d0f2      	beq.n	80057e8 <main+0x58>
  }
  HAL_Delay(3000);
 8005802:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005806:	f7fb fd11 	bl	800122c <HAL_Delay>
  while (payload_packet.throttle > 1050)
 800580a:	e004      	b.n	8005816 <main+0x86>
  {
    // Read again
    RX_data();
 800580c:	f004 fc8c 	bl	800a128 <RX_data>
    HAL_Delay(20);
 8005810:	2014      	movs	r0, #20
 8005812:	f7fb fd0b 	bl	800122c <HAL_Delay>
  while (payload_packet.throttle > 1050)
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <main+0xd8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f240 421a 	movw	r2, #1050	; 0x41a
 800581e:	4293      	cmp	r3, r2
 8005820:	d8f4      	bhi.n	800580c <main+0x7c>
  }

  start_time = HAL_GetTick();
 8005822:	f7fb fcf9 	bl	8001218 <HAL_GetTick>
 8005826:	4603      	mov	r3, r0
 8005828:	4a10      	ldr	r2, [pc, #64]	; (800586c <main+0xdc>)
 800582a:	6013      	str	r3, [r2, #0]
  while ((HAL_GetTick() - start_time) < 4000)
 800582c:	e003      	b.n	8005836 <main+0xa6>
  {
    readAll(&hi2c1, &MPU9255);
 800582e:	4910      	ldr	r1, [pc, #64]	; (8005870 <main+0xe0>)
 8005830:	480c      	ldr	r0, [pc, #48]	; (8005864 <main+0xd4>)
 8005832:	f000 fcad 	bl	8006190 <readAll>
  while ((HAL_GetTick() - start_time) < 4000)
 8005836:	f7fb fcef 	bl	8001218 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <main+0xdc>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005846:	d3f2      	bcc.n	800582e <main+0x9e>
  }
  //  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
  //  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  HAL_TIM_Base_Start_IT(&htim4);
 8005848:	480a      	ldr	r0, [pc, #40]	; (8005874 <main+0xe4>)
 800584a:	f7fe f9ab 	bl	8003ba4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800584e:	e7fe      	b.n	800584e <main+0xbe>
 8005850:	20000174 	.word	0x20000174
 8005854:	20000318 	.word	0x20000318
 8005858:	20000204 	.word	0x20000204
 800585c:	20000248 	.word	0x20000248
 8005860:	40010c00 	.word	0x40010c00
 8005864:	200000c8 	.word	0x200000c8
 8005868:	20000490 	.word	0x20000490
 800586c:	200002c8 	.word	0x200002c8
 8005870:	2000028c 	.word	0x2000028c
 8005874:	200001bc 	.word	0x200001bc

08005878 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b090      	sub	sp, #64	; 0x40
 800587c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800587e:	f107 0318 	add.w	r3, r7, #24
 8005882:	2228      	movs	r2, #40	; 0x28
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f004 fef4 	bl	800a674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800588c:	1d3b      	adds	r3, r7, #4
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	605a      	str	r2, [r3, #4]
 8005894:	609a      	str	r2, [r3, #8]
 8005896:	60da      	str	r2, [r3, #12]
 8005898:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800589a:	2302      	movs	r3, #2
 800589c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800589e:	2301      	movs	r3, #1
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80058a2:	2310      	movs	r3, #16
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058a6:	2302      	movs	r3, #2
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80058aa:	2300      	movs	r3, #0
 80058ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80058ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80058b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058b4:	f107 0318 	add.w	r3, r7, #24
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fd fa3d 	bl	8002d38 <HAL_RCC_OscConfig>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80058c4:	f000 faf8 	bl	8005eb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058c8:	230f      	movs	r3, #15
 80058ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058cc:	2302      	movs	r3, #2
 80058ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80058d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	2102      	movs	r1, #2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fd fcaa 	bl	800323c <HAL_RCC_ClockConfig>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80058ee:	f000 fae3 	bl	8005eb8 <Error_Handler>
  }
}
 80058f2:	bf00      	nop
 80058f4:	3740      	adds	r7, #64	; 0x40
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <MX_I2C1_Init+0x50>)
 8005902:	4a13      	ldr	r2, [pc, #76]	; (8005950 <MX_I2C1_Init+0x54>)
 8005904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005906:	4b11      	ldr	r3, [pc, #68]	; (800594c <MX_I2C1_Init+0x50>)
 8005908:	4a12      	ldr	r2, [pc, #72]	; (8005954 <MX_I2C1_Init+0x58>)
 800590a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <MX_I2C1_Init+0x50>)
 800590e:	2200      	movs	r2, #0
 8005910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005912:	4b0e      	ldr	r3, [pc, #56]	; (800594c <MX_I2C1_Init+0x50>)
 8005914:	2200      	movs	r2, #0
 8005916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <MX_I2C1_Init+0x50>)
 800591a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800591e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <MX_I2C1_Init+0x50>)
 8005922:	2200      	movs	r2, #0
 8005924:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <MX_I2C1_Init+0x50>)
 8005928:	2200      	movs	r2, #0
 800592a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800592c:	4b07      	ldr	r3, [pc, #28]	; (800594c <MX_I2C1_Init+0x50>)
 800592e:	2200      	movs	r2, #0
 8005930:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <MX_I2C1_Init+0x50>)
 8005934:	2200      	movs	r2, #0
 8005936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005938:	4804      	ldr	r0, [pc, #16]	; (800594c <MX_I2C1_Init+0x50>)
 800593a:	f7fc f9fd 	bl	8001d38 <HAL_I2C_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005944:	f000 fab8 	bl	8005eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8005948:	bf00      	nop
 800594a:	bd80      	pop	{r7, pc}
 800594c:	200000c8 	.word	0x200000c8
 8005950:	40005400 	.word	0x40005400
 8005954:	000186a0 	.word	0x000186a0

08005958 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800595c:	4b17      	ldr	r3, [pc, #92]	; (80059bc <MX_SPI2_Init+0x64>)
 800595e:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <MX_SPI2_Init+0x68>)
 8005960:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005962:	4b16      	ldr	r3, [pc, #88]	; (80059bc <MX_SPI2_Init+0x64>)
 8005964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005968:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <MX_SPI2_Init+0x64>)
 800596c:	2200      	movs	r2, #0
 800596e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005970:	4b12      	ldr	r3, [pc, #72]	; (80059bc <MX_SPI2_Init+0x64>)
 8005972:	2200      	movs	r2, #0
 8005974:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005976:	4b11      	ldr	r3, [pc, #68]	; (80059bc <MX_SPI2_Init+0x64>)
 8005978:	2200      	movs	r2, #0
 800597a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <MX_SPI2_Init+0x64>)
 800597e:	2200      	movs	r2, #0
 8005980:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005982:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <MX_SPI2_Init+0x64>)
 8005984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005988:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <MX_SPI2_Init+0x64>)
 800598c:	2200      	movs	r2, #0
 800598e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <MX_SPI2_Init+0x64>)
 8005992:	2200      	movs	r2, #0
 8005994:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <MX_SPI2_Init+0x64>)
 8005998:	2200      	movs	r2, #0
 800599a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800599c:	4b07      	ldr	r3, [pc, #28]	; (80059bc <MX_SPI2_Init+0x64>)
 800599e:	2200      	movs	r2, #0
 80059a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <MX_SPI2_Init+0x64>)
 80059a4:	220a      	movs	r2, #10
 80059a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80059a8:	4804      	ldr	r0, [pc, #16]	; (80059bc <MX_SPI2_Init+0x64>)
 80059aa:	f7fd fddf 	bl	800356c <HAL_SPI_Init>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80059b4:	f000 fa80 	bl	8005eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 80059b8:	bf00      	nop
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	2000011c 	.word	0x2000011c
 80059c0:	40003800 	.word	0x40003800

080059c4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059ca:	f107 0320 	add.w	r3, r7, #32
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059d4:	1d3b      	adds	r3, r7, #4
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	605a      	str	r2, [r3, #4]
 80059dc:	609a      	str	r2, [r3, #8]
 80059de:	60da      	str	r2, [r3, #12]
 80059e0:	611a      	str	r2, [r3, #16]
 80059e2:	615a      	str	r2, [r3, #20]
 80059e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80059e6:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <MX_TIM3_Init+0xc8>)
 80059e8:	4a29      	ldr	r2, [pc, #164]	; (8005a90 <MX_TIM3_Init+0xcc>)
 80059ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80059ec:	4b27      	ldr	r3, [pc, #156]	; (8005a8c <MX_TIM3_Init+0xc8>)
 80059ee:	223f      	movs	r2, #63	; 0x3f
 80059f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059f2:	4b26      	ldr	r3, [pc, #152]	; (8005a8c <MX_TIM3_Init+0xc8>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80059f8:	4b24      	ldr	r3, [pc, #144]	; (8005a8c <MX_TIM3_Init+0xc8>)
 80059fa:	f644 6220 	movw	r2, #20000	; 0x4e20
 80059fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a00:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <MX_TIM3_Init+0xc8>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a06:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <MX_TIM3_Init+0xc8>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005a0c:	481f      	ldr	r0, [pc, #124]	; (8005a8c <MX_TIM3_Init+0xc8>)
 8005a0e:	f7fe f91b 	bl	8003c48 <HAL_TIM_PWM_Init>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005a18:	f000 fa4e 	bl	8005eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a24:	f107 0320 	add.w	r3, r7, #32
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4818      	ldr	r0, [pc, #96]	; (8005a8c <MX_TIM3_Init+0xc8>)
 8005a2c:	f7fe ff50 	bl	80048d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005a36:	f000 fa3f 	bl	8005eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a3a:	2360      	movs	r3, #96	; 0x60
 8005a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8005a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	2208      	movs	r2, #8
 8005a50:	4619      	mov	r1, r3
 8005a52:	480e      	ldr	r0, [pc, #56]	; (8005a8c <MX_TIM3_Init+0xc8>)
 8005a54:	f7fe faf2 	bl	800403c <HAL_TIM_PWM_ConfigChannel>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8005a5e:	f000 fa2b 	bl	8005eb8 <Error_Handler>
  }
  sConfigOC.Pulse = 900;
 8005a62:	f44f 7361 	mov.w	r3, #900	; 0x384
 8005a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005a68:	1d3b      	adds	r3, r7, #4
 8005a6a:	220c      	movs	r2, #12
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4807      	ldr	r0, [pc, #28]	; (8005a8c <MX_TIM3_Init+0xc8>)
 8005a70:	f7fe fae4 	bl	800403c <HAL_TIM_PWM_ConfigChannel>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8005a7a:	f000 fa1d 	bl	8005eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005a7e:	4803      	ldr	r0, [pc, #12]	; (8005a8c <MX_TIM3_Init+0xc8>)
 8005a80:	f004 fc7e 	bl	800a380 <HAL_TIM_MspPostInit>
}
 8005a84:	bf00      	nop
 8005a86:	3728      	adds	r7, #40	; 0x28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000174 	.word	0x20000174
 8005a90:	40000400 	.word	0x40000400

08005a94 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	609a      	str	r2, [r3, #8]
 8005aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	; (8005b28 <MX_TIM4_Init+0x94>)
 8005ab2:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <MX_TIM4_Init+0x98>)
 8005ab4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8005ab6:	4b1c      	ldr	r3, [pc, #112]	; (8005b28 <MX_TIM4_Init+0x94>)
 8005ab8:	f240 227f 	movw	r2, #639	; 0x27f
 8005abc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005abe:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <MX_TIM4_Init+0x94>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005ac4:	4b18      	ldr	r3, [pc, #96]	; (8005b28 <MX_TIM4_Init+0x94>)
 8005ac6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005aca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005acc:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <MX_TIM4_Init+0x94>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <MX_TIM4_Init+0x94>)
 8005ad4:	2280      	movs	r2, #128	; 0x80
 8005ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005ad8:	4813      	ldr	r0, [pc, #76]	; (8005b28 <MX_TIM4_Init+0x94>)
 8005ada:	f7fe f813 	bl	8003b04 <HAL_TIM_Base_Init>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005ae4:	f000 f9e8 	bl	8005eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005aee:	f107 0308 	add.w	r3, r7, #8
 8005af2:	4619      	mov	r1, r3
 8005af4:	480c      	ldr	r0, [pc, #48]	; (8005b28 <MX_TIM4_Init+0x94>)
 8005af6:	f7fe fb5f 	bl	80041b8 <HAL_TIM_ConfigClockSource>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005b00:	f000 f9da 	bl	8005eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b04:	2300      	movs	r3, #0
 8005b06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4805      	ldr	r0, [pc, #20]	; (8005b28 <MX_TIM4_Init+0x94>)
 8005b12:	f7fe fedd 	bl	80048d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005b1c:	f000 f9cc 	bl	8005eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 8005b20:	bf00      	nop
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	200001bc 	.word	0x200001bc
 8005b2c:	40000800 	.word	0x40000800

08005b30 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <MX_USART1_UART_Init+0x4c>)
 8005b36:	4a12      	ldr	r2, [pc, #72]	; (8005b80 <MX_USART1_UART_Init+0x50>)
 8005b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005b3a:	4b10      	ldr	r3, [pc, #64]	; (8005b7c <MX_USART1_UART_Init+0x4c>)
 8005b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005b42:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <MX_USART1_UART_Init+0x4c>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <MX_USART1_UART_Init+0x4c>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b4e:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <MX_USART1_UART_Init+0x4c>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b54:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <MX_USART1_UART_Init+0x4c>)
 8005b56:	220c      	movs	r2, #12
 8005b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b5a:	4b08      	ldr	r3, [pc, #32]	; (8005b7c <MX_USART1_UART_Init+0x4c>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b60:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <MX_USART1_UART_Init+0x4c>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005b66:	4805      	ldr	r0, [pc, #20]	; (8005b7c <MX_USART1_UART_Init+0x4c>)
 8005b68:	f7fe ff22 	bl	80049b0 <HAL_UART_Init>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005b72:	f000 f9a1 	bl	8005eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8005b76:	bf00      	nop
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000204 	.word	0x20000204
 8005b80:	40013800 	.word	0x40013800

08005b84 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <MX_DMA_Init+0x38>)
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	4a0b      	ldr	r2, [pc, #44]	; (8005bbc <MX_DMA_Init+0x38>)
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	6153      	str	r3, [r2, #20]
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <MX_DMA_Init+0x38>)
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	607b      	str	r3, [r7, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	200f      	movs	r0, #15
 8005ba8:	f7fb fc3b 	bl	8001422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005bac:	200f      	movs	r0, #15
 8005bae:	f7fb fc54 	bl	800145a <HAL_NVIC_EnableIRQ>
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000

08005bc0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bc6:	f107 0310 	add.w	r3, r7, #16
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	605a      	str	r2, [r3, #4]
 8005bd0:	609a      	str	r2, [r3, #8]
 8005bd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bd4:	4b33      	ldr	r3, [pc, #204]	; (8005ca4 <MX_GPIO_Init+0xe4>)
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	4a32      	ldr	r2, [pc, #200]	; (8005ca4 <MX_GPIO_Init+0xe4>)
 8005bda:	f043 0310 	orr.w	r3, r3, #16
 8005bde:	6193      	str	r3, [r2, #24]
 8005be0:	4b30      	ldr	r3, [pc, #192]	; (8005ca4 <MX_GPIO_Init+0xe4>)
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bec:	4b2d      	ldr	r3, [pc, #180]	; (8005ca4 <MX_GPIO_Init+0xe4>)
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	4a2c      	ldr	r2, [pc, #176]	; (8005ca4 <MX_GPIO_Init+0xe4>)
 8005bf2:	f043 0308 	orr.w	r3, r3, #8
 8005bf6:	6193      	str	r3, [r2, #24]
 8005bf8:	4b2a      	ldr	r3, [pc, #168]	; (8005ca4 <MX_GPIO_Init+0xe4>)
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c04:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <MX_GPIO_Init+0xe4>)
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	4a26      	ldr	r2, [pc, #152]	; (8005ca4 <MX_GPIO_Init+0xe4>)
 8005c0a:	f043 0304 	orr.w	r3, r3, #4
 8005c0e:	6193      	str	r3, [r2, #24]
 8005c10:	4b24      	ldr	r3, [pc, #144]	; (8005ca4 <MX_GPIO_Init+0xe4>)
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	607b      	str	r3, [r7, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin | BUTTON2_Pin | BUTTON3_Pin, GPIO_PIN_RESET);
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005c22:	4821      	ldr	r0, [pc, #132]	; (8005ca8 <MX_GPIO_Init+0xe8>)
 8005c24:	f7fc f856 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin | NRF_CSN_Pin, GPIO_PIN_RESET);
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f241 0104 	movw	r1, #4100	; 0x1004
 8005c2e:	481f      	ldr	r0, [pc, #124]	; (8005cac <MX_GPIO_Init+0xec>)
 8005c30:	f7fc f850 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8005c34:	2200      	movs	r2, #0
 8005c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c3a:	481d      	ldr	r0, [pc, #116]	; (8005cb0 <MX_GPIO_Init+0xf0>)
 8005c3c:	f7fc f84a 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = LED_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8005c40:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c46:	2301      	movs	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c52:	f107 0310 	add.w	r3, r7, #16
 8005c56:	4619      	mov	r1, r3
 8005c58:	4813      	ldr	r0, [pc, #76]	; (8005ca8 <MX_GPIO_Init+0xe8>)
 8005c5a:	f7fb feb7 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin | NRF_CSN_Pin;
 8005c5e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c64:	2301      	movs	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	4619      	mov	r1, r3
 8005c76:	480d      	ldr	r0, [pc, #52]	; (8005cac <MX_GPIO_Init+0xec>)
 8005c78:	f7fb fea8 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8005c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c82:	2301      	movs	r3, #1
 8005c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8005c8e:	f107 0310 	add.w	r3, r7, #16
 8005c92:	4619      	mov	r1, r3
 8005c94:	4806      	ldr	r0, [pc, #24]	; (8005cb0 <MX_GPIO_Init+0xf0>)
 8005c96:	f7fb fe99 	bl	80019cc <HAL_GPIO_Init>
}
 8005c9a:	bf00      	nop
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	40011000 	.word	0x40011000
 8005cac:	40010c00 	.word	0x40010c00
 8005cb0:	40010800 	.word	0x40010800

08005cb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t start = HAL_GetTick();
 8005cbc:	f7fb faac 	bl	8001218 <HAL_GetTick>
 8005cc0:	60f8      	str	r0, [r7, #12]

  if (htim->Instance == htim4.Instance)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b3c      	ldr	r3, [pc, #240]	; (8005db8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d169      	bne.n	8005da2 <HAL_TIM_PeriodElapsedCallback+0xee>
  {
    RX_data();
 8005cce:	f004 fa2b 	bl	800a128 <RX_data>
    readAll(&hi2c1, &MPU9255);
 8005cd2:	493a      	ldr	r1, [pc, #232]	; (8005dbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005cd4:	483a      	ldr	r0, [pc, #232]	; (8005dc0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8005cd6:	f000 fa5b 	bl	8006190 <readAll>

    pid_roll(payload_packet.roll, MPU9255.roll, MPU9255.GyroX, &pid);
 8005cda:	4b3a      	ldr	r3, [pc, #232]	; (8005dc4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	b298      	uxth	r0, r3
 8005ce0:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005ce2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005ce4:	4b35      	ldr	r3, [pc, #212]	; (8005dbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	4b37      	ldr	r3, [pc, #220]	; (8005dc8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005cea:	f003 fff9 	bl	8009ce0 <pid_roll>
    pid_pitch(payload_packet.pitch, MPU9255.pitch, MPU9255.GyroY, &pid);
 8005cee:	4b35      	ldr	r3, [pc, #212]	; (8005dc4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	b298      	uxth	r0, r3
 8005cf4:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005cf6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005cf8:	4b30      	ldr	r3, [pc, #192]	; (8005dbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	4b32      	ldr	r3, [pc, #200]	; (8005dc8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005cfe:	f004 f893 	bl	8009e28 <pid_pitch>
    pid_yaw(payload_packet.yaw, MPU9255.GyroZ, &pid);
 8005d02:	4b30      	ldr	r3, [pc, #192]	; (8005dc4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	4a2c      	ldr	r2, [pc, #176]	; (8005dbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005d0a:	6951      	ldr	r1, [r2, #20]
 8005d0c:	4a2e      	ldr	r2, [pc, #184]	; (8005dc8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f004 f936 	bl	8009f80 <pid_yaw>

    // value PWM
    calculate_motor_output(&esc_right, &esc_left, &servo_right, &servo_left, payload_packet.throttle, &pid);
 8005d14:	4b2b      	ldr	r3, [pc, #172]	; (8005dc4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	4a2b      	ldr	r2, [pc, #172]	; (8005dc8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005d1c:	9201      	str	r2, [sp, #4]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	4b2a      	ldr	r3, [pc, #168]	; (8005dcc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005d22:	4a2b      	ldr	r2, [pc, #172]	; (8005dd0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005d24:	492b      	ldr	r1, [pc, #172]	; (8005dd4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005d26:	482c      	ldr	r0, [pc, #176]	; (8005dd8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8005d28:	f000 f8f8 	bl	8005f1c <calculate_motor_output>

     htim3.Instance->CCR3 = servo_right;
 8005d2c:	4b28      	ldr	r3, [pc, #160]	; (8005dd0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005d2e:	881a      	ldrh	r2, [r3, #0]
 8005d30:	4b2a      	ldr	r3, [pc, #168]	; (8005ddc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	63da      	str	r2, [r3, #60]	; 0x3c
     htim3.Instance->CCR4 = servo_left;
 8005d36:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005d38:	881a      	ldrh	r2, [r3, #0]
 8005d3a:	4b28      	ldr	r3, [pc, #160]	; (8005ddc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40
//    htim3.Instance->CCR3 = esc_right; // trang
//    htim3.Instance->CCR4 = esc_left;  // vang

    // send to GUI
   // q_Roll_angle = MPU9255.pitch + 2000;
      q_Roll_angle = MPU9255.GyroY+ 2000 ;
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	4926      	ldr	r1, [pc, #152]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fa fee4 	bl	8000b14 <__addsf3>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4b24      	ldr	r3, [pc, #144]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005d52:	601a      	str	r2, [r3, #0]

    sprintf((char *)f_trans, "%d%d", (uint16_t)(2000+set_point), (uint16_t)q_Roll_angle);
 8005d54:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4921      	ldr	r1, [pc, #132]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fa feda 	bl	8000b14 <__addsf3>
 8005d60:	4603      	mov	r3, r0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fb f9e0 	bl	8001128 <__aeabi_f2uiz>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461c      	mov	r4, r3
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fb f9d8 	bl	8001128 <__aeabi_f2uiz>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	491b      	ldr	r1, [pc, #108]	; (8005dec <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005d80:	481b      	ldr	r0, [pc, #108]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005d82:	f004 fc7f 	bl	800a684 <siprintf>
    SendFrameData(f_trans, FRAME_DATA_TX, f_dest_trans, &f_dest_len_t);
 8005d86:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005d88:	4a1b      	ldr	r2, [pc, #108]	; (8005df8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005d8a:	2108      	movs	r1, #8
 8005d8c:	4818      	ldr	r0, [pc, #96]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005d8e:	f7ff fc7d 	bl	800568c <SendFrameData>
    HAL_UART_Transmit(&huart1, f_dest_trans, f_dest_len_t, 1000);
 8005d92:	4b18      	ldr	r3, [pc, #96]	; (8005df4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d9a:	4917      	ldr	r1, [pc, #92]	; (8005df8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005d9c:	4817      	ldr	r0, [pc, #92]	; (8005dfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005d9e:	f7fe fe54 	bl	8004a4a <HAL_UART_Transmit>
  }
  uint32_t time = HAL_GetTick() - start;
 8005da2:	f7fb fa39 	bl	8001218 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	60bb      	str	r3, [r7, #8]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd90      	pop	{r4, r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200001bc 	.word	0x200001bc
 8005dbc:	2000028c 	.word	0x2000028c
 8005dc0:	200000c8 	.word	0x200000c8
 8005dc4:	20000490 	.word	0x20000490
 8005dc8:	200002bc 	.word	0x200002bc
 8005dcc:	20000366 	.word	0x20000366
 8005dd0:	20000364 	.word	0x20000364
 8005dd4:	2000036a 	.word	0x2000036a
 8005dd8:	20000368 	.word	0x20000368
 8005ddc:	20000174 	.word	0x20000174
 8005de0:	44fa0000 	.word	0x44fa0000
 8005de4:	2000033c 	.word	0x2000033c
 8005de8:	200002f4 	.word	0x200002f4
 8005dec:	0800c440 	.word	0x0800c440
 8005df0:	200002f8 	.word	0x200002f8
 8005df4:	20000314 	.word	0x20000314
 8005df8:	20000300 	.word	0x20000300
 8005dfc:	20000204 	.word	0x20000204

08005e00 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	807b      	strh	r3, [r7, #2]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
 8005e0c:	2224      	movs	r2, #36	; 0x24
 8005e0e:	491d      	ldr	r1, [pc, #116]	; (8005e84 <HAL_UARTEx_RxEventCallback+0x84>)
 8005e10:	481d      	ldr	r0, [pc, #116]	; (8005e88 <HAL_UARTEx_RxEventCallback+0x88>)
 8005e12:	f7fe feac 	bl	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8005e16:	4b1d      	ldr	r3, [pc, #116]	; (8005e8c <HAL_UARTEx_RxEventCallback+0x8c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4b1b      	ldr	r3, [pc, #108]	; (8005e8c <HAL_UARTEx_RxEventCallback+0x8c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0204 	bic.w	r2, r2, #4
 8005e24:	601a      	str	r2, [r3, #0]
  receive_value(f_recei, (uint8_t *)&pid_para, Size);
 8005e26:	887b      	ldrh	r3, [r7, #2]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4918      	ldr	r1, [pc, #96]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e2e:	4815      	ldr	r0, [pc, #84]	; (8005e84 <HAL_UARTEx_RxEventCallback+0x84>)
 8005e30:	f7ff fc8f 	bl	8005752 <receive_value>

  Kp_rate_pitch = pid_para.Kp_p;
 8005e34:	4b16      	ldr	r3, [pc, #88]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4a16      	ldr	r2, [pc, #88]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x94>)
 8005e3a:	6013      	str	r3, [r2, #0]
  Ki_rate_pitch = pid_para.Ki_p;
 8005e3c:	4b14      	ldr	r3, [pc, #80]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <HAL_UARTEx_RxEventCallback+0x98>)
 8005e42:	6013      	str	r3, [r2, #0]
  Kd_rate_pitch = pid_para.Kd_p;
 8005e44:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	4a14      	ldr	r2, [pc, #80]	; (8005e9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8005e4a:	6013      	str	r3, [r2, #0]

  Kp_angle_pitch = pid_para.Kp_r;
 8005e4c:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8005e52:	6013      	str	r3, [r2, #0]
  Ki_angle_pitch = pid_para.Ki_r;
 8005e54:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	4a12      	ldr	r2, [pc, #72]	; (8005ea4 <HAL_UARTEx_RxEventCallback+0xa4>)
 8005e5a:	6013      	str	r3, [r2, #0]
  Kd_angle_pitch = pid_para.Kd_r;
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4a11      	ldr	r2, [pc, #68]	; (8005ea8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8005e62:	6013      	str	r3, [r2, #0]

  MOTOR_LEFT_OFFSET = pid_para.off_motor_l;
 8005e64:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	4a10      	ldr	r2, [pc, #64]	; (8005eac <HAL_UARTEx_RxEventCallback+0xac>)
 8005e6a:	6013      	str	r3, [r2, #0]
  MOTOR_RIGHT_OFFSET = pid_para.off_motor_r;
 8005e6c:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	4a0f      	ldr	r2, [pc, #60]	; (8005eb0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8005e72:	6013      	str	r3, [r2, #0]
  set_point =  pid_para.setpoint;
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	4a0e      	ldr	r2, [pc, #56]	; (8005eb4 <HAL_UARTEx_RxEventCallback+0xb4>)
 8005e7a:	6013      	str	r3, [r2, #0]
  //  f_dest_len_r = Size;
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20000318 	.word	0x20000318
 8005e88:	20000204 	.word	0x20000204
 8005e8c:	20000248 	.word	0x20000248
 8005e90:	20000340 	.word	0x20000340
 8005e94:	200002e4 	.word	0x200002e4
 8005e98:	200002e8 	.word	0x200002e8
 8005e9c:	200002ec 	.word	0x200002ec
 8005ea0:	200002cc 	.word	0x200002cc
 8005ea4:	200002d0 	.word	0x200002d0
 8005ea8:	200002d4 	.word	0x200002d4
 8005eac:	20000020 	.word	0x20000020
 8005eb0:	2000001c 	.word	0x2000001c
 8005eb4:	200002f4 	.word	0x200002f4

08005eb8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005ebc:	bf00      	nop
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <map>:
extern volatile float MOTOR_RIGHT_OFFSET ;
extern volatile float MOTOR_LEFT_OFFSET ;
#endif

static int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
 8005ec4:	b490      	push	{r4, r7}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	80fb      	strh	r3, [r7, #6]
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	80bb      	strh	r3, [r7, #4]
 8005eda:	460b      	mov	r3, r1
 8005edc:	807b      	strh	r3, [r7, #2]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005ee2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ee6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8005ef0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005ef4:	1a8a      	subs	r2, r1, r2
 8005ef6:	fb03 f202 	mul.w	r2, r3, r2
 8005efa:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005efe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f02:	1acb      	subs	r3, r1, r3
 8005f04:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	883b      	ldrh	r3, [r7, #0]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	b21b      	sxth	r3, r3
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc90      	pop	{r4, r7}
 8005f1a:	4770      	bx	lr

08005f1c <calculate_motor_output>:

void calculate_motor_output(uint16_t *esc_right, uint16_t *esc_left, uint16_t *servo_right, uint16_t *servo_left, uint16_t throttle_rc, PID_t *pid)
{
 8005f1c:	b5b0      	push	{r4, r5, r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]

    // value PWM
	throttle_rc = 1150;
 8005f2a:	f240 437e 	movw	r3, #1150	; 0x47e
 8005f2e:	843b      	strh	r3, [r7, #32]
    *esc_right = throttle_rc - pid->PID_pitch_out  ;
 8005f30:	8c3b      	ldrh	r3, [r7, #32]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fa fea2 	bl	8000c7c <__aeabi_i2f>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f7fa fde5 	bl	8000b10 <__aeabi_fsub>
 8005f46:	4603      	mov	r3, r0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fb f8ed 	bl	8001128 <__aeabi_f2uiz>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	801a      	strh	r2, [r3, #0]
    *esc_left = throttle_rc + pid->PID_pitch_out ;
 8005f56:	8c3b      	ldrh	r3, [r7, #32]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fa fe8f 	bl	8000c7c <__aeabi_i2f>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f7fa fdd4 	bl	8000b14 <__addsf3>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fb f8da 	bl	8001128 <__aeabi_f2uiz>
 8005f74:	4603      	mov	r3, r0
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	801a      	strh	r2, [r3, #0]
    *servo_right = 1500 + pid->PID_roll_out - pid->PID_yaw_out;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	494b      	ldr	r1, [pc, #300]	; (80060b0 <calculate_motor_output+0x194>)
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fa fdc6 	bl	8000b14 <__addsf3>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f7fa fdbc 	bl	8000b10 <__aeabi_fsub>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fb f8c4 	bl	8001128 <__aeabi_f2uiz>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	801a      	strh	r2, [r3, #0]
    *servo_left = 1450 - pid->PID_roll_out - pid->PID_yaw_out;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4619      	mov	r1, r3
 8005fae:	4841      	ldr	r0, [pc, #260]	; (80060b4 <calculate_motor_output+0x198>)
 8005fb0:	f7fa fdae 	bl	8000b10 <__aeabi_fsub>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f7fa fda6 	bl	8000b10 <__aeabi_fsub>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fb f8ae 	bl	8001128 <__aeabi_f2uiz>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	801a      	strh	r2, [r3, #0]

    if (*esc_right < 1000)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fdc:	d203      	bcs.n	8005fe6 <calculate_motor_output+0xca>
    {
        *esc_right = 1000;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fe4:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_right > 2000)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005fee:	d903      	bls.n	8005ff8 <calculate_motor_output+0xdc>
    {
        *esc_right = 2000;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005ff6:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left < 1000)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006000:	d203      	bcs.n	800600a <calculate_motor_output+0xee>
    {
        *esc_left = 1000;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006008:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left > 2000)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006012:	d903      	bls.n	800601c <calculate_motor_output+0x100>
    {
        *esc_left = 2000;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800601a:	801a      	strh	r2, [r3, #0]
    }

    //Gioi han Servo


    *esc_right = map(*esc_right, 1000, 2000, MOTOR_RIGHT_OFFSET, MOTOR_RIGHT_OFFSET+900); // limited rate of motors
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b21c      	sxth	r4, r3
 8006022:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <calculate_motor_output+0x19c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f7fb f858 	bl	80010dc <__aeabi_f2iz>
 800602c:	4603      	mov	r3, r0
 800602e:	b21d      	sxth	r5, r3
 8006030:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <calculate_motor_output+0x19c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4921      	ldr	r1, [pc, #132]	; (80060bc <calculate_motor_output+0x1a0>)
 8006036:	4618      	mov	r0, r3
 8006038:	f7fa fd6c 	bl	8000b14 <__addsf3>
 800603c:	4603      	mov	r3, r0
 800603e:	4618      	mov	r0, r3
 8006040:	f7fb f84c 	bl	80010dc <__aeabi_f2iz>
 8006044:	4603      	mov	r3, r0
 8006046:	b21b      	sxth	r3, r3
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	462b      	mov	r3, r5
 800604c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006050:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff ff35 	bl	8005ec4 <map>
 800605a:	4603      	mov	r3, r0
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	801a      	strh	r2, [r3, #0]
    *esc_left = map(*esc_left, 1000, 2000, MOTOR_LEFT_OFFSET, MOTOR_LEFT_OFFSET + 900);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b21c      	sxth	r4, r3
 8006068:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <calculate_motor_output+0x1a4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f7fb f835 	bl	80010dc <__aeabi_f2iz>
 8006072:	4603      	mov	r3, r0
 8006074:	b21d      	sxth	r5, r3
 8006076:	4b12      	ldr	r3, [pc, #72]	; (80060c0 <calculate_motor_output+0x1a4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4910      	ldr	r1, [pc, #64]	; (80060bc <calculate_motor_output+0x1a0>)
 800607c:	4618      	mov	r0, r3
 800607e:	f7fa fd49 	bl	8000b14 <__addsf3>
 8006082:	4603      	mov	r3, r0
 8006084:	4618      	mov	r0, r3
 8006086:	f7fb f829 	bl	80010dc <__aeabi_f2iz>
 800608a:	4603      	mov	r3, r0
 800608c:	b21b      	sxth	r3, r3
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	462b      	mov	r3, r5
 8006092:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006096:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800609a:	4620      	mov	r0, r4
 800609c:	f7ff ff12 	bl	8005ec4 <map>
 80060a0:	4603      	mov	r3, r0
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	801a      	strh	r2, [r3, #0]
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bdb0      	pop	{r4, r5, r7, pc}
 80060b0:	44bb8000 	.word	0x44bb8000
 80060b4:	44b54000 	.word	0x44b54000
 80060b8:	2000001c 	.word	0x2000001c
 80060bc:	44610000 	.word	0x44610000
 80060c0:	20000020 	.word	0x20000020

080060c4 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af04      	add	r7, sp, #16
 80060ca:	6078      	str	r0, [r7, #4]
	printf("**************************** \r\n");
	printf("MPU9250 STM32 Implementation \r\n");
	printf("**************************** \r\n");
	#endif
	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 80060cc:	2364      	movs	r3, #100	; 0x64
 80060ce:	9302      	str	r3, [sp, #8]
 80060d0:	2301      	movs	r3, #1
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	f107 030f 	add.w	r3, r7, #15
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	2301      	movs	r3, #1
 80060dc:	2275      	movs	r2, #117	; 0x75
 80060de:	21d0      	movs	r1, #208	; 0xd0
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fc f867 	bl	80021b4 <HAL_I2C_Mem_Read>

#if DEBUG_MPU
		printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);
#endif

	if (readData == 113) {
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b71      	cmp	r3, #113	; 0x71
 80060ea:	d13e      	bne.n	800616a <MPU9255_Init+0xa6>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 80060ec:	4921      	ldr	r1, [pc, #132]	; (8006174 <MPU9255_Init+0xb0>)
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 fc9a 	bl	8007a28 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 80060f4:	4a20      	ldr	r2, [pc, #128]	; (8006178 <MPU9255_Init+0xb4>)
 80060f6:	4921      	ldr	r1, [pc, #132]	; (800617c <MPU9255_Init+0xb8>)
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 f85f 	bl	80071bc <calibrateMPU9250>
		HAL_Delay(1000);
 80060fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006102:	f7fb f893 	bl	800122c <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 ff76 	bl	8006ff8 <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 800610c:	2322      	movs	r3, #34	; 0x22
 800610e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 8006110:	2364      	movs	r3, #100	; 0x64
 8006112:	9302      	str	r3, [sp, #8]
 8006114:	2301      	movs	r3, #1
 8006116:	9301      	str	r3, [sp, #4]
 8006118:	f107 030e 	add.w	r3, r7, #14
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2301      	movs	r3, #1
 8006120:	2237      	movs	r2, #55	; 0x37
 8006122:	21d0      	movs	r1, #208	; 0xd0
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7fb ff4b 	bl	8001fc0 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 800612a:	2364      	movs	r3, #100	; 0x64
 800612c:	9302      	str	r3, [sp, #8]
 800612e:	2301      	movs	r3, #1
 8006130:	9301      	str	r3, [sp, #4]
 8006132:	f107 030f 	add.w	r3, r7, #15
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	2301      	movs	r3, #1
 800613a:	2200      	movs	r2, #0
 800613c:	2118      	movs	r1, #24
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fc f838 	bl	80021b4 <HAL_I2C_Mem_Read>
#if (DEBUG_MPU)
		printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);
#endif
		HAL_Delay(1000);
 8006144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006148:	f7fb f870 	bl	800122c <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 800614c:	490c      	ldr	r1, [pc, #48]	; (8006180 <MPU9255_Init+0xbc>)
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fd16 	bl	8006b80 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 8006154:	4a0b      	ldr	r2, [pc, #44]	; (8006184 <MPU9255_Init+0xc0>)
 8006156:	490c      	ldr	r1, [pc, #48]	; (8006188 <MPU9255_Init+0xc4>)
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fde3 	bl	8006d24 <calibrateMag>

		HAL_Delay(1000);
 800615e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006162:	f7fb f863 	bl	800122c <HAL_Delay>
		return 0;
 8006166:	2300      	movs	r3, #0
 8006168:	e000      	b.n	800616c <MPU9255_Init+0xa8>
	}
	return 1; // Loop forever if communication doesn't happen
 800616a:	2301      	movs	r3, #1
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	200003cc 	.word	0x200003cc
 8006178:	200003a8 	.word	0x200003a8
 800617c:	2000039c 	.word	0x2000039c
 8006180:	20000390 	.word	0x20000390
 8006184:	200003c0 	.word	0x200003c0
 8006188:	200003b4 	.word	0x200003b4
 800618c:	00000000 	.word	0x00000000

08006190 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 8006190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006194:	b08b      	sub	sp, #44	; 0x2c
 8006196:	af06      	add	r7, sp, #24
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 800619c:	2364      	movs	r3, #100	; 0x64
 800619e:	9302      	str	r3, [sp, #8]
 80061a0:	2301      	movs	r3, #1
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	f107 030f 	add.w	r3, r7, #15
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	2301      	movs	r3, #1
 80061ac:	223a      	movs	r2, #58	; 0x3a
 80061ae:	21d0      	movs	r1, #208	; 0xd0
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fb ffff 	bl	80021b4 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8123 	beq.w	8006408 <readAll+0x278>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 80061c2:	4997      	ldr	r1, [pc, #604]	; (8006420 <readAll+0x290>)
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fc29 	bl	8006a1c <readAccelData>
		getAres();
 80061ca:	f000 fbf9 	bl	80069c0 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 80061ce:	4b94      	ldr	r3, [pc, #592]	; (8006420 <readAll+0x290>)
 80061d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fa fd51 	bl	8000c7c <__aeabi_i2f>
 80061da:	4602      	mov	r2, r0
 80061dc:	4b91      	ldr	r3, [pc, #580]	; (8006424 <readAll+0x294>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f7fa fd9e 	bl	8000d24 <__aeabi_fmul>
 80061e8:	4603      	mov	r3, r0
 80061ea:	461a      	mov	r2, r3
 80061ec:	4b8e      	ldr	r3, [pc, #568]	; (8006428 <readAll+0x298>)
 80061ee:	601a      	str	r2, [r3, #0]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 80061f0:	4b8b      	ldr	r3, [pc, #556]	; (8006420 <readAll+0x290>)
 80061f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fa fd40 	bl	8000c7c <__aeabi_i2f>
 80061fc:	4602      	mov	r2, r0
 80061fe:	4b89      	ldr	r3, [pc, #548]	; (8006424 <readAll+0x294>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	4610      	mov	r0, r2
 8006206:	f7fa fd8d 	bl	8000d24 <__aeabi_fmul>
 800620a:	4603      	mov	r3, r0
 800620c:	461a      	mov	r2, r3
 800620e:	4b87      	ldr	r3, [pc, #540]	; (800642c <readAll+0x29c>)
 8006210:	601a      	str	r2, [r3, #0]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 8006212:	4b83      	ldr	r3, [pc, #524]	; (8006420 <readAll+0x290>)
 8006214:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006218:	4618      	mov	r0, r3
 800621a:	f7fa fd2f 	bl	8000c7c <__aeabi_i2f>
 800621e:	4602      	mov	r2, r0
 8006220:	4b80      	ldr	r3, [pc, #512]	; (8006424 <readAll+0x294>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f7fa fd7c 	bl	8000d24 <__aeabi_fmul>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	4b7f      	ldr	r3, [pc, #508]	; (8006430 <readAll+0x2a0>)
 8006232:	601a      	str	r2, [r3, #0]

		DataStruct->AccelX = ax;
 8006234:	4b7c      	ldr	r3, [pc, #496]	; (8006428 <readAll+0x298>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 800623c:	4b7b      	ldr	r3, [pc, #492]	; (800642c <readAll+0x29c>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8006244:	4b7a      	ldr	r3, [pc, #488]	; (8006430 <readAll+0x2a0>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 800624c:	4979      	ldr	r1, [pc, #484]	; (8006434 <readAll+0x2a4>)
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fc17 	bl	8006a82 <readGyroData>
		getGres();
 8006254:	f000 fb82 	bl	800695c <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8006258:	4b76      	ldr	r3, [pc, #472]	; (8006434 <readAll+0x2a4>)
 800625a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800625e:	4618      	mov	r0, r3
 8006260:	f7fa fd0c 	bl	8000c7c <__aeabi_i2f>
 8006264:	4602      	mov	r2, r0
 8006266:	4b74      	ldr	r3, [pc, #464]	; (8006438 <readAll+0x2a8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f7fa fd59 	bl	8000d24 <__aeabi_fmul>
 8006272:	4603      	mov	r3, r0
 8006274:	461a      	mov	r2, r3
 8006276:	4b71      	ldr	r3, [pc, #452]	; (800643c <readAll+0x2ac>)
 8006278:	601a      	str	r2, [r3, #0]
		gy = (float)gyroCount[1]*gRes;
 800627a:	4b6e      	ldr	r3, [pc, #440]	; (8006434 <readAll+0x2a4>)
 800627c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa fcfb 	bl	8000c7c <__aeabi_i2f>
 8006286:	4602      	mov	r2, r0
 8006288:	4b6b      	ldr	r3, [pc, #428]	; (8006438 <readAll+0x2a8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f7fa fd48 	bl	8000d24 <__aeabi_fmul>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	4b69      	ldr	r3, [pc, #420]	; (8006440 <readAll+0x2b0>)
 800629a:	601a      	str	r2, [r3, #0]
		gz = (float)gyroCount[2]*gRes;
 800629c:	4b65      	ldr	r3, [pc, #404]	; (8006434 <readAll+0x2a4>)
 800629e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fa fcea 	bl	8000c7c <__aeabi_i2f>
 80062a8:	4602      	mov	r2, r0
 80062aa:	4b63      	ldr	r3, [pc, #396]	; (8006438 <readAll+0x2a8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f7fa fd37 	bl	8000d24 <__aeabi_fmul>
 80062b6:	4603      	mov	r3, r0
 80062b8:	461a      	mov	r2, r3
 80062ba:	4b62      	ldr	r3, [pc, #392]	; (8006444 <readAll+0x2b4>)
 80062bc:	601a      	str	r2, [r3, #0]

		DataStruct->GyroX = gx;
 80062be:	4b5f      	ldr	r3, [pc, #380]	; (800643c <readAll+0x2ac>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 80062c6:	4b5e      	ldr	r3, [pc, #376]	; (8006440 <readAll+0x2b0>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 80062ce:	4b5d      	ldr	r3, [pc, #372]	; (8006444 <readAll+0x2b4>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 80062d6:	495c      	ldr	r1, [pc, #368]	; (8006448 <readAll+0x2b8>)
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fc05 	bl	8006ae8 <readMagData>
		getMres();
 80062de:	f000 fb1f 	bl	8006920 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 80062e2:	4b59      	ldr	r3, [pc, #356]	; (8006448 <readAll+0x2b8>)
 80062e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fa fcc7 	bl	8000c7c <__aeabi_i2f>
 80062ee:	4602      	mov	r2, r0
 80062f0:	4b56      	ldr	r3, [pc, #344]	; (800644c <readAll+0x2bc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f7fa fd14 	bl	8000d24 <__aeabi_fmul>
 80062fc:	4603      	mov	r3, r0
 80062fe:	461a      	mov	r2, r3
 8006300:	4b53      	ldr	r3, [pc, #332]	; (8006450 <readAll+0x2c0>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f7fa fd0c 	bl	8000d24 <__aeabi_fmul>
 800630c:	4603      	mov	r3, r0
 800630e:	461a      	mov	r2, r3
 8006310:	4b50      	ldr	r3, [pc, #320]	; (8006454 <readAll+0x2c4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f7fa fbfa 	bl	8000b10 <__aeabi_fsub>
 800631c:	4603      	mov	r3, r0
 800631e:	461a      	mov	r2, r3
 8006320:	4b4d      	ldr	r3, [pc, #308]	; (8006458 <readAll+0x2c8>)
 8006322:	601a      	str	r2, [r3, #0]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 8006324:	4b48      	ldr	r3, [pc, #288]	; (8006448 <readAll+0x2b8>)
 8006326:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800632a:	4618      	mov	r0, r3
 800632c:	f7fa fca6 	bl	8000c7c <__aeabi_i2f>
 8006330:	4602      	mov	r2, r0
 8006332:	4b46      	ldr	r3, [pc, #280]	; (800644c <readAll+0x2bc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7fa fcf3 	bl	8000d24 <__aeabi_fmul>
 800633e:	4603      	mov	r3, r0
 8006340:	461a      	mov	r2, r3
 8006342:	4b43      	ldr	r3, [pc, #268]	; (8006450 <readAll+0x2c0>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f7fa fceb 	bl	8000d24 <__aeabi_fmul>
 800634e:	4603      	mov	r3, r0
 8006350:	461a      	mov	r2, r3
 8006352:	4b40      	ldr	r3, [pc, #256]	; (8006454 <readAll+0x2c4>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7fa fbd9 	bl	8000b10 <__aeabi_fsub>
 800635e:	4603      	mov	r3, r0
 8006360:	461a      	mov	r2, r3
 8006362:	4b3e      	ldr	r3, [pc, #248]	; (800645c <readAll+0x2cc>)
 8006364:	601a      	str	r2, [r3, #0]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 8006366:	4b38      	ldr	r3, [pc, #224]	; (8006448 <readAll+0x2b8>)
 8006368:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800636c:	4618      	mov	r0, r3
 800636e:	f7fa fc85 	bl	8000c7c <__aeabi_i2f>
 8006372:	4602      	mov	r2, r0
 8006374:	4b35      	ldr	r3, [pc, #212]	; (800644c <readAll+0x2bc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f7fa fcd2 	bl	8000d24 <__aeabi_fmul>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	4b32      	ldr	r3, [pc, #200]	; (8006450 <readAll+0x2c0>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f7fa fcca 	bl	8000d24 <__aeabi_fmul>
 8006390:	4603      	mov	r3, r0
 8006392:	461a      	mov	r2, r3
 8006394:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <readAll+0x2c4>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f7fa fbb8 	bl	8000b10 <__aeabi_fsub>
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	4b2e      	ldr	r3, [pc, #184]	; (8006460 <readAll+0x2d0>)
 80063a6:	601a      	str	r2, [r3, #0]
		mx *= magScale[0];
 80063a8:	4b2e      	ldr	r3, [pc, #184]	; (8006464 <readAll+0x2d4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <readAll+0x2c8>)
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	4611      	mov	r1, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fa fcb6 	bl	8000d24 <__aeabi_fmul>
 80063b8:	4603      	mov	r3, r0
 80063ba:	461a      	mov	r2, r3
 80063bc:	4b26      	ldr	r3, [pc, #152]	; (8006458 <readAll+0x2c8>)
 80063be:	601a      	str	r2, [r3, #0]
		my *= magScale[1];
 80063c0:	4b28      	ldr	r3, [pc, #160]	; (8006464 <readAll+0x2d4>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4a25      	ldr	r2, [pc, #148]	; (800645c <readAll+0x2cc>)
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fa fcaa 	bl	8000d24 <__aeabi_fmul>
 80063d0:	4603      	mov	r3, r0
 80063d2:	461a      	mov	r2, r3
 80063d4:	4b21      	ldr	r3, [pc, #132]	; (800645c <readAll+0x2cc>)
 80063d6:	601a      	str	r2, [r3, #0]
		mz *= magScale[2];
 80063d8:	4b22      	ldr	r3, [pc, #136]	; (8006464 <readAll+0x2d4>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4a20      	ldr	r2, [pc, #128]	; (8006460 <readAll+0x2d0>)
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	4611      	mov	r1, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fa fc9e 	bl	8000d24 <__aeabi_fmul>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	4b1c      	ldr	r3, [pc, #112]	; (8006460 <readAll+0x2d0>)
 80063ee:	601a      	str	r2, [r3, #0]

		DataStruct->MagX = mx;
 80063f0:	4b19      	ldr	r3, [pc, #100]	; (8006458 <readAll+0x2c8>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 80063f8:	4b18      	ldr	r3, [pc, #96]	; (800645c <readAll+0x2cc>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8006400:	4b17      	ldr	r3, [pc, #92]	; (8006460 <readAll+0x2d0>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8006408:	f7fa ff06 	bl	8001218 <HAL_GetTick>
 800640c:	4603      	mov	r3, r0
 800640e:	4a16      	ldr	r2, [pc, #88]	; (8006468 <readAll+0x2d8>)
 8006410:	6013      	str	r3, [r2, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8006412:	4b15      	ldr	r3, [pc, #84]	; (8006468 <readAll+0x2d8>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b15      	ldr	r3, [pc, #84]	; (800646c <readAll+0x2dc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	4618      	mov	r0, r3
 800641e:	e027      	b.n	8006470 <readAll+0x2e0>
 8006420:	20000378 	.word	0x20000378
 8006424:	2000036c 	.word	0x2000036c
 8006428:	20000400 	.word	0x20000400
 800642c:	20000404 	.word	0x20000404
 8006430:	20000408 	.word	0x20000408
 8006434:	20000380 	.word	0x20000380
 8006438:	20000370 	.word	0x20000370
 800643c:	2000040c 	.word	0x2000040c
 8006440:	20000410 	.word	0x20000410
 8006444:	20000414 	.word	0x20000414
 8006448:	20000388 	.word	0x20000388
 800644c:	20000374 	.word	0x20000374
 8006450:	20000390 	.word	0x20000390
 8006454:	200003b4 	.word	0x200003b4
 8006458:	20000418 	.word	0x20000418
 800645c:	2000041c 	.word	0x2000041c
 8006460:	20000420 	.word	0x20000420
 8006464:	200003c0 	.word	0x200003c0
 8006468:	200003fc 	.word	0x200003fc
 800646c:	200003f8 	.word	0x200003f8
 8006470:	f7fa fc00 	bl	8000c74 <__aeabi_ui2f>
 8006474:	4603      	mov	r3, r0
 8006476:	499c      	ldr	r1, [pc, #624]	; (80066e8 <readAll+0x558>)
 8006478:	4618      	mov	r0, r3
 800647a:	f7fa fd07 	bl	8000e8c <__aeabi_fdiv>
 800647e:	4603      	mov	r3, r0
 8006480:	461a      	mov	r2, r3
 8006482:	4b9a      	ldr	r3, [pc, #616]	; (80066ec <readAll+0x55c>)
 8006484:	601a      	str	r2, [r3, #0]
	lastUpdate = Now;
 8006486:	4b9a      	ldr	r3, [pc, #616]	; (80066f0 <readAll+0x560>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a9a      	ldr	r2, [pc, #616]	; (80066f4 <readAll+0x564>)
 800648c:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 800648e:	4b9a      	ldr	r3, [pc, #616]	; (80066f8 <readAll+0x568>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a96      	ldr	r2, [pc, #600]	; (80066ec <readAll+0x55c>)
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	4611      	mov	r1, r2
 8006498:	4618      	mov	r0, r3
 800649a:	f7fa fb3b 	bl	8000b14 <__addsf3>
 800649e:	4603      	mov	r3, r0
 80064a0:	461a      	mov	r2, r3
 80064a2:	4b95      	ldr	r3, [pc, #596]	; (80066f8 <readAll+0x568>)
 80064a4:	601a      	str	r2, [r3, #0]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 80064a6:	4b95      	ldr	r3, [pc, #596]	; (80066fc <readAll+0x56c>)
 80064a8:	681c      	ldr	r4, [r3, #0]
 80064aa:	4b95      	ldr	r3, [pc, #596]	; (8006700 <readAll+0x570>)
 80064ac:	681d      	ldr	r5, [r3, #0]
 80064ae:	4b95      	ldr	r3, [pc, #596]	; (8006704 <readAll+0x574>)
 80064b0:	681e      	ldr	r6, [r3, #0]
 80064b2:	4b95      	ldr	r3, [pc, #596]	; (8006708 <readAll+0x578>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7f9 ffae 	bl	8000418 <__aeabi_f2d>
 80064bc:	a388      	add	r3, pc, #544	; (adr r3, 80066e0 <readAll+0x550>)
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	f7fa f801 	bl	80004c8 <__aeabi_dmul>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4610      	mov	r0, r2
 80064cc:	4619      	mov	r1, r3
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	4b8e      	ldr	r3, [pc, #568]	; (800670c <readAll+0x57c>)
 80064d4:	f7fa f922 	bl	800071c <__aeabi_ddiv>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4610      	mov	r0, r2
 80064de:	4619      	mov	r1, r3
 80064e0:	f7fa fac2 	bl	8000a68 <__aeabi_d2f>
 80064e4:	4681      	mov	r9, r0
 80064e6:	4b8a      	ldr	r3, [pc, #552]	; (8006710 <readAll+0x580>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7f9 ff94 	bl	8000418 <__aeabi_f2d>
 80064f0:	a37b      	add	r3, pc, #492	; (adr r3, 80066e0 <readAll+0x550>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7f9 ffe7 	bl	80004c8 <__aeabi_dmul>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4610      	mov	r0, r2
 8006500:	4619      	mov	r1, r3
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	4b81      	ldr	r3, [pc, #516]	; (800670c <readAll+0x57c>)
 8006508:	f7fa f908 	bl	800071c <__aeabi_ddiv>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4610      	mov	r0, r2
 8006512:	4619      	mov	r1, r3
 8006514:	f7fa faa8 	bl	8000a68 <__aeabi_d2f>
 8006518:	4680      	mov	r8, r0
 800651a:	4b7e      	ldr	r3, [pc, #504]	; (8006714 <readAll+0x584>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7f9 ff7a 	bl	8000418 <__aeabi_f2d>
 8006524:	a36e      	add	r3, pc, #440	; (adr r3, 80066e0 <readAll+0x550>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	f7f9 ffcd 	bl	80004c8 <__aeabi_dmul>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4610      	mov	r0, r2
 8006534:	4619      	mov	r1, r3
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	4b74      	ldr	r3, [pc, #464]	; (800670c <readAll+0x57c>)
 800653c:	f7fa f8ee 	bl	800071c <__aeabi_ddiv>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	f7fa fa8e 	bl	8000a68 <__aeabi_d2f>
 800654c:	4b72      	ldr	r3, [pc, #456]	; (8006718 <readAll+0x588>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a72      	ldr	r2, [pc, #456]	; (800671c <readAll+0x58c>)
 8006552:	6812      	ldr	r2, [r2, #0]
 8006554:	4972      	ldr	r1, [pc, #456]	; (8006720 <readAll+0x590>)
 8006556:	6809      	ldr	r1, [r1, #0]
 8006558:	9104      	str	r1, [sp, #16]
 800655a:	9203      	str	r2, [sp, #12]
 800655c:	9302      	str	r3, [sp, #8]
 800655e:	9001      	str	r0, [sp, #4]
 8006560:	f8cd 8000 	str.w	r8, [sp]
 8006564:	464b      	mov	r3, r9
 8006566:	4632      	mov	r2, r6
 8006568:	4629      	mov	r1, r5
 800656a:	4620      	mov	r0, r4
 800656c:	f001 ff24 	bl	80083b8 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8006570:	4b6c      	ldr	r3, [pc, #432]	; (8006724 <readAll+0x594>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4a6b      	ldr	r2, [pc, #428]	; (8006724 <readAll+0x594>)
 8006576:	6892      	ldr	r2, [r2, #8]
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f7fa fbd2 	bl	8000d24 <__aeabi_fmul>
 8006580:	4603      	mov	r3, r0
 8006582:	461c      	mov	r4, r3
 8006584:	4b67      	ldr	r3, [pc, #412]	; (8006724 <readAll+0x594>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a66      	ldr	r2, [pc, #408]	; (8006724 <readAll+0x594>)
 800658a:	68d2      	ldr	r2, [r2, #12]
 800658c:	4611      	mov	r1, r2
 800658e:	4618      	mov	r0, r3
 8006590:	f7fa fbc8 	bl	8000d24 <__aeabi_fmul>
 8006594:	4603      	mov	r3, r0
 8006596:	4619      	mov	r1, r3
 8006598:	4620      	mov	r0, r4
 800659a:	f7fa fabb 	bl	8000b14 <__addsf3>
 800659e:	4603      	mov	r3, r0
 80065a0:	4619      	mov	r1, r3
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fa fab6 	bl	8000b14 <__addsf3>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b5e      	ldr	r3, [pc, #376]	; (8006728 <readAll+0x598>)
 80065ae:	601a      	str	r2, [r3, #0]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 80065b0:	4b5c      	ldr	r3, [pc, #368]	; (8006724 <readAll+0x594>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a5b      	ldr	r2, [pc, #364]	; (8006724 <readAll+0x594>)
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	4611      	mov	r1, r2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fa fbb2 	bl	8000d24 <__aeabi_fmul>
 80065c0:	4603      	mov	r3, r0
 80065c2:	461c      	mov	r4, r3
 80065c4:	4b57      	ldr	r3, [pc, #348]	; (8006724 <readAll+0x594>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4a56      	ldr	r2, [pc, #344]	; (8006724 <readAll+0x594>)
 80065ca:	6852      	ldr	r2, [r2, #4]
 80065cc:	4611      	mov	r1, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fa fba8 	bl	8000d24 <__aeabi_fmul>
 80065d4:	4603      	mov	r3, r0
 80065d6:	4619      	mov	r1, r3
 80065d8:	4620      	mov	r0, r4
 80065da:	f7fa fa9b 	bl	8000b14 <__addsf3>
 80065de:	4603      	mov	r3, r0
 80065e0:	461c      	mov	r4, r3
 80065e2:	4b50      	ldr	r3, [pc, #320]	; (8006724 <readAll+0x594>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	4a4f      	ldr	r2, [pc, #316]	; (8006724 <readAll+0x594>)
 80065e8:	6892      	ldr	r2, [r2, #8]
 80065ea:	4611      	mov	r1, r2
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fa fb99 	bl	8000d24 <__aeabi_fmul>
 80065f2:	4603      	mov	r3, r0
 80065f4:	4619      	mov	r1, r3
 80065f6:	4620      	mov	r0, r4
 80065f8:	f7fa fa8a 	bl	8000b10 <__aeabi_fsub>
 80065fc:	4603      	mov	r3, r0
 80065fe:	461c      	mov	r4, r3
 8006600:	4b48      	ldr	r3, [pc, #288]	; (8006724 <readAll+0x594>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4a47      	ldr	r2, [pc, #284]	; (8006724 <readAll+0x594>)
 8006606:	68d2      	ldr	r2, [r2, #12]
 8006608:	4611      	mov	r1, r2
 800660a:	4618      	mov	r0, r3
 800660c:	f7fa fb8a 	bl	8000d24 <__aeabi_fmul>
 8006610:	4603      	mov	r3, r0
 8006612:	4619      	mov	r1, r3
 8006614:	4620      	mov	r0, r4
 8006616:	f7fa fa7b 	bl	8000b10 <__aeabi_fsub>
 800661a:	4603      	mov	r3, r0
 800661c:	461a      	mov	r2, r3
 800661e:	4b43      	ldr	r3, [pc, #268]	; (800672c <readAll+0x59c>)
 8006620:	601a      	str	r2, [r3, #0]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 8006622:	4b40      	ldr	r3, [pc, #256]	; (8006724 <readAll+0x594>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a3f      	ldr	r2, [pc, #252]	; (8006724 <readAll+0x594>)
 8006628:	6852      	ldr	r2, [r2, #4]
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f7fa fb79 	bl	8000d24 <__aeabi_fmul>
 8006632:	4603      	mov	r3, r0
 8006634:	461c      	mov	r4, r3
 8006636:	4b3b      	ldr	r3, [pc, #236]	; (8006724 <readAll+0x594>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	4a3a      	ldr	r2, [pc, #232]	; (8006724 <readAll+0x594>)
 800663c:	68d2      	ldr	r2, [r2, #12]
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f7fa fb6f 	bl	8000d24 <__aeabi_fmul>
 8006646:	4603      	mov	r3, r0
 8006648:	4619      	mov	r1, r3
 800664a:	4620      	mov	r0, r4
 800664c:	f7fa fa62 	bl	8000b14 <__addsf3>
 8006650:	4603      	mov	r3, r0
 8006652:	4619      	mov	r1, r3
 8006654:	4618      	mov	r0, r3
 8006656:	f7fa fa5d 	bl	8000b14 <__addsf3>
 800665a:	4603      	mov	r3, r0
 800665c:	461a      	mov	r2, r3
 800665e:	4b34      	ldr	r3, [pc, #208]	; (8006730 <readAll+0x5a0>)
 8006660:	601a      	str	r2, [r3, #0]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 8006662:	4b30      	ldr	r3, [pc, #192]	; (8006724 <readAll+0x594>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	4a2f      	ldr	r2, [pc, #188]	; (8006724 <readAll+0x594>)
 8006668:	68d2      	ldr	r2, [r2, #12]
 800666a:	4611      	mov	r1, r2
 800666c:	4618      	mov	r0, r3
 800666e:	f7fa fb59 	bl	8000d24 <__aeabi_fmul>
 8006672:	4603      	mov	r3, r0
 8006674:	461c      	mov	r4, r3
 8006676:	4b2b      	ldr	r3, [pc, #172]	; (8006724 <readAll+0x594>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2a      	ldr	r2, [pc, #168]	; (8006724 <readAll+0x594>)
 800667c:	6892      	ldr	r2, [r2, #8]
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f7fa fb4f 	bl	8000d24 <__aeabi_fmul>
 8006686:	4603      	mov	r3, r0
 8006688:	4619      	mov	r1, r3
 800668a:	4620      	mov	r0, r4
 800668c:	f7fa fa40 	bl	8000b10 <__aeabi_fsub>
 8006690:	4603      	mov	r3, r0
 8006692:	4619      	mov	r1, r3
 8006694:	4618      	mov	r0, r3
 8006696:	f7fa fa3d 	bl	8000b14 <__addsf3>
 800669a:	4603      	mov	r3, r0
 800669c:	461a      	mov	r2, r3
 800669e:	4b25      	ldr	r3, [pc, #148]	; (8006734 <readAll+0x5a4>)
 80066a0:	601a      	str	r2, [r3, #0]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 80066a2:	4b20      	ldr	r3, [pc, #128]	; (8006724 <readAll+0x594>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <readAll+0x594>)
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fa fb39 	bl	8000d24 <__aeabi_fmul>
 80066b2:	4603      	mov	r3, r0
 80066b4:	461c      	mov	r4, r3
 80066b6:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <readAll+0x594>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <readAll+0x594>)
 80066bc:	6852      	ldr	r2, [r2, #4]
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fa fb2f 	bl	8000d24 <__aeabi_fmul>
 80066c6:	4603      	mov	r3, r0
 80066c8:	4619      	mov	r1, r3
 80066ca:	4620      	mov	r0, r4
 80066cc:	f7fa fa20 	bl	8000b10 <__aeabi_fsub>
 80066d0:	4603      	mov	r3, r0
 80066d2:	461c      	mov	r4, r3
 80066d4:	4b13      	ldr	r3, [pc, #76]	; (8006724 <readAll+0x594>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	4a12      	ldr	r2, [pc, #72]	; (8006724 <readAll+0x594>)
 80066da:	6892      	ldr	r2, [r2, #8]
 80066dc:	e02c      	b.n	8006738 <readAll+0x5a8>
 80066de:	bf00      	nop
 80066e0:	35f80991 	.word	0x35f80991
 80066e4:	40092492 	.word	0x40092492
 80066e8:	447a0000 	.word	0x447a0000
 80066ec:	200003f0 	.word	0x200003f0
 80066f0:	200003fc 	.word	0x200003fc
 80066f4:	200003f8 	.word	0x200003f8
 80066f8:	200003f4 	.word	0x200003f4
 80066fc:	20000400 	.word	0x20000400
 8006700:	20000404 	.word	0x20000404
 8006704:	20000408 	.word	0x20000408
 8006708:	2000040c 	.word	0x2000040c
 800670c:	40668000 	.word	0x40668000
 8006710:	20000410 	.word	0x20000410
 8006714:	20000414 	.word	0x20000414
 8006718:	2000041c 	.word	0x2000041c
 800671c:	20000418 	.word	0x20000418
 8006720:	20000420 	.word	0x20000420
 8006724:	2000002c 	.word	0x2000002c
 8006728:	20000430 	.word	0x20000430
 800672c:	20000434 	.word	0x20000434
 8006730:	20000438 	.word	0x20000438
 8006734:	2000043c 	.word	0x2000043c
 8006738:	4611      	mov	r1, r2
 800673a:	4618      	mov	r0, r3
 800673c:	f7fa faf2 	bl	8000d24 <__aeabi_fmul>
 8006740:	4603      	mov	r3, r0
 8006742:	4619      	mov	r1, r3
 8006744:	4620      	mov	r0, r4
 8006746:	f7fa f9e3 	bl	8000b10 <__aeabi_fsub>
 800674a:	4603      	mov	r3, r0
 800674c:	461c      	mov	r4, r3
 800674e:	4b62      	ldr	r3, [pc, #392]	; (80068d8 <readAll+0x748>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	4a61      	ldr	r2, [pc, #388]	; (80068d8 <readAll+0x748>)
 8006754:	68d2      	ldr	r2, [r2, #12]
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f7fa fae3 	bl	8000d24 <__aeabi_fmul>
 800675e:	4603      	mov	r3, r0
 8006760:	4619      	mov	r1, r3
 8006762:	4620      	mov	r0, r4
 8006764:	f7fa f9d6 	bl	8000b14 <__addsf3>
 8006768:	4603      	mov	r3, r0
 800676a:	461a      	mov	r2, r3
 800676c:	4b5b      	ldr	r3, [pc, #364]	; (80068dc <readAll+0x74c>)
 800676e:	601a      	str	r2, [r3, #0]

	pitch = -asinf(a32);
 8006770:	4b5b      	ldr	r3, [pc, #364]	; (80068e0 <readAll+0x750>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	f004 fc67 	bl	800b048 <asinf>
 800677a:	4603      	mov	r3, r0
 800677c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006780:	4a58      	ldr	r2, [pc, #352]	; (80068e4 <readAll+0x754>)
 8006782:	6013      	str	r3, [r2, #0]
	roll  = atan2f(a31, a33);
 8006784:	4b58      	ldr	r3, [pc, #352]	; (80068e8 <readAll+0x758>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a54      	ldr	r2, [pc, #336]	; (80068dc <readAll+0x74c>)
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	4611      	mov	r1, r2
 800678e:	4618      	mov	r0, r3
 8006790:	f004 fc7a 	bl	800b088 <atan2f>
 8006794:	4603      	mov	r3, r0
 8006796:	4a55      	ldr	r2, [pc, #340]	; (80068ec <readAll+0x75c>)
 8006798:	6013      	str	r3, [r2, #0]
	yaw   = atan2f(a12, a22);
 800679a:	4b55      	ldr	r3, [pc, #340]	; (80068f0 <readAll+0x760>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a55      	ldr	r2, [pc, #340]	; (80068f4 <readAll+0x764>)
 80067a0:	6812      	ldr	r2, [r2, #0]
 80067a2:	4611      	mov	r1, r2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f004 fc6f 	bl	800b088 <atan2f>
 80067aa:	4603      	mov	r3, r0
 80067ac:	4a52      	ldr	r2, [pc, #328]	; (80068f8 <readAll+0x768>)
 80067ae:	6013      	str	r3, [r2, #0]
	pitch *= 180.0f / PI;
 80067b0:	4b4c      	ldr	r3, [pc, #304]	; (80068e4 <readAll+0x754>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7f9 fe2f 	bl	8000418 <__aeabi_f2d>
 80067ba:	a345      	add	r3, pc, #276	; (adr r3, 80068d0 <readAll+0x740>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 fe82 	bl	80004c8 <__aeabi_dmul>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4610      	mov	r0, r2
 80067ca:	4619      	mov	r1, r3
 80067cc:	f7fa f94c 	bl	8000a68 <__aeabi_d2f>
 80067d0:	4603      	mov	r3, r0
 80067d2:	4a44      	ldr	r2, [pc, #272]	; (80068e4 <readAll+0x754>)
 80067d4:	6013      	str	r3, [r2, #0]
	yaw   *= 180.0f / PI;
 80067d6:	4b48      	ldr	r3, [pc, #288]	; (80068f8 <readAll+0x768>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7f9 fe1c 	bl	8000418 <__aeabi_f2d>
 80067e0:	a33b      	add	r3, pc, #236	; (adr r3, 80068d0 <readAll+0x740>)
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f7f9 fe6f 	bl	80004c8 <__aeabi_dmul>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	f7fa f939 	bl	8000a68 <__aeabi_d2f>
 80067f6:	4603      	mov	r3, r0
 80067f8:	4a3f      	ldr	r2, [pc, #252]	; (80068f8 <readAll+0x768>)
 80067fa:	6013      	str	r3, [r2, #0]
	yaw   += 5.53f; // Declination
 80067fc:	4b3e      	ldr	r3, [pc, #248]	; (80068f8 <readAll+0x768>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	493e      	ldr	r1, [pc, #248]	; (80068fc <readAll+0x76c>)
 8006802:	4618      	mov	r0, r3
 8006804:	f7fa f986 	bl	8000b14 <__addsf3>
 8006808:	4603      	mov	r3, r0
 800680a:	461a      	mov	r2, r3
 800680c:	4b3a      	ldr	r3, [pc, #232]	; (80068f8 <readAll+0x768>)
 800680e:	601a      	str	r2, [r3, #0]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 8006810:	4b39      	ldr	r3, [pc, #228]	; (80068f8 <readAll+0x768>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f04f 0100 	mov.w	r1, #0
 8006818:	4618      	mov	r0, r3
 800681a:	f7fa fc21 	bl	8001060 <__aeabi_fcmplt>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d009      	beq.n	8006838 <readAll+0x6a8>
 8006824:	4b34      	ldr	r3, [pc, #208]	; (80068f8 <readAll+0x768>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4935      	ldr	r1, [pc, #212]	; (8006900 <readAll+0x770>)
 800682a:	4618      	mov	r0, r3
 800682c:	f7fa f972 	bl	8000b14 <__addsf3>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	4b30      	ldr	r3, [pc, #192]	; (80068f8 <readAll+0x768>)
 8006836:	601a      	str	r2, [r3, #0]
	roll  *= 180.0f / PI;
 8006838:	4b2c      	ldr	r3, [pc, #176]	; (80068ec <readAll+0x75c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f7f9 fdeb 	bl	8000418 <__aeabi_f2d>
 8006842:	a323      	add	r3, pc, #140	; (adr r3, 80068d0 <readAll+0x740>)
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	f7f9 fe3e 	bl	80004c8 <__aeabi_dmul>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4610      	mov	r0, r2
 8006852:	4619      	mov	r1, r3
 8006854:	f7fa f908 	bl	8000a68 <__aeabi_d2f>
 8006858:	4603      	mov	r3, r0
 800685a:	4a24      	ldr	r2, [pc, #144]	; (80068ec <readAll+0x75c>)
 800685c:	6013      	str	r3, [r2, #0]
	lin_ax = ax + a31;
 800685e:	4b29      	ldr	r3, [pc, #164]	; (8006904 <readAll+0x774>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a21      	ldr	r2, [pc, #132]	; (80068e8 <readAll+0x758>)
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	4611      	mov	r1, r2
 8006868:	4618      	mov	r0, r3
 800686a:	f7fa f953 	bl	8000b14 <__addsf3>
 800686e:	4603      	mov	r3, r0
 8006870:	461a      	mov	r2, r3
 8006872:	4b25      	ldr	r3, [pc, #148]	; (8006908 <readAll+0x778>)
 8006874:	601a      	str	r2, [r3, #0]
	lin_ay = ay + a32;
 8006876:	4b25      	ldr	r3, [pc, #148]	; (800690c <readAll+0x77c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a19      	ldr	r2, [pc, #100]	; (80068e0 <readAll+0x750>)
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	4611      	mov	r1, r2
 8006880:	4618      	mov	r0, r3
 8006882:	f7fa f947 	bl	8000b14 <__addsf3>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	4b21      	ldr	r3, [pc, #132]	; (8006910 <readAll+0x780>)
 800688c:	601a      	str	r2, [r3, #0]
	lin_az = az - a33;
 800688e:	4b21      	ldr	r3, [pc, #132]	; (8006914 <readAll+0x784>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a12      	ldr	r2, [pc, #72]	; (80068dc <readAll+0x74c>)
 8006894:	6812      	ldr	r2, [r2, #0]
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f7fa f939 	bl	8000b10 <__aeabi_fsub>
 800689e:	4603      	mov	r3, r0
 80068a0:	461a      	mov	r2, r3
 80068a2:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <readAll+0x788>)
 80068a4:	601a      	str	r2, [r3, #0]


	DataStruct->yaw = yaw;
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <readAll+0x768>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 80068ae:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <readAll+0x754>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 80068b6:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <readAll+0x75c>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	629a      	str	r2, [r3, #40]	; 0x28
#if DEBUG_MPU
//	printf("Roll: %f		Pitch: %f		Yaz: %f\n",roll,pitch,yaw);
#endif
	sum = 0;
 80068be:	4b17      	ldr	r3, [pc, #92]	; (800691c <readAll+0x78c>)
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
	}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068d0:	d0051a32 	.word	0xd0051a32
 80068d4:	404ca2e8 	.word	0x404ca2e8
 80068d8:	2000002c 	.word	0x2000002c
 80068dc:	20000440 	.word	0x20000440
 80068e0:	2000043c 	.word	0x2000043c
 80068e4:	200003e4 	.word	0x200003e4
 80068e8:	20000438 	.word	0x20000438
 80068ec:	200003ec 	.word	0x200003ec
 80068f0:	20000430 	.word	0x20000430
 80068f4:	20000434 	.word	0x20000434
 80068f8:	200003e8 	.word	0x200003e8
 80068fc:	40b0f5c3 	.word	0x40b0f5c3
 8006900:	43b40000 	.word	0x43b40000
 8006904:	20000400 	.word	0x20000400
 8006908:	20000424 	.word	0x20000424
 800690c:	20000404 	.word	0x20000404
 8006910:	20000428 	.word	0x20000428
 8006914:	20000408 	.word	0x20000408
 8006918:	2000042c 	.word	0x2000042c
 800691c:	200003f4 	.word	0x200003f4

08006920 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  switch (Mscale)
 8006924:	4b09      	ldr	r3, [pc, #36]	; (800694c <getMres+0x2c>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <getMres+0x12>
 800692c:	2b01      	cmp	r3, #1
 800692e:	d004      	beq.n	800693a <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8006930:	e007      	b.n	8006942 <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 8006932:	4b07      	ldr	r3, [pc, #28]	; (8006950 <getMres+0x30>)
 8006934:	4a07      	ldr	r2, [pc, #28]	; (8006954 <getMres+0x34>)
 8006936:	601a      	str	r2, [r3, #0]
          break;
 8006938:	e003      	b.n	8006942 <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <getMres+0x30>)
 800693c:	4a06      	ldr	r2, [pc, #24]	; (8006958 <getMres+0x38>)
 800693e:	601a      	str	r2, [r3, #0]
          break;
 8006940:	bf00      	nop
}
 8006942:	bf00      	nop
 8006944:	46bd      	mov	sp, r7
 8006946:	bc80      	pop	{r7}
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	20000026 	.word	0x20000026
 8006950:	20000374 	.word	0x20000374
 8006954:	40bfebff 	.word	0x40bfebff
 8006958:	3fbfebff 	.word	0x3fbfebff

0800695c <getGres>:

void getGres() {
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  switch (Gscale)
 8006960:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <getGres+0x4c>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b03      	cmp	r3, #3
 8006966:	d81b      	bhi.n	80069a0 <getGres+0x44>
 8006968:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <getGres+0x14>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	08006981 	.word	0x08006981
 8006974:	08006989 	.word	0x08006989
 8006978:	08006991 	.word	0x08006991
 800697c:	08006999 	.word	0x08006999
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <getGres+0x50>)
 8006982:	4a0b      	ldr	r2, [pc, #44]	; (80069b0 <getGres+0x54>)
 8006984:	601a      	str	r2, [r3, #0]
          break;
 8006986:	e00b      	b.n	80069a0 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 8006988:	4b08      	ldr	r3, [pc, #32]	; (80069ac <getGres+0x50>)
 800698a:	4a0a      	ldr	r2, [pc, #40]	; (80069b4 <getGres+0x58>)
 800698c:	601a      	str	r2, [r3, #0]
          break;
 800698e:	e007      	b.n	80069a0 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 8006990:	4b06      	ldr	r3, [pc, #24]	; (80069ac <getGres+0x50>)
 8006992:	4a09      	ldr	r2, [pc, #36]	; (80069b8 <getGres+0x5c>)
 8006994:	601a      	str	r2, [r3, #0]
          break;
 8006996:	e003      	b.n	80069a0 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 8006998:	4b04      	ldr	r3, [pc, #16]	; (80069ac <getGres+0x50>)
 800699a:	4a08      	ldr	r2, [pc, #32]	; (80069bc <getGres+0x60>)
 800699c:	601a      	str	r2, [r3, #0]
          break;
 800699e:	bf00      	nop
  }
}
 80069a0:	bf00      	nop
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr
 80069a8:	20000024 	.word	0x20000024
 80069ac:	20000370 	.word	0x20000370
 80069b0:	3bfa0000 	.word	0x3bfa0000
 80069b4:	3c7a0000 	.word	0x3c7a0000
 80069b8:	3cfa0000 	.word	0x3cfa0000
 80069bc:	3d7a0000 	.word	0x3d7a0000

080069c0 <getAres>:

void getAres() {
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  switch (Ascale)
 80069c4:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <getAres+0x54>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d81f      	bhi.n	8006a0c <getAres+0x4c>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <getAres+0x14>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069e5 	.word	0x080069e5
 80069d8:	080069ef 	.word	0x080069ef
 80069dc:	080069f9 	.word	0x080069f9
 80069e0:	08006a03 	.word	0x08006a03
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <getAres+0x58>)
 80069e6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80069ea:	601a      	str	r2, [r3, #0]
          break;
 80069ec:	e00e      	b.n	8006a0c <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <getAres+0x58>)
 80069f0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80069f4:	601a      	str	r2, [r3, #0]
          break;
 80069f6:	e009      	b.n	8006a0c <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <getAres+0x58>)
 80069fa:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80069fe:	601a      	str	r2, [r3, #0]
          break;
 8006a00:	e004      	b.n	8006a0c <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <getAres+0x58>)
 8006a04:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8006a08:	601a      	str	r2, [r3, #0]
          break;
 8006a0a:	bf00      	nop
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr
 8006a14:	20000025 	.word	0x20000025
 8006a18:	2000036c 	.word	0x2000036c

08006a1c <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af04      	add	r7, sp, #16
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8006a26:	2364      	movs	r3, #100	; 0x64
 8006a28:	9302      	str	r3, [sp, #8]
 8006a2a:	2306      	movs	r3, #6
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	f107 0308 	add.w	r3, r7, #8
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	2301      	movs	r3, #1
 8006a36:	223b      	movs	r2, #59	; 0x3b
 8006a38:	21d0      	movs	r1, #208	; 0xd0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fb fbba 	bl	80021b4 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8006a40:	7a3b      	ldrb	r3, [r7, #8]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	b21a      	sxth	r2, r3
 8006a46:	7a7b      	ldrb	r3, [r7, #9]
 8006a48:	b21b      	sxth	r3, r3
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	b21a      	sxth	r2, r3
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8006a52:	7abb      	ldrb	r3, [r7, #10]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	b219      	sxth	r1, r3
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	b21a      	sxth	r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	3302      	adds	r3, #2
 8006a60:	430a      	orrs	r2, r1
 8006a62:	b212      	sxth	r2, r2
 8006a64:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8006a66:	7b3b      	ldrb	r3, [r7, #12]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	b219      	sxth	r1, r3
 8006a6c:	7b7b      	ldrb	r3, [r7, #13]
 8006a6e:	b21a      	sxth	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	3304      	adds	r3, #4
 8006a74:	430a      	orrs	r2, r1
 8006a76:	b212      	sxth	r2, r2
 8006a78:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b088      	sub	sp, #32
 8006a86:	af04      	add	r7, sp, #16
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 8006a8c:	2364      	movs	r3, #100	; 0x64
 8006a8e:	9302      	str	r3, [sp, #8]
 8006a90:	2306      	movs	r3, #6
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	f107 0308 	add.w	r3, r7, #8
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	2243      	movs	r2, #67	; 0x43
 8006a9e:	21d0      	movs	r1, #208	; 0xd0
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fb fb87 	bl	80021b4 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8006aa6:	7a3b      	ldrb	r3, [r7, #8]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	b21a      	sxth	r2, r3
 8006aac:	7a7b      	ldrb	r3, [r7, #9]
 8006aae:	b21b      	sxth	r3, r3
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	b21a      	sxth	r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8006ab8:	7abb      	ldrb	r3, [r7, #10]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	b219      	sxth	r1, r3
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	b21a      	sxth	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	3302      	adds	r3, #2
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	b212      	sxth	r2, r2
 8006aca:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 8006acc:	7b3b      	ldrb	r3, [r7, #12]
 8006ace:	021b      	lsls	r3, r3, #8
 8006ad0:	b219      	sxth	r1, r3
 8006ad2:	7b7b      	ldrb	r3, [r7, #13]
 8006ad4:	b21a      	sxth	r2, r3
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	430a      	orrs	r2, r1
 8006adc:	b212      	sxth	r2, r2
 8006ade:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 8006ae0:	bf00      	nop
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af04      	add	r7, sp, #16
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 8006af2:	2364      	movs	r3, #100	; 0x64
 8006af4:	9302      	str	r3, [sp, #8]
 8006af6:	2301      	movs	r3, #1
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	f107 0316 	add.w	r3, r7, #22
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	2301      	movs	r3, #1
 8006b02:	2202      	movs	r2, #2
 8006b04:	2118      	movs	r1, #24
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fb fb54 	bl	80021b4 <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 8006b0c:	7dbb      	ldrb	r3, [r7, #22]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d030      	beq.n	8006b78 <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 8006b16:	2364      	movs	r3, #100	; 0x64
 8006b18:	9302      	str	r3, [sp, #8]
 8006b1a:	2307      	movs	r3, #7
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	f107 030c 	add.w	r3, r7, #12
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	2301      	movs	r3, #1
 8006b26:	2203      	movs	r2, #3
 8006b28:	2118      	movs	r1, #24
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fb fb42 	bl	80021b4 <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 8006b30:	7cbb      	ldrb	r3, [r7, #18]
 8006b32:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d11c      	bne.n	8006b78 <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 8006b3e:	7b7b      	ldrb	r3, [r7, #13]
 8006b40:	021b      	lsls	r3, r3, #8
 8006b42:	b21a      	sxth	r2, r3
 8006b44:	7b3b      	ldrb	r3, [r7, #12]
 8006b46:	b21b      	sxth	r3, r3
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	b21a      	sxth	r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	b219      	sxth	r1, r3
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	b21a      	sxth	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	b212      	sxth	r2, r2
 8006b62:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 8006b64:	7c7b      	ldrb	r3, [r7, #17]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	b219      	sxth	r1, r3
 8006b6a:	7c3b      	ldrb	r3, [r7, #16]
 8006b6c:	b21a      	sxth	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	3304      	adds	r3, #4
 8006b72:	430a      	orrs	r2, r1
 8006b74:	b212      	sxth	r2, r2
 8006b76:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 8006b78:	bf00      	nop
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 8006b80:	b590      	push	{r4, r7, lr}
 8006b82:	b089      	sub	sp, #36	; 0x24
 8006b84:	af04      	add	r7, sp, #16
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 8006b8e:	2364      	movs	r3, #100	; 0x64
 8006b90:	9302      	str	r3, [sp, #8]
 8006b92:	2301      	movs	r3, #1
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	f107 030f 	add.w	r3, r7, #15
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	220a      	movs	r2, #10
 8006ba0:	2118      	movs	r1, #24
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fb fa0c 	bl	8001fc0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8006ba8:	2064      	movs	r0, #100	; 0x64
 8006baa:	f7fa fb3f 	bl	800122c <HAL_Delay>

  writeData = 0x0F;
 8006bae:	230f      	movs	r3, #15
 8006bb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 8006bb2:	2364      	movs	r3, #100	; 0x64
 8006bb4:	9302      	str	r3, [sp, #8]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	f107 030f 	add.w	r3, r7, #15
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	220a      	movs	r2, #10
 8006bc4:	2118      	movs	r1, #24
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fb f9fa 	bl	8001fc0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8006bcc:	2064      	movs	r0, #100	; 0x64
 8006bce:	f7fa fb2d 	bl	800122c <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 8006bd2:	2364      	movs	r3, #100	; 0x64
 8006bd4:	9302      	str	r3, [sp, #8]
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	f107 030c 	add.w	r3, r7, #12
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	2301      	movs	r3, #1
 8006be2:	2210      	movs	r2, #16
 8006be4:	2118      	movs	r1, #24
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fb fae4 	bl	80021b4 <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8006bec:	7b3b      	ldrb	r3, [r7, #12]
 8006bee:	3b80      	subs	r3, #128	; 0x80
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fa f843 	bl	8000c7c <__aeabi_i2f>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7f9 fc0d 	bl	8000418 <__aeabi_f2d>
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	4b44      	ldr	r3, [pc, #272]	; (8006d14 <initAK8963+0x194>)
 8006c04:	f7f9 fd8a 	bl	800071c <__aeabi_ddiv>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4619      	mov	r1, r3
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	4b40      	ldr	r3, [pc, #256]	; (8006d18 <initAK8963+0x198>)
 8006c16:	f7f9 faa1 	bl	800015c <__adddf3>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4619      	mov	r1, r3
 8006c22:	f7f9 ff21 	bl	8000a68 <__aeabi_d2f>
 8006c26:	4602      	mov	r2, r0
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 8006c2c:	7b7b      	ldrb	r3, [r7, #13]
 8006c2e:	3b80      	subs	r3, #128	; 0x80
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fa f823 	bl	8000c7c <__aeabi_i2f>
 8006c36:	4603      	mov	r3, r0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7f9 fbed 	bl	8000418 <__aeabi_f2d>
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	4b34      	ldr	r3, [pc, #208]	; (8006d14 <initAK8963+0x194>)
 8006c44:	f7f9 fd6a 	bl	800071c <__aeabi_ddiv>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	4b30      	ldr	r3, [pc, #192]	; (8006d18 <initAK8963+0x198>)
 8006c56:	f7f9 fa81 	bl	800015c <__adddf3>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4610      	mov	r0, r2
 8006c60:	4619      	mov	r1, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	1d1c      	adds	r4, r3, #4
 8006c66:	f7f9 feff 	bl	8000a68 <__aeabi_d2f>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	3b80      	subs	r3, #128	; 0x80
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fa f802 	bl	8000c7c <__aeabi_i2f>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7f9 fbcc 	bl	8000418 <__aeabi_f2d>
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <initAK8963+0x194>)
 8006c86:	f7f9 fd49 	bl	800071c <__aeabi_ddiv>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4619      	mov	r1, r3
 8006c92:	f04f 0200 	mov.w	r2, #0
 8006c96:	4b20      	ldr	r3, [pc, #128]	; (8006d18 <initAK8963+0x198>)
 8006c98:	f7f9 fa60 	bl	800015c <__adddf3>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	f103 0408 	add.w	r4, r3, #8
 8006caa:	f7f9 fedd 	bl	8000a68 <__aeabi_d2f>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	6023      	str	r3, [r4, #0]
	printf("Mag cal off Y: %f\r\n", destination[1]);
	printf("Mag cal off Z: %f\r\n", destination[2]);
	printf("-------------------------\r\n");
#endif

  writeData = 0x00;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 8006cb6:	2364      	movs	r3, #100	; 0x64
 8006cb8:	9302      	str	r3, [sp, #8]
 8006cba:	2301      	movs	r3, #1
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	f107 030f 	add.w	r3, r7, #15
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	220a      	movs	r2, #10
 8006cc8:	2118      	movs	r1, #24
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fb f978 	bl	8001fc0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8006cd0:	2064      	movs	r0, #100	; 0x64
 8006cd2:	f7fa faab 	bl	800122c <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 8006cd6:	4b11      	ldr	r3, [pc, #68]	; (8006d1c <initAK8963+0x19c>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	b25a      	sxtb	r2, r3
 8006cde:	4b10      	ldr	r3, [pc, #64]	; (8006d20 <initAK8963+0x1a0>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b25b      	sxtb	r3, r3
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	b25b      	sxtb	r3, r3
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 8006cec:	2364      	movs	r3, #100	; 0x64
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	f107 030f 	add.w	r3, r7, #15
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	220a      	movs	r2, #10
 8006cfe:	2118      	movs	r1, #24
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fb f95d 	bl	8001fc0 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 8006d06:	200a      	movs	r0, #10
 8006d08:	f7fa fa90 	bl	800122c <HAL_Delay>

#if(DEBUG_MPU)
  printf("MAG Init Succesful! \r\n");
#endif
}
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd90      	pop	{r4, r7, pc}
 8006d14:	40700000 	.word	0x40700000
 8006d18:	3ff00000 	.word	0x3ff00000
 8006d1c:	20000026 	.word	0x20000026
 8006d20:	20000027 	.word	0x20000027

08006d24 <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8006d24:	b590      	push	{r4, r7, lr}
 8006d26:	b095      	sub	sp, #84	; 0x54
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d40:	2300      	movs	r3, #0
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d44:	2300      	movs	r3, #0
 8006d46:	643b      	str	r3, [r7, #64]	; 0x40
 8006d48:	2300      	movs	r3, #0
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d50:	2300      	movs	r3, #0
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8006d54:	4aa2      	ldr	r2, [pc, #648]	; (8006fe0 <calibrateMag+0x2bc>)
 8006d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d5e:	6018      	str	r0, [r3, #0]
 8006d60:	3304      	adds	r3, #4
 8006d62:	8019      	strh	r1, [r3, #0]
 8006d64:	4a9f      	ldr	r2, [pc, #636]	; (8006fe4 <calibrateMag+0x2c0>)
 8006d66:	f107 031c 	add.w	r3, r7, #28
 8006d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d6e:	6018      	str	r0, [r3, #0]
 8006d70:	3304      	adds	r3, #4
 8006d72:	8019      	strh	r1, [r3, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	82bb      	strh	r3, [r7, #20]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	82fb      	strh	r3, [r7, #22]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	833b      	strh	r3, [r7, #24]

#if (DEBUG_MPU)
  printf("Mag Calibration: Wave device in a figure eight until done!\r\n");
#endif
  HAL_Delay(4000);
 8006d80:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006d84:	f7fa fa52 	bl	800122c <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8006d88:	4b97      	ldr	r3, [pc, #604]	; (8006fe8 <calibrateMag+0x2c4>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d102      	bne.n	8006d96 <calibrateMag+0x72>
 8006d90:	2380      	movs	r3, #128	; 0x80
 8006d92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 8006d96:	4b94      	ldr	r3, [pc, #592]	; (8006fe8 <calibrateMag+0x2c4>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b06      	cmp	r3, #6
 8006d9c:	d103      	bne.n	8006da6 <calibrateMag+0x82>
 8006d9e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8006da2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 8006da6:	2300      	movs	r3, #0
 8006da8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006dac:	e055      	b.n	8006e5a <calibrateMag+0x136>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 8006dae:	f107 0314 	add.w	r3, r7, #20
 8006db2:	4619      	mov	r1, r3
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff fe97 	bl	8006ae8 <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 8006dba:	2300      	movs	r3, #0
 8006dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dbe:	e036      	b.n	8006e2e <calibrateMag+0x10a>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8006dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	3350      	adds	r3, #80	; 0x50
 8006dc6:	443b      	add	r3, r7
 8006dc8:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	3350      	adds	r3, #80	; 0x50
 8006dd2:	443b      	add	r3, r7
 8006dd4:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	dd0b      	ble.n	8006df4 <calibrateMag+0xd0>
 8006ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	3350      	adds	r3, #80	; 0x50
 8006de2:	443b      	add	r3, r7
 8006de4:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	3350      	adds	r3, #80	; 0x50
 8006dee:	443b      	add	r3, r7
 8006df0:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8006df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	3350      	adds	r3, #80	; 0x50
 8006dfa:	443b      	add	r3, r7
 8006dfc:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	3350      	adds	r3, #80	; 0x50
 8006e06:	443b      	add	r3, r7
 8006e08:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	da0b      	bge.n	8006e28 <calibrateMag+0x104>
 8006e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	3350      	adds	r3, #80	; 0x50
 8006e16:	443b      	add	r3, r7
 8006e18:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	3350      	adds	r3, #80	; 0x50
 8006e22:	443b      	add	r3, r7
 8006e24:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 8006e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	ddc5      	ble.n	8006dc0 <calibrateMag+0x9c>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8006e34:	4b6c      	ldr	r3, [pc, #432]	; (8006fe8 <calibrateMag+0x2c4>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d102      	bne.n	8006e42 <calibrateMag+0x11e>
 8006e3c:	2087      	movs	r0, #135	; 0x87
 8006e3e:	f7fa f9f5 	bl	800122c <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 8006e42:	4b69      	ldr	r3, [pc, #420]	; (8006fe8 <calibrateMag+0x2c4>)
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b06      	cmp	r3, #6
 8006e48:	d102      	bne.n	8006e50 <calibrateMag+0x12c>
 8006e4a:	200c      	movs	r0, #12
 8006e4c:	f7fa f9ee 	bl	800122c <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 8006e50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e54:	3301      	adds	r3, #1
 8006e56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e5a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006e5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d3a3      	bcc.n	8006dae <calibrateMag+0x8a>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8006e66:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	0fda      	lsrs	r2, r3, #31
 8006e74:	4413      	add	r3, r2
 8006e76:	105b      	asrs	r3, r3, #1
 8006e78:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8006e7a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006e84:	4413      	add	r3, r2
 8006e86:	0fda      	lsrs	r2, r3, #31
 8006e88:	4413      	add	r3, r2
 8006e8a:	105b      	asrs	r3, r3, #1
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8006e8e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006e92:	461a      	mov	r2, r3
 8006e94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006e98:	4413      	add	r3, r2
 8006e9a:	0fda      	lsrs	r2, r3, #31
 8006e9c:	4413      	add	r3, r2
 8006e9e:	105b      	asrs	r3, r3, #1
 8006ea0:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7f9 fee9 	bl	8000c7c <__aeabi_i2f>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	4b4f      	ldr	r3, [pc, #316]	; (8006fec <calibrateMag+0x2c8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f7f9 ff36 	bl	8000d24 <__aeabi_fmul>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	461a      	mov	r2, r3
 8006ebc:	4b4c      	ldr	r3, [pc, #304]	; (8006ff0 <calibrateMag+0x2cc>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	f7f9 ff2e 	bl	8000d24 <__aeabi_fmul>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	461a      	mov	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8006ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7f9 fed2 	bl	8000c7c <__aeabi_i2f>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	4b44      	ldr	r3, [pc, #272]	; (8006fec <calibrateMag+0x2c8>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f7f9 ff1f 	bl	8000d24 <__aeabi_fmul>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4618      	mov	r0, r3
 8006eea:	4b41      	ldr	r3, [pc, #260]	; (8006ff0 <calibrateMag+0x2cc>)
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	1d1c      	adds	r4, r3, #4
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	f7f9 ff16 	bl	8000d24 <__aeabi_fmul>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8006efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7f9 febc 	bl	8000c7c <__aeabi_i2f>
 8006f04:	4602      	mov	r2, r0
 8006f06:	4b39      	ldr	r3, [pc, #228]	; (8006fec <calibrateMag+0x2c8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	f7f9 ff09 	bl	8000d24 <__aeabi_fmul>
 8006f12:	4603      	mov	r3, r0
 8006f14:	4618      	mov	r0, r3
 8006f16:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <calibrateMag+0x2cc>)
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f103 0408 	add.w	r4, r3, #8
 8006f20:	4611      	mov	r1, r2
 8006f22:	f7f9 feff 	bl	8000d24 <__aeabi_fmul>
 8006f26:	4603      	mov	r3, r0
 8006f28:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8006f2a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	0fda      	lsrs	r2, r3, #31
 8006f38:	4413      	add	r3, r2
 8006f3a:	105b      	asrs	r3, r3, #1
 8006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8006f3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006f42:	461a      	mov	r2, r3
 8006f44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	0fda      	lsrs	r2, r3, #31
 8006f4c:	4413      	add	r3, r2
 8006f4e:	105b      	asrs	r3, r3, #1
 8006f50:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8006f52:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006f56:	461a      	mov	r2, r3
 8006f58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	0fda      	lsrs	r2, r3, #31
 8006f60:	4413      	add	r3, r2
 8006f62:	105b      	asrs	r3, r3, #1
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8006f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	441a      	add	r2, r3
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6e:	4413      	add	r3, r2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7f9 fe83 	bl	8000c7c <__aeabi_i2f>
 8006f76:	4603      	mov	r3, r0
 8006f78:	647b      	str	r3, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 8006f7a:	491e      	ldr	r1, [pc, #120]	; (8006ff4 <calibrateMag+0x2d0>)
 8006f7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006f7e:	f7f9 ff85 	bl	8000e8c <__aeabi_fdiv>
 8006f82:	4603      	mov	r3, r0
 8006f84:	647b      	str	r3, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7f9 fe77 	bl	8000c7c <__aeabi_i2f>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4619      	mov	r1, r3
 8006f92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006f94:	f7f9 ff7a 	bl	8000e8c <__aeabi_fdiv>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7f9 fe6a 	bl	8000c7c <__aeabi_i2f>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	1d1c      	adds	r4, r3, #4
 8006fae:	4611      	mov	r1, r2
 8006fb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006fb2:	f7f9 ff6b 	bl	8000e8c <__aeabi_fdiv>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7f9 fe5d 	bl	8000c7c <__aeabi_i2f>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f103 0408 	add.w	r4, r3, #8
 8006fca:	4611      	mov	r1, r2
 8006fcc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006fce:	f7f9 ff5d 	bl	8000e8c <__aeabi_fdiv>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6023      	str	r3, [r4, #0]

#if (DEBUG_MPU)
    printf("Mag Calibration done!\r\n");
#endif
}
 8006fd6:	bf00      	nop
 8006fd8:	3754      	adds	r7, #84	; 0x54
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd90      	pop	{r4, r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	0800c448 	.word	0x0800c448
 8006fe4:	0800c450 	.word	0x0800c450
 8006fe8:	20000027 	.word	0x20000027
 8006fec:	20000374 	.word	0x20000374
 8006ff0:	20000390 	.word	0x20000390
 8006ff4:	40400000 	.word	0x40400000

08006ff8 <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af04      	add	r7, sp, #16
 8006ffe:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8007000:	2300      	movs	r3, #0
 8007002:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8007004:	2364      	movs	r3, #100	; 0x64
 8007006:	9302      	str	r3, [sp, #8]
 8007008:	2301      	movs	r3, #1
 800700a:	9301      	str	r3, [sp, #4]
 800700c:	f107 030e 	add.w	r3, r7, #14
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	2301      	movs	r3, #1
 8007014:	226b      	movs	r2, #107	; 0x6b
 8007016:	21d0      	movs	r1, #208	; 0xd0
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7fa ffd1 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800701e:	2064      	movs	r0, #100	; 0x64
 8007020:	f7fa f904 	bl	800122c <HAL_Delay>

	writeData = 0x01;
 8007024:	2301      	movs	r3, #1
 8007026:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8007028:	2364      	movs	r3, #100	; 0x64
 800702a:	9302      	str	r3, [sp, #8]
 800702c:	2301      	movs	r3, #1
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	f107 030e 	add.w	r3, r7, #14
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	2301      	movs	r3, #1
 8007038:	226b      	movs	r2, #107	; 0x6b
 800703a:	21d0      	movs	r1, #208	; 0xd0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7fa ffbf 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8007042:	2064      	movs	r0, #100	; 0x64
 8007044:	f7fa f8f2 	bl	800122c <HAL_Delay>

	writeData = 0x03;
 8007048:	2303      	movs	r3, #3
 800704a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 800704c:	2364      	movs	r3, #100	; 0x64
 800704e:	9302      	str	r3, [sp, #8]
 8007050:	2301      	movs	r3, #1
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	f107 030e 	add.w	r3, r7, #14
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	2301      	movs	r3, #1
 800705c:	221a      	movs	r2, #26
 800705e:	21d0      	movs	r1, #208	; 0xd0
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7fa ffad 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8007066:	2064      	movs	r0, #100	; 0x64
 8007068:	f7fa f8e0 	bl	800122c <HAL_Delay>

	writeData = 0x04;
 800706c:	2304      	movs	r3, #4
 800706e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8007070:	2364      	movs	r3, #100	; 0x64
 8007072:	9302      	str	r3, [sp, #8]
 8007074:	2301      	movs	r3, #1
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	f107 030e 	add.w	r3, r7, #14
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	2301      	movs	r3, #1
 8007080:	2219      	movs	r2, #25
 8007082:	21d0      	movs	r1, #208	; 0xd0
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7fa ff9b 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800708a:	2064      	movs	r0, #100	; 0x64
 800708c:	f7fa f8ce 	bl	800122c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8007090:	2364      	movs	r3, #100	; 0x64
 8007092:	9302      	str	r3, [sp, #8]
 8007094:	2301      	movs	r3, #1
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	f107 030f 	add.w	r3, r7, #15
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	2301      	movs	r3, #1
 80070a0:	221b      	movs	r2, #27
 80070a2:	21d0      	movs	r1, #208	; 0xd0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fb f885 	bl	80021b4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	f023 0303 	bic.w	r3, r3, #3
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	f023 0318 	bic.w	r3, r3, #24
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 80070be:	4b3d      	ldr	r3, [pc, #244]	; (80071b4 <initMPU9250+0x1bc>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	b25a      	sxtb	r2, r3
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	b25b      	sxtb	r3, r3
 80070ca:	4313      	orrs	r3, r2
 80070cc:	b25b      	sxtb	r3, r3
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 80070d2:	2064      	movs	r0, #100	; 0x64
 80070d4:	f7fa f8aa 	bl	800122c <HAL_Delay>

	writeData = readData;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80070dc:	2364      	movs	r3, #100	; 0x64
 80070de:	9302      	str	r3, [sp, #8]
 80070e0:	2301      	movs	r3, #1
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	f107 030e 	add.w	r3, r7, #14
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	2301      	movs	r3, #1
 80070ec:	221b      	movs	r2, #27
 80070ee:	21d0      	movs	r1, #208	; 0xd0
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7fa ff65 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80070f6:	2064      	movs	r0, #100	; 0x64
 80070f8:	f7fa f898 	bl	800122c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 80070fc:	2364      	movs	r3, #100	; 0x64
 80070fe:	9302      	str	r3, [sp, #8]
 8007100:	2301      	movs	r3, #1
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	f107 030f 	add.w	r3, r7, #15
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	2301      	movs	r3, #1
 800710c:	221c      	movs	r2, #28
 800710e:	21d0      	movs	r1, #208	; 0xd0
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7fb f84f 	bl	80021b4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	f023 0318 	bic.w	r3, r3, #24
 800711c:	b2db      	uxtb	r3, r3
 800711e:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8007120:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <initMPU9250+0x1c0>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	b25a      	sxtb	r2, r3
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	b25b      	sxtb	r3, r3
 800712c:	4313      	orrs	r3, r2
 800712e:	b25b      	sxtb	r3, r3
 8007130:	b2db      	uxtb	r3, r3
 8007132:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8007138:	2364      	movs	r3, #100	; 0x64
 800713a:	9302      	str	r3, [sp, #8]
 800713c:	2301      	movs	r3, #1
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	f107 030e 	add.w	r3, r7, #14
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	2301      	movs	r3, #1
 8007148:	221c      	movs	r2, #28
 800714a:	21d0      	movs	r1, #208	; 0xd0
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fa ff37 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8007152:	2064      	movs	r0, #100	; 0x64
 8007154:	f7fa f86a 	bl	800122c <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8007158:	2364      	movs	r3, #100	; 0x64
 800715a:	9302      	str	r3, [sp, #8]
 800715c:	2301      	movs	r3, #1
 800715e:	9301      	str	r3, [sp, #4]
 8007160:	f107 030f 	add.w	r3, r7, #15
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	2301      	movs	r3, #1
 8007168:	221d      	movs	r2, #29
 800716a:	21d0      	movs	r1, #208	; 0xd0
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7fb f821 	bl	80021b4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	f023 030f 	bic.w	r3, r3, #15
 8007178:	b2db      	uxtb	r3, r3
 800717a:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	f043 0303 	orr.w	r3, r3, #3
 8007182:	b2db      	uxtb	r3, r3
 8007184:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 800718a:	2364      	movs	r3, #100	; 0x64
 800718c:	9302      	str	r3, [sp, #8]
 800718e:	2301      	movs	r3, #1
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	f107 030e 	add.w	r3, r7, #14
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	2301      	movs	r3, #1
 800719a:	221d      	movs	r2, #29
 800719c:	21d0      	movs	r1, #208	; 0xd0
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fa ff0e 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80071a4:	2064      	movs	r0, #100	; 0x64
 80071a6:	f7fa f841 	bl	800122c <HAL_Delay>

#if(DEBUG_MPU)
	printf("MPU Init Succesful! \r\n");
#endif
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000024 	.word	0x20000024
 80071b8:	20000025 	.word	0x20000025

080071bc <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 80071bc:	b5b0      	push	{r4, r5, r7, lr}
 80071be:	b09e      	sub	sp, #120	; 0x78
 80071c0:	af04      	add	r7, sp, #16
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80071c8:	2300      	movs	r3, #0
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071cc:	2300      	movs	r3, #0
 80071ce:	643b      	str	r3, [r7, #64]	; 0x40
 80071d0:	2300      	movs	r3, #0
 80071d2:	647b      	str	r3, [r7, #68]	; 0x44
 80071d4:	2300      	movs	r3, #0
 80071d6:	633b      	str	r3, [r7, #48]	; 0x30
 80071d8:	2300      	movs	r3, #0
 80071da:	637b      	str	r3, [r7, #52]	; 0x34
 80071dc:	2300      	movs	r3, #0
 80071de:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 80071e0:	2380      	movs	r3, #128	; 0x80
 80071e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 80071e6:	2364      	movs	r3, #100	; 0x64
 80071e8:	9302      	str	r3, [sp, #8]
 80071ea:	2301      	movs	r3, #1
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	2301      	movs	r3, #1
 80071f6:	226b      	movs	r2, #107	; 0x6b
 80071f8:	21d0      	movs	r1, #208	; 0xd0
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f7fa fee0 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8007200:	2064      	movs	r0, #100	; 0x64
 8007202:	f7fa f813 	bl	800122c <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8007206:	2301      	movs	r3, #1
 8007208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 800720c:	2364      	movs	r3, #100	; 0x64
 800720e:	9302      	str	r3, [sp, #8]
 8007210:	2301      	movs	r3, #1
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	2301      	movs	r3, #1
 800721c:	226b      	movs	r2, #107	; 0x6b
 800721e:	21d0      	movs	r1, #208	; 0xd0
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7fa fecd 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007226:	2300      	movs	r3, #0
 8007228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 800722c:	2364      	movs	r3, #100	; 0x64
 800722e:	9302      	str	r3, [sp, #8]
 8007230:	2301      	movs	r3, #1
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	2301      	movs	r3, #1
 800723c:	226c      	movs	r2, #108	; 0x6c
 800723e:	21d0      	movs	r1, #208	; 0xd0
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7fa febd 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8007246:	20c8      	movs	r0, #200	; 0xc8
 8007248:	f7f9 fff0 	bl	800122c <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 800724c:	2300      	movs	r3, #0
 800724e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8007252:	2364      	movs	r3, #100	; 0x64
 8007254:	9302      	str	r3, [sp, #8]
 8007256:	2301      	movs	r3, #1
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	2301      	movs	r3, #1
 8007262:	2238      	movs	r2, #56	; 0x38
 8007264:	21d0      	movs	r1, #208	; 0xd0
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f7fa feaa 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800726c:	2300      	movs	r3, #0
 800726e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8007272:	2364      	movs	r3, #100	; 0x64
 8007274:	9302      	str	r3, [sp, #8]
 8007276:	2301      	movs	r3, #1
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	2301      	movs	r3, #1
 8007282:	2223      	movs	r2, #35	; 0x23
 8007284:	21d0      	movs	r1, #208	; 0xd0
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f7fa fe9a 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800728c:	2300      	movs	r3, #0
 800728e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8007292:	2364      	movs	r3, #100	; 0x64
 8007294:	9302      	str	r3, [sp, #8]
 8007296:	2301      	movs	r3, #1
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	2301      	movs	r3, #1
 80072a2:	226b      	movs	r2, #107	; 0x6b
 80072a4:	21d0      	movs	r1, #208	; 0xd0
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f7fa fe8a 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 80072b2:	2364      	movs	r3, #100	; 0x64
 80072b4:	9302      	str	r3, [sp, #8]
 80072b6:	2301      	movs	r3, #1
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2301      	movs	r3, #1
 80072c2:	2224      	movs	r2, #36	; 0x24
 80072c4:	21d0      	movs	r1, #208	; 0xd0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7fa fe7a 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80072cc:	2300      	movs	r3, #0
 80072ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 80072d2:	2364      	movs	r3, #100	; 0x64
 80072d4:	9302      	str	r3, [sp, #8]
 80072d6:	2301      	movs	r3, #1
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	2301      	movs	r3, #1
 80072e2:	226a      	movs	r2, #106	; 0x6a
 80072e4:	21d0      	movs	r1, #208	; 0xd0
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f7fa fe6a 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 80072ec:	230c      	movs	r3, #12
 80072ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 80072f2:	2364      	movs	r3, #100	; 0x64
 80072f4:	9302      	str	r3, [sp, #8]
 80072f6:	2301      	movs	r3, #1
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	2301      	movs	r3, #1
 8007302:	226a      	movs	r2, #106	; 0x6a
 8007304:	21d0      	movs	r1, #208	; 0xd0
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7fa fe5a 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 800730c:	200f      	movs	r0, #15
 800730e:	f7f9 ff8d 	bl	800122c <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8007318:	2364      	movs	r3, #100	; 0x64
 800731a:	9302      	str	r3, [sp, #8]
 800731c:	2301      	movs	r3, #1
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	2301      	movs	r3, #1
 8007328:	221a      	movs	r2, #26
 800732a:	21d0      	movs	r1, #208	; 0xd0
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f7fa fe47 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007332:	2300      	movs	r3, #0
 8007334:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8007338:	2364      	movs	r3, #100	; 0x64
 800733a:	9302      	str	r3, [sp, #8]
 800733c:	2301      	movs	r3, #1
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	2301      	movs	r3, #1
 8007348:	2219      	movs	r2, #25
 800734a:	21d0      	movs	r1, #208	; 0xd0
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7fa fe37 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007352:	2300      	movs	r3, #0
 8007354:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8007358:	2364      	movs	r3, #100	; 0x64
 800735a:	9302      	str	r3, [sp, #8]
 800735c:	2301      	movs	r3, #1
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	2301      	movs	r3, #1
 8007368:	221b      	movs	r2, #27
 800736a:	21d0      	movs	r1, #208	; 0xd0
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7fa fe27 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007372:	2300      	movs	r3, #0
 8007374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8007378:	2364      	movs	r3, #100	; 0x64
 800737a:	9302      	str	r3, [sp, #8]
 800737c:	2301      	movs	r3, #1
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	2301      	movs	r3, #1
 8007388:	221c      	movs	r2, #28
 800738a:	21d0      	movs	r1, #208	; 0xd0
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7fa fe17 	bl	8001fc0 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8007392:	2383      	movs	r3, #131	; 0x83
 8007394:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8007398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800739c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 80073a0:	2340      	movs	r3, #64	; 0x40
 80073a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 80073a6:	2364      	movs	r3, #100	; 0x64
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	2301      	movs	r3, #1
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2301      	movs	r3, #1
 80073b6:	226a      	movs	r2, #106	; 0x6a
 80073b8:	21d0      	movs	r1, #208	; 0xd0
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7fa fe00 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 80073c0:	2378      	movs	r3, #120	; 0x78
 80073c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 80073c6:	2364      	movs	r3, #100	; 0x64
 80073c8:	9302      	str	r3, [sp, #8]
 80073ca:	2301      	movs	r3, #1
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	2301      	movs	r3, #1
 80073d6:	2223      	movs	r2, #35	; 0x23
 80073d8:	21d0      	movs	r1, #208	; 0xd0
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7fa fdf0 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 80073e0:	2028      	movs	r0, #40	; 0x28
 80073e2:	f7f9 ff23 	bl	800122c <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 80073e6:	2300      	movs	r3, #0
 80073e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 80073ec:	2364      	movs	r3, #100	; 0x64
 80073ee:	9302      	str	r3, [sp, #8]
 80073f0:	2301      	movs	r3, #1
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	2301      	movs	r3, #1
 80073fc:	2223      	movs	r2, #35	; 0x23
 80073fe:	21d0      	movs	r1, #208	; 0xd0
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f7fa fddd 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8007406:	2364      	movs	r3, #100	; 0x64
 8007408:	9302      	str	r3, [sp, #8]
 800740a:	2302      	movs	r3, #2
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	2301      	movs	r3, #1
 8007416:	2272      	movs	r2, #114	; 0x72
 8007418:	21d0      	movs	r1, #208	; 0xd0
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f7fa feca 	bl	80021b4 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8007420:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	b21a      	sxth	r2, r3
 8007428:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800742c:	b21b      	sxth	r3, r3
 800742e:	4313      	orrs	r3, r2
 8007430:	b21b      	sxth	r3, r3
 8007432:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8007436:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800743a:	4a5a      	ldr	r2, [pc, #360]	; (80075a4 <calibrateMPU9250+0x3e8>)
 800743c:	fba2 2303 	umull	r2, r3, r2, r3
 8007440:	08db      	lsrs	r3, r3, #3
 8007442:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8007446:	2300      	movs	r3, #0
 8007448:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800744c:	e077      	b.n	800753e <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 800744e:	2300      	movs	r3, #0
 8007450:	833b      	strh	r3, [r7, #24]
 8007452:	2300      	movs	r3, #0
 8007454:	837b      	strh	r3, [r7, #26]
 8007456:	2300      	movs	r3, #0
 8007458:	83bb      	strh	r3, [r7, #28]
 800745a:	2300      	movs	r3, #0
 800745c:	823b      	strh	r3, [r7, #16]
 800745e:	2300      	movs	r3, #0
 8007460:	827b      	strh	r3, [r7, #18]
 8007462:	2300      	movs	r3, #0
 8007464:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8007466:	2364      	movs	r3, #100	; 0x64
 8007468:	9302      	str	r3, [sp, #8]
 800746a:	230c      	movs	r3, #12
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	2301      	movs	r3, #1
 8007476:	2274      	movs	r2, #116	; 0x74
 8007478:	21d0      	movs	r1, #208	; 0xd0
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f7fa fe9a 	bl	80021b4 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8007480:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007484:	021b      	lsls	r3, r3, #8
 8007486:	b21a      	sxth	r2, r3
 8007488:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800748c:	b21b      	sxth	r3, r3
 800748e:	4313      	orrs	r3, r2
 8007490:	b21b      	sxth	r3, r3
 8007492:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8007494:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007498:	021b      	lsls	r3, r3, #8
 800749a:	b21a      	sxth	r2, r3
 800749c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80074a0:	b21b      	sxth	r3, r3
 80074a2:	4313      	orrs	r3, r2
 80074a4:	b21b      	sxth	r3, r3
 80074a6:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 80074a8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	b21a      	sxth	r2, r3
 80074b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80074b4:	b21b      	sxth	r3, r3
 80074b6:	4313      	orrs	r3, r2
 80074b8:	b21b      	sxth	r3, r3
 80074ba:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 80074bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	b21a      	sxth	r2, r3
 80074c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80074c8:	b21b      	sxth	r3, r3
 80074ca:	4313      	orrs	r3, r2
 80074cc:	b21b      	sxth	r3, r3
 80074ce:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 80074d0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	b21a      	sxth	r2, r3
 80074d8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80074dc:	b21b      	sxth	r3, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	b21b      	sxth	r3, r3
 80074e2:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 80074e4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	b21a      	sxth	r2, r3
 80074ec:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80074f0:	b21b      	sxth	r3, r3
 80074f2:	4313      	orrs	r3, r2
 80074f4:	b21b      	sxth	r3, r3
 80074f6:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80074fe:	4413      	add	r3, r2
 8007500:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8007508:	4413      	add	r3, r2
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 800750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007512:	4413      	add	r3, r2
 8007514:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8007516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007518:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800751c:	4413      	add	r3, r2
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8007520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007522:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007526:	4413      	add	r3, r2
 8007528:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 800752a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800752c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007530:	4413      	add	r3, r2
 8007532:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8007534:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007538:	3301      	adds	r3, #1
 800753a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800753e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8007542:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007546:	429a      	cmp	r2, r3
 8007548:	d381      	bcc.n	800744e <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 800754a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007550:	fb92 f3f3 	sdiv	r3, r2, r3
 8007554:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8007556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007558:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800755c:	fb92 f3f3 	sdiv	r3, r2, r3
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8007562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007564:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007568:	fb92 f3f3 	sdiv	r3, r2, r3
 800756c:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 800756e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007570:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007574:	fb92 f3f3 	sdiv	r3, r2, r3
 8007578:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 800757a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800757c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007580:	fb92 f3f3 	sdiv	r3, r2, r3
 8007584:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8007586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007588:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800758c:	fb92 f3f3 	sdiv	r3, r2, r3
 8007590:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	2b00      	cmp	r3, #0
 8007596:	dd07      	ble.n	80075a8 <calibrateMPU9250+0x3ec>
 8007598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800759a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80075a2:	e006      	b.n	80075b2 <calibrateMPU9250+0x3f6>
 80075a4:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 80075a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075ae:	4413      	add	r3, r2
 80075b0:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80075b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b4:	425b      	negs	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	da00      	bge.n	80075bc <calibrateMPU9250+0x400>
 80075ba:	3303      	adds	r3, #3
 80075bc:	109b      	asrs	r3, r3, #2
 80075be:	121b      	asrs	r3, r3, #8
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80075c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c8:	425b      	negs	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da00      	bge.n	80075d0 <calibrateMPU9250+0x414>
 80075ce:	3303      	adds	r3, #3
 80075d0:	109b      	asrs	r3, r3, #2
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80075d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075da:	425b      	negs	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da00      	bge.n	80075e2 <calibrateMPU9250+0x426>
 80075e0:	3303      	adds	r3, #3
 80075e2:	109b      	asrs	r3, r3, #2
 80075e4:	121b      	asrs	r3, r3, #8
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 80075ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ee:	425b      	negs	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	da00      	bge.n	80075f6 <calibrateMPU9250+0x43a>
 80075f4:	3303      	adds	r3, #3
 80075f6:	109b      	asrs	r3, r3, #2
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80075fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007600:	425b      	negs	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	da00      	bge.n	8007608 <calibrateMPU9250+0x44c>
 8007606:	3303      	adds	r3, #3
 8007608:	109b      	asrs	r3, r3, #2
 800760a:	121b      	asrs	r3, r3, #8
 800760c:	b2db      	uxtb	r3, r3
 800760e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8007612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007614:	425b      	negs	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	da00      	bge.n	800761c <calibrateMPU9250+0x460>
 800761a:	3303      	adds	r3, #3
 800761c:	109b      	asrs	r3, r3, #2
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8007624:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007628:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800762c:	2364      	movs	r3, #100	; 0x64
 800762e:	9302      	str	r3, [sp, #8]
 8007630:	2301      	movs	r3, #1
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	2301      	movs	r3, #1
 800763c:	2213      	movs	r2, #19
 800763e:	21d0      	movs	r1, #208	; 0xd0
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7fa fcbd 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8007646:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800764a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800764e:	2364      	movs	r3, #100	; 0x64
 8007650:	9302      	str	r3, [sp, #8]
 8007652:	2301      	movs	r3, #1
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	2301      	movs	r3, #1
 800765e:	2214      	movs	r2, #20
 8007660:	21d0      	movs	r1, #208	; 0xd0
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f7fa fcac 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8007668:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800766c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8007670:	2364      	movs	r3, #100	; 0x64
 8007672:	9302      	str	r3, [sp, #8]
 8007674:	2301      	movs	r3, #1
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	2301      	movs	r3, #1
 8007680:	2215      	movs	r2, #21
 8007682:	21d0      	movs	r1, #208	; 0xd0
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7fa fc9b 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 800768a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800768e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8007692:	2364      	movs	r3, #100	; 0x64
 8007694:	9302      	str	r3, [sp, #8]
 8007696:	2301      	movs	r3, #1
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	2301      	movs	r3, #1
 80076a2:	2216      	movs	r2, #22
 80076a4:	21d0      	movs	r1, #208	; 0xd0
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7fa fc8a 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 80076ac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80076b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80076b4:	2364      	movs	r3, #100	; 0x64
 80076b6:	9302      	str	r3, [sp, #8]
 80076b8:	2301      	movs	r3, #1
 80076ba:	9301      	str	r3, [sp, #4]
 80076bc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	2301      	movs	r3, #1
 80076c4:	2217      	movs	r2, #23
 80076c6:	21d0      	movs	r1, #208	; 0xd0
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7fa fc79 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 80076ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80076d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80076d6:	2364      	movs	r3, #100	; 0x64
 80076d8:	9302      	str	r3, [sp, #8]
 80076da:	2301      	movs	r3, #1
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	2301      	movs	r3, #1
 80076e6:	2218      	movs	r2, #24
 80076e8:	21d0      	movs	r1, #208	; 0xd0
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7fa fc68 	bl	8001fc0 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80076f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7f9 fac2 	bl	8000c7c <__aeabi_i2f>
 80076f8:	4604      	mov	r4, r0
 80076fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80076fe:	4618      	mov	r0, r3
 8007700:	f7f9 fab8 	bl	8000c74 <__aeabi_ui2f>
 8007704:	4603      	mov	r3, r0
 8007706:	4619      	mov	r1, r3
 8007708:	4620      	mov	r0, r4
 800770a:	f7f9 fbbf 	bl	8000e8c <__aeabi_fdiv>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8007716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007718:	4618      	mov	r0, r3
 800771a:	f7f9 faaf 	bl	8000c7c <__aeabi_i2f>
 800771e:	4605      	mov	r5, r0
 8007720:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007724:	4618      	mov	r0, r3
 8007726:	f7f9 faa5 	bl	8000c74 <__aeabi_ui2f>
 800772a:	4602      	mov	r2, r0
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	1d1c      	adds	r4, r3, #4
 8007730:	4611      	mov	r1, r2
 8007732:	4628      	mov	r0, r5
 8007734:	f7f9 fbaa 	bl	8000e8c <__aeabi_fdiv>
 8007738:	4603      	mov	r3, r0
 800773a:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 800773c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800773e:	4618      	mov	r0, r3
 8007740:	f7f9 fa9c 	bl	8000c7c <__aeabi_i2f>
 8007744:	4605      	mov	r5, r0
 8007746:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800774a:	4618      	mov	r0, r3
 800774c:	f7f9 fa92 	bl	8000c74 <__aeabi_ui2f>
 8007750:	4602      	mov	r2, r0
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f103 0408 	add.w	r4, r3, #8
 8007758:	4611      	mov	r1, r2
 800775a:	4628      	mov	r0, r5
 800775c:	f7f9 fb96 	bl	8000e8c <__aeabi_fdiv>
 8007760:	4603      	mov	r3, r0
 8007762:	6023      	str	r3, [r4, #0]

		printf("-------------------------\r\n");
#endif

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8007764:	2300      	movs	r3, #0
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
 8007768:	2300      	movs	r3, #0
 800776a:	62bb      	str	r3, [r7, #40]	; 0x28
 800776c:	2300      	movs	r3, #0
 800776e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8007770:	2364      	movs	r3, #100	; 0x64
 8007772:	9302      	str	r3, [sp, #8]
 8007774:	2302      	movs	r3, #2
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	2301      	movs	r3, #1
 8007780:	2277      	movs	r2, #119	; 0x77
 8007782:	21d0      	movs	r1, #208	; 0xd0
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7fa fd15 	bl	80021b4 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800778a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8007794:	4313      	orrs	r3, r2
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8007798:	2364      	movs	r3, #100	; 0x64
 800779a:	9302      	str	r3, [sp, #8]
 800779c:	2302      	movs	r3, #2
 800779e:	9301      	str	r3, [sp, #4]
 80077a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	2301      	movs	r3, #1
 80077a8:	227a      	movs	r2, #122	; 0x7a
 80077aa:	21d0      	movs	r1, #208	; 0xd0
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f7fa fd01 	bl	80021b4 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80077b2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80077bc:	4313      	orrs	r3, r2
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 80077c0:	2364      	movs	r3, #100	; 0x64
 80077c2:	9302      	str	r3, [sp, #8]
 80077c4:	2302      	movs	r3, #2
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	2301      	movs	r3, #1
 80077d0:	227d      	movs	r2, #125	; 0x7d
 80077d2:	21d0      	movs	r1, #208	; 0xd0
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7fa fced 	bl	80021b4 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80077da:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80077de:	021b      	lsls	r3, r3, #8
 80077e0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80077e4:	4313      	orrs	r3, r2
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 80077e8:	2301      	movs	r3, #1
 80077ea:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 80077ec:	4a8d      	ldr	r2, [pc, #564]	; (8007a24 <calibrateMPU9250+0x868>)
 80077ee:	f107 0320 	add.w	r3, r7, #32
 80077f2:	6812      	ldr	r2, [r2, #0]
 80077f4:	4611      	mov	r1, r2
 80077f6:	8019      	strh	r1, [r3, #0]
 80077f8:	3302      	adds	r3, #2
 80077fa:	0c12      	lsrs	r2, r2, #16
 80077fc:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 80077fe:	2300      	movs	r3, #0
 8007800:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007804:	e017      	b.n	8007836 <calibrateMPU9250+0x67a>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8007806:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	3368      	adds	r3, #104	; 0x68
 800780e:	443b      	add	r3, r7
 8007810:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007814:	461a      	mov	r2, r3
 8007816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007818:	4013      	ands	r3, r2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d006      	beq.n	800782c <calibrateMPU9250+0x670>
 800781e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007822:	3368      	adds	r3, #104	; 0x68
 8007824:	443b      	add	r3, r7
 8007826:	2201      	movs	r2, #1
 8007828:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 800782c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007830:	3301      	adds	r3, #1
 8007832:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007836:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800783a:	2b02      	cmp	r3, #2
 800783c:	d9e3      	bls.n	8007806 <calibrateMPU9250+0x64a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800783e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	2b00      	cmp	r3, #0
 8007844:	da00      	bge.n	8007848 <calibrateMPU9250+0x68c>
 8007846:	3307      	adds	r3, #7
 8007848:	10db      	asrs	r3, r3, #3
 800784a:	425b      	negs	r3, r3
 800784c:	4413      	add	r3, r2
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8007850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007854:	2b00      	cmp	r3, #0
 8007856:	da00      	bge.n	800785a <calibrateMPU9250+0x69e>
 8007858:	3307      	adds	r3, #7
 800785a:	10db      	asrs	r3, r3, #3
 800785c:	425b      	negs	r3, r3
 800785e:	4413      	add	r3, r2
 8007860:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8007862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	2b00      	cmp	r3, #0
 8007868:	da00      	bge.n	800786c <calibrateMPU9250+0x6b0>
 800786a:	3307      	adds	r3, #7
 800786c:	10db      	asrs	r3, r3, #3
 800786e:	425b      	negs	r3, r3
 8007870:	4413      	add	r3, r2
 8007872:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	121b      	asrs	r3, r3, #8
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8007886:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800788a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800788e:	4313      	orrs	r3, r2
 8007890:	b2db      	uxtb	r3, r3
 8007892:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	121b      	asrs	r3, r3, #8
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80078a8:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80078ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80078b0:	4313      	orrs	r3, r2
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	121b      	asrs	r3, r3, #8
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 80078c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80078ca:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80078ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80078d2:	4313      	orrs	r3, r2
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 80078da:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80078de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80078e2:	2364      	movs	r3, #100	; 0x64
 80078e4:	9302      	str	r3, [sp, #8]
 80078e6:	2301      	movs	r3, #1
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	2301      	movs	r3, #1
 80078f2:	2277      	movs	r2, #119	; 0x77
 80078f4:	21d0      	movs	r1, #208	; 0xd0
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7fa fb62 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 80078fc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8007900:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8007904:	2364      	movs	r3, #100	; 0x64
 8007906:	9302      	str	r3, [sp, #8]
 8007908:	2301      	movs	r3, #1
 800790a:	9301      	str	r3, [sp, #4]
 800790c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	2301      	movs	r3, #1
 8007914:	2278      	movs	r2, #120	; 0x78
 8007916:	21d0      	movs	r1, #208	; 0xd0
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7fa fb51 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 800791e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007922:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8007926:	2364      	movs	r3, #100	; 0x64
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	2301      	movs	r3, #1
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	2301      	movs	r3, #1
 8007936:	227a      	movs	r2, #122	; 0x7a
 8007938:	21d0      	movs	r1, #208	; 0xd0
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f7fa fb40 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8007940:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8007948:	2364      	movs	r3, #100	; 0x64
 800794a:	9302      	str	r3, [sp, #8]
 800794c:	2301      	movs	r3, #1
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	2301      	movs	r3, #1
 8007958:	227b      	movs	r2, #123	; 0x7b
 800795a:	21d0      	movs	r1, #208	; 0xd0
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f7fa fb2f 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8007962:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007966:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800796a:	2364      	movs	r3, #100	; 0x64
 800796c:	9302      	str	r3, [sp, #8]
 800796e:	2301      	movs	r3, #1
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	2301      	movs	r3, #1
 800797a:	227d      	movs	r2, #125	; 0x7d
 800797c:	21d0      	movs	r1, #208	; 0xd0
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7fa fb1e 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8007984:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800798c:	2364      	movs	r3, #100	; 0x64
 800798e:	9302      	str	r3, [sp, #8]
 8007990:	2301      	movs	r3, #1
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	2301      	movs	r3, #1
 800799c:	227e      	movs	r2, #126	; 0x7e
 800799e:	21d0      	movs	r1, #208	; 0xd0
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7fa fb0d 	bl	8001fc0 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7f9 f967 	bl	8000c7c <__aeabi_i2f>
 80079ae:	4604      	mov	r4, r0
 80079b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7f9 f95d 	bl	8000c74 <__aeabi_ui2f>
 80079ba:	4603      	mov	r3, r0
 80079bc:	4619      	mov	r1, r3
 80079be:	4620      	mov	r0, r4
 80079c0:	f7f9 fa64 	bl	8000e8c <__aeabi_fdiv>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	601a      	str	r2, [r3, #0]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 80079cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7f9 f954 	bl	8000c7c <__aeabi_i2f>
 80079d4:	4605      	mov	r5, r0
 80079d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80079da:	4618      	mov	r0, r3
 80079dc:	f7f9 f94a 	bl	8000c74 <__aeabi_ui2f>
 80079e0:	4602      	mov	r2, r0
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	1d1c      	adds	r4, r3, #4
 80079e6:	4611      	mov	r1, r2
 80079e8:	4628      	mov	r0, r5
 80079ea:	f7f9 fa4f 	bl	8000e8c <__aeabi_fdiv>
 80079ee:	4603      	mov	r3, r0
 80079f0:	6023      	str	r3, [r4, #0]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7f9 f941 	bl	8000c7c <__aeabi_i2f>
 80079fa:	4605      	mov	r5, r0
 80079fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7f9 f937 	bl	8000c74 <__aeabi_ui2f>
 8007a06:	4602      	mov	r2, r0
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f103 0408 	add.w	r4, r3, #8
 8007a0e:	4611      	mov	r1, r2
 8007a10:	4628      	mov	r0, r5
 8007a12:	f7f9 fa3b 	bl	8000e8c <__aeabi_fdiv>
 8007a16:	4603      	mov	r3, r0
 8007a18:	6023      	str	r3, [r4, #0]
		printf("Accel bias Y: %f\r\n", accelBiasY);
		printf("Accel bias Z: %f\r\n", accelBiasZ);

		printf("-------------------------\r\n");
#endif
}
 8007a1a:	bf00      	nop
 8007a1c:	3768      	adds	r7, #104	; 0x68
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bdb0      	pop	{r4, r5, r7, pc}
 8007a22:	bf00      	nop
 8007a24:	0800c458 	.word	0x0800c458

08007a28 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 8007a28:	b5b0      	push	{r4, r5, r7, lr}
 8007a2a:	b0a8      	sub	sp, #160	; 0xa0
 8007a2c:	af04      	add	r7, sp, #16
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 8007a32:	4aa2      	ldr	r2, [pc, #648]	; (8007cbc <MPU9250SelfTest+0x294>)
 8007a34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a3c:	6018      	str	r0, [r3, #0]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	8019      	strh	r1, [r3, #0]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8007a42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	605a      	str	r2, [r3, #4]
 8007a4c:	609a      	str	r2, [r3, #8]
 8007a4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	605a      	str	r2, [r3, #4]
 8007a58:	609a      	str	r2, [r3, #8]
 8007a5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	605a      	str	r2, [r3, #4]
 8007a64:	609a      	str	r2, [r3, #8]
 8007a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	605a      	str	r2, [r3, #4]
 8007a70:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 8007a7e:	2364      	movs	r3, #100	; 0x64
 8007a80:	9302      	str	r3, [sp, #8]
 8007a82:	2301      	movs	r3, #1
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	2219      	movs	r2, #25
 8007a90:	21d0      	movs	r1, #208	; 0xd0
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7fa fa94 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8007a98:	2302      	movs	r3, #2
 8007a9a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8007a9e:	2364      	movs	r3, #100	; 0x64
 8007aa0:	9302      	str	r3, [sp, #8]
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	2301      	movs	r3, #1
 8007aae:	221a      	movs	r2, #26
 8007ab0:	21d0      	movs	r1, #208	; 0xd0
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fa fa84 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8007ab8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8007ac4:	2364      	movs	r3, #100	; 0x64
 8007ac6:	9302      	str	r3, [sp, #8]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	221b      	movs	r2, #27
 8007ad6:	21d0      	movs	r1, #208	; 0xd0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7fa fa71 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8007ae4:	2364      	movs	r3, #100	; 0x64
 8007ae6:	9302      	str	r3, [sp, #8]
 8007ae8:	2301      	movs	r3, #1
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	2301      	movs	r3, #1
 8007af4:	221d      	movs	r2, #29
 8007af6:	21d0      	movs	r1, #208	; 0xd0
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7fa fa61 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8007afe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 8007b0a:	2364      	movs	r3, #100	; 0x64
 8007b0c:	9302      	str	r3, [sp, #8]
 8007b0e:	2301      	movs	r3, #1
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	2301      	movs	r3, #1
 8007b1a:	221c      	movs	r2, #28
 8007b1c:	21d0      	movs	r1, #208	; 0xd0
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fa fa4e 	bl	8001fc0 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8007b24:	2300      	movs	r3, #0
 8007b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b2a:	e066      	b.n	8007bfa <MPU9250SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8007b2c:	2364      	movs	r3, #100	; 0x64
 8007b2e:	9302      	str	r3, [sp, #8]
 8007b30:	2306      	movs	r3, #6
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	223b      	movs	r2, #59	; 0x3b
 8007b3e:	21d0      	movs	r1, #208	; 0xd0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7fa fb37 	bl	80021b4 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b48:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007b4c:	0212      	lsls	r2, r2, #8
 8007b4e:	b211      	sxth	r1, r2
 8007b50:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007b54:	b212      	sxth	r2, r2
 8007b56:	430a      	orrs	r2, r1
 8007b58:	b212      	sxth	r2, r2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b60:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007b64:	0212      	lsls	r2, r2, #8
 8007b66:	b211      	sxth	r1, r2
 8007b68:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007b6c:	b212      	sxth	r2, r2
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	b212      	sxth	r2, r2
 8007b72:	4413      	add	r3, r2
 8007b74:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b78:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007b7c:	0212      	lsls	r2, r2, #8
 8007b7e:	b211      	sxth	r1, r2
 8007b80:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007b84:	b212      	sxth	r2, r2
 8007b86:	430a      	orrs	r2, r1
 8007b88:	b212      	sxth	r2, r2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8007b8e:	2364      	movs	r3, #100	; 0x64
 8007b90:	9302      	str	r3, [sp, #8]
 8007b92:	2306      	movs	r3, #6
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	2243      	movs	r2, #67	; 0x43
 8007ba0:	21d0      	movs	r1, #208	; 0xd0
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fa fb06 	bl	80021b4 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007baa:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007bae:	0212      	lsls	r2, r2, #8
 8007bb0:	b211      	sxth	r1, r2
 8007bb2:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007bb6:	b212      	sxth	r2, r2
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	b212      	sxth	r2, r2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc2:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007bc6:	0212      	lsls	r2, r2, #8
 8007bc8:	b211      	sxth	r1, r2
 8007bca:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007bce:	b212      	sxth	r2, r2
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	b212      	sxth	r2, r2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bda:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007bde:	0212      	lsls	r2, r2, #8
 8007be0:	b211      	sxth	r1, r2
 8007be2:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007be6:	b212      	sxth	r2, r2
 8007be8:	430a      	orrs	r2, r1
 8007bea:	b212      	sxth	r2, r2
 8007bec:	4413      	add	r3, r2
 8007bee:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 8007bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bfe:	2bc7      	cmp	r3, #199	; 0xc7
 8007c00:	dd94      	ble.n	8007b2c <MPU9250SelfTest+0x104>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 8007c02:	2300      	movs	r3, #0
 8007c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c08:	e02c      	b.n	8007c64 <MPU9250SelfTest+0x23c>
		aAvg[ii] /= 200;
 8007c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	3390      	adds	r3, #144	; 0x90
 8007c12:	443b      	add	r3, r7
 8007c14:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8007c18:	4a29      	ldr	r2, [pc, #164]	; (8007cc0 <MPU9250SelfTest+0x298>)
 8007c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8007c1e:	1192      	asrs	r2, r2, #6
 8007c20:	17db      	asrs	r3, r3, #31
 8007c22:	1ad2      	subs	r2, r2, r3
 8007c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	3390      	adds	r3, #144	; 0x90
 8007c2c:	443b      	add	r3, r7
 8007c2e:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 8007c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	3390      	adds	r3, #144	; 0x90
 8007c3a:	443b      	add	r3, r7
 8007c3c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8007c40:	4a1f      	ldr	r2, [pc, #124]	; (8007cc0 <MPU9250SelfTest+0x298>)
 8007c42:	fb82 1203 	smull	r1, r2, r2, r3
 8007c46:	1192      	asrs	r2, r2, #6
 8007c48:	17db      	asrs	r3, r3, #31
 8007c4a:	1ad2      	subs	r2, r2, r3
 8007c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	3390      	adds	r3, #144	; 0x90
 8007c54:	443b      	add	r3, r7
 8007c56:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 8007c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c5e:	3301      	adds	r3, #1
 8007c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	ddce      	ble.n	8007c0a <MPU9250SelfTest+0x1e2>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 8007c6c:	23e0      	movs	r3, #224	; 0xe0
 8007c6e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8007c72:	2364      	movs	r3, #100	; 0x64
 8007c74:	9302      	str	r3, [sp, #8]
 8007c76:	2301      	movs	r3, #1
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	2301      	movs	r3, #1
 8007c82:	221c      	movs	r2, #28
 8007c84:	21d0      	movs	r1, #208	; 0xd0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7fa f99a 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 8007c8c:	23e0      	movs	r3, #224	; 0xe0
 8007c8e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8007c92:	2364      	movs	r3, #100	; 0x64
 8007c94:	9302      	str	r3, [sp, #8]
 8007c96:	2301      	movs	r3, #1
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	221b      	movs	r2, #27
 8007ca4:	21d0      	movs	r1, #208	; 0xd0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7fa f98a 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8007cac:	2019      	movs	r0, #25
 8007cae:	f7f9 fabd 	bl	800122c <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cb8:	e06b      	b.n	8007d92 <MPU9250SelfTest+0x36a>
 8007cba:	bf00      	nop
 8007cbc:	0800c45c 	.word	0x0800c45c
 8007cc0:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8007cc4:	2364      	movs	r3, #100	; 0x64
 8007cc6:	9302      	str	r3, [sp, #8]
 8007cc8:	2306      	movs	r3, #6
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	223b      	movs	r2, #59	; 0x3b
 8007cd6:	21d0      	movs	r1, #208	; 0xd0
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fa fa6b 	bl	80021b4 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce0:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007ce4:	0212      	lsls	r2, r2, #8
 8007ce6:	b211      	sxth	r1, r2
 8007ce8:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007cec:	b212      	sxth	r2, r2
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	b212      	sxth	r2, r2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf8:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007cfc:	0212      	lsls	r2, r2, #8
 8007cfe:	b211      	sxth	r1, r2
 8007d00:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007d04:	b212      	sxth	r2, r2
 8007d06:	430a      	orrs	r2, r1
 8007d08:	b212      	sxth	r2, r2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d10:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007d14:	0212      	lsls	r2, r2, #8
 8007d16:	b211      	sxth	r1, r2
 8007d18:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007d1c:	b212      	sxth	r2, r2
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	b212      	sxth	r2, r2
 8007d22:	4413      	add	r3, r2
 8007d24:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8007d26:	2364      	movs	r3, #100	; 0x64
 8007d28:	9302      	str	r3, [sp, #8]
 8007d2a:	2306      	movs	r3, #6
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	2301      	movs	r3, #1
 8007d36:	2243      	movs	r2, #67	; 0x43
 8007d38:	21d0      	movs	r1, #208	; 0xd0
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7fa fa3a 	bl	80021b4 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007d46:	0212      	lsls	r2, r2, #8
 8007d48:	b211      	sxth	r1, r2
 8007d4a:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007d4e:	b212      	sxth	r2, r2
 8007d50:	430a      	orrs	r2, r1
 8007d52:	b212      	sxth	r2, r2
 8007d54:	4413      	add	r3, r2
 8007d56:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007d5e:	0212      	lsls	r2, r2, #8
 8007d60:	b211      	sxth	r1, r2
 8007d62:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007d66:	b212      	sxth	r2, r2
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	b212      	sxth	r2, r2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d72:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007d76:	0212      	lsls	r2, r2, #8
 8007d78:	b211      	sxth	r1, r2
 8007d7a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007d7e:	b212      	sxth	r2, r2
 8007d80:	430a      	orrs	r2, r1
 8007d82:	b212      	sxth	r2, r2
 8007d84:	4413      	add	r3, r2
 8007d86:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 8007d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d96:	2bc7      	cmp	r3, #199	; 0xc7
 8007d98:	dd94      	ble.n	8007cc4 <MPU9250SelfTest+0x29c>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007da0:	e02c      	b.n	8007dfc <MPU9250SelfTest+0x3d4>
		aSTAvg[ii] /= 200;
 8007da2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	3390      	adds	r3, #144	; 0x90
 8007daa:	443b      	add	r3, r7
 8007dac:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007db0:	4ad7      	ldr	r2, [pc, #860]	; (8008110 <MPU9250SelfTest+0x6e8>)
 8007db2:	fb82 1203 	smull	r1, r2, r2, r3
 8007db6:	1192      	asrs	r2, r2, #6
 8007db8:	17db      	asrs	r3, r3, #31
 8007dba:	1ad2      	subs	r2, r2, r3
 8007dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	3390      	adds	r3, #144	; 0x90
 8007dc4:	443b      	add	r3, r7
 8007dc6:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 8007dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	3390      	adds	r3, #144	; 0x90
 8007dd2:	443b      	add	r3, r7
 8007dd4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8007dd8:	4acd      	ldr	r2, [pc, #820]	; (8008110 <MPU9250SelfTest+0x6e8>)
 8007dda:	fb82 1203 	smull	r1, r2, r2, r3
 8007dde:	1192      	asrs	r2, r2, #6
 8007de0:	17db      	asrs	r3, r3, #31
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	3390      	adds	r3, #144	; 0x90
 8007dec:	443b      	add	r3, r7
 8007dee:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 8007df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007df6:	3301      	adds	r3, #1
 8007df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	ddce      	ble.n	8007da2 <MPU9250SelfTest+0x37a>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8007e04:	2300      	movs	r3, #0
 8007e06:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8007e0a:	2364      	movs	r3, #100	; 0x64
 8007e0c:	9302      	str	r3, [sp, #8]
 8007e0e:	2301      	movs	r3, #1
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	2301      	movs	r3, #1
 8007e1a:	221c      	movs	r2, #28
 8007e1c:	21d0      	movs	r1, #208	; 0xd0
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7fa f8ce 	bl	8001fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007e24:	2300      	movs	r3, #0
 8007e26:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8007e2a:	2364      	movs	r3, #100	; 0x64
 8007e2c:	9302      	str	r3, [sp, #8]
 8007e2e:	2301      	movs	r3, #1
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	2301      	movs	r3, #1
 8007e3a:	221b      	movs	r2, #27
 8007e3c:	21d0      	movs	r1, #208	; 0xd0
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7fa f8be 	bl	8001fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8007e44:	2019      	movs	r0, #25
 8007e46:	f7f9 f9f1 	bl	800122c <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 8007e4a:	2364      	movs	r3, #100	; 0x64
 8007e4c:	9302      	str	r3, [sp, #8]
 8007e4e:	2301      	movs	r3, #1
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	2301      	movs	r3, #1
 8007e5a:	220d      	movs	r2, #13
 8007e5c:	21d0      	movs	r1, #208	; 0xd0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7fa f9a8 	bl	80021b4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 8007e64:	2364      	movs	r3, #100	; 0x64
 8007e66:	9302      	str	r3, [sp, #8]
 8007e68:	2301      	movs	r3, #1
 8007e6a:	9301      	str	r3, [sp, #4]
 8007e6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e70:	3301      	adds	r3, #1
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	2301      	movs	r3, #1
 8007e76:	220e      	movs	r2, #14
 8007e78:	21d0      	movs	r1, #208	; 0xd0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7fa f99a 	bl	80021b4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 8007e80:	2364      	movs	r3, #100	; 0x64
 8007e82:	9302      	str	r3, [sp, #8]
 8007e84:	2301      	movs	r3, #1
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e8c:	3302      	adds	r3, #2
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	2301      	movs	r3, #1
 8007e92:	220f      	movs	r2, #15
 8007e94:	21d0      	movs	r1, #208	; 0xd0
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fa f98c 	bl	80021b4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 8007e9c:	2364      	movs	r3, #100	; 0x64
 8007e9e:	9302      	str	r3, [sp, #8]
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ea8:	3303      	adds	r3, #3
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	2301      	movs	r3, #1
 8007eae:	2200      	movs	r2, #0
 8007eb0:	21d0      	movs	r1, #208	; 0xd0
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fa f97e 	bl	80021b4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8007eb8:	2364      	movs	r3, #100	; 0x64
 8007eba:	9302      	str	r3, [sp, #8]
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	2301      	movs	r3, #1
 8007eca:	2201      	movs	r2, #1
 8007ecc:	21d0      	movs	r1, #208	; 0xd0
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7fa f970 	bl	80021b4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8007ed4:	2364      	movs	r3, #100	; 0x64
 8007ed6:	9302      	str	r3, [sp, #8]
 8007ed8:	2301      	movs	r3, #1
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ee0:	3305      	adds	r3, #5
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	21d0      	movs	r1, #208	; 0xd0
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fa f962 	bl	80021b4 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8007ef0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007ef4:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7f8 febd 	bl	8000c7c <__aeabi_i2f>
 8007f02:	4603      	mov	r3, r0
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7f8 fa87 	bl	8000418 <__aeabi_f2d>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	460d      	mov	r5, r1
 8007f0e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7f8 feae 	bl	8000c74 <__aeabi_ui2f>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7f8 fa7c 	bl	8000418 <__aeabi_f2d>
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	4b7b      	ldr	r3, [pc, #492]	; (8008114 <MPU9250SelfTest+0x6ec>)
 8007f26:	f7f8 f917 	bl	8000158 <__aeabi_dsub>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	a176      	add	r1, pc, #472	; (adr r1, 8008108 <MPU9250SelfTest+0x6e0>)
 8007f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f34:	f003 f820 	bl	800af78 <pow>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 fac2 	bl	80004c8 <__aeabi_dmul>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	f7f8 fd8c 	bl	8000a68 <__aeabi_d2f>
 8007f50:	4603      	mov	r3, r0
 8007f52:	623b      	str	r3, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8007f54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007f58:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7f8 fe8b 	bl	8000c7c <__aeabi_i2f>
 8007f66:	4603      	mov	r3, r0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7f8 fa55 	bl	8000418 <__aeabi_f2d>
 8007f6e:	4604      	mov	r4, r0
 8007f70:	460d      	mov	r5, r1
 8007f72:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7f8 fe7c 	bl	8000c74 <__aeabi_ui2f>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7f8 fa4a 	bl	8000418 <__aeabi_f2d>
 8007f84:	f04f 0200 	mov.w	r2, #0
 8007f88:	4b62      	ldr	r3, [pc, #392]	; (8008114 <MPU9250SelfTest+0x6ec>)
 8007f8a:	f7f8 f8e5 	bl	8000158 <__aeabi_dsub>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	a15d      	add	r1, pc, #372	; (adr r1, 8008108 <MPU9250SelfTest+0x6e0>)
 8007f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f98:	f002 ffee 	bl	800af78 <pow>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7f8 fa90 	bl	80004c8 <__aeabi_dmul>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4610      	mov	r0, r2
 8007fae:	4619      	mov	r1, r3
 8007fb0:	f7f8 fd5a 	bl	8000a68 <__aeabi_d2f>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8007fb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007fbc:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7f8 fe59 	bl	8000c7c <__aeabi_i2f>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7f8 fa23 	bl	8000418 <__aeabi_f2d>
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7f8 fe4a 	bl	8000c74 <__aeabi_ui2f>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7f8 fa18 	bl	8000418 <__aeabi_f2d>
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	4b49      	ldr	r3, [pc, #292]	; (8008114 <MPU9250SelfTest+0x6ec>)
 8007fee:	f7f8 f8b3 	bl	8000158 <__aeabi_dsub>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	a144      	add	r1, pc, #272	; (adr r1, 8008108 <MPU9250SelfTest+0x6e0>)
 8007ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ffc:	f002 ffbc 	bl	800af78 <pow>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4620      	mov	r0, r4
 8008006:	4629      	mov	r1, r5
 8008008:	f7f8 fa5e 	bl	80004c8 <__aeabi_dmul>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4610      	mov	r0, r2
 8008012:	4619      	mov	r1, r3
 8008014:	f7f8 fd28 	bl	8000a68 <__aeabi_d2f>
 8008018:	4603      	mov	r3, r0
 800801a:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 800801c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008020:	f640 223c 	movw	r2, #2620	; 0xa3c
 8008024:	fa02 f303 	lsl.w	r3, r2, r3
 8008028:	4618      	mov	r0, r3
 800802a:	f7f8 fe27 	bl	8000c7c <__aeabi_i2f>
 800802e:	4603      	mov	r3, r0
 8008030:	4618      	mov	r0, r3
 8008032:	f7f8 f9f1 	bl	8000418 <__aeabi_f2d>
 8008036:	4604      	mov	r4, r0
 8008038:	460d      	mov	r5, r1
 800803a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800803e:	4618      	mov	r0, r3
 8008040:	f7f8 fe18 	bl	8000c74 <__aeabi_ui2f>
 8008044:	4603      	mov	r3, r0
 8008046:	4618      	mov	r0, r3
 8008048:	f7f8 f9e6 	bl	8000418 <__aeabi_f2d>
 800804c:	f04f 0200 	mov.w	r2, #0
 8008050:	4b30      	ldr	r3, [pc, #192]	; (8008114 <MPU9250SelfTest+0x6ec>)
 8008052:	f7f8 f881 	bl	8000158 <__aeabi_dsub>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	a12b      	add	r1, pc, #172	; (adr r1, 8008108 <MPU9250SelfTest+0x6e0>)
 800805c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008060:	f002 ff8a 	bl	800af78 <pow>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4620      	mov	r0, r4
 800806a:	4629      	mov	r1, r5
 800806c:	f7f8 fa2c 	bl	80004c8 <__aeabi_dmul>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4610      	mov	r0, r2
 8008076:	4619      	mov	r1, r3
 8008078:	f7f8 fcf6 	bl	8000a68 <__aeabi_d2f>
 800807c:	4603      	mov	r3, r0
 800807e:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8008080:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008084:	f640 223c 	movw	r2, #2620	; 0xa3c
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	4618      	mov	r0, r3
 800808e:	f7f8 fdf5 	bl	8000c7c <__aeabi_i2f>
 8008092:	4603      	mov	r3, r0
 8008094:	4618      	mov	r0, r3
 8008096:	f7f8 f9bf 	bl	8000418 <__aeabi_f2d>
 800809a:	4604      	mov	r4, r0
 800809c:	460d      	mov	r5, r1
 800809e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7f8 fde6 	bl	8000c74 <__aeabi_ui2f>
 80080a8:	4603      	mov	r3, r0
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7f8 f9b4 	bl	8000418 <__aeabi_f2d>
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	4b17      	ldr	r3, [pc, #92]	; (8008114 <MPU9250SelfTest+0x6ec>)
 80080b6:	f7f8 f84f 	bl	8000158 <__aeabi_dsub>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	a112      	add	r1, pc, #72	; (adr r1, 8008108 <MPU9250SelfTest+0x6e0>)
 80080c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c4:	f002 ff58 	bl	800af78 <pow>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4620      	mov	r0, r4
 80080ce:	4629      	mov	r1, r5
 80080d0:	f7f8 f9fa 	bl	80004c8 <__aeabi_dmul>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4610      	mov	r0, r2
 80080da:	4619      	mov	r1, r3
 80080dc:	f7f8 fcc4 	bl	8000a68 <__aeabi_d2f>
 80080e0:	4603      	mov	r3, r0
 80080e2:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 80080e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080e8:	f640 223c 	movw	r2, #2620	; 0xa3c
 80080ec:	fa02 f303 	lsl.w	r3, r2, r3
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7f8 fdc3 	bl	8000c7c <__aeabi_i2f>
 80080f6:	4603      	mov	r3, r0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7f8 f98d 	bl	8000418 <__aeabi_f2d>
 80080fe:	4604      	mov	r4, r0
 8008100:	e00a      	b.n	8008118 <MPU9250SelfTest+0x6f0>
 8008102:	bf00      	nop
 8008104:	f3af 8000 	nop.w
 8008108:	c28f5c29 	.word	0xc28f5c29
 800810c:	3ff028f5 	.word	0x3ff028f5
 8008110:	51eb851f 	.word	0x51eb851f
 8008114:	3ff00000 	.word	0x3ff00000
 8008118:	460d      	mov	r5, r1
 800811a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800811e:	4618      	mov	r0, r3
 8008120:	f7f8 fda8 	bl	8000c74 <__aeabi_ui2f>
 8008124:	4603      	mov	r3, r0
 8008126:	4618      	mov	r0, r3
 8008128:	f7f8 f976 	bl	8000418 <__aeabi_f2d>
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	4b9f      	ldr	r3, [pc, #636]	; (80083b0 <MPU9250SelfTest+0x988>)
 8008132:	f7f8 f811 	bl	8000158 <__aeabi_dsub>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	a19b      	add	r1, pc, #620	; (adr r1, 80083a8 <MPU9250SelfTest+0x980>)
 800813c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008140:	f002 ff1a 	bl	800af78 <pow>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4620      	mov	r0, r4
 800814a:	4629      	mov	r1, r5
 800814c:	f7f8 f9bc 	bl	80004c8 <__aeabi_dmul>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4610      	mov	r0, r2
 8008156:	4619      	mov	r1, r3
 8008158:	f7f8 fc86 	bl	8000a68 <__aeabi_d2f>
 800815c:	4603      	mov	r3, r0
 800815e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8008160:	2300      	movs	r3, #0
 8008162:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008164:	e088      	b.n	8008278 <MPU9250SelfTest+0x850>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8008166:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	3390      	adds	r3, #144	; 0x90
 800816c:	443b      	add	r3, r7
 800816e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8008172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	3390      	adds	r3, #144	; 0x90
 8008178:	443b      	add	r3, r7
 800817a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	4618      	mov	r0, r3
 8008182:	f7f8 fd7b 	bl	8000c7c <__aeabi_i2f>
 8008186:	4603      	mov	r3, r0
 8008188:	4618      	mov	r0, r3
 800818a:	f7f8 f945 	bl	8000418 <__aeabi_f2d>
 800818e:	f04f 0200 	mov.w	r2, #0
 8008192:	4b88      	ldr	r3, [pc, #544]	; (80083b4 <MPU9250SelfTest+0x98c>)
 8008194:	f7f8 f998 	bl	80004c8 <__aeabi_dmul>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4614      	mov	r4, r2
 800819e:	461d      	mov	r5, r3
 80081a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	3390      	adds	r3, #144	; 0x90
 80081a6:	443b      	add	r3, r7
 80081a8:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7f8 f933 	bl	8000418 <__aeabi_f2d>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f8 faaf 	bl	800071c <__aeabi_ddiv>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4610      	mov	r0, r2
 80081c4:	4619      	mov	r1, r3
 80081c6:	f04f 0200 	mov.w	r2, #0
 80081ca:	4b7a      	ldr	r3, [pc, #488]	; (80083b4 <MPU9250SelfTest+0x98c>)
 80081cc:	f7f7 ffc4 	bl	8000158 <__aeabi_dsub>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4610      	mov	r0, r2
 80081d6:	4619      	mov	r1, r3
 80081d8:	f7f8 fc26 	bl	8000a28 <__aeabi_d2uiz>
 80081dc:	4602      	mov	r2, r0
 80081de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	3390      	adds	r3, #144	; 0x90
 80081e4:	443b      	add	r3, r7
 80081e6:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 80081ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	3390      	adds	r3, #144	; 0x90
 80081f0:	443b      	add	r3, r7
 80081f2:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80081f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	3390      	adds	r3, #144	; 0x90
 80081fc:	443b      	add	r3, r7
 80081fe:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	4618      	mov	r0, r3
 8008206:	f7f8 fd39 	bl	8000c7c <__aeabi_i2f>
 800820a:	4603      	mov	r3, r0
 800820c:	4618      	mov	r0, r3
 800820e:	f7f8 f903 	bl	8000418 <__aeabi_f2d>
 8008212:	f04f 0200 	mov.w	r2, #0
 8008216:	4b67      	ldr	r3, [pc, #412]	; (80083b4 <MPU9250SelfTest+0x98c>)
 8008218:	f7f8 f956 	bl	80004c8 <__aeabi_dmul>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4614      	mov	r4, r2
 8008222:	461d      	mov	r5, r3
 8008224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008226:	3303      	adds	r3, #3
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	3390      	adds	r3, #144	; 0x90
 800822c:	443b      	add	r3, r7
 800822e:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8008232:	4618      	mov	r0, r3
 8008234:	f7f8 f8f0 	bl	8000418 <__aeabi_f2d>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4620      	mov	r0, r4
 800823e:	4629      	mov	r1, r5
 8008240:	f7f8 fa6c 	bl	800071c <__aeabi_ddiv>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4610      	mov	r0, r2
 800824a:	4619      	mov	r1, r3
 800824c:	f04f 0200 	mov.w	r2, #0
 8008250:	4b58      	ldr	r3, [pc, #352]	; (80083b4 <MPU9250SelfTest+0x98c>)
 8008252:	f7f7 ff81 	bl	8000158 <__aeabi_dsub>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	4610      	mov	r0, r2
 800825c:	4619      	mov	r1, r3
 800825e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008260:	1cdc      	adds	r4, r3, #3
 8008262:	f7f8 fbe1 	bl	8000a28 <__aeabi_d2uiz>
 8008266:	4602      	mov	r2, r0
 8008268:	00a3      	lsls	r3, r4, #2
 800826a:	3390      	adds	r3, #144	; 0x90
 800826c:	443b      	add	r3, r7
 800826e:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 8008272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008274:	3301      	adds	r3, #1
 8008276:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800827a:	2b02      	cmp	r3, #2
 800827c:	f77f af73 	ble.w	8008166 <MPU9250SelfTest+0x73e>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");
#endif

   for (int i = 0; i < 3; i++) {
 8008280:	2300      	movs	r3, #0
 8008282:	67bb      	str	r3, [r7, #120]	; 0x78
 8008284:	e086      	b.n	8008394 <MPU9250SelfTest+0x96c>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8008286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	3390      	adds	r3, #144	; 0x90
 800828c:	443b      	add	r3, r7
 800828e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8008292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	3390      	adds	r3, #144	; 0x90
 8008298:	443b      	add	r3, r7
 800829a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7f8 fceb 	bl	8000c7c <__aeabi_i2f>
 80082a6:	4603      	mov	r3, r0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7f8 f8b5 	bl	8000418 <__aeabi_f2d>
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	4b40      	ldr	r3, [pc, #256]	; (80083b4 <MPU9250SelfTest+0x98c>)
 80082b4:	f7f8 f908 	bl	80004c8 <__aeabi_dmul>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4614      	mov	r4, r2
 80082be:	461d      	mov	r5, r3
 80082c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	3390      	adds	r3, #144	; 0x90
 80082c6:	443b      	add	r3, r7
 80082c8:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7f8 f8a3 	bl	8000418 <__aeabi_f2d>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4620      	mov	r0, r4
 80082d8:	4629      	mov	r1, r5
 80082da:	f7f8 fa1f 	bl	800071c <__aeabi_ddiv>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4610      	mov	r0, r2
 80082e4:	4619      	mov	r1, r3
 80082e6:	f04f 0200 	mov.w	r2, #0
 80082ea:	4b32      	ldr	r3, [pc, #200]	; (80083b4 <MPU9250SelfTest+0x98c>)
 80082ec:	f7f7 ff34 	bl	8000158 <__aeabi_dsub>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4610      	mov	r0, r2
 80082f6:	4619      	mov	r1, r3
 80082f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	18d4      	adds	r4, r2, r3
 8008300:	f7f8 fbb2 	bl	8000a68 <__aeabi_d2f>
 8008304:	4603      	mov	r3, r0
 8008306:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8008308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	3390      	adds	r3, #144	; 0x90
 800830e:	443b      	add	r3, r7
 8008310:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8008314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	3390      	adds	r3, #144	; 0x90
 800831a:	443b      	add	r3, r7
 800831c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	4618      	mov	r0, r3
 8008324:	f7f8 fcaa 	bl	8000c7c <__aeabi_i2f>
 8008328:	4603      	mov	r3, r0
 800832a:	4618      	mov	r0, r3
 800832c:	f7f8 f874 	bl	8000418 <__aeabi_f2d>
 8008330:	f04f 0200 	mov.w	r2, #0
 8008334:	4b1f      	ldr	r3, [pc, #124]	; (80083b4 <MPU9250SelfTest+0x98c>)
 8008336:	f7f8 f8c7 	bl	80004c8 <__aeabi_dmul>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4614      	mov	r4, r2
 8008340:	461d      	mov	r5, r3
 8008342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008344:	3303      	adds	r3, #3
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	3390      	adds	r3, #144	; 0x90
 800834a:	443b      	add	r3, r7
 800834c:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8008350:	4618      	mov	r0, r3
 8008352:	f7f8 f861 	bl	8000418 <__aeabi_f2d>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4620      	mov	r0, r4
 800835c:	4629      	mov	r1, r5
 800835e:	f7f8 f9dd 	bl	800071c <__aeabi_ddiv>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4610      	mov	r0, r2
 8008368:	4619      	mov	r1, r3
 800836a:	f04f 0200 	mov.w	r2, #0
 800836e:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <MPU9250SelfTest+0x98c>)
 8008370:	f7f7 fef2 	bl	8000158 <__aeabi_dsub>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4610      	mov	r0, r2
 800837a:	4619      	mov	r1, r3
 800837c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800837e:	3303      	adds	r3, #3
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	18d4      	adds	r4, r2, r3
 8008386:	f7f8 fb6f 	bl	8000a68 <__aeabi_d2f>
 800838a:	4603      	mov	r3, r0
 800838c:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 800838e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008390:	3301      	adds	r3, #1
 8008392:	67bb      	str	r3, [r7, #120]	; 0x78
 8008394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008396:	2b02      	cmp	r3, #2
 8008398:	f77f af75 	ble.w	8008286 <MPU9250SelfTest+0x85e>
   }
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	3790      	adds	r7, #144	; 0x90
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bdb0      	pop	{r4, r5, r7, pc}
 80083a6:	bf00      	nop
 80083a8:	c28f5c29 	.word	0xc28f5c29
 80083ac:	3ff028f5 	.word	0x3ff028f5
 80083b0:	3ff00000 	.word	0x3ff00000
 80083b4:	40590000 	.word	0x40590000

080083b8 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 80083b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ba:	b0ad      	sub	sp, #180	; 0xb4
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 80083c6:	4b8a      	ldr	r3, [pc, #552]	; (80085f0 <QuaternionUpdate+0x238>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083ce:	4b88      	ldr	r3, [pc, #544]	; (80085f0 <QuaternionUpdate+0x238>)
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083d6:	4b86      	ldr	r3, [pc, #536]	; (80085f0 <QuaternionUpdate+0x238>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083de:	4b84      	ldr	r3, [pc, #528]	; (80085f0 <QuaternionUpdate+0x238>)
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 80083e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ea:	4619      	mov	r1, r3
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7f8 fb91 	bl	8000b14 <__addsf3>
 80083f2:	4603      	mov	r3, r0
 80083f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float _2q2 = 2.0f * q2;
 80083f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083fc:	4619      	mov	r1, r3
 80083fe:	4618      	mov	r0, r3
 8008400:	f7f8 fb88 	bl	8000b14 <__addsf3>
 8008404:	4603      	mov	r3, r0
 8008406:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float _2q3 = 2.0f * q3;
 800840a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800840e:	4619      	mov	r1, r3
 8008410:	4618      	mov	r0, r3
 8008412:	f7f8 fb7f 	bl	8000b14 <__addsf3>
 8008416:	4603      	mov	r3, r0
 8008418:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float _2q4 = 2.0f * q4;
 800841c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008420:	4619      	mov	r1, r3
 8008422:	4618      	mov	r0, r3
 8008424:	f7f8 fb76 	bl	8000b14 <__addsf3>
 8008428:	4603      	mov	r3, r0
 800842a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 800842e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008432:	4619      	mov	r1, r3
 8008434:	4618      	mov	r0, r3
 8008436:	f7f8 fb6d 	bl	8000b14 <__addsf3>
 800843a:	4603      	mov	r3, r0
 800843c:	4619      	mov	r1, r3
 800843e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008442:	f7f8 fc6f 	bl	8000d24 <__aeabi_fmul>
 8008446:	4603      	mov	r3, r0
 8008448:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 800844c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008450:	4619      	mov	r1, r3
 8008452:	4618      	mov	r0, r3
 8008454:	f7f8 fb5e 	bl	8000b14 <__addsf3>
 8008458:	4603      	mov	r3, r0
 800845a:	4619      	mov	r1, r3
 800845c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008460:	f7f8 fc60 	bl	8000d24 <__aeabi_fmul>
 8008464:	4603      	mov	r3, r0
 8008466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 800846a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800846e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008472:	f7f8 fc57 	bl	8000d24 <__aeabi_fmul>
 8008476:	4603      	mov	r3, r0
 8008478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 800847c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008480:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008484:	f7f8 fc4e 	bl	8000d24 <__aeabi_fmul>
 8008488:	4603      	mov	r3, r0
 800848a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 800848e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008492:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008496:	f7f8 fc45 	bl	8000d24 <__aeabi_fmul>
 800849a:	4603      	mov	r3, r0
 800849c:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1q4 = q1 * q4;
 800849e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80084a2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80084a6:	f7f8 fc3d 	bl	8000d24 <__aeabi_fmul>
 80084aa:	4603      	mov	r3, r0
 80084ac:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2q2 = q2 * q2;
 80084ae:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80084b2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80084b6:	f7f8 fc35 	bl	8000d24 <__aeabi_fmul>
 80084ba:	4603      	mov	r3, r0
 80084bc:	677b      	str	r3, [r7, #116]	; 0x74
    float q2q3 = q2 * q3;
 80084be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084c2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80084c6:	f7f8 fc2d 	bl	8000d24 <__aeabi_fmul>
 80084ca:	4603      	mov	r3, r0
 80084cc:	673b      	str	r3, [r7, #112]	; 0x70
    float q2q4 = q2 * q4;
 80084ce:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80084d2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80084d6:	f7f8 fc25 	bl	8000d24 <__aeabi_fmul>
 80084da:	4603      	mov	r3, r0
 80084dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    float q3q3 = q3 * q3;
 80084de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084e2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80084e6:	f7f8 fc1d 	bl	8000d24 <__aeabi_fmul>
 80084ea:	4603      	mov	r3, r0
 80084ec:	66bb      	str	r3, [r7, #104]	; 0x68
    float q3q4 = q3 * q4;
 80084ee:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80084f2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80084f6:	f7f8 fc15 	bl	8000d24 <__aeabi_fmul>
 80084fa:	4603      	mov	r3, r0
 80084fc:	667b      	str	r3, [r7, #100]	; 0x64
    float q4q4 = q4 * q4;
 80084fe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008502:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008506:	f7f8 fc0d 	bl	8000d24 <__aeabi_fmul>
 800850a:	4603      	mov	r3, r0
 800850c:	663b      	str	r3, [r7, #96]	; 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 800850e:	68f9      	ldr	r1, [r7, #12]
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7f8 fc07 	bl	8000d24 <__aeabi_fmul>
 8008516:	4603      	mov	r3, r0
 8008518:	461c      	mov	r4, r3
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	68b8      	ldr	r0, [r7, #8]
 800851e:	f7f8 fc01 	bl	8000d24 <__aeabi_fmul>
 8008522:	4603      	mov	r3, r0
 8008524:	4619      	mov	r1, r3
 8008526:	4620      	mov	r0, r4
 8008528:	f7f8 faf4 	bl	8000b14 <__addsf3>
 800852c:	4603      	mov	r3, r0
 800852e:	461c      	mov	r4, r3
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7f8 fbf6 	bl	8000d24 <__aeabi_fmul>
 8008538:	4603      	mov	r3, r0
 800853a:	4619      	mov	r1, r3
 800853c:	4620      	mov	r0, r4
 800853e:	f7f8 fae9 	bl	8000b14 <__addsf3>
 8008542:	4603      	mov	r3, r0
 8008544:	4618      	mov	r0, r3
 8008546:	f002 fda1 	bl	800b08c <sqrtf>
 800854a:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 800854c:	f04f 0100 	mov.w	r1, #0
 8008550:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008552:	f7f8 fd7b 	bl	800104c <__aeabi_fcmpeq>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	f040 87e3 	bne.w	8009524 <QuaternionUpdate+0x116c>
    norm = 1.0f/norm;
 800855e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008560:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008564:	f7f8 fc92 	bl	8000e8c <__aeabi_fdiv>
 8008568:	4603      	mov	r3, r0
 800856a:	65fb      	str	r3, [r7, #92]	; 0x5c
    ax *= norm;
 800856c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f7f8 fbd8 	bl	8000d24 <__aeabi_fmul>
 8008574:	4603      	mov	r3, r0
 8008576:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 8008578:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800857a:	68b8      	ldr	r0, [r7, #8]
 800857c:	f7f8 fbd2 	bl	8000d24 <__aeabi_fmul>
 8008580:	4603      	mov	r3, r0
 8008582:	60bb      	str	r3, [r7, #8]
    az *= norm;
 8008584:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7f8 fbcc 	bl	8000d24 <__aeabi_fmul>
 800858c:	4603      	mov	r3, r0
 800858e:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8008590:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008594:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008598:	f7f8 fbc4 	bl	8000d24 <__aeabi_fmul>
 800859c:	4603      	mov	r3, r0
 800859e:	461c      	mov	r4, r3
 80085a0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80085a4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80085a8:	f7f8 fbbc 	bl	8000d24 <__aeabi_fmul>
 80085ac:	4603      	mov	r3, r0
 80085ae:	4619      	mov	r1, r3
 80085b0:	4620      	mov	r0, r4
 80085b2:	f7f8 faaf 	bl	8000b14 <__addsf3>
 80085b6:	4603      	mov	r3, r0
 80085b8:	461c      	mov	r4, r3
 80085ba:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80085be:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80085c2:	f7f8 fbaf 	bl	8000d24 <__aeabi_fmul>
 80085c6:	4603      	mov	r3, r0
 80085c8:	4619      	mov	r1, r3
 80085ca:	4620      	mov	r0, r4
 80085cc:	f7f8 faa2 	bl	8000b14 <__addsf3>
 80085d0:	4603      	mov	r3, r0
 80085d2:	4618      	mov	r0, r3
 80085d4:	f002 fd5a 	bl	800b08c <sqrtf>
 80085d8:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 80085da:	f04f 0100 	mov.w	r1, #0
 80085de:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80085e0:	f7f8 fd34 	bl	800104c <__aeabi_fcmpeq>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f040 879e 	bne.w	8009528 <QuaternionUpdate+0x1170>
 80085ec:	e002      	b.n	80085f4 <QuaternionUpdate+0x23c>
 80085ee:	bf00      	nop
 80085f0:	2000002c 	.word	0x2000002c
    norm = 1.0f/norm;
 80085f4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80085f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80085fa:	f7f8 fc47 	bl	8000e8c <__aeabi_fdiv>
 80085fe:	4603      	mov	r3, r0
 8008600:	65fb      	str	r3, [r7, #92]	; 0x5c
    mx *= norm;
 8008602:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008604:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008608:	f7f8 fb8c 	bl	8000d24 <__aeabi_fmul>
 800860c:	4603      	mov	r3, r0
 800860e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    my *= norm;
 8008612:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008614:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8008618:	f7f8 fb84 	bl	8000d24 <__aeabi_fmul>
 800861c:	4603      	mov	r3, r0
 800861e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mz *= norm;
 8008622:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008624:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008628:	f7f8 fb7c 	bl	8000d24 <__aeabi_fmul>
 800862c:	4603      	mov	r3, r0
 800862e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 8008632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008636:	4619      	mov	r1, r3
 8008638:	4618      	mov	r0, r3
 800863a:	f7f8 fa6b 	bl	8000b14 <__addsf3>
 800863e:	4603      	mov	r3, r0
 8008640:	4619      	mov	r1, r3
 8008642:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008646:	f7f8 fb6d 	bl	8000d24 <__aeabi_fmul>
 800864a:	4603      	mov	r3, r0
 800864c:	65bb      	str	r3, [r7, #88]	; 0x58
    _2q1my = 2.0f * q1 * my;
 800864e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008652:	4619      	mov	r1, r3
 8008654:	4618      	mov	r0, r3
 8008656:	f7f8 fa5d 	bl	8000b14 <__addsf3>
 800865a:	4603      	mov	r3, r0
 800865c:	4619      	mov	r1, r3
 800865e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8008662:	f7f8 fb5f 	bl	8000d24 <__aeabi_fmul>
 8008666:	4603      	mov	r3, r0
 8008668:	657b      	str	r3, [r7, #84]	; 0x54
    _2q1mz = 2.0f * q1 * mz;
 800866a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800866e:	4619      	mov	r1, r3
 8008670:	4618      	mov	r0, r3
 8008672:	f7f8 fa4f 	bl	8000b14 <__addsf3>
 8008676:	4603      	mov	r3, r0
 8008678:	4619      	mov	r1, r3
 800867a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800867e:	f7f8 fb51 	bl	8000d24 <__aeabi_fmul>
 8008682:	4603      	mov	r3, r0
 8008684:	653b      	str	r3, [r7, #80]	; 0x50
    _2q2mx = 2.0f * q2 * mx;
 8008686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800868a:	4619      	mov	r1, r3
 800868c:	4618      	mov	r0, r3
 800868e:	f7f8 fa41 	bl	8000b14 <__addsf3>
 8008692:	4603      	mov	r3, r0
 8008694:	4619      	mov	r1, r3
 8008696:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800869a:	f7f8 fb43 	bl	8000d24 <__aeabi_fmul>
 800869e:	4603      	mov	r3, r0
 80086a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 80086a2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80086a6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80086aa:	f7f8 fb3b 	bl	8000d24 <__aeabi_fmul>
 80086ae:	4603      	mov	r3, r0
 80086b0:	461c      	mov	r4, r3
 80086b2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80086b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80086b8:	f7f8 fb34 	bl	8000d24 <__aeabi_fmul>
 80086bc:	4603      	mov	r3, r0
 80086be:	4619      	mov	r1, r3
 80086c0:	4620      	mov	r0, r4
 80086c2:	f7f8 fa25 	bl	8000b10 <__aeabi_fsub>
 80086c6:	4603      	mov	r3, r0
 80086c8:	461c      	mov	r4, r3
 80086ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80086ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80086d0:	f7f8 fb28 	bl	8000d24 <__aeabi_fmul>
 80086d4:	4603      	mov	r3, r0
 80086d6:	4619      	mov	r1, r3
 80086d8:	4620      	mov	r0, r4
 80086da:	f7f8 fa1b 	bl	8000b14 <__addsf3>
 80086de:	4603      	mov	r3, r0
 80086e0:	461c      	mov	r4, r3
 80086e2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80086e4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80086e8:	f7f8 fb1c 	bl	8000d24 <__aeabi_fmul>
 80086ec:	4603      	mov	r3, r0
 80086ee:	4619      	mov	r1, r3
 80086f0:	4620      	mov	r0, r4
 80086f2:	f7f8 fa0f 	bl	8000b14 <__addsf3>
 80086f6:	4603      	mov	r3, r0
 80086f8:	461c      	mov	r4, r3
 80086fa:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80086fe:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008702:	f7f8 fb0f 	bl	8000d24 <__aeabi_fmul>
 8008706:	4603      	mov	r3, r0
 8008708:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800870c:	4618      	mov	r0, r3
 800870e:	f7f8 fb09 	bl	8000d24 <__aeabi_fmul>
 8008712:	4603      	mov	r3, r0
 8008714:	4619      	mov	r1, r3
 8008716:	4620      	mov	r0, r4
 8008718:	f7f8 f9fc 	bl	8000b14 <__addsf3>
 800871c:	4603      	mov	r3, r0
 800871e:	461c      	mov	r4, r3
 8008720:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008724:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008728:	f7f8 fafc 	bl	8000d24 <__aeabi_fmul>
 800872c:	4603      	mov	r3, r0
 800872e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008732:	4618      	mov	r0, r3
 8008734:	f7f8 faf6 	bl	8000d24 <__aeabi_fmul>
 8008738:	4603      	mov	r3, r0
 800873a:	4619      	mov	r1, r3
 800873c:	4620      	mov	r0, r4
 800873e:	f7f8 f9e9 	bl	8000b14 <__addsf3>
 8008742:	4603      	mov	r3, r0
 8008744:	461c      	mov	r4, r3
 8008746:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008748:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800874c:	f7f8 faea 	bl	8000d24 <__aeabi_fmul>
 8008750:	4603      	mov	r3, r0
 8008752:	4619      	mov	r1, r3
 8008754:	4620      	mov	r0, r4
 8008756:	f7f8 f9db 	bl	8000b10 <__aeabi_fsub>
 800875a:	4603      	mov	r3, r0
 800875c:	461c      	mov	r4, r3
 800875e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008760:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008764:	f7f8 fade 	bl	8000d24 <__aeabi_fmul>
 8008768:	4603      	mov	r3, r0
 800876a:	4619      	mov	r1, r3
 800876c:	4620      	mov	r0, r4
 800876e:	f7f8 f9cf 	bl	8000b10 <__aeabi_fsub>
 8008772:	4603      	mov	r3, r0
 8008774:	64bb      	str	r3, [r7, #72]	; 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8008776:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800877a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800877c:	f7f8 fad2 	bl	8000d24 <__aeabi_fmul>
 8008780:	4603      	mov	r3, r0
 8008782:	461c      	mov	r4, r3
 8008784:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008788:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800878c:	f7f8 faca 	bl	8000d24 <__aeabi_fmul>
 8008790:	4603      	mov	r3, r0
 8008792:	4619      	mov	r1, r3
 8008794:	4620      	mov	r0, r4
 8008796:	f7f8 f9bd 	bl	8000b14 <__addsf3>
 800879a:	4603      	mov	r3, r0
 800879c:	461c      	mov	r4, r3
 800879e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80087a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80087a4:	f7f8 fabe 	bl	8000d24 <__aeabi_fmul>
 80087a8:	4603      	mov	r3, r0
 80087aa:	4619      	mov	r1, r3
 80087ac:	4620      	mov	r0, r4
 80087ae:	f7f8 f9af 	bl	8000b10 <__aeabi_fsub>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461c      	mov	r4, r3
 80087b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80087bc:	f7f8 fab2 	bl	8000d24 <__aeabi_fmul>
 80087c0:	4603      	mov	r3, r0
 80087c2:	4619      	mov	r1, r3
 80087c4:	4620      	mov	r0, r4
 80087c6:	f7f8 f9a5 	bl	8000b14 <__addsf3>
 80087ca:	4603      	mov	r3, r0
 80087cc:	461c      	mov	r4, r3
 80087ce:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80087d0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80087d4:	f7f8 faa6 	bl	8000d24 <__aeabi_fmul>
 80087d8:	4603      	mov	r3, r0
 80087da:	4619      	mov	r1, r3
 80087dc:	4620      	mov	r0, r4
 80087de:	f7f8 f997 	bl	8000b10 <__aeabi_fsub>
 80087e2:	4603      	mov	r3, r0
 80087e4:	461c      	mov	r4, r3
 80087e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087e8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80087ec:	f7f8 fa9a 	bl	8000d24 <__aeabi_fmul>
 80087f0:	4603      	mov	r3, r0
 80087f2:	4619      	mov	r1, r3
 80087f4:	4620      	mov	r0, r4
 80087f6:	f7f8 f98d 	bl	8000b14 <__addsf3>
 80087fa:	4603      	mov	r3, r0
 80087fc:	461c      	mov	r4, r3
 80087fe:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008802:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008806:	f7f8 fa8d 	bl	8000d24 <__aeabi_fmul>
 800880a:	4603      	mov	r3, r0
 800880c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008810:	4618      	mov	r0, r3
 8008812:	f7f8 fa87 	bl	8000d24 <__aeabi_fmul>
 8008816:	4603      	mov	r3, r0
 8008818:	4619      	mov	r1, r3
 800881a:	4620      	mov	r0, r4
 800881c:	f7f8 f97a 	bl	8000b14 <__addsf3>
 8008820:	4603      	mov	r3, r0
 8008822:	461c      	mov	r4, r3
 8008824:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008826:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800882a:	f7f8 fa7b 	bl	8000d24 <__aeabi_fmul>
 800882e:	4603      	mov	r3, r0
 8008830:	4619      	mov	r1, r3
 8008832:	4620      	mov	r0, r4
 8008834:	f7f8 f96c 	bl	8000b10 <__aeabi_fsub>
 8008838:	4603      	mov	r3, r0
 800883a:	647b      	str	r3, [r7, #68]	; 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 800883c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800883e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008840:	f7f8 fa70 	bl	8000d24 <__aeabi_fmul>
 8008844:	4603      	mov	r3, r0
 8008846:	461c      	mov	r4, r3
 8008848:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800884a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800884c:	f7f8 fa6a 	bl	8000d24 <__aeabi_fmul>
 8008850:	4603      	mov	r3, r0
 8008852:	4619      	mov	r1, r3
 8008854:	4620      	mov	r0, r4
 8008856:	f7f8 f95d 	bl	8000b14 <__addsf3>
 800885a:	4603      	mov	r3, r0
 800885c:	4618      	mov	r0, r3
 800885e:	f002 fc15 	bl	800b08c <sqrtf>
 8008862:	6438      	str	r0, [r7, #64]	; 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8008864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008866:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800886a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800886e:	4618      	mov	r0, r3
 8008870:	f7f8 fa58 	bl	8000d24 <__aeabi_fmul>
 8008874:	4603      	mov	r3, r0
 8008876:	461c      	mov	r4, r3
 8008878:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800887c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800887e:	f7f8 fa51 	bl	8000d24 <__aeabi_fmul>
 8008882:	4603      	mov	r3, r0
 8008884:	4619      	mov	r1, r3
 8008886:	4620      	mov	r0, r4
 8008888:	f7f8 f944 	bl	8000b14 <__addsf3>
 800888c:	4603      	mov	r3, r0
 800888e:	461c      	mov	r4, r3
 8008890:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008894:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008898:	f7f8 fa44 	bl	8000d24 <__aeabi_fmul>
 800889c:	4603      	mov	r3, r0
 800889e:	4619      	mov	r1, r3
 80088a0:	4620      	mov	r0, r4
 80088a2:	f7f8 f937 	bl	8000b14 <__addsf3>
 80088a6:	4603      	mov	r3, r0
 80088a8:	461c      	mov	r4, r3
 80088aa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80088ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80088b0:	f7f8 fa38 	bl	8000d24 <__aeabi_fmul>
 80088b4:	4603      	mov	r3, r0
 80088b6:	4619      	mov	r1, r3
 80088b8:	4620      	mov	r0, r4
 80088ba:	f7f8 f92b 	bl	8000b14 <__addsf3>
 80088be:	4603      	mov	r3, r0
 80088c0:	461c      	mov	r4, r3
 80088c2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80088c4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80088c8:	f7f8 fa2c 	bl	8000d24 <__aeabi_fmul>
 80088cc:	4603      	mov	r3, r0
 80088ce:	4619      	mov	r1, r3
 80088d0:	4620      	mov	r0, r4
 80088d2:	f7f8 f91d 	bl	8000b10 <__aeabi_fsub>
 80088d6:	4603      	mov	r3, r0
 80088d8:	461c      	mov	r4, r3
 80088da:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80088de:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80088e2:	f7f8 fa1f 	bl	8000d24 <__aeabi_fmul>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7f8 fa19 	bl	8000d24 <__aeabi_fmul>
 80088f2:	4603      	mov	r3, r0
 80088f4:	4619      	mov	r1, r3
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7f8 f90c 	bl	8000b14 <__addsf3>
 80088fc:	4603      	mov	r3, r0
 80088fe:	461c      	mov	r4, r3
 8008900:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008902:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008906:	f7f8 fa0d 	bl	8000d24 <__aeabi_fmul>
 800890a:	4603      	mov	r3, r0
 800890c:	4619      	mov	r1, r3
 800890e:	4620      	mov	r0, r4
 8008910:	f7f8 f8fe 	bl	8000b10 <__aeabi_fsub>
 8008914:	4603      	mov	r3, r0
 8008916:	461c      	mov	r4, r3
 8008918:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800891a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800891e:	f7f8 fa01 	bl	8000d24 <__aeabi_fmul>
 8008922:	4603      	mov	r3, r0
 8008924:	4619      	mov	r1, r3
 8008926:	4620      	mov	r0, r4
 8008928:	f7f8 f8f4 	bl	8000b14 <__addsf3>
 800892c:	4603      	mov	r3, r0
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
    _4bx = 2.0f * _2bx;
 8008930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008932:	4619      	mov	r1, r3
 8008934:	4618      	mov	r0, r3
 8008936:	f7f8 f8ed 	bl	8000b14 <__addsf3>
 800893a:	4603      	mov	r3, r0
 800893c:	63bb      	str	r3, [r7, #56]	; 0x38
    _4bz = 2.0f * _2bz;
 800893e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008940:	4619      	mov	r1, r3
 8008942:	4618      	mov	r0, r3
 8008944:	f7f8 f8e6 	bl	8000b14 <__addsf3>
 8008948:	4603      	mov	r3, r0
 800894a:	637b      	str	r3, [r7, #52]	; 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800894c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008950:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8008954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008956:	4619      	mov	r1, r3
 8008958:	4618      	mov	r0, r3
 800895a:	f7f8 f8db 	bl	8000b14 <__addsf3>
 800895e:	4603      	mov	r3, r0
 8008960:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008964:	4618      	mov	r0, r3
 8008966:	f7f8 f8d3 	bl	8000b10 <__aeabi_fsub>
 800896a:	4603      	mov	r3, r0
 800896c:	68f9      	ldr	r1, [r7, #12]
 800896e:	4618      	mov	r0, r3
 8008970:	f7f8 f8ce 	bl	8000b10 <__aeabi_fsub>
 8008974:	4603      	mov	r3, r0
 8008976:	4619      	mov	r1, r3
 8008978:	4620      	mov	r0, r4
 800897a:	f7f8 f9d3 	bl	8000d24 <__aeabi_fmul>
 800897e:	4603      	mov	r3, r0
 8008980:	461c      	mov	r4, r3
 8008982:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008986:	4619      	mov	r1, r3
 8008988:	4618      	mov	r0, r3
 800898a:	f7f8 f8c3 	bl	8000b14 <__addsf3>
 800898e:	4603      	mov	r3, r0
 8008990:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008994:	4618      	mov	r0, r3
 8008996:	f7f8 f8bd 	bl	8000b14 <__addsf3>
 800899a:	4603      	mov	r3, r0
 800899c:	68b9      	ldr	r1, [r7, #8]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7f8 f8b6 	bl	8000b10 <__aeabi_fsub>
 80089a4:	4603      	mov	r3, r0
 80089a6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7f8 f9ba 	bl	8000d24 <__aeabi_fmul>
 80089b0:	4603      	mov	r3, r0
 80089b2:	4619      	mov	r1, r3
 80089b4:	4620      	mov	r0, r4
 80089b6:	f7f8 f8ad 	bl	8000b14 <__addsf3>
 80089ba:	4603      	mov	r3, r0
 80089bc:	461c      	mov	r4, r3
 80089be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80089c4:	f7f8 f9ae 	bl	8000d24 <__aeabi_fmul>
 80089c8:	4603      	mov	r3, r0
 80089ca:	461d      	mov	r5, r3
 80089cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089ce:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80089d2:	f7f8 f89d 	bl	8000b10 <__aeabi_fsub>
 80089d6:	4603      	mov	r3, r0
 80089d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f8 f898 	bl	8000b10 <__aeabi_fsub>
 80089e0:	4603      	mov	r3, r0
 80089e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7f8 f99d 	bl	8000d24 <__aeabi_fmul>
 80089ea:	4603      	mov	r3, r0
 80089ec:	461e      	mov	r6, r3
 80089ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80089f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80089f2:	f7f8 f88d 	bl	8000b10 <__aeabi_fsub>
 80089f6:	4603      	mov	r3, r0
 80089f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7f8 f992 	bl	8000d24 <__aeabi_fmul>
 8008a00:	4603      	mov	r3, r0
 8008a02:	4619      	mov	r1, r3
 8008a04:	4630      	mov	r0, r6
 8008a06:	f7f8 f885 	bl	8000b14 <__addsf3>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7f8 f87d 	bl	8000b10 <__aeabi_fsub>
 8008a16:	4603      	mov	r3, r0
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f7f8 f982 	bl	8000d24 <__aeabi_fmul>
 8008a20:	4603      	mov	r3, r0
 8008a22:	4619      	mov	r1, r3
 8008a24:	4620      	mov	r0, r4
 8008a26:	f7f8 f873 	bl	8000b10 <__aeabi_fsub>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	461c      	mov	r4, r3
 8008a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008a34:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7f8 f973 	bl	8000d24 <__aeabi_fmul>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	461d      	mov	r5, r3
 8008a42:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008a46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008a48:	f7f8 f96c 	bl	8000d24 <__aeabi_fmul>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4628      	mov	r0, r5
 8008a52:	f7f8 f85f 	bl	8000b14 <__addsf3>
 8008a56:	4603      	mov	r3, r0
 8008a58:	461d      	mov	r5, r3
 8008a5a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008a5c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008a5e:	f7f8 f857 	bl	8000b10 <__aeabi_fsub>
 8008a62:	4603      	mov	r3, r0
 8008a64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f8 f95c 	bl	8000d24 <__aeabi_fmul>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461e      	mov	r6, r3
 8008a70:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008a72:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008a76:	f7f8 f84d 	bl	8000b14 <__addsf3>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f8 f950 	bl	8000d24 <__aeabi_fmul>
 8008a84:	4603      	mov	r3, r0
 8008a86:	4619      	mov	r1, r3
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7f8 f843 	bl	8000b14 <__addsf3>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7f8 f83b 	bl	8000b10 <__aeabi_fsub>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f7f8 f940 	bl	8000d24 <__aeabi_fmul>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f7f8 f833 	bl	8000b14 <__addsf3>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	461c      	mov	r4, r3
 8008ab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ab6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008ab8:	f7f8 f934 	bl	8000d24 <__aeabi_fmul>
 8008abc:	4603      	mov	r3, r0
 8008abe:	461d      	mov	r5, r3
 8008ac0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008ac2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008ac4:	f7f8 f826 	bl	8000b14 <__addsf3>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7f8 f929 	bl	8000d24 <__aeabi_fmul>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	461e      	mov	r6, r3
 8008ad6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008ad8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008adc:	f7f8 f818 	bl	8000b10 <__aeabi_fsub>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7f8 f813 	bl	8000b10 <__aeabi_fsub>
 8008aea:	4603      	mov	r3, r0
 8008aec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f8 f918 	bl	8000d24 <__aeabi_fmul>
 8008af4:	4603      	mov	r3, r0
 8008af6:	4619      	mov	r1, r3
 8008af8:	4630      	mov	r0, r6
 8008afa:	f7f8 f80b 	bl	8000b14 <__addsf3>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7f8 f803 	bl	8000b10 <__aeabi_fsub>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f7f8 f908 	bl	8000d24 <__aeabi_fmul>
 8008b14:	4603      	mov	r3, r0
 8008b16:	4619      	mov	r1, r3
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f7f7 fffb 	bl	8000b14 <__addsf3>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8008b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b24:	4619      	mov	r1, r3
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7f7 fff4 	bl	8000b14 <__addsf3>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7f7 ffec 	bl	8000b10 <__aeabi_fsub>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7f7 ffe7 	bl	8000b10 <__aeabi_fsub>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7f8 f8eb 	bl	8000d24 <__aeabi_fmul>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	461c      	mov	r4, r3
 8008b52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b56:	4619      	mov	r1, r3
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7f7 ffdb 	bl	8000b14 <__addsf3>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7f7 ffd5 	bl	8000b14 <__addsf3>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	68b9      	ldr	r1, [r7, #8]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7f7 ffce 	bl	8000b10 <__aeabi_fsub>
 8008b74:	4603      	mov	r3, r0
 8008b76:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7f8 f8d2 	bl	8000d24 <__aeabi_fmul>
 8008b80:	4603      	mov	r3, r0
 8008b82:	4619      	mov	r1, r3
 8008b84:	4620      	mov	r0, r4
 8008b86:	f7f7 ffc5 	bl	8000b14 <__addsf3>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	461c      	mov	r4, r3
 8008b8e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8008b92:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008b96:	f7f8 f8c5 	bl	8000d24 <__aeabi_fmul>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	461d      	mov	r5, r3
 8008b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7f7 ffb6 	bl	8000b14 <__addsf3>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	4619      	mov	r1, r3
 8008bac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008bb0:	f7f7 ffae 	bl	8000b10 <__aeabi_fsub>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	461e      	mov	r6, r3
 8008bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7f7 ffa9 	bl	8000b14 <__addsf3>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f7f7 ffa2 	bl	8000b10 <__aeabi_fsub>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7f7 ff9d 	bl	8000b10 <__aeabi_fsub>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f7f8 f8a2 	bl	8000d24 <__aeabi_fmul>
 8008be0:	4603      	mov	r3, r0
 8008be2:	4619      	mov	r1, r3
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7f7 ff93 	bl	8000b10 <__aeabi_fsub>
 8008bea:	4603      	mov	r3, r0
 8008bec:	461c      	mov	r4, r3
 8008bee:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008bf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008bf4:	f7f8 f896 	bl	8000d24 <__aeabi_fmul>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461d      	mov	r5, r3
 8008bfc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008bfe:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008c02:	f7f7 ff85 	bl	8000b10 <__aeabi_fsub>
 8008c06:	4603      	mov	r3, r0
 8008c08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7f7 ff80 	bl	8000b10 <__aeabi_fsub>
 8008c10:	4603      	mov	r3, r0
 8008c12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7f8 f885 	bl	8000d24 <__aeabi_fmul>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	461e      	mov	r6, r3
 8008c1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c22:	f7f7 ff75 	bl	8000b10 <__aeabi_fsub>
 8008c26:	4603      	mov	r3, r0
 8008c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7f8 f87a 	bl	8000d24 <__aeabi_fmul>
 8008c30:	4603      	mov	r3, r0
 8008c32:	4619      	mov	r1, r3
 8008c34:	4630      	mov	r0, r6
 8008c36:	f7f7 ff6d 	bl	8000b14 <__addsf3>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7f7 ff65 	bl	8000b10 <__aeabi_fsub>
 8008c46:	4603      	mov	r3, r0
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f7f8 f86a 	bl	8000d24 <__aeabi_fmul>
 8008c50:	4603      	mov	r3, r0
 8008c52:	4619      	mov	r1, r3
 8008c54:	4620      	mov	r0, r4
 8008c56:	f7f7 ff5d 	bl	8000b14 <__addsf3>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	461c      	mov	r4, r3
 8008c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c62:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008c64:	f7f8 f85e 	bl	8000d24 <__aeabi_fmul>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	461d      	mov	r5, r3
 8008c6c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008c70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008c72:	f7f8 f857 	bl	8000d24 <__aeabi_fmul>
 8008c76:	4603      	mov	r3, r0
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f7f7 ff4a 	bl	8000b14 <__addsf3>
 8008c80:	4603      	mov	r3, r0
 8008c82:	461d      	mov	r5, r3
 8008c84:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008c86:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008c88:	f7f7 ff42 	bl	8000b10 <__aeabi_fsub>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7f8 f847 	bl	8000d24 <__aeabi_fmul>
 8008c96:	4603      	mov	r3, r0
 8008c98:	461e      	mov	r6, r3
 8008c9a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008c9c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008ca0:	f7f7 ff38 	bl	8000b14 <__addsf3>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7f8 f83b 	bl	8000d24 <__aeabi_fmul>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7f7 ff2e 	bl	8000b14 <__addsf3>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f7 ff26 	bl	8000b10 <__aeabi_fsub>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f7f8 f82b 	bl	8000d24 <__aeabi_fmul>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f7f7 ff1e 	bl	8000b14 <__addsf3>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461c      	mov	r4, r3
 8008cdc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008ce0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008ce2:	f7f8 f81f 	bl	8000d24 <__aeabi_fmul>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	461d      	mov	r5, r3
 8008cea:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008cee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008cf0:	f7f8 f818 	bl	8000d24 <__aeabi_fmul>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	f7f7 ff09 	bl	8000b10 <__aeabi_fsub>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	461d      	mov	r5, r3
 8008d02:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d04:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008d06:	f7f7 ff05 	bl	8000b14 <__addsf3>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7f8 f808 	bl	8000d24 <__aeabi_fmul>
 8008d14:	4603      	mov	r3, r0
 8008d16:	461e      	mov	r6, r3
 8008d18:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008d1a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008d1e:	f7f7 fef7 	bl	8000b10 <__aeabi_fsub>
 8008d22:	4603      	mov	r3, r0
 8008d24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7f7 fef2 	bl	8000b10 <__aeabi_fsub>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7f7 fff7 	bl	8000d24 <__aeabi_fmul>
 8008d36:	4603      	mov	r3, r0
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7f7 feea 	bl	8000b14 <__addsf3>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7f7 fee2 	bl	8000b10 <__aeabi_fsub>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4628      	mov	r0, r5
 8008d52:	f7f7 ffe7 	bl	8000d24 <__aeabi_fmul>
 8008d56:	4603      	mov	r3, r0
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f7f7 feda 	bl	8000b14 <__addsf3>
 8008d60:	4603      	mov	r3, r0
 8008d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8008d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d68:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8008d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7f7 fecf 	bl	8000b14 <__addsf3>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7f7 fec7 	bl	8000b10 <__aeabi_fsub>
 8008d82:	4603      	mov	r3, r0
 8008d84:	68f9      	ldr	r1, [r7, #12]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f7 fec2 	bl	8000b10 <__aeabi_fsub>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4620      	mov	r0, r4
 8008d92:	f7f7 ffc7 	bl	8000d24 <__aeabi_fmul>
 8008d96:	4603      	mov	r3, r0
 8008d98:	461c      	mov	r4, r3
 8008d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7f7 feb7 	bl	8000b14 <__addsf3>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7f7 feb1 	bl	8000b14 <__addsf3>
 8008db2:	4603      	mov	r3, r0
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f7 feaa 	bl	8000b10 <__aeabi_fsub>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f7 ffae 	bl	8000d24 <__aeabi_fmul>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f7f7 fea1 	bl	8000b14 <__addsf3>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	461c      	mov	r4, r3
 8008dd6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8008dda:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008dde:	f7f7 ffa1 	bl	8000d24 <__aeabi_fmul>
 8008de2:	4603      	mov	r3, r0
 8008de4:	461d      	mov	r5, r3
 8008de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008de8:	4619      	mov	r1, r3
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7f7 fe92 	bl	8000b14 <__addsf3>
 8008df0:	4603      	mov	r3, r0
 8008df2:	4619      	mov	r1, r3
 8008df4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008df8:	f7f7 fe8a 	bl	8000b10 <__aeabi_fsub>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	461e      	mov	r6, r3
 8008e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e02:	4619      	mov	r1, r3
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7f7 fe85 	bl	8000b14 <__addsf3>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f7f7 fe7e 	bl	8000b10 <__aeabi_fsub>
 8008e14:	4603      	mov	r3, r0
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7f7 fe79 	bl	8000b10 <__aeabi_fsub>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	4619      	mov	r1, r3
 8008e22:	4628      	mov	r0, r5
 8008e24:	f7f7 ff7e 	bl	8000d24 <__aeabi_fmul>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f7f7 fe6f 	bl	8000b10 <__aeabi_fsub>
 8008e32:	4603      	mov	r3, r0
 8008e34:	461c      	mov	r4, r3
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008e3c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7f7 ff6f 	bl	8000d24 <__aeabi_fmul>
 8008e46:	4603      	mov	r3, r0
 8008e48:	461d      	mov	r5, r3
 8008e4a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008e4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e50:	f7f7 ff68 	bl	8000d24 <__aeabi_fmul>
 8008e54:	4603      	mov	r3, r0
 8008e56:	4619      	mov	r1, r3
 8008e58:	4628      	mov	r0, r5
 8008e5a:	f7f7 fe59 	bl	8000b10 <__aeabi_fsub>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	461d      	mov	r5, r3
 8008e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e64:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008e68:	f7f7 fe52 	bl	8000b10 <__aeabi_fsub>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7f7 fe4d 	bl	8000b10 <__aeabi_fsub>
 8008e76:	4603      	mov	r3, r0
 8008e78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7f7 ff52 	bl	8000d24 <__aeabi_fmul>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461e      	mov	r6, r3
 8008e84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008e86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e88:	f7f7 fe42 	bl	8000b10 <__aeabi_fsub>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7f7 ff47 	bl	8000d24 <__aeabi_fmul>
 8008e96:	4603      	mov	r3, r0
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7f7 fe3a 	bl	8000b14 <__addsf3>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7f7 fe32 	bl	8000b10 <__aeabi_fsub>
 8008eac:	4603      	mov	r3, r0
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f7f7 ff37 	bl	8000d24 <__aeabi_fmul>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f7f7 fe2a 	bl	8000b14 <__addsf3>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	461c      	mov	r4, r3
 8008ec4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008ec8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008eca:	f7f7 ff2b 	bl	8000d24 <__aeabi_fmul>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	461d      	mov	r5, r3
 8008ed2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008ed6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008ed8:	f7f7 ff24 	bl	8000d24 <__aeabi_fmul>
 8008edc:	4603      	mov	r3, r0
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f7f7 fe17 	bl	8000b14 <__addsf3>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	461d      	mov	r5, r3
 8008eea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008eec:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008eee:	f7f7 fe0f 	bl	8000b10 <__aeabi_fsub>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7f7 ff14 	bl	8000d24 <__aeabi_fmul>
 8008efc:	4603      	mov	r3, r0
 8008efe:	461e      	mov	r6, r3
 8008f00:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008f02:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008f06:	f7f7 fe05 	bl	8000b14 <__addsf3>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7f7 ff08 	bl	8000d24 <__aeabi_fmul>
 8008f14:	4603      	mov	r3, r0
 8008f16:	4619      	mov	r1, r3
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7f7 fdfb 	bl	8000b14 <__addsf3>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7f7 fdf3 	bl	8000b10 <__aeabi_fsub>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f7f7 fef8 	bl	8000d24 <__aeabi_fmul>
 8008f34:	4603      	mov	r3, r0
 8008f36:	4619      	mov	r1, r3
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f7f7 fdeb 	bl	8000b14 <__addsf3>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	461c      	mov	r4, r3
 8008f42:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008f46:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f48:	f7f7 feec 	bl	8000d24 <__aeabi_fmul>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	461d      	mov	r5, r3
 8008f50:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008f56:	f7f7 fee5 	bl	8000d24 <__aeabi_fmul>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f7f7 fdd6 	bl	8000b10 <__aeabi_fsub>
 8008f64:	4603      	mov	r3, r0
 8008f66:	461d      	mov	r5, r3
 8008f68:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008f6a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008f6c:	f7f7 fdd2 	bl	8000b14 <__addsf3>
 8008f70:	4603      	mov	r3, r0
 8008f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7f7 fed5 	bl	8000d24 <__aeabi_fmul>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461e      	mov	r6, r3
 8008f7e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008f80:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008f84:	f7f7 fdc4 	bl	8000b10 <__aeabi_fsub>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7f7 fdbf 	bl	8000b10 <__aeabi_fsub>
 8008f92:	4603      	mov	r3, r0
 8008f94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7f7 fec4 	bl	8000d24 <__aeabi_fmul>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7f7 fdb7 	bl	8000b14 <__addsf3>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7f7 fdaf 	bl	8000b10 <__aeabi_fsub>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7f7 feb4 	bl	8000d24 <__aeabi_fmul>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f7f7 fda7 	bl	8000b14 <__addsf3>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8008fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f7 fda0 	bl	8000b14 <__addsf3>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7f7 fd98 	bl	8000b10 <__aeabi_fsub>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	68f9      	ldr	r1, [r7, #12]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7f7 fd93 	bl	8000b10 <__aeabi_fsub>
 8008fea:	4603      	mov	r3, r0
 8008fec:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7f7 fe97 	bl	8000d24 <__aeabi_fmul>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	461c      	mov	r4, r3
 8008ffa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ffe:	4619      	mov	r1, r3
 8009000:	4618      	mov	r0, r3
 8009002:	f7f7 fd87 	bl	8000b14 <__addsf3>
 8009006:	4603      	mov	r3, r0
 8009008:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800900c:	4618      	mov	r0, r3
 800900e:	f7f7 fd81 	bl	8000b14 <__addsf3>
 8009012:	4603      	mov	r3, r0
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	4618      	mov	r0, r3
 8009018:	f7f7 fd7a 	bl	8000b10 <__aeabi_fsub>
 800901c:	4603      	mov	r3, r0
 800901e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8009022:	4618      	mov	r0, r3
 8009024:	f7f7 fe7e 	bl	8000d24 <__aeabi_fmul>
 8009028:	4603      	mov	r3, r0
 800902a:	4619      	mov	r1, r3
 800902c:	4620      	mov	r0, r4
 800902e:	f7f7 fd71 	bl	8000b14 <__addsf3>
 8009032:	4603      	mov	r3, r0
 8009034:	461c      	mov	r4, r3
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800903c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009040:	4618      	mov	r0, r3
 8009042:	f7f7 fe6f 	bl	8000d24 <__aeabi_fmul>
 8009046:	4603      	mov	r3, r0
 8009048:	461d      	mov	r5, r3
 800904a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800904e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009050:	f7f7 fe68 	bl	8000d24 <__aeabi_fmul>
 8009054:	4603      	mov	r3, r0
 8009056:	4619      	mov	r1, r3
 8009058:	4628      	mov	r0, r5
 800905a:	f7f7 fd5b 	bl	8000b14 <__addsf3>
 800905e:	4603      	mov	r3, r0
 8009060:	461d      	mov	r5, r3
 8009062:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009064:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8009068:	f7f7 fd52 	bl	8000b10 <__aeabi_fsub>
 800906c:	4603      	mov	r3, r0
 800906e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009070:	4618      	mov	r0, r3
 8009072:	f7f7 fd4d 	bl	8000b10 <__aeabi_fsub>
 8009076:	4603      	mov	r3, r0
 8009078:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800907a:	4618      	mov	r0, r3
 800907c:	f7f7 fe52 	bl	8000d24 <__aeabi_fmul>
 8009080:	4603      	mov	r3, r0
 8009082:	461e      	mov	r6, r3
 8009084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009086:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009088:	f7f7 fd42 	bl	8000b10 <__aeabi_fsub>
 800908c:	4603      	mov	r3, r0
 800908e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009090:	4618      	mov	r0, r3
 8009092:	f7f7 fe47 	bl	8000d24 <__aeabi_fmul>
 8009096:	4603      	mov	r3, r0
 8009098:	4619      	mov	r1, r3
 800909a:	4630      	mov	r0, r6
 800909c:	f7f7 fd3a 	bl	8000b14 <__addsf3>
 80090a0:	4603      	mov	r3, r0
 80090a2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7f7 fd32 	bl	8000b10 <__aeabi_fsub>
 80090ac:	4603      	mov	r3, r0
 80090ae:	4619      	mov	r1, r3
 80090b0:	4628      	mov	r0, r5
 80090b2:	f7f7 fe37 	bl	8000d24 <__aeabi_fmul>
 80090b6:	4603      	mov	r3, r0
 80090b8:	4619      	mov	r1, r3
 80090ba:	4620      	mov	r0, r4
 80090bc:	f7f7 fd2a 	bl	8000b14 <__addsf3>
 80090c0:	4603      	mov	r3, r0
 80090c2:	461c      	mov	r4, r3
 80090c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80090ca:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7f7 fe28 	bl	8000d24 <__aeabi_fmul>
 80090d4:	4603      	mov	r3, r0
 80090d6:	461d      	mov	r5, r3
 80090d8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090de:	f7f7 fe21 	bl	8000d24 <__aeabi_fmul>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4619      	mov	r1, r3
 80090e6:	4628      	mov	r0, r5
 80090e8:	f7f7 fd14 	bl	8000b14 <__addsf3>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461d      	mov	r5, r3
 80090f0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80090f2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80090f4:	f7f7 fd0c 	bl	8000b10 <__aeabi_fsub>
 80090f8:	4603      	mov	r3, r0
 80090fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f7 fe11 	bl	8000d24 <__aeabi_fmul>
 8009102:	4603      	mov	r3, r0
 8009104:	461e      	mov	r6, r3
 8009106:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009108:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800910c:	f7f7 fd02 	bl	8000b14 <__addsf3>
 8009110:	4603      	mov	r3, r0
 8009112:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009114:	4618      	mov	r0, r3
 8009116:	f7f7 fe05 	bl	8000d24 <__aeabi_fmul>
 800911a:	4603      	mov	r3, r0
 800911c:	4619      	mov	r1, r3
 800911e:	4630      	mov	r0, r6
 8009120:	f7f7 fcf8 	bl	8000b14 <__addsf3>
 8009124:	4603      	mov	r3, r0
 8009126:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800912a:	4618      	mov	r0, r3
 800912c:	f7f7 fcf0 	bl	8000b10 <__aeabi_fsub>
 8009130:	4603      	mov	r3, r0
 8009132:	4619      	mov	r1, r3
 8009134:	4628      	mov	r0, r5
 8009136:	f7f7 fdf5 	bl	8000d24 <__aeabi_fmul>
 800913a:	4603      	mov	r3, r0
 800913c:	4619      	mov	r1, r3
 800913e:	4620      	mov	r0, r4
 8009140:	f7f7 fce8 	bl	8000b14 <__addsf3>
 8009144:	4603      	mov	r3, r0
 8009146:	461c      	mov	r4, r3
 8009148:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800914c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800914e:	f7f7 fde9 	bl	8000d24 <__aeabi_fmul>
 8009152:	4603      	mov	r3, r0
 8009154:	461d      	mov	r5, r3
 8009156:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009158:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800915a:	f7f7 fcdb 	bl	8000b14 <__addsf3>
 800915e:	4603      	mov	r3, r0
 8009160:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009162:	4618      	mov	r0, r3
 8009164:	f7f7 fdde 	bl	8000d24 <__aeabi_fmul>
 8009168:	4603      	mov	r3, r0
 800916a:	461e      	mov	r6, r3
 800916c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800916e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8009172:	f7f7 fccd 	bl	8000b10 <__aeabi_fsub>
 8009176:	4603      	mov	r3, r0
 8009178:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800917a:	4618      	mov	r0, r3
 800917c:	f7f7 fcc8 	bl	8000b10 <__aeabi_fsub>
 8009180:	4603      	mov	r3, r0
 8009182:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009184:	4618      	mov	r0, r3
 8009186:	f7f7 fdcd 	bl	8000d24 <__aeabi_fmul>
 800918a:	4603      	mov	r3, r0
 800918c:	4619      	mov	r1, r3
 800918e:	4630      	mov	r0, r6
 8009190:	f7f7 fcc0 	bl	8000b14 <__addsf3>
 8009194:	4603      	mov	r3, r0
 8009196:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800919a:	4618      	mov	r0, r3
 800919c:	f7f7 fcb8 	bl	8000b10 <__aeabi_fsub>
 80091a0:	4603      	mov	r3, r0
 80091a2:	4619      	mov	r1, r3
 80091a4:	4628      	mov	r0, r5
 80091a6:	f7f7 fdbd 	bl	8000d24 <__aeabi_fmul>
 80091aa:	4603      	mov	r3, r0
 80091ac:	4619      	mov	r1, r3
 80091ae:	4620      	mov	r0, r4
 80091b0:	f7f7 fcb0 	bl	8000b14 <__addsf3>
 80091b4:	4603      	mov	r3, r0
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 80091b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091bc:	f7f7 fdb2 	bl	8000d24 <__aeabi_fmul>
 80091c0:	4603      	mov	r3, r0
 80091c2:	461c      	mov	r4, r3
 80091c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091c8:	f7f7 fdac 	bl	8000d24 <__aeabi_fmul>
 80091cc:	4603      	mov	r3, r0
 80091ce:	4619      	mov	r1, r3
 80091d0:	4620      	mov	r0, r4
 80091d2:	f7f7 fc9f 	bl	8000b14 <__addsf3>
 80091d6:	4603      	mov	r3, r0
 80091d8:	461c      	mov	r4, r3
 80091da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091de:	f7f7 fda1 	bl	8000d24 <__aeabi_fmul>
 80091e2:	4603      	mov	r3, r0
 80091e4:	4619      	mov	r1, r3
 80091e6:	4620      	mov	r0, r4
 80091e8:	f7f7 fc94 	bl	8000b14 <__addsf3>
 80091ec:	4603      	mov	r3, r0
 80091ee:	461c      	mov	r4, r3
 80091f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091f4:	f7f7 fd96 	bl	8000d24 <__aeabi_fmul>
 80091f8:	4603      	mov	r3, r0
 80091fa:	4619      	mov	r1, r3
 80091fc:	4620      	mov	r0, r4
 80091fe:	f7f7 fc89 	bl	8000b14 <__addsf3>
 8009202:	4603      	mov	r3, r0
 8009204:	4618      	mov	r0, r3
 8009206:	f001 ff41 	bl	800b08c <sqrtf>
 800920a:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 800920c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800920e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009212:	f7f7 fe3b 	bl	8000e8c <__aeabi_fdiv>
 8009216:	4603      	mov	r3, r0
 8009218:	65fb      	str	r3, [r7, #92]	; 0x5c
    s1 *= norm;
 800921a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800921c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800921e:	f7f7 fd81 	bl	8000d24 <__aeabi_fmul>
 8009222:	4603      	mov	r3, r0
 8009224:	633b      	str	r3, [r7, #48]	; 0x30
    s2 *= norm;
 8009226:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800922a:	f7f7 fd7b 	bl	8000d24 <__aeabi_fmul>
 800922e:	4603      	mov	r3, r0
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 *= norm;
 8009232:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009236:	f7f7 fd75 	bl	8000d24 <__aeabi_fmul>
 800923a:	4603      	mov	r3, r0
 800923c:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 *= norm;
 800923e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009242:	f7f7 fd6f 	bl	8000d24 <__aeabi_fmul>
 8009246:	4603      	mov	r3, r0
 8009248:	627b      	str	r3, [r7, #36]	; 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 800924a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800924e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	4618      	mov	r0, r3
 8009256:	f7f7 fd65 	bl	8000d24 <__aeabi_fmul>
 800925a:	4603      	mov	r3, r0
 800925c:	461c      	mov	r4, r3
 800925e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8009262:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009266:	f7f7 fd5d 	bl	8000d24 <__aeabi_fmul>
 800926a:	4603      	mov	r3, r0
 800926c:	4619      	mov	r1, r3
 800926e:	4620      	mov	r0, r4
 8009270:	f7f7 fc4e 	bl	8000b10 <__aeabi_fsub>
 8009274:	4603      	mov	r3, r0
 8009276:	461c      	mov	r4, r3
 8009278:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800927c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009280:	f7f7 fd50 	bl	8000d24 <__aeabi_fmul>
 8009284:	4603      	mov	r3, r0
 8009286:	4619      	mov	r1, r3
 8009288:	4620      	mov	r0, r4
 800928a:	f7f7 fc41 	bl	8000b10 <__aeabi_fsub>
 800928e:	4603      	mov	r3, r0
 8009290:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009294:	4618      	mov	r0, r3
 8009296:	f7f7 fd45 	bl	8000d24 <__aeabi_fmul>
 800929a:	4603      	mov	r3, r0
 800929c:	461c      	mov	r4, r3
 800929e:	4ba4      	ldr	r3, [pc, #656]	; (8009530 <QuaternionUpdate+0x1178>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7f7 fd3d 	bl	8000d24 <__aeabi_fmul>
 80092aa:	4603      	mov	r3, r0
 80092ac:	4619      	mov	r1, r3
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7f7 fc2e 	bl	8000b10 <__aeabi_fsub>
 80092b4:	4603      	mov	r3, r0
 80092b6:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80092be:	f7f7 fd31 	bl	8000d24 <__aeabi_fmul>
 80092c2:	4603      	mov	r3, r0
 80092c4:	461c      	mov	r4, r3
 80092c6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80092ca:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80092ce:	f7f7 fd29 	bl	8000d24 <__aeabi_fmul>
 80092d2:	4603      	mov	r3, r0
 80092d4:	4619      	mov	r1, r3
 80092d6:	4620      	mov	r0, r4
 80092d8:	f7f7 fc1c 	bl	8000b14 <__addsf3>
 80092dc:	4603      	mov	r3, r0
 80092de:	461c      	mov	r4, r3
 80092e0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80092e4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80092e8:	f7f7 fd1c 	bl	8000d24 <__aeabi_fmul>
 80092ec:	4603      	mov	r3, r0
 80092ee:	4619      	mov	r1, r3
 80092f0:	4620      	mov	r0, r4
 80092f2:	f7f7 fc0d 	bl	8000b10 <__aeabi_fsub>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7f7 fd11 	bl	8000d24 <__aeabi_fmul>
 8009302:	4603      	mov	r3, r0
 8009304:	461c      	mov	r4, r3
 8009306:	4b8a      	ldr	r3, [pc, #552]	; (8009530 <QuaternionUpdate+0x1178>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800930c:	4618      	mov	r0, r3
 800930e:	f7f7 fd09 	bl	8000d24 <__aeabi_fmul>
 8009312:	4603      	mov	r3, r0
 8009314:	4619      	mov	r1, r3
 8009316:	4620      	mov	r0, r4
 8009318:	f7f7 fbfa 	bl	8000b10 <__aeabi_fsub>
 800931c:	4603      	mov	r3, r0
 800931e:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8009320:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8009324:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009328:	f7f7 fcfc 	bl	8000d24 <__aeabi_fmul>
 800932c:	4603      	mov	r3, r0
 800932e:	461c      	mov	r4, r3
 8009330:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8009334:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009338:	f7f7 fcf4 	bl	8000d24 <__aeabi_fmul>
 800933c:	4603      	mov	r3, r0
 800933e:	4619      	mov	r1, r3
 8009340:	4620      	mov	r0, r4
 8009342:	f7f7 fbe5 	bl	8000b10 <__aeabi_fsub>
 8009346:	4603      	mov	r3, r0
 8009348:	461c      	mov	r4, r3
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009350:	f7f7 fce8 	bl	8000d24 <__aeabi_fmul>
 8009354:	4603      	mov	r3, r0
 8009356:	4619      	mov	r1, r3
 8009358:	4620      	mov	r0, r4
 800935a:	f7f7 fbdb 	bl	8000b14 <__addsf3>
 800935e:	4603      	mov	r3, r0
 8009360:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009364:	4618      	mov	r0, r3
 8009366:	f7f7 fcdd 	bl	8000d24 <__aeabi_fmul>
 800936a:	4603      	mov	r3, r0
 800936c:	461c      	mov	r4, r3
 800936e:	4b70      	ldr	r3, [pc, #448]	; (8009530 <QuaternionUpdate+0x1178>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009374:	4618      	mov	r0, r3
 8009376:	f7f7 fcd5 	bl	8000d24 <__aeabi_fmul>
 800937a:	4603      	mov	r3, r0
 800937c:	4619      	mov	r1, r3
 800937e:	4620      	mov	r0, r4
 8009380:	f7f7 fbc6 	bl	8000b10 <__aeabi_fsub>
 8009384:	4603      	mov	r3, r0
 8009386:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8009388:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800938c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009390:	f7f7 fcc8 	bl	8000d24 <__aeabi_fmul>
 8009394:	4603      	mov	r3, r0
 8009396:	461c      	mov	r4, r3
 8009398:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800939c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80093a0:	f7f7 fcc0 	bl	8000d24 <__aeabi_fmul>
 80093a4:	4603      	mov	r3, r0
 80093a6:	4619      	mov	r1, r3
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7f7 fbb3 	bl	8000b14 <__addsf3>
 80093ae:	4603      	mov	r3, r0
 80093b0:	461c      	mov	r4, r3
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80093b8:	f7f7 fcb4 	bl	8000d24 <__aeabi_fmul>
 80093bc:	4603      	mov	r3, r0
 80093be:	4619      	mov	r1, r3
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7f7 fba5 	bl	8000b10 <__aeabi_fsub>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7f7 fca9 	bl	8000d24 <__aeabi_fmul>
 80093d2:	4603      	mov	r3, r0
 80093d4:	461c      	mov	r4, r3
 80093d6:	4b56      	ldr	r3, [pc, #344]	; (8009530 <QuaternionUpdate+0x1178>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093dc:	4618      	mov	r0, r3
 80093de:	f7f7 fca1 	bl	8000d24 <__aeabi_fmul>
 80093e2:	4603      	mov	r3, r0
 80093e4:	4619      	mov	r1, r3
 80093e6:	4620      	mov	r0, r4
 80093e8:	f7f7 fb92 	bl	8000b10 <__aeabi_fsub>
 80093ec:	4603      	mov	r3, r0
 80093ee:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 80093f0:	4b50      	ldr	r3, [pc, #320]	; (8009534 <QuaternionUpdate+0x117c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6a39      	ldr	r1, [r7, #32]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7f7 fc94 	bl	8000d24 <__aeabi_fmul>
 80093fc:	4603      	mov	r3, r0
 80093fe:	4619      	mov	r1, r3
 8009400:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009404:	f7f7 fb86 	bl	8000b14 <__addsf3>
 8009408:	4603      	mov	r3, r0
 800940a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q2 += qDot2 * deltat;
 800940e:	4b49      	ldr	r3, [pc, #292]	; (8009534 <QuaternionUpdate+0x117c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69f9      	ldr	r1, [r7, #28]
 8009414:	4618      	mov	r0, r3
 8009416:	f7f7 fc85 	bl	8000d24 <__aeabi_fmul>
 800941a:	4603      	mov	r3, r0
 800941c:	4619      	mov	r1, r3
 800941e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009422:	f7f7 fb77 	bl	8000b14 <__addsf3>
 8009426:	4603      	mov	r3, r0
 8009428:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q3 += qDot3 * deltat;
 800942c:	4b41      	ldr	r3, [pc, #260]	; (8009534 <QuaternionUpdate+0x117c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69b9      	ldr	r1, [r7, #24]
 8009432:	4618      	mov	r0, r3
 8009434:	f7f7 fc76 	bl	8000d24 <__aeabi_fmul>
 8009438:	4603      	mov	r3, r0
 800943a:	4619      	mov	r1, r3
 800943c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009440:	f7f7 fb68 	bl	8000b14 <__addsf3>
 8009444:	4603      	mov	r3, r0
 8009446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q4 += qDot4 * deltat;
 800944a:	4b3a      	ldr	r3, [pc, #232]	; (8009534 <QuaternionUpdate+0x117c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6979      	ldr	r1, [r7, #20]
 8009450:	4618      	mov	r0, r3
 8009452:	f7f7 fc67 	bl	8000d24 <__aeabi_fmul>
 8009456:	4603      	mov	r3, r0
 8009458:	4619      	mov	r1, r3
 800945a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800945e:	f7f7 fb59 	bl	8000b14 <__addsf3>
 8009462:	4603      	mov	r3, r0
 8009464:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8009468:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800946c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009470:	f7f7 fc58 	bl	8000d24 <__aeabi_fmul>
 8009474:	4603      	mov	r3, r0
 8009476:	461c      	mov	r4, r3
 8009478:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800947c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009480:	f7f7 fc50 	bl	8000d24 <__aeabi_fmul>
 8009484:	4603      	mov	r3, r0
 8009486:	4619      	mov	r1, r3
 8009488:	4620      	mov	r0, r4
 800948a:	f7f7 fb43 	bl	8000b14 <__addsf3>
 800948e:	4603      	mov	r3, r0
 8009490:	461c      	mov	r4, r3
 8009492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009496:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800949a:	f7f7 fc43 	bl	8000d24 <__aeabi_fmul>
 800949e:	4603      	mov	r3, r0
 80094a0:	4619      	mov	r1, r3
 80094a2:	4620      	mov	r0, r4
 80094a4:	f7f7 fb36 	bl	8000b14 <__addsf3>
 80094a8:	4603      	mov	r3, r0
 80094aa:	461c      	mov	r4, r3
 80094ac:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80094b0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80094b4:	f7f7 fc36 	bl	8000d24 <__aeabi_fmul>
 80094b8:	4603      	mov	r3, r0
 80094ba:	4619      	mov	r1, r3
 80094bc:	4620      	mov	r0, r4
 80094be:	f7f7 fb29 	bl	8000b14 <__addsf3>
 80094c2:	4603      	mov	r3, r0
 80094c4:	4618      	mov	r0, r3
 80094c6:	f001 fde1 	bl	800b08c <sqrtf>
 80094ca:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 80094cc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80094ce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80094d2:	f7f7 fcdb 	bl	8000e8c <__aeabi_fdiv>
 80094d6:	4603      	mov	r3, r0
 80094d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    q[0] = q1 * norm;
 80094da:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80094dc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80094e0:	f7f7 fc20 	bl	8000d24 <__aeabi_fmul>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461a      	mov	r2, r3
 80094e8:	4b13      	ldr	r3, [pc, #76]	; (8009538 <QuaternionUpdate+0x1180>)
 80094ea:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 80094ec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80094ee:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80094f2:	f7f7 fc17 	bl	8000d24 <__aeabi_fmul>
 80094f6:	4603      	mov	r3, r0
 80094f8:	461a      	mov	r2, r3
 80094fa:	4b0f      	ldr	r3, [pc, #60]	; (8009538 <QuaternionUpdate+0x1180>)
 80094fc:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 80094fe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009500:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009504:	f7f7 fc0e 	bl	8000d24 <__aeabi_fmul>
 8009508:	4603      	mov	r3, r0
 800950a:	461a      	mov	r2, r3
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <QuaternionUpdate+0x1180>)
 800950e:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 8009510:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009512:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009516:	f7f7 fc05 	bl	8000d24 <__aeabi_fmul>
 800951a:	4603      	mov	r3, r0
 800951c:	461a      	mov	r2, r3
 800951e:	4b06      	ldr	r3, [pc, #24]	; (8009538 <QuaternionUpdate+0x1180>)
 8009520:	60da      	str	r2, [r3, #12]
 8009522:	e002      	b.n	800952a <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8009524:	bf00      	nop
 8009526:	e000      	b.n	800952a <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8009528:	bf00      	nop

}
 800952a:	37b4      	adds	r7, #180	; 0xb4
 800952c:	46bd      	mov	sp, r7
 800952e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009530:	20000028 	.word	0x20000028
 8009534:	200003f0 	.word	0x200003f0
 8009538:	2000002c 	.word	0x2000002c

0800953c <nRF24_CSN_L>:
{
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L()
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8009540:	2200      	movs	r2, #0
 8009542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009546:	4802      	ldr	r0, [pc, #8]	; (8009550 <nRF24_CSN_L+0x14>)
 8009548:	f7f8 fbc4 	bl	8001cd4 <HAL_GPIO_WritePin>
}
 800954c:	bf00      	nop
 800954e:	bd80      	pop	{r7, pc}
 8009550:	40010c00 	.word	0x40010c00

08009554 <nRF24_CSN_H>:

static inline void nRF24_CSN_H()
{
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8009558:	2201      	movs	r2, #1
 800955a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800955e:	4802      	ldr	r0, [pc, #8]	; (8009568 <nRF24_CSN_H+0x14>)
 8009560:	f7f8 fbb8 	bl	8001cd4 <HAL_GPIO_WritePin>
}
 8009564:	bf00      	nop
 8009566:	bd80      	pop	{r7, pc}
 8009568:	40010c00 	.word	0x40010c00

0800956c <nRF24_LL_RW>:

static inline uint8_t nRF24_LL_RW(uint8_t data)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af02      	add	r7, sp, #8
 8009572:	4603      	mov	r3, r0
 8009574:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if (HAL_SPI_TransmitReceive(&hspi2, &data, &result, 1, 2000) != HAL_OK)
 8009576:	f107 020f 	add.w	r2, r7, #15
 800957a:	1df9      	adds	r1, r7, #7
 800957c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	2301      	movs	r3, #1
 8009584:	4806      	ldr	r0, [pc, #24]	; (80095a0 <nRF24_LL_RW+0x34>)
 8009586:	f7fa f875 	bl	8003674 <HAL_SPI_TransmitReceive>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <nRF24_LL_RW+0x28>
    {
        Error_Handler();
 8009590:	f7fc fc92 	bl	8005eb8 <Error_Handler>
    };
    return result;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	2000011c 	.word	0x2000011c

080095a4 <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80095ae:	f7ff ffc5 	bl	800953c <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	f003 031f 	and.w	r3, r3, #31
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff ffd6 	bl	800956c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80095c0:	20ff      	movs	r0, #255	; 0xff
 80095c2:	f7ff ffd3 	bl	800956c <nRF24_LL_RW>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80095ca:	f7ff ffc3 	bl	8009554 <nRF24_CSN_H>

	return value;
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	460a      	mov	r2, r1
 80095e2:	71fb      	strb	r3, [r7, #7]
 80095e4:	4613      	mov	r3, r2
 80095e6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80095e8:	f7ff ffa8 	bl	800953c <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	2b1f      	cmp	r3, #31
 80095f0:	d810      	bhi.n	8009614 <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80095f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095f6:	f003 031f 	and.w	r3, r3, #31
 80095fa:	b25b      	sxtb	r3, r3
 80095fc:	f043 0320 	orr.w	r3, r3, #32
 8009600:	b25b      	sxtb	r3, r3
 8009602:	b2db      	uxtb	r3, r3
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff ffb1 	bl	800956c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800960a:	79bb      	ldrb	r3, [r7, #6]
 800960c:	4618      	mov	r0, r3
 800960e:	f7ff ffad 	bl	800956c <nRF24_LL_RW>
 8009612:	e013      	b.n	800963c <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8009614:	79fb      	ldrb	r3, [r7, #7]
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff ffa8 	bl	800956c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	2be1      	cmp	r3, #225	; 0xe1
 8009620:	d00c      	beq.n	800963c <nRF24_WriteReg+0x64>
 8009622:	79fb      	ldrb	r3, [r7, #7]
 8009624:	2be2      	cmp	r3, #226	; 0xe2
 8009626:	d009      	beq.n	800963c <nRF24_WriteReg+0x64>
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	2be3      	cmp	r3, #227	; 0xe3
 800962c:	d006      	beq.n	800963c <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	2bff      	cmp	r3, #255	; 0xff
 8009632:	d003      	beq.n	800963c <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 8009634:	79bb      	ldrb	r3, [r7, #6]
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff ff98 	bl	800956c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800963c:	f7ff ff8a 	bl	8009554 <nRF24_CSN_H>
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8009648:	b590      	push	{r4, r7, lr}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	6039      	str	r1, [r7, #0]
 8009652:	71fb      	strb	r3, [r7, #7]
 8009654:	4613      	mov	r3, r2
 8009656:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8009658:	f7ff ff70 	bl	800953c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800965c:	79fb      	ldrb	r3, [r7, #7]
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff ff84 	bl	800956c <nRF24_LL_RW>
	while (count--)
 8009664:	e007      	b.n	8009676 <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8009666:	683c      	ldr	r4, [r7, #0]
 8009668:	1c63      	adds	r3, r4, #1
 800966a:	603b      	str	r3, [r7, #0]
 800966c:	20ff      	movs	r0, #255	; 0xff
 800966e:	f7ff ff7d 	bl	800956c <nRF24_LL_RW>
 8009672:	4603      	mov	r3, r0
 8009674:	7023      	strb	r3, [r4, #0]
	while (count--)
 8009676:	79bb      	ldrb	r3, [r7, #6]
 8009678:	1e5a      	subs	r2, r3, #1
 800967a:	71ba      	strb	r2, [r7, #6]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1f2      	bne.n	8009666 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8009680:	f7ff ff68 	bl	8009554 <nRF24_CSN_H>
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	bd90      	pop	{r4, r7, pc}

0800968c <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	6039      	str	r1, [r7, #0]
 8009696:	71fb      	strb	r3, [r7, #7]
 8009698:	4613      	mov	r3, r2
 800969a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800969c:	f7ff ff4e 	bl	800953c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff ff62 	bl	800956c <nRF24_LL_RW>
	while (count--)
 80096a8:	e006      	b.n	80096b8 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	1c5a      	adds	r2, r3, #1
 80096ae:	603a      	str	r2, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7ff ff5a 	bl	800956c <nRF24_LL_RW>
	while (count--)
 80096b8:	79bb      	ldrb	r3, [r7, #6]
 80096ba:	1e5a      	subs	r2, r3, #1
 80096bc:	71ba      	strb	r2, [r7, #6]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1f3      	bne.n	80096aa <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80096c2:	f7ff ff47 	bl	8009554 <nRF24_CSN_H>
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 80096d2:	2108      	movs	r1, #8
 80096d4:	2000      	movs	r0, #0
 80096d6:	f7ff ff7f 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 80096da:	213f      	movs	r1, #63	; 0x3f
 80096dc:	2001      	movs	r0, #1
 80096de:	f7ff ff7b 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 80096e2:	2103      	movs	r1, #3
 80096e4:	2002      	movs	r0, #2
 80096e6:	f7ff ff77 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 80096ea:	2103      	movs	r1, #3
 80096ec:	2003      	movs	r0, #3
 80096ee:	f7ff ff73 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 80096f2:	2103      	movs	r1, #3
 80096f4:	2004      	movs	r0, #4
 80096f6:	f7ff ff6f 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 80096fa:	2102      	movs	r1, #2
 80096fc:	2005      	movs	r0, #5
 80096fe:	f7ff ff6b 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 8009702:	210e      	movs	r1, #14
 8009704:	2006      	movs	r0, #6
 8009706:	f7ff ff67 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800970a:	2100      	movs	r1, #0
 800970c:	2007      	movs	r0, #7
 800970e:	f7ff ff63 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8009712:	2100      	movs	r1, #0
 8009714:	2011      	movs	r0, #17
 8009716:	f7ff ff5f 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800971a:	2100      	movs	r1, #0
 800971c:	2012      	movs	r0, #18
 800971e:	f7ff ff5b 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8009722:	2100      	movs	r1, #0
 8009724:	2013      	movs	r0, #19
 8009726:	f7ff ff57 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800972a:	2100      	movs	r1, #0
 800972c:	2014      	movs	r0, #20
 800972e:	f7ff ff53 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8009732:	2100      	movs	r1, #0
 8009734:	2015      	movs	r0, #21
 8009736:	f7ff ff4f 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800973a:	2100      	movs	r1, #0
 800973c:	2016      	movs	r0, #22
 800973e:	f7ff ff4b 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8009742:	2100      	movs	r1, #0
 8009744:	201c      	movs	r0, #28
 8009746:	f7ff ff47 	bl	80095d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800974a:	2100      	movs	r1, #0
 800974c:	201d      	movs	r0, #29
 800974e:	f7ff ff43 	bl	80095d8 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 8009752:	f000 f99e 	bl	8009a92 <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 8009756:	f000 f994 	bl	8009a82 <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 800975a:	f000 f9a2 	bl	8009aa2 <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 800975e:	f7ff fef9 	bl	8009554 <nRF24_CSN_H>
}
 8009762:	bf00      	nop
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800976e:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <nRF24_Check+0x58>)
 8009770:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8009772:	2205      	movs	r2, #5
 8009774:	68b9      	ldr	r1, [r7, #8]
 8009776:	2030      	movs	r0, #48	; 0x30
 8009778:	f7ff ff88 	bl	800968c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 800977c:	463b      	mov	r3, r7
 800977e:	2205      	movs	r2, #5
 8009780:	4619      	mov	r1, r3
 8009782:	2010      	movs	r0, #16
 8009784:	f7ff ff60 	bl	8009648 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
 800978c:	e00f      	b.n	80097ae <nRF24_Check+0x46>
	{
		if (rxbuf[i] != *ptr++)
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	3310      	adds	r3, #16
 8009792:	443b      	add	r3, r7
 8009794:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	1c59      	adds	r1, r3, #1
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d001      	beq.n	80097a8 <nRF24_Check+0x40>
			return 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	e006      	b.n	80097b6 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++)
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	3301      	adds	r3, #1
 80097ac:	73fb      	strb	r3, [r7, #15]
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	d9ec      	bls.n	800978e <nRF24_Check+0x26>
	}

	return 1;
 80097b4:	2301      	movs	r3, #1
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	0800c464 	.word	0x0800c464

080097c4 <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80097ce:	2000      	movs	r0, #0
 80097d0:	f7ff fee8 	bl	80095a4 <nRF24_ReadReg>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d104      	bne.n	80097e8 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	f043 0302 	orr.w	r3, r3, #2
 80097e4:	73fb      	strb	r3, [r7, #15]
 80097e6:	e003      	b.n	80097f0 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	f023 0302 	bic.w	r3, r3, #2
 80097ee:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	4619      	mov	r1, r3
 80097f4:	2000      	movs	r0, #0
 80097f6:	f7ff feef 	bl	80095d8 <nRF24_WriteReg>
}
 80097fa:	bf00      	nop
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	4603      	mov	r3, r0
 800980a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800980c:	2000      	movs	r0, #0
 800980e:	f7ff fec9 	bl	80095a4 <nRF24_ReadReg>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	f023 0301 	bic.w	r3, r3, #1
 800981c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800981e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	b25a      	sxtb	r2, r3
 8009828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800982c:	4313      	orrs	r3, r2
 800982e:	b25b      	sxtb	r3, r3
 8009830:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	4619      	mov	r1, r3
 8009836:	2000      	movs	r0, #0
 8009838:	f7ff fece 	bl	80095d8 <nRF24_WriteReg>
}
 800983c:	bf00      	nop
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800984e:	2000      	movs	r0, #0
 8009850:	f7ff fea8 	bl	80095a4 <nRF24_ReadReg>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	f023 030c 	bic.w	r3, r3, #12
 800985e:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8009860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009864:	f003 030c 	and.w	r3, r3, #12
 8009868:	b25a      	sxtb	r2, r3
 800986a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800986e:	4313      	orrs	r3, r2
 8009870:	b25b      	sxtb	r3, r3
 8009872:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	4619      	mov	r1, r3
 8009878:	2000      	movs	r0, #0
 800987a:	f7ff fead 	bl	80095d8 <nRF24_WriteReg>
}
 800987e:	bf00      	nop
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	4603      	mov	r3, r0
 800988e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8009890:	79fb      	ldrb	r3, [r7, #7]
 8009892:	4619      	mov	r1, r3
 8009894:	2005      	movs	r0, #5
 8009896:	f7ff fe9f 	bl	80095d8 <nRF24_WriteReg>
}
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	4603      	mov	r3, r0
 80098aa:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	3b02      	subs	r3, #2
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	4619      	mov	r1, r3
 80098b4:	2003      	movs	r0, #3
 80098b6:	f7ff fe8f 	bl	80095d8 <nRF24_WriteReg>
}
 80098ba:	bf00      	nop
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	6039      	str	r1, [r7, #0]
 80098ce:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	2b06      	cmp	r3, #6
 80098d4:	d00a      	beq.n	80098ec <nRF24_SetAddr+0x28>
 80098d6:	2b06      	cmp	r3, #6
 80098d8:	dc36      	bgt.n	8009948 <nRF24_SetAddr+0x84>
 80098da:	2b01      	cmp	r3, #1
 80098dc:	dc02      	bgt.n	80098e4 <nRF24_SetAddr+0x20>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da04      	bge.n	80098ec <nRF24_SetAddr+0x28>
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
		break;
	default:
		break;
 80098e2:	e031      	b.n	8009948 <nRF24_SetAddr+0x84>
 80098e4:	3b02      	subs	r3, #2
	switch (pipe)
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	d82e      	bhi.n	8009948 <nRF24_SetAddr+0x84>
 80098ea:	e023      	b.n	8009934 <nRF24_SetAddr+0x70>
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80098ec:	2003      	movs	r0, #3
 80098ee:	f7ff fe59 	bl	80095a4 <nRF24_ReadReg>
 80098f2:	4603      	mov	r3, r0
 80098f4:	3301      	adds	r3, #1
 80098f6:	73fb      	strb	r3, [r7, #15]
		addr += addr_width;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	4413      	add	r3, r2
 80098fe:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 8009900:	f7ff fe1c 	bl	800953c <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	4a13      	ldr	r2, [pc, #76]	; (8009954 <nRF24_SetAddr+0x90>)
 8009908:	5cd3      	ldrb	r3, [r2, r3]
 800990a:	f043 0320 	orr.w	r3, r3, #32
 800990e:	b2db      	uxtb	r3, r3
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff fe2b 	bl	800956c <nRF24_LL_RW>
			nRF24_LL_RW(*addr--);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	1e5a      	subs	r2, r3, #1
 800991a:	603a      	str	r2, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff fe24 	bl	800956c <nRF24_LL_RW>
		} while (addr_width--);
 8009924:	7bfb      	ldrb	r3, [r7, #15]
 8009926:	1e5a      	subs	r2, r3, #1
 8009928:	73fa      	strb	r2, [r7, #15]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1f3      	bne.n	8009916 <nRF24_SetAddr+0x52>
		nRF24_CSN_H();
 800992e:	f7ff fe11 	bl	8009554 <nRF24_CSN_H>
		break;
 8009932:	e00a      	b.n	800994a <nRF24_SetAddr+0x86>
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	4a07      	ldr	r2, [pc, #28]	; (8009954 <nRF24_SetAddr+0x90>)
 8009938:	5cd2      	ldrb	r2, [r2, r3]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f7ff fe49 	bl	80095d8 <nRF24_WriteReg>
		break;
 8009946:	e000      	b.n	800994a <nRF24_SetAddr+0x86>
		break;
 8009948:	bf00      	nop
	}
}
 800994a:	bf00      	nop
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	0800c674 	.word	0x0800c674

08009958 <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8009962:	2006      	movs	r0, #6
 8009964:	f7ff fe1e 	bl	80095a4 <nRF24_ReadReg>
 8009968:	4603      	mov	r3, r0
 800996a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	f023 0306 	bic.w	r3, r3, #6
 8009972:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8009974:	7bfa      	ldrb	r2, [r7, #15]
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	4313      	orrs	r3, r2
 800997a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800997c:	7bfb      	ldrb	r3, [r7, #15]
 800997e:	4619      	mov	r1, r3
 8009980:	2006      	movs	r0, #6
 8009982:	f7ff fe29 	bl	80095d8 <nRF24_WriteReg>
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	4603      	mov	r3, r0
 8009996:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8009998:	2006      	movs	r0, #6
 800999a:	f7ff fe03 	bl	80095a4 <nRF24_ReadReg>
 800999e:	4603      	mov	r3, r0
 80099a0:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80099a8:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80099aa:	7bfa      	ldrb	r2, [r7, #15]
 80099ac:	79fb      	ldrb	r3, [r7, #7]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	4619      	mov	r1, r3
 80099b6:	2006      	movs	r0, #6
 80099b8:	f7ff fe0e 	bl	80095d8 <nRF24_WriteReg>
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <nRF24_SetRXPipe>:
 * @param pipe Pipe cần cấu hình
 * @param aa_state Bật phản hồi ACK hay không (nRF24_AA_ON or nRF24_AA_OFF)
 * @param payload_len độ dài của payload
 */
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	71fb      	strb	r3, [r7, #7]
 80099ce:	460b      	mov	r3, r1
 80099d0:	71bb      	strb	r3, [r7, #6]
 80099d2:	4613      	mov	r3, r2
 80099d4:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80099d6:	2002      	movs	r0, #2
 80099d8:	f7ff fde4 	bl	80095a4 <nRF24_ReadReg>
 80099dc:	4603      	mov	r3, r0
 80099de:	b25a      	sxtb	r2, r3
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	2101      	movs	r1, #1
 80099e4:	fa01 f303 	lsl.w	r3, r1, r3
 80099e8:	b25b      	sxtb	r3, r3
 80099ea:	4313      	orrs	r3, r2
 80099ec:	b25b      	sxtb	r3, r3
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099f4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	4619      	mov	r1, r3
 80099fa:	2002      	movs	r0, #2
 80099fc:	f7ff fdec 	bl	80095d8 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8009a00:	79fb      	ldrb	r3, [r7, #7]
 8009a02:	4a19      	ldr	r2, [pc, #100]	; (8009a68 <nRF24_SetRXPipe+0xa4>)
 8009a04:	5cd2      	ldrb	r2, [r2, r3]
 8009a06:	797b      	ldrb	r3, [r7, #5]
 8009a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	4619      	mov	r1, r3
 8009a10:	4610      	mov	r0, r2
 8009a12:	f7ff fde1 	bl	80095d8 <nRF24_WriteReg>

	// Set auto acknowledgment
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8009a16:	2001      	movs	r0, #1
 8009a18:	f7ff fdc4 	bl	80095a4 <nRF24_ReadReg>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON)
 8009a20:	79bb      	ldrb	r3, [r7, #6]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d10a      	bne.n	8009a3c <nRF24_SetRXPipe+0x78>
	{
		reg |= (1 << pipe);
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2e:	b25a      	sxtb	r2, r3
 8009a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	b25b      	sxtb	r3, r3
 8009a38:	73fb      	strb	r3, [r7, #15]
 8009a3a:	e00b      	b.n	8009a54 <nRF24_SetRXPipe+0x90>
	}
	else
	{
		reg &= ~(1 << pipe);
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	fa02 f303 	lsl.w	r3, r2, r3
 8009a44:	b25b      	sxtb	r3, r3
 8009a46:	43db      	mvns	r3, r3
 8009a48:	b25a      	sxtb	r2, r3
 8009a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a4e:	4013      	ands	r3, r2
 8009a50:	b25b      	sxtb	r3, r3
 8009a52:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	4619      	mov	r1, r3
 8009a58:	2001      	movs	r0, #1
 8009a5a:	f7ff fdbd 	bl	80095d8 <nRF24_WriteReg>
}
 8009a5e:	bf00      	nop
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	0800c66c 	.word	0x0800c66c

08009a6c <nRF24_GetStatus_RXFIFO>:
 * @brief Lấy tastus RX FIFO
 *
 * @return uint8_t one of the nRF24_STATUS_RXFIFO_xx values
 */
uint8_t nRF24_GetStatus_RXFIFO(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8009a70:	2017      	movs	r0, #23
 8009a72:	f7ff fd97 	bl	80095a4 <nRF24_ReadReg>
 8009a76:	4603      	mov	r3, r0
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	b2db      	uxtb	r3, r3
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8009a86:	21ff      	movs	r1, #255	; 0xff
 8009a88:	20e1      	movs	r0, #225	; 0xe1
 8009a8a:	f7ff fda5 	bl	80095d8 <nRF24_WriteReg>
}
 8009a8e:	bf00      	nop
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8009a96:	21ff      	movs	r1, #255	; 0xff
 8009a98:	20e2      	movs	r0, #226	; 0xe2
 8009a9a:	f7ff fd9d 	bl	80095d8 <nRF24_WriteReg>
}
 8009a9e:	bf00      	nop
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8009aa8:	2007      	movs	r0, #7
 8009aaa:	f7ff fd7b 	bl	80095a4 <nRF24_ReadReg>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009ab8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	4619      	mov	r1, r3
 8009abe:	2007      	movs	r0, #7
 8009ac0:	f7ff fd8a 	bl	80095d8 <nRF24_WriteReg>
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <nRF24_GetRxDplPayloadWidth>:
 * @brief đọc chiều dài của RX payload
 *
 * @return uint8_t độ dài
 */
static uint8_t nRF24_GetRxDplPayloadWidth()
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8009ad2:	f7ff fd33 	bl	800953c <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8009ad6:	2060      	movs	r0, #96	; 0x60
 8009ad8:	f7ff fd48 	bl	800956c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8009adc:	20ff      	movs	r0, #255	; 0xff
 8009ade:	f7ff fd45 	bl	800956c <nRF24_LL_RW>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8009ae6:	f7ff fd35 	bl	8009554 <nRF24_CSN_H>

	return value;
 8009aea:	79fb      	ldrb	r3, [r7, #7]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	4613      	mov	r3, r2
 8009b00:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8009b02:	2007      	movs	r0, #7
 8009b04:	f7ff fd4e 	bl	80095a4 <nRF24_ReadReg>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	105b      	asrs	r3, r3, #1
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6)
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	2b05      	cmp	r3, #5
 8009b18:	d829      	bhi.n	8009b6e <nRF24_ReadPayloadGeneric+0x7a>
	{
		// Get payload length
		if (dpl)
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00f      	beq.n	8009b40 <nRF24_ReadPayloadGeneric+0x4c>
		{
			*length = nRF24_GetRxDplPayloadWidth();
 8009b20:	f7ff ffd4 	bl	8009acc <nRF24_GetRxDplPayloadWidth>
 8009b24:	4603      	mov	r3, r0
 8009b26:	461a      	mov	r2, r3
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	701a      	strb	r2, [r3, #0]
			if (*length > 32)
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d90f      	bls.n	8009b54 <nRF24_ReadPayloadGeneric+0x60>
			{ // broken packet
				*length = 0;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8009b3a:	f7ff ffaa 	bl	8009a92 <nRF24_FlushRX>
 8009b3e:	e009      	b.n	8009b54 <nRF24_ReadPayloadGeneric+0x60>
			}
		}
		else
		{
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]); // đọc payload của pipe x
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	4a0f      	ldr	r2, [pc, #60]	; (8009b80 <nRF24_ReadPayloadGeneric+0x8c>)
 8009b44:	5cd3      	ldrb	r3, [r2, r3]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fd2c 	bl	80095a4 <nRF24_ReadReg>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	461a      	mov	r2, r3
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	701a      	strb	r2, [r3, #0]
		}

		// đọc payload từ RX FIFO
		if (*length)
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d006      	beq.n	8009b6a <nRF24_ReadPayloadGeneric+0x76>
		{
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	68f9      	ldr	r1, [r7, #12]
 8009b64:	2061      	movs	r0, #97	; 0x61
 8009b66:	f7ff fd6f 	bl	8009648 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8009b6a:	7dfb      	ldrb	r3, [r7, #23]
 8009b6c:	e003      	b.n	8009b76 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8009b74:	23ff      	movs	r3, #255	; 0xff
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	0800c66c 	.word	0x0800c66c

08009b84 <nRF24_ReadPayload>:
 * @return   nRF24_RX_PIPEX - đã nhận được dữ liệu từ pipe x
 * @return	 nRF24_RX_EMPTY - the RX FIFO đéo có cc gì
 *
 */
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length, 0);
 8009b8e:	2200      	movs	r2, #0
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff ffae 	bl	8009af4 <nRF24_ReadPayloadGeneric>
 8009b98:	4603      	mov	r3, r0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <math_constrain>:
extern float Kd_rate_yaw;

#endif

static float math_constrain(float value, float min, float max)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	607a      	str	r2, [r7, #4]
    if (value > max)
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f7f7 fa73 	bl	800109c <__aeabi_fcmpgt>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <math_constrain+0x20>
        value = max;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	e008      	b.n	8009bd4 <math_constrain+0x32>
    else if (value < min)
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7f7 fa4b 	bl	8001060 <__aeabi_fcmplt>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <math_constrain+0x32>
        value = min;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	60fb      	str	r3, [r7, #12]
    return value;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
	...

08009be0 <pid_calculate>:

void pid_calculate(float Error, float P, float I, float D, float PrevError, float PrevIterm)
{
 8009be0:	b5b0      	push	{r4, r5, r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	603b      	str	r3, [r7, #0]
    float Pterm = P * Error;
 8009bee:	68f9      	ldr	r1, [r7, #12]
 8009bf0:	68b8      	ldr	r0, [r7, #8]
 8009bf2:	f7f7 f897 	bl	8000d24 <__aeabi_fmul>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	61fb      	str	r3, [r7, #28]
    float Iterm = PrevIterm + I * (Error + PrevError) * dt / 2;
 8009bfa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bfc:	f7f6 fc0c 	bl	8000418 <__aeabi_f2d>
 8009c00:	4604      	mov	r4, r0
 8009c02:	460d      	mov	r5, r1
 8009c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f7f6 ff84 	bl	8000b14 <__addsf3>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	6879      	ldr	r1, [r7, #4]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7f7 f887 	bl	8000d24 <__aeabi_fmul>
 8009c16:	4603      	mov	r3, r0
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7f6 fbfd 	bl	8000418 <__aeabi_f2d>
 8009c1e:	a32a      	add	r3, pc, #168	; (adr r3, 8009cc8 <pid_calculate+0xe8>)
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f7f6 fc50 	bl	80004c8 <__aeabi_dmul>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4619      	mov	r1, r3
 8009c30:	f04f 0200 	mov.w	r2, #0
 8009c34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c38:	f7f6 fd70 	bl	800071c <__aeabi_ddiv>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4620      	mov	r0, r4
 8009c42:	4629      	mov	r1, r5
 8009c44:	f7f6 fa8a 	bl	800015c <__adddf3>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4619      	mov	r1, r3
 8009c50:	f7f6 ff0a 	bl	8000a68 <__aeabi_d2f>
 8009c54:	4603      	mov	r3, r0
 8009c56:	61bb      	str	r3, [r7, #24]
    math_constrain(Iterm, -200, 200);
 8009c58:	4a1d      	ldr	r2, [pc, #116]	; (8009cd0 <pid_calculate+0xf0>)
 8009c5a:	491e      	ldr	r1, [pc, #120]	; (8009cd4 <pid_calculate+0xf4>)
 8009c5c:	69b8      	ldr	r0, [r7, #24]
 8009c5e:	f7ff ffa0 	bl	8009ba2 <math_constrain>
    float Dterm = D * (Error - PrevError) / dt;
 8009c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7f6 ff53 	bl	8000b10 <__aeabi_fsub>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7f7 f858 	bl	8000d24 <__aeabi_fmul>
 8009c74:	4603      	mov	r3, r0
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7f6 fbce 	bl	8000418 <__aeabi_f2d>
 8009c7c:	a312      	add	r3, pc, #72	; (adr r3, 8009cc8 <pid_calculate+0xe8>)
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f7f6 fd4b 	bl	800071c <__aeabi_ddiv>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	f7f6 feeb 	bl	8000a68 <__aeabi_d2f>
 8009c92:	4603      	mov	r3, r0
 8009c94:	617b      	str	r3, [r7, #20]
    float PIDOutput = Pterm + Iterm + Dterm;
 8009c96:	69b9      	ldr	r1, [r7, #24]
 8009c98:	69f8      	ldr	r0, [r7, #28]
 8009c9a:	f7f6 ff3b 	bl	8000b14 <__addsf3>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6978      	ldr	r0, [r7, #20]
 8009ca4:	f7f6 ff36 	bl	8000b14 <__addsf3>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	613b      	str	r3, [r7, #16]


    PIDReturn[0] = PIDOutput;
 8009cac:	4a0a      	ldr	r2, [pc, #40]	; (8009cd8 <pid_calculate+0xf8>)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6013      	str	r3, [r2, #0]
    PIDReturn[1] = Error;
 8009cb2:	4a09      	ldr	r2, [pc, #36]	; (8009cd8 <pid_calculate+0xf8>)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6053      	str	r3, [r2, #4]
    PIDReturn[2] = Iterm;
 8009cb8:	4a07      	ldr	r2, [pc, #28]	; (8009cd8 <pid_calculate+0xf8>)
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	6093      	str	r3, [r2, #8]
}
 8009cbe:	bf00      	nop
 8009cc0:	3720      	adds	r7, #32
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	47ae147b 	.word	0x47ae147b
 8009ccc:	3f847ae1 	.word	0x3f847ae1
 8009cd0:	43480000 	.word	0x43480000
 8009cd4:	c3480000 	.word	0xc3480000
 8009cd8:	20000478 	.word	0x20000478
 8009cdc:	00000000 	.word	0x00000000

08009ce0 <pid_roll>:

void pid_roll(uint16_t roll_rc, float roll_angle, float roll_rate, PID_t *PID_out)
{
 8009ce0:	b5b0      	push	{r4, r5, r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	60b9      	str	r1, [r7, #8]
 8009ce8:	607a      	str	r2, [r7, #4]
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	4603      	mov	r3, r0
 8009cee:	81fb      	strh	r3, [r7, #14]
    if (roll_rc > 1500 || roll_rc < 1440)
 8009cf0:	89fb      	ldrh	r3, [r7, #14]
 8009cf2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d807      	bhi.n	8009d0a <pid_roll+0x2a>
 8009cfa:	89fb      	ldrh	r3, [r7, #14]
 8009cfc:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8009d00:	d303      	bcc.n	8009d0a <pid_roll+0x2a>
    {
        roll_rc = roll_rc;
    }
    else
    {
        roll_rc = 1500;
 8009d02:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009d06:	81fb      	strh	r3, [r7, #14]
 8009d08:	e000      	b.n	8009d0c <pid_roll+0x2c>
        roll_rc = roll_rc;
 8009d0a:	bf00      	nop
    }

//    roll_rc = 1800;

    error = 0.08 * (roll_rc - 1500) - roll_angle;
 8009d0c:	89fb      	ldrh	r3, [r7, #14]
 8009d0e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7f6 fb6e 	bl	80003f4 <__aeabi_i2d>
 8009d18:	a333      	add	r3, pc, #204	; (adr r3, 8009de8 <pid_roll+0x108>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f7f6 fbd3 	bl	80004c8 <__aeabi_dmul>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4614      	mov	r4, r2
 8009d28:	461d      	mov	r5, r3
 8009d2a:	68b8      	ldr	r0, [r7, #8]
 8009d2c:	f7f6 fb74 	bl	8000418 <__aeabi_f2d>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4620      	mov	r0, r4
 8009d36:	4629      	mov	r1, r5
 8009d38:	f7f6 fa0e 	bl	8000158 <__aeabi_dsub>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4610      	mov	r0, r2
 8009d42:	4619      	mov	r1, r3
 8009d44:	f7f6 fe90 	bl	8000a68 <__aeabi_d2f>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	4a29      	ldr	r2, [pc, #164]	; (8009df0 <pid_roll+0x110>)
 8009d4c:	6013      	str	r3, [r2, #0]



    pid_calculate(error, Kp_angle_roll, Ki_angle_roll, Kd_angle_roll, last_error_angle[0], last_Iterm_angle[0]);
 8009d4e:	4b28      	ldr	r3, [pc, #160]	; (8009df0 <pid_roll+0x110>)
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	4b28      	ldr	r3, [pc, #160]	; (8009df4 <pid_roll+0x114>)
 8009d54:	6819      	ldr	r1, [r3, #0]
 8009d56:	4b28      	ldr	r3, [pc, #160]	; (8009df8 <pid_roll+0x118>)
 8009d58:	681c      	ldr	r4, [r3, #0]
 8009d5a:	4b28      	ldr	r3, [pc, #160]	; (8009dfc <pid_roll+0x11c>)
 8009d5c:	681d      	ldr	r5, [r3, #0]
 8009d5e:	4b28      	ldr	r3, [pc, #160]	; (8009e00 <pid_roll+0x120>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a28      	ldr	r2, [pc, #160]	; (8009e04 <pid_roll+0x124>)
 8009d64:	6812      	ldr	r2, [r2, #0]
 8009d66:	9201      	str	r2, [sp, #4]
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	462b      	mov	r3, r5
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	f7ff ff37 	bl	8009be0 <pid_calculate>
    setpoint_rate_roll = PIDReturn[0];
 8009d72:	4b25      	ldr	r3, [pc, #148]	; (8009e08 <pid_roll+0x128>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a25      	ldr	r2, [pc, #148]	; (8009e0c <pid_roll+0x12c>)
 8009d78:	6013      	str	r3, [r2, #0]
    last_error_angle[0] = PIDReturn[1];
 8009d7a:	4b23      	ldr	r3, [pc, #140]	; (8009e08 <pid_roll+0x128>)
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	4a20      	ldr	r2, [pc, #128]	; (8009e00 <pid_roll+0x120>)
 8009d80:	6013      	str	r3, [r2, #0]
    last_Iterm_angle[0] = PIDReturn[2];
 8009d82:	4b21      	ldr	r3, [pc, #132]	; (8009e08 <pid_roll+0x128>)
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	4a1f      	ldr	r2, [pc, #124]	; (8009e04 <pid_roll+0x124>)
 8009d88:	6013      	str	r3, [r2, #0]
//    math_constrain(setpoint_roll, -50, 50);

     //Gioi han rateroll
//	setpoint_rate_roll = 0;

    error = setpoint_rate_roll - roll_rate;
 8009d8a:	4b20      	ldr	r3, [pc, #128]	; (8009e0c <pid_roll+0x12c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7f6 febd 	bl	8000b10 <__aeabi_fsub>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4b15      	ldr	r3, [pc, #84]	; (8009df0 <pid_roll+0x110>)
 8009d9c:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_rate_roll, Ki_rate_roll, Kd_rate_roll, last_error_rate[0], last_Iterm_rate[0]);
 8009d9e:	4b14      	ldr	r3, [pc, #80]	; (8009df0 <pid_roll+0x110>)
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	4b1b      	ldr	r3, [pc, #108]	; (8009e10 <pid_roll+0x130>)
 8009da4:	6819      	ldr	r1, [r3, #0]
 8009da6:	4b1b      	ldr	r3, [pc, #108]	; (8009e14 <pid_roll+0x134>)
 8009da8:	681c      	ldr	r4, [r3, #0]
 8009daa:	4b1b      	ldr	r3, [pc, #108]	; (8009e18 <pid_roll+0x138>)
 8009dac:	681d      	ldr	r5, [r3, #0]
 8009dae:	4b1b      	ldr	r3, [pc, #108]	; (8009e1c <pid_roll+0x13c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a1b      	ldr	r2, [pc, #108]	; (8009e20 <pid_roll+0x140>)
 8009db4:	6812      	ldr	r2, [r2, #0]
 8009db6:	9201      	str	r2, [sp, #4]
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	462b      	mov	r3, r5
 8009dbc:	4622      	mov	r2, r4
 8009dbe:	f7ff ff0f 	bl	8009be0 <pid_calculate>
    PID_out->PID_roll_out = PIDReturn[0];
 8009dc2:	4b11      	ldr	r3, [pc, #68]	; (8009e08 <pid_roll+0x128>)
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	601a      	str	r2, [r3, #0]
    last_error_rate[0] = PIDReturn[1];
 8009dca:	4b0f      	ldr	r3, [pc, #60]	; (8009e08 <pid_roll+0x128>)
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	4a13      	ldr	r2, [pc, #76]	; (8009e1c <pid_roll+0x13c>)
 8009dd0:	6013      	str	r3, [r2, #0]
    last_Iterm_rate[0] = PIDReturn[2];
 8009dd2:	4b0d      	ldr	r3, [pc, #52]	; (8009e08 <pid_roll+0x128>)
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	4a12      	ldr	r2, [pc, #72]	; (8009e20 <pid_roll+0x140>)
 8009dd8:	6013      	str	r3, [r2, #0]

    // Gioi han PWM
}
 8009dda:	bf00      	nop
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bdb0      	pop	{r4, r5, r7, pc}
 8009de2:	bf00      	nop
 8009de4:	f3af 8000 	nop.w
 8009de8:	47ae147b 	.word	0x47ae147b
 8009dec:	3fb47ae1 	.word	0x3fb47ae1
 8009df0:	20000444 	.word	0x20000444
 8009df4:	20000008 	.word	0x20000008
 8009df8:	200002d8 	.word	0x200002d8
 8009dfc:	200002dc 	.word	0x200002dc
 8009e00:	20000448 	.word	0x20000448
 8009e04:	20000454 	.word	0x20000454
 8009e08:	20000478 	.word	0x20000478
 8009e0c:	20000484 	.word	0x20000484
 8009e10:	20000014 	.word	0x20000014
 8009e14:	200002f0 	.word	0x200002f0
 8009e18:	20000018 	.word	0x20000018
 8009e1c:	20000460 	.word	0x20000460
 8009e20:	2000046c 	.word	0x2000046c
 8009e24:	00000000 	.word	0x00000000

08009e28 <pid_pitch>:

void pid_pitch(uint16_t pitch_rc, float pitch_angle, float pitch_rate, PID_t *PID_out)
{
 8009e28:	b5b0      	push	{r4, r5, r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	4603      	mov	r3, r0
 8009e36:	81fb      	strh	r3, [r7, #14]
    if (pitch_rc > 1540 || pitch_rc < 1440)
 8009e38:	89fb      	ldrh	r3, [r7, #14]
 8009e3a:	f240 6204 	movw	r2, #1540	; 0x604
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d807      	bhi.n	8009e52 <pid_pitch+0x2a>
 8009e42:	89fb      	ldrh	r3, [r7, #14]
 8009e44:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8009e48:	d303      	bcc.n	8009e52 <pid_pitch+0x2a>
    {
        pitch_rc = pitch_rc;
    }
    else
    {
        pitch_rc = 1500;
 8009e4a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009e4e:	81fb      	strh	r3, [r7, #14]
 8009e50:	e000      	b.n	8009e54 <pid_pitch+0x2c>
        pitch_rc = pitch_rc;
 8009e52:	bf00      	nop
    }

    error = 0.08 * (pitch_rc - 1500) - pitch_angle;
 8009e54:	89fb      	ldrh	r3, [r7, #14]
 8009e56:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7f6 faca 	bl	80003f4 <__aeabi_i2d>
 8009e60:	a335      	add	r3, pc, #212	; (adr r3, 8009f38 <pid_pitch+0x110>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f7f6 fb2f 	bl	80004c8 <__aeabi_dmul>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	4614      	mov	r4, r2
 8009e70:	461d      	mov	r5, r3
 8009e72:	68b8      	ldr	r0, [r7, #8]
 8009e74:	f7f6 fad0 	bl	8000418 <__aeabi_f2d>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	4629      	mov	r1, r5
 8009e80:	f7f6 f96a 	bl	8000158 <__aeabi_dsub>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	f7f6 fdec 	bl	8000a68 <__aeabi_d2f>
 8009e90:	4603      	mov	r3, r0
 8009e92:	4a2b      	ldr	r2, [pc, #172]	; (8009f40 <pid_pitch+0x118>)
 8009e94:	6013      	str	r3, [r2, #0]

    pid_calculate(error, Kp_angle_pitch, Ki_angle_pitch, Kd_angle_pitch, last_error_angle[1], last_Iterm_angle[1]);
 8009e96:	4b2a      	ldr	r3, [pc, #168]	; (8009f40 <pid_pitch+0x118>)
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	4b2a      	ldr	r3, [pc, #168]	; (8009f44 <pid_pitch+0x11c>)
 8009e9c:	6819      	ldr	r1, [r3, #0]
 8009e9e:	4b2a      	ldr	r3, [pc, #168]	; (8009f48 <pid_pitch+0x120>)
 8009ea0:	681c      	ldr	r4, [r3, #0]
 8009ea2:	4b2a      	ldr	r3, [pc, #168]	; (8009f4c <pid_pitch+0x124>)
 8009ea4:	681d      	ldr	r5, [r3, #0]
 8009ea6:	4b2a      	ldr	r3, [pc, #168]	; (8009f50 <pid_pitch+0x128>)
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	4a2a      	ldr	r2, [pc, #168]	; (8009f54 <pid_pitch+0x12c>)
 8009eac:	6852      	ldr	r2, [r2, #4]
 8009eae:	9201      	str	r2, [sp, #4]
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	462b      	mov	r3, r5
 8009eb4:	4622      	mov	r2, r4
 8009eb6:	f7ff fe93 	bl	8009be0 <pid_calculate>
    setpoint_rate_pitch = PIDReturn[0];
 8009eba:	4b27      	ldr	r3, [pc, #156]	; (8009f58 <pid_pitch+0x130>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a27      	ldr	r2, [pc, #156]	; (8009f5c <pid_pitch+0x134>)
 8009ec0:	6013      	str	r3, [r2, #0]
    last_error_angle[1] = PIDReturn[1];
 8009ec2:	4b25      	ldr	r3, [pc, #148]	; (8009f58 <pid_pitch+0x130>)
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	4a22      	ldr	r2, [pc, #136]	; (8009f50 <pid_pitch+0x128>)
 8009ec8:	6053      	str	r3, [r2, #4]
    last_Iterm_angle[1] = PIDReturn[2];
 8009eca:	4b23      	ldr	r3, [pc, #140]	; (8009f58 <pid_pitch+0x130>)
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	4a21      	ldr	r2, [pc, #132]	; (8009f54 <pid_pitch+0x12c>)
 8009ed0:	6053      	str	r3, [r2, #4]

    math_constrain(setpoint_pitch, -50, 50);
 8009ed2:	4b23      	ldr	r3, [pc, #140]	; (8009f60 <pid_pitch+0x138>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a23      	ldr	r2, [pc, #140]	; (8009f64 <pid_pitch+0x13c>)
 8009ed8:	4923      	ldr	r1, [pc, #140]	; (8009f68 <pid_pitch+0x140>)
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7ff fe61 	bl	8009ba2 <math_constrain>
//	setpoint_rate_pitch = set_point;

    error = setpoint_rate_pitch - pitch_rate;
 8009ee0:	4b1e      	ldr	r3, [pc, #120]	; (8009f5c <pid_pitch+0x134>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6879      	ldr	r1, [r7, #4]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7f6 fe12 	bl	8000b10 <__aeabi_fsub>
 8009eec:	4603      	mov	r3, r0
 8009eee:	461a      	mov	r2, r3
 8009ef0:	4b13      	ldr	r3, [pc, #76]	; (8009f40 <pid_pitch+0x118>)
 8009ef2:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_rate_pitch, Ki_rate_pitch, Kd_rate_pitch, last_error_rate[1], last_Iterm_rate[1]);
 8009ef4:	4b12      	ldr	r3, [pc, #72]	; (8009f40 <pid_pitch+0x118>)
 8009ef6:	6818      	ldr	r0, [r3, #0]
 8009ef8:	4b1c      	ldr	r3, [pc, #112]	; (8009f6c <pid_pitch+0x144>)
 8009efa:	6819      	ldr	r1, [r3, #0]
 8009efc:	4b1c      	ldr	r3, [pc, #112]	; (8009f70 <pid_pitch+0x148>)
 8009efe:	681c      	ldr	r4, [r3, #0]
 8009f00:	4b1c      	ldr	r3, [pc, #112]	; (8009f74 <pid_pitch+0x14c>)
 8009f02:	681d      	ldr	r5, [r3, #0]
 8009f04:	4b1c      	ldr	r3, [pc, #112]	; (8009f78 <pid_pitch+0x150>)
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4a1c      	ldr	r2, [pc, #112]	; (8009f7c <pid_pitch+0x154>)
 8009f0a:	6852      	ldr	r2, [r2, #4]
 8009f0c:	9201      	str	r2, [sp, #4]
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	462b      	mov	r3, r5
 8009f12:	4622      	mov	r2, r4
 8009f14:	f7ff fe64 	bl	8009be0 <pid_calculate>
    PID_out->PID_pitch_out = PIDReturn[0];
 8009f18:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <pid_pitch+0x130>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	605a      	str	r2, [r3, #4]
    last_error_rate[1] = PIDReturn[1];
 8009f20:	4b0d      	ldr	r3, [pc, #52]	; (8009f58 <pid_pitch+0x130>)
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	4a14      	ldr	r2, [pc, #80]	; (8009f78 <pid_pitch+0x150>)
 8009f26:	6053      	str	r3, [r2, #4]
    last_Iterm_rate[1] = PIDReturn[2];
 8009f28:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <pid_pitch+0x130>)
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	4a13      	ldr	r2, [pc, #76]	; (8009f7c <pid_pitch+0x154>)
 8009f2e:	6053      	str	r3, [r2, #4]
}
 8009f30:	bf00      	nop
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bdb0      	pop	{r4, r5, r7, pc}
 8009f38:	47ae147b 	.word	0x47ae147b
 8009f3c:	3fb47ae1 	.word	0x3fb47ae1
 8009f40:	20000444 	.word	0x20000444
 8009f44:	200002cc 	.word	0x200002cc
 8009f48:	200002d0 	.word	0x200002d0
 8009f4c:	200002d4 	.word	0x200002d4
 8009f50:	20000448 	.word	0x20000448
 8009f54:	20000454 	.word	0x20000454
 8009f58:	20000478 	.word	0x20000478
 8009f5c:	2000048c 	.word	0x2000048c
 8009f60:	20000488 	.word	0x20000488
 8009f64:	42480000 	.word	0x42480000
 8009f68:	c2480000 	.word	0xc2480000
 8009f6c:	200002e4 	.word	0x200002e4
 8009f70:	200002e8 	.word	0x200002e8
 8009f74:	200002ec 	.word	0x200002ec
 8009f78:	20000460 	.word	0x20000460
 8009f7c:	2000046c 	.word	0x2000046c

08009f80 <pid_yaw>:

void pid_yaw(uint16_t yaw_rc, float yaw_rate, PID_t *PID_out)
{
 8009f80:	b5b0      	push	{r4, r5, r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af02      	add	r7, sp, #8
 8009f86:	4603      	mov	r3, r0
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	81fb      	strh	r3, [r7, #14]
    // check again
    if (yaw_rc > 1540 || yaw_rc < 1440)
 8009f8e:	89fb      	ldrh	r3, [r7, #14]
 8009f90:	f240 6204 	movw	r2, #1540	; 0x604
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d807      	bhi.n	8009fa8 <pid_yaw+0x28>
 8009f98:	89fb      	ldrh	r3, [r7, #14]
 8009f9a:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8009f9e:	d303      	bcc.n	8009fa8 <pid_yaw+0x28>
    {
        yaw_rc = yaw_rc;
    }
    else
    {
        yaw_rc = 1500;
 8009fa0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009fa4:	81fb      	strh	r3, [r7, #14]
 8009fa6:	e000      	b.n	8009faa <pid_yaw+0x2a>
        yaw_rc = yaw_rc;
 8009fa8:	bf00      	nop
    }

    yaw_rc = 1800;
 8009faa:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8009fae:	81fb      	strh	r3, [r7, #14]

    error = 0.1 * (yaw_rc - 1500) - yaw_rate;
 8009fb0:	89fb      	ldrh	r3, [r7, #14]
 8009fb2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7f6 fa1c 	bl	80003f4 <__aeabi_i2d>
 8009fbc:	a31e      	add	r3, pc, #120	; (adr r3, 800a038 <pid_yaw+0xb8>)
 8009fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc2:	f7f6 fa81 	bl	80004c8 <__aeabi_dmul>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4614      	mov	r4, r2
 8009fcc:	461d      	mov	r5, r3
 8009fce:	68b8      	ldr	r0, [r7, #8]
 8009fd0:	f7f6 fa22 	bl	8000418 <__aeabi_f2d>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4620      	mov	r0, r4
 8009fda:	4629      	mov	r1, r5
 8009fdc:	f7f6 f8bc 	bl	8000158 <__aeabi_dsub>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	f7f6 fd3e 	bl	8000a68 <__aeabi_d2f>
 8009fec:	4603      	mov	r3, r0
 8009fee:	4a14      	ldr	r2, [pc, #80]	; (800a040 <pid_yaw+0xc0>)
 8009ff0:	6013      	str	r3, [r2, #0]

    pid_calculate(error, Kp_angle_yaw, Ki_angle_yaw, Kd_angle_yaw, last_error_rate[2], last_Iterm_rate[2]);
 8009ff2:	4b13      	ldr	r3, [pc, #76]	; (800a040 <pid_yaw+0xc0>)
 8009ff4:	6818      	ldr	r0, [r3, #0]
 8009ff6:	4b13      	ldr	r3, [pc, #76]	; (800a044 <pid_yaw+0xc4>)
 8009ff8:	6819      	ldr	r1, [r3, #0]
 8009ffa:	4b13      	ldr	r3, [pc, #76]	; (800a048 <pid_yaw+0xc8>)
 8009ffc:	681c      	ldr	r4, [r3, #0]
 8009ffe:	4b13      	ldr	r3, [pc, #76]	; (800a04c <pid_yaw+0xcc>)
 800a000:	681d      	ldr	r5, [r3, #0]
 800a002:	4b13      	ldr	r3, [pc, #76]	; (800a050 <pid_yaw+0xd0>)
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	4a13      	ldr	r2, [pc, #76]	; (800a054 <pid_yaw+0xd4>)
 800a008:	6892      	ldr	r2, [r2, #8]
 800a00a:	9201      	str	r2, [sp, #4]
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	462b      	mov	r3, r5
 800a010:	4622      	mov	r2, r4
 800a012:	f7ff fde5 	bl	8009be0 <pid_calculate>
    PID_out->PID_yaw_out = PIDReturn[0];
 800a016:	4b10      	ldr	r3, [pc, #64]	; (800a058 <pid_yaw+0xd8>)
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	609a      	str	r2, [r3, #8]
    last_error_rate[2] = PIDReturn[1];
 800a01e:	4b0e      	ldr	r3, [pc, #56]	; (800a058 <pid_yaw+0xd8>)
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	4a0b      	ldr	r2, [pc, #44]	; (800a050 <pid_yaw+0xd0>)
 800a024:	6093      	str	r3, [r2, #8]
    last_Iterm_rate[2] = PIDReturn[2];
 800a026:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <pid_yaw+0xd8>)
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	4a0a      	ldr	r2, [pc, #40]	; (800a054 <pid_yaw+0xd4>)
 800a02c:	6093      	str	r3, [r2, #8]
}
 800a02e:	bf00      	nop
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bdb0      	pop	{r4, r5, r7, pc}
 800a036:	bf00      	nop
 800a038:	9999999a 	.word	0x9999999a
 800a03c:	3fb99999 	.word	0x3fb99999
 800a040:	20000444 	.word	0x20000444
 800a044:	2000000c 	.word	0x2000000c
 800a048:	200002e0 	.word	0x200002e0
 800a04c:	20000010 	.word	0x20000010
 800a050:	20000460 	.word	0x20000460
 800a054:	2000046c 	.word	0x2000046c
 800a058:	20000478 	.word	0x20000478

0800a05c <nRF24_CE_L>:
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800a060:	2200      	movs	r2, #0
 800a062:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a066:	4802      	ldr	r0, [pc, #8]	; (800a070 <nRF24_CE_L+0x14>)
 800a068:	f7f7 fe34 	bl	8001cd4 <HAL_GPIO_WritePin>
}
 800a06c:	bf00      	nop
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	40010800 	.word	0x40010800

0800a074 <nRF24_CE_H>:
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 800a078:	2201      	movs	r2, #1
 800a07a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a07e:	4802      	ldr	r0, [pc, #8]	; (800a088 <nRF24_CE_H+0x14>)
 800a080:	f7f7 fe28 	bl	8001cd4 <HAL_GPIO_WritePin>
}
 800a084:	bf00      	nop
 800a086:	bd80      	pop	{r7, pc}
 800a088:	40010800 	.word	0x40010800

0800a08c <Delay_ms>:

static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7f7 f8c9 	bl	800122c <HAL_Delay>
 800a09a:	bf00      	nop
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <Toggle_LED>:

extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800a0a8:	2104      	movs	r1, #4
 800a0aa:	4802      	ldr	r0, [pc, #8]	; (800a0b4 <Toggle_LED+0x10>)
 800a0ac:	f7f7 fe2a 	bl	8001d04 <HAL_GPIO_TogglePin>
}
 800a0b0:	bf00      	nop
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	40010c00 	.word	0x40010c00

0800a0b8 <runRadio>:
}

#endif // DEMO_TX_

int runRadio(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	af00      	add	r7, sp, #0
#if (DEBUG_RX)
    printf("\r\nSTM32 is online.\r\n");
#endif // debug
    nRF24_CE_L();
 800a0bc:	f7ff ffce 	bl	800a05c <nRF24_CE_L>
#if (DEBUG_RX)
    printf("nRF24L01+ check: ");
#endif
    while (!nRF24_Check())
 800a0c0:	e004      	b.n	800a0cc <runRadio+0x14>
    {
            Toggle_LED();
 800a0c2:	f7ff ffef 	bl	800a0a4 <Toggle_LED>
            Delay_ms(50);
 800a0c6:	2032      	movs	r0, #50	; 0x32
 800a0c8:	f7ff ffe0 	bl	800a08c <Delay_ms>
    while (!nRF24_Check())
 800a0cc:	f7ff fb4c 	bl	8009768 <nRF24_Check>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0f5      	beq.n	800a0c2 <runRadio+0xa>
    }
    nRF24_Init();
 800a0d6:	f7ff fafa 	bl	80096ce <nRF24_Init>
    // nRF24_CE_L();

/***************************************************************************/
#if (RX_SINGLE)

    nRF24_SetRFChannel(40);
 800a0da:	2028      	movs	r0, #40	; 0x28
 800a0dc:	f7ff fbd3 	bl	8009886 <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 800a0e0:	2008      	movs	r0, #8
 800a0e2:	f7ff fc54 	bl	800998e <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 800a0e6:	200c      	movs	r0, #12
 800a0e8:	f7ff fbac 	bl	8009844 <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 800a0ec:	2003      	movs	r0, #3
 800a0ee:	f7ff fbd8 	bl	80098a2 <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR);
 800a0f2:	490c      	ldr	r1, [pc, #48]	; (800a124 <runRadio+0x6c>)
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	f7ff fbe5 	bl	80098c4 <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 24);
 800a0fa:	2218      	movs	r2, #24
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	2001      	movs	r0, #1
 800a100:	f7ff fc60 	bl	80099c4 <nRF24_SetRXPipe>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 800a104:	2006      	movs	r0, #6
 800a106:	f7ff fc27 	bl	8009958 <nRF24_SetTXPower>
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 800a10a:	2001      	movs	r0, #1
 800a10c:	f7ff fb79 	bl	8009802 <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 800a110:	f7ff fcc7 	bl	8009aa2 <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 800a114:	2002      	movs	r0, #2
 800a116:	f7ff fb55 	bl	80097c4 <nRF24_SetPowerMode>
    nRF24_CE_H();
 800a11a:	f7ff ffab 	bl	800a074 <nRF24_CE_H>
        Toggle_LED();
        Delay_ms(100);
    }

#endif // TX_SINGLE
}
 800a11e:	bf00      	nop
 800a120:	4618      	mov	r0, r3
 800a122:	bd80      	pop	{r7, pc}
 800a124:	0800c67c 	.word	0x0800c67c

0800a128 <RX_data>:

void RX_data(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0

    if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 800a12e:	f7ff fc9d 	bl	8009a6c <nRF24_GetStatus_RXFIFO>
 800a132:	4603      	mov	r3, r0
 800a134:	2b01      	cmp	r3, #1
 800a136:	d009      	beq.n	800a14c <RX_data+0x24>
    {
        nRF24_RXResult pipe = nRF24_ReadPayload((uint8_t *)&payload_packet, &payload_length);
 800a138:	4906      	ldr	r1, [pc, #24]	; (800a154 <RX_data+0x2c>)
 800a13a:	4807      	ldr	r0, [pc, #28]	; (800a158 <RX_data+0x30>)
 800a13c:	f7ff fd22 	bl	8009b84 <nRF24_ReadPayload>
 800a140:	4603      	mov	r3, r0
 800a142:	71fb      	strb	r3, [r7, #7]
        // Clear all pending IRQ flags
        nRF24_ClearIRQFlags();
 800a144:	f7ff fcad 	bl	8009aa2 <nRF24_ClearIRQFlags>
        Toggle_LED();
 800a148:	f7ff ffac 	bl	800a0a4 <Toggle_LED>
    }
    else
    {
        // todo:
    }
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	2000003c 	.word	0x2000003c
 800a158:	20000490 	.word	0x20000490

0800a15c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a162:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <HAL_MspInit+0x5c>)
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	4a14      	ldr	r2, [pc, #80]	; (800a1b8 <HAL_MspInit+0x5c>)
 800a168:	f043 0301 	orr.w	r3, r3, #1
 800a16c:	6193      	str	r3, [r2, #24]
 800a16e:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <HAL_MspInit+0x5c>)
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	60bb      	str	r3, [r7, #8]
 800a178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a17a:	4b0f      	ldr	r3, [pc, #60]	; (800a1b8 <HAL_MspInit+0x5c>)
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	4a0e      	ldr	r2, [pc, #56]	; (800a1b8 <HAL_MspInit+0x5c>)
 800a180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a184:	61d3      	str	r3, [r2, #28]
 800a186:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <HAL_MspInit+0x5c>)
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a18e:	607b      	str	r3, [r7, #4]
 800a190:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a192:	4b0a      	ldr	r3, [pc, #40]	; (800a1bc <HAL_MspInit+0x60>)
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800a19e:	60fb      	str	r3, [r7, #12]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	4a04      	ldr	r2, [pc, #16]	; (800a1bc <HAL_MspInit+0x60>)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a1ae:	bf00      	nop
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bc80      	pop	{r7}
 800a1b6:	4770      	bx	lr
 800a1b8:	40021000 	.word	0x40021000
 800a1bc:	40010000 	.word	0x40010000

0800a1c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b08a      	sub	sp, #40	; 0x28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1c8:	f107 0314 	add.w	r3, r7, #20
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	605a      	str	r2, [r3, #4]
 800a1d2:	609a      	str	r2, [r3, #8]
 800a1d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a1d      	ldr	r2, [pc, #116]	; (800a250 <HAL_I2C_MspInit+0x90>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d132      	bne.n	800a246 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1e0:	4b1c      	ldr	r3, [pc, #112]	; (800a254 <HAL_I2C_MspInit+0x94>)
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	4a1b      	ldr	r2, [pc, #108]	; (800a254 <HAL_I2C_MspInit+0x94>)
 800a1e6:	f043 0308 	orr.w	r3, r3, #8
 800a1ea:	6193      	str	r3, [r2, #24]
 800a1ec:	4b19      	ldr	r3, [pc, #100]	; (800a254 <HAL_I2C_MspInit+0x94>)
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	f003 0308 	and.w	r3, r3, #8
 800a1f4:	613b      	str	r3, [r7, #16]
 800a1f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a1f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a1fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a1fe:	2312      	movs	r3, #18
 800a200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a202:	2303      	movs	r3, #3
 800a204:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a206:	f107 0314 	add.w	r3, r7, #20
 800a20a:	4619      	mov	r1, r3
 800a20c:	4812      	ldr	r0, [pc, #72]	; (800a258 <HAL_I2C_MspInit+0x98>)
 800a20e:	f7f7 fbdd 	bl	80019cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800a212:	4b12      	ldr	r3, [pc, #72]	; (800a25c <HAL_I2C_MspInit+0x9c>)
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	627b      	str	r3, [r7, #36]	; 0x24
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800a21e:	627b      	str	r3, [r7, #36]	; 0x24
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	f043 0302 	orr.w	r3, r3, #2
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
 800a228:	4a0c      	ldr	r2, [pc, #48]	; (800a25c <HAL_I2C_MspInit+0x9c>)
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <HAL_I2C_MspInit+0x94>)
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	4a08      	ldr	r2, [pc, #32]	; (800a254 <HAL_I2C_MspInit+0x94>)
 800a234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a238:	61d3      	str	r3, [r2, #28]
 800a23a:	4b06      	ldr	r3, [pc, #24]	; (800a254 <HAL_I2C_MspInit+0x94>)
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a246:	bf00      	nop
 800a248:	3728      	adds	r7, #40	; 0x28
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	40005400 	.word	0x40005400
 800a254:	40021000 	.word	0x40021000
 800a258:	40010c00 	.word	0x40010c00
 800a25c:	40010000 	.word	0x40010000

0800a260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a268:	f107 0310 	add.w	r3, r7, #16
 800a26c:	2200      	movs	r2, #0
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	605a      	str	r2, [r3, #4]
 800a272:	609a      	str	r2, [r3, #8]
 800a274:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a1c      	ldr	r2, [pc, #112]	; (800a2ec <HAL_SPI_MspInit+0x8c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d131      	bne.n	800a2e4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a280:	4b1b      	ldr	r3, [pc, #108]	; (800a2f0 <HAL_SPI_MspInit+0x90>)
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	4a1a      	ldr	r2, [pc, #104]	; (800a2f0 <HAL_SPI_MspInit+0x90>)
 800a286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a28a:	61d3      	str	r3, [r2, #28]
 800a28c:	4b18      	ldr	r3, [pc, #96]	; (800a2f0 <HAL_SPI_MspInit+0x90>)
 800a28e:	69db      	ldr	r3, [r3, #28]
 800a290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a298:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <HAL_SPI_MspInit+0x90>)
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	4a14      	ldr	r2, [pc, #80]	; (800a2f0 <HAL_SPI_MspInit+0x90>)
 800a29e:	f043 0308 	orr.w	r3, r3, #8
 800a2a2:	6193      	str	r3, [r2, #24]
 800a2a4:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <HAL_SPI_MspInit+0x90>)
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	f003 0308 	and.w	r3, r3, #8
 800a2ac:	60bb      	str	r3, [r7, #8]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 800a2b0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800a2b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2be:	f107 0310 	add.w	r3, r7, #16
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	480b      	ldr	r0, [pc, #44]	; (800a2f4 <HAL_SPI_MspInit+0x94>)
 800a2c6:	f7f7 fb81 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 800a2ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 800a2d8:	f107 0310 	add.w	r3, r7, #16
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4805      	ldr	r0, [pc, #20]	; (800a2f4 <HAL_SPI_MspInit+0x94>)
 800a2e0:	f7f7 fb74 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a2e4:	bf00      	nop
 800a2e6:	3720      	adds	r7, #32
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	40003800 	.word	0x40003800
 800a2f0:	40021000 	.word	0x40021000
 800a2f4:	40010c00 	.word	0x40010c00

0800a2f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a09      	ldr	r2, [pc, #36]	; (800a32c <HAL_TIM_PWM_MspInit+0x34>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d10b      	bne.n	800a322 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a30a:	4b09      	ldr	r3, [pc, #36]	; (800a330 <HAL_TIM_PWM_MspInit+0x38>)
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	4a08      	ldr	r2, [pc, #32]	; (800a330 <HAL_TIM_PWM_MspInit+0x38>)
 800a310:	f043 0302 	orr.w	r3, r3, #2
 800a314:	61d3      	str	r3, [r2, #28]
 800a316:	4b06      	ldr	r3, [pc, #24]	; (800a330 <HAL_TIM_PWM_MspInit+0x38>)
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	60fb      	str	r3, [r7, #12]
 800a320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800a322:	bf00      	nop
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	bc80      	pop	{r7}
 800a32a:	4770      	bx	lr
 800a32c:	40000400 	.word	0x40000400
 800a330:	40021000 	.word	0x40021000

0800a334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a0d      	ldr	r2, [pc, #52]	; (800a378 <HAL_TIM_Base_MspInit+0x44>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d113      	bne.n	800a36e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a346:	4b0d      	ldr	r3, [pc, #52]	; (800a37c <HAL_TIM_Base_MspInit+0x48>)
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	4a0c      	ldr	r2, [pc, #48]	; (800a37c <HAL_TIM_Base_MspInit+0x48>)
 800a34c:	f043 0304 	orr.w	r3, r3, #4
 800a350:	61d3      	str	r3, [r2, #28]
 800a352:	4b0a      	ldr	r3, [pc, #40]	; (800a37c <HAL_TIM_Base_MspInit+0x48>)
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	f003 0304 	and.w	r3, r3, #4
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800a35e:	2200      	movs	r2, #0
 800a360:	2102      	movs	r1, #2
 800a362:	201e      	movs	r0, #30
 800a364:	f7f7 f85d 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a368:	201e      	movs	r0, #30
 800a36a:	f7f7 f876 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800a36e:	bf00      	nop
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	40000800 	.word	0x40000800
 800a37c:	40021000 	.word	0x40021000

0800a380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b088      	sub	sp, #32
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a388:	f107 0310 	add.w	r3, r7, #16
 800a38c:	2200      	movs	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	605a      	str	r2, [r3, #4]
 800a392:	609a      	str	r2, [r3, #8]
 800a394:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a0f      	ldr	r2, [pc, #60]	; (800a3d8 <HAL_TIM_MspPostInit+0x58>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d117      	bne.n	800a3d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3a0:	4b0e      	ldr	r3, [pc, #56]	; (800a3dc <HAL_TIM_MspPostInit+0x5c>)
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	4a0d      	ldr	r2, [pc, #52]	; (800a3dc <HAL_TIM_MspPostInit+0x5c>)
 800a3a6:	f043 0308 	orr.w	r3, r3, #8
 800a3aa:	6193      	str	r3, [r2, #24]
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <HAL_TIM_MspPostInit+0x5c>)
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	f003 0308 	and.w	r3, r3, #8
 800a3b4:	60fb      	str	r3, [r7, #12]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3bc:	2302      	movs	r3, #2
 800a3be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3c4:	f107 0310 	add.w	r3, r7, #16
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <HAL_TIM_MspPostInit+0x60>)
 800a3cc:	f7f7 fafe 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800a3d0:	bf00      	nop
 800a3d2:	3720      	adds	r7, #32
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	40000400 	.word	0x40000400
 800a3dc:	40021000 	.word	0x40021000
 800a3e0:	40010c00 	.word	0x40010c00

0800a3e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ec:	f107 0310 	add.w	r3, r7, #16
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	605a      	str	r2, [r3, #4]
 800a3f6:	609a      	str	r2, [r3, #8]
 800a3f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a33      	ldr	r2, [pc, #204]	; (800a4cc <HAL_UART_MspInit+0xe8>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d15f      	bne.n	800a4c4 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a404:	4b32      	ldr	r3, [pc, #200]	; (800a4d0 <HAL_UART_MspInit+0xec>)
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	4a31      	ldr	r2, [pc, #196]	; (800a4d0 <HAL_UART_MspInit+0xec>)
 800a40a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a40e:	6193      	str	r3, [r2, #24]
 800a410:	4b2f      	ldr	r3, [pc, #188]	; (800a4d0 <HAL_UART_MspInit+0xec>)
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a41c:	4b2c      	ldr	r3, [pc, #176]	; (800a4d0 <HAL_UART_MspInit+0xec>)
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	4a2b      	ldr	r2, [pc, #172]	; (800a4d0 <HAL_UART_MspInit+0xec>)
 800a422:	f043 0304 	orr.w	r3, r3, #4
 800a426:	6193      	str	r3, [r2, #24]
 800a428:	4b29      	ldr	r3, [pc, #164]	; (800a4d0 <HAL_UART_MspInit+0xec>)
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	60bb      	str	r3, [r7, #8]
 800a432:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a434:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a438:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a43a:	2302      	movs	r3, #2
 800a43c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a43e:	2303      	movs	r3, #3
 800a440:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a442:	f107 0310 	add.w	r3, r7, #16
 800a446:	4619      	mov	r1, r3
 800a448:	4822      	ldr	r0, [pc, #136]	; (800a4d4 <HAL_UART_MspInit+0xf0>)
 800a44a:	f7f7 fabf 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a44e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a454:	2300      	movs	r3, #0
 800a456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a458:	2300      	movs	r3, #0
 800a45a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a45c:	f107 0310 	add.w	r3, r7, #16
 800a460:	4619      	mov	r1, r3
 800a462:	481c      	ldr	r0, [pc, #112]	; (800a4d4 <HAL_UART_MspInit+0xf0>)
 800a464:	f7f7 fab2 	bl	80019cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800a468:	4b1b      	ldr	r3, [pc, #108]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a46a:	4a1c      	ldr	r2, [pc, #112]	; (800a4dc <HAL_UART_MspInit+0xf8>)
 800a46c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a46e:	4b1a      	ldr	r3, [pc, #104]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a470:	2200      	movs	r2, #0
 800a472:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a474:	4b18      	ldr	r3, [pc, #96]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a476:	2200      	movs	r2, #0
 800a478:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a47a:	4b17      	ldr	r3, [pc, #92]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a47c:	2280      	movs	r2, #128	; 0x80
 800a47e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a480:	4b15      	ldr	r3, [pc, #84]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a482:	2200      	movs	r2, #0
 800a484:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a486:	4b14      	ldr	r3, [pc, #80]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a488:	2200      	movs	r2, #0
 800a48a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a48c:	4b12      	ldr	r3, [pc, #72]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a48e:	2200      	movs	r2, #0
 800a490:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a492:	4b11      	ldr	r3, [pc, #68]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a494:	2200      	movs	r2, #0
 800a496:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a498:	480f      	ldr	r0, [pc, #60]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a49a:	f7f6 fff9 	bl	8001490 <HAL_DMA_Init>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800a4a4:	f7fb fd08 	bl	8005eb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a0b      	ldr	r2, [pc, #44]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a4ac:	639a      	str	r2, [r3, #56]	; 0x38
 800a4ae:	4a0a      	ldr	r2, [pc, #40]	; (800a4d8 <HAL_UART_MspInit+0xf4>)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	2025      	movs	r0, #37	; 0x25
 800a4ba:	f7f6 ffb2 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a4be:	2025      	movs	r0, #37	; 0x25
 800a4c0:	f7f6 ffcb 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a4c4:	bf00      	nop
 800a4c6:	3720      	adds	r7, #32
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	40013800 	.word	0x40013800
 800a4d0:	40021000 	.word	0x40021000
 800a4d4:	40010800 	.word	0x40010800
 800a4d8:	20000248 	.word	0x20000248
 800a4dc:	40020058 	.word	0x40020058

0800a4e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a4e4:	bf00      	nop
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bc80      	pop	{r7}
 800a4ea:	4770      	bx	lr

0800a4ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a4f0:	e7fe      	b.n	800a4f0 <HardFault_Handler+0x4>

0800a4f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a4f6:	e7fe      	b.n	800a4f6 <MemManage_Handler+0x4>

0800a4f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a4fc:	e7fe      	b.n	800a4fc <BusFault_Handler+0x4>

0800a4fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a4fe:	b480      	push	{r7}
 800a500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a502:	e7fe      	b.n	800a502 <UsageFault_Handler+0x4>

0800a504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a504:	b480      	push	{r7}
 800a506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a508:	bf00      	nop
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bc80      	pop	{r7}
 800a50e:	4770      	bx	lr

0800a510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a510:	b480      	push	{r7}
 800a512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a514:	bf00      	nop
 800a516:	46bd      	mov	sp, r7
 800a518:	bc80      	pop	{r7}
 800a51a:	4770      	bx	lr

0800a51c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a51c:	b480      	push	{r7}
 800a51e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a520:	bf00      	nop
 800a522:	46bd      	mov	sp, r7
 800a524:	bc80      	pop	{r7}
 800a526:	4770      	bx	lr

0800a528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a52c:	f7f6 fe62 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a530:	bf00      	nop
 800a532:	bd80      	pop	{r7, pc}

0800a534 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a538:	4802      	ldr	r0, [pc, #8]	; (800a544 <DMA1_Channel5_IRQHandler+0x10>)
 800a53a:	f7f7 f913 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a53e:	bf00      	nop
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	20000248 	.word	0x20000248

0800a548 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a54c:	4802      	ldr	r0, [pc, #8]	; (800a558 <TIM4_IRQHandler+0x10>)
 800a54e:	f7f9 fc6d 	bl	8003e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a552:	bf00      	nop
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	200001bc 	.word	0x200001bc

0800a55c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a560:	4802      	ldr	r0, [pc, #8]	; (800a56c <USART1_IRQHandler+0x10>)
 800a562:	f7fa fb53 	bl	8004c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a566:	bf00      	nop
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000204 	.word	0x20000204

0800a570 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a578:	4b11      	ldr	r3, [pc, #68]	; (800a5c0 <_sbrk+0x50>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <_sbrk+0x16>
		heap_end = &end;
 800a580:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <_sbrk+0x50>)
 800a582:	4a10      	ldr	r2, [pc, #64]	; (800a5c4 <_sbrk+0x54>)
 800a584:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a586:	4b0e      	ldr	r3, [pc, #56]	; (800a5c0 <_sbrk+0x50>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a58c:	4b0c      	ldr	r3, [pc, #48]	; (800a5c0 <_sbrk+0x50>)
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4413      	add	r3, r2
 800a594:	466a      	mov	r2, sp
 800a596:	4293      	cmp	r3, r2
 800a598:	d907      	bls.n	800a5aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a59a:	f000 f841 	bl	800a620 <__errno>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	220c      	movs	r2, #12
 800a5a2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800a5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a8:	e006      	b.n	800a5b8 <_sbrk+0x48>
	}

	heap_end += incr;
 800a5aa:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <_sbrk+0x50>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	4a03      	ldr	r2, [pc, #12]	; (800a5c0 <_sbrk+0x50>)
 800a5b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	200004a8 	.word	0x200004a8
 800a5c4:	200004c0 	.word	0x200004c0

0800a5c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a5cc:	bf00      	nop
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bc80      	pop	{r7}
 800a5d2:	4770      	bx	lr

0800a5d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a5d4:	480c      	ldr	r0, [pc, #48]	; (800a608 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a5d6:	490d      	ldr	r1, [pc, #52]	; (800a60c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a5d8:	4a0d      	ldr	r2, [pc, #52]	; (800a610 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a5da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a5dc:	e002      	b.n	800a5e4 <LoopCopyDataInit>

0800a5de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a5de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a5e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a5e2:	3304      	adds	r3, #4

0800a5e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a5e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a5e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a5e8:	d3f9      	bcc.n	800a5de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a5ea:	4a0a      	ldr	r2, [pc, #40]	; (800a614 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a5ec:	4c0a      	ldr	r4, [pc, #40]	; (800a618 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a5ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a5f0:	e001      	b.n	800a5f6 <LoopFillZerobss>

0800a5f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a5f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a5f4:	3204      	adds	r2, #4

0800a5f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a5f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a5f8:	d3fb      	bcc.n	800a5f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a5fa:	f7ff ffe5 	bl	800a5c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a5fe:	f000 f815 	bl	800a62c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a602:	f7fb f8c5 	bl	8005790 <main>
  bx lr
 800a606:	4770      	bx	lr
  ldr r0, =_sdata
 800a608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a60c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800a610:	0800c740 	.word	0x0800c740
  ldr r2, =_sbss
 800a614:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800a618:	200004bc 	.word	0x200004bc

0800a61c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a61c:	e7fe      	b.n	800a61c <ADC1_2_IRQHandler>
	...

0800a620 <__errno>:
 800a620:	4b01      	ldr	r3, [pc, #4]	; (800a628 <__errno+0x8>)
 800a622:	6818      	ldr	r0, [r3, #0]
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	20000044 	.word	0x20000044

0800a62c <__libc_init_array>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	2600      	movs	r6, #0
 800a630:	4d0c      	ldr	r5, [pc, #48]	; (800a664 <__libc_init_array+0x38>)
 800a632:	4c0d      	ldr	r4, [pc, #52]	; (800a668 <__libc_init_array+0x3c>)
 800a634:	1b64      	subs	r4, r4, r5
 800a636:	10a4      	asrs	r4, r4, #2
 800a638:	42a6      	cmp	r6, r4
 800a63a:	d109      	bne.n	800a650 <__libc_init_array+0x24>
 800a63c:	f001 feea 	bl	800c414 <_init>
 800a640:	2600      	movs	r6, #0
 800a642:	4d0a      	ldr	r5, [pc, #40]	; (800a66c <__libc_init_array+0x40>)
 800a644:	4c0a      	ldr	r4, [pc, #40]	; (800a670 <__libc_init_array+0x44>)
 800a646:	1b64      	subs	r4, r4, r5
 800a648:	10a4      	asrs	r4, r4, #2
 800a64a:	42a6      	cmp	r6, r4
 800a64c:	d105      	bne.n	800a65a <__libc_init_array+0x2e>
 800a64e:	bd70      	pop	{r4, r5, r6, pc}
 800a650:	f855 3b04 	ldr.w	r3, [r5], #4
 800a654:	4798      	blx	r3
 800a656:	3601      	adds	r6, #1
 800a658:	e7ee      	b.n	800a638 <__libc_init_array+0xc>
 800a65a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a65e:	4798      	blx	r3
 800a660:	3601      	adds	r6, #1
 800a662:	e7f2      	b.n	800a64a <__libc_init_array+0x1e>
 800a664:	0800c738 	.word	0x0800c738
 800a668:	0800c738 	.word	0x0800c738
 800a66c:	0800c738 	.word	0x0800c738
 800a670:	0800c73c 	.word	0x0800c73c

0800a674 <memset>:
 800a674:	4603      	mov	r3, r0
 800a676:	4402      	add	r2, r0
 800a678:	4293      	cmp	r3, r2
 800a67a:	d100      	bne.n	800a67e <memset+0xa>
 800a67c:	4770      	bx	lr
 800a67e:	f803 1b01 	strb.w	r1, [r3], #1
 800a682:	e7f9      	b.n	800a678 <memset+0x4>

0800a684 <siprintf>:
 800a684:	b40e      	push	{r1, r2, r3}
 800a686:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a68a:	b500      	push	{lr}
 800a68c:	b09c      	sub	sp, #112	; 0x70
 800a68e:	ab1d      	add	r3, sp, #116	; 0x74
 800a690:	9002      	str	r0, [sp, #8]
 800a692:	9006      	str	r0, [sp, #24]
 800a694:	9107      	str	r1, [sp, #28]
 800a696:	9104      	str	r1, [sp, #16]
 800a698:	4808      	ldr	r0, [pc, #32]	; (800a6bc <siprintf+0x38>)
 800a69a:	4909      	ldr	r1, [pc, #36]	; (800a6c0 <siprintf+0x3c>)
 800a69c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a0:	9105      	str	r1, [sp, #20]
 800a6a2:	6800      	ldr	r0, [r0, #0]
 800a6a4:	a902      	add	r1, sp, #8
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	f000 f868 	bl	800a77c <_svfiprintf_r>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	9b02      	ldr	r3, [sp, #8]
 800a6b0:	701a      	strb	r2, [r3, #0]
 800a6b2:	b01c      	add	sp, #112	; 0x70
 800a6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b8:	b003      	add	sp, #12
 800a6ba:	4770      	bx	lr
 800a6bc:	20000044 	.word	0x20000044
 800a6c0:	ffff0208 	.word	0xffff0208

0800a6c4 <__ssputs_r>:
 800a6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c8:	688e      	ldr	r6, [r1, #8]
 800a6ca:	4682      	mov	sl, r0
 800a6cc:	429e      	cmp	r6, r3
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	4690      	mov	r8, r2
 800a6d2:	461f      	mov	r7, r3
 800a6d4:	d838      	bhi.n	800a748 <__ssputs_r+0x84>
 800a6d6:	898a      	ldrh	r2, [r1, #12]
 800a6d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6dc:	d032      	beq.n	800a744 <__ssputs_r+0x80>
 800a6de:	6825      	ldr	r5, [r4, #0]
 800a6e0:	6909      	ldr	r1, [r1, #16]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	eba5 0901 	sub.w	r9, r5, r1
 800a6e8:	6965      	ldr	r5, [r4, #20]
 800a6ea:	444b      	add	r3, r9
 800a6ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6f4:	106d      	asrs	r5, r5, #1
 800a6f6:	429d      	cmp	r5, r3
 800a6f8:	bf38      	it	cc
 800a6fa:	461d      	movcc	r5, r3
 800a6fc:	0553      	lsls	r3, r2, #21
 800a6fe:	d531      	bpl.n	800a764 <__ssputs_r+0xa0>
 800a700:	4629      	mov	r1, r5
 800a702:	f000 fb6f 	bl	800ade4 <_malloc_r>
 800a706:	4606      	mov	r6, r0
 800a708:	b950      	cbnz	r0, 800a720 <__ssputs_r+0x5c>
 800a70a:	230c      	movs	r3, #12
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	f8ca 3000 	str.w	r3, [sl]
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a71a:	81a3      	strh	r3, [r4, #12]
 800a71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a720:	464a      	mov	r2, r9
 800a722:	6921      	ldr	r1, [r4, #16]
 800a724:	f000 face 	bl	800acc4 <memcpy>
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a72e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a732:	81a3      	strh	r3, [r4, #12]
 800a734:	6126      	str	r6, [r4, #16]
 800a736:	444e      	add	r6, r9
 800a738:	6026      	str	r6, [r4, #0]
 800a73a:	463e      	mov	r6, r7
 800a73c:	6165      	str	r5, [r4, #20]
 800a73e:	eba5 0509 	sub.w	r5, r5, r9
 800a742:	60a5      	str	r5, [r4, #8]
 800a744:	42be      	cmp	r6, r7
 800a746:	d900      	bls.n	800a74a <__ssputs_r+0x86>
 800a748:	463e      	mov	r6, r7
 800a74a:	4632      	mov	r2, r6
 800a74c:	4641      	mov	r1, r8
 800a74e:	6820      	ldr	r0, [r4, #0]
 800a750:	f000 fac6 	bl	800ace0 <memmove>
 800a754:	68a3      	ldr	r3, [r4, #8]
 800a756:	2000      	movs	r0, #0
 800a758:	1b9b      	subs	r3, r3, r6
 800a75a:	60a3      	str	r3, [r4, #8]
 800a75c:	6823      	ldr	r3, [r4, #0]
 800a75e:	4433      	add	r3, r6
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	e7db      	b.n	800a71c <__ssputs_r+0x58>
 800a764:	462a      	mov	r2, r5
 800a766:	f000 fbb1 	bl	800aecc <_realloc_r>
 800a76a:	4606      	mov	r6, r0
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d1e1      	bne.n	800a734 <__ssputs_r+0x70>
 800a770:	4650      	mov	r0, sl
 800a772:	6921      	ldr	r1, [r4, #16]
 800a774:	f000 face 	bl	800ad14 <_free_r>
 800a778:	e7c7      	b.n	800a70a <__ssputs_r+0x46>
	...

0800a77c <_svfiprintf_r>:
 800a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	4698      	mov	r8, r3
 800a782:	898b      	ldrh	r3, [r1, #12]
 800a784:	4607      	mov	r7, r0
 800a786:	061b      	lsls	r3, r3, #24
 800a788:	460d      	mov	r5, r1
 800a78a:	4614      	mov	r4, r2
 800a78c:	b09d      	sub	sp, #116	; 0x74
 800a78e:	d50e      	bpl.n	800a7ae <_svfiprintf_r+0x32>
 800a790:	690b      	ldr	r3, [r1, #16]
 800a792:	b963      	cbnz	r3, 800a7ae <_svfiprintf_r+0x32>
 800a794:	2140      	movs	r1, #64	; 0x40
 800a796:	f000 fb25 	bl	800ade4 <_malloc_r>
 800a79a:	6028      	str	r0, [r5, #0]
 800a79c:	6128      	str	r0, [r5, #16]
 800a79e:	b920      	cbnz	r0, 800a7aa <_svfiprintf_r+0x2e>
 800a7a0:	230c      	movs	r3, #12
 800a7a2:	603b      	str	r3, [r7, #0]
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a8:	e0d1      	b.n	800a94e <_svfiprintf_r+0x1d2>
 800a7aa:	2340      	movs	r3, #64	; 0x40
 800a7ac:	616b      	str	r3, [r5, #20]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b2:	2320      	movs	r3, #32
 800a7b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7b8:	2330      	movs	r3, #48	; 0x30
 800a7ba:	f04f 0901 	mov.w	r9, #1
 800a7be:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a968 <_svfiprintf_r+0x1ec>
 800a7c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ca:	4623      	mov	r3, r4
 800a7cc:	469a      	mov	sl, r3
 800a7ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7d2:	b10a      	cbz	r2, 800a7d8 <_svfiprintf_r+0x5c>
 800a7d4:	2a25      	cmp	r2, #37	; 0x25
 800a7d6:	d1f9      	bne.n	800a7cc <_svfiprintf_r+0x50>
 800a7d8:	ebba 0b04 	subs.w	fp, sl, r4
 800a7dc:	d00b      	beq.n	800a7f6 <_svfiprintf_r+0x7a>
 800a7de:	465b      	mov	r3, fp
 800a7e0:	4622      	mov	r2, r4
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f7ff ff6d 	bl	800a6c4 <__ssputs_r>
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	f000 80aa 	beq.w	800a944 <_svfiprintf_r+0x1c8>
 800a7f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7f2:	445a      	add	r2, fp
 800a7f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 80a2 	beq.w	800a944 <_svfiprintf_r+0x1c8>
 800a800:	2300      	movs	r3, #0
 800a802:	f04f 32ff 	mov.w	r2, #4294967295
 800a806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a80a:	f10a 0a01 	add.w	sl, sl, #1
 800a80e:	9304      	str	r3, [sp, #16]
 800a810:	9307      	str	r3, [sp, #28]
 800a812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a816:	931a      	str	r3, [sp, #104]	; 0x68
 800a818:	4654      	mov	r4, sl
 800a81a:	2205      	movs	r2, #5
 800a81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a820:	4851      	ldr	r0, [pc, #324]	; (800a968 <_svfiprintf_r+0x1ec>)
 800a822:	f000 fa41 	bl	800aca8 <memchr>
 800a826:	9a04      	ldr	r2, [sp, #16]
 800a828:	b9d8      	cbnz	r0, 800a862 <_svfiprintf_r+0xe6>
 800a82a:	06d0      	lsls	r0, r2, #27
 800a82c:	bf44      	itt	mi
 800a82e:	2320      	movmi	r3, #32
 800a830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a834:	0711      	lsls	r1, r2, #28
 800a836:	bf44      	itt	mi
 800a838:	232b      	movmi	r3, #43	; 0x2b
 800a83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a83e:	f89a 3000 	ldrb.w	r3, [sl]
 800a842:	2b2a      	cmp	r3, #42	; 0x2a
 800a844:	d015      	beq.n	800a872 <_svfiprintf_r+0xf6>
 800a846:	4654      	mov	r4, sl
 800a848:	2000      	movs	r0, #0
 800a84a:	f04f 0c0a 	mov.w	ip, #10
 800a84e:	9a07      	ldr	r2, [sp, #28]
 800a850:	4621      	mov	r1, r4
 800a852:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a856:	3b30      	subs	r3, #48	; 0x30
 800a858:	2b09      	cmp	r3, #9
 800a85a:	d94e      	bls.n	800a8fa <_svfiprintf_r+0x17e>
 800a85c:	b1b0      	cbz	r0, 800a88c <_svfiprintf_r+0x110>
 800a85e:	9207      	str	r2, [sp, #28]
 800a860:	e014      	b.n	800a88c <_svfiprintf_r+0x110>
 800a862:	eba0 0308 	sub.w	r3, r0, r8
 800a866:	fa09 f303 	lsl.w	r3, r9, r3
 800a86a:	4313      	orrs	r3, r2
 800a86c:	46a2      	mov	sl, r4
 800a86e:	9304      	str	r3, [sp, #16]
 800a870:	e7d2      	b.n	800a818 <_svfiprintf_r+0x9c>
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	1d19      	adds	r1, r3, #4
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	9103      	str	r1, [sp, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	bfbb      	ittet	lt
 800a87e:	425b      	neglt	r3, r3
 800a880:	f042 0202 	orrlt.w	r2, r2, #2
 800a884:	9307      	strge	r3, [sp, #28]
 800a886:	9307      	strlt	r3, [sp, #28]
 800a888:	bfb8      	it	lt
 800a88a:	9204      	strlt	r2, [sp, #16]
 800a88c:	7823      	ldrb	r3, [r4, #0]
 800a88e:	2b2e      	cmp	r3, #46	; 0x2e
 800a890:	d10c      	bne.n	800a8ac <_svfiprintf_r+0x130>
 800a892:	7863      	ldrb	r3, [r4, #1]
 800a894:	2b2a      	cmp	r3, #42	; 0x2a
 800a896:	d135      	bne.n	800a904 <_svfiprintf_r+0x188>
 800a898:	9b03      	ldr	r3, [sp, #12]
 800a89a:	3402      	adds	r4, #2
 800a89c:	1d1a      	adds	r2, r3, #4
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	9203      	str	r2, [sp, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	bfb8      	it	lt
 800a8a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8aa:	9305      	str	r3, [sp, #20]
 800a8ac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a96c <_svfiprintf_r+0x1f0>
 800a8b0:	2203      	movs	r2, #3
 800a8b2:	4650      	mov	r0, sl
 800a8b4:	7821      	ldrb	r1, [r4, #0]
 800a8b6:	f000 f9f7 	bl	800aca8 <memchr>
 800a8ba:	b140      	cbz	r0, 800a8ce <_svfiprintf_r+0x152>
 800a8bc:	2340      	movs	r3, #64	; 0x40
 800a8be:	eba0 000a 	sub.w	r0, r0, sl
 800a8c2:	fa03 f000 	lsl.w	r0, r3, r0
 800a8c6:	9b04      	ldr	r3, [sp, #16]
 800a8c8:	3401      	adds	r4, #1
 800a8ca:	4303      	orrs	r3, r0
 800a8cc:	9304      	str	r3, [sp, #16]
 800a8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d2:	2206      	movs	r2, #6
 800a8d4:	4826      	ldr	r0, [pc, #152]	; (800a970 <_svfiprintf_r+0x1f4>)
 800a8d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8da:	f000 f9e5 	bl	800aca8 <memchr>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d038      	beq.n	800a954 <_svfiprintf_r+0x1d8>
 800a8e2:	4b24      	ldr	r3, [pc, #144]	; (800a974 <_svfiprintf_r+0x1f8>)
 800a8e4:	bb1b      	cbnz	r3, 800a92e <_svfiprintf_r+0x1b2>
 800a8e6:	9b03      	ldr	r3, [sp, #12]
 800a8e8:	3307      	adds	r3, #7
 800a8ea:	f023 0307 	bic.w	r3, r3, #7
 800a8ee:	3308      	adds	r3, #8
 800a8f0:	9303      	str	r3, [sp, #12]
 800a8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f4:	4433      	add	r3, r6
 800a8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f8:	e767      	b.n	800a7ca <_svfiprintf_r+0x4e>
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	2001      	movs	r0, #1
 800a8fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a902:	e7a5      	b.n	800a850 <_svfiprintf_r+0xd4>
 800a904:	2300      	movs	r3, #0
 800a906:	f04f 0c0a 	mov.w	ip, #10
 800a90a:	4619      	mov	r1, r3
 800a90c:	3401      	adds	r4, #1
 800a90e:	9305      	str	r3, [sp, #20]
 800a910:	4620      	mov	r0, r4
 800a912:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a916:	3a30      	subs	r2, #48	; 0x30
 800a918:	2a09      	cmp	r2, #9
 800a91a:	d903      	bls.n	800a924 <_svfiprintf_r+0x1a8>
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d0c5      	beq.n	800a8ac <_svfiprintf_r+0x130>
 800a920:	9105      	str	r1, [sp, #20]
 800a922:	e7c3      	b.n	800a8ac <_svfiprintf_r+0x130>
 800a924:	4604      	mov	r4, r0
 800a926:	2301      	movs	r3, #1
 800a928:	fb0c 2101 	mla	r1, ip, r1, r2
 800a92c:	e7f0      	b.n	800a910 <_svfiprintf_r+0x194>
 800a92e:	ab03      	add	r3, sp, #12
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	462a      	mov	r2, r5
 800a934:	4638      	mov	r0, r7
 800a936:	4b10      	ldr	r3, [pc, #64]	; (800a978 <_svfiprintf_r+0x1fc>)
 800a938:	a904      	add	r1, sp, #16
 800a93a:	f3af 8000 	nop.w
 800a93e:	1c42      	adds	r2, r0, #1
 800a940:	4606      	mov	r6, r0
 800a942:	d1d6      	bne.n	800a8f2 <_svfiprintf_r+0x176>
 800a944:	89ab      	ldrh	r3, [r5, #12]
 800a946:	065b      	lsls	r3, r3, #25
 800a948:	f53f af2c 	bmi.w	800a7a4 <_svfiprintf_r+0x28>
 800a94c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a94e:	b01d      	add	sp, #116	; 0x74
 800a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a954:	ab03      	add	r3, sp, #12
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	462a      	mov	r2, r5
 800a95a:	4638      	mov	r0, r7
 800a95c:	4b06      	ldr	r3, [pc, #24]	; (800a978 <_svfiprintf_r+0x1fc>)
 800a95e:	a904      	add	r1, sp, #16
 800a960:	f000 f87c 	bl	800aa5c <_printf_i>
 800a964:	e7eb      	b.n	800a93e <_svfiprintf_r+0x1c2>
 800a966:	bf00      	nop
 800a968:	0800c698 	.word	0x0800c698
 800a96c:	0800c69e 	.word	0x0800c69e
 800a970:	0800c6a2 	.word	0x0800c6a2
 800a974:	00000000 	.word	0x00000000
 800a978:	0800a6c5 	.word	0x0800a6c5

0800a97c <_printf_common>:
 800a97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a980:	4616      	mov	r6, r2
 800a982:	4699      	mov	r9, r3
 800a984:	688a      	ldr	r2, [r1, #8]
 800a986:	690b      	ldr	r3, [r1, #16]
 800a988:	4607      	mov	r7, r0
 800a98a:	4293      	cmp	r3, r2
 800a98c:	bfb8      	it	lt
 800a98e:	4613      	movlt	r3, r2
 800a990:	6033      	str	r3, [r6, #0]
 800a992:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a996:	460c      	mov	r4, r1
 800a998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a99c:	b10a      	cbz	r2, 800a9a2 <_printf_common+0x26>
 800a99e:	3301      	adds	r3, #1
 800a9a0:	6033      	str	r3, [r6, #0]
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	0699      	lsls	r1, r3, #26
 800a9a6:	bf42      	ittt	mi
 800a9a8:	6833      	ldrmi	r3, [r6, #0]
 800a9aa:	3302      	addmi	r3, #2
 800a9ac:	6033      	strmi	r3, [r6, #0]
 800a9ae:	6825      	ldr	r5, [r4, #0]
 800a9b0:	f015 0506 	ands.w	r5, r5, #6
 800a9b4:	d106      	bne.n	800a9c4 <_printf_common+0x48>
 800a9b6:	f104 0a19 	add.w	sl, r4, #25
 800a9ba:	68e3      	ldr	r3, [r4, #12]
 800a9bc:	6832      	ldr	r2, [r6, #0]
 800a9be:	1a9b      	subs	r3, r3, r2
 800a9c0:	42ab      	cmp	r3, r5
 800a9c2:	dc28      	bgt.n	800aa16 <_printf_common+0x9a>
 800a9c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9c8:	1e13      	subs	r3, r2, #0
 800a9ca:	6822      	ldr	r2, [r4, #0]
 800a9cc:	bf18      	it	ne
 800a9ce:	2301      	movne	r3, #1
 800a9d0:	0692      	lsls	r2, r2, #26
 800a9d2:	d42d      	bmi.n	800aa30 <_printf_common+0xb4>
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9dc:	47c0      	blx	r8
 800a9de:	3001      	adds	r0, #1
 800a9e0:	d020      	beq.n	800aa24 <_printf_common+0xa8>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	68e5      	ldr	r5, [r4, #12]
 800a9e6:	f003 0306 	and.w	r3, r3, #6
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	bf18      	it	ne
 800a9ee:	2500      	movne	r5, #0
 800a9f0:	6832      	ldr	r2, [r6, #0]
 800a9f2:	f04f 0600 	mov.w	r6, #0
 800a9f6:	68a3      	ldr	r3, [r4, #8]
 800a9f8:	bf08      	it	eq
 800a9fa:	1aad      	subeq	r5, r5, r2
 800a9fc:	6922      	ldr	r2, [r4, #16]
 800a9fe:	bf08      	it	eq
 800aa00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa04:	4293      	cmp	r3, r2
 800aa06:	bfc4      	itt	gt
 800aa08:	1a9b      	subgt	r3, r3, r2
 800aa0a:	18ed      	addgt	r5, r5, r3
 800aa0c:	341a      	adds	r4, #26
 800aa0e:	42b5      	cmp	r5, r6
 800aa10:	d11a      	bne.n	800aa48 <_printf_common+0xcc>
 800aa12:	2000      	movs	r0, #0
 800aa14:	e008      	b.n	800aa28 <_printf_common+0xac>
 800aa16:	2301      	movs	r3, #1
 800aa18:	4652      	mov	r2, sl
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	47c0      	blx	r8
 800aa20:	3001      	adds	r0, #1
 800aa22:	d103      	bne.n	800aa2c <_printf_common+0xb0>
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295
 800aa28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2c:	3501      	adds	r5, #1
 800aa2e:	e7c4      	b.n	800a9ba <_printf_common+0x3e>
 800aa30:	2030      	movs	r0, #48	; 0x30
 800aa32:	18e1      	adds	r1, r4, r3
 800aa34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa38:	1c5a      	adds	r2, r3, #1
 800aa3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa3e:	4422      	add	r2, r4
 800aa40:	3302      	adds	r3, #2
 800aa42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa46:	e7c5      	b.n	800a9d4 <_printf_common+0x58>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	4638      	mov	r0, r7
 800aa50:	47c0      	blx	r8
 800aa52:	3001      	adds	r0, #1
 800aa54:	d0e6      	beq.n	800aa24 <_printf_common+0xa8>
 800aa56:	3601      	adds	r6, #1
 800aa58:	e7d9      	b.n	800aa0e <_printf_common+0x92>
	...

0800aa5c <_printf_i>:
 800aa5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa60:	7e0f      	ldrb	r7, [r1, #24]
 800aa62:	4691      	mov	r9, r2
 800aa64:	2f78      	cmp	r7, #120	; 0x78
 800aa66:	4680      	mov	r8, r0
 800aa68:	460c      	mov	r4, r1
 800aa6a:	469a      	mov	sl, r3
 800aa6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa72:	d807      	bhi.n	800aa84 <_printf_i+0x28>
 800aa74:	2f62      	cmp	r7, #98	; 0x62
 800aa76:	d80a      	bhi.n	800aa8e <_printf_i+0x32>
 800aa78:	2f00      	cmp	r7, #0
 800aa7a:	f000 80d9 	beq.w	800ac30 <_printf_i+0x1d4>
 800aa7e:	2f58      	cmp	r7, #88	; 0x58
 800aa80:	f000 80a4 	beq.w	800abcc <_printf_i+0x170>
 800aa84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa8c:	e03a      	b.n	800ab04 <_printf_i+0xa8>
 800aa8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa92:	2b15      	cmp	r3, #21
 800aa94:	d8f6      	bhi.n	800aa84 <_printf_i+0x28>
 800aa96:	a101      	add	r1, pc, #4	; (adr r1, 800aa9c <_printf_i+0x40>)
 800aa98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa9c:	0800aaf5 	.word	0x0800aaf5
 800aaa0:	0800ab09 	.word	0x0800ab09
 800aaa4:	0800aa85 	.word	0x0800aa85
 800aaa8:	0800aa85 	.word	0x0800aa85
 800aaac:	0800aa85 	.word	0x0800aa85
 800aab0:	0800aa85 	.word	0x0800aa85
 800aab4:	0800ab09 	.word	0x0800ab09
 800aab8:	0800aa85 	.word	0x0800aa85
 800aabc:	0800aa85 	.word	0x0800aa85
 800aac0:	0800aa85 	.word	0x0800aa85
 800aac4:	0800aa85 	.word	0x0800aa85
 800aac8:	0800ac17 	.word	0x0800ac17
 800aacc:	0800ab39 	.word	0x0800ab39
 800aad0:	0800abf9 	.word	0x0800abf9
 800aad4:	0800aa85 	.word	0x0800aa85
 800aad8:	0800aa85 	.word	0x0800aa85
 800aadc:	0800ac39 	.word	0x0800ac39
 800aae0:	0800aa85 	.word	0x0800aa85
 800aae4:	0800ab39 	.word	0x0800ab39
 800aae8:	0800aa85 	.word	0x0800aa85
 800aaec:	0800aa85 	.word	0x0800aa85
 800aaf0:	0800ac01 	.word	0x0800ac01
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	1d1a      	adds	r2, r3, #4
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	602a      	str	r2, [r5, #0]
 800aafc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab04:	2301      	movs	r3, #1
 800ab06:	e0a4      	b.n	800ac52 <_printf_i+0x1f6>
 800ab08:	6820      	ldr	r0, [r4, #0]
 800ab0a:	6829      	ldr	r1, [r5, #0]
 800ab0c:	0606      	lsls	r6, r0, #24
 800ab0e:	f101 0304 	add.w	r3, r1, #4
 800ab12:	d50a      	bpl.n	800ab2a <_printf_i+0xce>
 800ab14:	680e      	ldr	r6, [r1, #0]
 800ab16:	602b      	str	r3, [r5, #0]
 800ab18:	2e00      	cmp	r6, #0
 800ab1a:	da03      	bge.n	800ab24 <_printf_i+0xc8>
 800ab1c:	232d      	movs	r3, #45	; 0x2d
 800ab1e:	4276      	negs	r6, r6
 800ab20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab24:	230a      	movs	r3, #10
 800ab26:	485e      	ldr	r0, [pc, #376]	; (800aca0 <_printf_i+0x244>)
 800ab28:	e019      	b.n	800ab5e <_printf_i+0x102>
 800ab2a:	680e      	ldr	r6, [r1, #0]
 800ab2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	bf18      	it	ne
 800ab34:	b236      	sxthne	r6, r6
 800ab36:	e7ef      	b.n	800ab18 <_printf_i+0xbc>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	6820      	ldr	r0, [r4, #0]
 800ab3c:	1d19      	adds	r1, r3, #4
 800ab3e:	6029      	str	r1, [r5, #0]
 800ab40:	0601      	lsls	r1, r0, #24
 800ab42:	d501      	bpl.n	800ab48 <_printf_i+0xec>
 800ab44:	681e      	ldr	r6, [r3, #0]
 800ab46:	e002      	b.n	800ab4e <_printf_i+0xf2>
 800ab48:	0646      	lsls	r6, r0, #25
 800ab4a:	d5fb      	bpl.n	800ab44 <_printf_i+0xe8>
 800ab4c:	881e      	ldrh	r6, [r3, #0]
 800ab4e:	2f6f      	cmp	r7, #111	; 0x6f
 800ab50:	bf0c      	ite	eq
 800ab52:	2308      	moveq	r3, #8
 800ab54:	230a      	movne	r3, #10
 800ab56:	4852      	ldr	r0, [pc, #328]	; (800aca0 <_printf_i+0x244>)
 800ab58:	2100      	movs	r1, #0
 800ab5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab5e:	6865      	ldr	r5, [r4, #4]
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	bfa8      	it	ge
 800ab64:	6821      	ldrge	r1, [r4, #0]
 800ab66:	60a5      	str	r5, [r4, #8]
 800ab68:	bfa4      	itt	ge
 800ab6a:	f021 0104 	bicge.w	r1, r1, #4
 800ab6e:	6021      	strge	r1, [r4, #0]
 800ab70:	b90e      	cbnz	r6, 800ab76 <_printf_i+0x11a>
 800ab72:	2d00      	cmp	r5, #0
 800ab74:	d04d      	beq.n	800ac12 <_printf_i+0x1b6>
 800ab76:	4615      	mov	r5, r2
 800ab78:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab7c:	fb03 6711 	mls	r7, r3, r1, r6
 800ab80:	5dc7      	ldrb	r7, [r0, r7]
 800ab82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab86:	4637      	mov	r7, r6
 800ab88:	42bb      	cmp	r3, r7
 800ab8a:	460e      	mov	r6, r1
 800ab8c:	d9f4      	bls.n	800ab78 <_printf_i+0x11c>
 800ab8e:	2b08      	cmp	r3, #8
 800ab90:	d10b      	bne.n	800abaa <_printf_i+0x14e>
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	07de      	lsls	r6, r3, #31
 800ab96:	d508      	bpl.n	800abaa <_printf_i+0x14e>
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	6861      	ldr	r1, [r4, #4]
 800ab9c:	4299      	cmp	r1, r3
 800ab9e:	bfde      	ittt	le
 800aba0:	2330      	movle	r3, #48	; 0x30
 800aba2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aba6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800abaa:	1b52      	subs	r2, r2, r5
 800abac:	6122      	str	r2, [r4, #16]
 800abae:	464b      	mov	r3, r9
 800abb0:	4621      	mov	r1, r4
 800abb2:	4640      	mov	r0, r8
 800abb4:	f8cd a000 	str.w	sl, [sp]
 800abb8:	aa03      	add	r2, sp, #12
 800abba:	f7ff fedf 	bl	800a97c <_printf_common>
 800abbe:	3001      	adds	r0, #1
 800abc0:	d14c      	bne.n	800ac5c <_printf_i+0x200>
 800abc2:	f04f 30ff 	mov.w	r0, #4294967295
 800abc6:	b004      	add	sp, #16
 800abc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abcc:	4834      	ldr	r0, [pc, #208]	; (800aca0 <_printf_i+0x244>)
 800abce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800abd2:	6829      	ldr	r1, [r5, #0]
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	f851 6b04 	ldr.w	r6, [r1], #4
 800abda:	6029      	str	r1, [r5, #0]
 800abdc:	061d      	lsls	r5, r3, #24
 800abde:	d514      	bpl.n	800ac0a <_printf_i+0x1ae>
 800abe0:	07df      	lsls	r7, r3, #31
 800abe2:	bf44      	itt	mi
 800abe4:	f043 0320 	orrmi.w	r3, r3, #32
 800abe8:	6023      	strmi	r3, [r4, #0]
 800abea:	b91e      	cbnz	r6, 800abf4 <_printf_i+0x198>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	f023 0320 	bic.w	r3, r3, #32
 800abf2:	6023      	str	r3, [r4, #0]
 800abf4:	2310      	movs	r3, #16
 800abf6:	e7af      	b.n	800ab58 <_printf_i+0xfc>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	f043 0320 	orr.w	r3, r3, #32
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	2378      	movs	r3, #120	; 0x78
 800ac02:	4828      	ldr	r0, [pc, #160]	; (800aca4 <_printf_i+0x248>)
 800ac04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac08:	e7e3      	b.n	800abd2 <_printf_i+0x176>
 800ac0a:	0659      	lsls	r1, r3, #25
 800ac0c:	bf48      	it	mi
 800ac0e:	b2b6      	uxthmi	r6, r6
 800ac10:	e7e6      	b.n	800abe0 <_printf_i+0x184>
 800ac12:	4615      	mov	r5, r2
 800ac14:	e7bb      	b.n	800ab8e <_printf_i+0x132>
 800ac16:	682b      	ldr	r3, [r5, #0]
 800ac18:	6826      	ldr	r6, [r4, #0]
 800ac1a:	1d18      	adds	r0, r3, #4
 800ac1c:	6961      	ldr	r1, [r4, #20]
 800ac1e:	6028      	str	r0, [r5, #0]
 800ac20:	0635      	lsls	r5, r6, #24
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	d501      	bpl.n	800ac2a <_printf_i+0x1ce>
 800ac26:	6019      	str	r1, [r3, #0]
 800ac28:	e002      	b.n	800ac30 <_printf_i+0x1d4>
 800ac2a:	0670      	lsls	r0, r6, #25
 800ac2c:	d5fb      	bpl.n	800ac26 <_printf_i+0x1ca>
 800ac2e:	8019      	strh	r1, [r3, #0]
 800ac30:	2300      	movs	r3, #0
 800ac32:	4615      	mov	r5, r2
 800ac34:	6123      	str	r3, [r4, #16]
 800ac36:	e7ba      	b.n	800abae <_printf_i+0x152>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	1d1a      	adds	r2, r3, #4
 800ac3e:	602a      	str	r2, [r5, #0]
 800ac40:	681d      	ldr	r5, [r3, #0]
 800ac42:	6862      	ldr	r2, [r4, #4]
 800ac44:	4628      	mov	r0, r5
 800ac46:	f000 f82f 	bl	800aca8 <memchr>
 800ac4a:	b108      	cbz	r0, 800ac50 <_printf_i+0x1f4>
 800ac4c:	1b40      	subs	r0, r0, r5
 800ac4e:	6060      	str	r0, [r4, #4]
 800ac50:	6863      	ldr	r3, [r4, #4]
 800ac52:	6123      	str	r3, [r4, #16]
 800ac54:	2300      	movs	r3, #0
 800ac56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac5a:	e7a8      	b.n	800abae <_printf_i+0x152>
 800ac5c:	462a      	mov	r2, r5
 800ac5e:	4649      	mov	r1, r9
 800ac60:	4640      	mov	r0, r8
 800ac62:	6923      	ldr	r3, [r4, #16]
 800ac64:	47d0      	blx	sl
 800ac66:	3001      	adds	r0, #1
 800ac68:	d0ab      	beq.n	800abc2 <_printf_i+0x166>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	079b      	lsls	r3, r3, #30
 800ac6e:	d413      	bmi.n	800ac98 <_printf_i+0x23c>
 800ac70:	68e0      	ldr	r0, [r4, #12]
 800ac72:	9b03      	ldr	r3, [sp, #12]
 800ac74:	4298      	cmp	r0, r3
 800ac76:	bfb8      	it	lt
 800ac78:	4618      	movlt	r0, r3
 800ac7a:	e7a4      	b.n	800abc6 <_printf_i+0x16a>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	4632      	mov	r2, r6
 800ac80:	4649      	mov	r1, r9
 800ac82:	4640      	mov	r0, r8
 800ac84:	47d0      	blx	sl
 800ac86:	3001      	adds	r0, #1
 800ac88:	d09b      	beq.n	800abc2 <_printf_i+0x166>
 800ac8a:	3501      	adds	r5, #1
 800ac8c:	68e3      	ldr	r3, [r4, #12]
 800ac8e:	9903      	ldr	r1, [sp, #12]
 800ac90:	1a5b      	subs	r3, r3, r1
 800ac92:	42ab      	cmp	r3, r5
 800ac94:	dcf2      	bgt.n	800ac7c <_printf_i+0x220>
 800ac96:	e7eb      	b.n	800ac70 <_printf_i+0x214>
 800ac98:	2500      	movs	r5, #0
 800ac9a:	f104 0619 	add.w	r6, r4, #25
 800ac9e:	e7f5      	b.n	800ac8c <_printf_i+0x230>
 800aca0:	0800c6a9 	.word	0x0800c6a9
 800aca4:	0800c6ba 	.word	0x0800c6ba

0800aca8 <memchr>:
 800aca8:	4603      	mov	r3, r0
 800acaa:	b510      	push	{r4, lr}
 800acac:	b2c9      	uxtb	r1, r1
 800acae:	4402      	add	r2, r0
 800acb0:	4293      	cmp	r3, r2
 800acb2:	4618      	mov	r0, r3
 800acb4:	d101      	bne.n	800acba <memchr+0x12>
 800acb6:	2000      	movs	r0, #0
 800acb8:	e003      	b.n	800acc2 <memchr+0x1a>
 800acba:	7804      	ldrb	r4, [r0, #0]
 800acbc:	3301      	adds	r3, #1
 800acbe:	428c      	cmp	r4, r1
 800acc0:	d1f6      	bne.n	800acb0 <memchr+0x8>
 800acc2:	bd10      	pop	{r4, pc}

0800acc4 <memcpy>:
 800acc4:	440a      	add	r2, r1
 800acc6:	4291      	cmp	r1, r2
 800acc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800accc:	d100      	bne.n	800acd0 <memcpy+0xc>
 800acce:	4770      	bx	lr
 800acd0:	b510      	push	{r4, lr}
 800acd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acd6:	4291      	cmp	r1, r2
 800acd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acdc:	d1f9      	bne.n	800acd2 <memcpy+0xe>
 800acde:	bd10      	pop	{r4, pc}

0800ace0 <memmove>:
 800ace0:	4288      	cmp	r0, r1
 800ace2:	b510      	push	{r4, lr}
 800ace4:	eb01 0402 	add.w	r4, r1, r2
 800ace8:	d902      	bls.n	800acf0 <memmove+0x10>
 800acea:	4284      	cmp	r4, r0
 800acec:	4623      	mov	r3, r4
 800acee:	d807      	bhi.n	800ad00 <memmove+0x20>
 800acf0:	1e43      	subs	r3, r0, #1
 800acf2:	42a1      	cmp	r1, r4
 800acf4:	d008      	beq.n	800ad08 <memmove+0x28>
 800acf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acfe:	e7f8      	b.n	800acf2 <memmove+0x12>
 800ad00:	4601      	mov	r1, r0
 800ad02:	4402      	add	r2, r0
 800ad04:	428a      	cmp	r2, r1
 800ad06:	d100      	bne.n	800ad0a <memmove+0x2a>
 800ad08:	bd10      	pop	{r4, pc}
 800ad0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad12:	e7f7      	b.n	800ad04 <memmove+0x24>

0800ad14 <_free_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4605      	mov	r5, r0
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	d040      	beq.n	800ad9e <_free_r+0x8a>
 800ad1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad20:	1f0c      	subs	r4, r1, #4
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	bfb8      	it	lt
 800ad26:	18e4      	addlt	r4, r4, r3
 800ad28:	f000 f910 	bl	800af4c <__malloc_lock>
 800ad2c:	4a1c      	ldr	r2, [pc, #112]	; (800ada0 <_free_r+0x8c>)
 800ad2e:	6813      	ldr	r3, [r2, #0]
 800ad30:	b933      	cbnz	r3, 800ad40 <_free_r+0x2c>
 800ad32:	6063      	str	r3, [r4, #4]
 800ad34:	6014      	str	r4, [r2, #0]
 800ad36:	4628      	mov	r0, r5
 800ad38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad3c:	f000 b90c 	b.w	800af58 <__malloc_unlock>
 800ad40:	42a3      	cmp	r3, r4
 800ad42:	d908      	bls.n	800ad56 <_free_r+0x42>
 800ad44:	6820      	ldr	r0, [r4, #0]
 800ad46:	1821      	adds	r1, r4, r0
 800ad48:	428b      	cmp	r3, r1
 800ad4a:	bf01      	itttt	eq
 800ad4c:	6819      	ldreq	r1, [r3, #0]
 800ad4e:	685b      	ldreq	r3, [r3, #4]
 800ad50:	1809      	addeq	r1, r1, r0
 800ad52:	6021      	streq	r1, [r4, #0]
 800ad54:	e7ed      	b.n	800ad32 <_free_r+0x1e>
 800ad56:	461a      	mov	r2, r3
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	b10b      	cbz	r3, 800ad60 <_free_r+0x4c>
 800ad5c:	42a3      	cmp	r3, r4
 800ad5e:	d9fa      	bls.n	800ad56 <_free_r+0x42>
 800ad60:	6811      	ldr	r1, [r2, #0]
 800ad62:	1850      	adds	r0, r2, r1
 800ad64:	42a0      	cmp	r0, r4
 800ad66:	d10b      	bne.n	800ad80 <_free_r+0x6c>
 800ad68:	6820      	ldr	r0, [r4, #0]
 800ad6a:	4401      	add	r1, r0
 800ad6c:	1850      	adds	r0, r2, r1
 800ad6e:	4283      	cmp	r3, r0
 800ad70:	6011      	str	r1, [r2, #0]
 800ad72:	d1e0      	bne.n	800ad36 <_free_r+0x22>
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	4401      	add	r1, r0
 800ad7a:	6011      	str	r1, [r2, #0]
 800ad7c:	6053      	str	r3, [r2, #4]
 800ad7e:	e7da      	b.n	800ad36 <_free_r+0x22>
 800ad80:	d902      	bls.n	800ad88 <_free_r+0x74>
 800ad82:	230c      	movs	r3, #12
 800ad84:	602b      	str	r3, [r5, #0]
 800ad86:	e7d6      	b.n	800ad36 <_free_r+0x22>
 800ad88:	6820      	ldr	r0, [r4, #0]
 800ad8a:	1821      	adds	r1, r4, r0
 800ad8c:	428b      	cmp	r3, r1
 800ad8e:	bf01      	itttt	eq
 800ad90:	6819      	ldreq	r1, [r3, #0]
 800ad92:	685b      	ldreq	r3, [r3, #4]
 800ad94:	1809      	addeq	r1, r1, r0
 800ad96:	6021      	streq	r1, [r4, #0]
 800ad98:	6063      	str	r3, [r4, #4]
 800ad9a:	6054      	str	r4, [r2, #4]
 800ad9c:	e7cb      	b.n	800ad36 <_free_r+0x22>
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	200004ac 	.word	0x200004ac

0800ada4 <sbrk_aligned>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	4e0e      	ldr	r6, [pc, #56]	; (800ade0 <sbrk_aligned+0x3c>)
 800ada8:	460c      	mov	r4, r1
 800adaa:	6831      	ldr	r1, [r6, #0]
 800adac:	4605      	mov	r5, r0
 800adae:	b911      	cbnz	r1, 800adb6 <sbrk_aligned+0x12>
 800adb0:	f000 f8bc 	bl	800af2c <_sbrk_r>
 800adb4:	6030      	str	r0, [r6, #0]
 800adb6:	4621      	mov	r1, r4
 800adb8:	4628      	mov	r0, r5
 800adba:	f000 f8b7 	bl	800af2c <_sbrk_r>
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	d00a      	beq.n	800add8 <sbrk_aligned+0x34>
 800adc2:	1cc4      	adds	r4, r0, #3
 800adc4:	f024 0403 	bic.w	r4, r4, #3
 800adc8:	42a0      	cmp	r0, r4
 800adca:	d007      	beq.n	800addc <sbrk_aligned+0x38>
 800adcc:	1a21      	subs	r1, r4, r0
 800adce:	4628      	mov	r0, r5
 800add0:	f000 f8ac 	bl	800af2c <_sbrk_r>
 800add4:	3001      	adds	r0, #1
 800add6:	d101      	bne.n	800addc <sbrk_aligned+0x38>
 800add8:	f04f 34ff 	mov.w	r4, #4294967295
 800addc:	4620      	mov	r0, r4
 800adde:	bd70      	pop	{r4, r5, r6, pc}
 800ade0:	200004b0 	.word	0x200004b0

0800ade4 <_malloc_r>:
 800ade4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade8:	1ccd      	adds	r5, r1, #3
 800adea:	f025 0503 	bic.w	r5, r5, #3
 800adee:	3508      	adds	r5, #8
 800adf0:	2d0c      	cmp	r5, #12
 800adf2:	bf38      	it	cc
 800adf4:	250c      	movcc	r5, #12
 800adf6:	2d00      	cmp	r5, #0
 800adf8:	4607      	mov	r7, r0
 800adfa:	db01      	blt.n	800ae00 <_malloc_r+0x1c>
 800adfc:	42a9      	cmp	r1, r5
 800adfe:	d905      	bls.n	800ae0c <_malloc_r+0x28>
 800ae00:	230c      	movs	r3, #12
 800ae02:	2600      	movs	r6, #0
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	4630      	mov	r0, r6
 800ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae0c:	4e2e      	ldr	r6, [pc, #184]	; (800aec8 <_malloc_r+0xe4>)
 800ae0e:	f000 f89d 	bl	800af4c <__malloc_lock>
 800ae12:	6833      	ldr	r3, [r6, #0]
 800ae14:	461c      	mov	r4, r3
 800ae16:	bb34      	cbnz	r4, 800ae66 <_malloc_r+0x82>
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	f7ff ffc2 	bl	800ada4 <sbrk_aligned>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	4604      	mov	r4, r0
 800ae24:	d14d      	bne.n	800aec2 <_malloc_r+0xde>
 800ae26:	6834      	ldr	r4, [r6, #0]
 800ae28:	4626      	mov	r6, r4
 800ae2a:	2e00      	cmp	r6, #0
 800ae2c:	d140      	bne.n	800aeb0 <_malloc_r+0xcc>
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	4631      	mov	r1, r6
 800ae32:	4638      	mov	r0, r7
 800ae34:	eb04 0803 	add.w	r8, r4, r3
 800ae38:	f000 f878 	bl	800af2c <_sbrk_r>
 800ae3c:	4580      	cmp	r8, r0
 800ae3e:	d13a      	bne.n	800aeb6 <_malloc_r+0xd2>
 800ae40:	6821      	ldr	r1, [r4, #0]
 800ae42:	3503      	adds	r5, #3
 800ae44:	1a6d      	subs	r5, r5, r1
 800ae46:	f025 0503 	bic.w	r5, r5, #3
 800ae4a:	3508      	adds	r5, #8
 800ae4c:	2d0c      	cmp	r5, #12
 800ae4e:	bf38      	it	cc
 800ae50:	250c      	movcc	r5, #12
 800ae52:	4638      	mov	r0, r7
 800ae54:	4629      	mov	r1, r5
 800ae56:	f7ff ffa5 	bl	800ada4 <sbrk_aligned>
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	d02b      	beq.n	800aeb6 <_malloc_r+0xd2>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	442b      	add	r3, r5
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	e00e      	b.n	800ae84 <_malloc_r+0xa0>
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	1b52      	subs	r2, r2, r5
 800ae6a:	d41e      	bmi.n	800aeaa <_malloc_r+0xc6>
 800ae6c:	2a0b      	cmp	r2, #11
 800ae6e:	d916      	bls.n	800ae9e <_malloc_r+0xba>
 800ae70:	1961      	adds	r1, r4, r5
 800ae72:	42a3      	cmp	r3, r4
 800ae74:	6025      	str	r5, [r4, #0]
 800ae76:	bf18      	it	ne
 800ae78:	6059      	strne	r1, [r3, #4]
 800ae7a:	6863      	ldr	r3, [r4, #4]
 800ae7c:	bf08      	it	eq
 800ae7e:	6031      	streq	r1, [r6, #0]
 800ae80:	5162      	str	r2, [r4, r5]
 800ae82:	604b      	str	r3, [r1, #4]
 800ae84:	4638      	mov	r0, r7
 800ae86:	f104 060b 	add.w	r6, r4, #11
 800ae8a:	f000 f865 	bl	800af58 <__malloc_unlock>
 800ae8e:	f026 0607 	bic.w	r6, r6, #7
 800ae92:	1d23      	adds	r3, r4, #4
 800ae94:	1af2      	subs	r2, r6, r3
 800ae96:	d0b6      	beq.n	800ae06 <_malloc_r+0x22>
 800ae98:	1b9b      	subs	r3, r3, r6
 800ae9a:	50a3      	str	r3, [r4, r2]
 800ae9c:	e7b3      	b.n	800ae06 <_malloc_r+0x22>
 800ae9e:	6862      	ldr	r2, [r4, #4]
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	bf0c      	ite	eq
 800aea4:	6032      	streq	r2, [r6, #0]
 800aea6:	605a      	strne	r2, [r3, #4]
 800aea8:	e7ec      	b.n	800ae84 <_malloc_r+0xa0>
 800aeaa:	4623      	mov	r3, r4
 800aeac:	6864      	ldr	r4, [r4, #4]
 800aeae:	e7b2      	b.n	800ae16 <_malloc_r+0x32>
 800aeb0:	4634      	mov	r4, r6
 800aeb2:	6876      	ldr	r6, [r6, #4]
 800aeb4:	e7b9      	b.n	800ae2a <_malloc_r+0x46>
 800aeb6:	230c      	movs	r3, #12
 800aeb8:	4638      	mov	r0, r7
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	f000 f84c 	bl	800af58 <__malloc_unlock>
 800aec0:	e7a1      	b.n	800ae06 <_malloc_r+0x22>
 800aec2:	6025      	str	r5, [r4, #0]
 800aec4:	e7de      	b.n	800ae84 <_malloc_r+0xa0>
 800aec6:	bf00      	nop
 800aec8:	200004ac 	.word	0x200004ac

0800aecc <_realloc_r>:
 800aecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed0:	4680      	mov	r8, r0
 800aed2:	4614      	mov	r4, r2
 800aed4:	460e      	mov	r6, r1
 800aed6:	b921      	cbnz	r1, 800aee2 <_realloc_r+0x16>
 800aed8:	4611      	mov	r1, r2
 800aeda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aede:	f7ff bf81 	b.w	800ade4 <_malloc_r>
 800aee2:	b92a      	cbnz	r2, 800aef0 <_realloc_r+0x24>
 800aee4:	f7ff ff16 	bl	800ad14 <_free_r>
 800aee8:	4625      	mov	r5, r4
 800aeea:	4628      	mov	r0, r5
 800aeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef0:	f000 f838 	bl	800af64 <_malloc_usable_size_r>
 800aef4:	4284      	cmp	r4, r0
 800aef6:	4607      	mov	r7, r0
 800aef8:	d802      	bhi.n	800af00 <_realloc_r+0x34>
 800aefa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aefe:	d812      	bhi.n	800af26 <_realloc_r+0x5a>
 800af00:	4621      	mov	r1, r4
 800af02:	4640      	mov	r0, r8
 800af04:	f7ff ff6e 	bl	800ade4 <_malloc_r>
 800af08:	4605      	mov	r5, r0
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d0ed      	beq.n	800aeea <_realloc_r+0x1e>
 800af0e:	42bc      	cmp	r4, r7
 800af10:	4622      	mov	r2, r4
 800af12:	4631      	mov	r1, r6
 800af14:	bf28      	it	cs
 800af16:	463a      	movcs	r2, r7
 800af18:	f7ff fed4 	bl	800acc4 <memcpy>
 800af1c:	4631      	mov	r1, r6
 800af1e:	4640      	mov	r0, r8
 800af20:	f7ff fef8 	bl	800ad14 <_free_r>
 800af24:	e7e1      	b.n	800aeea <_realloc_r+0x1e>
 800af26:	4635      	mov	r5, r6
 800af28:	e7df      	b.n	800aeea <_realloc_r+0x1e>
	...

0800af2c <_sbrk_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	2300      	movs	r3, #0
 800af30:	4d05      	ldr	r5, [pc, #20]	; (800af48 <_sbrk_r+0x1c>)
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	602b      	str	r3, [r5, #0]
 800af38:	f7ff fb1a 	bl	800a570 <_sbrk>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	d102      	bne.n	800af46 <_sbrk_r+0x1a>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	b103      	cbz	r3, 800af46 <_sbrk_r+0x1a>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	200004b4 	.word	0x200004b4

0800af4c <__malloc_lock>:
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <__malloc_lock+0x8>)
 800af4e:	f000 b811 	b.w	800af74 <__retarget_lock_acquire_recursive>
 800af52:	bf00      	nop
 800af54:	200004b8 	.word	0x200004b8

0800af58 <__malloc_unlock>:
 800af58:	4801      	ldr	r0, [pc, #4]	; (800af60 <__malloc_unlock+0x8>)
 800af5a:	f000 b80c 	b.w	800af76 <__retarget_lock_release_recursive>
 800af5e:	bf00      	nop
 800af60:	200004b8 	.word	0x200004b8

0800af64 <_malloc_usable_size_r>:
 800af64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af68:	1f18      	subs	r0, r3, #4
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	bfbc      	itt	lt
 800af6e:	580b      	ldrlt	r3, [r1, r0]
 800af70:	18c0      	addlt	r0, r0, r3
 800af72:	4770      	bx	lr

0800af74 <__retarget_lock_acquire_recursive>:
 800af74:	4770      	bx	lr

0800af76 <__retarget_lock_release_recursive>:
 800af76:	4770      	bx	lr

0800af78 <pow>:
 800af78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af7c:	4614      	mov	r4, r2
 800af7e:	461d      	mov	r5, r3
 800af80:	4680      	mov	r8, r0
 800af82:	4689      	mov	r9, r1
 800af84:	f000 f89c 	bl	800b0c0 <__ieee754_pow>
 800af88:	4622      	mov	r2, r4
 800af8a:	4606      	mov	r6, r0
 800af8c:	460f      	mov	r7, r1
 800af8e:	462b      	mov	r3, r5
 800af90:	4620      	mov	r0, r4
 800af92:	4629      	mov	r1, r5
 800af94:	f7f5 fd32 	bl	80009fc <__aeabi_dcmpun>
 800af98:	bbc8      	cbnz	r0, 800b00e <pow+0x96>
 800af9a:	2200      	movs	r2, #0
 800af9c:	2300      	movs	r3, #0
 800af9e:	4640      	mov	r0, r8
 800afa0:	4649      	mov	r1, r9
 800afa2:	f7f5 fcf9 	bl	8000998 <__aeabi_dcmpeq>
 800afa6:	b1b8      	cbz	r0, 800afd8 <pow+0x60>
 800afa8:	2200      	movs	r2, #0
 800afaa:	2300      	movs	r3, #0
 800afac:	4620      	mov	r0, r4
 800afae:	4629      	mov	r1, r5
 800afb0:	f7f5 fcf2 	bl	8000998 <__aeabi_dcmpeq>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d141      	bne.n	800b03c <pow+0xc4>
 800afb8:	4620      	mov	r0, r4
 800afba:	4629      	mov	r1, r5
 800afbc:	f001 f890 	bl	800c0e0 <finite>
 800afc0:	b328      	cbz	r0, 800b00e <pow+0x96>
 800afc2:	2200      	movs	r2, #0
 800afc4:	2300      	movs	r3, #0
 800afc6:	4620      	mov	r0, r4
 800afc8:	4629      	mov	r1, r5
 800afca:	f7f5 fcef 	bl	80009ac <__aeabi_dcmplt>
 800afce:	b1f0      	cbz	r0, 800b00e <pow+0x96>
 800afd0:	f7ff fb26 	bl	800a620 <__errno>
 800afd4:	2322      	movs	r3, #34	; 0x22
 800afd6:	e019      	b.n	800b00c <pow+0x94>
 800afd8:	4630      	mov	r0, r6
 800afda:	4639      	mov	r1, r7
 800afdc:	f001 f880 	bl	800c0e0 <finite>
 800afe0:	b9c8      	cbnz	r0, 800b016 <pow+0x9e>
 800afe2:	4640      	mov	r0, r8
 800afe4:	4649      	mov	r1, r9
 800afe6:	f001 f87b 	bl	800c0e0 <finite>
 800afea:	b1a0      	cbz	r0, 800b016 <pow+0x9e>
 800afec:	4620      	mov	r0, r4
 800afee:	4629      	mov	r1, r5
 800aff0:	f001 f876 	bl	800c0e0 <finite>
 800aff4:	b178      	cbz	r0, 800b016 <pow+0x9e>
 800aff6:	4632      	mov	r2, r6
 800aff8:	463b      	mov	r3, r7
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	f7f5 fcfd 	bl	80009fc <__aeabi_dcmpun>
 800b002:	2800      	cmp	r0, #0
 800b004:	d0e4      	beq.n	800afd0 <pow+0x58>
 800b006:	f7ff fb0b 	bl	800a620 <__errno>
 800b00a:	2321      	movs	r3, #33	; 0x21
 800b00c:	6003      	str	r3, [r0, #0]
 800b00e:	4630      	mov	r0, r6
 800b010:	4639      	mov	r1, r7
 800b012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b016:	2200      	movs	r2, #0
 800b018:	2300      	movs	r3, #0
 800b01a:	4630      	mov	r0, r6
 800b01c:	4639      	mov	r1, r7
 800b01e:	f7f5 fcbb 	bl	8000998 <__aeabi_dcmpeq>
 800b022:	2800      	cmp	r0, #0
 800b024:	d0f3      	beq.n	800b00e <pow+0x96>
 800b026:	4640      	mov	r0, r8
 800b028:	4649      	mov	r1, r9
 800b02a:	f001 f859 	bl	800c0e0 <finite>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d0ed      	beq.n	800b00e <pow+0x96>
 800b032:	4620      	mov	r0, r4
 800b034:	4629      	mov	r1, r5
 800b036:	f001 f853 	bl	800c0e0 <finite>
 800b03a:	e7c8      	b.n	800afce <pow+0x56>
 800b03c:	2600      	movs	r6, #0
 800b03e:	4f01      	ldr	r7, [pc, #4]	; (800b044 <pow+0xcc>)
 800b040:	e7e5      	b.n	800b00e <pow+0x96>
 800b042:	bf00      	nop
 800b044:	3ff00000 	.word	0x3ff00000

0800b048 <asinf>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4604      	mov	r4, r0
 800b04c:	f000 fdfe 	bl	800bc4c <__ieee754_asinf>
 800b050:	4621      	mov	r1, r4
 800b052:	4605      	mov	r5, r0
 800b054:	4620      	mov	r0, r4
 800b056:	f7f6 f82b 	bl	80010b0 <__aeabi_fcmpun>
 800b05a:	b980      	cbnz	r0, 800b07e <asinf+0x36>
 800b05c:	4620      	mov	r0, r4
 800b05e:	f001 f9d1 	bl	800c404 <fabsf>
 800b062:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b066:	f7f6 f819 	bl	800109c <__aeabi_fcmpgt>
 800b06a:	b140      	cbz	r0, 800b07e <asinf+0x36>
 800b06c:	f7ff fad8 	bl	800a620 <__errno>
 800b070:	2321      	movs	r3, #33	; 0x21
 800b072:	6003      	str	r3, [r0, #0]
 800b074:	4803      	ldr	r0, [pc, #12]	; (800b084 <asinf+0x3c>)
 800b076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b07a:	f001 b9c7 	b.w	800c40c <nanf>
 800b07e:	4628      	mov	r0, r5
 800b080:	bd38      	pop	{r3, r4, r5, pc}
 800b082:	bf00      	nop
 800b084:	0800c69d 	.word	0x0800c69d

0800b088 <atan2f>:
 800b088:	f000 bf24 	b.w	800bed4 <__ieee754_atan2f>

0800b08c <sqrtf>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	4605      	mov	r5, r0
 800b090:	f000 ffa6 	bl	800bfe0 <__ieee754_sqrtf>
 800b094:	4629      	mov	r1, r5
 800b096:	4604      	mov	r4, r0
 800b098:	4628      	mov	r0, r5
 800b09a:	f7f6 f809 	bl	80010b0 <__aeabi_fcmpun>
 800b09e:	b968      	cbnz	r0, 800b0bc <sqrtf+0x30>
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f7f5 ffdc 	bl	8001060 <__aeabi_fcmplt>
 800b0a8:	b140      	cbz	r0, 800b0bc <sqrtf+0x30>
 800b0aa:	f7ff fab9 	bl	800a620 <__errno>
 800b0ae:	2321      	movs	r3, #33	; 0x21
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	6003      	str	r3, [r0, #0]
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	f7f5 fee9 	bl	8000e8c <__aeabi_fdiv>
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4620      	mov	r0, r4
 800b0be:	bd38      	pop	{r3, r4, r5, pc}

0800b0c0 <__ieee754_pow>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	b093      	sub	sp, #76	; 0x4c
 800b0c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0ca:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800b0ce:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b0d2:	4689      	mov	r9, r1
 800b0d4:	ea56 0102 	orrs.w	r1, r6, r2
 800b0d8:	4680      	mov	r8, r0
 800b0da:	d111      	bne.n	800b100 <__ieee754_pow+0x40>
 800b0dc:	1803      	adds	r3, r0, r0
 800b0de:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b0e2:	4152      	adcs	r2, r2
 800b0e4:	4299      	cmp	r1, r3
 800b0e6:	4b82      	ldr	r3, [pc, #520]	; (800b2f0 <__ieee754_pow+0x230>)
 800b0e8:	4193      	sbcs	r3, r2
 800b0ea:	f080 84b9 	bcs.w	800ba60 <__ieee754_pow+0x9a0>
 800b0ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0f2:	4640      	mov	r0, r8
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	f7f5 f831 	bl	800015c <__adddf3>
 800b0fa:	4683      	mov	fp, r0
 800b0fc:	468c      	mov	ip, r1
 800b0fe:	e06f      	b.n	800b1e0 <__ieee754_pow+0x120>
 800b100:	4b7c      	ldr	r3, [pc, #496]	; (800b2f4 <__ieee754_pow+0x234>)
 800b102:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b106:	429c      	cmp	r4, r3
 800b108:	464d      	mov	r5, r9
 800b10a:	4682      	mov	sl, r0
 800b10c:	dc06      	bgt.n	800b11c <__ieee754_pow+0x5c>
 800b10e:	d101      	bne.n	800b114 <__ieee754_pow+0x54>
 800b110:	2800      	cmp	r0, #0
 800b112:	d1ec      	bne.n	800b0ee <__ieee754_pow+0x2e>
 800b114:	429e      	cmp	r6, r3
 800b116:	dc01      	bgt.n	800b11c <__ieee754_pow+0x5c>
 800b118:	d10f      	bne.n	800b13a <__ieee754_pow+0x7a>
 800b11a:	b172      	cbz	r2, 800b13a <__ieee754_pow+0x7a>
 800b11c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b120:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b124:	ea55 050a 	orrs.w	r5, r5, sl
 800b128:	d1e1      	bne.n	800b0ee <__ieee754_pow+0x2e>
 800b12a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b12e:	18db      	adds	r3, r3, r3
 800b130:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b134:	4152      	adcs	r2, r2
 800b136:	429d      	cmp	r5, r3
 800b138:	e7d5      	b.n	800b0e6 <__ieee754_pow+0x26>
 800b13a:	2d00      	cmp	r5, #0
 800b13c:	da39      	bge.n	800b1b2 <__ieee754_pow+0xf2>
 800b13e:	4b6e      	ldr	r3, [pc, #440]	; (800b2f8 <__ieee754_pow+0x238>)
 800b140:	429e      	cmp	r6, r3
 800b142:	dc52      	bgt.n	800b1ea <__ieee754_pow+0x12a>
 800b144:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b148:	429e      	cmp	r6, r3
 800b14a:	f340 849c 	ble.w	800ba86 <__ieee754_pow+0x9c6>
 800b14e:	1533      	asrs	r3, r6, #20
 800b150:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b154:	2b14      	cmp	r3, #20
 800b156:	dd0f      	ble.n	800b178 <__ieee754_pow+0xb8>
 800b158:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b15c:	fa22 f103 	lsr.w	r1, r2, r3
 800b160:	fa01 f303 	lsl.w	r3, r1, r3
 800b164:	4293      	cmp	r3, r2
 800b166:	f040 848e 	bne.w	800ba86 <__ieee754_pow+0x9c6>
 800b16a:	f001 0101 	and.w	r1, r1, #1
 800b16e:	f1c1 0302 	rsb	r3, r1, #2
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	b182      	cbz	r2, 800b198 <__ieee754_pow+0xd8>
 800b176:	e05d      	b.n	800b234 <__ieee754_pow+0x174>
 800b178:	2a00      	cmp	r2, #0
 800b17a:	d159      	bne.n	800b230 <__ieee754_pow+0x170>
 800b17c:	f1c3 0314 	rsb	r3, r3, #20
 800b180:	fa46 f103 	asr.w	r1, r6, r3
 800b184:	fa01 f303 	lsl.w	r3, r1, r3
 800b188:	42b3      	cmp	r3, r6
 800b18a:	f040 8479 	bne.w	800ba80 <__ieee754_pow+0x9c0>
 800b18e:	f001 0101 	and.w	r1, r1, #1
 800b192:	f1c1 0302 	rsb	r3, r1, #2
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	4b58      	ldr	r3, [pc, #352]	; (800b2fc <__ieee754_pow+0x23c>)
 800b19a:	429e      	cmp	r6, r3
 800b19c:	d132      	bne.n	800b204 <__ieee754_pow+0x144>
 800b19e:	2f00      	cmp	r7, #0
 800b1a0:	f280 846a 	bge.w	800ba78 <__ieee754_pow+0x9b8>
 800b1a4:	4642      	mov	r2, r8
 800b1a6:	464b      	mov	r3, r9
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	4954      	ldr	r1, [pc, #336]	; (800b2fc <__ieee754_pow+0x23c>)
 800b1ac:	f7f5 fab6 	bl	800071c <__aeabi_ddiv>
 800b1b0:	e7a3      	b.n	800b0fa <__ieee754_pow+0x3a>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	d13c      	bne.n	800b234 <__ieee754_pow+0x174>
 800b1ba:	4b4e      	ldr	r3, [pc, #312]	; (800b2f4 <__ieee754_pow+0x234>)
 800b1bc:	429e      	cmp	r6, r3
 800b1be:	d1eb      	bne.n	800b198 <__ieee754_pow+0xd8>
 800b1c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b1c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b1c8:	ea53 030a 	orrs.w	r3, r3, sl
 800b1cc:	f000 8448 	beq.w	800ba60 <__ieee754_pow+0x9a0>
 800b1d0:	4b4b      	ldr	r3, [pc, #300]	; (800b300 <__ieee754_pow+0x240>)
 800b1d2:	429c      	cmp	r4, r3
 800b1d4:	dd0b      	ble.n	800b1ee <__ieee754_pow+0x12e>
 800b1d6:	2f00      	cmp	r7, #0
 800b1d8:	f2c0 8448 	blt.w	800ba6c <__ieee754_pow+0x9ac>
 800b1dc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b1e0:	4658      	mov	r0, fp
 800b1e2:	4661      	mov	r1, ip
 800b1e4:	b013      	add	sp, #76	; 0x4c
 800b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	e7e2      	b.n	800b1b4 <__ieee754_pow+0xf4>
 800b1ee:	2f00      	cmp	r7, #0
 800b1f0:	f04f 0b00 	mov.w	fp, #0
 800b1f4:	f04f 0c00 	mov.w	ip, #0
 800b1f8:	daf2      	bge.n	800b1e0 <__ieee754_pow+0x120>
 800b1fa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b1fe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b202:	e7ed      	b.n	800b1e0 <__ieee754_pow+0x120>
 800b204:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b208:	d106      	bne.n	800b218 <__ieee754_pow+0x158>
 800b20a:	4642      	mov	r2, r8
 800b20c:	464b      	mov	r3, r9
 800b20e:	4640      	mov	r0, r8
 800b210:	4649      	mov	r1, r9
 800b212:	f7f5 f959 	bl	80004c8 <__aeabi_dmul>
 800b216:	e770      	b.n	800b0fa <__ieee754_pow+0x3a>
 800b218:	4b3a      	ldr	r3, [pc, #232]	; (800b304 <__ieee754_pow+0x244>)
 800b21a:	429f      	cmp	r7, r3
 800b21c:	d10a      	bne.n	800b234 <__ieee754_pow+0x174>
 800b21e:	2d00      	cmp	r5, #0
 800b220:	db08      	blt.n	800b234 <__ieee754_pow+0x174>
 800b222:	4640      	mov	r0, r8
 800b224:	4649      	mov	r1, r9
 800b226:	b013      	add	sp, #76	; 0x4c
 800b228:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	f000 bc5e 	b.w	800baec <__ieee754_sqrt>
 800b230:	2300      	movs	r3, #0
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	4640      	mov	r0, r8
 800b236:	4649      	mov	r1, r9
 800b238:	f000 ff4f 	bl	800c0da <fabs>
 800b23c:	4683      	mov	fp, r0
 800b23e:	468c      	mov	ip, r1
 800b240:	f1ba 0f00 	cmp.w	sl, #0
 800b244:	d128      	bne.n	800b298 <__ieee754_pow+0x1d8>
 800b246:	b124      	cbz	r4, 800b252 <__ieee754_pow+0x192>
 800b248:	4b2c      	ldr	r3, [pc, #176]	; (800b2fc <__ieee754_pow+0x23c>)
 800b24a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b24e:	429a      	cmp	r2, r3
 800b250:	d122      	bne.n	800b298 <__ieee754_pow+0x1d8>
 800b252:	2f00      	cmp	r7, #0
 800b254:	da07      	bge.n	800b266 <__ieee754_pow+0x1a6>
 800b256:	465a      	mov	r2, fp
 800b258:	4663      	mov	r3, ip
 800b25a:	2000      	movs	r0, #0
 800b25c:	4927      	ldr	r1, [pc, #156]	; (800b2fc <__ieee754_pow+0x23c>)
 800b25e:	f7f5 fa5d 	bl	800071c <__aeabi_ddiv>
 800b262:	4683      	mov	fp, r0
 800b264:	468c      	mov	ip, r1
 800b266:	2d00      	cmp	r5, #0
 800b268:	daba      	bge.n	800b1e0 <__ieee754_pow+0x120>
 800b26a:	9b00      	ldr	r3, [sp, #0]
 800b26c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b270:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b274:	4323      	orrs	r3, r4
 800b276:	d108      	bne.n	800b28a <__ieee754_pow+0x1ca>
 800b278:	465a      	mov	r2, fp
 800b27a:	4663      	mov	r3, ip
 800b27c:	4658      	mov	r0, fp
 800b27e:	4661      	mov	r1, ip
 800b280:	f7f4 ff6a 	bl	8000158 <__aeabi_dsub>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	e790      	b.n	800b1ac <__ieee754_pow+0xec>
 800b28a:	9b00      	ldr	r3, [sp, #0]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d1a7      	bne.n	800b1e0 <__ieee754_pow+0x120>
 800b290:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b294:	469c      	mov	ip, r3
 800b296:	e7a3      	b.n	800b1e0 <__ieee754_pow+0x120>
 800b298:	0feb      	lsrs	r3, r5, #31
 800b29a:	3b01      	subs	r3, #1
 800b29c:	930c      	str	r3, [sp, #48]	; 0x30
 800b29e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2a0:	9b00      	ldr	r3, [sp, #0]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	d104      	bne.n	800b2b0 <__ieee754_pow+0x1f0>
 800b2a6:	4642      	mov	r2, r8
 800b2a8:	464b      	mov	r3, r9
 800b2aa:	4640      	mov	r0, r8
 800b2ac:	4649      	mov	r1, r9
 800b2ae:	e7e7      	b.n	800b280 <__ieee754_pow+0x1c0>
 800b2b0:	4b15      	ldr	r3, [pc, #84]	; (800b308 <__ieee754_pow+0x248>)
 800b2b2:	429e      	cmp	r6, r3
 800b2b4:	f340 80f6 	ble.w	800b4a4 <__ieee754_pow+0x3e4>
 800b2b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b2bc:	429e      	cmp	r6, r3
 800b2be:	4b10      	ldr	r3, [pc, #64]	; (800b300 <__ieee754_pow+0x240>)
 800b2c0:	dd09      	ble.n	800b2d6 <__ieee754_pow+0x216>
 800b2c2:	429c      	cmp	r4, r3
 800b2c4:	dc0c      	bgt.n	800b2e0 <__ieee754_pow+0x220>
 800b2c6:	2f00      	cmp	r7, #0
 800b2c8:	da0c      	bge.n	800b2e4 <__ieee754_pow+0x224>
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	b013      	add	sp, #76	; 0x4c
 800b2ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d2:	f000 befd 	b.w	800c0d0 <__math_oflow>
 800b2d6:	429c      	cmp	r4, r3
 800b2d8:	dbf5      	blt.n	800b2c6 <__ieee754_pow+0x206>
 800b2da:	4b08      	ldr	r3, [pc, #32]	; (800b2fc <__ieee754_pow+0x23c>)
 800b2dc:	429c      	cmp	r4, r3
 800b2de:	dd15      	ble.n	800b30c <__ieee754_pow+0x24c>
 800b2e0:	2f00      	cmp	r7, #0
 800b2e2:	dcf2      	bgt.n	800b2ca <__ieee754_pow+0x20a>
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	b013      	add	sp, #76	; 0x4c
 800b2e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ec:	f000 beeb 	b.w	800c0c6 <__math_uflow>
 800b2f0:	fff00000 	.word	0xfff00000
 800b2f4:	7ff00000 	.word	0x7ff00000
 800b2f8:	433fffff 	.word	0x433fffff
 800b2fc:	3ff00000 	.word	0x3ff00000
 800b300:	3fefffff 	.word	0x3fefffff
 800b304:	3fe00000 	.word	0x3fe00000
 800b308:	41e00000 	.word	0x41e00000
 800b30c:	4661      	mov	r1, ip
 800b30e:	2200      	movs	r2, #0
 800b310:	4658      	mov	r0, fp
 800b312:	4b5f      	ldr	r3, [pc, #380]	; (800b490 <__ieee754_pow+0x3d0>)
 800b314:	f7f4 ff20 	bl	8000158 <__aeabi_dsub>
 800b318:	a355      	add	r3, pc, #340	; (adr r3, 800b470 <__ieee754_pow+0x3b0>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	4604      	mov	r4, r0
 800b320:	460d      	mov	r5, r1
 800b322:	f7f5 f8d1 	bl	80004c8 <__aeabi_dmul>
 800b326:	a354      	add	r3, pc, #336	; (adr r3, 800b478 <__ieee754_pow+0x3b8>)
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	4606      	mov	r6, r0
 800b32e:	460f      	mov	r7, r1
 800b330:	4620      	mov	r0, r4
 800b332:	4629      	mov	r1, r5
 800b334:	f7f5 f8c8 	bl	80004c8 <__aeabi_dmul>
 800b338:	2200      	movs	r2, #0
 800b33a:	4682      	mov	sl, r0
 800b33c:	468b      	mov	fp, r1
 800b33e:	4620      	mov	r0, r4
 800b340:	4629      	mov	r1, r5
 800b342:	4b54      	ldr	r3, [pc, #336]	; (800b494 <__ieee754_pow+0x3d4>)
 800b344:	f7f5 f8c0 	bl	80004c8 <__aeabi_dmul>
 800b348:	4602      	mov	r2, r0
 800b34a:	460b      	mov	r3, r1
 800b34c:	a14c      	add	r1, pc, #304	; (adr r1, 800b480 <__ieee754_pow+0x3c0>)
 800b34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b352:	f7f4 ff01 	bl	8000158 <__aeabi_dsub>
 800b356:	4622      	mov	r2, r4
 800b358:	462b      	mov	r3, r5
 800b35a:	f7f5 f8b5 	bl	80004c8 <__aeabi_dmul>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	2000      	movs	r0, #0
 800b364:	494c      	ldr	r1, [pc, #304]	; (800b498 <__ieee754_pow+0x3d8>)
 800b366:	f7f4 fef7 	bl	8000158 <__aeabi_dsub>
 800b36a:	4622      	mov	r2, r4
 800b36c:	462b      	mov	r3, r5
 800b36e:	4680      	mov	r8, r0
 800b370:	4689      	mov	r9, r1
 800b372:	4620      	mov	r0, r4
 800b374:	4629      	mov	r1, r5
 800b376:	f7f5 f8a7 	bl	80004c8 <__aeabi_dmul>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4640      	mov	r0, r8
 800b380:	4649      	mov	r1, r9
 800b382:	f7f5 f8a1 	bl	80004c8 <__aeabi_dmul>
 800b386:	a340      	add	r3, pc, #256	; (adr r3, 800b488 <__ieee754_pow+0x3c8>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f7f5 f89c 	bl	80004c8 <__aeabi_dmul>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4650      	mov	r0, sl
 800b396:	4659      	mov	r1, fp
 800b398:	f7f4 fede 	bl	8000158 <__aeabi_dsub>
 800b39c:	f04f 0a00 	mov.w	sl, #0
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	460d      	mov	r5, r1
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	f7f4 fed6 	bl	800015c <__adddf3>
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	4650      	mov	r0, sl
 800b3b6:	468b      	mov	fp, r1
 800b3b8:	f7f4 fece 	bl	8000158 <__aeabi_dsub>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	f7f4 fec8 	bl	8000158 <__aeabi_dsub>
 800b3c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b3cc:	9b00      	ldr	r3, [sp, #0]
 800b3ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	f04f 0600 	mov.w	r6, #0
 800b3d8:	f04f 0200 	mov.w	r2, #0
 800b3dc:	bf0c      	ite	eq
 800b3de:	4b2f      	ldreq	r3, [pc, #188]	; (800b49c <__ieee754_pow+0x3dc>)
 800b3e0:	4b2b      	ldrne	r3, [pc, #172]	; (800b490 <__ieee754_pow+0x3d0>)
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	460d      	mov	r5, r1
 800b3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ea:	e9cd 2300 	strd	r2, r3, [sp]
 800b3ee:	4632      	mov	r2, r6
 800b3f0:	463b      	mov	r3, r7
 800b3f2:	f7f4 feb1 	bl	8000158 <__aeabi_dsub>
 800b3f6:	4652      	mov	r2, sl
 800b3f8:	465b      	mov	r3, fp
 800b3fa:	f7f5 f865 	bl	80004c8 <__aeabi_dmul>
 800b3fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b402:	4680      	mov	r8, r0
 800b404:	4689      	mov	r9, r1
 800b406:	4620      	mov	r0, r4
 800b408:	4629      	mov	r1, r5
 800b40a:	f7f5 f85d 	bl	80004c8 <__aeabi_dmul>
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f4 fea1 	bl	800015c <__adddf3>
 800b41a:	4632      	mov	r2, r6
 800b41c:	463b      	mov	r3, r7
 800b41e:	4680      	mov	r8, r0
 800b420:	4689      	mov	r9, r1
 800b422:	4650      	mov	r0, sl
 800b424:	4659      	mov	r1, fp
 800b426:	f7f5 f84f 	bl	80004c8 <__aeabi_dmul>
 800b42a:	4604      	mov	r4, r0
 800b42c:	460d      	mov	r5, r1
 800b42e:	460b      	mov	r3, r1
 800b430:	4602      	mov	r2, r0
 800b432:	4649      	mov	r1, r9
 800b434:	4640      	mov	r0, r8
 800b436:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b43a:	f7f4 fe8f 	bl	800015c <__adddf3>
 800b43e:	4b18      	ldr	r3, [pc, #96]	; (800b4a0 <__ieee754_pow+0x3e0>)
 800b440:	4682      	mov	sl, r0
 800b442:	4299      	cmp	r1, r3
 800b444:	460f      	mov	r7, r1
 800b446:	460e      	mov	r6, r1
 800b448:	f340 82e5 	ble.w	800ba16 <__ieee754_pow+0x956>
 800b44c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b450:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b454:	4303      	orrs	r3, r0
 800b456:	f000 81df 	beq.w	800b818 <__ieee754_pow+0x758>
 800b45a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b45e:	2200      	movs	r2, #0
 800b460:	2300      	movs	r3, #0
 800b462:	f7f5 faa3 	bl	80009ac <__aeabi_dcmplt>
 800b466:	3800      	subs	r0, #0
 800b468:	bf18      	it	ne
 800b46a:	2001      	movne	r0, #1
 800b46c:	e72e      	b.n	800b2cc <__ieee754_pow+0x20c>
 800b46e:	bf00      	nop
 800b470:	60000000 	.word	0x60000000
 800b474:	3ff71547 	.word	0x3ff71547
 800b478:	f85ddf44 	.word	0xf85ddf44
 800b47c:	3e54ae0b 	.word	0x3e54ae0b
 800b480:	55555555 	.word	0x55555555
 800b484:	3fd55555 	.word	0x3fd55555
 800b488:	652b82fe 	.word	0x652b82fe
 800b48c:	3ff71547 	.word	0x3ff71547
 800b490:	3ff00000 	.word	0x3ff00000
 800b494:	3fd00000 	.word	0x3fd00000
 800b498:	3fe00000 	.word	0x3fe00000
 800b49c:	bff00000 	.word	0xbff00000
 800b4a0:	408fffff 	.word	0x408fffff
 800b4a4:	4bd2      	ldr	r3, [pc, #840]	; (800b7f0 <__ieee754_pow+0x730>)
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	402b      	ands	r3, r5
 800b4aa:	b943      	cbnz	r3, 800b4be <__ieee754_pow+0x3fe>
 800b4ac:	4658      	mov	r0, fp
 800b4ae:	4661      	mov	r1, ip
 800b4b0:	4bd0      	ldr	r3, [pc, #832]	; (800b7f4 <__ieee754_pow+0x734>)
 800b4b2:	f7f5 f809 	bl	80004c8 <__aeabi_dmul>
 800b4b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b4ba:	4683      	mov	fp, r0
 800b4bc:	460c      	mov	r4, r1
 800b4be:	1523      	asrs	r3, r4, #20
 800b4c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b4c4:	4413      	add	r3, r2
 800b4c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4c8:	4bcb      	ldr	r3, [pc, #812]	; (800b7f8 <__ieee754_pow+0x738>)
 800b4ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b4ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b4d2:	429c      	cmp	r4, r3
 800b4d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b4d8:	dd08      	ble.n	800b4ec <__ieee754_pow+0x42c>
 800b4da:	4bc8      	ldr	r3, [pc, #800]	; (800b7fc <__ieee754_pow+0x73c>)
 800b4dc:	429c      	cmp	r4, r3
 800b4de:	f340 8199 	ble.w	800b814 <__ieee754_pow+0x754>
 800b4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4e4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4ec:	2600      	movs	r6, #0
 800b4ee:	00f3      	lsls	r3, r6, #3
 800b4f0:	930d      	str	r3, [sp, #52]	; 0x34
 800b4f2:	4bc3      	ldr	r3, [pc, #780]	; (800b800 <__ieee754_pow+0x740>)
 800b4f4:	4658      	mov	r0, fp
 800b4f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4fe:	4629      	mov	r1, r5
 800b500:	461a      	mov	r2, r3
 800b502:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b506:	4623      	mov	r3, r4
 800b508:	f7f4 fe26 	bl	8000158 <__aeabi_dsub>
 800b50c:	46da      	mov	sl, fp
 800b50e:	462b      	mov	r3, r5
 800b510:	4652      	mov	r2, sl
 800b512:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b516:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b51a:	f7f4 fe1f 	bl	800015c <__adddf3>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	2000      	movs	r0, #0
 800b524:	49b7      	ldr	r1, [pc, #732]	; (800b804 <__ieee754_pow+0x744>)
 800b526:	f7f5 f8f9 	bl	800071c <__aeabi_ddiv>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b532:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b536:	f7f4 ffc7 	bl	80004c8 <__aeabi_dmul>
 800b53a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b53e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b542:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b546:	2300      	movs	r3, #0
 800b548:	2200      	movs	r2, #0
 800b54a:	46ab      	mov	fp, r5
 800b54c:	106d      	asrs	r5, r5, #1
 800b54e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b552:	9304      	str	r3, [sp, #16]
 800b554:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b558:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b55c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b560:	4640      	mov	r0, r8
 800b562:	4649      	mov	r1, r9
 800b564:	4614      	mov	r4, r2
 800b566:	461d      	mov	r5, r3
 800b568:	f7f4 ffae 	bl	80004c8 <__aeabi_dmul>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b574:	f7f4 fdf0 	bl	8000158 <__aeabi_dsub>
 800b578:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	4620      	mov	r0, r4
 800b582:	4629      	mov	r1, r5
 800b584:	f7f4 fde8 	bl	8000158 <__aeabi_dsub>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4650      	mov	r0, sl
 800b58e:	4659      	mov	r1, fp
 800b590:	f7f4 fde2 	bl	8000158 <__aeabi_dsub>
 800b594:	4642      	mov	r2, r8
 800b596:	464b      	mov	r3, r9
 800b598:	f7f4 ff96 	bl	80004c8 <__aeabi_dmul>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	f7f4 fdd8 	bl	8000158 <__aeabi_dsub>
 800b5a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5ac:	f7f4 ff8c 	bl	80004c8 <__aeabi_dmul>
 800b5b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	f7f4 ff84 	bl	80004c8 <__aeabi_dmul>
 800b5c0:	a379      	add	r3, pc, #484	; (adr r3, 800b7a8 <__ieee754_pow+0x6e8>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	460d      	mov	r5, r1
 800b5ca:	f7f4 ff7d 	bl	80004c8 <__aeabi_dmul>
 800b5ce:	a378      	add	r3, pc, #480	; (adr r3, 800b7b0 <__ieee754_pow+0x6f0>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f7f4 fdc2 	bl	800015c <__adddf3>
 800b5d8:	4622      	mov	r2, r4
 800b5da:	462b      	mov	r3, r5
 800b5dc:	f7f4 ff74 	bl	80004c8 <__aeabi_dmul>
 800b5e0:	a375      	add	r3, pc, #468	; (adr r3, 800b7b8 <__ieee754_pow+0x6f8>)
 800b5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e6:	f7f4 fdb9 	bl	800015c <__adddf3>
 800b5ea:	4622      	mov	r2, r4
 800b5ec:	462b      	mov	r3, r5
 800b5ee:	f7f4 ff6b 	bl	80004c8 <__aeabi_dmul>
 800b5f2:	a373      	add	r3, pc, #460	; (adr r3, 800b7c0 <__ieee754_pow+0x700>)
 800b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f8:	f7f4 fdb0 	bl	800015c <__adddf3>
 800b5fc:	4622      	mov	r2, r4
 800b5fe:	462b      	mov	r3, r5
 800b600:	f7f4 ff62 	bl	80004c8 <__aeabi_dmul>
 800b604:	a370      	add	r3, pc, #448	; (adr r3, 800b7c8 <__ieee754_pow+0x708>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f7f4 fda7 	bl	800015c <__adddf3>
 800b60e:	4622      	mov	r2, r4
 800b610:	462b      	mov	r3, r5
 800b612:	f7f4 ff59 	bl	80004c8 <__aeabi_dmul>
 800b616:	a36e      	add	r3, pc, #440	; (adr r3, 800b7d0 <__ieee754_pow+0x710>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f7f4 fd9e 	bl	800015c <__adddf3>
 800b620:	4622      	mov	r2, r4
 800b622:	4606      	mov	r6, r0
 800b624:	460f      	mov	r7, r1
 800b626:	462b      	mov	r3, r5
 800b628:	4620      	mov	r0, r4
 800b62a:	4629      	mov	r1, r5
 800b62c:	f7f4 ff4c 	bl	80004c8 <__aeabi_dmul>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4630      	mov	r0, r6
 800b636:	4639      	mov	r1, r7
 800b638:	f7f4 ff46 	bl	80004c8 <__aeabi_dmul>
 800b63c:	4604      	mov	r4, r0
 800b63e:	460d      	mov	r5, r1
 800b640:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b644:	4642      	mov	r2, r8
 800b646:	464b      	mov	r3, r9
 800b648:	f7f4 fd88 	bl	800015c <__adddf3>
 800b64c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b650:	f7f4 ff3a 	bl	80004c8 <__aeabi_dmul>
 800b654:	4622      	mov	r2, r4
 800b656:	462b      	mov	r3, r5
 800b658:	f7f4 fd80 	bl	800015c <__adddf3>
 800b65c:	4642      	mov	r2, r8
 800b65e:	4606      	mov	r6, r0
 800b660:	460f      	mov	r7, r1
 800b662:	464b      	mov	r3, r9
 800b664:	4640      	mov	r0, r8
 800b666:	4649      	mov	r1, r9
 800b668:	f7f4 ff2e 	bl	80004c8 <__aeabi_dmul>
 800b66c:	2200      	movs	r2, #0
 800b66e:	4b66      	ldr	r3, [pc, #408]	; (800b808 <__ieee754_pow+0x748>)
 800b670:	4682      	mov	sl, r0
 800b672:	468b      	mov	fp, r1
 800b674:	f7f4 fd72 	bl	800015c <__adddf3>
 800b678:	4632      	mov	r2, r6
 800b67a:	463b      	mov	r3, r7
 800b67c:	f7f4 fd6e 	bl	800015c <__adddf3>
 800b680:	2400      	movs	r4, #0
 800b682:	460d      	mov	r5, r1
 800b684:	4622      	mov	r2, r4
 800b686:	460b      	mov	r3, r1
 800b688:	4640      	mov	r0, r8
 800b68a:	4649      	mov	r1, r9
 800b68c:	f7f4 ff1c 	bl	80004c8 <__aeabi_dmul>
 800b690:	2200      	movs	r2, #0
 800b692:	4680      	mov	r8, r0
 800b694:	4689      	mov	r9, r1
 800b696:	4620      	mov	r0, r4
 800b698:	4629      	mov	r1, r5
 800b69a:	4b5b      	ldr	r3, [pc, #364]	; (800b808 <__ieee754_pow+0x748>)
 800b69c:	f7f4 fd5c 	bl	8000158 <__aeabi_dsub>
 800b6a0:	4652      	mov	r2, sl
 800b6a2:	465b      	mov	r3, fp
 800b6a4:	f7f4 fd58 	bl	8000158 <__aeabi_dsub>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f7f4 fd52 	bl	8000158 <__aeabi_dsub>
 800b6b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6b8:	f7f4 ff06 	bl	80004c8 <__aeabi_dmul>
 800b6bc:	4622      	mov	r2, r4
 800b6be:	4606      	mov	r6, r0
 800b6c0:	460f      	mov	r7, r1
 800b6c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6c6:	462b      	mov	r3, r5
 800b6c8:	f7f4 fefe 	bl	80004c8 <__aeabi_dmul>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	f7f4 fd42 	bl	800015c <__adddf3>
 800b6d8:	2400      	movs	r4, #0
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460f      	mov	r7, r1
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	4640      	mov	r0, r8
 800b6e4:	4649      	mov	r1, r9
 800b6e6:	f7f4 fd39 	bl	800015c <__adddf3>
 800b6ea:	a33b      	add	r3, pc, #236	; (adr r3, 800b7d8 <__ieee754_pow+0x718>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	f7f4 fee8 	bl	80004c8 <__aeabi_dmul>
 800b6f8:	4642      	mov	r2, r8
 800b6fa:	464b      	mov	r3, r9
 800b6fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b700:	4620      	mov	r0, r4
 800b702:	4629      	mov	r1, r5
 800b704:	f7f4 fd28 	bl	8000158 <__aeabi_dsub>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4630      	mov	r0, r6
 800b70e:	4639      	mov	r1, r7
 800b710:	f7f4 fd22 	bl	8000158 <__aeabi_dsub>
 800b714:	a332      	add	r3, pc, #200	; (adr r3, 800b7e0 <__ieee754_pow+0x720>)
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	f7f4 fed5 	bl	80004c8 <__aeabi_dmul>
 800b71e:	a332      	add	r3, pc, #200	; (adr r3, 800b7e8 <__ieee754_pow+0x728>)
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	4606      	mov	r6, r0
 800b726:	460f      	mov	r7, r1
 800b728:	4620      	mov	r0, r4
 800b72a:	4629      	mov	r1, r5
 800b72c:	f7f4 fecc 	bl	80004c8 <__aeabi_dmul>
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4630      	mov	r0, r6
 800b736:	4639      	mov	r1, r7
 800b738:	f7f4 fd10 	bl	800015c <__adddf3>
 800b73c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b73e:	4b33      	ldr	r3, [pc, #204]	; (800b80c <__ieee754_pow+0x74c>)
 800b740:	f04f 0a00 	mov.w	sl, #0
 800b744:	4413      	add	r3, r2
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fd07 	bl	800015c <__adddf3>
 800b74e:	4680      	mov	r8, r0
 800b750:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b752:	4689      	mov	r9, r1
 800b754:	f7f4 fe4e 	bl	80003f4 <__aeabi_i2d>
 800b758:	4604      	mov	r4, r0
 800b75a:	460d      	mov	r5, r1
 800b75c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b75e:	4b2c      	ldr	r3, [pc, #176]	; (800b810 <__ieee754_pow+0x750>)
 800b760:	4413      	add	r3, r2
 800b762:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b766:	4642      	mov	r2, r8
 800b768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b76c:	464b      	mov	r3, r9
 800b76e:	f7f4 fcf5 	bl	800015c <__adddf3>
 800b772:	4632      	mov	r2, r6
 800b774:	463b      	mov	r3, r7
 800b776:	f7f4 fcf1 	bl	800015c <__adddf3>
 800b77a:	4622      	mov	r2, r4
 800b77c:	462b      	mov	r3, r5
 800b77e:	f7f4 fced 	bl	800015c <__adddf3>
 800b782:	4622      	mov	r2, r4
 800b784:	462b      	mov	r3, r5
 800b786:	4650      	mov	r0, sl
 800b788:	468b      	mov	fp, r1
 800b78a:	f7f4 fce5 	bl	8000158 <__aeabi_dsub>
 800b78e:	4632      	mov	r2, r6
 800b790:	463b      	mov	r3, r7
 800b792:	f7f4 fce1 	bl	8000158 <__aeabi_dsub>
 800b796:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b79a:	f7f4 fcdd 	bl	8000158 <__aeabi_dsub>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	4649      	mov	r1, r9
 800b7a6:	e60d      	b.n	800b3c4 <__ieee754_pow+0x304>
 800b7a8:	4a454eef 	.word	0x4a454eef
 800b7ac:	3fca7e28 	.word	0x3fca7e28
 800b7b0:	93c9db65 	.word	0x93c9db65
 800b7b4:	3fcd864a 	.word	0x3fcd864a
 800b7b8:	a91d4101 	.word	0xa91d4101
 800b7bc:	3fd17460 	.word	0x3fd17460
 800b7c0:	518f264d 	.word	0x518f264d
 800b7c4:	3fd55555 	.word	0x3fd55555
 800b7c8:	db6fabff 	.word	0xdb6fabff
 800b7cc:	3fdb6db6 	.word	0x3fdb6db6
 800b7d0:	33333303 	.word	0x33333303
 800b7d4:	3fe33333 	.word	0x3fe33333
 800b7d8:	e0000000 	.word	0xe0000000
 800b7dc:	3feec709 	.word	0x3feec709
 800b7e0:	dc3a03fd 	.word	0xdc3a03fd
 800b7e4:	3feec709 	.word	0x3feec709
 800b7e8:	145b01f5 	.word	0x145b01f5
 800b7ec:	be3e2fe0 	.word	0xbe3e2fe0
 800b7f0:	7ff00000 	.word	0x7ff00000
 800b7f4:	43400000 	.word	0x43400000
 800b7f8:	0003988e 	.word	0x0003988e
 800b7fc:	000bb679 	.word	0x000bb679
 800b800:	0800c6d0 	.word	0x0800c6d0
 800b804:	3ff00000 	.word	0x3ff00000
 800b808:	40080000 	.word	0x40080000
 800b80c:	0800c6f0 	.word	0x0800c6f0
 800b810:	0800c6e0 	.word	0x0800c6e0
 800b814:	2601      	movs	r6, #1
 800b816:	e66a      	b.n	800b4ee <__ieee754_pow+0x42e>
 800b818:	a39d      	add	r3, pc, #628	; (adr r3, 800ba90 <__ieee754_pow+0x9d0>)
 800b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81e:	4640      	mov	r0, r8
 800b820:	4649      	mov	r1, r9
 800b822:	f7f4 fc9b 	bl	800015c <__adddf3>
 800b826:	4622      	mov	r2, r4
 800b828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b82c:	462b      	mov	r3, r5
 800b82e:	4650      	mov	r0, sl
 800b830:	4639      	mov	r1, r7
 800b832:	f7f4 fc91 	bl	8000158 <__aeabi_dsub>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b83e:	f7f5 f8d3 	bl	80009e8 <__aeabi_dcmpgt>
 800b842:	2800      	cmp	r0, #0
 800b844:	f47f ae09 	bne.w	800b45a <__ieee754_pow+0x39a>
 800b848:	4aa3      	ldr	r2, [pc, #652]	; (800bad8 <__ieee754_pow+0xa18>)
 800b84a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b84e:	4293      	cmp	r3, r2
 800b850:	f340 8101 	ble.w	800ba56 <__ieee754_pow+0x996>
 800b854:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b858:	2000      	movs	r0, #0
 800b85a:	151b      	asrs	r3, r3, #20
 800b85c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b860:	fa4a f303 	asr.w	r3, sl, r3
 800b864:	4433      	add	r3, r6
 800b866:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b86a:	4f9c      	ldr	r7, [pc, #624]	; (800badc <__ieee754_pow+0xa1c>)
 800b86c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b870:	4117      	asrs	r7, r2
 800b872:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b876:	ea23 0107 	bic.w	r1, r3, r7
 800b87a:	f1c2 0214 	rsb	r2, r2, #20
 800b87e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b882:	460b      	mov	r3, r1
 800b884:	fa4a fa02 	asr.w	sl, sl, r2
 800b888:	2e00      	cmp	r6, #0
 800b88a:	4602      	mov	r2, r0
 800b88c:	4629      	mov	r1, r5
 800b88e:	4620      	mov	r0, r4
 800b890:	bfb8      	it	lt
 800b892:	f1ca 0a00 	rsblt	sl, sl, #0
 800b896:	f7f4 fc5f 	bl	8000158 <__aeabi_dsub>
 800b89a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b89e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8a2:	2400      	movs	r4, #0
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	f7f4 fc58 	bl	800015c <__adddf3>
 800b8ac:	a37a      	add	r3, pc, #488	; (adr r3, 800ba98 <__ieee754_pow+0x9d8>)
 800b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	460d      	mov	r5, r1
 800b8b6:	f7f4 fe07 	bl	80004c8 <__aeabi_dmul>
 800b8ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8be:	4606      	mov	r6, r0
 800b8c0:	460f      	mov	r7, r1
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	f7f4 fc47 	bl	8000158 <__aeabi_dsub>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4640      	mov	r0, r8
 800b8d0:	4649      	mov	r1, r9
 800b8d2:	f7f4 fc41 	bl	8000158 <__aeabi_dsub>
 800b8d6:	a372      	add	r3, pc, #456	; (adr r3, 800baa0 <__ieee754_pow+0x9e0>)
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	f7f4 fdf4 	bl	80004c8 <__aeabi_dmul>
 800b8e0:	a371      	add	r3, pc, #452	; (adr r3, 800baa8 <__ieee754_pow+0x9e8>)
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	4680      	mov	r8, r0
 800b8e8:	4689      	mov	r9, r1
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	f7f4 fdeb 	bl	80004c8 <__aeabi_dmul>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	f7f4 fc2f 	bl	800015c <__adddf3>
 800b8fe:	4604      	mov	r4, r0
 800b900:	460d      	mov	r5, r1
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	4630      	mov	r0, r6
 800b908:	4639      	mov	r1, r7
 800b90a:	f7f4 fc27 	bl	800015c <__adddf3>
 800b90e:	4632      	mov	r2, r6
 800b910:	463b      	mov	r3, r7
 800b912:	4680      	mov	r8, r0
 800b914:	4689      	mov	r9, r1
 800b916:	f7f4 fc1f 	bl	8000158 <__aeabi_dsub>
 800b91a:	4602      	mov	r2, r0
 800b91c:	460b      	mov	r3, r1
 800b91e:	4620      	mov	r0, r4
 800b920:	4629      	mov	r1, r5
 800b922:	f7f4 fc19 	bl	8000158 <__aeabi_dsub>
 800b926:	4642      	mov	r2, r8
 800b928:	4606      	mov	r6, r0
 800b92a:	460f      	mov	r7, r1
 800b92c:	464b      	mov	r3, r9
 800b92e:	4640      	mov	r0, r8
 800b930:	4649      	mov	r1, r9
 800b932:	f7f4 fdc9 	bl	80004c8 <__aeabi_dmul>
 800b936:	a35e      	add	r3, pc, #376	; (adr r3, 800bab0 <__ieee754_pow+0x9f0>)
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	4604      	mov	r4, r0
 800b93e:	460d      	mov	r5, r1
 800b940:	f7f4 fdc2 	bl	80004c8 <__aeabi_dmul>
 800b944:	a35c      	add	r3, pc, #368	; (adr r3, 800bab8 <__ieee754_pow+0x9f8>)
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	f7f4 fc05 	bl	8000158 <__aeabi_dsub>
 800b94e:	4622      	mov	r2, r4
 800b950:	462b      	mov	r3, r5
 800b952:	f7f4 fdb9 	bl	80004c8 <__aeabi_dmul>
 800b956:	a35a      	add	r3, pc, #360	; (adr r3, 800bac0 <__ieee754_pow+0xa00>)
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	f7f4 fbfe 	bl	800015c <__adddf3>
 800b960:	4622      	mov	r2, r4
 800b962:	462b      	mov	r3, r5
 800b964:	f7f4 fdb0 	bl	80004c8 <__aeabi_dmul>
 800b968:	a357      	add	r3, pc, #348	; (adr r3, 800bac8 <__ieee754_pow+0xa08>)
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	f7f4 fbf3 	bl	8000158 <__aeabi_dsub>
 800b972:	4622      	mov	r2, r4
 800b974:	462b      	mov	r3, r5
 800b976:	f7f4 fda7 	bl	80004c8 <__aeabi_dmul>
 800b97a:	a355      	add	r3, pc, #340	; (adr r3, 800bad0 <__ieee754_pow+0xa10>)
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	f7f4 fbec 	bl	800015c <__adddf3>
 800b984:	4622      	mov	r2, r4
 800b986:	462b      	mov	r3, r5
 800b988:	f7f4 fd9e 	bl	80004c8 <__aeabi_dmul>
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	4640      	mov	r0, r8
 800b992:	4649      	mov	r1, r9
 800b994:	f7f4 fbe0 	bl	8000158 <__aeabi_dsub>
 800b998:	4604      	mov	r4, r0
 800b99a:	460d      	mov	r5, r1
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	f7f4 fd90 	bl	80004c8 <__aeabi_dmul>
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	f7f4 fbcf 	bl	8000158 <__aeabi_dsub>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9c2:	f7f4 feab 	bl	800071c <__aeabi_ddiv>
 800b9c6:	4632      	mov	r2, r6
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	463b      	mov	r3, r7
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	f7f4 fd79 	bl	80004c8 <__aeabi_dmul>
 800b9d6:	4632      	mov	r2, r6
 800b9d8:	463b      	mov	r3, r7
 800b9da:	f7f4 fbbf 	bl	800015c <__adddf3>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	f7f4 fbb7 	bl	8000158 <__aeabi_dsub>
 800b9ea:	4642      	mov	r2, r8
 800b9ec:	464b      	mov	r3, r9
 800b9ee:	f7f4 fbb3 	bl	8000158 <__aeabi_dsub>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	4939      	ldr	r1, [pc, #228]	; (800bae0 <__ieee754_pow+0xa20>)
 800b9fa:	f7f4 fbad 	bl	8000158 <__aeabi_dsub>
 800b9fe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ba02:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ba06:	da29      	bge.n	800ba5c <__ieee754_pow+0x99c>
 800ba08:	4652      	mov	r2, sl
 800ba0a:	f000 fb71 	bl	800c0f0 <scalbn>
 800ba0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba12:	f7ff bbfe 	b.w	800b212 <__ieee754_pow+0x152>
 800ba16:	4b33      	ldr	r3, [pc, #204]	; (800bae4 <__ieee754_pow+0xa24>)
 800ba18:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ba1c:	429f      	cmp	r7, r3
 800ba1e:	f77f af13 	ble.w	800b848 <__ieee754_pow+0x788>
 800ba22:	4b31      	ldr	r3, [pc, #196]	; (800bae8 <__ieee754_pow+0xa28>)
 800ba24:	440b      	add	r3, r1
 800ba26:	4303      	orrs	r3, r0
 800ba28:	d009      	beq.n	800ba3e <__ieee754_pow+0x97e>
 800ba2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2300      	movs	r3, #0
 800ba32:	f7f4 ffbb 	bl	80009ac <__aeabi_dcmplt>
 800ba36:	3800      	subs	r0, #0
 800ba38:	bf18      	it	ne
 800ba3a:	2001      	movne	r0, #1
 800ba3c:	e453      	b.n	800b2e6 <__ieee754_pow+0x226>
 800ba3e:	4622      	mov	r2, r4
 800ba40:	462b      	mov	r3, r5
 800ba42:	f7f4 fb89 	bl	8000158 <__aeabi_dsub>
 800ba46:	4642      	mov	r2, r8
 800ba48:	464b      	mov	r3, r9
 800ba4a:	f7f4 ffc3 	bl	80009d4 <__aeabi_dcmpge>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f43f aefa 	beq.w	800b848 <__ieee754_pow+0x788>
 800ba54:	e7e9      	b.n	800ba2a <__ieee754_pow+0x96a>
 800ba56:	f04f 0a00 	mov.w	sl, #0
 800ba5a:	e720      	b.n	800b89e <__ieee754_pow+0x7de>
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	e7d6      	b.n	800ba0e <__ieee754_pow+0x94e>
 800ba60:	f04f 0b00 	mov.w	fp, #0
 800ba64:	f8df c078 	ldr.w	ip, [pc, #120]	; 800bae0 <__ieee754_pow+0xa20>
 800ba68:	f7ff bbba 	b.w	800b1e0 <__ieee754_pow+0x120>
 800ba6c:	f04f 0b00 	mov.w	fp, #0
 800ba70:	f04f 0c00 	mov.w	ip, #0
 800ba74:	f7ff bbb4 	b.w	800b1e0 <__ieee754_pow+0x120>
 800ba78:	4640      	mov	r0, r8
 800ba7a:	4649      	mov	r1, r9
 800ba7c:	f7ff bb3d 	b.w	800b0fa <__ieee754_pow+0x3a>
 800ba80:	9200      	str	r2, [sp, #0]
 800ba82:	f7ff bb89 	b.w	800b198 <__ieee754_pow+0xd8>
 800ba86:	2300      	movs	r3, #0
 800ba88:	f7ff bb73 	b.w	800b172 <__ieee754_pow+0xb2>
 800ba8c:	f3af 8000 	nop.w
 800ba90:	652b82fe 	.word	0x652b82fe
 800ba94:	3c971547 	.word	0x3c971547
 800ba98:	00000000 	.word	0x00000000
 800ba9c:	3fe62e43 	.word	0x3fe62e43
 800baa0:	fefa39ef 	.word	0xfefa39ef
 800baa4:	3fe62e42 	.word	0x3fe62e42
 800baa8:	0ca86c39 	.word	0x0ca86c39
 800baac:	be205c61 	.word	0xbe205c61
 800bab0:	72bea4d0 	.word	0x72bea4d0
 800bab4:	3e663769 	.word	0x3e663769
 800bab8:	c5d26bf1 	.word	0xc5d26bf1
 800babc:	3ebbbd41 	.word	0x3ebbbd41
 800bac0:	af25de2c 	.word	0xaf25de2c
 800bac4:	3f11566a 	.word	0x3f11566a
 800bac8:	16bebd93 	.word	0x16bebd93
 800bacc:	3f66c16c 	.word	0x3f66c16c
 800bad0:	5555553e 	.word	0x5555553e
 800bad4:	3fc55555 	.word	0x3fc55555
 800bad8:	3fe00000 	.word	0x3fe00000
 800badc:	000fffff 	.word	0x000fffff
 800bae0:	3ff00000 	.word	0x3ff00000
 800bae4:	4090cbff 	.word	0x4090cbff
 800bae8:	3f6f3400 	.word	0x3f6f3400

0800baec <__ieee754_sqrt>:
 800baec:	f8df c158 	ldr.w	ip, [pc, #344]	; 800bc48 <__ieee754_sqrt+0x15c>
 800baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf4:	ea3c 0c01 	bics.w	ip, ip, r1
 800baf8:	4606      	mov	r6, r0
 800bafa:	460d      	mov	r5, r1
 800bafc:	460c      	mov	r4, r1
 800bafe:	460a      	mov	r2, r1
 800bb00:	4607      	mov	r7, r0
 800bb02:	4603      	mov	r3, r0
 800bb04:	d10f      	bne.n	800bb26 <__ieee754_sqrt+0x3a>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	f7f4 fcdd 	bl	80004c8 <__aeabi_dmul>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4630      	mov	r0, r6
 800bb14:	4629      	mov	r1, r5
 800bb16:	f7f4 fb21 	bl	800015c <__adddf3>
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	460d      	mov	r5, r1
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4629      	mov	r1, r5
 800bb22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb26:	2900      	cmp	r1, #0
 800bb28:	dc0e      	bgt.n	800bb48 <__ieee754_sqrt+0x5c>
 800bb2a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bb2e:	ea5c 0707 	orrs.w	r7, ip, r7
 800bb32:	d0f4      	beq.n	800bb1e <__ieee754_sqrt+0x32>
 800bb34:	b141      	cbz	r1, 800bb48 <__ieee754_sqrt+0x5c>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	f7f4 fb0d 	bl	8000158 <__aeabi_dsub>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	f7f4 fdeb 	bl	800071c <__aeabi_ddiv>
 800bb46:	e7e8      	b.n	800bb1a <__ieee754_sqrt+0x2e>
 800bb48:	1521      	asrs	r1, r4, #20
 800bb4a:	d075      	beq.n	800bc38 <__ieee754_sqrt+0x14c>
 800bb4c:	07cc      	lsls	r4, r1, #31
 800bb4e:	f04f 0400 	mov.w	r4, #0
 800bb52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bb56:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800bb5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bb5e:	bf5e      	ittt	pl
 800bb60:	0fd9      	lsrpl	r1, r3, #31
 800bb62:	005b      	lslpl	r3, r3, #1
 800bb64:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800bb68:	0fd9      	lsrs	r1, r3, #31
 800bb6a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bb6e:	2516      	movs	r5, #22
 800bb70:	4620      	mov	r0, r4
 800bb72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb76:	107f      	asrs	r7, r7, #1
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	1846      	adds	r6, r0, r1
 800bb7c:	4296      	cmp	r6, r2
 800bb7e:	bfde      	ittt	le
 800bb80:	1b92      	suble	r2, r2, r6
 800bb82:	1870      	addle	r0, r6, r1
 800bb84:	1864      	addle	r4, r4, r1
 800bb86:	0052      	lsls	r2, r2, #1
 800bb88:	3d01      	subs	r5, #1
 800bb8a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bb8e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bb92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb96:	d1f0      	bne.n	800bb7a <__ieee754_sqrt+0x8e>
 800bb98:	4629      	mov	r1, r5
 800bb9a:	f04f 0e20 	mov.w	lr, #32
 800bb9e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bba2:	4282      	cmp	r2, r0
 800bba4:	eb06 0c05 	add.w	ip, r6, r5
 800bba8:	dc02      	bgt.n	800bbb0 <__ieee754_sqrt+0xc4>
 800bbaa:	d113      	bne.n	800bbd4 <__ieee754_sqrt+0xe8>
 800bbac:	459c      	cmp	ip, r3
 800bbae:	d811      	bhi.n	800bbd4 <__ieee754_sqrt+0xe8>
 800bbb0:	f1bc 0f00 	cmp.w	ip, #0
 800bbb4:	eb0c 0506 	add.w	r5, ip, r6
 800bbb8:	da43      	bge.n	800bc42 <__ieee754_sqrt+0x156>
 800bbba:	2d00      	cmp	r5, #0
 800bbbc:	db41      	blt.n	800bc42 <__ieee754_sqrt+0x156>
 800bbbe:	f100 0801 	add.w	r8, r0, #1
 800bbc2:	1a12      	subs	r2, r2, r0
 800bbc4:	4640      	mov	r0, r8
 800bbc6:	459c      	cmp	ip, r3
 800bbc8:	bf88      	it	hi
 800bbca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bbce:	eba3 030c 	sub.w	r3, r3, ip
 800bbd2:	4431      	add	r1, r6
 800bbd4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bbd8:	f1be 0e01 	subs.w	lr, lr, #1
 800bbdc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800bbe0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bbe4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bbe8:	d1db      	bne.n	800bba2 <__ieee754_sqrt+0xb6>
 800bbea:	4313      	orrs	r3, r2
 800bbec:	d006      	beq.n	800bbfc <__ieee754_sqrt+0x110>
 800bbee:	1c48      	adds	r0, r1, #1
 800bbf0:	bf0b      	itete	eq
 800bbf2:	4671      	moveq	r1, lr
 800bbf4:	3101      	addne	r1, #1
 800bbf6:	3401      	addeq	r4, #1
 800bbf8:	f021 0101 	bicne.w	r1, r1, #1
 800bbfc:	1063      	asrs	r3, r4, #1
 800bbfe:	0849      	lsrs	r1, r1, #1
 800bc00:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc04:	07e2      	lsls	r2, r4, #31
 800bc06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc0a:	bf48      	it	mi
 800bc0c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bc10:	460e      	mov	r6, r1
 800bc12:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bc16:	e782      	b.n	800bb1e <__ieee754_sqrt+0x32>
 800bc18:	0ada      	lsrs	r2, r3, #11
 800bc1a:	3815      	subs	r0, #21
 800bc1c:	055b      	lsls	r3, r3, #21
 800bc1e:	2a00      	cmp	r2, #0
 800bc20:	d0fa      	beq.n	800bc18 <__ieee754_sqrt+0x12c>
 800bc22:	02d5      	lsls	r5, r2, #11
 800bc24:	d50a      	bpl.n	800bc3c <__ieee754_sqrt+0x150>
 800bc26:	f1c1 0420 	rsb	r4, r1, #32
 800bc2a:	fa23 f404 	lsr.w	r4, r3, r4
 800bc2e:	1e4d      	subs	r5, r1, #1
 800bc30:	408b      	lsls	r3, r1
 800bc32:	4322      	orrs	r2, r4
 800bc34:	1b41      	subs	r1, r0, r5
 800bc36:	e789      	b.n	800bb4c <__ieee754_sqrt+0x60>
 800bc38:	4608      	mov	r0, r1
 800bc3a:	e7f0      	b.n	800bc1e <__ieee754_sqrt+0x132>
 800bc3c:	0052      	lsls	r2, r2, #1
 800bc3e:	3101      	adds	r1, #1
 800bc40:	e7ef      	b.n	800bc22 <__ieee754_sqrt+0x136>
 800bc42:	4680      	mov	r8, r0
 800bc44:	e7bd      	b.n	800bbc2 <__ieee754_sqrt+0xd6>
 800bc46:	bf00      	nop
 800bc48:	7ff00000 	.word	0x7ff00000

0800bc4c <__ieee754_asinf>:
 800bc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc50:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800bc54:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800bc58:	4604      	mov	r4, r0
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	d10c      	bne.n	800bc78 <__ieee754_asinf+0x2c>
 800bc5e:	498d      	ldr	r1, [pc, #564]	; (800be94 <__ieee754_asinf+0x248>)
 800bc60:	f7f5 f860 	bl	8000d24 <__aeabi_fmul>
 800bc64:	498c      	ldr	r1, [pc, #560]	; (800be98 <__ieee754_asinf+0x24c>)
 800bc66:	4605      	mov	r5, r0
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f7f5 f85b 	bl	8000d24 <__aeabi_fmul>
 800bc6e:	4601      	mov	r1, r0
 800bc70:	4628      	mov	r0, r5
 800bc72:	f7f4 ff4f 	bl	8000b14 <__addsf3>
 800bc76:	e006      	b.n	800bc86 <__ieee754_asinf+0x3a>
 800bc78:	dd07      	ble.n	800bc8a <__ieee754_asinf+0x3e>
 800bc7a:	4601      	mov	r1, r0
 800bc7c:	f7f4 ff48 	bl	8000b10 <__aeabi_fsub>
 800bc80:	4601      	mov	r1, r0
 800bc82:	f7f5 f903 	bl	8000e8c <__aeabi_fdiv>
 800bc86:	4604      	mov	r4, r0
 800bc88:	e00e      	b.n	800bca8 <__ieee754_asinf+0x5c>
 800bc8a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800bc8e:	da58      	bge.n	800bd42 <__ieee754_asinf+0xf6>
 800bc90:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800bc94:	da0b      	bge.n	800bcae <__ieee754_asinf+0x62>
 800bc96:	4981      	ldr	r1, [pc, #516]	; (800be9c <__ieee754_asinf+0x250>)
 800bc98:	f7f4 ff3c 	bl	8000b14 <__addsf3>
 800bc9c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bca0:	f7f5 f9fc 	bl	800109c <__aeabi_fcmpgt>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d04c      	beq.n	800bd42 <__ieee754_asinf+0xf6>
 800bca8:	4620      	mov	r0, r4
 800bcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcae:	4601      	mov	r1, r0
 800bcb0:	f7f5 f838 	bl	8000d24 <__aeabi_fmul>
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	497a      	ldr	r1, [pc, #488]	; (800bea0 <__ieee754_asinf+0x254>)
 800bcb8:	f7f5 f834 	bl	8000d24 <__aeabi_fmul>
 800bcbc:	4979      	ldr	r1, [pc, #484]	; (800bea4 <__ieee754_asinf+0x258>)
 800bcbe:	f7f4 ff29 	bl	8000b14 <__addsf3>
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	f7f5 f82e 	bl	8000d24 <__aeabi_fmul>
 800bcc8:	4977      	ldr	r1, [pc, #476]	; (800bea8 <__ieee754_asinf+0x25c>)
 800bcca:	f7f4 ff21 	bl	8000b10 <__aeabi_fsub>
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f5 f828 	bl	8000d24 <__aeabi_fmul>
 800bcd4:	4975      	ldr	r1, [pc, #468]	; (800beac <__ieee754_asinf+0x260>)
 800bcd6:	f7f4 ff1d 	bl	8000b14 <__addsf3>
 800bcda:	4629      	mov	r1, r5
 800bcdc:	f7f5 f822 	bl	8000d24 <__aeabi_fmul>
 800bce0:	4973      	ldr	r1, [pc, #460]	; (800beb0 <__ieee754_asinf+0x264>)
 800bce2:	f7f4 ff15 	bl	8000b10 <__aeabi_fsub>
 800bce6:	4629      	mov	r1, r5
 800bce8:	f7f5 f81c 	bl	8000d24 <__aeabi_fmul>
 800bcec:	4971      	ldr	r1, [pc, #452]	; (800beb4 <__ieee754_asinf+0x268>)
 800bcee:	f7f4 ff11 	bl	8000b14 <__addsf3>
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	f7f5 f816 	bl	8000d24 <__aeabi_fmul>
 800bcf8:	496f      	ldr	r1, [pc, #444]	; (800beb8 <__ieee754_asinf+0x26c>)
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f7f5 f811 	bl	8000d24 <__aeabi_fmul>
 800bd02:	496e      	ldr	r1, [pc, #440]	; (800bebc <__ieee754_asinf+0x270>)
 800bd04:	f7f4 ff04 	bl	8000b10 <__aeabi_fsub>
 800bd08:	4629      	mov	r1, r5
 800bd0a:	f7f5 f80b 	bl	8000d24 <__aeabi_fmul>
 800bd0e:	496c      	ldr	r1, [pc, #432]	; (800bec0 <__ieee754_asinf+0x274>)
 800bd10:	f7f4 ff00 	bl	8000b14 <__addsf3>
 800bd14:	4629      	mov	r1, r5
 800bd16:	f7f5 f805 	bl	8000d24 <__aeabi_fmul>
 800bd1a:	496a      	ldr	r1, [pc, #424]	; (800bec4 <__ieee754_asinf+0x278>)
 800bd1c:	f7f4 fef8 	bl	8000b10 <__aeabi_fsub>
 800bd20:	4629      	mov	r1, r5
 800bd22:	f7f4 ffff 	bl	8000d24 <__aeabi_fmul>
 800bd26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bd2a:	f7f4 fef3 	bl	8000b14 <__addsf3>
 800bd2e:	4601      	mov	r1, r0
 800bd30:	4630      	mov	r0, r6
 800bd32:	f7f5 f8ab 	bl	8000e8c <__aeabi_fdiv>
 800bd36:	4621      	mov	r1, r4
 800bd38:	f7f4 fff4 	bl	8000d24 <__aeabi_fmul>
 800bd3c:	4601      	mov	r1, r0
 800bd3e:	4620      	mov	r0, r4
 800bd40:	e797      	b.n	800bc72 <__ieee754_asinf+0x26>
 800bd42:	4620      	mov	r0, r4
 800bd44:	f000 fb5e 	bl	800c404 <fabsf>
 800bd48:	4601      	mov	r1, r0
 800bd4a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bd4e:	f7f4 fedf 	bl	8000b10 <__aeabi_fsub>
 800bd52:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bd56:	f7f4 ffe5 	bl	8000d24 <__aeabi_fmul>
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	4950      	ldr	r1, [pc, #320]	; (800bea0 <__ieee754_asinf+0x254>)
 800bd5e:	f7f4 ffe1 	bl	8000d24 <__aeabi_fmul>
 800bd62:	4950      	ldr	r1, [pc, #320]	; (800bea4 <__ieee754_asinf+0x258>)
 800bd64:	f7f4 fed6 	bl	8000b14 <__addsf3>
 800bd68:	4631      	mov	r1, r6
 800bd6a:	f7f4 ffdb 	bl	8000d24 <__aeabi_fmul>
 800bd6e:	494e      	ldr	r1, [pc, #312]	; (800bea8 <__ieee754_asinf+0x25c>)
 800bd70:	f7f4 fece 	bl	8000b10 <__aeabi_fsub>
 800bd74:	4631      	mov	r1, r6
 800bd76:	f7f4 ffd5 	bl	8000d24 <__aeabi_fmul>
 800bd7a:	494c      	ldr	r1, [pc, #304]	; (800beac <__ieee754_asinf+0x260>)
 800bd7c:	f7f4 feca 	bl	8000b14 <__addsf3>
 800bd80:	4631      	mov	r1, r6
 800bd82:	f7f4 ffcf 	bl	8000d24 <__aeabi_fmul>
 800bd86:	494a      	ldr	r1, [pc, #296]	; (800beb0 <__ieee754_asinf+0x264>)
 800bd88:	f7f4 fec2 	bl	8000b10 <__aeabi_fsub>
 800bd8c:	4631      	mov	r1, r6
 800bd8e:	f7f4 ffc9 	bl	8000d24 <__aeabi_fmul>
 800bd92:	4948      	ldr	r1, [pc, #288]	; (800beb4 <__ieee754_asinf+0x268>)
 800bd94:	f7f4 febe 	bl	8000b14 <__addsf3>
 800bd98:	4631      	mov	r1, r6
 800bd9a:	f7f4 ffc3 	bl	8000d24 <__aeabi_fmul>
 800bd9e:	4946      	ldr	r1, [pc, #280]	; (800beb8 <__ieee754_asinf+0x26c>)
 800bda0:	4681      	mov	r9, r0
 800bda2:	4630      	mov	r0, r6
 800bda4:	f7f4 ffbe 	bl	8000d24 <__aeabi_fmul>
 800bda8:	4944      	ldr	r1, [pc, #272]	; (800bebc <__ieee754_asinf+0x270>)
 800bdaa:	f7f4 feb1 	bl	8000b10 <__aeabi_fsub>
 800bdae:	4631      	mov	r1, r6
 800bdb0:	f7f4 ffb8 	bl	8000d24 <__aeabi_fmul>
 800bdb4:	4942      	ldr	r1, [pc, #264]	; (800bec0 <__ieee754_asinf+0x274>)
 800bdb6:	f7f4 fead 	bl	8000b14 <__addsf3>
 800bdba:	4631      	mov	r1, r6
 800bdbc:	f7f4 ffb2 	bl	8000d24 <__aeabi_fmul>
 800bdc0:	4940      	ldr	r1, [pc, #256]	; (800bec4 <__ieee754_asinf+0x278>)
 800bdc2:	f7f4 fea5 	bl	8000b10 <__aeabi_fsub>
 800bdc6:	4631      	mov	r1, r6
 800bdc8:	f7f4 ffac 	bl	8000d24 <__aeabi_fmul>
 800bdcc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bdd0:	f7f4 fea0 	bl	8000b14 <__addsf3>
 800bdd4:	4682      	mov	sl, r0
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f000 f902 	bl	800bfe0 <__ieee754_sqrtf>
 800bddc:	4b3a      	ldr	r3, [pc, #232]	; (800bec8 <__ieee754_asinf+0x27c>)
 800bdde:	4607      	mov	r7, r0
 800bde0:	4598      	cmp	r8, r3
 800bde2:	dd1a      	ble.n	800be1a <__ieee754_asinf+0x1ce>
 800bde4:	4651      	mov	r1, sl
 800bde6:	4648      	mov	r0, r9
 800bde8:	f7f5 f850 	bl	8000e8c <__aeabi_fdiv>
 800bdec:	4639      	mov	r1, r7
 800bdee:	f7f4 ff99 	bl	8000d24 <__aeabi_fmul>
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 fe8e 	bl	8000b14 <__addsf3>
 800bdf8:	4601      	mov	r1, r0
 800bdfa:	f7f4 fe8b 	bl	8000b14 <__addsf3>
 800bdfe:	4933      	ldr	r1, [pc, #204]	; (800becc <__ieee754_asinf+0x280>)
 800be00:	f7f4 fe88 	bl	8000b14 <__addsf3>
 800be04:	4601      	mov	r1, r0
 800be06:	4823      	ldr	r0, [pc, #140]	; (800be94 <__ieee754_asinf+0x248>)
 800be08:	f7f4 fe82 	bl	8000b10 <__aeabi_fsub>
 800be0c:	2d00      	cmp	r5, #0
 800be0e:	4604      	mov	r4, r0
 800be10:	f73f af4a 	bgt.w	800bca8 <__ieee754_asinf+0x5c>
 800be14:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800be18:	e735      	b.n	800bc86 <__ieee754_asinf+0x3a>
 800be1a:	4601      	mov	r1, r0
 800be1c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800be20:	f7f4 fe78 	bl	8000b14 <__addsf3>
 800be24:	4651      	mov	r1, sl
 800be26:	4604      	mov	r4, r0
 800be28:	4648      	mov	r0, r9
 800be2a:	f7f5 f82f 	bl	8000e8c <__aeabi_fdiv>
 800be2e:	4601      	mov	r1, r0
 800be30:	4620      	mov	r0, r4
 800be32:	f7f4 ff77 	bl	8000d24 <__aeabi_fmul>
 800be36:	f028 080f 	bic.w	r8, r8, #15
 800be3a:	4681      	mov	r9, r0
 800be3c:	4641      	mov	r1, r8
 800be3e:	4640      	mov	r0, r8
 800be40:	f7f4 ff70 	bl	8000d24 <__aeabi_fmul>
 800be44:	4601      	mov	r1, r0
 800be46:	4630      	mov	r0, r6
 800be48:	f7f4 fe62 	bl	8000b10 <__aeabi_fsub>
 800be4c:	4641      	mov	r1, r8
 800be4e:	4604      	mov	r4, r0
 800be50:	4638      	mov	r0, r7
 800be52:	f7f4 fe5f 	bl	8000b14 <__addsf3>
 800be56:	4601      	mov	r1, r0
 800be58:	4620      	mov	r0, r4
 800be5a:	f7f5 f817 	bl	8000e8c <__aeabi_fdiv>
 800be5e:	4601      	mov	r1, r0
 800be60:	f7f4 fe58 	bl	8000b14 <__addsf3>
 800be64:	4601      	mov	r1, r0
 800be66:	480c      	ldr	r0, [pc, #48]	; (800be98 <__ieee754_asinf+0x24c>)
 800be68:	f7f4 fe52 	bl	8000b10 <__aeabi_fsub>
 800be6c:	4601      	mov	r1, r0
 800be6e:	4648      	mov	r0, r9
 800be70:	f7f4 fe4e 	bl	8000b10 <__aeabi_fsub>
 800be74:	4641      	mov	r1, r8
 800be76:	4604      	mov	r4, r0
 800be78:	4640      	mov	r0, r8
 800be7a:	f7f4 fe4b 	bl	8000b14 <__addsf3>
 800be7e:	4601      	mov	r1, r0
 800be80:	4813      	ldr	r0, [pc, #76]	; (800bed0 <__ieee754_asinf+0x284>)
 800be82:	f7f4 fe45 	bl	8000b10 <__aeabi_fsub>
 800be86:	4601      	mov	r1, r0
 800be88:	4620      	mov	r0, r4
 800be8a:	f7f4 fe41 	bl	8000b10 <__aeabi_fsub>
 800be8e:	4601      	mov	r1, r0
 800be90:	480f      	ldr	r0, [pc, #60]	; (800bed0 <__ieee754_asinf+0x284>)
 800be92:	e7b9      	b.n	800be08 <__ieee754_asinf+0x1bc>
 800be94:	3fc90fdb 	.word	0x3fc90fdb
 800be98:	b33bbd2e 	.word	0xb33bbd2e
 800be9c:	7149f2ca 	.word	0x7149f2ca
 800bea0:	3811ef08 	.word	0x3811ef08
 800bea4:	3a4f7f04 	.word	0x3a4f7f04
 800bea8:	3d241146 	.word	0x3d241146
 800beac:	3e4e0aa8 	.word	0x3e4e0aa8
 800beb0:	3ea6b090 	.word	0x3ea6b090
 800beb4:	3e2aaaab 	.word	0x3e2aaaab
 800beb8:	3d9dc62e 	.word	0x3d9dc62e
 800bebc:	3f303361 	.word	0x3f303361
 800bec0:	4001572d 	.word	0x4001572d
 800bec4:	4019d139 	.word	0x4019d139
 800bec8:	3f799999 	.word	0x3f799999
 800becc:	333bbd2e 	.word	0x333bbd2e
 800bed0:	3f490fdb 	.word	0x3f490fdb

0800bed4 <__ieee754_atan2f>:
 800bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800beda:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800bede:	4603      	mov	r3, r0
 800bee0:	dc05      	bgt.n	800beee <__ieee754_atan2f+0x1a>
 800bee2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800bee6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800beea:	4607      	mov	r7, r0
 800beec:	dd04      	ble.n	800bef8 <__ieee754_atan2f+0x24>
 800beee:	4618      	mov	r0, r3
 800bef0:	f7f4 fe10 	bl	8000b14 <__addsf3>
 800bef4:	4603      	mov	r3, r0
 800bef6:	e011      	b.n	800bf1c <__ieee754_atan2f+0x48>
 800bef8:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800befc:	d103      	bne.n	800bf06 <__ieee754_atan2f+0x32>
 800befe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf02:	f000 b973 	b.w	800c1ec <atanf>
 800bf06:	178c      	asrs	r4, r1, #30
 800bf08:	f004 0402 	and.w	r4, r4, #2
 800bf0c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bf10:	b932      	cbnz	r2, 800bf20 <__ieee754_atan2f+0x4c>
 800bf12:	2c02      	cmp	r4, #2
 800bf14:	d04c      	beq.n	800bfb0 <__ieee754_atan2f+0xdc>
 800bf16:	2c03      	cmp	r4, #3
 800bf18:	d100      	bne.n	800bf1c <__ieee754_atan2f+0x48>
 800bf1a:	4b29      	ldr	r3, [pc, #164]	; (800bfc0 <__ieee754_atan2f+0xec>)
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf20:	b91e      	cbnz	r6, 800bf2a <__ieee754_atan2f+0x56>
 800bf22:	2f00      	cmp	r7, #0
 800bf24:	da4a      	bge.n	800bfbc <__ieee754_atan2f+0xe8>
 800bf26:	4b27      	ldr	r3, [pc, #156]	; (800bfc4 <__ieee754_atan2f+0xf0>)
 800bf28:	e7f8      	b.n	800bf1c <__ieee754_atan2f+0x48>
 800bf2a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800bf2e:	d10e      	bne.n	800bf4e <__ieee754_atan2f+0x7a>
 800bf30:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bf34:	f104 34ff 	add.w	r4, r4, #4294967295
 800bf38:	d105      	bne.n	800bf46 <__ieee754_atan2f+0x72>
 800bf3a:	2c02      	cmp	r4, #2
 800bf3c:	d83a      	bhi.n	800bfb4 <__ieee754_atan2f+0xe0>
 800bf3e:	4b22      	ldr	r3, [pc, #136]	; (800bfc8 <__ieee754_atan2f+0xf4>)
 800bf40:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bf44:	e7ea      	b.n	800bf1c <__ieee754_atan2f+0x48>
 800bf46:	2c02      	cmp	r4, #2
 800bf48:	d836      	bhi.n	800bfb8 <__ieee754_atan2f+0xe4>
 800bf4a:	4b20      	ldr	r3, [pc, #128]	; (800bfcc <__ieee754_atan2f+0xf8>)
 800bf4c:	e7f8      	b.n	800bf40 <__ieee754_atan2f+0x6c>
 800bf4e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bf52:	d0e6      	beq.n	800bf22 <__ieee754_atan2f+0x4e>
 800bf54:	1b92      	subs	r2, r2, r6
 800bf56:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800bf5a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800bf5e:	da17      	bge.n	800bf90 <__ieee754_atan2f+0xbc>
 800bf60:	2900      	cmp	r1, #0
 800bf62:	da01      	bge.n	800bf68 <__ieee754_atan2f+0x94>
 800bf64:	303c      	adds	r0, #60	; 0x3c
 800bf66:	db15      	blt.n	800bf94 <__ieee754_atan2f+0xc0>
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7f4 ff8f 	bl	8000e8c <__aeabi_fdiv>
 800bf6e:	f000 fa49 	bl	800c404 <fabsf>
 800bf72:	f000 f93b 	bl	800c1ec <atanf>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2c01      	cmp	r4, #1
 800bf7a:	d00d      	beq.n	800bf98 <__ieee754_atan2f+0xc4>
 800bf7c:	2c02      	cmp	r4, #2
 800bf7e:	d00e      	beq.n	800bf9e <__ieee754_atan2f+0xca>
 800bf80:	2c00      	cmp	r4, #0
 800bf82:	d0cb      	beq.n	800bf1c <__ieee754_atan2f+0x48>
 800bf84:	4912      	ldr	r1, [pc, #72]	; (800bfd0 <__ieee754_atan2f+0xfc>)
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f4 fdc4 	bl	8000b14 <__addsf3>
 800bf8c:	4911      	ldr	r1, [pc, #68]	; (800bfd4 <__ieee754_atan2f+0x100>)
 800bf8e:	e00c      	b.n	800bfaa <__ieee754_atan2f+0xd6>
 800bf90:	4b11      	ldr	r3, [pc, #68]	; (800bfd8 <__ieee754_atan2f+0x104>)
 800bf92:	e7f1      	b.n	800bf78 <__ieee754_atan2f+0xa4>
 800bf94:	2300      	movs	r3, #0
 800bf96:	e7ef      	b.n	800bf78 <__ieee754_atan2f+0xa4>
 800bf98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf9c:	e7be      	b.n	800bf1c <__ieee754_atan2f+0x48>
 800bf9e:	490c      	ldr	r1, [pc, #48]	; (800bfd0 <__ieee754_atan2f+0xfc>)
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7f4 fdb7 	bl	8000b14 <__addsf3>
 800bfa6:	4601      	mov	r1, r0
 800bfa8:	480a      	ldr	r0, [pc, #40]	; (800bfd4 <__ieee754_atan2f+0x100>)
 800bfaa:	f7f4 fdb1 	bl	8000b10 <__aeabi_fsub>
 800bfae:	e7a1      	b.n	800bef4 <__ieee754_atan2f+0x20>
 800bfb0:	4b08      	ldr	r3, [pc, #32]	; (800bfd4 <__ieee754_atan2f+0x100>)
 800bfb2:	e7b3      	b.n	800bf1c <__ieee754_atan2f+0x48>
 800bfb4:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <__ieee754_atan2f+0x108>)
 800bfb6:	e7b1      	b.n	800bf1c <__ieee754_atan2f+0x48>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	e7af      	b.n	800bf1c <__ieee754_atan2f+0x48>
 800bfbc:	4b06      	ldr	r3, [pc, #24]	; (800bfd8 <__ieee754_atan2f+0x104>)
 800bfbe:	e7ad      	b.n	800bf1c <__ieee754_atan2f+0x48>
 800bfc0:	c0490fdb 	.word	0xc0490fdb
 800bfc4:	bfc90fdb 	.word	0xbfc90fdb
 800bfc8:	0800c700 	.word	0x0800c700
 800bfcc:	0800c70c 	.word	0x0800c70c
 800bfd0:	33bbbd2e 	.word	0x33bbbd2e
 800bfd4:	40490fdb 	.word	0x40490fdb
 800bfd8:	3fc90fdb 	.word	0x3fc90fdb
 800bfdc:	3f490fdb 	.word	0x3f490fdb

0800bfe0 <__ieee754_sqrtf>:
 800bfe0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800bfe4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bfe8:	b570      	push	{r4, r5, r6, lr}
 800bfea:	4603      	mov	r3, r0
 800bfec:	4604      	mov	r4, r0
 800bfee:	d309      	bcc.n	800c004 <__ieee754_sqrtf+0x24>
 800bff0:	4601      	mov	r1, r0
 800bff2:	f7f4 fe97 	bl	8000d24 <__aeabi_fmul>
 800bff6:	4601      	mov	r1, r0
 800bff8:	4620      	mov	r0, r4
 800bffa:	f7f4 fd8b 	bl	8000b14 <__addsf3>
 800bffe:	4604      	mov	r4, r0
 800c000:	4620      	mov	r0, r4
 800c002:	bd70      	pop	{r4, r5, r6, pc}
 800c004:	2a00      	cmp	r2, #0
 800c006:	d0fb      	beq.n	800c000 <__ieee754_sqrtf+0x20>
 800c008:	2800      	cmp	r0, #0
 800c00a:	da06      	bge.n	800c01a <__ieee754_sqrtf+0x3a>
 800c00c:	4601      	mov	r1, r0
 800c00e:	f7f4 fd7f 	bl	8000b10 <__aeabi_fsub>
 800c012:	4601      	mov	r1, r0
 800c014:	f7f4 ff3a 	bl	8000e8c <__aeabi_fdiv>
 800c018:	e7f1      	b.n	800bffe <__ieee754_sqrtf+0x1e>
 800c01a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800c01e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800c022:	d029      	beq.n	800c078 <__ieee754_sqrtf+0x98>
 800c024:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800c028:	07cb      	lsls	r3, r1, #31
 800c02a:	f04f 0300 	mov.w	r3, #0
 800c02e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800c032:	f04f 0419 	mov.w	r4, #25
 800c036:	461e      	mov	r6, r3
 800c038:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c03c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c040:	bf58      	it	pl
 800c042:	0052      	lslpl	r2, r2, #1
 800c044:	1040      	asrs	r0, r0, #1
 800c046:	0052      	lsls	r2, r2, #1
 800c048:	1875      	adds	r5, r6, r1
 800c04a:	4295      	cmp	r5, r2
 800c04c:	bfde      	ittt	le
 800c04e:	186e      	addle	r6, r5, r1
 800c050:	1b52      	suble	r2, r2, r5
 800c052:	185b      	addle	r3, r3, r1
 800c054:	3c01      	subs	r4, #1
 800c056:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c05a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c05e:	d1f3      	bne.n	800c048 <__ieee754_sqrtf+0x68>
 800c060:	b112      	cbz	r2, 800c068 <__ieee754_sqrtf+0x88>
 800c062:	3301      	adds	r3, #1
 800c064:	f023 0301 	bic.w	r3, r3, #1
 800c068:	105c      	asrs	r4, r3, #1
 800c06a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c06e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800c072:	e7c5      	b.n	800c000 <__ieee754_sqrtf+0x20>
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	3201      	adds	r2, #1
 800c078:	0218      	lsls	r0, r3, #8
 800c07a:	d5fb      	bpl.n	800c074 <__ieee754_sqrtf+0x94>
 800c07c:	3a01      	subs	r2, #1
 800c07e:	1a89      	subs	r1, r1, r2
 800c080:	e7d0      	b.n	800c024 <__ieee754_sqrtf+0x44>

0800c082 <with_errno>:
 800c082:	b570      	push	{r4, r5, r6, lr}
 800c084:	4604      	mov	r4, r0
 800c086:	460d      	mov	r5, r1
 800c088:	4616      	mov	r6, r2
 800c08a:	f7fe fac9 	bl	800a620 <__errno>
 800c08e:	4629      	mov	r1, r5
 800c090:	6006      	str	r6, [r0, #0]
 800c092:	4620      	mov	r0, r4
 800c094:	bd70      	pop	{r4, r5, r6, pc}

0800c096 <xflow>:
 800c096:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c098:	4615      	mov	r5, r2
 800c09a:	461c      	mov	r4, r3
 800c09c:	b180      	cbz	r0, 800c0c0 <xflow+0x2a>
 800c09e:	4610      	mov	r0, r2
 800c0a0:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c0a4:	e9cd 0100 	strd	r0, r1, [sp]
 800c0a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	f7f4 fa0a 	bl	80004c8 <__aeabi_dmul>
 800c0b4:	2222      	movs	r2, #34	; 0x22
 800c0b6:	b003      	add	sp, #12
 800c0b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0bc:	f7ff bfe1 	b.w	800c082 <with_errno>
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	e7ee      	b.n	800c0a4 <xflow+0xe>

0800c0c6 <__math_uflow>:
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c0cc:	f7ff bfe3 	b.w	800c096 <xflow>

0800c0d0 <__math_oflow>:
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c0d6:	f7ff bfde 	b.w	800c096 <xflow>

0800c0da <fabs>:
 800c0da:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c0de:	4770      	bx	lr

0800c0e0 <finite>:
 800c0e0:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800c0e4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c0e8:	0fc0      	lsrs	r0, r0, #31
 800c0ea:	4770      	bx	lr
 800c0ec:	0000      	movs	r0, r0
	...

0800c0f0 <scalbn>:
 800c0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	460d      	mov	r5, r1
 800c0fa:	4617      	mov	r7, r2
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	b996      	cbnz	r6, 800c126 <scalbn+0x36>
 800c100:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c104:	4303      	orrs	r3, r0
 800c106:	d039      	beq.n	800c17c <scalbn+0x8c>
 800c108:	4b33      	ldr	r3, [pc, #204]	; (800c1d8 <scalbn+0xe8>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	f7f4 f9dc 	bl	80004c8 <__aeabi_dmul>
 800c110:	4b32      	ldr	r3, [pc, #200]	; (800c1dc <scalbn+0xec>)
 800c112:	4604      	mov	r4, r0
 800c114:	429f      	cmp	r7, r3
 800c116:	460d      	mov	r5, r1
 800c118:	da0f      	bge.n	800c13a <scalbn+0x4a>
 800c11a:	a32b      	add	r3, pc, #172	; (adr r3, 800c1c8 <scalbn+0xd8>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f7f4 f9d2 	bl	80004c8 <__aeabi_dmul>
 800c124:	e006      	b.n	800c134 <scalbn+0x44>
 800c126:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c12a:	4296      	cmp	r6, r2
 800c12c:	d10a      	bne.n	800c144 <scalbn+0x54>
 800c12e:	4602      	mov	r2, r0
 800c130:	f7f4 f814 	bl	800015c <__adddf3>
 800c134:	4604      	mov	r4, r0
 800c136:	460d      	mov	r5, r1
 800c138:	e020      	b.n	800c17c <scalbn+0x8c>
 800c13a:	460b      	mov	r3, r1
 800c13c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c140:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c144:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c148:	19b9      	adds	r1, r7, r6
 800c14a:	4291      	cmp	r1, r2
 800c14c:	dd0e      	ble.n	800c16c <scalbn+0x7c>
 800c14e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c152:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c156:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c15a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c15e:	4820      	ldr	r0, [pc, #128]	; (800c1e0 <scalbn+0xf0>)
 800c160:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c164:	a31a      	add	r3, pc, #104	; (adr r3, 800c1d0 <scalbn+0xe0>)
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	e7d9      	b.n	800c120 <scalbn+0x30>
 800c16c:	2900      	cmp	r1, #0
 800c16e:	dd08      	ble.n	800c182 <scalbn+0x92>
 800c170:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c174:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c178:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c17c:	4620      	mov	r0, r4
 800c17e:	4629      	mov	r1, r5
 800c180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c182:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c186:	da12      	bge.n	800c1ae <scalbn+0xbe>
 800c188:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c18c:	429f      	cmp	r7, r3
 800c18e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c192:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c196:	dcdc      	bgt.n	800c152 <scalbn+0x62>
 800c198:	a30b      	add	r3, pc, #44	; (adr r3, 800c1c8 <scalbn+0xd8>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c1a2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c1a6:	480f      	ldr	r0, [pc, #60]	; (800c1e4 <scalbn+0xf4>)
 800c1a8:	f041 011f 	orr.w	r1, r1, #31
 800c1ac:	e7b8      	b.n	800c120 <scalbn+0x30>
 800c1ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1b2:	3136      	adds	r1, #54	; 0x36
 800c1b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4b09      	ldr	r3, [pc, #36]	; (800c1e8 <scalbn+0xf8>)
 800c1c4:	e7ac      	b.n	800c120 <scalbn+0x30>
 800c1c6:	bf00      	nop
 800c1c8:	c2f8f359 	.word	0xc2f8f359
 800c1cc:	01a56e1f 	.word	0x01a56e1f
 800c1d0:	8800759c 	.word	0x8800759c
 800c1d4:	7e37e43c 	.word	0x7e37e43c
 800c1d8:	43500000 	.word	0x43500000
 800c1dc:	ffff3cb0 	.word	0xffff3cb0
 800c1e0:	8800759c 	.word	0x8800759c
 800c1e4:	c2f8f359 	.word	0xc2f8f359
 800c1e8:	3c900000 	.word	0x3c900000

0800c1ec <atanf>:
 800c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c1f4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	4680      	mov	r8, r0
 800c1fc:	db0e      	blt.n	800c21c <atanf+0x30>
 800c1fe:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c202:	dd04      	ble.n	800c20e <atanf+0x22>
 800c204:	4601      	mov	r1, r0
 800c206:	f7f4 fc85 	bl	8000b14 <__addsf3>
 800c20a:	4604      	mov	r4, r0
 800c20c:	e003      	b.n	800c216 <atanf+0x2a>
 800c20e:	2800      	cmp	r0, #0
 800c210:	f300 80ce 	bgt.w	800c3b0 <atanf+0x1c4>
 800c214:	4c67      	ldr	r4, [pc, #412]	; (800c3b4 <atanf+0x1c8>)
 800c216:	4620      	mov	r0, r4
 800c218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c21c:	4b66      	ldr	r3, [pc, #408]	; (800c3b8 <atanf+0x1cc>)
 800c21e:	429d      	cmp	r5, r3
 800c220:	dc0e      	bgt.n	800c240 <atanf+0x54>
 800c222:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c226:	da08      	bge.n	800c23a <atanf+0x4e>
 800c228:	4964      	ldr	r1, [pc, #400]	; (800c3bc <atanf+0x1d0>)
 800c22a:	f7f4 fc73 	bl	8000b14 <__addsf3>
 800c22e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c232:	f7f4 ff33 	bl	800109c <__aeabi_fcmpgt>
 800c236:	2800      	cmp	r0, #0
 800c238:	d1ed      	bne.n	800c216 <atanf+0x2a>
 800c23a:	f04f 36ff 	mov.w	r6, #4294967295
 800c23e:	e01c      	b.n	800c27a <atanf+0x8e>
 800c240:	f000 f8e0 	bl	800c404 <fabsf>
 800c244:	4b5e      	ldr	r3, [pc, #376]	; (800c3c0 <atanf+0x1d4>)
 800c246:	4604      	mov	r4, r0
 800c248:	429d      	cmp	r5, r3
 800c24a:	dc7c      	bgt.n	800c346 <atanf+0x15a>
 800c24c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c250:	429d      	cmp	r5, r3
 800c252:	dc67      	bgt.n	800c324 <atanf+0x138>
 800c254:	4601      	mov	r1, r0
 800c256:	f7f4 fc5d 	bl	8000b14 <__addsf3>
 800c25a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c25e:	f7f4 fc57 	bl	8000b10 <__aeabi_fsub>
 800c262:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c266:	4605      	mov	r5, r0
 800c268:	4620      	mov	r0, r4
 800c26a:	f7f4 fc53 	bl	8000b14 <__addsf3>
 800c26e:	4601      	mov	r1, r0
 800c270:	4628      	mov	r0, r5
 800c272:	f7f4 fe0b 	bl	8000e8c <__aeabi_fdiv>
 800c276:	2600      	movs	r6, #0
 800c278:	4604      	mov	r4, r0
 800c27a:	4621      	mov	r1, r4
 800c27c:	4620      	mov	r0, r4
 800c27e:	f7f4 fd51 	bl	8000d24 <__aeabi_fmul>
 800c282:	4601      	mov	r1, r0
 800c284:	4607      	mov	r7, r0
 800c286:	f7f4 fd4d 	bl	8000d24 <__aeabi_fmul>
 800c28a:	4605      	mov	r5, r0
 800c28c:	494d      	ldr	r1, [pc, #308]	; (800c3c4 <atanf+0x1d8>)
 800c28e:	f7f4 fd49 	bl	8000d24 <__aeabi_fmul>
 800c292:	494d      	ldr	r1, [pc, #308]	; (800c3c8 <atanf+0x1dc>)
 800c294:	f7f4 fc3e 	bl	8000b14 <__addsf3>
 800c298:	4629      	mov	r1, r5
 800c29a:	f7f4 fd43 	bl	8000d24 <__aeabi_fmul>
 800c29e:	494b      	ldr	r1, [pc, #300]	; (800c3cc <atanf+0x1e0>)
 800c2a0:	f7f4 fc38 	bl	8000b14 <__addsf3>
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7f4 fd3d 	bl	8000d24 <__aeabi_fmul>
 800c2aa:	4949      	ldr	r1, [pc, #292]	; (800c3d0 <atanf+0x1e4>)
 800c2ac:	f7f4 fc32 	bl	8000b14 <__addsf3>
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	f7f4 fd37 	bl	8000d24 <__aeabi_fmul>
 800c2b6:	4947      	ldr	r1, [pc, #284]	; (800c3d4 <atanf+0x1e8>)
 800c2b8:	f7f4 fc2c 	bl	8000b14 <__addsf3>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	f7f4 fd31 	bl	8000d24 <__aeabi_fmul>
 800c2c2:	4945      	ldr	r1, [pc, #276]	; (800c3d8 <atanf+0x1ec>)
 800c2c4:	f7f4 fc26 	bl	8000b14 <__addsf3>
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	f7f4 fd2b 	bl	8000d24 <__aeabi_fmul>
 800c2ce:	4943      	ldr	r1, [pc, #268]	; (800c3dc <atanf+0x1f0>)
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f7f4 fd26 	bl	8000d24 <__aeabi_fmul>
 800c2d8:	4941      	ldr	r1, [pc, #260]	; (800c3e0 <atanf+0x1f4>)
 800c2da:	f7f4 fc19 	bl	8000b10 <__aeabi_fsub>
 800c2de:	4629      	mov	r1, r5
 800c2e0:	f7f4 fd20 	bl	8000d24 <__aeabi_fmul>
 800c2e4:	493f      	ldr	r1, [pc, #252]	; (800c3e4 <atanf+0x1f8>)
 800c2e6:	f7f4 fc13 	bl	8000b10 <__aeabi_fsub>
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	f7f4 fd1a 	bl	8000d24 <__aeabi_fmul>
 800c2f0:	493d      	ldr	r1, [pc, #244]	; (800c3e8 <atanf+0x1fc>)
 800c2f2:	f7f4 fc0d 	bl	8000b10 <__aeabi_fsub>
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	f7f4 fd14 	bl	8000d24 <__aeabi_fmul>
 800c2fc:	493b      	ldr	r1, [pc, #236]	; (800c3ec <atanf+0x200>)
 800c2fe:	f7f4 fc07 	bl	8000b10 <__aeabi_fsub>
 800c302:	4629      	mov	r1, r5
 800c304:	f7f4 fd0e 	bl	8000d24 <__aeabi_fmul>
 800c308:	4601      	mov	r1, r0
 800c30a:	4638      	mov	r0, r7
 800c30c:	f7f4 fc02 	bl	8000b14 <__addsf3>
 800c310:	4621      	mov	r1, r4
 800c312:	f7f4 fd07 	bl	8000d24 <__aeabi_fmul>
 800c316:	1c73      	adds	r3, r6, #1
 800c318:	4601      	mov	r1, r0
 800c31a:	d133      	bne.n	800c384 <atanf+0x198>
 800c31c:	4620      	mov	r0, r4
 800c31e:	f7f4 fbf7 	bl	8000b10 <__aeabi_fsub>
 800c322:	e772      	b.n	800c20a <atanf+0x1e>
 800c324:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c328:	f7f4 fbf2 	bl	8000b10 <__aeabi_fsub>
 800c32c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c330:	4605      	mov	r5, r0
 800c332:	4620      	mov	r0, r4
 800c334:	f7f4 fbee 	bl	8000b14 <__addsf3>
 800c338:	4601      	mov	r1, r0
 800c33a:	4628      	mov	r0, r5
 800c33c:	f7f4 fda6 	bl	8000e8c <__aeabi_fdiv>
 800c340:	2601      	movs	r6, #1
 800c342:	4604      	mov	r4, r0
 800c344:	e799      	b.n	800c27a <atanf+0x8e>
 800c346:	4b2a      	ldr	r3, [pc, #168]	; (800c3f0 <atanf+0x204>)
 800c348:	429d      	cmp	r5, r3
 800c34a:	dc14      	bgt.n	800c376 <atanf+0x18a>
 800c34c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c350:	f7f4 fbde 	bl	8000b10 <__aeabi_fsub>
 800c354:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c358:	4605      	mov	r5, r0
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7f4 fce2 	bl	8000d24 <__aeabi_fmul>
 800c360:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c364:	f7f4 fbd6 	bl	8000b14 <__addsf3>
 800c368:	4601      	mov	r1, r0
 800c36a:	4628      	mov	r0, r5
 800c36c:	f7f4 fd8e 	bl	8000e8c <__aeabi_fdiv>
 800c370:	2602      	movs	r6, #2
 800c372:	4604      	mov	r4, r0
 800c374:	e781      	b.n	800c27a <atanf+0x8e>
 800c376:	4601      	mov	r1, r0
 800c378:	481e      	ldr	r0, [pc, #120]	; (800c3f4 <atanf+0x208>)
 800c37a:	f7f4 fd87 	bl	8000e8c <__aeabi_fdiv>
 800c37e:	2603      	movs	r6, #3
 800c380:	4604      	mov	r4, r0
 800c382:	e77a      	b.n	800c27a <atanf+0x8e>
 800c384:	4b1c      	ldr	r3, [pc, #112]	; (800c3f8 <atanf+0x20c>)
 800c386:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c38a:	f7f4 fbc1 	bl	8000b10 <__aeabi_fsub>
 800c38e:	4621      	mov	r1, r4
 800c390:	f7f4 fbbe 	bl	8000b10 <__aeabi_fsub>
 800c394:	4b19      	ldr	r3, [pc, #100]	; (800c3fc <atanf+0x210>)
 800c396:	4601      	mov	r1, r0
 800c398:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c39c:	f7f4 fbb8 	bl	8000b10 <__aeabi_fsub>
 800c3a0:	f1b8 0f00 	cmp.w	r8, #0
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	f6bf af36 	bge.w	800c216 <atanf+0x2a>
 800c3aa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c3ae:	e72c      	b.n	800c20a <atanf+0x1e>
 800c3b0:	4c13      	ldr	r4, [pc, #76]	; (800c400 <atanf+0x214>)
 800c3b2:	e730      	b.n	800c216 <atanf+0x2a>
 800c3b4:	bfc90fdb 	.word	0xbfc90fdb
 800c3b8:	3edfffff 	.word	0x3edfffff
 800c3bc:	7149f2ca 	.word	0x7149f2ca
 800c3c0:	3f97ffff 	.word	0x3f97ffff
 800c3c4:	3c8569d7 	.word	0x3c8569d7
 800c3c8:	3d4bda59 	.word	0x3d4bda59
 800c3cc:	3d886b35 	.word	0x3d886b35
 800c3d0:	3dba2e6e 	.word	0x3dba2e6e
 800c3d4:	3e124925 	.word	0x3e124925
 800c3d8:	3eaaaaab 	.word	0x3eaaaaab
 800c3dc:	bd15a221 	.word	0xbd15a221
 800c3e0:	3d6ef16b 	.word	0x3d6ef16b
 800c3e4:	3d9d8795 	.word	0x3d9d8795
 800c3e8:	3de38e38 	.word	0x3de38e38
 800c3ec:	3e4ccccd 	.word	0x3e4ccccd
 800c3f0:	401bffff 	.word	0x401bffff
 800c3f4:	bf800000 	.word	0xbf800000
 800c3f8:	0800c728 	.word	0x0800c728
 800c3fc:	0800c718 	.word	0x0800c718
 800c400:	3fc90fdb 	.word	0x3fc90fdb

0800c404 <fabsf>:
 800c404:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c408:	4770      	bx	lr
	...

0800c40c <nanf>:
 800c40c:	4800      	ldr	r0, [pc, #0]	; (800c410 <nanf+0x4>)
 800c40e:	4770      	bx	lr
 800c410:	7fc00000 	.word	0x7fc00000

0800c414 <_init>:
 800c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c416:	bf00      	nop
 800c418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c41a:	bc08      	pop	{r3}
 800c41c:	469e      	mov	lr, r3
 800c41e:	4770      	bx	lr

0800c420 <_fini>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	bf00      	nop
 800c424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c426:	bc08      	pop	{r3}
 800c428:	469e      	mov	lr, r3
 800c42a:	4770      	bx	lr
