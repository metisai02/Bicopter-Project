
Test_boardC21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b62c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800b740  0800b740  0001b740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8e8  0800b8e8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8e8  0800b8e8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8e8  0800b8e8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8e8  0800b8e8  0001b8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8ec  0800b8ec  0001b8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b8f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000088  0800b978  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  0800b978  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f87  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000291e  00000000  00000000  00032038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00034958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  00035c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019202  00000000  00000000  00036ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001530a  00000000  00000000  000500da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092436  00000000  00000000  000653e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f781a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006104  00000000  00000000  000f786c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b724 	.word	0x0800b724

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800b724 	.word	0x0800b724

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2iz>:
 80010dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30f      	bcc.n	8001106 <__aeabi_f2iz+0x2a>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d90d      	bls.n	800110c <__aeabi_f2iz+0x30>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	bf18      	it	ne
 8001102:	4240      	negne	r0, r0
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2iz+0x3a>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d105      	bne.n	8001122 <__aeabi_f2iz+0x46>
 8001116:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800111a:	bf08      	it	eq
 800111c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_Init+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_Init+0x28>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f947 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f808 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f007 fdfe 	bl	8008d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40022000 	.word	0x40022000

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f95f 	bl	8001436 <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 f927 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000020 	.word	0x20000020
 80011ac:	20000004 	.word	0x20000004
 80011b0:	20000000 	.word	0x20000000

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x1c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x20>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <HAL_IncTick+0x20>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000004 	.word	0x20000004
 80011d4:	200000a4 	.word	0x200000a4

080011d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GetTick+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	200000a4 	.word	0x200000a4

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff fff0 	bl	80011d8 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffe0 	bl	80011d8 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000004 	.word	0x20000004

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4906      	ldr	r1, [pc, #24]	; (80012cc <__NVIC_EnableIRQ+0x34>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff90 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff2d 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff42 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff90 	bl	8001324 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5f 	bl	80012d0 <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff35 	bl	8001298 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b08b      	sub	sp, #44	; 0x2c
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e169      	b.n	8001738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001464:	2201      	movs	r2, #1
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8158 	bne.w	8001732 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a9a      	ldr	r2, [pc, #616]	; (80016f0 <HAL_GPIO_Init+0x2a0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d05e      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 800148c:	4a98      	ldr	r2, [pc, #608]	; (80016f0 <HAL_GPIO_Init+0x2a0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d875      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 8001492:	4a98      	ldr	r2, [pc, #608]	; (80016f4 <HAL_GPIO_Init+0x2a4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d058      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 8001498:	4a96      	ldr	r2, [pc, #600]	; (80016f4 <HAL_GPIO_Init+0x2a4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d86f      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 800149e:	4a96      	ldr	r2, [pc, #600]	; (80016f8 <HAL_GPIO_Init+0x2a8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d052      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014a4:	4a94      	ldr	r2, [pc, #592]	; (80016f8 <HAL_GPIO_Init+0x2a8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d869      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014aa:	4a94      	ldr	r2, [pc, #592]	; (80016fc <HAL_GPIO_Init+0x2ac>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d04c      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014b0:	4a92      	ldr	r2, [pc, #584]	; (80016fc <HAL_GPIO_Init+0x2ac>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d863      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014b6:	4a92      	ldr	r2, [pc, #584]	; (8001700 <HAL_GPIO_Init+0x2b0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d046      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014bc:	4a90      	ldr	r2, [pc, #576]	; (8001700 <HAL_GPIO_Init+0x2b0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d85d      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d82a      	bhi.n	800151c <HAL_GPIO_Init+0xcc>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d859      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014ca:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <HAL_GPIO_Init+0x80>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	0800154b 	.word	0x0800154b
 80014d4:	08001525 	.word	0x08001525
 80014d8:	08001537 	.word	0x08001537
 80014dc:	08001579 	.word	0x08001579
 80014e0:	0800157f 	.word	0x0800157f
 80014e4:	0800157f 	.word	0x0800157f
 80014e8:	0800157f 	.word	0x0800157f
 80014ec:	0800157f 	.word	0x0800157f
 80014f0:	0800157f 	.word	0x0800157f
 80014f4:	0800157f 	.word	0x0800157f
 80014f8:	0800157f 	.word	0x0800157f
 80014fc:	0800157f 	.word	0x0800157f
 8001500:	0800157f 	.word	0x0800157f
 8001504:	0800157f 	.word	0x0800157f
 8001508:	0800157f 	.word	0x0800157f
 800150c:	0800157f 	.word	0x0800157f
 8001510:	0800157f 	.word	0x0800157f
 8001514:	0800152d 	.word	0x0800152d
 8001518:	08001541 	.word	0x08001541
 800151c:	4a79      	ldr	r2, [pc, #484]	; (8001704 <HAL_GPIO_Init+0x2b4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001522:	e02c      	b.n	800157e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e029      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e024      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3308      	adds	r3, #8
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e01f      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e01a      	b.n	8001580 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001552:	2304      	movs	r3, #4
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e013      	b.n	8001580 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	611a      	str	r2, [r3, #16]
          break;
 800156a:	e009      	b.n	8001580 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
          break;
 8001576:	e003      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x130>
          break;
 800157e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	; 0xff
 8001584:	d801      	bhi.n	800158a <HAL_GPIO_Init+0x13a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	e001      	b.n	800158e <HAL_GPIO_Init+0x13e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3304      	adds	r3, #4
 800158e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2bff      	cmp	r3, #255	; 0xff
 8001594:	d802      	bhi.n	800159c <HAL_GPIO_Init+0x14c>
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x152>
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	3b08      	subs	r3, #8
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	210f      	movs	r1, #15
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	401a      	ands	r2, r3
 80015b4:	6a39      	ldr	r1, [r7, #32]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80b1 	beq.w	8001732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2bc>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a40      	ldr	r2, [pc, #256]	; (8001710 <HAL_GPIO_Init+0x2c0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_Init+0x1ec>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <HAL_GPIO_Init+0x2c4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1e8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <HAL_GPIO_Init+0x2c8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1e4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a3d      	ldr	r2, [pc, #244]	; (800171c <HAL_GPIO_Init+0x2cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1e0>
 800162c:	2303      	movs	r3, #3
 800162e:	e006      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001630:	2304      	movs	r3, #4
 8001632:	e004      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001634:	2302      	movs	r3, #2
 8001636:	e002      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 800163c:	2300      	movs	r3, #0
 800163e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001640:	f002 0203 	and.w	r2, r2, #3
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	4093      	lsls	r3, r2
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164e:	492f      	ldr	r1, [pc, #188]	; (800170c <HAL_GPIO_Init+0x2bc>)
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	492c      	ldr	r1, [pc, #176]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4928      	ldr	r1, [pc, #160]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4922      	ldr	r1, [pc, #136]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	491e      	ldr	r1, [pc, #120]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	4918      	ldr	r1, [pc, #96]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4914      	ldr	r1, [pc, #80]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d021      	beq.n	8001724 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	490e      	ldr	r1, [pc, #56]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
 80016ec:	e021      	b.n	8001732 <HAL_GPIO_Init+0x2e2>
 80016ee:	bf00      	nop
 80016f0:	10320000 	.word	0x10320000
 80016f4:	10310000 	.word	0x10310000
 80016f8:	10220000 	.word	0x10220000
 80016fc:	10210000 	.word	0x10210000
 8001700:	10120000 	.word	0x10120000
 8001704:	10110000 	.word	0x10110000
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	40010800 	.word	0x40010800
 8001714:	40010c00 	.word	0x40010c00
 8001718:	40011000 	.word	0x40011000
 800171c:	40011400 	.word	0x40011400
 8001720:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_GPIO_Init+0x304>)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	43db      	mvns	r3, r3
 800172c:	4909      	ldr	r1, [pc, #36]	; (8001754 <HAL_GPIO_Init+0x304>)
 800172e:	4013      	ands	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	3301      	adds	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	f47f ae8e 	bne.w	8001464 <HAL_GPIO_Init+0x14>
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	372c      	adds	r7, #44	; 0x2c
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4013      	ands	r3, r2
 80017a0:	041a      	lsls	r2, r3, #16
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43d9      	mvns	r1, r3
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	400b      	ands	r3, r1
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	611a      	str	r2, [r3, #16]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e12b      	b.n	8001a26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f007 fae0 	bl	8008da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2224      	movs	r2, #36	; 0x24
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800180e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800181e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001820:	f001 fba0 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8001824:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a81      	ldr	r2, [pc, #516]	; (8001a30 <HAL_I2C_Init+0x274>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d807      	bhi.n	8001840 <HAL_I2C_Init+0x84>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a80      	ldr	r2, [pc, #512]	; (8001a34 <HAL_I2C_Init+0x278>)
 8001834:	4293      	cmp	r3, r2
 8001836:	bf94      	ite	ls
 8001838:	2301      	movls	r3, #1
 800183a:	2300      	movhi	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	e006      	b.n	800184e <HAL_I2C_Init+0x92>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a7d      	ldr	r2, [pc, #500]	; (8001a38 <HAL_I2C_Init+0x27c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	bf94      	ite	ls
 8001848:	2301      	movls	r3, #1
 800184a:	2300      	movhi	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0e7      	b.n	8001a26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4a78      	ldr	r2, [pc, #480]	; (8001a3c <HAL_I2C_Init+0x280>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9b      	lsrs	r3, r3, #18
 8001860:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a6a      	ldr	r2, [pc, #424]	; (8001a30 <HAL_I2C_Init+0x274>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d802      	bhi.n	8001890 <HAL_I2C_Init+0xd4>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	3301      	adds	r3, #1
 800188e:	e009      	b.n	80018a4 <HAL_I2C_Init+0xe8>
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	4a69      	ldr	r2, [pc, #420]	; (8001a40 <HAL_I2C_Init+0x284>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	3301      	adds	r3, #1
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	495c      	ldr	r1, [pc, #368]	; (8001a30 <HAL_I2C_Init+0x274>)
 80018c0:	428b      	cmp	r3, r1
 80018c2:	d819      	bhi.n	80018f8 <HAL_I2C_Init+0x13c>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1e59      	subs	r1, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80018d2:	1c59      	adds	r1, r3, #1
 80018d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018d8:	400b      	ands	r3, r1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00a      	beq.n	80018f4 <HAL_I2C_Init+0x138>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1e59      	subs	r1, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f2:	e051      	b.n	8001998 <HAL_I2C_Init+0x1dc>
 80018f4:	2304      	movs	r3, #4
 80018f6:	e04f      	b.n	8001998 <HAL_I2C_Init+0x1dc>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d111      	bne.n	8001924 <HAL_I2C_Init+0x168>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1e58      	subs	r0, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6859      	ldr	r1, [r3, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	440b      	add	r3, r1
 800190e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001912:	3301      	adds	r3, #1
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	e012      	b.n	800194a <HAL_I2C_Init+0x18e>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	0099      	lsls	r1, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	fbb0 f3f3 	udiv	r3, r0, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Init+0x196>
 800194e:	2301      	movs	r3, #1
 8001950:	e022      	b.n	8001998 <HAL_I2C_Init+0x1dc>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10e      	bne.n	8001978 <HAL_I2C_Init+0x1bc>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1e58      	subs	r0, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6859      	ldr	r1, [r3, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	440b      	add	r3, r1
 8001968:	fbb0 f3f3 	udiv	r3, r0, r3
 800196c:	3301      	adds	r3, #1
 800196e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001976:	e00f      	b.n	8001998 <HAL_I2C_Init+0x1dc>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e58      	subs	r0, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	0099      	lsls	r1, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	fbb0 f3f3 	udiv	r3, r0, r3
 800198e:	3301      	adds	r3, #1
 8001990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	6809      	ldr	r1, [r1, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6911      	ldr	r1, [r2, #16]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68d2      	ldr	r2, [r2, #12]
 80019d2:	4311      	orrs	r1, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	430b      	orrs	r3, r1
 80019da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2220      	movs	r2, #32
 8001a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	000186a0 	.word	0x000186a0
 8001a34:	001e847f 	.word	0x001e847f
 8001a38:	003d08ff 	.word	0x003d08ff
 8001a3c:	431bde83 	.word	0x431bde83
 8001a40:	10624dd3 	.word	0x10624dd3

08001a44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	817b      	strh	r3, [r7, #10]
 8001a56:	460b      	mov	r3, r1
 8001a58:	813b      	strh	r3, [r7, #8]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a5e:	f7ff fbbb 	bl	80011d8 <HAL_GetTick>
 8001a62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	f040 80d9 	bne.w	8001c24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2319      	movs	r3, #25
 8001a78:	2201      	movs	r2, #1
 8001a7a:	496d      	ldr	r1, [pc, #436]	; (8001c30 <HAL_I2C_Mem_Write+0x1ec>)
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fcc1 	bl	8002404 <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e0cc      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_I2C_Mem_Write+0x56>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e0c5      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d007      	beq.n	8001ac0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2221      	movs	r2, #33	; 0x21
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a3a      	ldr	r2, [r7, #32]
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4a4d      	ldr	r2, [pc, #308]	; (8001c34 <HAL_I2C_Mem_Write+0x1f0>)
 8001b00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b02:	88f8      	ldrh	r0, [r7, #6]
 8001b04:	893a      	ldrh	r2, [r7, #8]
 8001b06:	8979      	ldrh	r1, [r7, #10]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	4603      	mov	r3, r0
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 faf8 	bl	8002108 <I2C_RequestMemoryWrite>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d052      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e081      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 fd42 	bl	80025b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00d      	beq.n	8001b4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d107      	bne.n	8001b4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06b      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d11b      	bne.n	8001bc4 <HAL_I2C_Mem_Write+0x180>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d017      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1aa      	bne.n	8001b22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 fd2e 	bl	8002632 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d107      	bne.n	8001bf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e016      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	00100002 	.word	0x00100002
 8001c34:	ffff0000 	.word	0xffff0000

08001c38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	817b      	strh	r3, [r7, #10]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	813b      	strh	r3, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c56:	f7ff fabf 	bl	80011d8 <HAL_GetTick>
 8001c5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	f040 8244 	bne.w	80020f2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2319      	movs	r3, #25
 8001c70:	2201      	movs	r2, #1
 8001c72:	4982      	ldr	r1, [pc, #520]	; (8001e7c <HAL_I2C_Mem_Read+0x244>)
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 fbc5 	bl	8002404 <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	e237      	b.n	80020f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2C_Mem_Read+0x5a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e230      	b.n	80020f4 <HAL_I2C_Mem_Read+0x4bc>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d007      	beq.n	8001cb8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2222      	movs	r2, #34	; 0x22
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4a62      	ldr	r2, [pc, #392]	; (8001e80 <HAL_I2C_Mem_Read+0x248>)
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cfa:	88f8      	ldrh	r0, [r7, #6]
 8001cfc:	893a      	ldrh	r2, [r7, #8]
 8001cfe:	8979      	ldrh	r1, [r7, #10]
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	4603      	mov	r3, r0
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fa92 	bl	8002234 <I2C_RequestMemoryRead>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1ec      	b.n	80020f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d113      	bne.n	8001d4a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e1c0      	b.n	80020cc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d11e      	bne.n	8001d90 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d60:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d62:	b672      	cpsid	i
}
 8001d64:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d8c:	b662      	cpsie	i
}
 8001d8e:	e035      	b.n	8001dfc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d11e      	bne.n	8001dd6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001da8:	b672      	cpsid	i
}
 8001daa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dd2:	b662      	cpsie	i
}
 8001dd4:	e012      	b.n	8001dfc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001de4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001dfc:	e166      	b.n	80020cc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	f200 811f 	bhi.w	8002046 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d123      	bne.n	8001e58 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fc4d 	bl	80026b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e167      	b.n	80020f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e56:	e139      	b.n	80020cc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d152      	bne.n	8001f06 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e66:	2200      	movs	r2, #0
 8001e68:	4906      	ldr	r1, [pc, #24]	; (8001e84 <HAL_I2C_Mem_Read+0x24c>)
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 faca 	bl	8002404 <I2C_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e13c      	b.n	80020f4 <HAL_I2C_Mem_Read+0x4bc>
 8001e7a:	bf00      	nop
 8001e7c:	00100002 	.word	0x00100002
 8001e80:	ffff0000 	.word	0xffff0000
 8001e84:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e88:	b672      	cpsid	i
}
 8001e8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ece:	b662      	cpsie	i
}
 8001ed0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f04:	e0e2      	b.n	80020cc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	497b      	ldr	r1, [pc, #492]	; (80020fc <HAL_I2C_Mem_Read+0x4c4>)
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 fa77 	bl	8002404 <I2C_WaitOnFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0e9      	b.n	80020f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f66:	4b66      	ldr	r3, [pc, #408]	; (8002100 <HAL_I2C_Mem_Read+0x4c8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	08db      	lsrs	r3, r3, #3
 8001f6c:	4a65      	ldr	r2, [pc, #404]	; (8002104 <HAL_I2C_Mem_Read+0x4cc>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a1a      	lsrs	r2, r3, #8
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00da      	lsls	r2, r3, #3
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d118      	bne.n	8001fbe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f043 0220 	orr.w	r2, r3, #32
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001fae:	b662      	cpsie	i
}
 8001fb0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e09a      	b.n	80020f4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d1d9      	bne.n	8001f80 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800200e:	b662      	cpsie	i
}
 8002010:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002044:	e042      	b.n	80020cc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002048:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fb32 	bl	80026b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e04c      	b.n	80020f4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d118      	bne.n	80020cc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f47f ae94 	bne.w	8001dfe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80020f2:	2302      	movs	r3, #2
  }
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	00010004 	.word	0x00010004
 8002100:	20000020 	.word	0x20000020
 8002104:	14f8b589 	.word	0x14f8b589

08002108 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4603      	mov	r3, r0
 8002118:	817b      	strh	r3, [r7, #10]
 800211a:	460b      	mov	r3, r1
 800211c:	813b      	strh	r3, [r7, #8]
 800211e:	4613      	mov	r3, r2
 8002120:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002130:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	2200      	movs	r2, #0
 800213a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f960 	bl	8002404 <I2C_WaitOnFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00d      	beq.n	8002166 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002158:	d103      	bne.n	8002162 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e05f      	b.n	8002226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002166:	897b      	ldrh	r3, [r7, #10]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002174:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	6a3a      	ldr	r2, [r7, #32]
 800217a:	492d      	ldr	r1, [pc, #180]	; (8002230 <I2C_RequestMemoryWrite+0x128>)
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f998 	bl	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e04c      	b.n	8002226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	6a39      	ldr	r1, [r7, #32]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fa02 	bl	80025b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00d      	beq.n	80021ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d107      	bne.n	80021ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e02b      	b.n	8002226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021d4:	893b      	ldrh	r3, [r7, #8]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	611a      	str	r2, [r3, #16]
 80021de:	e021      	b.n	8002224 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021e0:	893b      	ldrh	r3, [r7, #8]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f0:	6a39      	ldr	r1, [r7, #32]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f9dc 	bl	80025b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2b04      	cmp	r3, #4
 8002204:	d107      	bne.n	8002216 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002214:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e005      	b.n	8002226 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800221a:	893b      	ldrh	r3, [r7, #8]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	00010002 	.word	0x00010002

08002234 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4603      	mov	r3, r0
 8002244:	817b      	strh	r3, [r7, #10]
 8002246:	460b      	mov	r3, r1
 8002248:	813b      	strh	r3, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800225c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800226c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2200      	movs	r2, #0
 8002276:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f8c2 	bl	8002404 <I2C_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002294:	d103      	bne.n	800229e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0aa      	b.n	80023f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	6a3a      	ldr	r2, [r7, #32]
 80022b6:	4952      	ldr	r1, [pc, #328]	; (8002400 <I2C_RequestMemoryRead+0x1cc>)
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f8fa 	bl	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e097      	b.n	80023f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	6a39      	ldr	r1, [r7, #32]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f964 	bl	80025b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00d      	beq.n	800230a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d107      	bne.n	8002306 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002304:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e076      	b.n	80023f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002310:	893b      	ldrh	r3, [r7, #8]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	611a      	str	r2, [r3, #16]
 800231a:	e021      	b.n	8002360 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800231c:	893b      	ldrh	r3, [r7, #8]
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	b29b      	uxth	r3, r3
 8002322:	b2da      	uxtb	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	6a39      	ldr	r1, [r7, #32]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f93e 	bl	80025b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b04      	cmp	r3, #4
 8002340:	d107      	bne.n	8002352 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002350:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e050      	b.n	80023f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002356:	893b      	ldrh	r3, [r7, #8]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002362:	6a39      	ldr	r1, [r7, #32]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f923 	bl	80025b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00d      	beq.n	800238c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	2b04      	cmp	r3, #4
 8002376:	d107      	bne.n	8002388 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e035      	b.n	80023f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800239a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f82b 	bl	8002404 <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00d      	beq.n	80023d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c2:	d103      	bne.n	80023cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e013      	b.n	80023f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023d0:	897b      	ldrh	r3, [r7, #10]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	6a3a      	ldr	r2, [r7, #32]
 80023e4:	4906      	ldr	r1, [pc, #24]	; (8002400 <I2C_RequestMemoryRead+0x1cc>)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f863 	bl	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	00010002 	.word	0x00010002

08002404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002414:	e025      	b.n	8002462 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d021      	beq.n	8002462 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241e:	f7fe fedb 	bl	80011d8 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d302      	bcc.n	8002434 <I2C_WaitOnFlagUntilTimeout+0x30>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d116      	bne.n	8002462 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f043 0220 	orr.w	r2, r3, #32
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e023      	b.n	80024aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10d      	bne.n	8002488 <I2C_WaitOnFlagUntilTimeout+0x84>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4013      	ands	r3, r2
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	e00c      	b.n	80024a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	43da      	mvns	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4013      	ands	r3, r2
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	bf0c      	ite	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	2300      	movne	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d0b6      	beq.n	8002416 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024c0:	e051      	b.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d0:	d123      	bne.n	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f043 0204 	orr.w	r2, r3, #4
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e046      	b.n	80025a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d021      	beq.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002522:	f7fe fe59 	bl	80011d8 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	d302      	bcc.n	8002538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d116      	bne.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f043 0220 	orr.w	r2, r3, #32
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e020      	b.n	80025a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10c      	bne.n	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	43da      	mvns	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4013      	ands	r3, r2
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	bf14      	ite	ne
 8002582:	2301      	movne	r3, #1
 8002584:	2300      	moveq	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	e00b      	b.n	80025a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	43da      	mvns	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4013      	ands	r3, r2
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d18d      	bne.n	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025bc:	e02d      	b.n	800261a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f8ce 	bl	8002760 <I2C_IsAcknowledgeFailed>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e02d      	b.n	800262a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d021      	beq.n	800261a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7fe fdff 	bl	80011d8 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d302      	bcc.n	80025ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d116      	bne.n	800261a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e007      	b.n	800262a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d1ca      	bne.n	80025be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800263e:	e02d      	b.n	800269c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f88d 	bl	8002760 <I2C_IsAcknowledgeFailed>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e02d      	b.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d021      	beq.n	800269c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002658:	f7fe fdbe 	bl	80011d8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	429a      	cmp	r2, r3
 8002666:	d302      	bcc.n	800266e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d116      	bne.n	800269c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e007      	b.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d1ca      	bne.n	8002640 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026c0:	e042      	b.n	8002748 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d119      	bne.n	8002704 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0210 	mvn.w	r2, #16
 80026d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e029      	b.n	8002758 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002704:	f7fe fd68 	bl	80011d8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	429a      	cmp	r2, r3
 8002712:	d302      	bcc.n	800271a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d116      	bne.n	8002748 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f043 0220 	orr.w	r2, r3, #32
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e007      	b.n	8002758 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002752:	2b40      	cmp	r3, #64	; 0x40
 8002754:	d1b5      	bne.n	80026c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	d11b      	bne.n	80027b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002780:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f043 0204 	orr.w	r2, r3, #4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e272      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8087 	beq.w	80028ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027dc:	4b92      	ldr	r3, [pc, #584]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d00c      	beq.n	8002802 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027e8:	4b8f      	ldr	r3, [pc, #572]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d112      	bne.n	800281a <HAL_RCC_OscConfig+0x5e>
 80027f4:	4b8c      	ldr	r3, [pc, #560]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d10b      	bne.n	800281a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002802:	4b89      	ldr	r3, [pc, #548]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d06c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x12c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d168      	bne.n	80028e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e24c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x76>
 8002824:	4b80      	ldr	r3, [pc, #512]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7f      	ldr	r2, [pc, #508]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800282a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	e02e      	b.n	8002890 <HAL_RCC_OscConfig+0xd4>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x98>
 800283a:	4b7b      	ldr	r3, [pc, #492]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a7a      	ldr	r2, [pc, #488]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b78      	ldr	r3, [pc, #480]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a77      	ldr	r2, [pc, #476]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800284c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e01d      	b.n	8002890 <HAL_RCC_OscConfig+0xd4>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0xbc>
 800285e:	4b72      	ldr	r3, [pc, #456]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a71      	ldr	r2, [pc, #452]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6e      	ldr	r2, [pc, #440]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e00b      	b.n	8002890 <HAL_RCC_OscConfig+0xd4>
 8002878:	4b6b      	ldr	r3, [pc, #428]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6a      	ldr	r2, [pc, #424]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b68      	ldr	r3, [pc, #416]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a67      	ldr	r2, [pc, #412]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800288a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe fc9e 	bl	80011d8 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe fc9a 	bl	80011d8 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e200      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0xe4>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fc8a 	bl	80011d8 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7fe fc86 	bl	80011d8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e1ec      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x10c>
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d063      	beq.n	80029be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028f6:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002902:	4b49      	ldr	r3, [pc, #292]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b08      	cmp	r3, #8
 800290c:	d11c      	bne.n	8002948 <HAL_RCC_OscConfig+0x18c>
 800290e:	4b46      	ldr	r3, [pc, #280]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d116      	bne.n	8002948 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_RCC_OscConfig+0x176>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e1c0      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002932:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4939      	ldr	r1, [pc, #228]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	e03a      	b.n	80029be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002950:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <HAL_RCC_OscConfig+0x270>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe fc3f 	bl	80011d8 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295e:	f7fe fc3b 	bl	80011d8 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e1a1      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002970:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297c:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4927      	ldr	r1, [pc, #156]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]
 8002990:	e015      	b.n	80029be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <HAL_RCC_OscConfig+0x270>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fc1e 	bl	80011d8 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a0:	f7fe fc1a 	bl	80011d8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e180      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03a      	beq.n	8002a40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d019      	beq.n	8002a06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_RCC_OscConfig+0x274>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d8:	f7fe fbfe 	bl	80011d8 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e0:	f7fe fbfa 	bl	80011d8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e160      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029fe:	2001      	movs	r0, #1
 8002a00:	f000 fad8 	bl	8002fb4 <RCC_Delay>
 8002a04:	e01c      	b.n	8002a40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_RCC_OscConfig+0x274>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0c:	f7fe fbe4 	bl	80011d8 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a12:	e00f      	b.n	8002a34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a14:	f7fe fbe0 	bl	80011d8 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d908      	bls.n	8002a34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e146      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	42420000 	.word	0x42420000
 8002a30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	4b92      	ldr	r3, [pc, #584]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e9      	bne.n	8002a14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80a6 	beq.w	8002b9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a52:	4b8b      	ldr	r3, [pc, #556]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b88      	ldr	r3, [pc, #544]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4a87      	ldr	r2, [pc, #540]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	61d3      	str	r3, [r2, #28]
 8002a6a:	4b85      	ldr	r3, [pc, #532]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a76:	2301      	movs	r3, #1
 8002a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b82      	ldr	r3, [pc, #520]	; (8002c84 <HAL_RCC_OscConfig+0x4c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d118      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b7f      	ldr	r3, [pc, #508]	; (8002c84 <HAL_RCC_OscConfig+0x4c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7e      	ldr	r2, [pc, #504]	; (8002c84 <HAL_RCC_OscConfig+0x4c8>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7fe fba1 	bl	80011d8 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7fe fb9d 	bl	80011d8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b64      	cmp	r3, #100	; 0x64
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e103      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b75      	ldr	r3, [pc, #468]	; (8002c84 <HAL_RCC_OscConfig+0x4c8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x312>
 8002ac0:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a6e      	ldr	r2, [pc, #440]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	e02d      	b.n	8002b2a <HAL_RCC_OscConfig+0x36e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x334>
 8002ad6:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a69      	ldr	r2, [pc, #420]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	4b67      	ldr	r3, [pc, #412]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4a66      	ldr	r2, [pc, #408]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	6213      	str	r3, [r2, #32]
 8002aee:	e01c      	b.n	8002b2a <HAL_RCC_OscConfig+0x36e>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d10c      	bne.n	8002b12 <HAL_RCC_OscConfig+0x356>
 8002af8:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a60      	ldr	r2, [pc, #384]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a5d      	ldr	r2, [pc, #372]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e00b      	b.n	8002b2a <HAL_RCC_OscConfig+0x36e>
 8002b12:	4b5b      	ldr	r3, [pc, #364]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a5a      	ldr	r2, [pc, #360]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	4b58      	ldr	r3, [pc, #352]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a57      	ldr	r2, [pc, #348]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d015      	beq.n	8002b5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7fe fb51 	bl	80011d8 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe fb4d 	bl	80011d8 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e0b1      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ee      	beq.n	8002b3a <HAL_RCC_OscConfig+0x37e>
 8002b5c:	e014      	b.n	8002b88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fb3b 	bl	80011d8 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fe fb37 	bl	80011d8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e09b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7c:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ee      	bne.n	8002b66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d105      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4a3b      	ldr	r2, [pc, #236]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8087 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d061      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d146      	bne.n	8002c46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb8:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fb0b 	bl	80011d8 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc6:	f7fe fb07 	bl	80011d8 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e06d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd8:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bec:	d108      	bne.n	8002c00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4921      	ldr	r1, [pc, #132]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a19      	ldr	r1, [r3, #32]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	430b      	orrs	r3, r1
 8002c12:	491b      	ldr	r1, [pc, #108]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fadb 	bl	80011d8 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c26:	f7fe fad7 	bl	80011d8 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e03d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x46a>
 8002c44:	e035      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_RCC_OscConfig+0x4cc>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fac4 	bl	80011d8 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe fac0 	bl	80011d8 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e026      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x498>
 8002c72:	e01e      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e019      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40007000 	.word	0x40007000
 8002c88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_OscConfig+0x500>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0d0      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d910      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0207 	bic.w	r2, r3, #7
 8002cea:	4965      	ldr	r1, [pc, #404]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b8      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d34:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d40:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	494d      	ldr	r1, [pc, #308]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d040      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d115      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e07f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e073      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e06b      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4936      	ldr	r1, [pc, #216]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fa12 	bl	80011d8 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7fe fa0e 	bl	80011d8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e053      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d210      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4922      	ldr	r1, [pc, #136]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e032      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4916      	ldr	r1, [pc, #88]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	490e      	ldr	r1, [pc, #56]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e4e:	f000 f821 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490a      	ldr	r1, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	fa22 f303 	lsr.w	r3, r2, r3
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1cc>)
 8002e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1d0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f970 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40022000 	.word	0x40022000
 8002e84:	40021000 	.word	0x40021000
 8002e88:	0800b7cc 	.word	0x0800b7cc
 8002e8c:	20000020 	.word	0x20000020
 8002e90:	20000000 	.word	0x20000000

08002e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	b490      	push	{r4, r7}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e9a:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xac>)
 8002e9c:	1d3c      	adds	r4, r7, #4
 8002e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ea4:	f240 2301 	movw	r3, #513	; 0x201
 8002ea8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x46>
 8002ed2:	e02b      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ed6:	623b      	str	r3, [r7, #32]
      break;
 8002ed8:	e02b      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	0c9b      	lsrs	r3, r3, #18
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3328      	adds	r3, #40	; 0x28
 8002ee4:	443b      	add	r3, r7
 8002ee6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002eea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d012      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	0c5b      	lsrs	r3, r3, #17
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	3328      	adds	r3, #40	; 0x28
 8002f02:	443b      	add	r3, r7
 8002f04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f0e:	fb03 f202 	mul.w	r2, r3, r2
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	e004      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	623b      	str	r3, [r7, #32]
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f2e:	623b      	str	r3, [r7, #32]
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	6a3b      	ldr	r3, [r7, #32]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3728      	adds	r7, #40	; 0x28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc90      	pop	{r4, r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	0800b740 	.word	0x0800b740
 8002f44:	40021000 	.word	0x40021000
 8002f48:	007a1200 	.word	0x007a1200
 8002f4c:	003d0900 	.word	0x003d0900

08002f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f54:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	20000020 	.word	0x20000020

08002f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f68:	f7ff fff2 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000
 8002f88:	0800b7dc 	.word	0x0800b7dc

08002f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f90:	f7ff ffde 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	0adb      	lsrs	r3, r3, #11
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	0800b7dc 	.word	0x0800b7dc

08002fb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <RCC_Delay+0x34>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <RCC_Delay+0x38>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0a5b      	lsrs	r3, r3, #9
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fd0:	bf00      	nop
  }
  while (Delay --);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	60fa      	str	r2, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f9      	bne.n	8002fd0 <RCC_Delay+0x1c>
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	20000020 	.word	0x20000020
 8002fec:	10624dd3 	.word	0x10624dd3

08002ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e076      	b.n	80030f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2b00      	cmp	r3, #0
 8003008:	d108      	bne.n	800301c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003012:	d009      	beq.n	8003028 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	61da      	str	r2, [r3, #28]
 800301a:	e005      	b.n	8003028 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f005 ff00 	bl	8008e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	ea42 0103 	orr.w	r1, r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	0c1a      	lsrs	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f002 0204 	and.w	r2, r2, #4
 80030ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003106:	2301      	movs	r3, #1
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_SPI_TransmitReceive+0x26>
 800311a:	2302      	movs	r3, #2
 800311c:	e18a      	b.n	8003434 <HAL_SPI_TransmitReceive+0x33c>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003126:	f7fe f857 	bl	80011d8 <HAL_GetTick>
 800312a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003144:	2b01      	cmp	r3, #1
 8003146:	d00f      	beq.n	8003168 <HAL_SPI_TransmitReceive+0x70>
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314e:	d107      	bne.n	8003160 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <HAL_SPI_TransmitReceive+0x68>
 8003158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800315c:	2b04      	cmp	r3, #4
 800315e:	d003      	beq.n	8003168 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003160:	2302      	movs	r3, #2
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003166:	e15b      	b.n	8003420 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_SPI_TransmitReceive+0x82>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_SPI_TransmitReceive+0x82>
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003180:	e14e      	b.n	8003420 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b04      	cmp	r3, #4
 800318c:	d003      	beq.n	8003196 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2205      	movs	r2, #5
 8003192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	887a      	ldrh	r2, [r7, #2]
 80031a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	887a      	ldrh	r2, [r7, #2]
 80031be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d007      	beq.n	80031ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f2:	d178      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x10a>
 80031fc:	8b7b      	ldrh	r3, [r7, #26]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d166      	bne.n	80032d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	881a      	ldrh	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	1c9a      	adds	r2, r3, #2
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003226:	e053      	b.n	80032d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d11b      	bne.n	800326e <HAL_SPI_TransmitReceive+0x176>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d016      	beq.n	800326e <HAL_SPI_TransmitReceive+0x176>
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d113      	bne.n	800326e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	881a      	ldrh	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	1c9a      	adds	r2, r3, #2
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d119      	bne.n	80032b0 <HAL_SPI_TransmitReceive+0x1b8>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d014      	beq.n	80032b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	b292      	uxth	r2, r2
 8003292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	1c9a      	adds	r2, r3, #2
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032ac:	2301      	movs	r3, #1
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032b0:	f7fd ff92 	bl	80011d8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032bc:	429a      	cmp	r2, r3
 80032be:	d807      	bhi.n	80032d0 <HAL_SPI_TransmitReceive+0x1d8>
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d003      	beq.n	80032d0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032ce:	e0a7      	b.n	8003420 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1a6      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x130>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1a1      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x130>
 80032e4:	e07c      	b.n	80033e0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x1fc>
 80032ee:	8b7b      	ldrh	r3, [r7, #26]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d16b      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800331a:	e057      	b.n	80033cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b02      	cmp	r3, #2
 8003328:	d11c      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x26c>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d017      	beq.n	8003364 <HAL_SPI_TransmitReceive+0x26c>
 8003334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003336:	2b01      	cmp	r3, #1
 8003338:	d114      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d119      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x2ae>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d014      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033a2:	2301      	movs	r3, #1
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033a6:	f7fd ff17 	bl	80011d8 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d803      	bhi.n	80033be <HAL_SPI_TransmitReceive+0x2c6>
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d102      	bne.n	80033c4 <HAL_SPI_TransmitReceive+0x2cc>
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033ca:	e029      	b.n	8003420 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1a2      	bne.n	800331c <HAL_SPI_TransmitReceive+0x224>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d19d      	bne.n	800331c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f8b1 	bl	800354c <SPI_EndRxTxTransaction>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033fc:	e010      	b.n	8003420 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	e000      	b.n	8003420 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800341e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003434:	4618      	mov	r0, r3
 8003436:	3730      	adds	r7, #48	; 0x30
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800344c:	f7fd fec4 	bl	80011d8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4413      	add	r3, r2
 800345a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800345c:	f7fd febc 	bl	80011d8 <HAL_GetTick>
 8003460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003462:	4b39      	ldr	r3, [pc, #228]	; (8003548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	015b      	lsls	r3, r3, #5
 8003468:	0d1b      	lsrs	r3, r3, #20
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003472:	e054      	b.n	800351e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d050      	beq.n	800351e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800347c:	f7fd feac 	bl	80011d8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	429a      	cmp	r2, r3
 800348a:	d902      	bls.n	8003492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d13d      	bne.n	800350e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034aa:	d111      	bne.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b4:	d004      	beq.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034be:	d107      	bne.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d8:	d10f      	bne.n	80034fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e017      	b.n	800353e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	3b01      	subs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4013      	ands	r3, r2
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	bf0c      	ite	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	2300      	movne	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	429a      	cmp	r2, r3
 800353a:	d19b      	bne.n	8003474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000020 	.word	0x20000020

0800354c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2200      	movs	r2, #0
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff ff6a 	bl	800343c <SPI_WaitFlagStateUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f043 0220 	orr.w	r2, r3, #32
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e000      	b.n	8003580 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d001      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e03a      	b.n	8003616 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_TIM_Base_Start_IT+0x98>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00e      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x58>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ca:	d009      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x58>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <HAL_TIM_Base_Start_IT+0x9c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d004      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x58>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a13      	ldr	r2, [pc, #76]	; (8003628 <HAL_TIM_Base_Start_IT+0xa0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d111      	bne.n	8003604 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b06      	cmp	r3, #6
 80035f0:	d010      	beq.n	8003614 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003602:	e007      	b.n	8003614 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800

0800362c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e041      	b.n	80036c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f005 fc44 	bl	8008ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3304      	adds	r3, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f000 faba 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_TIM_PWM_Start+0x24>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e022      	b.n	8003736 <HAL_TIM_PWM_Start+0x6a>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d109      	bne.n	800370a <HAL_TIM_PWM_Start+0x3e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	bf14      	ite	ne
 8003702:	2301      	movne	r3, #1
 8003704:	2300      	moveq	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	e015      	b.n	8003736 <HAL_TIM_PWM_Start+0x6a>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d109      	bne.n	8003724 <HAL_TIM_PWM_Start+0x58>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e008      	b.n	8003736 <HAL_TIM_PWM_Start+0x6a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e05e      	b.n	80037fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <HAL_TIM_PWM_Start+0x82>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800374c:	e013      	b.n	8003776 <HAL_TIM_PWM_Start+0xaa>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d104      	bne.n	800375e <HAL_TIM_PWM_Start+0x92>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800375c:	e00b      	b.n	8003776 <HAL_TIM_PWM_Start+0xaa>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d104      	bne.n	800376e <HAL_TIM_PWM_Start+0xa2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800376c:	e003      	b.n	8003776 <HAL_TIM_PWM_Start+0xaa>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	6839      	ldr	r1, [r7, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fc1a 	bl	8003fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <HAL_TIM_PWM_Start+0x138>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d107      	bne.n	800379e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a18      	ldr	r2, [pc, #96]	; (8003804 <HAL_TIM_PWM_Start+0x138>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <HAL_TIM_PWM_Start+0xfa>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d009      	beq.n	80037c6 <HAL_TIM_PWM_Start+0xfa>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a14      	ldr	r2, [pc, #80]	; (8003808 <HAL_TIM_PWM_Start+0x13c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_TIM_PWM_Start+0xfa>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a12      	ldr	r2, [pc, #72]	; (800380c <HAL_TIM_PWM_Start+0x140>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d111      	bne.n	80037ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b06      	cmp	r3, #6
 80037d6:	d010      	beq.n	80037fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e8:	e007      	b.n	80037fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800

08003810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0202 	mvn.w	r2, #2
 800383c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f9ab 	bl	8003bae <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f99e 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f9ad 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b04      	cmp	r3, #4
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0204 	mvn.w	r2, #4
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2202      	movs	r2, #2
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f981 	bl	8003bae <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f974 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f983 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d122      	bne.n	8003914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d11b      	bne.n	8003914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0208 	mvn.w	r2, #8
 80038e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2204      	movs	r2, #4
 80038ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f957 	bl	8003bae <HAL_TIM_IC_CaptureCallback>
 8003900:	e005      	b.n	800390e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f94a 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f959 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b10      	cmp	r3, #16
 8003920:	d122      	bne.n	8003968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b10      	cmp	r3, #16
 800392e:	d11b      	bne.n	8003968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0210 	mvn.w	r2, #16
 8003938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2208      	movs	r2, #8
 800393e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f92d 	bl	8003bae <HAL_TIM_IC_CaptureCallback>
 8003954:	e005      	b.n	8003962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f920 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f92f 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0201 	mvn.w	r2, #1
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 ffae 	bl	80048f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d10e      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	2b80      	cmp	r3, #128	; 0x80
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fb87 	bl	80040ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d10e      	bne.n	80039ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d107      	bne.n	80039ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f8f3 	bl	8003bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d10e      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d107      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0220 	mvn.w	r2, #32
 8003a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fb52 	bl	80040bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e0ac      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	f200 809f 	bhi.w	8003b88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003b89 	.word	0x08003b89
 8003a58:	08003b89 	.word	0x08003b89
 8003a5c:	08003b89 	.word	0x08003b89
 8003a60:	08003ac5 	.word	0x08003ac5
 8003a64:	08003b89 	.word	0x08003b89
 8003a68:	08003b89 	.word	0x08003b89
 8003a6c:	08003b89 	.word	0x08003b89
 8003a70:	08003b07 	.word	0x08003b07
 8003a74:	08003b89 	.word	0x08003b89
 8003a78:	08003b89 	.word	0x08003b89
 8003a7c:	08003b89 	.word	0x08003b89
 8003a80:	08003b47 	.word	0x08003b47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f90c 	bl	8003ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0208 	orr.w	r2, r2, #8
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0204 	bic.w	r2, r2, #4
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	619a      	str	r2, [r3, #24]
      break;
 8003ac2:	e062      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f952 	bl	8003d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6999      	ldr	r1, [r3, #24]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	021a      	lsls	r2, r3, #8
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	619a      	str	r2, [r3, #24]
      break;
 8003b04:	e041      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 f99b 	bl	8003e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0208 	orr.w	r2, r2, #8
 8003b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0204 	bic.w	r2, r2, #4
 8003b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69d9      	ldr	r1, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	61da      	str	r2, [r3, #28]
      break;
 8003b44:	e021      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 f9e5 	bl	8003f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69d9      	ldr	r1, [r3, #28]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	021a      	lsls	r2, r3, #8
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	61da      	str	r2, [r3, #28]
      break;
 8003b86:	e000      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a29      	ldr	r2, [pc, #164]	; (8003c9c <TIM_Base_SetConfig+0xb8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <TIM_Base_SetConfig+0x30>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c02:	d007      	beq.n	8003c14 <TIM_Base_SetConfig+0x30>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a26      	ldr	r2, [pc, #152]	; (8003ca0 <TIM_Base_SetConfig+0xbc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_Base_SetConfig+0x30>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a25      	ldr	r2, [pc, #148]	; (8003ca4 <TIM_Base_SetConfig+0xc0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d108      	bne.n	8003c26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <TIM_Base_SetConfig+0xb8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0x62>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0x62>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <TIM_Base_SetConfig+0xbc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0x62>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <TIM_Base_SetConfig+0xc0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <TIM_Base_SetConfig+0xb8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d103      	bne.n	8003c8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	615a      	str	r2, [r3, #20]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr
 8003c9c:	40012c00 	.word	0x40012c00
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800

08003ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f023 0201 	bic.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 0302 	bic.w	r3, r3, #2
 8003cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <TIM_OC1_SetConfig+0xc8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d10c      	bne.n	8003d1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 0308 	bic.w	r3, r3, #8
 8003d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <TIM_OC1_SetConfig+0xc8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d111      	bne.n	8003d4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40012c00 	.word	0x40012c00

08003d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0210 	bic.w	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0320 	bic.w	r3, r3, #32
 8003dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <TIM_OC2_SetConfig+0xd0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10d      	bne.n	8003df0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <TIM_OC2_SetConfig+0xd0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d113      	bne.n	8003e20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	40012c00 	.word	0x40012c00

08003e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <TIM_OC3_SetConfig+0xd0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d10d      	bne.n	8003ec2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <TIM_OC3_SetConfig+0xd0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d113      	bne.n	8003ef2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	621a      	str	r2, [r3, #32]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40012c00 	.word	0x40012c00

08003f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	031b      	lsls	r3, r3, #12
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a0f      	ldr	r2, [pc, #60]	; (8003fb4 <TIM_OC4_SetConfig+0x98>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d109      	bne.n	8003f90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	019b      	lsls	r3, r3, #6
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	40012c00 	.word	0x40012c00

08003fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	2201      	movs	r2, #1
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1a      	ldr	r2, [r3, #32]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	401a      	ands	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1a      	ldr	r2, [r3, #32]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004014:	2302      	movs	r3, #2
 8004016:	e046      	b.n	80040a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a16      	ldr	r2, [pc, #88]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004064:	d009      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10c      	bne.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	4313      	orrs	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr
 80040b0:	40012c00 	.word	0x40012c00
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40000800 	.word	0x40000800

080040bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr

080040ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e03f      	b.n	8004172 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f004 ff5c 	bl	8008fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	; 0x24
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f905 	bl	8004334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b08a      	sub	sp, #40	; 0x28
 800417e:	af02      	add	r7, sp, #8
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b20      	cmp	r3, #32
 8004198:	d17c      	bne.n	8004294 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_UART_Transmit+0x2c>
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e075      	b.n	8004296 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_UART_Transmit+0x3e>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e06e      	b.n	8004296 <HAL_UART_Transmit+0x11c>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2221      	movs	r2, #33	; 0x21
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ce:	f7fd f803 	bl	80011d8 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	88fa      	ldrh	r2, [r7, #6]
 80041de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e8:	d108      	bne.n	80041fc <HAL_UART_Transmit+0x82>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e003      	b.n	8004204 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800420c:	e02a      	b.n	8004264 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2200      	movs	r2, #0
 8004216:	2180      	movs	r1, #128	; 0x80
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f840 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e036      	b.n	8004296 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800423c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	3302      	adds	r3, #2
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	e007      	b.n	8004256 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	3301      	adds	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1cf      	bne.n	800420e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	2140      	movs	r1, #64	; 0x40
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f810 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e006      	b.n	8004296 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4613      	mov	r3, r2
 80042ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ae:	e02c      	b.n	800430a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d028      	beq.n	800430a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0x30>
 80042be:	f7fc ff8b 	bl	80011d8 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d21d      	bcs.n	800430a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e00f      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	429a      	cmp	r2, r3
 8004318:	bf0c      	ite	eq
 800431a:	2301      	moveq	r3, #1
 800431c:	2300      	movne	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	429a      	cmp	r2, r3
 8004326:	d0c3      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800436e:	f023 030c 	bic.w	r3, r3, #12
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	430b      	orrs	r3, r1
 800437a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2c      	ldr	r2, [pc, #176]	; (8004448 <UART_SetConfig+0x114>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d103      	bne.n	80043a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800439c:	f7fe fdf6 	bl	8002f8c <HAL_RCC_GetPCLK2Freq>
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	e002      	b.n	80043aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7fe fdde 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 80043a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009a      	lsls	r2, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	4a22      	ldr	r2, [pc, #136]	; (800444c <UART_SetConfig+0x118>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	0119      	lsls	r1, r3, #4
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	009a      	lsls	r2, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e0:	4b1a      	ldr	r3, [pc, #104]	; (800444c <UART_SetConfig+0x118>)
 80043e2:	fba3 0302 	umull	r0, r3, r3, r2
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	2064      	movs	r0, #100	; 0x64
 80043ea:	fb00 f303 	mul.w	r3, r0, r3
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	3332      	adds	r3, #50	; 0x32
 80043f4:	4a15      	ldr	r2, [pc, #84]	; (800444c <UART_SetConfig+0x118>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004400:	4419      	add	r1, r3
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	009a      	lsls	r2, r3, #2
 800440c:	441a      	add	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	fbb2 f2f3 	udiv	r2, r2, r3
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <UART_SetConfig+0x118>)
 800441a:	fba3 0302 	umull	r0, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	2064      	movs	r0, #100	; 0x64
 8004422:	fb00 f303 	mul.w	r3, r0, r3
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	3332      	adds	r3, #50	; 0x32
 800442c:	4a07      	ldr	r2, [pc, #28]	; (800444c <UART_SetConfig+0x118>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	f003 020f 	and.w	r2, r3, #15
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	440a      	add	r2, r1
 800443e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40013800 	.word	0x40013800
 800444c:	51eb851f 	.word	0x51eb851f

08004450 <map>:
static void MX_SPI2_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
 8004450:	b490      	push	{r4, r7}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	4604      	mov	r4, r0
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	461a      	mov	r2, r3
 800445e:	4623      	mov	r3, r4
 8004460:	80fb      	strh	r3, [r7, #6]
 8004462:	4603      	mov	r3, r0
 8004464:	80bb      	strh	r3, [r7, #4]
 8004466:	460b      	mov	r3, r1
 8004468:	807b      	strh	r3, [r7, #2]
 800446a:	4613      	mov	r3, r2
 800446c:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800446e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004472:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800447c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004480:	1a8a      	subs	r2, r1, r2
 8004482:	fb03 f202 	mul.w	r2, r3, r2
 8004486:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800448a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800448e:	1acb      	subs	r3, r1, r3
 8004490:	fb92 f3f3 	sdiv	r3, r2, r3
 8004494:	b29a      	uxth	r2, r3
 8004496:	883b      	ldrh	r3, [r7, #0]
 8004498:	4413      	add	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	b21b      	sxth	r3, r3
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc90      	pop	{r4, r7}
 80044a6:	4770      	bx	lr

080044a8 <_write>:

int _write(int file, char *ptr, int len)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	f04f 33ff 	mov.w	r3, #4294967295
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	4804      	ldr	r0, [pc, #16]	; (80044d0 <_write+0x28>)
 80044c0:	f7ff fe5b 	bl	800417a <HAL_UART_Transmit>
  return len;
 80044c4:	687b      	ldr	r3, [r7, #4]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2000019c 	.word	0x2000019c

080044d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044d8:	f7fc fe26 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044dc:	f000 f83e 	bl	800455c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044e0:	f000 f98a 	bl	80047f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80044e4:	f000 f87c 	bl	80045e0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80044e8:	f000 f8a8 	bl	800463c <MX_SPI2_Init>
  MX_TIM3_Init();
 80044ec:	f000 f8dc 	bl	80046a8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80044f0:	f000 f958 	bl	80047a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  while (MPU9255_Init(&hi2c1) == 1)
 80044f4:	e006      	b.n	8004504 <main+0x30>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80044f6:	2104      	movs	r1, #4
 80044f8:	4814      	ldr	r0, [pc, #80]	; (800454c <main+0x78>)
 80044fa:	f7fd f945 	bl	8001788 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80044fe:	2064      	movs	r0, #100	; 0x64
 8004500:	f7fc fe74 	bl	80011ec <HAL_Delay>
  while (MPU9255_Init(&hi2c1) == 1)
 8004504:	4812      	ldr	r0, [pc, #72]	; (8004550 <main+0x7c>)
 8004506:	f000 fb59 	bl	8004bbc <MPU9255_Init>
 800450a:	4603      	mov	r3, r0
 800450c:	2b01      	cmp	r3, #1
 800450e:	d0f2      	beq.n	80044f6 <main+0x22>
  }

  while (throttle_rc < 1020 || throttle_rc > 1050)
 8004510:	e002      	b.n	8004518 <main+0x44>
  {
    // Read again
    HAL_Delay(20);
 8004512:	2014      	movs	r0, #20
 8004514:	f7fc fe6a 	bl	80011ec <HAL_Delay>
  while (throttle_rc < 1020 || throttle_rc > 1050)
 8004518:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <main+0x80>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8004520:	dbf7      	blt.n	8004512 <main+0x3e>
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <main+0x80>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f240 421a 	movw	r2, #1050	; 0x41a
 800452a:	4293      	cmp	r3, r2
 800452c:	dcf1      	bgt.n	8004512 <main+0x3e>
  }

  HAL_TIM_Base_Start_IT(&htim3);
 800452e:	480a      	ldr	r0, [pc, #40]	; (8004558 <main+0x84>)
 8004530:	f7ff f82a 	bl	8003588 <HAL_TIM_Base_Start_IT>

  // int count;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004534:	210c      	movs	r1, #12
 8004536:	4808      	ldr	r0, [pc, #32]	; (8004558 <main+0x84>)
 8004538:	f7ff f8c8 	bl	80036cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800453c:	2108      	movs	r1, #8
 800453e:	4806      	ldr	r0, [pc, #24]	; (8004558 <main+0x84>)
 8004540:	f7ff f8c4 	bl	80036cc <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    runRadio();
 8004544:	f004 fb42 	bl	8008bcc <runRadio>
  {
 8004548:	e7fc      	b.n	8004544 <main+0x70>
 800454a:	bf00      	nop
 800454c:	40010c00 	.word	0x40010c00
 8004550:	200000a8 	.word	0x200000a8
 8004554:	2000025c 	.word	0x2000025c
 8004558:	20000154 	.word	0x20000154

0800455c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b090      	sub	sp, #64	; 0x40
 8004560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004562:	f107 0318 	add.w	r3, r7, #24
 8004566:	2228      	movs	r2, #40	; 0x28
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f004 fe7a 	bl	8009264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	605a      	str	r2, [r3, #4]
 8004578:	609a      	str	r2, [r3, #8]
 800457a:	60da      	str	r2, [r3, #12]
 800457c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800457e:	2302      	movs	r3, #2
 8004580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004582:	2301      	movs	r3, #1
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004586:	2310      	movs	r3, #16
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800458a:	2302      	movs	r3, #2
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800458e:	2300      	movs	r3, #0
 8004590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004592:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004596:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004598:	f107 0318 	add.w	r3, r7, #24
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe f90d 	bl	80027bc <HAL_RCC_OscConfig>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80045a8:	f000 fb02 	bl	8004bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045ac:	230f      	movs	r3, #15
 80045ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045b0:	2302      	movs	r3, #2
 80045b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045c2:	1d3b      	adds	r3, r7, #4
 80045c4:	2102      	movs	r1, #2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fb7a 	bl	8002cc0 <HAL_RCC_ClockConfig>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80045d2:	f000 faed 	bl	8004bb0 <Error_Handler>
  }
}
 80045d6:	bf00      	nop
 80045d8:	3740      	adds	r7, #64	; 0x40
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80045e4:	4b12      	ldr	r3, [pc, #72]	; (8004630 <MX_I2C1_Init+0x50>)
 80045e6:	4a13      	ldr	r2, [pc, #76]	; (8004634 <MX_I2C1_Init+0x54>)
 80045e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80045ea:	4b11      	ldr	r3, [pc, #68]	; (8004630 <MX_I2C1_Init+0x50>)
 80045ec:	4a12      	ldr	r2, [pc, #72]	; (8004638 <MX_I2C1_Init+0x58>)
 80045ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <MX_I2C1_Init+0x50>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <MX_I2C1_Init+0x50>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <MX_I2C1_Init+0x50>)
 80045fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004604:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <MX_I2C1_Init+0x50>)
 8004606:	2200      	movs	r2, #0
 8004608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <MX_I2C1_Init+0x50>)
 800460c:	2200      	movs	r2, #0
 800460e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <MX_I2C1_Init+0x50>)
 8004612:	2200      	movs	r2, #0
 8004614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <MX_I2C1_Init+0x50>)
 8004618:	2200      	movs	r2, #0
 800461a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800461c:	4804      	ldr	r0, [pc, #16]	; (8004630 <MX_I2C1_Init+0x50>)
 800461e:	f7fd f8cd 	bl	80017bc <HAL_I2C_Init>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004628:	f000 fac2 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800462c:	bf00      	nop
 800462e:	bd80      	pop	{r7, pc}
 8004630:	200000a8 	.word	0x200000a8
 8004634:	40005400 	.word	0x40005400
 8004638:	000186a0 	.word	0x000186a0

0800463c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <MX_SPI2_Init+0x64>)
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <MX_SPI2_Init+0x68>)
 8004644:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <MX_SPI2_Init+0x64>)
 8004648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800464c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <MX_SPI2_Init+0x64>)
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004654:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <MX_SPI2_Init+0x64>)
 8004656:	2200      	movs	r2, #0
 8004658:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <MX_SPI2_Init+0x64>)
 800465c:	2200      	movs	r2, #0
 800465e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <MX_SPI2_Init+0x64>)
 8004662:	2200      	movs	r2, #0
 8004664:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004666:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <MX_SPI2_Init+0x64>)
 8004668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <MX_SPI2_Init+0x64>)
 8004670:	2200      	movs	r2, #0
 8004672:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <MX_SPI2_Init+0x64>)
 8004676:	2200      	movs	r2, #0
 8004678:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <MX_SPI2_Init+0x64>)
 800467c:	2200      	movs	r2, #0
 800467e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <MX_SPI2_Init+0x64>)
 8004682:	2200      	movs	r2, #0
 8004684:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <MX_SPI2_Init+0x64>)
 8004688:	220a      	movs	r2, #10
 800468a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800468c:	4804      	ldr	r0, [pc, #16]	; (80046a0 <MX_SPI2_Init+0x64>)
 800468e:	f7fe fcaf 	bl	8002ff0 <HAL_SPI_Init>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004698:	f000 fa8a 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	200000fc 	.word	0x200000fc
 80046a4:	40003800 	.word	0x40003800

080046a8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046ae:	f107 0320 	add.w	r3, r7, #32
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046b8:	1d3b      	adds	r3, r7, #4
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	605a      	str	r2, [r3, #4]
 80046c0:	609a      	str	r2, [r3, #8]
 80046c2:	60da      	str	r2, [r3, #12]
 80046c4:	611a      	str	r2, [r3, #16]
 80046c6:	615a      	str	r2, [r3, #20]
 80046c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046ca:	4b34      	ldr	r3, [pc, #208]	; (800479c <MX_TIM3_Init+0xf4>)
 80046cc:	4a34      	ldr	r2, [pc, #208]	; (80047a0 <MX_TIM3_Init+0xf8>)
 80046ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80046d0:	4b32      	ldr	r3, [pc, #200]	; (800479c <MX_TIM3_Init+0xf4>)
 80046d2:	223f      	movs	r2, #63	; 0x3f
 80046d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d6:	4b31      	ldr	r3, [pc, #196]	; (800479c <MX_TIM3_Init+0xf4>)
 80046d8:	2200      	movs	r2, #0
 80046da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80046dc:	4b2f      	ldr	r3, [pc, #188]	; (800479c <MX_TIM3_Init+0xf4>)
 80046de:	f644 6220 	movw	r2, #20000	; 0x4e20
 80046e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046e4:	4b2d      	ldr	r3, [pc, #180]	; (800479c <MX_TIM3_Init+0xf4>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046ea:	4b2c      	ldr	r3, [pc, #176]	; (800479c <MX_TIM3_Init+0xf4>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80046f0:	482a      	ldr	r0, [pc, #168]	; (800479c <MX_TIM3_Init+0xf4>)
 80046f2:	f7fe ff9b 	bl	800362c <HAL_TIM_PWM_Init>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80046fc:	f000 fa58 	bl	8004bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004700:	2300      	movs	r3, #0
 8004702:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004704:	2300      	movs	r3, #0
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004708:	f107 0320 	add.w	r3, r7, #32
 800470c:	4619      	mov	r1, r3
 800470e:	4823      	ldr	r0, [pc, #140]	; (800479c <MX_TIM3_Init+0xf4>)
 8004710:	f7ff fc76 	bl	8004000 <HAL_TIMEx_MasterConfigSynchronization>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800471a:	f000 fa49 	bl	8004bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800471e:	2360      	movs	r3, #96	; 0x60
 8004720:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800472e:	1d3b      	adds	r3, r7, #4
 8004730:	2200      	movs	r2, #0
 8004732:	4619      	mov	r1, r3
 8004734:	4819      	ldr	r0, [pc, #100]	; (800479c <MX_TIM3_Init+0xf4>)
 8004736:	f7ff f973 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004740:	f000 fa36 	bl	8004bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	2204      	movs	r2, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4814      	ldr	r0, [pc, #80]	; (800479c <MX_TIM3_Init+0xf4>)
 800474c:	f7ff f968 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004756:	f000 fa2b 	bl	8004bb0 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 800475a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800475e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004760:	1d3b      	adds	r3, r7, #4
 8004762:	2208      	movs	r2, #8
 8004764:	4619      	mov	r1, r3
 8004766:	480d      	ldr	r0, [pc, #52]	; (800479c <MX_TIM3_Init+0xf4>)
 8004768:	f7ff f95a 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8004772:	f000 fa1d 	bl	8004bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004776:	1d3b      	adds	r3, r7, #4
 8004778:	220c      	movs	r2, #12
 800477a:	4619      	mov	r1, r3
 800477c:	4807      	ldr	r0, [pc, #28]	; (800479c <MX_TIM3_Init+0xf4>)
 800477e:	f7ff f94f 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8004788:	f000 fa12 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800478c:	4803      	ldr	r0, [pc, #12]	; (800479c <MX_TIM3_Init+0xf4>)
 800478e:	f004 fbcd 	bl	8008f2c <HAL_TIM_MspPostInit>
}
 8004792:	bf00      	nop
 8004794:	3728      	adds	r7, #40	; 0x28
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000154 	.word	0x20000154
 80047a0:	40000400 	.word	0x40000400

080047a4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80047a8:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047aa:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <MX_USART1_UART_Init+0x50>)
 80047ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80047b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047b6:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047c2:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047ca:	220c      	movs	r2, #12
 80047cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047da:	4805      	ldr	r0, [pc, #20]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047dc:	f7ff fc80 	bl	80040e0 <HAL_UART_Init>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80047e6:	f000 f9e3 	bl	8004bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	2000019c 	.word	0x2000019c
 80047f4:	40013800 	.word	0x40013800

080047f8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fe:	f107 0310 	add.w	r3, r7, #16
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800480c:	4b33      	ldr	r3, [pc, #204]	; (80048dc <MX_GPIO_Init+0xe4>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	4a32      	ldr	r2, [pc, #200]	; (80048dc <MX_GPIO_Init+0xe4>)
 8004812:	f043 0310 	orr.w	r3, r3, #16
 8004816:	6193      	str	r3, [r2, #24]
 8004818:	4b30      	ldr	r3, [pc, #192]	; (80048dc <MX_GPIO_Init+0xe4>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004824:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <MX_GPIO_Init+0xe4>)
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <MX_GPIO_Init+0xe4>)
 800482a:	f043 0304 	orr.w	r3, r3, #4
 800482e:	6193      	str	r3, [r2, #24]
 8004830:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <MX_GPIO_Init+0xe4>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <MX_GPIO_Init+0xe4>)
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	4a26      	ldr	r2, [pc, #152]	; (80048dc <MX_GPIO_Init+0xe4>)
 8004842:	f043 0308 	orr.w	r3, r3, #8
 8004846:	6193      	str	r3, [r2, #24]
 8004848:	4b24      	ldr	r3, [pc, #144]	; (80048dc <MX_GPIO_Init+0xe4>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin, GPIO_PIN_RESET);
 8004854:	2200      	movs	r2, #0
 8004856:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800485a:	4821      	ldr	r0, [pc, #132]	; (80048e0 <MX_GPIO_Init+0xe8>)
 800485c:	f7fc ff7c 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin | NRF_CSN_Pin, GPIO_PIN_RESET);
 8004860:	2200      	movs	r2, #0
 8004862:	f241 0104 	movw	r1, #4100	; 0x1004
 8004866:	481f      	ldr	r0, [pc, #124]	; (80048e4 <MX_GPIO_Init+0xec>)
 8004868:	f7fc ff76 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800486c:	2200      	movs	r2, #0
 800486e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004872:	481d      	ldr	r0, [pc, #116]	; (80048e8 <MX_GPIO_Init+0xf0>)
 8004874:	f7fc ff70 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8004878:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800487c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800487e:	2301      	movs	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004886:	2302      	movs	r3, #2
 8004888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800488a:	f107 0310 	add.w	r3, r7, #16
 800488e:	4619      	mov	r1, r3
 8004890:	4813      	ldr	r0, [pc, #76]	; (80048e0 <MX_GPIO_Init+0xe8>)
 8004892:	f7fc fddd 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin | NRF_CSN_Pin;
 8004896:	f241 0304 	movw	r3, #4100	; 0x1004
 800489a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800489c:	2301      	movs	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a4:	2302      	movs	r3, #2
 80048a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a8:	f107 0310 	add.w	r3, r7, #16
 80048ac:	4619      	mov	r1, r3
 80048ae:	480d      	ldr	r0, [pc, #52]	; (80048e4 <MX_GPIO_Init+0xec>)
 80048b0:	f7fc fdce 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 80048b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ba:	2301      	movs	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c2:	2302      	movs	r3, #2
 80048c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 80048c6:	f107 0310 	add.w	r3, r7, #16
 80048ca:	4619      	mov	r1, r3
 80048cc:	4806      	ldr	r0, [pc, #24]	; (80048e8 <MX_GPIO_Init+0xf0>)
 80048ce:	f7fc fdbf 	bl	8001450 <HAL_GPIO_Init>
}
 80048d2:	bf00      	nop
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40011000 	.word	0x40011000
 80048e4:	40010c00 	.word	0x40010c00
 80048e8:	40010800 	.word	0x40010800
 80048ec:	00000000 	.word	0x00000000

080048f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af04      	add	r7, sp, #16
 80048f6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim3.Instance)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b9a      	ldr	r3, [pc, #616]	; (8004b68 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	f040 8123 	bne.w	8004b4c <HAL_TIM_PeriodElapsedCallback+0x25c>
  {
    readAll(&hi2c1, &MPU9255);
 8004906:	4999      	ldr	r1, [pc, #612]	; (8004b6c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004908:	4899      	ldr	r0, [pc, #612]	; (8004b70 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800490a:	f000 f9bd 	bl	8004c88 <readAll>
    abs_yaw_angle = abs_yaw_angle + MPU9255.GyroX * 0.02;
 800490e:	4b99      	ldr	r3, [pc, #612]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fb fd80 	bl	8000418 <__aeabi_f2d>
 8004918:	4604      	mov	r4, r0
 800491a:	460d      	mov	r5, r1
 800491c:	4b93      	ldr	r3, [pc, #588]	; (8004b6c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fb fd79 	bl	8000418 <__aeabi_f2d>
 8004926:	a38c      	add	r3, pc, #560	; (adr r3, 8004b58 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f7fb fdcc 	bl	80004c8 <__aeabi_dmul>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4620      	mov	r0, r4
 8004936:	4629      	mov	r1, r5
 8004938:	f7fb fc10 	bl	800015c <__adddf3>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	f7fc f890 	bl	8000a68 <__aeabi_d2f>
 8004948:	4603      	mov	r3, r0
 800494a:	4a8a      	ldr	r2, [pc, #552]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800494c:	6013      	str	r3, [r2, #0]
    // receive rc

    // convert to us
    throttle_rc = map(throttle_rc, 0, 4095, 1000, 2000);
 800494e:	4b8a      	ldr	r3, [pc, #552]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	b218      	sxth	r0, r3
 8004954:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800495e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004962:	2100      	movs	r1, #0
 8004964:	f7ff fd74 	bl	8004450 <map>
 8004968:	4603      	mov	r3, r0
 800496a:	461a      	mov	r2, r3
 800496c:	4b82      	ldr	r3, [pc, #520]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800496e:	601a      	str	r2, [r3, #0]
    setpoint_roll = map(roll_rc, 0, 4095, 1000, 2000);
 8004970:	4b82      	ldr	r3, [pc, #520]	; (8004b7c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	b218      	sxth	r0, r3
 8004976:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004980:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004984:	2100      	movs	r1, #0
 8004986:	f7ff fd63 	bl	8004450 <map>
 800498a:	4603      	mov	r3, r0
 800498c:	4618      	mov	r0, r3
 800498e:	f7fc f975 	bl	8000c7c <__aeabi_i2f>
 8004992:	4603      	mov	r3, r0
 8004994:	4a7a      	ldr	r2, [pc, #488]	; (8004b80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004996:	6013      	str	r3, [r2, #0]
    setpoint_pitch = map(pitch_rc, 0, 4095, 1000, 2000);
 8004998:	4b7a      	ldr	r3, [pc, #488]	; (8004b84 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	b218      	sxth	r0, r3
 800499e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049a8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80049ac:	2100      	movs	r1, #0
 80049ae:	f7ff fd4f 	bl	8004450 <map>
 80049b2:	4603      	mov	r3, r0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fc f961 	bl	8000c7c <__aeabi_i2f>
 80049ba:	4603      	mov	r3, r0
 80049bc:	4a72      	ldr	r2, [pc, #456]	; (8004b88 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80049be:	6013      	str	r3, [r2, #0]
    yaw_rc = map(yaw_rc, 0, 4095, 1000, 2000);
 80049c0:	4b72      	ldr	r3, [pc, #456]	; (8004b8c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	b218      	sxth	r0, r3
 80049c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80049d4:	2100      	movs	r1, #0
 80049d6:	f7ff fd3b 	bl	8004450 <map>
 80049da:	4603      	mov	r3, r0
 80049dc:	461a      	mov	r2, r3
 80049de:	4b6b      	ldr	r3, [pc, #428]	; (8004b8c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80049e0:	601a      	str	r2, [r3, #0]

    if (yaw_rc > 1390)
 80049e2:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f240 526e 	movw	r2, #1390	; 0x56e
 80049ea:	4293      	cmp	r3, r2
 80049ec:	dd13      	ble.n	8004a16 <HAL_TIM_PeriodElapsedCallback+0x126>
    {
      setpoint_yaw = setpoint_yaw + 0.7; // 0.7 is the rate of change of yaw
 80049ee:	4b68      	ldr	r3, [pc, #416]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fb fd10 	bl	8000418 <__aeabi_f2d>
 80049f8:	a359      	add	r3, pc, #356	; (adr r3, 8004b60 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f7fb fbad 	bl	800015c <__adddf3>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f7fc f82d 	bl	8000a68 <__aeabi_d2f>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4a5f      	ldr	r2, [pc, #380]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e018      	b.n	8004a48 <HAL_TIM_PeriodElapsedCallback+0x158>
    }                                    // more than 0.7 means faster yaw rotation
                                         // less than 0.7 means slower yaw rotation
    else if (yaw_rc < 1357)
 8004a16:	4b5d      	ldr	r3, [pc, #372]	; (8004b8c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f240 524c 	movw	r2, #1356	; 0x54c
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	dc12      	bgt.n	8004a48 <HAL_TIM_PeriodElapsedCallback+0x158>
    {
      setpoint_yaw = setpoint_yaw - 0.7;
 8004a22:	4b5b      	ldr	r3, [pc, #364]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fb fcf6 	bl	8000418 <__aeabi_f2d>
 8004a2c:	a34c      	add	r3, pc, #304	; (adr r3, 8004b60 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f7fb fb91 	bl	8000158 <__aeabi_dsub>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f7fc f813 	bl	8000a68 <__aeabi_d2f>
 8004a42:	4603      	mov	r3, r0
 8004a44:	4a52      	ldr	r2, [pc, #328]	; (8004b90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004a46:	6013      	str	r3, [r2, #0]
    }
    // calculate PID
    calculate_PID(roll_rc, pitch_rc, yaw_rc, MPU9255.roll, MPU9255.pitch, MPU9255.yaw, &pid);
 8004a48:	4b4c      	ldr	r3, [pc, #304]	; (8004b7c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fc f915 	bl	8000c7c <__aeabi_i2f>
 8004a52:	4604      	mov	r4, r0
 8004a54:	4b4b      	ldr	r3, [pc, #300]	; (8004b84 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fc f90f 	bl	8000c7c <__aeabi_i2f>
 8004a5e:	4605      	mov	r5, r0
 8004a60:	4b4a      	ldr	r3, [pc, #296]	; (8004b8c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fc f909 	bl	8000c7c <__aeabi_i2f>
 8004a6a:	4b40      	ldr	r3, [pc, #256]	; (8004b6c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004a6c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004a6e:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	4a3e      	ldr	r2, [pc, #248]	; (8004b6c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004a74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a76:	4e47      	ldr	r6, [pc, #284]	; (8004b94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004a78:	9602      	str	r6, [sp, #8]
 8004a7a:	9201      	str	r2, [sp, #4]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4602      	mov	r2, r0
 8004a82:	4629      	mov	r1, r5
 8004a84:	4620      	mov	r0, r4
 8004a86:	f003 fd9f 	bl	80085c8 <calculate_PID>

    // value PWM
    esc_right = throttle_rc + pid.PID_roll_out - 70;
 8004a8a:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fc f8f4 	bl	8000c7c <__aeabi_i2f>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b3f      	ldr	r3, [pc, #252]	; (8004b94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7fc f839 	bl	8000b14 <__addsf3>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	493c      	ldr	r1, [pc, #240]	; (8004b98 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fc f832 	bl	8000b10 <__aeabi_fsub>
 8004aac:	4603      	mov	r3, r0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc fb14 	bl	80010dc <__aeabi_f2iz>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4a39      	ldr	r2, [pc, #228]	; (8004b9c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004ab8:	6013      	str	r3, [r2, #0]
    esc_left = throttle_rc - pid.PID_roll_out;
 8004aba:	4b2f      	ldr	r3, [pc, #188]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc f8dc 	bl	8000c7c <__aeabi_i2f>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b33      	ldr	r3, [pc, #204]	; (8004b94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f7fc f81f 	bl	8000b10 <__aeabi_fsub>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fc fb01 	bl	80010dc <__aeabi_f2iz>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4a30      	ldr	r2, [pc, #192]	; (8004ba0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004ade:	6013      	str	r3, [r2, #0]
    servo_right = 1500 + pid.PID_pitch_out - pid.PID_yaw_out + SERVO_RIGHT_OFFSET;
 8004ae0:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	492f      	ldr	r1, [pc, #188]	; (8004ba4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fc f814 	bl	8000b14 <__addsf3>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4619      	mov	r1, r3
 8004af6:	4610      	mov	r0, r2
 8004af8:	f7fc f80a 	bl	8000b10 <__aeabi_fsub>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f04f 0100 	mov.w	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fc f806 	bl	8000b14 <__addsf3>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fc fae6 	bl	80010dc <__aeabi_f2iz>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004b14:	6013      	str	r3, [r2, #0]
    servo_left = 1500 - pid.PID_pitch_out - pid.PID_yaw_out + SERVO_LEFT_OFFSET;
 8004b16:	4b1f      	ldr	r3, [pc, #124]	; (8004b94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4821      	ldr	r0, [pc, #132]	; (8004ba4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004b1e:	f7fb fff7 	bl	8000b10 <__aeabi_fsub>
 8004b22:	4603      	mov	r3, r0
 8004b24:	461a      	mov	r2, r3
 8004b26:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f7fb ffef 	bl	8000b10 <__aeabi_fsub>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fb ffeb 	bl	8000b14 <__addsf3>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fc facb 	bl	80010dc <__aeabi_f2iz>
 8004b46:	4603      	mov	r3, r0
 8004b48:	4a18      	ldr	r2, [pc, #96]	; (8004bac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004b4a:	6013      	str	r3, [r2, #0]
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b54:	f3af 8000 	nop.w
 8004b58:	47ae147b 	.word	0x47ae147b
 8004b5c:	3f947ae1 	.word	0x3f947ae1
 8004b60:	66666666 	.word	0x66666666
 8004b64:	3fe66666 	.word	0x3fe66666
 8004b68:	20000154 	.word	0x20000154
 8004b6c:	200001e0 	.word	0x200001e0
 8004b70:	200000a8 	.word	0x200000a8
 8004b74:	2000023c 	.word	0x2000023c
 8004b78:	2000025c 	.word	0x2000025c
 8004b7c:	20000250 	.word	0x20000250
 8004b80:	20000230 	.word	0x20000230
 8004b84:	20000254 	.word	0x20000254
 8004b88:	20000234 	.word	0x20000234
 8004b8c:	20000258 	.word	0x20000258
 8004b90:	20000238 	.word	0x20000238
 8004b94:	20000224 	.word	0x20000224
 8004b98:	428c0000 	.word	0x428c0000
 8004b9c:	20000248 	.word	0x20000248
 8004ba0:	2000024c 	.word	0x2000024c
 8004ba4:	44bb8000 	.word	0x44bb8000
 8004ba8:	20000240 	.word	0x20000240
 8004bac:	20000244 	.word	0x20000244

08004bb0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <MPU9255_Init>:
//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af04      	add	r7, sp, #16
 8004bc2:	6078      	str	r0, [r7, #4]
    // pre-def. vars
    uint8_t readData;
    uint8_t writeData;

    // read MPU9255 WHOAMI
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 8004bc4:	2364      	movs	r3, #100	; 0x64
 8004bc6:	9302      	str	r3, [sp, #8]
 8004bc8:	2301      	movs	r3, #1
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	f107 030f 	add.w	r3, r7, #15
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	2275      	movs	r2, #117	; 0x75
 8004bd6:	21d0      	movs	r1, #208	; 0xd0
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7fd f82d 	bl	8001c38 <HAL_I2C_Mem_Read>

    if (readData == 113)
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b71      	cmp	r3, #113	; 0x71
 8004be2:	d13e      	bne.n	8004c62 <MPU9255_Init+0xa6>
    {
        // Start by performing self test and reporting values
        MPU9250SelfTest(I2Cx, SelfTest);
 8004be4:	4921      	ldr	r1, [pc, #132]	; (8004c6c <MPU9255_Init+0xb0>)
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f001 fc9a 	bl	8006520 <MPU9250SelfTest>

        // Calibrate gyro and accelerometers, load biases in bias registers
        calibrateMPU9250(I2Cx, gyroBias, accelBias);
 8004bec:	4a20      	ldr	r2, [pc, #128]	; (8004c70 <MPU9255_Init+0xb4>)
 8004bee:	4921      	ldr	r1, [pc, #132]	; (8004c74 <MPU9255_Init+0xb8>)
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f001 f85f 	bl	8005cb4 <calibrateMPU9250>
        HAL_Delay(1000);
 8004bf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bfa:	f7fc faf7 	bl	80011ec <HAL_Delay>

        // init Gyro and Accelerometer
        initMPU9250(I2Cx);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 ff76 	bl	8005af0 <initMPU9250>

        // enable Mag bypass
        writeData = 0x22;
 8004c04:	2322      	movs	r3, #34	; 0x22
 8004c06:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 8004c08:	2364      	movs	r3, #100	; 0x64
 8004c0a:	9302      	str	r3, [sp, #8]
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	f107 030e 	add.w	r3, r7, #14
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2301      	movs	r3, #1
 8004c18:	2237      	movs	r2, #55	; 0x37
 8004c1a:	21d0      	movs	r1, #208	; 0xd0
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fc ff11 	bl	8001a44 <HAL_I2C_Mem_Write>

        // Read the WHO_AM_I register of the magnetometer
        HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout); // Read WHO_AM_I register for AK8963
 8004c22:	2364      	movs	r3, #100	; 0x64
 8004c24:	9302      	str	r3, [sp, #8]
 8004c26:	2301      	movs	r3, #1
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	f107 030f 	add.w	r3, r7, #15
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2301      	movs	r3, #1
 8004c32:	2200      	movs	r2, #0
 8004c34:	2118      	movs	r1, #24
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fffe 	bl	8001c38 <HAL_I2C_Mem_Read>

        HAL_Delay(1000);
 8004c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c40:	f7fc fad4 	bl	80011ec <HAL_Delay>

        // Get magnetometer calibration from AK8963 ROM
        initAK8963(I2Cx, magCalibration); // Initialize device for active mode read of magnetometer
 8004c44:	490c      	ldr	r1, [pc, #48]	; (8004c78 <MPU9255_Init+0xbc>)
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fd16 	bl	8005678 <initAK8963>

        calibrateMag(I2Cx, magBias, magScale);
 8004c4c:	4a0b      	ldr	r2, [pc, #44]	; (8004c7c <MPU9255_Init+0xc0>)
 8004c4e:	490c      	ldr	r1, [pc, #48]	; (8004c80 <MPU9255_Init+0xc4>)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fde3 	bl	800581c <calibrateMag>

        HAL_Delay(1000);
 8004c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c5a:	f7fc fac7 	bl	80011ec <HAL_Delay>
        return 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <MPU9255_Init+0xa8>
    }
    return 1; // Loop forever if communication doesn't happen
 8004c62:	2301      	movs	r3, #1
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	200002c0 	.word	0x200002c0
 8004c70:	2000029c 	.word	0x2000029c
 8004c74:	20000290 	.word	0x20000290
 8004c78:	20000284 	.word	0x20000284
 8004c7c:	200002b4 	.word	0x200002b4
 8004c80:	200002a8 	.word	0x200002a8
 8004c84:	00000000 	.word	0x00000000

08004c88 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t *DataStruct)
{
 8004c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c8c:	b08b      	sub	sp, #44	; 0x2c
 8004c8e:	af06      	add	r7, sp, #24
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
    uint8_t Data;

    // If intPin goes high, all data registers have new data
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8004c94:	2364      	movs	r3, #100	; 0x64
 8004c96:	9302      	str	r3, [sp, #8]
 8004c98:	2301      	movs	r3, #1
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	f107 030f 	add.w	r3, r7, #15
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	223a      	movs	r2, #58	; 0x3a
 8004ca6:	21d0      	movs	r1, #208	; 0xd0
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7fc ffc5 	bl	8001c38 <HAL_I2C_Mem_Read>
    if (Data & 0x01)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8123 	beq.w	8004f00 <readAll+0x278>
    {                                    // On interrupt, check if data ready interrupt
        readAccelData(I2Cx, accelCount); // Read the x/y/z adc values
 8004cba:	4997      	ldr	r1, [pc, #604]	; (8004f18 <readAll+0x290>)
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fc29 	bl	8005514 <readAccelData>
        getAres();
 8004cc2:	f000 fbf9 	bl	80054b8 <getAres>

        // Now we'll calculate the accleration value into actual g's
        ax = (float)accelCount[0] * aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 8004cc6:	4b94      	ldr	r3, [pc, #592]	; (8004f18 <readAll+0x290>)
 8004cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fb ffd5 	bl	8000c7c <__aeabi_i2f>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b91      	ldr	r3, [pc, #580]	; (8004f1c <readAll+0x294>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f7fc f822 	bl	8000d24 <__aeabi_fmul>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4b8e      	ldr	r3, [pc, #568]	; (8004f20 <readAll+0x298>)
 8004ce6:	601a      	str	r2, [r3, #0]
        ay = (float)accelCount[1] * aRes; // - accelBias[1];
 8004ce8:	4b8b      	ldr	r3, [pc, #556]	; (8004f18 <readAll+0x290>)
 8004cea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb ffc4 	bl	8000c7c <__aeabi_i2f>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b89      	ldr	r3, [pc, #548]	; (8004f1c <readAll+0x294>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f7fc f811 	bl	8000d24 <__aeabi_fmul>
 8004d02:	4603      	mov	r3, r0
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b87      	ldr	r3, [pc, #540]	; (8004f24 <readAll+0x29c>)
 8004d08:	601a      	str	r2, [r3, #0]
        az = (float)accelCount[2] * aRes; // - accelBias[2];
 8004d0a:	4b83      	ldr	r3, [pc, #524]	; (8004f18 <readAll+0x290>)
 8004d0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fb ffb3 	bl	8000c7c <__aeabi_i2f>
 8004d16:	4602      	mov	r2, r0
 8004d18:	4b80      	ldr	r3, [pc, #512]	; (8004f1c <readAll+0x294>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f7fc f800 	bl	8000d24 <__aeabi_fmul>
 8004d24:	4603      	mov	r3, r0
 8004d26:	461a      	mov	r2, r3
 8004d28:	4b7f      	ldr	r3, [pc, #508]	; (8004f28 <readAll+0x2a0>)
 8004d2a:	601a      	str	r2, [r3, #0]

        DataStruct->AccelX = ax;
 8004d2c:	4b7c      	ldr	r3, [pc, #496]	; (8004f20 <readAll+0x298>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	601a      	str	r2, [r3, #0]
        DataStruct->AccelY = ay;
 8004d34:	4b7b      	ldr	r3, [pc, #492]	; (8004f24 <readAll+0x29c>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	605a      	str	r2, [r3, #4]
        DataStruct->AccelZ = az;
 8004d3c:	4b7a      	ldr	r3, [pc, #488]	; (8004f28 <readAll+0x2a0>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	609a      	str	r2, [r3, #8]

        readGyroData(I2Cx, gyroCount); // Read the x/y/z adc values
 8004d44:	4979      	ldr	r1, [pc, #484]	; (8004f2c <readAll+0x2a4>)
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fc17 	bl	800557a <readGyroData>
        getGres();
 8004d4c:	f000 fb82 	bl	8005454 <getGres>

        // Calculate the gyro value into actual degrees per second
        gx = (float)gyroCount[0] * gRes; // get actual gyro value, this depends on scale being set
 8004d50:	4b76      	ldr	r3, [pc, #472]	; (8004f2c <readAll+0x2a4>)
 8004d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fb ff90 	bl	8000c7c <__aeabi_i2f>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b74      	ldr	r3, [pc, #464]	; (8004f30 <readAll+0x2a8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f7fb ffdd 	bl	8000d24 <__aeabi_fmul>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4b71      	ldr	r3, [pc, #452]	; (8004f34 <readAll+0x2ac>)
 8004d70:	601a      	str	r2, [r3, #0]
        gy = (float)gyroCount[1] * gRes;
 8004d72:	4b6e      	ldr	r3, [pc, #440]	; (8004f2c <readAll+0x2a4>)
 8004d74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fb ff7f 	bl	8000c7c <__aeabi_i2f>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	4b6b      	ldr	r3, [pc, #428]	; (8004f30 <readAll+0x2a8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f7fb ffcc 	bl	8000d24 <__aeabi_fmul>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b69      	ldr	r3, [pc, #420]	; (8004f38 <readAll+0x2b0>)
 8004d92:	601a      	str	r2, [r3, #0]
        gz = (float)gyroCount[2] * gRes;
 8004d94:	4b65      	ldr	r3, [pc, #404]	; (8004f2c <readAll+0x2a4>)
 8004d96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb ff6e 	bl	8000c7c <__aeabi_i2f>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b63      	ldr	r3, [pc, #396]	; (8004f30 <readAll+0x2a8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f7fb ffbb 	bl	8000d24 <__aeabi_fmul>
 8004dae:	4603      	mov	r3, r0
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b62      	ldr	r3, [pc, #392]	; (8004f3c <readAll+0x2b4>)
 8004db4:	601a      	str	r2, [r3, #0]

        DataStruct->GyroX = gx;
 8004db6:	4b5f      	ldr	r3, [pc, #380]	; (8004f34 <readAll+0x2ac>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	60da      	str	r2, [r3, #12]
        DataStruct->GyroY = gy;
 8004dbe:	4b5e      	ldr	r3, [pc, #376]	; (8004f38 <readAll+0x2b0>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	611a      	str	r2, [r3, #16]
        DataStruct->GyroZ = gz;
 8004dc6:	4b5d      	ldr	r3, [pc, #372]	; (8004f3c <readAll+0x2b4>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	615a      	str	r2, [r3, #20]

        readMagData(I2Cx, magCount); // Read the x/y/z adc values
 8004dce:	495c      	ldr	r1, [pc, #368]	; (8004f40 <readAll+0x2b8>)
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fc05 	bl	80055e0 <readMagData>
        getMres();
 8004dd6:	f000 fb1f 	bl	8005418 <getMres>

        // Calculate the magnetometer values in milliGauss
        // Include factory calibration per data sheet and user environmental corrections
        mx = (float)magCount[0] * mRes * magCalibration[0] - magBias[0]; // get actual magnetometer value, this depends on scale being set
 8004dda:	4b59      	ldr	r3, [pc, #356]	; (8004f40 <readAll+0x2b8>)
 8004ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fb ff4b 	bl	8000c7c <__aeabi_i2f>
 8004de6:	4602      	mov	r2, r0
 8004de8:	4b56      	ldr	r3, [pc, #344]	; (8004f44 <readAll+0x2bc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f7fb ff98 	bl	8000d24 <__aeabi_fmul>
 8004df4:	4603      	mov	r3, r0
 8004df6:	461a      	mov	r2, r3
 8004df8:	4b53      	ldr	r3, [pc, #332]	; (8004f48 <readAll+0x2c0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f7fb ff90 	bl	8000d24 <__aeabi_fmul>
 8004e04:	4603      	mov	r3, r0
 8004e06:	461a      	mov	r2, r3
 8004e08:	4b50      	ldr	r3, [pc, #320]	; (8004f4c <readAll+0x2c4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7fb fe7e 	bl	8000b10 <__aeabi_fsub>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b4d      	ldr	r3, [pc, #308]	; (8004f50 <readAll+0x2c8>)
 8004e1a:	601a      	str	r2, [r3, #0]
        my = (float)magCount[1] * mRes * magCalibration[1] - magBias[1];
 8004e1c:	4b48      	ldr	r3, [pc, #288]	; (8004f40 <readAll+0x2b8>)
 8004e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fb ff2a 	bl	8000c7c <__aeabi_i2f>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b46      	ldr	r3, [pc, #280]	; (8004f44 <readAll+0x2bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f7fb ff77 	bl	8000d24 <__aeabi_fmul>
 8004e36:	4603      	mov	r3, r0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b43      	ldr	r3, [pc, #268]	; (8004f48 <readAll+0x2c0>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f7fb ff6f 	bl	8000d24 <__aeabi_fmul>
 8004e46:	4603      	mov	r3, r0
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b40      	ldr	r3, [pc, #256]	; (8004f4c <readAll+0x2c4>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7fb fe5d 	bl	8000b10 <__aeabi_fsub>
 8004e56:	4603      	mov	r3, r0
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <readAll+0x2cc>)
 8004e5c:	601a      	str	r2, [r3, #0]
        mz = (float)magCount[2] * mRes * magCalibration[2] - magBias[2];
 8004e5e:	4b38      	ldr	r3, [pc, #224]	; (8004f40 <readAll+0x2b8>)
 8004e60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fb ff09 	bl	8000c7c <__aeabi_i2f>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4b35      	ldr	r3, [pc, #212]	; (8004f44 <readAll+0x2bc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f7fb ff56 	bl	8000d24 <__aeabi_fmul>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4b32      	ldr	r3, [pc, #200]	; (8004f48 <readAll+0x2c0>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7fb ff4e 	bl	8000d24 <__aeabi_fmul>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	4b2f      	ldr	r3, [pc, #188]	; (8004f4c <readAll+0x2c4>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f7fb fe3c 	bl	8000b10 <__aeabi_fsub>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	4b2e      	ldr	r3, [pc, #184]	; (8004f58 <readAll+0x2d0>)
 8004e9e:	601a      	str	r2, [r3, #0]
        mx *= magScale[0];
 8004ea0:	4b2e      	ldr	r3, [pc, #184]	; (8004f5c <readAll+0x2d4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2a      	ldr	r2, [pc, #168]	; (8004f50 <readAll+0x2c8>)
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fb ff3a 	bl	8000d24 <__aeabi_fmul>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <readAll+0x2c8>)
 8004eb6:	601a      	str	r2, [r3, #0]
        my *= magScale[1];
 8004eb8:	4b28      	ldr	r3, [pc, #160]	; (8004f5c <readAll+0x2d4>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a25      	ldr	r2, [pc, #148]	; (8004f54 <readAll+0x2cc>)
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fb ff2e 	bl	8000d24 <__aeabi_fmul>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4b21      	ldr	r3, [pc, #132]	; (8004f54 <readAll+0x2cc>)
 8004ece:	601a      	str	r2, [r3, #0]
        mz *= magScale[2];
 8004ed0:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <readAll+0x2d4>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4a20      	ldr	r2, [pc, #128]	; (8004f58 <readAll+0x2d0>)
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fb ff22 	bl	8000d24 <__aeabi_fmul>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <readAll+0x2d0>)
 8004ee6:	601a      	str	r2, [r3, #0]

        DataStruct->MagX = mx;
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <readAll+0x2c8>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	619a      	str	r2, [r3, #24]
        DataStruct->MagY = my;
 8004ef0:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <readAll+0x2cc>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	61da      	str	r2, [r3, #28]
        DataStruct->MagZ = mz;
 8004ef8:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <readAll+0x2d0>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	621a      	str	r2, [r3, #32]
    }

    // Now = __HAL_TIM_GET_COUNTER(&htim1);
    Now = HAL_GetTick();
 8004f00:	f7fc f96a 	bl	80011d8 <HAL_GetTick>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <readAll+0x2d8>)
 8004f08:	6013      	str	r3, [r2, #0]
    deltat = ((Now - lastUpdate) / 1000.0f); // set integration time by time elapsed since last filter update
 8004f0a:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <readAll+0x2d8>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <readAll+0x2dc>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	4618      	mov	r0, r3
 8004f16:	e027      	b.n	8004f68 <readAll+0x2e0>
 8004f18:	2000026c 	.word	0x2000026c
 8004f1c:	20000260 	.word	0x20000260
 8004f20:	200002f4 	.word	0x200002f4
 8004f24:	200002f8 	.word	0x200002f8
 8004f28:	200002fc 	.word	0x200002fc
 8004f2c:	20000274 	.word	0x20000274
 8004f30:	20000264 	.word	0x20000264
 8004f34:	20000300 	.word	0x20000300
 8004f38:	20000304 	.word	0x20000304
 8004f3c:	20000308 	.word	0x20000308
 8004f40:	2000027c 	.word	0x2000027c
 8004f44:	20000268 	.word	0x20000268
 8004f48:	20000284 	.word	0x20000284
 8004f4c:	200002a8 	.word	0x200002a8
 8004f50:	2000030c 	.word	0x2000030c
 8004f54:	20000310 	.word	0x20000310
 8004f58:	20000314 	.word	0x20000314
 8004f5c:	200002b4 	.word	0x200002b4
 8004f60:	200002f0 	.word	0x200002f0
 8004f64:	200002ec 	.word	0x200002ec
 8004f68:	f7fb fe84 	bl	8000c74 <__aeabi_ui2f>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	499c      	ldr	r1, [pc, #624]	; (80051e0 <readAll+0x558>)
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fb ff8b 	bl	8000e8c <__aeabi_fdiv>
 8004f76:	4603      	mov	r3, r0
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4b9a      	ldr	r3, [pc, #616]	; (80051e4 <readAll+0x55c>)
 8004f7c:	601a      	str	r2, [r3, #0]
    lastUpdate = Now;
 8004f7e:	4b9a      	ldr	r3, [pc, #616]	; (80051e8 <readAll+0x560>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a9a      	ldr	r2, [pc, #616]	; (80051ec <readAll+0x564>)
 8004f84:	6013      	str	r3, [r2, #0]
    sum += deltat; // sum for averaging filter update rate
 8004f86:	4b9a      	ldr	r3, [pc, #616]	; (80051f0 <readAll+0x568>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a96      	ldr	r2, [pc, #600]	; (80051e4 <readAll+0x55c>)
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fb fdbf 	bl	8000b14 <__addsf3>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4b95      	ldr	r3, [pc, #596]	; (80051f0 <readAll+0x568>)
 8004f9c:	601a      	str	r2, [r3, #0]

    // Calculate quaternions based on Madgwick's filter
    // Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
    //...coordinate systems also different. So, to compensate this, order should be my - mx - mz
    // QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
    QuaternionUpdate(ax, ay, az, gx * PI / 180.0f, gy * PI / 180.0f, gz * PI / 180.0f, my, mx, mz);
 8004f9e:	4b95      	ldr	r3, [pc, #596]	; (80051f4 <readAll+0x56c>)
 8004fa0:	681c      	ldr	r4, [r3, #0]
 8004fa2:	4b95      	ldr	r3, [pc, #596]	; (80051f8 <readAll+0x570>)
 8004fa4:	681d      	ldr	r5, [r3, #0]
 8004fa6:	4b95      	ldr	r3, [pc, #596]	; (80051fc <readAll+0x574>)
 8004fa8:	681e      	ldr	r6, [r3, #0]
 8004faa:	4b95      	ldr	r3, [pc, #596]	; (8005200 <readAll+0x578>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fb fa32 	bl	8000418 <__aeabi_f2d>
 8004fb4:	a388      	add	r3, pc, #544	; (adr r3, 80051d8 <readAll+0x550>)
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	f7fb fa85 	bl	80004c8 <__aeabi_dmul>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	4b8e      	ldr	r3, [pc, #568]	; (8005204 <readAll+0x57c>)
 8004fcc:	f7fb fba6 	bl	800071c <__aeabi_ddiv>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f7fb fd46 	bl	8000a68 <__aeabi_d2f>
 8004fdc:	4681      	mov	r9, r0
 8004fde:	4b8a      	ldr	r3, [pc, #552]	; (8005208 <readAll+0x580>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fb fa18 	bl	8000418 <__aeabi_f2d>
 8004fe8:	a37b      	add	r3, pc, #492	; (adr r3, 80051d8 <readAll+0x550>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb fa6b 	bl	80004c8 <__aeabi_dmul>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	4b81      	ldr	r3, [pc, #516]	; (8005204 <readAll+0x57c>)
 8005000:	f7fb fb8c 	bl	800071c <__aeabi_ddiv>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4610      	mov	r0, r2
 800500a:	4619      	mov	r1, r3
 800500c:	f7fb fd2c 	bl	8000a68 <__aeabi_d2f>
 8005010:	4680      	mov	r8, r0
 8005012:	4b7e      	ldr	r3, [pc, #504]	; (800520c <readAll+0x584>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7fb f9fe 	bl	8000418 <__aeabi_f2d>
 800501c:	a36e      	add	r3, pc, #440	; (adr r3, 80051d8 <readAll+0x550>)
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	f7fb fa51 	bl	80004c8 <__aeabi_dmul>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	4b74      	ldr	r3, [pc, #464]	; (8005204 <readAll+0x57c>)
 8005034:	f7fb fb72 	bl	800071c <__aeabi_ddiv>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	f7fb fd12 	bl	8000a68 <__aeabi_d2f>
 8005044:	4b72      	ldr	r3, [pc, #456]	; (8005210 <readAll+0x588>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a72      	ldr	r2, [pc, #456]	; (8005214 <readAll+0x58c>)
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	4972      	ldr	r1, [pc, #456]	; (8005218 <readAll+0x590>)
 800504e:	6809      	ldr	r1, [r1, #0]
 8005050:	9104      	str	r1, [sp, #16]
 8005052:	9203      	str	r2, [sp, #12]
 8005054:	9302      	str	r3, [sp, #8]
 8005056:	9001      	str	r0, [sp, #4]
 8005058:	f8cd 8000 	str.w	r8, [sp]
 800505c:	464b      	mov	r3, r9
 800505e:	4632      	mov	r2, r6
 8005060:	4629      	mov	r1, r5
 8005062:	4620      	mov	r0, r4
 8005064:	f001 ff24 	bl	8006eb0 <QuaternionUpdate>

    // Convert quaternions to Euler angles
    a12 = 2.0f * (q[1] * q[2] + q[0] * q[3]);
 8005068:	4b6c      	ldr	r3, [pc, #432]	; (800521c <readAll+0x594>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a6b      	ldr	r2, [pc, #428]	; (800521c <readAll+0x594>)
 800506e:	6892      	ldr	r2, [r2, #8]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f7fb fe56 	bl	8000d24 <__aeabi_fmul>
 8005078:	4603      	mov	r3, r0
 800507a:	461c      	mov	r4, r3
 800507c:	4b67      	ldr	r3, [pc, #412]	; (800521c <readAll+0x594>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a66      	ldr	r2, [pc, #408]	; (800521c <readAll+0x594>)
 8005082:	68d2      	ldr	r2, [r2, #12]
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb fe4c 	bl	8000d24 <__aeabi_fmul>
 800508c:	4603      	mov	r3, r0
 800508e:	4619      	mov	r1, r3
 8005090:	4620      	mov	r0, r4
 8005092:	f7fb fd3f 	bl	8000b14 <__addsf3>
 8005096:	4603      	mov	r3, r0
 8005098:	4619      	mov	r1, r3
 800509a:	4618      	mov	r0, r3
 800509c:	f7fb fd3a 	bl	8000b14 <__addsf3>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	4b5e      	ldr	r3, [pc, #376]	; (8005220 <readAll+0x598>)
 80050a6:	601a      	str	r2, [r3, #0]
    a22 = q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 80050a8:	4b5c      	ldr	r3, [pc, #368]	; (800521c <readAll+0x594>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a5b      	ldr	r2, [pc, #364]	; (800521c <readAll+0x594>)
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fb fe36 	bl	8000d24 <__aeabi_fmul>
 80050b8:	4603      	mov	r3, r0
 80050ba:	461c      	mov	r4, r3
 80050bc:	4b57      	ldr	r3, [pc, #348]	; (800521c <readAll+0x594>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a56      	ldr	r2, [pc, #344]	; (800521c <readAll+0x594>)
 80050c2:	6852      	ldr	r2, [r2, #4]
 80050c4:	4611      	mov	r1, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fb fe2c 	bl	8000d24 <__aeabi_fmul>
 80050cc:	4603      	mov	r3, r0
 80050ce:	4619      	mov	r1, r3
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7fb fd1f 	bl	8000b14 <__addsf3>
 80050d6:	4603      	mov	r3, r0
 80050d8:	461c      	mov	r4, r3
 80050da:	4b50      	ldr	r3, [pc, #320]	; (800521c <readAll+0x594>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	4a4f      	ldr	r2, [pc, #316]	; (800521c <readAll+0x594>)
 80050e0:	6892      	ldr	r2, [r2, #8]
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fb fe1d 	bl	8000d24 <__aeabi_fmul>
 80050ea:	4603      	mov	r3, r0
 80050ec:	4619      	mov	r1, r3
 80050ee:	4620      	mov	r0, r4
 80050f0:	f7fb fd0e 	bl	8000b10 <__aeabi_fsub>
 80050f4:	4603      	mov	r3, r0
 80050f6:	461c      	mov	r4, r3
 80050f8:	4b48      	ldr	r3, [pc, #288]	; (800521c <readAll+0x594>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a47      	ldr	r2, [pc, #284]	; (800521c <readAll+0x594>)
 80050fe:	68d2      	ldr	r2, [r2, #12]
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f7fb fe0e 	bl	8000d24 <__aeabi_fmul>
 8005108:	4603      	mov	r3, r0
 800510a:	4619      	mov	r1, r3
 800510c:	4620      	mov	r0, r4
 800510e:	f7fb fcff 	bl	8000b10 <__aeabi_fsub>
 8005112:	4603      	mov	r3, r0
 8005114:	461a      	mov	r2, r3
 8005116:	4b43      	ldr	r3, [pc, #268]	; (8005224 <readAll+0x59c>)
 8005118:	601a      	str	r2, [r3, #0]
    a31 = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 800511a:	4b40      	ldr	r3, [pc, #256]	; (800521c <readAll+0x594>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a3f      	ldr	r2, [pc, #252]	; (800521c <readAll+0x594>)
 8005120:	6852      	ldr	r2, [r2, #4]
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f7fb fdfd 	bl	8000d24 <__aeabi_fmul>
 800512a:	4603      	mov	r3, r0
 800512c:	461c      	mov	r4, r3
 800512e:	4b3b      	ldr	r3, [pc, #236]	; (800521c <readAll+0x594>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4a3a      	ldr	r2, [pc, #232]	; (800521c <readAll+0x594>)
 8005134:	68d2      	ldr	r2, [r2, #12]
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f7fb fdf3 	bl	8000d24 <__aeabi_fmul>
 800513e:	4603      	mov	r3, r0
 8005140:	4619      	mov	r1, r3
 8005142:	4620      	mov	r0, r4
 8005144:	f7fb fce6 	bl	8000b14 <__addsf3>
 8005148:	4603      	mov	r3, r0
 800514a:	4619      	mov	r1, r3
 800514c:	4618      	mov	r0, r3
 800514e:	f7fb fce1 	bl	8000b14 <__addsf3>
 8005152:	4603      	mov	r3, r0
 8005154:	461a      	mov	r2, r3
 8005156:	4b34      	ldr	r3, [pc, #208]	; (8005228 <readAll+0x5a0>)
 8005158:	601a      	str	r2, [r3, #0]
    a32 = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 800515a:	4b30      	ldr	r3, [pc, #192]	; (800521c <readAll+0x594>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4a2f      	ldr	r2, [pc, #188]	; (800521c <readAll+0x594>)
 8005160:	68d2      	ldr	r2, [r2, #12]
 8005162:	4611      	mov	r1, r2
 8005164:	4618      	mov	r0, r3
 8005166:	f7fb fddd 	bl	8000d24 <__aeabi_fmul>
 800516a:	4603      	mov	r3, r0
 800516c:	461c      	mov	r4, r3
 800516e:	4b2b      	ldr	r3, [pc, #172]	; (800521c <readAll+0x594>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2a      	ldr	r2, [pc, #168]	; (800521c <readAll+0x594>)
 8005174:	6892      	ldr	r2, [r2, #8]
 8005176:	4611      	mov	r1, r2
 8005178:	4618      	mov	r0, r3
 800517a:	f7fb fdd3 	bl	8000d24 <__aeabi_fmul>
 800517e:	4603      	mov	r3, r0
 8005180:	4619      	mov	r1, r3
 8005182:	4620      	mov	r0, r4
 8005184:	f7fb fcc4 	bl	8000b10 <__aeabi_fsub>
 8005188:	4603      	mov	r3, r0
 800518a:	4619      	mov	r1, r3
 800518c:	4618      	mov	r0, r3
 800518e:	f7fb fcc1 	bl	8000b14 <__addsf3>
 8005192:	4603      	mov	r3, r0
 8005194:	461a      	mov	r2, r3
 8005196:	4b25      	ldr	r3, [pc, #148]	; (800522c <readAll+0x5a4>)
 8005198:	601a      	str	r2, [r3, #0]
    a33 = q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <readAll+0x594>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1f      	ldr	r2, [pc, #124]	; (800521c <readAll+0x594>)
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fb fdbd 	bl	8000d24 <__aeabi_fmul>
 80051aa:	4603      	mov	r3, r0
 80051ac:	461c      	mov	r4, r3
 80051ae:	4b1b      	ldr	r3, [pc, #108]	; (800521c <readAll+0x594>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4a1a      	ldr	r2, [pc, #104]	; (800521c <readAll+0x594>)
 80051b4:	6852      	ldr	r2, [r2, #4]
 80051b6:	4611      	mov	r1, r2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fb fdb3 	bl	8000d24 <__aeabi_fmul>
 80051be:	4603      	mov	r3, r0
 80051c0:	4619      	mov	r1, r3
 80051c2:	4620      	mov	r0, r4
 80051c4:	f7fb fca4 	bl	8000b10 <__aeabi_fsub>
 80051c8:	4603      	mov	r3, r0
 80051ca:	461c      	mov	r4, r3
 80051cc:	4b13      	ldr	r3, [pc, #76]	; (800521c <readAll+0x594>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4a12      	ldr	r2, [pc, #72]	; (800521c <readAll+0x594>)
 80051d2:	6892      	ldr	r2, [r2, #8]
 80051d4:	e02c      	b.n	8005230 <readAll+0x5a8>
 80051d6:	bf00      	nop
 80051d8:	35f80991 	.word	0x35f80991
 80051dc:	40092492 	.word	0x40092492
 80051e0:	447a0000 	.word	0x447a0000
 80051e4:	200002e4 	.word	0x200002e4
 80051e8:	200002f0 	.word	0x200002f0
 80051ec:	200002ec 	.word	0x200002ec
 80051f0:	200002e8 	.word	0x200002e8
 80051f4:	200002f4 	.word	0x200002f4
 80051f8:	200002f8 	.word	0x200002f8
 80051fc:	200002fc 	.word	0x200002fc
 8005200:	20000300 	.word	0x20000300
 8005204:	40668000 	.word	0x40668000
 8005208:	20000304 	.word	0x20000304
 800520c:	20000308 	.word	0x20000308
 8005210:	20000310 	.word	0x20000310
 8005214:	2000030c 	.word	0x2000030c
 8005218:	20000314 	.word	0x20000314
 800521c:	20000010 	.word	0x20000010
 8005220:	20000324 	.word	0x20000324
 8005224:	20000328 	.word	0x20000328
 8005228:	2000032c 	.word	0x2000032c
 800522c:	20000330 	.word	0x20000330
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f7fb fd76 	bl	8000d24 <__aeabi_fmul>
 8005238:	4603      	mov	r3, r0
 800523a:	4619      	mov	r1, r3
 800523c:	4620      	mov	r0, r4
 800523e:	f7fb fc67 	bl	8000b10 <__aeabi_fsub>
 8005242:	4603      	mov	r3, r0
 8005244:	461c      	mov	r4, r3
 8005246:	4b62      	ldr	r3, [pc, #392]	; (80053d0 <readAll+0x748>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	4a61      	ldr	r2, [pc, #388]	; (80053d0 <readAll+0x748>)
 800524c:	68d2      	ldr	r2, [r2, #12]
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f7fb fd67 	bl	8000d24 <__aeabi_fmul>
 8005256:	4603      	mov	r3, r0
 8005258:	4619      	mov	r1, r3
 800525a:	4620      	mov	r0, r4
 800525c:	f7fb fc5a 	bl	8000b14 <__addsf3>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	4b5b      	ldr	r3, [pc, #364]	; (80053d4 <readAll+0x74c>)
 8005266:	601a      	str	r2, [r3, #0]

    pitch = -asinf(a32);
 8005268:	4b5b      	ldr	r3, [pc, #364]	; (80053d8 <readAll+0x750>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f005 f873 	bl	800a358 <asinf>
 8005272:	4603      	mov	r3, r0
 8005274:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005278:	4a58      	ldr	r2, [pc, #352]	; (80053dc <readAll+0x754>)
 800527a:	6013      	str	r3, [r2, #0]
    roll = atan2f(a31, a33);
 800527c:	4b58      	ldr	r3, [pc, #352]	; (80053e0 <readAll+0x758>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a54      	ldr	r2, [pc, #336]	; (80053d4 <readAll+0x74c>)
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	4611      	mov	r1, r2
 8005286:	4618      	mov	r0, r3
 8005288:	f005 f886 	bl	800a398 <atan2f>
 800528c:	4603      	mov	r3, r0
 800528e:	4a55      	ldr	r2, [pc, #340]	; (80053e4 <readAll+0x75c>)
 8005290:	6013      	str	r3, [r2, #0]
    yaw = atan2f(a12, a22);
 8005292:	4b55      	ldr	r3, [pc, #340]	; (80053e8 <readAll+0x760>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a55      	ldr	r2, [pc, #340]	; (80053ec <readAll+0x764>)
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	4611      	mov	r1, r2
 800529c:	4618      	mov	r0, r3
 800529e:	f005 f87b 	bl	800a398 <atan2f>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4a52      	ldr	r2, [pc, #328]	; (80053f0 <readAll+0x768>)
 80052a6:	6013      	str	r3, [r2, #0]
    pitch *= 180.0f / PI;
 80052a8:	4b4c      	ldr	r3, [pc, #304]	; (80053dc <readAll+0x754>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fb f8b3 	bl	8000418 <__aeabi_f2d>
 80052b2:	a345      	add	r3, pc, #276	; (adr r3, 80053c8 <readAll+0x740>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f7fb f906 	bl	80004c8 <__aeabi_dmul>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4610      	mov	r0, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	f7fb fbd0 	bl	8000a68 <__aeabi_d2f>
 80052c8:	4603      	mov	r3, r0
 80052ca:	4a44      	ldr	r2, [pc, #272]	; (80053dc <readAll+0x754>)
 80052cc:	6013      	str	r3, [r2, #0]
    yaw *= 180.0f / PI;
 80052ce:	4b48      	ldr	r3, [pc, #288]	; (80053f0 <readAll+0x768>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb f8a0 	bl	8000418 <__aeabi_f2d>
 80052d8:	a33b      	add	r3, pc, #236	; (adr r3, 80053c8 <readAll+0x740>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f7fb f8f3 	bl	80004c8 <__aeabi_dmul>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	f7fb fbbd 	bl	8000a68 <__aeabi_d2f>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4a3f      	ldr	r2, [pc, #252]	; (80053f0 <readAll+0x768>)
 80052f2:	6013      	str	r3, [r2, #0]
    yaw += 5.53f; // Declination
 80052f4:	4b3e      	ldr	r3, [pc, #248]	; (80053f0 <readAll+0x768>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	493e      	ldr	r1, [pc, #248]	; (80053f4 <readAll+0x76c>)
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fb fc0a 	bl	8000b14 <__addsf3>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	4b3a      	ldr	r3, [pc, #232]	; (80053f0 <readAll+0x768>)
 8005306:	601a      	str	r2, [r3, #0]

    if (yaw < 0)
 8005308:	4b39      	ldr	r3, [pc, #228]	; (80053f0 <readAll+0x768>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f04f 0100 	mov.w	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f7fb fea5 	bl	8001060 <__aeabi_fcmplt>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <readAll+0x6a8>
        yaw += 360.0f; // Ensure yaw stays between 0 and 360
 800531c:	4b34      	ldr	r3, [pc, #208]	; (80053f0 <readAll+0x768>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4935      	ldr	r1, [pc, #212]	; (80053f8 <readAll+0x770>)
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb fbf6 	bl	8000b14 <__addsf3>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	4b30      	ldr	r3, [pc, #192]	; (80053f0 <readAll+0x768>)
 800532e:	601a      	str	r2, [r3, #0]
    roll *= 180.0f / PI;
 8005330:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <readAll+0x75c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7fb f86f 	bl	8000418 <__aeabi_f2d>
 800533a:	a323      	add	r3, pc, #140	; (adr r3, 80053c8 <readAll+0x740>)
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f7fb f8c2 	bl	80004c8 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	f7fb fb8c 	bl	8000a68 <__aeabi_d2f>
 8005350:	4603      	mov	r3, r0
 8005352:	4a24      	ldr	r2, [pc, #144]	; (80053e4 <readAll+0x75c>)
 8005354:	6013      	str	r3, [r2, #0]
    lin_ax = ax + a31;
 8005356:	4b29      	ldr	r3, [pc, #164]	; (80053fc <readAll+0x774>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <readAll+0x758>)
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f7fb fbd7 	bl	8000b14 <__addsf3>
 8005366:	4603      	mov	r3, r0
 8005368:	461a      	mov	r2, r3
 800536a:	4b25      	ldr	r3, [pc, #148]	; (8005400 <readAll+0x778>)
 800536c:	601a      	str	r2, [r3, #0]
    lin_ay = ay + a32;
 800536e:	4b25      	ldr	r3, [pc, #148]	; (8005404 <readAll+0x77c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <readAll+0x750>)
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	4611      	mov	r1, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f7fb fbcb 	bl	8000b14 <__addsf3>
 800537e:	4603      	mov	r3, r0
 8005380:	461a      	mov	r2, r3
 8005382:	4b21      	ldr	r3, [pc, #132]	; (8005408 <readAll+0x780>)
 8005384:	601a      	str	r2, [r3, #0]
    lin_az = az - a33;
 8005386:	4b21      	ldr	r3, [pc, #132]	; (800540c <readAll+0x784>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a12      	ldr	r2, [pc, #72]	; (80053d4 <readAll+0x74c>)
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	4611      	mov	r1, r2
 8005390:	4618      	mov	r0, r3
 8005392:	f7fb fbbd 	bl	8000b10 <__aeabi_fsub>
 8005396:	4603      	mov	r3, r0
 8005398:	461a      	mov	r2, r3
 800539a:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <readAll+0x788>)
 800539c:	601a      	str	r2, [r3, #0]

    DataStruct->yaw = yaw;
 800539e:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <readAll+0x768>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	62da      	str	r2, [r3, #44]	; 0x2c
    DataStruct->pitch = pitch;
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <readAll+0x754>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24
    DataStruct->roll = roll;
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <readAll+0x75c>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	629a      	str	r2, [r3, #40]	; 0x28

    sum = 0;
 80053b6:	4b17      	ldr	r3, [pc, #92]	; (8005414 <readAll+0x78c>)
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053c8:	d0051a32 	.word	0xd0051a32
 80053cc:	404ca2e8 	.word	0x404ca2e8
 80053d0:	20000010 	.word	0x20000010
 80053d4:	20000334 	.word	0x20000334
 80053d8:	20000330 	.word	0x20000330
 80053dc:	200002d8 	.word	0x200002d8
 80053e0:	2000032c 	.word	0x2000032c
 80053e4:	200002e0 	.word	0x200002e0
 80053e8:	20000324 	.word	0x20000324
 80053ec:	20000328 	.word	0x20000328
 80053f0:	200002dc 	.word	0x200002dc
 80053f4:	40b0f5c3 	.word	0x40b0f5c3
 80053f8:	43b40000 	.word	0x43b40000
 80053fc:	200002f4 	.word	0x200002f4
 8005400:	20000318 	.word	0x20000318
 8005404:	200002f8 	.word	0x200002f8
 8005408:	2000031c 	.word	0x2000031c
 800540c:	200002fc 	.word	0x200002fc
 8005410:	20000320 	.word	0x20000320
 8005414:	200002e8 	.word	0x200002e8

08005418 <getMres>:
//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres()
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
    switch (Mscale)
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <getMres+0x2c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <getMres+0x12>
 8005424:	2b01      	cmp	r3, #1
 8005426:	d004      	beq.n	8005432 <getMres+0x1a>
        break;
    case MFS_16BITS:
        mRes = 10. * 4912. / 32760.0; // Proper scale to return milliGauss
        break;
    }
}
 8005428:	e007      	b.n	800543a <getMres+0x22>
        mRes = 10. * 4912. / 8190.; // Proper scale to return milliGauss
 800542a:	4b07      	ldr	r3, [pc, #28]	; (8005448 <getMres+0x30>)
 800542c:	4a07      	ldr	r2, [pc, #28]	; (800544c <getMres+0x34>)
 800542e:	601a      	str	r2, [r3, #0]
        break;
 8005430:	e003      	b.n	800543a <getMres+0x22>
        mRes = 10. * 4912. / 32760.0; // Proper scale to return milliGauss
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <getMres+0x30>)
 8005434:	4a06      	ldr	r2, [pc, #24]	; (8005450 <getMres+0x38>)
 8005436:	601a      	str	r2, [r3, #0]
        break;
 8005438:	bf00      	nop
}
 800543a:	bf00      	nop
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000007 	.word	0x20000007
 8005448:	20000268 	.word	0x20000268
 800544c:	40bfebff 	.word	0x40bfebff
 8005450:	3fbfebff 	.word	0x3fbfebff

08005454 <getGres>:

void getGres()
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
    switch (Gscale)
 8005458:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <getGres+0x4c>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b03      	cmp	r3, #3
 800545e:	d81b      	bhi.n	8005498 <getGres+0x44>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <getGres+0x14>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	08005479 	.word	0x08005479
 800546c:	08005481 	.word	0x08005481
 8005470:	08005489 	.word	0x08005489
 8005474:	08005491 	.word	0x08005491
    {
        // Possible gyro scales (and their register bit settings) are:
        // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
        gRes = 250.0 / 32768.0;
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <getGres+0x50>)
 800547a:	4a0b      	ldr	r2, [pc, #44]	; (80054a8 <getGres+0x54>)
 800547c:	601a      	str	r2, [r3, #0]
        break;
 800547e:	e00b      	b.n	8005498 <getGres+0x44>
    case GFS_500DPS:
        gRes = 500.0 / 32768.0;
 8005480:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <getGres+0x50>)
 8005482:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <getGres+0x58>)
 8005484:	601a      	str	r2, [r3, #0]
        break;
 8005486:	e007      	b.n	8005498 <getGres+0x44>
    case GFS_1000DPS:
        gRes = 1000.0 / 32768.0;
 8005488:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <getGres+0x50>)
 800548a:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <getGres+0x5c>)
 800548c:	601a      	str	r2, [r3, #0]
        break;
 800548e:	e003      	b.n	8005498 <getGres+0x44>
    case GFS_2000DPS:
        gRes = 2000.0 / 32768.0;
 8005490:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <getGres+0x50>)
 8005492:	4a08      	ldr	r2, [pc, #32]	; (80054b4 <getGres+0x60>)
 8005494:	601a      	str	r2, [r3, #0]
        break;
 8005496:	bf00      	nop
    }
}
 8005498:	bf00      	nop
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr
 80054a0:	20000005 	.word	0x20000005
 80054a4:	20000264 	.word	0x20000264
 80054a8:	3bfa0000 	.word	0x3bfa0000
 80054ac:	3c7a0000 	.word	0x3c7a0000
 80054b0:	3cfa0000 	.word	0x3cfa0000
 80054b4:	3d7a0000 	.word	0x3d7a0000

080054b8 <getAres>:

void getAres()
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
    switch (Ascale)
 80054bc:	4b13      	ldr	r3, [pc, #76]	; (800550c <getAres+0x54>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d81f      	bhi.n	8005504 <getAres+0x4c>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <getAres+0x14>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054e7 	.word	0x080054e7
 80054d4:	080054f1 	.word	0x080054f1
 80054d8:	080054fb 	.word	0x080054fb
    {
        // Possible accelerometer scales (and their register bit settings) are:
        // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
        aRes = 2.0 / 32768.0;
 80054dc:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <getAres+0x58>)
 80054de:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80054e2:	601a      	str	r2, [r3, #0]
        break;
 80054e4:	e00e      	b.n	8005504 <getAres+0x4c>
    case AFS_4G:
        aRes = 4.0 / 32768.0;
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <getAres+0x58>)
 80054e8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80054ec:	601a      	str	r2, [r3, #0]
        break;
 80054ee:	e009      	b.n	8005504 <getAres+0x4c>
    case AFS_8G:
        aRes = 8.0 / 32768.0;
 80054f0:	4b07      	ldr	r3, [pc, #28]	; (8005510 <getAres+0x58>)
 80054f2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80054f6:	601a      	str	r2, [r3, #0]
        break;
 80054f8:	e004      	b.n	8005504 <getAres+0x4c>
    case AFS_16G:
        aRes = 16.0 / 32768.0;
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <getAres+0x58>)
 80054fc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8005500:	601a      	str	r2, [r3, #0]
        break;
 8005502:	bf00      	nop
    }
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr
 800550c:	20000006 	.word	0x20000006
 8005510:	20000260 	.word	0x20000260

08005514 <readAccelData>:

// read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t *destination)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af04      	add	r7, sp, #16
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
    uint8_t rawAccelData[6];                                                                    // x/y/z accel register data stored here
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 800551e:	2364      	movs	r3, #100	; 0x64
 8005520:	9302      	str	r3, [sp, #8]
 8005522:	2306      	movs	r3, #6
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	f107 0308 	add.w	r3, r7, #8
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	2301      	movs	r3, #1
 800552e:	223b      	movs	r2, #59	; 0x3b
 8005530:	21d0      	movs	r1, #208	; 0xd0
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fc fb80 	bl	8001c38 <HAL_I2C_Mem_Read>
    destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];                         // Turn the MSB and LSB into a signed 16-bit value
 8005538:	7a3b      	ldrb	r3, [r7, #8]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	b21a      	sxth	r2, r3
 800553e:	7a7b      	ldrb	r3, [r7, #9]
 8005540:	b21b      	sxth	r3, r3
 8005542:	4313      	orrs	r3, r2
 8005544:	b21a      	sxth	r2, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	801a      	strh	r2, [r3, #0]
    destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 800554a:	7abb      	ldrb	r3, [r7, #10]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	b219      	sxth	r1, r3
 8005550:	7afb      	ldrb	r3, [r7, #11]
 8005552:	b21a      	sxth	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	3302      	adds	r3, #2
 8005558:	430a      	orrs	r2, r1
 800555a:	b212      	sxth	r2, r2
 800555c:	801a      	strh	r2, [r3, #0]
    destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 800555e:	7b3b      	ldrb	r3, [r7, #12]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	b219      	sxth	r1, r3
 8005564:	7b7b      	ldrb	r3, [r7, #13]
 8005566:	b21a      	sxth	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	3304      	adds	r3, #4
 800556c:	430a      	orrs	r2, r1
 800556e:	b212      	sxth	r2, r2
 8005570:	801a      	strh	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <readGyroData>:

// read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t *destination)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b088      	sub	sp, #32
 800557e:	af04      	add	r7, sp, #16
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
    uint8_t rawGyroData[6];                                                                   // x/y/z gyro register data stored here
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout); // Read the six raw data registers sequentially into data array
 8005584:	2364      	movs	r3, #100	; 0x64
 8005586:	9302      	str	r3, [sp, #8]
 8005588:	2306      	movs	r3, #6
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	f107 0308 	add.w	r3, r7, #8
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	2301      	movs	r3, #1
 8005594:	2243      	movs	r2, #67	; 0x43
 8005596:	21d0      	movs	r1, #208	; 0xd0
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fc fb4d 	bl	8001c38 <HAL_I2C_Mem_Read>
    destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];                         // Turn the MSB and LSB into a signed 16-bit value
 800559e:	7a3b      	ldrb	r3, [r7, #8]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	b21a      	sxth	r2, r3
 80055a4:	7a7b      	ldrb	r3, [r7, #9]
 80055a6:	b21b      	sxth	r3, r3
 80055a8:	4313      	orrs	r3, r2
 80055aa:	b21a      	sxth	r2, r3
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	801a      	strh	r2, [r3, #0]
    destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 80055b0:	7abb      	ldrb	r3, [r7, #10]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	b219      	sxth	r1, r3
 80055b6:	7afb      	ldrb	r3, [r7, #11]
 80055b8:	b21a      	sxth	r2, r3
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3302      	adds	r3, #2
 80055be:	430a      	orrs	r2, r1
 80055c0:	b212      	sxth	r2, r2
 80055c2:	801a      	strh	r2, [r3, #0]
    destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 80055c4:	7b3b      	ldrb	r3, [r7, #12]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	b219      	sxth	r1, r3
 80055ca:	7b7b      	ldrb	r3, [r7, #13]
 80055cc:	b21a      	sxth	r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	3304      	adds	r3, #4
 80055d2:	430a      	orrs	r2, r1
 80055d4:	b212      	sxth	r2, r2
 80055d6:	801a      	strh	r2, [r3, #0]
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t *destination)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	; 0x28
 80055e4:	af04      	add	r7, sp, #16
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]

    uint8_t readData;

    HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 80055ea:	2364      	movs	r3, #100	; 0x64
 80055ec:	9302      	str	r3, [sp, #8]
 80055ee:	2301      	movs	r3, #1
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	f107 0316 	add.w	r3, r7, #22
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	2301      	movs	r3, #1
 80055fa:	2202      	movs	r2, #2
 80055fc:	2118      	movs	r1, #24
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fc fb1a 	bl	8001c38 <HAL_I2C_Mem_Read>
    if ((readData & 0x01) == 0x01)
 8005604:	7dbb      	ldrb	r3, [r7, #22]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d030      	beq.n	8005670 <readMagData+0x90>
    {
        uint8_t rawMagData[7];                                                                    // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
        HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout); // Read the six raw data and ST2 registers sequentially into data array
 800560e:	2364      	movs	r3, #100	; 0x64
 8005610:	9302      	str	r3, [sp, #8]
 8005612:	2307      	movs	r3, #7
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	f107 030c 	add.w	r3, r7, #12
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	2301      	movs	r3, #1
 800561e:	2203      	movs	r2, #3
 8005620:	2118      	movs	r1, #24
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fc fb08 	bl	8001c38 <HAL_I2C_Mem_Read>
        uint8_t c = rawMagData[6];
 8005628:	7cbb      	ldrb	r3, [r7, #18]
 800562a:	75fb      	strb	r3, [r7, #23]
        if (!(c & 0x08))
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d11c      	bne.n	8005670 <readMagData+0x90>
        {
            destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0]; // Turn the MSB and LSB into a signed 16-bit value
 8005636:	7b7b      	ldrb	r3, [r7, #13]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	b21a      	sxth	r2, r3
 800563c:	7b3b      	ldrb	r3, [r7, #12]
 800563e:	b21b      	sxth	r3, r3
 8005640:	4313      	orrs	r3, r2
 8005642:	b21a      	sxth	r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	801a      	strh	r2, [r3, #0]
            destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2]; // Data stored as little Endian
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	b219      	sxth	r1, r3
 800564e:	7bbb      	ldrb	r3, [r7, #14]
 8005650:	b21a      	sxth	r2, r3
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	3302      	adds	r3, #2
 8005656:	430a      	orrs	r2, r1
 8005658:	b212      	sxth	r2, r2
 800565a:	801a      	strh	r2, [r3, #0]
            destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4];
 800565c:	7c7b      	ldrb	r3, [r7, #17]
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	b219      	sxth	r1, r3
 8005662:	7c3b      	ldrb	r3, [r7, #16]
 8005664:	b21a      	sxth	r2, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	3304      	adds	r3, #4
 800566a:	430a      	orrs	r2, r1
 800566c:	b212      	sxth	r2, r2
 800566e:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8005670:	bf00      	nop
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float *destination)
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af04      	add	r7, sp, #16
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
    // First extract the factory calibration for each magnetometer axis
    //  x/y/z gyro calibration data stored here
    uint8_t rawMagCalData[3];

    // Power down magnetometer
    writeData = 0x00;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 8005686:	2364      	movs	r3, #100	; 0x64
 8005688:	9302      	str	r3, [sp, #8]
 800568a:	2301      	movs	r3, #1
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	f107 030f 	add.w	r3, r7, #15
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	2301      	movs	r3, #1
 8005696:	220a      	movs	r2, #10
 8005698:	2118      	movs	r1, #24
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fc f9d2 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 80056a0:	2064      	movs	r0, #100	; 0x64
 80056a2:	f7fb fda3 	bl	80011ec <HAL_Delay>

    writeData = 0x0F;
 80056a6:	230f      	movs	r3, #15
 80056a8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout); // Enter Fuse ROM access mode
 80056aa:	2364      	movs	r3, #100	; 0x64
 80056ac:	9302      	str	r3, [sp, #8]
 80056ae:	2301      	movs	r3, #1
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	f107 030f 	add.w	r3, r7, #15
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	2301      	movs	r3, #1
 80056ba:	220a      	movs	r2, #10
 80056bc:	2118      	movs	r1, #24
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fc f9c0 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 80056c4:	2064      	movs	r0, #100	; 0x64
 80056c6:	f7fb fd91 	bl	80011ec <HAL_Delay>

    HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout); // Read the x-, y-, and z-axis calibration values
 80056ca:	2364      	movs	r3, #100	; 0x64
 80056cc:	9302      	str	r3, [sp, #8]
 80056ce:	2303      	movs	r3, #3
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	f107 030c 	add.w	r3, r7, #12
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	2301      	movs	r3, #1
 80056da:	2210      	movs	r2, #16
 80056dc:	2118      	movs	r1, #24
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc faaa 	bl	8001c38 <HAL_I2C_Mem_Read>
    destination[0] = (float)(rawMagCalData[0] - 128) / 256. + 1.;                              // Return x-axis sensitivity adjustment values, etc.
 80056e4:	7b3b      	ldrb	r3, [r7, #12]
 80056e6:	3b80      	subs	r3, #128	; 0x80
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fb fac7 	bl	8000c7c <__aeabi_i2f>
 80056ee:	4603      	mov	r3, r0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fa fe91 	bl	8000418 <__aeabi_f2d>
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	4b44      	ldr	r3, [pc, #272]	; (800580c <initAK8963+0x194>)
 80056fc:	f7fb f80e 	bl	800071c <__aeabi_ddiv>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4610      	mov	r0, r2
 8005706:	4619      	mov	r1, r3
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	4b40      	ldr	r3, [pc, #256]	; (8005810 <initAK8963+0x198>)
 800570e:	f7fa fd25 	bl	800015c <__adddf3>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	f7fb f9a5 	bl	8000a68 <__aeabi_d2f>
 800571e:	4602      	mov	r2, r0
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	601a      	str	r2, [r3, #0]
    destination[1] = (float)(rawMagCalData[1] - 128) / 256. + 1.;
 8005724:	7b7b      	ldrb	r3, [r7, #13]
 8005726:	3b80      	subs	r3, #128	; 0x80
 8005728:	4618      	mov	r0, r3
 800572a:	f7fb faa7 	bl	8000c7c <__aeabi_i2f>
 800572e:	4603      	mov	r3, r0
 8005730:	4618      	mov	r0, r3
 8005732:	f7fa fe71 	bl	8000418 <__aeabi_f2d>
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	4b34      	ldr	r3, [pc, #208]	; (800580c <initAK8963+0x194>)
 800573c:	f7fa ffee 	bl	800071c <__aeabi_ddiv>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4610      	mov	r0, r2
 8005746:	4619      	mov	r1, r3
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	4b30      	ldr	r3, [pc, #192]	; (8005810 <initAK8963+0x198>)
 800574e:	f7fa fd05 	bl	800015c <__adddf3>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4610      	mov	r0, r2
 8005758:	4619      	mov	r1, r3
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	1d1c      	adds	r4, r3, #4
 800575e:	f7fb f983 	bl	8000a68 <__aeabi_d2f>
 8005762:	4603      	mov	r3, r0
 8005764:	6023      	str	r3, [r4, #0]
    destination[2] = (float)(rawMagCalData[2] - 128) / 256. + 1.;
 8005766:	7bbb      	ldrb	r3, [r7, #14]
 8005768:	3b80      	subs	r3, #128	; 0x80
 800576a:	4618      	mov	r0, r3
 800576c:	f7fb fa86 	bl	8000c7c <__aeabi_i2f>
 8005770:	4603      	mov	r3, r0
 8005772:	4618      	mov	r0, r3
 8005774:	f7fa fe50 	bl	8000418 <__aeabi_f2d>
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	4b23      	ldr	r3, [pc, #140]	; (800580c <initAK8963+0x194>)
 800577e:	f7fa ffcd 	bl	800071c <__aeabi_ddiv>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4610      	mov	r0, r2
 8005788:	4619      	mov	r1, r3
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	4b20      	ldr	r3, [pc, #128]	; (8005810 <initAK8963+0x198>)
 8005790:	f7fa fce4 	bl	800015c <__adddf3>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f103 0408 	add.w	r4, r3, #8
 80057a2:	f7fb f961 	bl	8000a68 <__aeabi_d2f>
 80057a6:	4603      	mov	r3, r0
 80057a8:	6023      	str	r3, [r4, #0]

    writeData = 0x00;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout); // Power down magnetometer
 80057ae:	2364      	movs	r3, #100	; 0x64
 80057b0:	9302      	str	r3, [sp, #8]
 80057b2:	2301      	movs	r3, #1
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	f107 030f 	add.w	r3, r7, #15
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2301      	movs	r3, #1
 80057be:	220a      	movs	r2, #10
 80057c0:	2118      	movs	r1, #24
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fc f93e 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 80057c8:	2064      	movs	r0, #100	; 0x64
 80057ca:	f7fb fd0f 	bl	80011ec <HAL_Delay>

    // Configure the magnetometer for continuous read and highest resolution
    // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
    // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
    writeData = Mscale << 4 | Mmode;
 80057ce:	4b11      	ldr	r3, [pc, #68]	; (8005814 <initAK8963+0x19c>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	b25a      	sxtb	r2, r3
 80057d6:	4b10      	ldr	r3, [pc, #64]	; (8005818 <initAK8963+0x1a0>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	b25b      	sxtb	r3, r3
 80057dc:	4313      	orrs	r3, r2
 80057de:	b25b      	sxtb	r3, r3
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout); // Set magnetometer data resolution and sample ODR
 80057e4:	2364      	movs	r3, #100	; 0x64
 80057e6:	9302      	str	r3, [sp, #8]
 80057e8:	2301      	movs	r3, #1
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	f107 030f 	add.w	r3, r7, #15
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	2301      	movs	r3, #1
 80057f4:	220a      	movs	r2, #10
 80057f6:	2118      	movs	r1, #24
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fc f923 	bl	8001a44 <HAL_I2C_Mem_Write>

    // writeData = 0x16;
    // HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
    HAL_Delay(10);
 80057fe:	200a      	movs	r0, #10
 8005800:	f7fb fcf4 	bl	80011ec <HAL_Delay>
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	bd90      	pop	{r4, r7, pc}
 800580c:	40700000 	.word	0x40700000
 8005810:	3ff00000 	.word	0x3ff00000
 8005814:	20000007 	.word	0x20000007
 8005818:	20000008 	.word	0x20000008

0800581c <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float *dest1, float *dest2)
{
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b095      	sub	sp, #84	; 0x54
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]

    uint16_t ii = 0, sample_count = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800582e:	2300      	movs	r3, #0
 8005830:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 8005834:	2300      	movs	r3, #0
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
 8005838:	2300      	movs	r3, #0
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583c:	2300      	movs	r3, #0
 800583e:	643b      	str	r3, [r7, #64]	; 0x40
 8005840:	2300      	movs	r3, #0
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005844:	2300      	movs	r3, #0
 8005846:	633b      	str	r3, [r7, #48]	; 0x30
 8005848:	2300      	movs	r3, #0
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
    int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 800584c:	4aa2      	ldr	r2, [pc, #648]	; (8005ad8 <calibrateMag+0x2bc>)
 800584e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005852:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005856:	6018      	str	r0, [r3, #0]
 8005858:	3304      	adds	r3, #4
 800585a:	8019      	strh	r1, [r3, #0]
 800585c:	4a9f      	ldr	r2, [pc, #636]	; (8005adc <calibrateMag+0x2c0>)
 800585e:	f107 031c 	add.w	r3, r7, #28
 8005862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005866:	6018      	str	r0, [r3, #0]
 8005868:	3304      	adds	r3, #4
 800586a:	8019      	strh	r1, [r3, #0]
 800586c:	2300      	movs	r3, #0
 800586e:	82bb      	strh	r3, [r7, #20]
 8005870:	2300      	movs	r3, #0
 8005872:	82fb      	strh	r3, [r7, #22]
 8005874:	2300      	movs	r3, #0
 8005876:	833b      	strh	r3, [r7, #24]

    HAL_Delay(4000);
 8005878:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800587c:	f7fb fcb6 	bl	80011ec <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if (Mmode == 0x02)
 8005880:	4b97      	ldr	r3, [pc, #604]	; (8005ae0 <calibrateMag+0x2c4>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d102      	bne.n	800588e <calibrateMag+0x72>
        sample_count = 128; // at 8 Hz ODR, new mag data is available every 125 ms
 8005888:	2380      	movs	r3, #128	; 0x80
 800588a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if (Mmode == 0x06)
 800588e:	4b94      	ldr	r3, [pc, #592]	; (8005ae0 <calibrateMag+0x2c4>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b06      	cmp	r3, #6
 8005894:	d103      	bne.n	800589e <calibrateMag+0x82>
        sample_count = 1500; // at 100 Hz ODR, new mag data is available every 10 ms
 8005896:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800589a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    for (ii = 0; ii < sample_count; ii++)
 800589e:	2300      	movs	r3, #0
 80058a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80058a4:	e055      	b.n	8005952 <calibrateMag+0x136>
    {
        readMagData(I2Cx, mag_temp); // Read the mag data
 80058a6:	f107 0314 	add.w	r3, r7, #20
 80058aa:	4619      	mov	r1, r3
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff fe97 	bl	80055e0 <readMagData>
        for (int jj = 0; jj < 3; jj++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058b6:	e036      	b.n	8005926 <calibrateMag+0x10a>
        {
            if (mag_temp[jj] > mag_max[jj])
 80058b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	3350      	adds	r3, #80	; 0x50
 80058be:	443b      	add	r3, r7
 80058c0:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80058c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	3350      	adds	r3, #80	; 0x50
 80058ca:	443b      	add	r3, r7
 80058cc:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	dd0b      	ble.n	80058ec <calibrateMag+0xd0>
                mag_max[jj] = mag_temp[jj];
 80058d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	3350      	adds	r3, #80	; 0x50
 80058da:	443b      	add	r3, r7
 80058dc:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80058e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	3350      	adds	r3, #80	; 0x50
 80058e6:	443b      	add	r3, r7
 80058e8:	f823 2c2c 	strh.w	r2, [r3, #-44]
            if (mag_temp[jj] < mag_min[jj])
 80058ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	3350      	adds	r3, #80	; 0x50
 80058f2:	443b      	add	r3, r7
 80058f4:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80058f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	3350      	adds	r3, #80	; 0x50
 80058fe:	443b      	add	r3, r7
 8005900:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8005904:	429a      	cmp	r2, r3
 8005906:	da0b      	bge.n	8005920 <calibrateMag+0x104>
                mag_min[jj] = mag_temp[jj];
 8005908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	3350      	adds	r3, #80	; 0x50
 800590e:	443b      	add	r3, r7
 8005910:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8005914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	3350      	adds	r3, #80	; 0x50
 800591a:	443b      	add	r3, r7
 800591c:	f823 2c34 	strh.w	r2, [r3, #-52]
        for (int jj = 0; jj < 3; jj++)
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	3301      	adds	r3, #1
 8005924:	64bb      	str	r3, [r7, #72]	; 0x48
 8005926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005928:	2b02      	cmp	r3, #2
 800592a:	ddc5      	ble.n	80058b8 <calibrateMag+0x9c>
        }
        if (Mmode == 0x02)
 800592c:	4b6c      	ldr	r3, [pc, #432]	; (8005ae0 <calibrateMag+0x2c4>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d102      	bne.n	800593a <calibrateMag+0x11e>
            HAL_Delay(135); // at 8 Hz ODR, new mag data is available every 125 ms
 8005934:	2087      	movs	r0, #135	; 0x87
 8005936:	f7fb fc59 	bl	80011ec <HAL_Delay>
        if (Mmode == 0x06)
 800593a:	4b69      	ldr	r3, [pc, #420]	; (8005ae0 <calibrateMag+0x2c4>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b06      	cmp	r3, #6
 8005940:	d102      	bne.n	8005948 <calibrateMag+0x12c>
            HAL_Delay(12); // at 100 Hz ODR, new mag data is available every 10 ms
 8005942:	200c      	movs	r0, #12
 8005944:	f7fb fc52 	bl	80011ec <HAL_Delay>
    for (ii = 0; ii < sample_count; ii++)
 8005948:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800594c:	3301      	adds	r3, #1
 800594e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005952:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8005956:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800595a:	429a      	cmp	r2, r3
 800595c:	d3a3      	bcc.n	80058a6 <calibrateMag+0x8a>
    }

    // Get hard iron correction
    mag_bias[0] = (mag_max[0] + mag_min[0]) / 2; // get average x mag bias in counts
 800595e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005962:	461a      	mov	r2, r3
 8005964:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	0fda      	lsrs	r2, r3, #31
 800596c:	4413      	add	r3, r2
 800596e:	105b      	asrs	r3, r3, #1
 8005970:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1] = (mag_max[1] + mag_min[1]) / 2; // get average y mag bias in counts
 8005972:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005976:	461a      	mov	r2, r3
 8005978:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800597c:	4413      	add	r3, r2
 800597e:	0fda      	lsrs	r2, r3, #31
 8005980:	4413      	add	r3, r2
 8005982:	105b      	asrs	r3, r3, #1
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2] = (mag_max[2] + mag_min[2]) / 2; // get average z mag bias in counts
 8005986:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800598a:	461a      	mov	r2, r3
 800598c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005990:	4413      	add	r3, r2
 8005992:	0fda      	lsrs	r2, r3, #31
 8005994:	4413      	add	r3, r2
 8005996:	105b      	asrs	r3, r3, #1
 8005998:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float)mag_bias[0] * mRes * magCalibration[0]; // save mag biases in G for main program
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	4618      	mov	r0, r3
 800599e:	f7fb f96d 	bl	8000c7c <__aeabi_i2f>
 80059a2:	4602      	mov	r2, r0
 80059a4:	4b4f      	ldr	r3, [pc, #316]	; (8005ae4 <calibrateMag+0x2c8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f7fb f9ba 	bl	8000d24 <__aeabi_fmul>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	4b4c      	ldr	r3, [pc, #304]	; (8005ae8 <calibrateMag+0x2cc>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f7fb f9b2 	bl	8000d24 <__aeabi_fmul>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	601a      	str	r2, [r3, #0]
    dest1[1] = (float)mag_bias[1] * mRes * magCalibration[1];
 80059c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fb f956 	bl	8000c7c <__aeabi_i2f>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b44      	ldr	r3, [pc, #272]	; (8005ae4 <calibrateMag+0x2c8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f7fb f9a3 	bl	8000d24 <__aeabi_fmul>
 80059de:	4603      	mov	r3, r0
 80059e0:	4618      	mov	r0, r3
 80059e2:	4b41      	ldr	r3, [pc, #260]	; (8005ae8 <calibrateMag+0x2cc>)
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	1d1c      	adds	r4, r3, #4
 80059ea:	4611      	mov	r1, r2
 80059ec:	f7fb f99a 	bl	8000d24 <__aeabi_fmul>
 80059f0:	4603      	mov	r3, r0
 80059f2:	6023      	str	r3, [r4, #0]
    dest1[2] = (float)mag_bias[2] * mRes * magCalibration[2];
 80059f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fb f940 	bl	8000c7c <__aeabi_i2f>
 80059fc:	4602      	mov	r2, r0
 80059fe:	4b39      	ldr	r3, [pc, #228]	; (8005ae4 <calibrateMag+0x2c8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	4610      	mov	r0, r2
 8005a06:	f7fb f98d 	bl	8000d24 <__aeabi_fmul>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	4b36      	ldr	r3, [pc, #216]	; (8005ae8 <calibrateMag+0x2cc>)
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f103 0408 	add.w	r4, r3, #8
 8005a18:	4611      	mov	r1, r2
 8005a1a:	f7fb f983 	bl	8000d24 <__aeabi_fmul>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0] = (mag_max[0] - mag_min[0]) / 2; // get average x axis max chord length in counts
 8005a22:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005a26:	461a      	mov	r2, r3
 8005a28:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	0fda      	lsrs	r2, r3, #31
 8005a30:	4413      	add	r3, r2
 8005a32:	105b      	asrs	r3, r3, #1
 8005a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1] = (mag_max[1] - mag_min[1]) / 2; // get average y axis max chord length in counts
 8005a36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	0fda      	lsrs	r2, r3, #31
 8005a44:	4413      	add	r3, r2
 8005a46:	105b      	asrs	r3, r3, #1
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2] = (mag_max[2] - mag_min[2]) / 2; // get average z axis max chord length in counts
 8005a4a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	0fda      	lsrs	r2, r3, #31
 8005a58:	4413      	add	r3, r2
 8005a5a:	105b      	asrs	r3, r3, #1
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8005a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	441a      	add	r2, r3
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	4413      	add	r3, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fb f907 	bl	8000c7c <__aeabi_i2f>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	647b      	str	r3, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 8005a72:	491e      	ldr	r1, [pc, #120]	; (8005aec <calibrateMag+0x2d0>)
 8005a74:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005a76:	f7fb fa09 	bl	8000e8c <__aeabi_fdiv>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	647b      	str	r3, [r7, #68]	; 0x44

    dest2[0] = avg_rad / ((float)mag_scale[0]);
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fb f8fb 	bl	8000c7c <__aeabi_i2f>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005a8c:	f7fb f9fe 	bl	8000e8c <__aeabi_fdiv>
 8005a90:	4603      	mov	r3, r0
 8005a92:	461a      	mov	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad / ((float)mag_scale[1]);
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fb f8ee 	bl	8000c7c <__aeabi_i2f>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	1d1c      	adds	r4, r3, #4
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005aaa:	f7fb f9ef 	bl	8000e8c <__aeabi_fdiv>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad / ((float)mag_scale[2]);
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fb f8e1 	bl	8000c7c <__aeabi_i2f>
 8005aba:	4602      	mov	r2, r0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f103 0408 	add.w	r4, r3, #8
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005ac6:	f7fb f9e1 	bl	8000e8c <__aeabi_fdiv>
 8005aca:	4603      	mov	r3, r0
 8005acc:	6023      	str	r3, [r4, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	3754      	adds	r7, #84	; 0x54
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd90      	pop	{r4, r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	0800b750 	.word	0x0800b750
 8005adc:	0800b758 	.word	0x0800b758
 8005ae0:	20000008 	.word	0x20000008
 8005ae4:	20000268 	.word	0x20000268
 8005ae8:	20000284 	.word	0x20000284
 8005aec:	40400000 	.word	0x40400000

08005af0 <initMPU9250>:

void initMPU9250(I2C_HandleTypeDef *I2Cx)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af04      	add	r7, sp, #16
 8005af6:	6078      	str	r0, [r7, #4]
    // pre def. vars
    uint8_t readData;
    uint8_t writeData;

    // Wake up device
    writeData = 0x00;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8005afc:	2364      	movs	r3, #100	; 0x64
 8005afe:	9302      	str	r3, [sp, #8]
 8005b00:	2301      	movs	r3, #1
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	f107 030e 	add.w	r3, r7, #14
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	226b      	movs	r2, #107	; 0x6b
 8005b0e:	21d0      	movs	r1, #208	; 0xd0
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7fb ff97 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005b16:	2064      	movs	r0, #100	; 0x64
 8005b18:	f7fb fb68 	bl	80011ec <HAL_Delay>

    writeData = 0x01;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8005b20:	2364      	movs	r3, #100	; 0x64
 8005b22:	9302      	str	r3, [sp, #8]
 8005b24:	2301      	movs	r3, #1
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	f107 030e 	add.w	r3, r7, #14
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	2301      	movs	r3, #1
 8005b30:	226b      	movs	r2, #107	; 0x6b
 8005b32:	21d0      	movs	r1, #208	; 0xd0
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fb ff85 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005b3a:	2064      	movs	r0, #100	; 0x64
 8005b3c:	f7fb fb56 	bl	80011ec <HAL_Delay>

    writeData = 0x03;
 8005b40:	2303      	movs	r3, #3
 8005b42:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8005b44:	2364      	movs	r3, #100	; 0x64
 8005b46:	9302      	str	r3, [sp, #8]
 8005b48:	2301      	movs	r3, #1
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	f107 030e 	add.w	r3, r7, #14
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	2301      	movs	r3, #1
 8005b54:	221a      	movs	r2, #26
 8005b56:	21d0      	movs	r1, #208	; 0xd0
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7fb ff73 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005b5e:	2064      	movs	r0, #100	; 0x64
 8005b60:	f7fb fb44 	bl	80011ec <HAL_Delay>

    writeData = 0x04;
 8005b64:	2304      	movs	r3, #4
 8005b66:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8005b68:	2364      	movs	r3, #100	; 0x64
 8005b6a:	9302      	str	r3, [sp, #8]
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	f107 030e 	add.w	r3, r7, #14
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	2301      	movs	r3, #1
 8005b78:	2219      	movs	r2, #25
 8005b7a:	21d0      	movs	r1, #208	; 0xd0
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7fb ff61 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005b82:	2064      	movs	r0, #100	; 0x64
 8005b84:	f7fb fb32 	bl	80011ec <HAL_Delay>

    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8005b88:	2364      	movs	r3, #100	; 0x64
 8005b8a:	9302      	str	r3, [sp, #8]
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	f107 030f 	add.w	r3, r7, #15
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	2301      	movs	r3, #1
 8005b98:	221b      	movs	r2, #27
 8005b9a:	21d0      	movs	r1, #208	; 0xd0
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7fc f84b 	bl	8001c38 <HAL_I2C_Mem_Read>
    readData = readData & ~0x03;       // Clear Fchoice bits [1:0]
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	f023 0303 	bic.w	r3, r3, #3
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	73fb      	strb	r3, [r7, #15]
    readData = readData & ~0x18;       // Clear GFS bits [4:3]
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	f023 0318 	bic.w	r3, r3, #24
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	73fb      	strb	r3, [r7, #15]
    readData = readData | Gscale << 3; // Set full scale range for the gyro
 8005bb6:	4b3d      	ldr	r3, [pc, #244]	; (8005cac <initMPU9250+0x1bc>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	b25a      	sxtb	r2, r3
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	b25b      	sxtb	r3, r3
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b25b      	sxtb	r3, r3
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);
 8005bca:	2064      	movs	r0, #100	; 0x64
 8005bcc:	f7fb fb0e 	bl	80011ec <HAL_Delay>

    writeData = readData;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8005bd4:	2364      	movs	r3, #100	; 0x64
 8005bd6:	9302      	str	r3, [sp, #8]
 8005bd8:	2301      	movs	r3, #1
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	f107 030e 	add.w	r3, r7, #14
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	2301      	movs	r3, #1
 8005be4:	221b      	movs	r2, #27
 8005be6:	21d0      	movs	r1, #208	; 0xd0
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7fb ff2b 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005bee:	2064      	movs	r0, #100	; 0x64
 8005bf0:	f7fb fafc 	bl	80011ec <HAL_Delay>

    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8005bf4:	2364      	movs	r3, #100	; 0x64
 8005bf6:	9302      	str	r3, [sp, #8]
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	f107 030f 	add.w	r3, r7, #15
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	2301      	movs	r3, #1
 8005c04:	221c      	movs	r2, #28
 8005c06:	21d0      	movs	r1, #208	; 0xd0
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7fc f815 	bl	8001c38 <HAL_I2C_Mem_Read>
    readData = readData & ~0x18;       // Clear AFS bits [4:3]
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
 8005c10:	f023 0318 	bic.w	r3, r3, #24
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	73fb      	strb	r3, [r7, #15]
    readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <initMPU9250+0x1c0>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	b25a      	sxtb	r2, r3
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	b25b      	sxtb	r3, r3
 8005c24:	4313      	orrs	r3, r2
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	73fb      	strb	r3, [r7, #15]

    writeData = readData;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8005c30:	2364      	movs	r3, #100	; 0x64
 8005c32:	9302      	str	r3, [sp, #8]
 8005c34:	2301      	movs	r3, #1
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	f107 030e 	add.w	r3, r7, #14
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	2301      	movs	r3, #1
 8005c40:	221c      	movs	r2, #28
 8005c42:	21d0      	movs	r1, #208	; 0xd0
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7fb fefd 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005c4a:	2064      	movs	r0, #100	; 0x64
 8005c4c:	f7fb face 	bl	80011ec <HAL_Delay>
    //**
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8005c50:	2364      	movs	r3, #100	; 0x64
 8005c52:	9302      	str	r3, [sp, #8]
 8005c54:	2301      	movs	r3, #1
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	f107 030f 	add.w	r3, r7, #15
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	221d      	movs	r2, #29
 8005c62:	21d0      	movs	r1, #208	; 0xd0
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fb ffe7 	bl	8001c38 <HAL_I2C_Mem_Read>
    readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	f023 030f 	bic.w	r3, r3, #15
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	73fb      	strb	r3, [r7, #15]
    readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	f043 0303 	orr.w	r3, r3, #3
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	73fb      	strb	r3, [r7, #15]

    writeData = readData;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8005c82:	2364      	movs	r3, #100	; 0x64
 8005c84:	9302      	str	r3, [sp, #8]
 8005c86:	2301      	movs	r3, #1
 8005c88:	9301      	str	r3, [sp, #4]
 8005c8a:	f107 030e 	add.w	r3, r7, #14
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	2301      	movs	r3, #1
 8005c92:	221d      	movs	r2, #29
 8005c94:	21d0      	movs	r1, #208	; 0xd0
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fb fed4 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005c9c:	2064      	movs	r0, #100	; 0x64
 8005c9e:	f7fb faa5 	bl	80011ec <HAL_Delay>
}
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000005 	.word	0x20000005
 8005cb0:	20000006 	.word	0x20000006

08005cb4 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float *dest1, float *dest2)
{
 8005cb4:	b5b0      	push	{r4, r5, r7, lr}
 8005cb6:	b09e      	sub	sp, #120	; 0x78
 8005cb8:	af04      	add	r7, sp, #16
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
    // pre def. vars
    uint8_t writeData;

    uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
    uint16_t ii, packet_count, fifo_count;
    int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc8:	2300      	movs	r3, #0
 8005cca:	647b      	str	r3, [r7, #68]	; 0x44
 8005ccc:	2300      	movs	r3, #0
 8005cce:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	63bb      	str	r3, [r7, #56]	; 0x38

    // reset device
    writeData = 0x80;
 8005cd8:	2380      	movs	r3, #128	; 0x80
 8005cda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout); // Write a one to bit 7 reset bit; toggle reset device
 8005cde:	2364      	movs	r3, #100	; 0x64
 8005ce0:	9302      	str	r3, [sp, #8]
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	2301      	movs	r3, #1
 8005cee:	226b      	movs	r2, #107	; 0x6b
 8005cf0:	21d0      	movs	r1, #208	; 0xd0
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7fb fea6 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005cf8:	2064      	movs	r0, #100	; 0x64
 8005cfa:	f7fb fa77 	bl	80011ec <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    writeData = 0x01;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8005d04:	2364      	movs	r3, #100	; 0x64
 8005d06:	9302      	str	r3, [sp, #8]
 8005d08:	2301      	movs	r3, #1
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	2301      	movs	r3, #1
 8005d14:	226b      	movs	r2, #107	; 0x6b
 8005d16:	21d0      	movs	r1, #208	; 0xd0
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7fb fe93 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8005d24:	2364      	movs	r3, #100	; 0x64
 8005d26:	9302      	str	r3, [sp, #8]
 8005d28:	2301      	movs	r3, #1
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	2301      	movs	r3, #1
 8005d34:	226c      	movs	r2, #108	; 0x6c
 8005d36:	21d0      	movs	r1, #208	; 0xd0
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7fb fe83 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(200);
 8005d3e:	20c8      	movs	r0, #200	; 0xc8
 8005d40:	f7fb fa54 	bl	80011ec <HAL_Delay>

    // Configure device for bias calculation
    writeData = 0x00;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout); // Disable all interrupts
 8005d4a:	2364      	movs	r3, #100	; 0x64
 8005d4c:	9302      	str	r3, [sp, #8]
 8005d4e:	2301      	movs	r3, #1
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	2301      	movs	r3, #1
 8005d5a:	2238      	movs	r2, #56	; 0x38
 8005d5c:	21d0      	movs	r1, #208	; 0xd0
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f7fb fe70 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout); // Disable FIFO
 8005d6a:	2364      	movs	r3, #100	; 0x64
 8005d6c:	9302      	str	r3, [sp, #8]
 8005d6e:	2301      	movs	r3, #1
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	2301      	movs	r3, #1
 8005d7a:	2223      	movs	r2, #35	; 0x23
 8005d7c:	21d0      	movs	r1, #208	; 0xd0
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7fb fe60 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout); // Turn on internal clock source
 8005d8a:	2364      	movs	r3, #100	; 0x64
 8005d8c:	9302      	str	r3, [sp, #8]
 8005d8e:	2301      	movs	r3, #1
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	2301      	movs	r3, #1
 8005d9a:	226b      	movs	r2, #107	; 0x6b
 8005d9c:	21d0      	movs	r1, #208	; 0xd0
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7fb fe50 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout); // Disable I2C master
 8005daa:	2364      	movs	r3, #100	; 0x64
 8005dac:	9302      	str	r3, [sp, #8]
 8005dae:	2301      	movs	r3, #1
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	2301      	movs	r3, #1
 8005dba:	2224      	movs	r2, #36	; 0x24
 8005dbc:	21d0      	movs	r1, #208	; 0xd0
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f7fb fe40 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout); // Disable FIFO and I2C master modes
 8005dca:	2364      	movs	r3, #100	; 0x64
 8005dcc:	9302      	str	r3, [sp, #8]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	226a      	movs	r2, #106	; 0x6a
 8005ddc:	21d0      	movs	r1, #208	; 0xd0
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f7fb fe30 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x0C;
 8005de4:	230c      	movs	r3, #12
 8005de6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout); // Reset FIFO and DMP
 8005dea:	2364      	movs	r3, #100	; 0x64
 8005dec:	9302      	str	r3, [sp, #8]
 8005dee:	2301      	movs	r3, #1
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	226a      	movs	r2, #106	; 0x6a
 8005dfc:	21d0      	movs	r1, #208	; 0xd0
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7fb fe20 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(15);
 8005e04:	200f      	movs	r0, #15
 8005e06:	f7fb f9f1 	bl	80011ec <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    writeData = 0x01;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout); // Set low-pass filter to 188 Hz
 8005e10:	2364      	movs	r3, #100	; 0x64
 8005e12:	9302      	str	r3, [sp, #8]
 8005e14:	2301      	movs	r3, #1
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	2301      	movs	r3, #1
 8005e20:	221a      	movs	r2, #26
 8005e22:	21d0      	movs	r1, #208	; 0xd0
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7fb fe0d 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout); // Set sample rate to 1 kHz
 8005e30:	2364      	movs	r3, #100	; 0x64
 8005e32:	9302      	str	r3, [sp, #8]
 8005e34:	2301      	movs	r3, #1
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	2301      	movs	r3, #1
 8005e40:	2219      	movs	r2, #25
 8005e42:	21d0      	movs	r1, #208	; 0xd0
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7fb fdfd 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8005e50:	2364      	movs	r3, #100	; 0x64
 8005e52:	9302      	str	r3, [sp, #8]
 8005e54:	2301      	movs	r3, #1
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	2301      	movs	r3, #1
 8005e60:	221b      	movs	r2, #27
 8005e62:	21d0      	movs	r1, #208	; 0xd0
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7fb fded 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8005e70:	2364      	movs	r3, #100	; 0x64
 8005e72:	9302      	str	r3, [sp, #8]
 8005e74:	2301      	movs	r3, #1
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	2301      	movs	r3, #1
 8005e80:	221c      	movs	r2, #28
 8005e82:	21d0      	movs	r1, #208	; 0xd0
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f7fb fddd 	bl	8001a44 <HAL_I2C_Mem_Write>

    uint16_t gyrosensitivity = 131;    // = 131 LSB/degrees/sec
 8005e8a:	2383      	movs	r3, #131	; 0x83
 8005e8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    uint16_t accelsensitivity = 16384; // = 16384 LSB/g
 8005e90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e94:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    writeData = 0x40;
 8005e98:	2340      	movs	r3, #64	; 0x40
 8005e9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout); // Enable FIFO
 8005e9e:	2364      	movs	r3, #100	; 0x64
 8005ea0:	9302      	str	r3, [sp, #8]
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	2301      	movs	r3, #1
 8005eae:	226a      	movs	r2, #106	; 0x6a
 8005eb0:	21d0      	movs	r1, #208	; 0xd0
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f7fb fdc6 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x78;
 8005eb8:	2378      	movs	r3, #120	; 0x78
 8005eba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout); // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8005ebe:	2364      	movs	r3, #100	; 0x64
 8005ec0:	9302      	str	r3, [sp, #8]
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	2301      	movs	r3, #1
 8005ece:	2223      	movs	r2, #35	; 0x23
 8005ed0:	21d0      	movs	r1, #208	; 0xd0
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f7fb fdb6 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(40);                                                                    // accumulate 40 samples in 40 milliseconds = 480 bytes
 8005ed8:	2028      	movs	r0, #40	; 0x28
 8005eda:	f7fb f987 	bl	80011ec <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    writeData = 0x00;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);       // Disable gyro and accelerometer sensors for FIFO
 8005ee4:	2364      	movs	r3, #100	; 0x64
 8005ee6:	9302      	str	r3, [sp, #8]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	2223      	movs	r2, #35	; 0x23
 8005ef6:	21d0      	movs	r1, #208	; 0xd0
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7fb fda3 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout); // read FIFO sample count
 8005efe:	2364      	movs	r3, #100	; 0x64
 8005f00:	9302      	str	r3, [sp, #8]
 8005f02:	2302      	movs	r3, #2
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	2272      	movs	r2, #114	; 0x72
 8005f10:	21d0      	movs	r1, #208	; 0xd0
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7fb fe90 	bl	8001c38 <HAL_I2C_Mem_Read>
    fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8005f18:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	b21a      	sxth	r2, r3
 8005f20:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005f24:	b21b      	sxth	r3, r3
 8005f26:	4313      	orrs	r3, r2
 8005f28:	b21b      	sxth	r3, r3
 8005f2a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 8005f2e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005f32:	4a5a      	ldr	r2, [pc, #360]	; (800609c <calibrateMPU9250+0x3e8>)
 8005f34:	fba2 2303 	umull	r2, r3, r2, r3
 8005f38:	08db      	lsrs	r3, r3, #3
 8005f3a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

    for (ii = 0; ii < packet_count; ii++)
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f44:	e077      	b.n	8006036 <calibrateMPU9250+0x382>
    {
        int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8005f46:	2300      	movs	r3, #0
 8005f48:	833b      	strh	r3, [r7, #24]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	837b      	strh	r3, [r7, #26]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	83bb      	strh	r3, [r7, #28]
 8005f52:	2300      	movs	r3, #0
 8005f54:	823b      	strh	r3, [r7, #16]
 8005f56:	2300      	movs	r3, #0
 8005f58:	827b      	strh	r3, [r7, #18]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	82bb      	strh	r3, [r7, #20]
        HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8005f5e:	2364      	movs	r3, #100	; 0x64
 8005f60:	9302      	str	r3, [sp, #8]
 8005f62:	230c      	movs	r3, #12
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	2274      	movs	r2, #116	; 0x74
 8005f70:	21d0      	movs	r1, #208	; 0xd0
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7fb fe60 	bl	8001c38 <HAL_I2C_Mem_Read>

        // Form signed 16-bit integer for each sample in FIFO
        accel_temp[0] = (int16_t)(((int16_t)calibData[0] << 8) | calibData[1]);
 8005f78:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	b21a      	sxth	r2, r3
 8005f80:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005f84:	b21b      	sxth	r3, r3
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b21b      	sxth	r3, r3
 8005f8a:	833b      	strh	r3, [r7, #24]
        accel_temp[1] = (int16_t)(((int16_t)calibData[2] << 8) | calibData[3]);
 8005f8c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	b21a      	sxth	r2, r3
 8005f94:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005f98:	b21b      	sxth	r3, r3
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	b21b      	sxth	r3, r3
 8005f9e:	837b      	strh	r3, [r7, #26]
        accel_temp[2] = (int16_t)(((int16_t)calibData[4] << 8) | calibData[5]);
 8005fa0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	b21a      	sxth	r2, r3
 8005fa8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005fac:	b21b      	sxth	r3, r3
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	b21b      	sxth	r3, r3
 8005fb2:	83bb      	strh	r3, [r7, #28]
        gyro_temp[0] = (int16_t)(((int16_t)calibData[6] << 8) | calibData[7]);
 8005fb4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	b21a      	sxth	r2, r3
 8005fbc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005fc0:	b21b      	sxth	r3, r3
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	b21b      	sxth	r3, r3
 8005fc6:	823b      	strh	r3, [r7, #16]
        gyro_temp[1] = (int16_t)(((int16_t)calibData[8] << 8) | calibData[9]);
 8005fc8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005fcc:	021b      	lsls	r3, r3, #8
 8005fce:	b21a      	sxth	r2, r3
 8005fd0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005fd4:	b21b      	sxth	r3, r3
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	b21b      	sxth	r3, r3
 8005fda:	827b      	strh	r3, [r7, #18]
        gyro_temp[2] = (int16_t)(((int16_t)calibData[10] << 8) | calibData[11]);
 8005fdc:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005fe0:	021b      	lsls	r3, r3, #8
 8005fe2:	b21a      	sxth	r2, r3
 8005fe4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005fe8:	b21b      	sxth	r3, r3
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b21b      	sxth	r3, r3
 8005fee:	82bb      	strh	r3, [r7, #20]

        // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
        accel_bias[0] += (int32_t)accel_temp[0];
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	633b      	str	r3, [r7, #48]	; 0x30
        accel_bias[1] += (int32_t)accel_temp[1];
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006000:	4413      	add	r3, r2
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
        accel_bias[2] += (int32_t)accel_temp[2];
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	63bb      	str	r3, [r7, #56]	; 0x38
        gyro_bias[0] += (int32_t)gyro_temp[0];
 800600e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006010:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006014:	4413      	add	r3, r2
 8006016:	63fb      	str	r3, [r7, #60]	; 0x3c
        gyro_bias[1] += (int32_t)gyro_temp[1];
 8006018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800601a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800601e:	4413      	add	r3, r2
 8006020:	643b      	str	r3, [r7, #64]	; 0x40
        gyro_bias[2] += (int32_t)gyro_temp[2];
 8006022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006024:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006028:	4413      	add	r3, r2
 800602a:	647b      	str	r3, [r7, #68]	; 0x44
    for (ii = 0; ii < packet_count; ii++)
 800602c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006030:	3301      	adds	r3, #1
 8006032:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006036:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800603a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800603e:	429a      	cmp	r2, r3
 8006040:	d381      	bcc.n	8005f46 <calibrateMPU9250+0x292>
    }

    // Normalize sums to get average count biases
    accel_bias[0] /= (int32_t)packet_count;
 8006042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006044:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006048:	fb92 f3f3 	sdiv	r3, r2, r3
 800604c:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[1] /= (int32_t)packet_count;
 800604e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006050:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006054:	fb92 f3f3 	sdiv	r3, r2, r3
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
    accel_bias[2] /= (int32_t)packet_count;
 800605a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800605c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006060:	fb92 f3f3 	sdiv	r3, r2, r3
 8006064:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[0] /= (int32_t)packet_count;
 8006066:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006068:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800606c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006070:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[1] /= (int32_t)packet_count;
 8006072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006074:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006078:	fb92 f3f3 	sdiv	r3, r2, r3
 800607c:	643b      	str	r3, [r7, #64]	; 0x40
    gyro_bias[2] /= (int32_t)packet_count;
 800607e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006080:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006084:	fb92 f3f3 	sdiv	r3, r2, r3
 8006088:	647b      	str	r3, [r7, #68]	; 0x44

    // Remove gravity from the z-axis accelerometer bias calculation
    if (accel_bias[2] > 0L)
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	dd07      	ble.n	80060a0 <calibrateMPU9250+0x3ec>
    {
        accel_bias[2] -= (int32_t)accelsensitivity;
 8006090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006092:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	63bb      	str	r3, [r7, #56]	; 0x38
 800609a:	e006      	b.n	80060aa <calibrateMPU9250+0x3f6>
 800609c:	aaaaaaab 	.word	0xaaaaaaab
    }
    else
    {
        accel_bias[2] += (int32_t)accelsensitivity;
 80060a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80060a6:	4413      	add	r3, r2
 80060a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    calibData[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80060aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ac:	425b      	negs	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da00      	bge.n	80060b4 <calibrateMPU9250+0x400>
 80060b2:	3303      	adds	r3, #3
 80060b4:	109b      	asrs	r3, r3, #2
 80060b6:	121b      	asrs	r3, r3, #8
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    calibData[1] = (-gyro_bias[0] / 4) & 0xFF;      // Biases are additive, so change sign on calculated average gyro biases
 80060be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c0:	425b      	negs	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	da00      	bge.n	80060c8 <calibrateMPU9250+0x414>
 80060c6:	3303      	adds	r3, #3
 80060c8:	109b      	asrs	r3, r3, #2
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    calibData[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 80060d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d2:	425b      	negs	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da00      	bge.n	80060da <calibrateMPU9250+0x426>
 80060d8:	3303      	adds	r3, #3
 80060da:	109b      	asrs	r3, r3, #2
 80060dc:	121b      	asrs	r3, r3, #8
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    calibData[3] = (-gyro_bias[1] / 4) & 0xFF;
 80060e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e6:	425b      	negs	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	da00      	bge.n	80060ee <calibrateMPU9250+0x43a>
 80060ec:	3303      	adds	r3, #3
 80060ee:	109b      	asrs	r3, r3, #2
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    calibData[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 80060f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f8:	425b      	negs	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da00      	bge.n	8006100 <calibrateMPU9250+0x44c>
 80060fe:	3303      	adds	r3, #3
 8006100:	109b      	asrs	r3, r3, #2
 8006102:	121b      	asrs	r3, r3, #8
 8006104:	b2db      	uxtb	r3, r3
 8006106:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    calibData[5] = (-gyro_bias[2] / 4) & 0xFF;
 800610a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610c:	425b      	negs	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	da00      	bge.n	8006114 <calibrateMPU9250+0x460>
 8006112:	3303      	adds	r3, #3
 8006114:	109b      	asrs	r3, r3, #2
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    // Push gyro biases to hardware registers
    writeData = calibData[0];
 800611c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8006124:	2364      	movs	r3, #100	; 0x64
 8006126:	9302      	str	r3, [sp, #8]
 8006128:	2301      	movs	r3, #1
 800612a:	9301      	str	r3, [sp, #4]
 800612c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	2301      	movs	r3, #1
 8006134:	2213      	movs	r2, #19
 8006136:	21d0      	movs	r1, #208	; 0xd0
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7fb fc83 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = calibData[1];
 800613e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8006142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8006146:	2364      	movs	r3, #100	; 0x64
 8006148:	9302      	str	r3, [sp, #8]
 800614a:	2301      	movs	r3, #1
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	2301      	movs	r3, #1
 8006156:	2214      	movs	r2, #20
 8006158:	21d0      	movs	r1, #208	; 0xd0
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7fb fc72 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = calibData[2];
 8006160:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8006168:	2364      	movs	r3, #100	; 0x64
 800616a:	9302      	str	r3, [sp, #8]
 800616c:	2301      	movs	r3, #1
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	2301      	movs	r3, #1
 8006178:	2215      	movs	r2, #21
 800617a:	21d0      	movs	r1, #208	; 0xd0
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7fb fc61 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = calibData[3];
 8006182:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800618a:	2364      	movs	r3, #100	; 0x64
 800618c:	9302      	str	r3, [sp, #8]
 800618e:	2301      	movs	r3, #1
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	2301      	movs	r3, #1
 800619a:	2216      	movs	r2, #22
 800619c:	21d0      	movs	r1, #208	; 0xd0
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7fb fc50 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = calibData[4];
 80061a4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80061a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80061ac:	2364      	movs	r3, #100	; 0x64
 80061ae:	9302      	str	r3, [sp, #8]
 80061b0:	2301      	movs	r3, #1
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	2301      	movs	r3, #1
 80061bc:	2217      	movs	r2, #23
 80061be:	21d0      	movs	r1, #208	; 0xd0
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7fb fc3f 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = calibData[5];
 80061c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80061ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80061ce:	2364      	movs	r3, #100	; 0x64
 80061d0:	9302      	str	r3, [sp, #8]
 80061d2:	2301      	movs	r3, #1
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2301      	movs	r3, #1
 80061de:	2218      	movs	r2, #24
 80061e0:	21d0      	movs	r1, #208	; 0xd0
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7fb fc2e 	bl	8001a44 <HAL_I2C_Mem_Write>

    // Output scaled gyro biases for display in the main program
    dest1[0] = (float)gyro_bias[0] / (float)gyrosensitivity;
 80061e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fa fd46 	bl	8000c7c <__aeabi_i2f>
 80061f0:	4604      	mov	r4, r0
 80061f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fa fd3c 	bl	8000c74 <__aeabi_ui2f>
 80061fc:	4603      	mov	r3, r0
 80061fe:	4619      	mov	r1, r3
 8006200:	4620      	mov	r0, r4
 8006202:	f7fa fe43 	bl	8000e8c <__aeabi_fdiv>
 8006206:	4603      	mov	r3, r0
 8006208:	461a      	mov	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	601a      	str	r2, [r3, #0]
    dest1[1] = (float)gyro_bias[1] / (float)gyrosensitivity;
 800620e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006210:	4618      	mov	r0, r3
 8006212:	f7fa fd33 	bl	8000c7c <__aeabi_i2f>
 8006216:	4605      	mov	r5, r0
 8006218:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800621c:	4618      	mov	r0, r3
 800621e:	f7fa fd29 	bl	8000c74 <__aeabi_ui2f>
 8006222:	4602      	mov	r2, r0
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	1d1c      	adds	r4, r3, #4
 8006228:	4611      	mov	r1, r2
 800622a:	4628      	mov	r0, r5
 800622c:	f7fa fe2e 	bl	8000e8c <__aeabi_fdiv>
 8006230:	4603      	mov	r3, r0
 8006232:	6023      	str	r3, [r4, #0]
    dest1[2] = (float)gyro_bias[2] / (float)gyrosensitivity;
 8006234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006236:	4618      	mov	r0, r3
 8006238:	f7fa fd20 	bl	8000c7c <__aeabi_i2f>
 800623c:	4605      	mov	r5, r0
 800623e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006242:	4618      	mov	r0, r3
 8006244:	f7fa fd16 	bl	8000c74 <__aeabi_ui2f>
 8006248:	4602      	mov	r2, r0
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f103 0408 	add.w	r4, r3, #8
 8006250:	4611      	mov	r1, r2
 8006252:	4628      	mov	r0, r5
 8006254:	f7fa fe1a 	bl	8000e8c <__aeabi_fdiv>
 8006258:	4603      	mov	r3, r0
 800625a:	6023      	str	r3, [r4, #0]

    // Construct the accelerometer biases for push to the hardware accelerometer bias registers.
    int32_t accel_bias_reg[3] = {0, 0, 0};                                                  // A place to hold the factory accelerometer trim biases
 800625c:	2300      	movs	r3, #0
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
 8006260:	2300      	movs	r3, #0
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
 8006264:	2300      	movs	r3, #0
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); // Read factory accelerometer trim values
 8006268:	2364      	movs	r3, #100	; 0x64
 800626a:	9302      	str	r3, [sp, #8]
 800626c:	2302      	movs	r3, #2
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	2301      	movs	r3, #1
 8006278:	2277      	movs	r2, #119	; 0x77
 800627a:	21d0      	movs	r1, #208	; 0xd0
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7fb fcdb 	bl	8001c38 <HAL_I2C_Mem_Read>
    accel_bias_reg[0] = (int32_t)(((int16_t)calibData[0] << 8) | calibData[1]);
 8006282:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800628c:	4313      	orrs	r3, r2
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8006290:	2364      	movs	r3, #100	; 0x64
 8006292:	9302      	str	r3, [sp, #8]
 8006294:	2302      	movs	r3, #2
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	2301      	movs	r3, #1
 80062a0:	227a      	movs	r2, #122	; 0x7a
 80062a2:	21d0      	movs	r1, #208	; 0xd0
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f7fb fcc7 	bl	8001c38 <HAL_I2C_Mem_Read>
    accel_bias_reg[1] = (int32_t)(((int16_t)calibData[0] << 8) | calibData[1]);
 80062aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80062b4:	4313      	orrs	r3, r2
 80062b6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 80062b8:	2364      	movs	r3, #100	; 0x64
 80062ba:	9302      	str	r3, [sp, #8]
 80062bc:	2302      	movs	r3, #2
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	2301      	movs	r3, #1
 80062c8:	227d      	movs	r2, #125	; 0x7d
 80062ca:	21d0      	movs	r1, #208	; 0xd0
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7fb fcb3 	bl	8001c38 <HAL_I2C_Mem_Read>
    accel_bias_reg[2] = (int32_t)(((int16_t)calibData[0] << 8) | calibData[1]);
 80062d2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80062dc:	4313      	orrs	r3, r2
 80062de:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
    uint32_t mask = 1uL;
 80062e0:	2301      	movs	r3, #1
 80062e2:	65bb      	str	r3, [r7, #88]	; 0x58
    // Define array to hold mask bit for each accelerometer bias axis
    uint8_t mask_bit[3] = {0, 0, 0};
 80062e4:	4a8d      	ldr	r2, [pc, #564]	; (800651c <calibrateMPU9250+0x868>)
 80062e6:	f107 0320 	add.w	r3, r7, #32
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	4611      	mov	r1, r2
 80062ee:	8019      	strh	r1, [r3, #0]
 80062f0:	3302      	adds	r3, #2
 80062f2:	0c12      	lsrs	r2, r2, #16
 80062f4:	701a      	strb	r2, [r3, #0]

    for (ii = 0; ii < 3; ii++)
 80062f6:	2300      	movs	r3, #0
 80062f8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80062fc:	e017      	b.n	800632e <calibrateMPU9250+0x67a>
    {
        // If temperature compensation bit is set, record that fact in mask_bit
        if ((accel_bias_reg[ii] & mask))
 80062fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	3368      	adds	r3, #104	; 0x68
 8006306:	443b      	add	r3, r7
 8006308:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800630c:	461a      	mov	r2, r3
 800630e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <calibrateMPU9250+0x670>
            mask_bit[ii] = 0x01;
 8006316:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800631a:	3368      	adds	r3, #104	; 0x68
 800631c:	443b      	add	r3, r7
 800631e:	2201      	movs	r2, #1
 8006320:	f803 2c48 	strb.w	r2, [r3, #-72]
    for (ii = 0; ii < 3; ii++)
 8006324:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006328:	3301      	adds	r3, #1
 800632a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800632e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006332:	2b02      	cmp	r3, #2
 8006334:	d9e3      	bls.n	80062fe <calibrateMPU9250+0x64a>
    }

    // Construct total accelerometer bias, including calculated average accelerometer bias from above
    accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8006336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	2b00      	cmp	r3, #0
 800633c:	da00      	bge.n	8006340 <calibrateMPU9250+0x68c>
 800633e:	3307      	adds	r3, #7
 8006340:	10db      	asrs	r3, r3, #3
 8006342:	425b      	negs	r3, r3
 8006344:	4413      	add	r3, r2
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias_reg[1] -= (accel_bias[1] / 8);
 8006348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800634a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634c:	2b00      	cmp	r3, #0
 800634e:	da00      	bge.n	8006352 <calibrateMPU9250+0x69e>
 8006350:	3307      	adds	r3, #7
 8006352:	10db      	asrs	r3, r3, #3
 8006354:	425b      	negs	r3, r3
 8006356:	4413      	add	r3, r2
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
    accel_bias_reg[2] -= (accel_bias[2] / 8);
 800635a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	2b00      	cmp	r3, #0
 8006360:	da00      	bge.n	8006364 <calibrateMPU9250+0x6b0>
 8006362:	3307      	adds	r3, #7
 8006364:	10db      	asrs	r3, r3, #3
 8006366:	425b      	negs	r3, r3
 8006368:	4413      	add	r3, r2
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c

    calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	121b      	asrs	r3, r3, #8
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    calibData[1] = (accel_bias_reg[0]) & 0xFF;
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800637e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8006382:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006386:	4313      	orrs	r3, r2
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	121b      	asrs	r3, r3, #8
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    calibData[3] = (accel_bias_reg[1]) & 0xFF;
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80063a0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80063a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80063a8:	4313      	orrs	r3, r2
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	121b      	asrs	r3, r3, #8
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    calibData[5] = (accel_bias_reg[2]) & 0xFF;
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80063c2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80063c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80063ca:	4313      	orrs	r3, r2
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    // Push accelerometer biases to hardware registers
    writeData = calibData[0];
 80063d2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80063d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80063da:	2364      	movs	r3, #100	; 0x64
 80063dc:	9302      	str	r3, [sp, #8]
 80063de:	2301      	movs	r3, #1
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	2301      	movs	r3, #1
 80063ea:	2277      	movs	r2, #119	; 0x77
 80063ec:	21d0      	movs	r1, #208	; 0xd0
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7fb fb28 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = calibData[1];
 80063f4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80063f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80063fc:	2364      	movs	r3, #100	; 0x64
 80063fe:	9302      	str	r3, [sp, #8]
 8006400:	2301      	movs	r3, #1
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	2301      	movs	r3, #1
 800640c:	2278      	movs	r2, #120	; 0x78
 800640e:	21d0      	movs	r1, #208	; 0xd0
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7fb fb17 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = calibData[2];
 8006416:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800641a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800641e:	2364      	movs	r3, #100	; 0x64
 8006420:	9302      	str	r3, [sp, #8]
 8006422:	2301      	movs	r3, #1
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	2301      	movs	r3, #1
 800642e:	227a      	movs	r2, #122	; 0x7a
 8006430:	21d0      	movs	r1, #208	; 0xd0
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7fb fb06 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = calibData[3];
 8006438:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800643c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8006440:	2364      	movs	r3, #100	; 0x64
 8006442:	9302      	str	r3, [sp, #8]
 8006444:	2301      	movs	r3, #1
 8006446:	9301      	str	r3, [sp, #4]
 8006448:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	2301      	movs	r3, #1
 8006450:	227b      	movs	r2, #123	; 0x7b
 8006452:	21d0      	movs	r1, #208	; 0xd0
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7fb faf5 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = calibData[4];
 800645a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800645e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8006462:	2364      	movs	r3, #100	; 0x64
 8006464:	9302      	str	r3, [sp, #8]
 8006466:	2301      	movs	r3, #1
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	2301      	movs	r3, #1
 8006472:	227d      	movs	r2, #125	; 0x7d
 8006474:	21d0      	movs	r1, #208	; 0xd0
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7fb fae4 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = calibData[5];
 800647c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006480:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8006484:	2364      	movs	r3, #100	; 0x64
 8006486:	9302      	str	r3, [sp, #8]
 8006488:	2301      	movs	r3, #1
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	2301      	movs	r3, #1
 8006494:	227e      	movs	r2, #126	; 0x7e
 8006496:	21d0      	movs	r1, #208	; 0xd0
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f7fb fad3 	bl	8001a44 <HAL_I2C_Mem_Write>

    // Output scaled gyro biases for display in the main program
    dest2[0] = (float)accel_bias[0] / (float)accelsensitivity;
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fa fbeb 	bl	8000c7c <__aeabi_i2f>
 80064a6:	4604      	mov	r4, r0
 80064a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fa fbe1 	bl	8000c74 <__aeabi_ui2f>
 80064b2:	4603      	mov	r3, r0
 80064b4:	4619      	mov	r1, r3
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7fa fce8 	bl	8000e8c <__aeabi_fdiv>
 80064bc:	4603      	mov	r3, r0
 80064be:	461a      	mov	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
    dest2[1] = (float)accel_bias[1] / (float)accelsensitivity;
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fa fbd8 	bl	8000c7c <__aeabi_i2f>
 80064cc:	4605      	mov	r5, r0
 80064ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fa fbce 	bl	8000c74 <__aeabi_ui2f>
 80064d8:	4602      	mov	r2, r0
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	1d1c      	adds	r4, r3, #4
 80064de:	4611      	mov	r1, r2
 80064e0:	4628      	mov	r0, r5
 80064e2:	f7fa fcd3 	bl	8000e8c <__aeabi_fdiv>
 80064e6:	4603      	mov	r3, r0
 80064e8:	6023      	str	r3, [r4, #0]
    dest2[2] = (float)accel_bias[2] / (float)accelsensitivity;
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fa fbc5 	bl	8000c7c <__aeabi_i2f>
 80064f2:	4605      	mov	r5, r0
 80064f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fa fbbb 	bl	8000c74 <__aeabi_ui2f>
 80064fe:	4602      	mov	r2, r0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f103 0408 	add.w	r4, r3, #8
 8006506:	4611      	mov	r1, r2
 8006508:	4628      	mov	r0, r5
 800650a:	f7fa fcbf 	bl	8000e8c <__aeabi_fdiv>
 800650e:	4603      	mov	r3, r0
 8006510:	6023      	str	r3, [r4, #0]
}
 8006512:	bf00      	nop
 8006514:	3768      	adds	r7, #104	; 0x68
 8006516:	46bd      	mov	sp, r7
 8006518:	bdb0      	pop	{r4, r5, r7, pc}
 800651a:	bf00      	nop
 800651c:	0800b760 	.word	0x0800b760

08006520 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float *destination)
{
 8006520:	b5b0      	push	{r4, r5, r7, lr}
 8006522:	b0a8      	sub	sp, #160	; 0xa0
 8006524:	af04      	add	r7, sp, #16
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
    uint8_t writeData;

    uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 800652a:	4aa2      	ldr	r2, [pc, #648]	; (80067b4 <MPU9250SelfTest+0x294>)
 800652c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006534:	6018      	str	r0, [r3, #0]
 8006536:	3304      	adds	r3, #4
 8006538:	8019      	strh	r1, [r3, #0]
    uint8_t selfTest[6];
    int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 800653a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	605a      	str	r2, [r3, #4]
 8006544:	609a      	str	r2, [r3, #8]
 8006546:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	605a      	str	r2, [r3, #4]
 8006550:	609a      	str	r2, [r3, #8]
 8006552:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	605a      	str	r2, [r3, #4]
 800655c:	609a      	str	r2, [r3, #8]
 800655e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	605a      	str	r2, [r3, #4]
 8006568:	609a      	str	r2, [r3, #8]
    float factoryTrim[6];
    uint8_t FS = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    writeData = 0x00;
 8006570:	2300      	movs	r3, #0
 8006572:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout); // Set gyro sample rate to 1 kHz
 8006576:	2364      	movs	r3, #100	; 0x64
 8006578:	9302      	str	r3, [sp, #8]
 800657a:	2301      	movs	r3, #1
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	2301      	movs	r3, #1
 8006586:	2219      	movs	r2, #25
 8006588:	21d0      	movs	r1, #208	; 0xd0
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fb fa5a 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x02;
 8006590:	2302      	movs	r3, #2
 8006592:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8006596:	2364      	movs	r3, #100	; 0x64
 8006598:	9302      	str	r3, [sp, #8]
 800659a:	2301      	movs	r3, #1
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2301      	movs	r3, #1
 80065a6:	221a      	movs	r2, #26
 80065a8:	21d0      	movs	r1, #208	; 0xd0
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fb fa4a 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = FS << 3;
 80065b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout); // Set full scale range for the gyro to 250 dps
 80065bc:	2364      	movs	r3, #100	; 0x64
 80065be:	9302      	str	r3, [sp, #8]
 80065c0:	2301      	movs	r3, #1
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	2301      	movs	r3, #1
 80065cc:	221b      	movs	r2, #27
 80065ce:	21d0      	movs	r1, #208	; 0xd0
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fb fa37 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x02;
 80065d6:	2302      	movs	r3, #2
 80065d8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80065dc:	2364      	movs	r3, #100	; 0x64
 80065de:	9302      	str	r3, [sp, #8]
 80065e0:	2301      	movs	r3, #1
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	2301      	movs	r3, #1
 80065ec:	221d      	movs	r2, #29
 80065ee:	21d0      	movs	r1, #208	; 0xd0
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fb fa27 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = FS << 3;
 80065f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout); // Set full scale range for the accelerometer to 2 g
 8006602:	2364      	movs	r3, #100	; 0x64
 8006604:	9302      	str	r3, [sp, #8]
 8006606:	2301      	movs	r3, #1
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	2301      	movs	r3, #1
 8006612:	221c      	movs	r2, #28
 8006614:	21d0      	movs	r1, #208	; 0xd0
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fb fa14 	bl	8001a44 <HAL_I2C_Mem_Write>

    // get average current values of gyro and acclerometer
    for (int ii = 0; ii < 200; ii++)
 800661c:	2300      	movs	r3, #0
 800661e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006622:	e066      	b.n	80066f2 <MPU9250SelfTest+0x1d2>
    {

        HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8006624:	2364      	movs	r3, #100	; 0x64
 8006626:	9302      	str	r3, [sp, #8]
 8006628:	2306      	movs	r3, #6
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	2301      	movs	r3, #1
 8006634:	223b      	movs	r2, #59	; 0x3b
 8006636:	21d0      	movs	r1, #208	; 0xd0
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fb fafd 	bl	8001c38 <HAL_I2C_Mem_Read>
        aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]);                     // Turn the MSB and LSB into a signed 16-bit value
 800663e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006640:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8006644:	0212      	lsls	r2, r2, #8
 8006646:	b211      	sxth	r1, r2
 8006648:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800664c:	b212      	sxth	r2, r2
 800664e:	430a      	orrs	r2, r1
 8006650:	b212      	sxth	r2, r2
 8006652:	4413      	add	r3, r2
 8006654:	653b      	str	r3, [r7, #80]	; 0x50
        aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]);
 8006656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006658:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800665c:	0212      	lsls	r2, r2, #8
 800665e:	b211      	sxth	r1, r2
 8006660:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8006664:	b212      	sxth	r2, r2
 8006666:	430a      	orrs	r2, r1
 8006668:	b212      	sxth	r2, r2
 800666a:	4413      	add	r3, r2
 800666c:	657b      	str	r3, [r7, #84]	; 0x54
        aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]);
 800666e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006670:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8006674:	0212      	lsls	r2, r2, #8
 8006676:	b211      	sxth	r1, r2
 8006678:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800667c:	b212      	sxth	r2, r2
 800667e:	430a      	orrs	r2, r1
 8006680:	b212      	sxth	r2, r2
 8006682:	4413      	add	r3, r2
 8006684:	65bb      	str	r3, [r7, #88]	; 0x58

        HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout); // Read the six raw data registers sequentially into data array
 8006686:	2364      	movs	r3, #100	; 0x64
 8006688:	9302      	str	r3, [sp, #8]
 800668a:	2306      	movs	r3, #6
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	2301      	movs	r3, #1
 8006696:	2243      	movs	r2, #67	; 0x43
 8006698:	21d0      	movs	r1, #208	; 0xd0
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fb facc 	bl	8001c38 <HAL_I2C_Mem_Read>
        gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]);                    // Turn the MSB and LSB into a signed 16-bit value
 80066a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066a2:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80066a6:	0212      	lsls	r2, r2, #8
 80066a8:	b211      	sxth	r1, r2
 80066aa:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80066ae:	b212      	sxth	r2, r2
 80066b0:	430a      	orrs	r2, r1
 80066b2:	b212      	sxth	r2, r2
 80066b4:	4413      	add	r3, r2
 80066b6:	65fb      	str	r3, [r7, #92]	; 0x5c
        gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]);
 80066b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ba:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80066be:	0212      	lsls	r2, r2, #8
 80066c0:	b211      	sxth	r1, r2
 80066c2:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80066c6:	b212      	sxth	r2, r2
 80066c8:	430a      	orrs	r2, r1
 80066ca:	b212      	sxth	r2, r2
 80066cc:	4413      	add	r3, r2
 80066ce:	663b      	str	r3, [r7, #96]	; 0x60
        gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]);
 80066d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066d2:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80066d6:	0212      	lsls	r2, r2, #8
 80066d8:	b211      	sxth	r1, r2
 80066da:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80066de:	b212      	sxth	r2, r2
 80066e0:	430a      	orrs	r2, r1
 80066e2:	b212      	sxth	r2, r2
 80066e4:	4413      	add	r3, r2
 80066e6:	667b      	str	r3, [r7, #100]	; 0x64
    for (int ii = 0; ii < 200; ii++)
 80066e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ec:	3301      	adds	r3, #1
 80066ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066f6:	2bc7      	cmp	r3, #199	; 0xc7
 80066f8:	dd94      	ble.n	8006624 <MPU9250SelfTest+0x104>
    }

    // Get average of 200 values and store as average current readings
    for (int ii = 0; ii < 3; ii++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006700:	e02c      	b.n	800675c <MPU9250SelfTest+0x23c>
    {
        aAvg[ii] /= 200;
 8006702:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	3390      	adds	r3, #144	; 0x90
 800670a:	443b      	add	r3, r7
 800670c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006710:	4a29      	ldr	r2, [pc, #164]	; (80067b8 <MPU9250SelfTest+0x298>)
 8006712:	fb82 1203 	smull	r1, r2, r2, r3
 8006716:	1192      	asrs	r2, r2, #6
 8006718:	17db      	asrs	r3, r3, #31
 800671a:	1ad2      	subs	r2, r2, r3
 800671c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	3390      	adds	r3, #144	; 0x90
 8006724:	443b      	add	r3, r7
 8006726:	f843 2c40 	str.w	r2, [r3, #-64]
        gAvg[ii] /= 200;
 800672a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	3390      	adds	r3, #144	; 0x90
 8006732:	443b      	add	r3, r7
 8006734:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8006738:	4a1f      	ldr	r2, [pc, #124]	; (80067b8 <MPU9250SelfTest+0x298>)
 800673a:	fb82 1203 	smull	r1, r2, r2, r3
 800673e:	1192      	asrs	r2, r2, #6
 8006740:	17db      	asrs	r3, r3, #31
 8006742:	1ad2      	subs	r2, r2, r3
 8006744:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	3390      	adds	r3, #144	; 0x90
 800674c:	443b      	add	r3, r7
 800674e:	f843 2c34 	str.w	r2, [r3, #-52]
    for (int ii = 0; ii < 3; ii++)
 8006752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006756:	3301      	adds	r3, #1
 8006758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800675c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006760:	2b02      	cmp	r3, #2
 8006762:	ddce      	ble.n	8006702 <MPU9250SelfTest+0x1e2>
    }

    // Configure the accelerometer for self-test
    writeData = 0xE0;
 8006764:	23e0      	movs	r3, #224	; 0xe0
 8006766:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 800676a:	2364      	movs	r3, #100	; 0x64
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	2301      	movs	r3, #1
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	2301      	movs	r3, #1
 800677a:	221c      	movs	r2, #28
 800677c:	21d0      	movs	r1, #208	; 0xd0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fb f960 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0xE0;
 8006784:	23e0      	movs	r3, #224	; 0xe0
 8006786:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 800678a:	2364      	movs	r3, #100	; 0x64
 800678c:	9302      	str	r3, [sp, #8]
 800678e:	2301      	movs	r3, #1
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	2301      	movs	r3, #1
 800679a:	221b      	movs	r2, #27
 800679c:	21d0      	movs	r1, #208	; 0xd0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fb f950 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(25);                                                                        // Delay a while to let the device stabilize
 80067a4:	2019      	movs	r0, #25
 80067a6:	f7fa fd21 	bl	80011ec <HAL_Delay>

    // get average self-test values of gyro and acclerometer
    for (int ii = 0; ii < 200; ii++)
 80067aa:	2300      	movs	r3, #0
 80067ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067b0:	e06b      	b.n	800688a <MPU9250SelfTest+0x36a>
 80067b2:	bf00      	nop
 80067b4:	0800b764 	.word	0x0800b764
 80067b8:	51eb851f 	.word	0x51eb851f
    {

        HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 80067bc:	2364      	movs	r3, #100	; 0x64
 80067be:	9302      	str	r3, [sp, #8]
 80067c0:	2306      	movs	r3, #6
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	2301      	movs	r3, #1
 80067cc:	223b      	movs	r2, #59	; 0x3b
 80067ce:	21d0      	movs	r1, #208	; 0xd0
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7fb fa31 	bl	8001c38 <HAL_I2C_Mem_Read>
        aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]);                   // Turn the MSB and LSB into a signed 16-bit value
 80067d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80067dc:	0212      	lsls	r2, r2, #8
 80067de:	b211      	sxth	r1, r2
 80067e0:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80067e4:	b212      	sxth	r2, r2
 80067e6:	430a      	orrs	r2, r1
 80067e8:	b212      	sxth	r2, r2
 80067ea:	4413      	add	r3, r2
 80067ec:	647b      	str	r3, [r7, #68]	; 0x44
        aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]);
 80067ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f0:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80067f4:	0212      	lsls	r2, r2, #8
 80067f6:	b211      	sxth	r1, r2
 80067f8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80067fc:	b212      	sxth	r2, r2
 80067fe:	430a      	orrs	r2, r1
 8006800:	b212      	sxth	r2, r2
 8006802:	4413      	add	r3, r2
 8006804:	64bb      	str	r3, [r7, #72]	; 0x48
        aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]);
 8006806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006808:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800680c:	0212      	lsls	r2, r2, #8
 800680e:	b211      	sxth	r1, r2
 8006810:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8006814:	b212      	sxth	r2, r2
 8006816:	430a      	orrs	r2, r1
 8006818:	b212      	sxth	r2, r2
 800681a:	4413      	add	r3, r2
 800681c:	64fb      	str	r3, [r7, #76]	; 0x4c

        HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout); // Read the six raw data registers sequentially into data array
 800681e:	2364      	movs	r3, #100	; 0x64
 8006820:	9302      	str	r3, [sp, #8]
 8006822:	2306      	movs	r3, #6
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	2301      	movs	r3, #1
 800682e:	2243      	movs	r2, #67	; 0x43
 8006830:	21d0      	movs	r1, #208	; 0xd0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fb fa00 	bl	8001c38 <HAL_I2C_Mem_Read>
        gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]);                  // Turn the MSB and LSB into a signed 16-bit value
 8006838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683a:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800683e:	0212      	lsls	r2, r2, #8
 8006840:	b211      	sxth	r1, r2
 8006842:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8006846:	b212      	sxth	r2, r2
 8006848:	430a      	orrs	r2, r1
 800684a:	b212      	sxth	r2, r2
 800684c:	4413      	add	r3, r2
 800684e:	63bb      	str	r3, [r7, #56]	; 0x38
        gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]);
 8006850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006852:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8006856:	0212      	lsls	r2, r2, #8
 8006858:	b211      	sxth	r1, r2
 800685a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800685e:	b212      	sxth	r2, r2
 8006860:	430a      	orrs	r2, r1
 8006862:	b212      	sxth	r2, r2
 8006864:	4413      	add	r3, r2
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
        gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]);
 8006868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800686e:	0212      	lsls	r2, r2, #8
 8006870:	b211      	sxth	r1, r2
 8006872:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8006876:	b212      	sxth	r2, r2
 8006878:	430a      	orrs	r2, r1
 800687a:	b212      	sxth	r2, r2
 800687c:	4413      	add	r3, r2
 800687e:	643b      	str	r3, [r7, #64]	; 0x40
    for (int ii = 0; ii < 200; ii++)
 8006880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006884:	3301      	adds	r3, #1
 8006886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800688a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800688e:	2bc7      	cmp	r3, #199	; 0xc7
 8006890:	dd94      	ble.n	80067bc <MPU9250SelfTest+0x29c>
    }

    // Get average of 200 values and store as average self-test readings
    for (int ii = 0; ii < 3; ii++)
 8006892:	2300      	movs	r3, #0
 8006894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006898:	e02c      	b.n	80068f4 <MPU9250SelfTest+0x3d4>
    {
        aSTAvg[ii] /= 200;
 800689a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	3390      	adds	r3, #144	; 0x90
 80068a2:	443b      	add	r3, r7
 80068a4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80068a8:	4ad7      	ldr	r2, [pc, #860]	; (8006c08 <MPU9250SelfTest+0x6e8>)
 80068aa:	fb82 1203 	smull	r1, r2, r2, r3
 80068ae:	1192      	asrs	r2, r2, #6
 80068b0:	17db      	asrs	r3, r3, #31
 80068b2:	1ad2      	subs	r2, r2, r3
 80068b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	3390      	adds	r3, #144	; 0x90
 80068bc:	443b      	add	r3, r7
 80068be:	f843 2c4c 	str.w	r2, [r3, #-76]
        gSTAvg[ii] /= 200;
 80068c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	3390      	adds	r3, #144	; 0x90
 80068ca:	443b      	add	r3, r7
 80068cc:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80068d0:	4acd      	ldr	r2, [pc, #820]	; (8006c08 <MPU9250SelfTest+0x6e8>)
 80068d2:	fb82 1203 	smull	r1, r2, r2, r3
 80068d6:	1192      	asrs	r2, r2, #6
 80068d8:	17db      	asrs	r3, r3, #31
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	3390      	adds	r3, #144	; 0x90
 80068e4:	443b      	add	r3, r7
 80068e6:	f843 2c58 	str.w	r2, [r3, #-88]
    for (int ii = 0; ii < 3; ii++)
 80068ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068ee:	3301      	adds	r3, #1
 80068f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	ddce      	ble.n	800689a <MPU9250SelfTest+0x37a>
    }

    // Configure the gyro and accelerometer for normal operation
    writeData = 0x00;
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8006902:	2364      	movs	r3, #100	; 0x64
 8006904:	9302      	str	r3, [sp, #8]
 8006906:	2301      	movs	r3, #1
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	2301      	movs	r3, #1
 8006912:	221c      	movs	r2, #28
 8006914:	21d0      	movs	r1, #208	; 0xd0
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fb f894 	bl	8001a44 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 800691c:	2300      	movs	r3, #0
 800691e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8006922:	2364      	movs	r3, #100	; 0x64
 8006924:	9302      	str	r3, [sp, #8]
 8006926:	2301      	movs	r3, #1
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2301      	movs	r3, #1
 8006932:	221b      	movs	r2, #27
 8006934:	21d0      	movs	r1, #208	; 0xd0
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fb f884 	bl	8001a44 <HAL_I2C_Mem_Write>
    HAL_Delay(25); // Delay a while to let the device stabilize
 800693c:	2019      	movs	r0, #25
 800693e:	f7fa fc55 	bl	80011ec <HAL_Delay>

    // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout); // X-axis accel self-test results
 8006942:	2364      	movs	r3, #100	; 0x64
 8006944:	9302      	str	r3, [sp, #8]
 8006946:	2301      	movs	r3, #1
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	2301      	movs	r3, #1
 8006952:	220d      	movs	r2, #13
 8006954:	21d0      	movs	r1, #208	; 0xd0
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fb f96e 	bl	8001c38 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout); // Y-axis accel self-test results
 800695c:	2364      	movs	r3, #100	; 0x64
 800695e:	9302      	str	r3, [sp, #8]
 8006960:	2301      	movs	r3, #1
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006968:	3301      	adds	r3, #1
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	2301      	movs	r3, #1
 800696e:	220e      	movs	r2, #14
 8006970:	21d0      	movs	r1, #208	; 0xd0
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fb f960 	bl	8001c38 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout); // Z-axis accel self-test results
 8006978:	2364      	movs	r3, #100	; 0x64
 800697a:	9302      	str	r3, [sp, #8]
 800697c:	2301      	movs	r3, #1
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006984:	3302      	adds	r3, #2
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	2301      	movs	r3, #1
 800698a:	220f      	movs	r2, #15
 800698c:	21d0      	movs	r1, #208	; 0xd0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fb f952 	bl	8001c38 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);  // X-axis gyro self-test results
 8006994:	2364      	movs	r3, #100	; 0x64
 8006996:	9302      	str	r3, [sp, #8]
 8006998:	2301      	movs	r3, #1
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80069a0:	3303      	adds	r3, #3
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	2301      	movs	r3, #1
 80069a6:	2200      	movs	r2, #0
 80069a8:	21d0      	movs	r1, #208	; 0xd0
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fb f944 	bl	8001c38 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);  // Y-axis gyro self-test results
 80069b0:	2364      	movs	r3, #100	; 0x64
 80069b2:	9302      	str	r3, [sp, #8]
 80069b4:	2301      	movs	r3, #1
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80069bc:	3304      	adds	r3, #4
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	2301      	movs	r3, #1
 80069c2:	2201      	movs	r2, #1
 80069c4:	21d0      	movs	r1, #208	; 0xd0
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fb f936 	bl	8001c38 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);  // Z-axis gyro self-test results
 80069cc:	2364      	movs	r3, #100	; 0x64
 80069ce:	9302      	str	r3, [sp, #8]
 80069d0:	2301      	movs	r3, #1
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80069d8:	3305      	adds	r3, #5
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	2301      	movs	r3, #1
 80069de:	2202      	movs	r2, #2
 80069e0:	21d0      	movs	r1, #208	; 0xd0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fb f928 	bl	8001c38 <HAL_I2C_Mem_Read>

    // Retrieve factory self-test value from self-test code reads
    factoryTrim[0] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 80069e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80069ec:	f640 223c 	movw	r2, #2620	; 0xa3c
 80069f0:	fa02 f303 	lsl.w	r3, r2, r3
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fa f941 	bl	8000c7c <__aeabi_i2f>
 80069fa:	4603      	mov	r3, r0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7f9 fd0b 	bl	8000418 <__aeabi_f2d>
 8006a02:	4604      	mov	r4, r0
 8006a04:	460d      	mov	r5, r1
 8006a06:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fa f932 	bl	8000c74 <__aeabi_ui2f>
 8006a10:	4603      	mov	r3, r0
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7f9 fd00 	bl	8000418 <__aeabi_f2d>
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	4b7b      	ldr	r3, [pc, #492]	; (8006c0c <MPU9250SelfTest+0x6ec>)
 8006a1e:	f7f9 fb9b 	bl	8000158 <__aeabi_dsub>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	a176      	add	r1, pc, #472	; (adr r1, 8006c00 <MPU9250SelfTest+0x6e0>)
 8006a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a2c:	f003 fc2c 	bl	800a288 <pow>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7f9 fd46 	bl	80004c8 <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	f7fa f810 	bl	8000a68 <__aeabi_d2f>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	623b      	str	r3, [r7, #32]
    factoryTrim[1] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8006a4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006a50:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fa f90f 	bl	8000c7c <__aeabi_i2f>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7f9 fcd9 	bl	8000418 <__aeabi_f2d>
 8006a66:	4604      	mov	r4, r0
 8006a68:	460d      	mov	r5, r1
 8006a6a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fa f900 	bl	8000c74 <__aeabi_ui2f>
 8006a74:	4603      	mov	r3, r0
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7f9 fcce 	bl	8000418 <__aeabi_f2d>
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	4b62      	ldr	r3, [pc, #392]	; (8006c0c <MPU9250SelfTest+0x6ec>)
 8006a82:	f7f9 fb69 	bl	8000158 <__aeabi_dsub>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	a15d      	add	r1, pc, #372	; (adr r1, 8006c00 <MPU9250SelfTest+0x6e0>)
 8006a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a90:	f003 fbfa 	bl	800a288 <pow>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4620      	mov	r0, r4
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	f7f9 fd14 	bl	80004c8 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	f7f9 ffde 	bl	8000a68 <__aeabi_d2f>
 8006aac:	4603      	mov	r3, r0
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
    factoryTrim[2] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 8006ab0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006ab4:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fa f8dd 	bl	8000c7c <__aeabi_i2f>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7f9 fca7 	bl	8000418 <__aeabi_f2d>
 8006aca:	4604      	mov	r4, r0
 8006acc:	460d      	mov	r5, r1
 8006ace:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fa f8ce 	bl	8000c74 <__aeabi_ui2f>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7f9 fc9c 	bl	8000418 <__aeabi_f2d>
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	4b49      	ldr	r3, [pc, #292]	; (8006c0c <MPU9250SelfTest+0x6ec>)
 8006ae6:	f7f9 fb37 	bl	8000158 <__aeabi_dsub>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	a144      	add	r1, pc, #272	; (adr r1, 8006c00 <MPU9250SelfTest+0x6e0>)
 8006af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006af4:	f003 fbc8 	bl	800a288 <pow>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7f9 fce2 	bl	80004c8 <__aeabi_dmul>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	f7f9 ffac 	bl	8000a68 <__aeabi_d2f>
 8006b10:	4603      	mov	r3, r0
 8006b12:	62bb      	str	r3, [r7, #40]	; 0x28
    factoryTrim[3] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8006b14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b18:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fa f8ab 	bl	8000c7c <__aeabi_i2f>
 8006b26:	4603      	mov	r3, r0
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7f9 fc75 	bl	8000418 <__aeabi_f2d>
 8006b2e:	4604      	mov	r4, r0
 8006b30:	460d      	mov	r5, r1
 8006b32:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fa f89c 	bl	8000c74 <__aeabi_ui2f>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7f9 fc6a 	bl	8000418 <__aeabi_f2d>
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	4b30      	ldr	r3, [pc, #192]	; (8006c0c <MPU9250SelfTest+0x6ec>)
 8006b4a:	f7f9 fb05 	bl	8000158 <__aeabi_dsub>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	a12b      	add	r1, pc, #172	; (adr r1, 8006c00 <MPU9250SelfTest+0x6e0>)
 8006b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b58:	f003 fb96 	bl	800a288 <pow>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4620      	mov	r0, r4
 8006b62:	4629      	mov	r1, r5
 8006b64:	f7f9 fcb0 	bl	80004c8 <__aeabi_dmul>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4619      	mov	r1, r3
 8006b70:	f7f9 ff7a 	bl	8000a68 <__aeabi_d2f>
 8006b74:	4603      	mov	r3, r0
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    factoryTrim[4] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8006b78:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b7c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fa f879 	bl	8000c7c <__aeabi_i2f>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7f9 fc43 	bl	8000418 <__aeabi_f2d>
 8006b92:	4604      	mov	r4, r0
 8006b94:	460d      	mov	r5, r1
 8006b96:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fa f86a 	bl	8000c74 <__aeabi_ui2f>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7f9 fc38 	bl	8000418 <__aeabi_f2d>
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	4b17      	ldr	r3, [pc, #92]	; (8006c0c <MPU9250SelfTest+0x6ec>)
 8006bae:	f7f9 fad3 	bl	8000158 <__aeabi_dsub>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	a112      	add	r1, pc, #72	; (adr r1, 8006c00 <MPU9250SelfTest+0x6e0>)
 8006bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bbc:	f003 fb64 	bl	800a288 <pow>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f7f9 fc7e 	bl	80004c8 <__aeabi_dmul>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	f7f9 ff48 	bl	8000a68 <__aeabi_d2f>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	633b      	str	r3, [r7, #48]	; 0x30
    factoryTrim[5] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8006bdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006be0:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fa f847 	bl	8000c7c <__aeabi_i2f>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7f9 fc11 	bl	8000418 <__aeabi_f2d>
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	e00a      	b.n	8006c10 <MPU9250SelfTest+0x6f0>
 8006bfa:	bf00      	nop
 8006bfc:	f3af 8000 	nop.w
 8006c00:	c28f5c29 	.word	0xc28f5c29
 8006c04:	3ff028f5 	.word	0x3ff028f5
 8006c08:	51eb851f 	.word	0x51eb851f
 8006c0c:	3ff00000 	.word	0x3ff00000
 8006c10:	460d      	mov	r5, r1
 8006c12:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fa f82c 	bl	8000c74 <__aeabi_ui2f>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7f9 fbfa 	bl	8000418 <__aeabi_f2d>
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	4b9f      	ldr	r3, [pc, #636]	; (8006ea8 <MPU9250SelfTest+0x988>)
 8006c2a:	f7f9 fa95 	bl	8000158 <__aeabi_dsub>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	a19b      	add	r1, pc, #620	; (adr r1, 8006ea0 <MPU9250SelfTest+0x980>)
 8006c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c38:	f003 fb26 	bl	800a288 <pow>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4620      	mov	r0, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	f7f9 fc40 	bl	80004c8 <__aeabi_dmul>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f7f9 ff0a 	bl	8000a68 <__aeabi_d2f>
 8006c54:	4603      	mov	r3, r0
 8006c56:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t testResults[6];

    // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
    // To get percent, must multiply by 100
    for (int i = 0; i < 3; i++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c5c:	e088      	b.n	8006d70 <MPU9250SelfTest+0x850>
    {
        testResults[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i] - 100.;         // Report percent differences
 8006c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	3390      	adds	r3, #144	; 0x90
 8006c64:	443b      	add	r3, r7
 8006c66:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8006c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	3390      	adds	r3, #144	; 0x90
 8006c70:	443b      	add	r3, r7
 8006c72:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7f9 ffff 	bl	8000c7c <__aeabi_i2f>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7f9 fbc9 	bl	8000418 <__aeabi_f2d>
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	4b88      	ldr	r3, [pc, #544]	; (8006eac <MPU9250SelfTest+0x98c>)
 8006c8c:	f7f9 fc1c 	bl	80004c8 <__aeabi_dmul>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4614      	mov	r4, r2
 8006c96:	461d      	mov	r5, r3
 8006c98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	3390      	adds	r3, #144	; 0x90
 8006c9e:	443b      	add	r3, r7
 8006ca0:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7f9 fbb7 	bl	8000418 <__aeabi_f2d>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4620      	mov	r0, r4
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	f7f9 fd33 	bl	800071c <__aeabi_ddiv>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	4b7a      	ldr	r3, [pc, #488]	; (8006eac <MPU9250SelfTest+0x98c>)
 8006cc4:	f7f9 fa48 	bl	8000158 <__aeabi_dsub>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4610      	mov	r0, r2
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f7f9 feaa 	bl	8000a28 <__aeabi_d2uiz>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	3390      	adds	r3, #144	; 0x90
 8006cdc:	443b      	add	r3, r7
 8006cde:	f843 2c88 	str.w	r2, [r3, #-136]
        testResults[i + 3] = 100.0 * ((float)(gSTAvg[i] - gAvg[i])) / factoryTrim[i + 3] - 100.; // Report percent differences
 8006ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	3390      	adds	r3, #144	; 0x90
 8006ce8:	443b      	add	r3, r7
 8006cea:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8006cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	3390      	adds	r3, #144	; 0x90
 8006cf4:	443b      	add	r3, r7
 8006cf6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7f9 ffbd 	bl	8000c7c <__aeabi_i2f>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7f9 fb87 	bl	8000418 <__aeabi_f2d>
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	4b67      	ldr	r3, [pc, #412]	; (8006eac <MPU9250SelfTest+0x98c>)
 8006d10:	f7f9 fbda 	bl	80004c8 <__aeabi_dmul>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4614      	mov	r4, r2
 8006d1a:	461d      	mov	r5, r3
 8006d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d1e:	3303      	adds	r3, #3
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	3390      	adds	r3, #144	; 0x90
 8006d24:	443b      	add	r3, r7
 8006d26:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7f9 fb74 	bl	8000418 <__aeabi_f2d>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4620      	mov	r0, r4
 8006d36:	4629      	mov	r1, r5
 8006d38:	f7f9 fcf0 	bl	800071c <__aeabi_ddiv>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4610      	mov	r0, r2
 8006d42:	4619      	mov	r1, r3
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	4b58      	ldr	r3, [pc, #352]	; (8006eac <MPU9250SelfTest+0x98c>)
 8006d4a:	f7f9 fa05 	bl	8000158 <__aeabi_dsub>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4610      	mov	r0, r2
 8006d54:	4619      	mov	r1, r3
 8006d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d58:	1cdc      	adds	r4, r3, #3
 8006d5a:	f7f9 fe65 	bl	8000a28 <__aeabi_d2uiz>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	00a3      	lsls	r3, r4, #2
 8006d62:	3390      	adds	r3, #144	; 0x90
 8006d64:	443b      	add	r3, r7
 8006d66:	f843 2c88 	str.w	r2, [r3, #-136]
    for (int i = 0; i < 3; i++)
 8006d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	f77f af73 	ble.w	8006c5e <MPU9250SelfTest+0x73e>
    }

    for (int i = 0; i < 3; i++)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d7c:	e086      	b.n	8006e8c <MPU9250SelfTest+0x96c>
    {
        destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i] - 100.;         // Report percent differences
 8006d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	3390      	adds	r3, #144	; 0x90
 8006d84:	443b      	add	r3, r7
 8006d86:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8006d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	3390      	adds	r3, #144	; 0x90
 8006d90:	443b      	add	r3, r7
 8006d92:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7f9 ff6f 	bl	8000c7c <__aeabi_i2f>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7f9 fb39 	bl	8000418 <__aeabi_f2d>
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	4b40      	ldr	r3, [pc, #256]	; (8006eac <MPU9250SelfTest+0x98c>)
 8006dac:	f7f9 fb8c 	bl	80004c8 <__aeabi_dmul>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4614      	mov	r4, r2
 8006db6:	461d      	mov	r5, r3
 8006db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	3390      	adds	r3, #144	; 0x90
 8006dbe:	443b      	add	r3, r7
 8006dc0:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7f9 fb27 	bl	8000418 <__aeabi_f2d>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4620      	mov	r0, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	f7f9 fca3 	bl	800071c <__aeabi_ddiv>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4610      	mov	r0, r2
 8006ddc:	4619      	mov	r1, r3
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	4b32      	ldr	r3, [pc, #200]	; (8006eac <MPU9250SelfTest+0x98c>)
 8006de4:	f7f9 f9b8 	bl	8000158 <__aeabi_dsub>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4610      	mov	r0, r2
 8006dee:	4619      	mov	r1, r3
 8006df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	18d4      	adds	r4, r2, r3
 8006df8:	f7f9 fe36 	bl	8000a68 <__aeabi_d2f>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	6023      	str	r3, [r4, #0]
        destination[i + 3] = 100.0 * ((float)(gSTAvg[i] - gAvg[i])) / factoryTrim[i + 3] - 100.; // Report percent differences
 8006e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	3390      	adds	r3, #144	; 0x90
 8006e06:	443b      	add	r3, r7
 8006e08:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8006e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	3390      	adds	r3, #144	; 0x90
 8006e12:	443b      	add	r3, r7
 8006e14:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7f9 ff2e 	bl	8000c7c <__aeabi_i2f>
 8006e20:	4603      	mov	r3, r0
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7f9 faf8 	bl	8000418 <__aeabi_f2d>
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	4b1f      	ldr	r3, [pc, #124]	; (8006eac <MPU9250SelfTest+0x98c>)
 8006e2e:	f7f9 fb4b 	bl	80004c8 <__aeabi_dmul>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4614      	mov	r4, r2
 8006e38:	461d      	mov	r5, r3
 8006e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e3c:	3303      	adds	r3, #3
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	3390      	adds	r3, #144	; 0x90
 8006e42:	443b      	add	r3, r7
 8006e44:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7f9 fae5 	bl	8000418 <__aeabi_f2d>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4620      	mov	r0, r4
 8006e54:	4629      	mov	r1, r5
 8006e56:	f7f9 fc61 	bl	800071c <__aeabi_ddiv>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4610      	mov	r0, r2
 8006e60:	4619      	mov	r1, r3
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	4b11      	ldr	r3, [pc, #68]	; (8006eac <MPU9250SelfTest+0x98c>)
 8006e68:	f7f9 f976 	bl	8000158 <__aeabi_dsub>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4610      	mov	r0, r2
 8006e72:	4619      	mov	r1, r3
 8006e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e76:	3303      	adds	r3, #3
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	18d4      	adds	r4, r2, r3
 8006e7e:	f7f9 fdf3 	bl	8000a68 <__aeabi_d2f>
 8006e82:	4603      	mov	r3, r0
 8006e84:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 3; i++)
 8006e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e88:	3301      	adds	r3, #1
 8006e8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	f77f af75 	ble.w	8006d7e <MPU9250SelfTest+0x85e>
    }
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	3790      	adds	r7, #144	; 0x90
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	c28f5c29 	.word	0xc28f5c29
 8006ea4:	3ff028f5 	.word	0x3ff028f5
 8006ea8:	3ff00000 	.word	0x3ff00000
 8006eac:	40590000 	.word	0x40590000

08006eb0 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
 8006eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eb2:	b0ad      	sub	sp, #180	; 0xb4
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8006ebe:	4b8a      	ldr	r3, [pc, #552]	; (80070e8 <QuaternionUpdate+0x238>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ec6:	4b88      	ldr	r3, [pc, #544]	; (80070e8 <QuaternionUpdate+0x238>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ece:	4b86      	ldr	r3, [pc, #536]	; (80070e8 <QuaternionUpdate+0x238>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ed6:	4b84      	ldr	r3, [pc, #528]	; (80070e8 <QuaternionUpdate+0x238>)
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8006ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7f9 fe15 	bl	8000b14 <__addsf3>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float _2q2 = 2.0f * q2;
 8006ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7f9 fe0c 	bl	8000b14 <__addsf3>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float _2q3 = 2.0f * q3;
 8006f02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f06:	4619      	mov	r1, r3
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7f9 fe03 	bl	8000b14 <__addsf3>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float _2q4 = 2.0f * q4;
 8006f14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7f9 fdfa 	bl	8000b14 <__addsf3>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 8006f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7f9 fdf1 	bl	8000b14 <__addsf3>
 8006f32:	4603      	mov	r3, r0
 8006f34:	4619      	mov	r1, r3
 8006f36:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006f3a:	f7f9 fef3 	bl	8000d24 <__aeabi_fmul>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 8006f44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7f9 fde2 	bl	8000b14 <__addsf3>
 8006f50:	4603      	mov	r3, r0
 8006f52:	4619      	mov	r1, r3
 8006f54:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006f58:	f7f9 fee4 	bl	8000d24 <__aeabi_fmul>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 8006f62:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006f66:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006f6a:	f7f9 fedb 	bl	8000d24 <__aeabi_fmul>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 8006f74:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006f78:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006f7c:	f7f9 fed2 	bl	8000d24 <__aeabi_fmul>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 8006f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f8a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006f8e:	f7f9 fec9 	bl	8000d24 <__aeabi_fmul>
 8006f92:	4603      	mov	r3, r0
 8006f94:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1q4 = q1 * q4;
 8006f96:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006f9a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006f9e:	f7f9 fec1 	bl	8000d24 <__aeabi_fmul>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2q2 = q2 * q2;
 8006fa6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006faa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006fae:	f7f9 feb9 	bl	8000d24 <__aeabi_fmul>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	677b      	str	r3, [r7, #116]	; 0x74
    float q2q3 = q2 * q3;
 8006fb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fba:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006fbe:	f7f9 feb1 	bl	8000d24 <__aeabi_fmul>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	673b      	str	r3, [r7, #112]	; 0x70
    float q2q4 = q2 * q4;
 8006fc6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006fca:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006fce:	f7f9 fea9 	bl	8000d24 <__aeabi_fmul>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
    float q3q3 = q3 * q3;
 8006fd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fda:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006fde:	f7f9 fea1 	bl	8000d24 <__aeabi_fmul>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	66bb      	str	r3, [r7, #104]	; 0x68
    float q3q4 = q3 * q4;
 8006fe6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006fea:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006fee:	f7f9 fe99 	bl	8000d24 <__aeabi_fmul>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	667b      	str	r3, [r7, #100]	; 0x64
    float q4q4 = q4 * q4;
 8006ff6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006ffa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006ffe:	f7f9 fe91 	bl	8000d24 <__aeabi_fmul>
 8007002:	4603      	mov	r3, r0
 8007004:	663b      	str	r3, [r7, #96]	; 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7f9 fe8b 	bl	8000d24 <__aeabi_fmul>
 800700e:	4603      	mov	r3, r0
 8007010:	461c      	mov	r4, r3
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	68b8      	ldr	r0, [r7, #8]
 8007016:	f7f9 fe85 	bl	8000d24 <__aeabi_fmul>
 800701a:	4603      	mov	r3, r0
 800701c:	4619      	mov	r1, r3
 800701e:	4620      	mov	r0, r4
 8007020:	f7f9 fd78 	bl	8000b14 <__addsf3>
 8007024:	4603      	mov	r3, r0
 8007026:	461c      	mov	r4, r3
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7f9 fe7a 	bl	8000d24 <__aeabi_fmul>
 8007030:	4603      	mov	r3, r0
 8007032:	4619      	mov	r1, r3
 8007034:	4620      	mov	r0, r4
 8007036:	f7f9 fd6d 	bl	8000b14 <__addsf3>
 800703a:	4603      	mov	r3, r0
 800703c:	4618      	mov	r0, r3
 800703e:	f003 f9ad 	bl	800a39c <sqrtf>
 8007042:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f)
 8007044:	f04f 0100 	mov.w	r1, #0
 8007048:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800704a:	f7f9 ffff 	bl	800104c <__aeabi_fcmpeq>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	f040 87e3 	bne.w	800801c <QuaternionUpdate+0x116c>
        return; // handle NaN
    norm = 1.0f / norm;
 8007056:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007058:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800705c:	f7f9 ff16 	bl	8000e8c <__aeabi_fdiv>
 8007060:	4603      	mov	r3, r0
 8007062:	65fb      	str	r3, [r7, #92]	; 0x5c
    ax *= norm;
 8007064:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7f9 fe5c 	bl	8000d24 <__aeabi_fmul>
 800706c:	4603      	mov	r3, r0
 800706e:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 8007070:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007072:	68b8      	ldr	r0, [r7, #8]
 8007074:	f7f9 fe56 	bl	8000d24 <__aeabi_fmul>
 8007078:	4603      	mov	r3, r0
 800707a:	60bb      	str	r3, [r7, #8]
    az *= norm;
 800707c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7f9 fe50 	bl	8000d24 <__aeabi_fmul>
 8007084:	4603      	mov	r3, r0
 8007086:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8007088:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800708c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007090:	f7f9 fe48 	bl	8000d24 <__aeabi_fmul>
 8007094:	4603      	mov	r3, r0
 8007096:	461c      	mov	r4, r3
 8007098:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800709c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80070a0:	f7f9 fe40 	bl	8000d24 <__aeabi_fmul>
 80070a4:	4603      	mov	r3, r0
 80070a6:	4619      	mov	r1, r3
 80070a8:	4620      	mov	r0, r4
 80070aa:	f7f9 fd33 	bl	8000b14 <__addsf3>
 80070ae:	4603      	mov	r3, r0
 80070b0:	461c      	mov	r4, r3
 80070b2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80070b6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80070ba:	f7f9 fe33 	bl	8000d24 <__aeabi_fmul>
 80070be:	4603      	mov	r3, r0
 80070c0:	4619      	mov	r1, r3
 80070c2:	4620      	mov	r0, r4
 80070c4:	f7f9 fd26 	bl	8000b14 <__addsf3>
 80070c8:	4603      	mov	r3, r0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f003 f966 	bl	800a39c <sqrtf>
 80070d0:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f)
 80070d2:	f04f 0100 	mov.w	r1, #0
 80070d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80070d8:	f7f9 ffb8 	bl	800104c <__aeabi_fcmpeq>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f040 879e 	bne.w	8008020 <QuaternionUpdate+0x1170>
 80070e4:	e002      	b.n	80070ec <QuaternionUpdate+0x23c>
 80070e6:	bf00      	nop
 80070e8:	20000010 	.word	0x20000010
        return; // handle NaN
    norm = 1.0f / norm;
 80070ec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80070ee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80070f2:	f7f9 fecb 	bl	8000e8c <__aeabi_fdiv>
 80070f6:	4603      	mov	r3, r0
 80070f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    mx *= norm;
 80070fa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80070fc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007100:	f7f9 fe10 	bl	8000d24 <__aeabi_fmul>
 8007104:	4603      	mov	r3, r0
 8007106:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    my *= norm;
 800710a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800710c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8007110:	f7f9 fe08 	bl	8000d24 <__aeabi_fmul>
 8007114:	4603      	mov	r3, r0
 8007116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mz *= norm;
 800711a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800711c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007120:	f7f9 fe00 	bl	8000d24 <__aeabi_fmul>
 8007124:	4603      	mov	r3, r0
 8007126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 800712a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800712e:	4619      	mov	r1, r3
 8007130:	4618      	mov	r0, r3
 8007132:	f7f9 fcef 	bl	8000b14 <__addsf3>
 8007136:	4603      	mov	r3, r0
 8007138:	4619      	mov	r1, r3
 800713a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800713e:	f7f9 fdf1 	bl	8000d24 <__aeabi_fmul>
 8007142:	4603      	mov	r3, r0
 8007144:	65bb      	str	r3, [r7, #88]	; 0x58
    _2q1my = 2.0f * q1 * my;
 8007146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800714a:	4619      	mov	r1, r3
 800714c:	4618      	mov	r0, r3
 800714e:	f7f9 fce1 	bl	8000b14 <__addsf3>
 8007152:	4603      	mov	r3, r0
 8007154:	4619      	mov	r1, r3
 8007156:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800715a:	f7f9 fde3 	bl	8000d24 <__aeabi_fmul>
 800715e:	4603      	mov	r3, r0
 8007160:	657b      	str	r3, [r7, #84]	; 0x54
    _2q1mz = 2.0f * q1 * mz;
 8007162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007166:	4619      	mov	r1, r3
 8007168:	4618      	mov	r0, r3
 800716a:	f7f9 fcd3 	bl	8000b14 <__addsf3>
 800716e:	4603      	mov	r3, r0
 8007170:	4619      	mov	r1, r3
 8007172:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007176:	f7f9 fdd5 	bl	8000d24 <__aeabi_fmul>
 800717a:	4603      	mov	r3, r0
 800717c:	653b      	str	r3, [r7, #80]	; 0x50
    _2q2mx = 2.0f * q2 * mx;
 800717e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007182:	4619      	mov	r1, r3
 8007184:	4618      	mov	r0, r3
 8007186:	f7f9 fcc5 	bl	8000b14 <__addsf3>
 800718a:	4603      	mov	r3, r0
 800718c:	4619      	mov	r1, r3
 800718e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007192:	f7f9 fdc7 	bl	8000d24 <__aeabi_fmul>
 8007196:	4603      	mov	r3, r0
 8007198:	64fb      	str	r3, [r7, #76]	; 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800719a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800719e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80071a2:	f7f9 fdbf 	bl	8000d24 <__aeabi_fmul>
 80071a6:	4603      	mov	r3, r0
 80071a8:	461c      	mov	r4, r3
 80071aa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80071ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80071b0:	f7f9 fdb8 	bl	8000d24 <__aeabi_fmul>
 80071b4:	4603      	mov	r3, r0
 80071b6:	4619      	mov	r1, r3
 80071b8:	4620      	mov	r0, r4
 80071ba:	f7f9 fca9 	bl	8000b10 <__aeabi_fsub>
 80071be:	4603      	mov	r3, r0
 80071c0:	461c      	mov	r4, r3
 80071c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80071c8:	f7f9 fdac 	bl	8000d24 <__aeabi_fmul>
 80071cc:	4603      	mov	r3, r0
 80071ce:	4619      	mov	r1, r3
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7f9 fc9f 	bl	8000b14 <__addsf3>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461c      	mov	r4, r3
 80071da:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80071dc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80071e0:	f7f9 fda0 	bl	8000d24 <__aeabi_fmul>
 80071e4:	4603      	mov	r3, r0
 80071e6:	4619      	mov	r1, r3
 80071e8:	4620      	mov	r0, r4
 80071ea:	f7f9 fc93 	bl	8000b14 <__addsf3>
 80071ee:	4603      	mov	r3, r0
 80071f0:	461c      	mov	r4, r3
 80071f2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80071f6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80071fa:	f7f9 fd93 	bl	8000d24 <__aeabi_fmul>
 80071fe:	4603      	mov	r3, r0
 8007200:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007204:	4618      	mov	r0, r3
 8007206:	f7f9 fd8d 	bl	8000d24 <__aeabi_fmul>
 800720a:	4603      	mov	r3, r0
 800720c:	4619      	mov	r1, r3
 800720e:	4620      	mov	r0, r4
 8007210:	f7f9 fc80 	bl	8000b14 <__addsf3>
 8007214:	4603      	mov	r3, r0
 8007216:	461c      	mov	r4, r3
 8007218:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800721c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8007220:	f7f9 fd80 	bl	8000d24 <__aeabi_fmul>
 8007224:	4603      	mov	r3, r0
 8007226:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800722a:	4618      	mov	r0, r3
 800722c:	f7f9 fd7a 	bl	8000d24 <__aeabi_fmul>
 8007230:	4603      	mov	r3, r0
 8007232:	4619      	mov	r1, r3
 8007234:	4620      	mov	r0, r4
 8007236:	f7f9 fc6d 	bl	8000b14 <__addsf3>
 800723a:	4603      	mov	r3, r0
 800723c:	461c      	mov	r4, r3
 800723e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007240:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007244:	f7f9 fd6e 	bl	8000d24 <__aeabi_fmul>
 8007248:	4603      	mov	r3, r0
 800724a:	4619      	mov	r1, r3
 800724c:	4620      	mov	r0, r4
 800724e:	f7f9 fc5f 	bl	8000b10 <__aeabi_fsub>
 8007252:	4603      	mov	r3, r0
 8007254:	461c      	mov	r4, r3
 8007256:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007258:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800725c:	f7f9 fd62 	bl	8000d24 <__aeabi_fmul>
 8007260:	4603      	mov	r3, r0
 8007262:	4619      	mov	r1, r3
 8007264:	4620      	mov	r0, r4
 8007266:	f7f9 fc53 	bl	8000b10 <__aeabi_fsub>
 800726a:	4603      	mov	r3, r0
 800726c:	64bb      	str	r3, [r7, #72]	; 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 800726e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007272:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007274:	f7f9 fd56 	bl	8000d24 <__aeabi_fmul>
 8007278:	4603      	mov	r3, r0
 800727a:	461c      	mov	r4, r3
 800727c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007280:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8007284:	f7f9 fd4e 	bl	8000d24 <__aeabi_fmul>
 8007288:	4603      	mov	r3, r0
 800728a:	4619      	mov	r1, r3
 800728c:	4620      	mov	r0, r4
 800728e:	f7f9 fc41 	bl	8000b14 <__addsf3>
 8007292:	4603      	mov	r3, r0
 8007294:	461c      	mov	r4, r3
 8007296:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800729a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800729c:	f7f9 fd42 	bl	8000d24 <__aeabi_fmul>
 80072a0:	4603      	mov	r3, r0
 80072a2:	4619      	mov	r1, r3
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7f9 fc33 	bl	8000b10 <__aeabi_fsub>
 80072aa:	4603      	mov	r3, r0
 80072ac:	461c      	mov	r4, r3
 80072ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80072b4:	f7f9 fd36 	bl	8000d24 <__aeabi_fmul>
 80072b8:	4603      	mov	r3, r0
 80072ba:	4619      	mov	r1, r3
 80072bc:	4620      	mov	r0, r4
 80072be:	f7f9 fc29 	bl	8000b14 <__addsf3>
 80072c2:	4603      	mov	r3, r0
 80072c4:	461c      	mov	r4, r3
 80072c6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80072c8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80072cc:	f7f9 fd2a 	bl	8000d24 <__aeabi_fmul>
 80072d0:	4603      	mov	r3, r0
 80072d2:	4619      	mov	r1, r3
 80072d4:	4620      	mov	r0, r4
 80072d6:	f7f9 fc1b 	bl	8000b10 <__aeabi_fsub>
 80072da:	4603      	mov	r3, r0
 80072dc:	461c      	mov	r4, r3
 80072de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072e0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80072e4:	f7f9 fd1e 	bl	8000d24 <__aeabi_fmul>
 80072e8:	4603      	mov	r3, r0
 80072ea:	4619      	mov	r1, r3
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7f9 fc11 	bl	8000b14 <__addsf3>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461c      	mov	r4, r3
 80072f6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80072fa:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80072fe:	f7f9 fd11 	bl	8000d24 <__aeabi_fmul>
 8007302:	4603      	mov	r3, r0
 8007304:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007308:	4618      	mov	r0, r3
 800730a:	f7f9 fd0b 	bl	8000d24 <__aeabi_fmul>
 800730e:	4603      	mov	r3, r0
 8007310:	4619      	mov	r1, r3
 8007312:	4620      	mov	r0, r4
 8007314:	f7f9 fbfe 	bl	8000b14 <__addsf3>
 8007318:	4603      	mov	r3, r0
 800731a:	461c      	mov	r4, r3
 800731c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800731e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8007322:	f7f9 fcff 	bl	8000d24 <__aeabi_fmul>
 8007326:	4603      	mov	r3, r0
 8007328:	4619      	mov	r1, r3
 800732a:	4620      	mov	r0, r4
 800732c:	f7f9 fbf0 	bl	8000b10 <__aeabi_fsub>
 8007330:	4603      	mov	r3, r0
 8007332:	647b      	str	r3, [r7, #68]	; 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 8007334:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007336:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007338:	f7f9 fcf4 	bl	8000d24 <__aeabi_fmul>
 800733c:	4603      	mov	r3, r0
 800733e:	461c      	mov	r4, r3
 8007340:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007342:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007344:	f7f9 fcee 	bl	8000d24 <__aeabi_fmul>
 8007348:	4603      	mov	r3, r0
 800734a:	4619      	mov	r1, r3
 800734c:	4620      	mov	r0, r4
 800734e:	f7f9 fbe1 	bl	8000b14 <__addsf3>
 8007352:	4603      	mov	r3, r0
 8007354:	4618      	mov	r0, r3
 8007356:	f003 f821 	bl	800a39c <sqrtf>
 800735a:	6438      	str	r0, [r7, #64]	; 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 800735c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800735e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007366:	4618      	mov	r0, r3
 8007368:	f7f9 fcdc 	bl	8000d24 <__aeabi_fmul>
 800736c:	4603      	mov	r3, r0
 800736e:	461c      	mov	r4, r3
 8007370:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007374:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007376:	f7f9 fcd5 	bl	8000d24 <__aeabi_fmul>
 800737a:	4603      	mov	r3, r0
 800737c:	4619      	mov	r1, r3
 800737e:	4620      	mov	r0, r4
 8007380:	f7f9 fbc8 	bl	8000b14 <__addsf3>
 8007384:	4603      	mov	r3, r0
 8007386:	461c      	mov	r4, r3
 8007388:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800738c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007390:	f7f9 fcc8 	bl	8000d24 <__aeabi_fmul>
 8007394:	4603      	mov	r3, r0
 8007396:	4619      	mov	r1, r3
 8007398:	4620      	mov	r0, r4
 800739a:	f7f9 fbbb 	bl	8000b14 <__addsf3>
 800739e:	4603      	mov	r3, r0
 80073a0:	461c      	mov	r4, r3
 80073a2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80073a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80073a8:	f7f9 fcbc 	bl	8000d24 <__aeabi_fmul>
 80073ac:	4603      	mov	r3, r0
 80073ae:	4619      	mov	r1, r3
 80073b0:	4620      	mov	r0, r4
 80073b2:	f7f9 fbaf 	bl	8000b14 <__addsf3>
 80073b6:	4603      	mov	r3, r0
 80073b8:	461c      	mov	r4, r3
 80073ba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80073bc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80073c0:	f7f9 fcb0 	bl	8000d24 <__aeabi_fmul>
 80073c4:	4603      	mov	r3, r0
 80073c6:	4619      	mov	r1, r3
 80073c8:	4620      	mov	r0, r4
 80073ca:	f7f9 fba1 	bl	8000b10 <__aeabi_fsub>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461c      	mov	r4, r3
 80073d2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80073d6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80073da:	f7f9 fca3 	bl	8000d24 <__aeabi_fmul>
 80073de:	4603      	mov	r3, r0
 80073e0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7f9 fc9d 	bl	8000d24 <__aeabi_fmul>
 80073ea:	4603      	mov	r3, r0
 80073ec:	4619      	mov	r1, r3
 80073ee:	4620      	mov	r0, r4
 80073f0:	f7f9 fb90 	bl	8000b14 <__addsf3>
 80073f4:	4603      	mov	r3, r0
 80073f6:	461c      	mov	r4, r3
 80073f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073fa:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80073fe:	f7f9 fc91 	bl	8000d24 <__aeabi_fmul>
 8007402:	4603      	mov	r3, r0
 8007404:	4619      	mov	r1, r3
 8007406:	4620      	mov	r0, r4
 8007408:	f7f9 fb82 	bl	8000b10 <__aeabi_fsub>
 800740c:	4603      	mov	r3, r0
 800740e:	461c      	mov	r4, r3
 8007410:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007412:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007416:	f7f9 fc85 	bl	8000d24 <__aeabi_fmul>
 800741a:	4603      	mov	r3, r0
 800741c:	4619      	mov	r1, r3
 800741e:	4620      	mov	r0, r4
 8007420:	f7f9 fb78 	bl	8000b14 <__addsf3>
 8007424:	4603      	mov	r3, r0
 8007426:	63fb      	str	r3, [r7, #60]	; 0x3c
    _4bx = 2.0f * _2bx;
 8007428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800742a:	4619      	mov	r1, r3
 800742c:	4618      	mov	r0, r3
 800742e:	f7f9 fb71 	bl	8000b14 <__addsf3>
 8007432:	4603      	mov	r3, r0
 8007434:	63bb      	str	r3, [r7, #56]	; 0x38
    _4bz = 2.0f * _2bz;
 8007436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007438:	4619      	mov	r1, r3
 800743a:	4618      	mov	r0, r3
 800743c:	f7f9 fb6a 	bl	8000b14 <__addsf3>
 8007440:	4603      	mov	r3, r0
 8007442:	637b      	str	r3, [r7, #52]	; 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8007444:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007448:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800744c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744e:	4619      	mov	r1, r3
 8007450:	4618      	mov	r0, r3
 8007452:	f7f9 fb5f 	bl	8000b14 <__addsf3>
 8007456:	4603      	mov	r3, r0
 8007458:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800745c:	4618      	mov	r0, r3
 800745e:	f7f9 fb57 	bl	8000b10 <__aeabi_fsub>
 8007462:	4603      	mov	r3, r0
 8007464:	68f9      	ldr	r1, [r7, #12]
 8007466:	4618      	mov	r0, r3
 8007468:	f7f9 fb52 	bl	8000b10 <__aeabi_fsub>
 800746c:	4603      	mov	r3, r0
 800746e:	4619      	mov	r1, r3
 8007470:	4620      	mov	r0, r4
 8007472:	f7f9 fc57 	bl	8000d24 <__aeabi_fmul>
 8007476:	4603      	mov	r3, r0
 8007478:	461c      	mov	r4, r3
 800747a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800747e:	4619      	mov	r1, r3
 8007480:	4618      	mov	r0, r3
 8007482:	f7f9 fb47 	bl	8000b14 <__addsf3>
 8007486:	4603      	mov	r3, r0
 8007488:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800748c:	4618      	mov	r0, r3
 800748e:	f7f9 fb41 	bl	8000b14 <__addsf3>
 8007492:	4603      	mov	r3, r0
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	4618      	mov	r0, r3
 8007498:	f7f9 fb3a 	bl	8000b10 <__aeabi_fsub>
 800749c:	4603      	mov	r3, r0
 800749e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7f9 fc3e 	bl	8000d24 <__aeabi_fmul>
 80074a8:	4603      	mov	r3, r0
 80074aa:	4619      	mov	r1, r3
 80074ac:	4620      	mov	r0, r4
 80074ae:	f7f9 fb31 	bl	8000b14 <__addsf3>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461c      	mov	r4, r3
 80074b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80074bc:	f7f9 fc32 	bl	8000d24 <__aeabi_fmul>
 80074c0:	4603      	mov	r3, r0
 80074c2:	461d      	mov	r5, r3
 80074c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074c6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80074ca:	f7f9 fb21 	bl	8000b10 <__aeabi_fsub>
 80074ce:	4603      	mov	r3, r0
 80074d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7f9 fb1c 	bl	8000b10 <__aeabi_fsub>
 80074d8:	4603      	mov	r3, r0
 80074da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074dc:	4618      	mov	r0, r3
 80074de:	f7f9 fc21 	bl	8000d24 <__aeabi_fmul>
 80074e2:	4603      	mov	r3, r0
 80074e4:	461e      	mov	r6, r3
 80074e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80074ea:	f7f9 fb11 	bl	8000b10 <__aeabi_fsub>
 80074ee:	4603      	mov	r3, r0
 80074f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7f9 fc16 	bl	8000d24 <__aeabi_fmul>
 80074f8:	4603      	mov	r3, r0
 80074fa:	4619      	mov	r1, r3
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7f9 fb09 	bl	8000b14 <__addsf3>
 8007502:	4603      	mov	r3, r0
 8007504:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007508:	4618      	mov	r0, r3
 800750a:	f7f9 fb01 	bl	8000b10 <__aeabi_fsub>
 800750e:	4603      	mov	r3, r0
 8007510:	4619      	mov	r1, r3
 8007512:	4628      	mov	r0, r5
 8007514:	f7f9 fc06 	bl	8000d24 <__aeabi_fmul>
 8007518:	4603      	mov	r3, r0
 800751a:	4619      	mov	r1, r3
 800751c:	4620      	mov	r0, r4
 800751e:	f7f9 faf7 	bl	8000b10 <__aeabi_fsub>
 8007522:	4603      	mov	r3, r0
 8007524:	461c      	mov	r4, r3
 8007526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007528:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800752c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007530:	4618      	mov	r0, r3
 8007532:	f7f9 fbf7 	bl	8000d24 <__aeabi_fmul>
 8007536:	4603      	mov	r3, r0
 8007538:	461d      	mov	r5, r3
 800753a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800753e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007540:	f7f9 fbf0 	bl	8000d24 <__aeabi_fmul>
 8007544:	4603      	mov	r3, r0
 8007546:	4619      	mov	r1, r3
 8007548:	4628      	mov	r0, r5
 800754a:	f7f9 fae3 	bl	8000b14 <__addsf3>
 800754e:	4603      	mov	r3, r0
 8007550:	461d      	mov	r5, r3
 8007552:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007554:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007556:	f7f9 fadb 	bl	8000b10 <__aeabi_fsub>
 800755a:	4603      	mov	r3, r0
 800755c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800755e:	4618      	mov	r0, r3
 8007560:	f7f9 fbe0 	bl	8000d24 <__aeabi_fmul>
 8007564:	4603      	mov	r3, r0
 8007566:	461e      	mov	r6, r3
 8007568:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800756a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800756e:	f7f9 fad1 	bl	8000b14 <__addsf3>
 8007572:	4603      	mov	r3, r0
 8007574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007576:	4618      	mov	r0, r3
 8007578:	f7f9 fbd4 	bl	8000d24 <__aeabi_fmul>
 800757c:	4603      	mov	r3, r0
 800757e:	4619      	mov	r1, r3
 8007580:	4630      	mov	r0, r6
 8007582:	f7f9 fac7 	bl	8000b14 <__addsf3>
 8007586:	4603      	mov	r3, r0
 8007588:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800758c:	4618      	mov	r0, r3
 800758e:	f7f9 fabf 	bl	8000b10 <__aeabi_fsub>
 8007592:	4603      	mov	r3, r0
 8007594:	4619      	mov	r1, r3
 8007596:	4628      	mov	r0, r5
 8007598:	f7f9 fbc4 	bl	8000d24 <__aeabi_fmul>
 800759c:	4603      	mov	r3, r0
 800759e:	4619      	mov	r1, r3
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7f9 fab7 	bl	8000b14 <__addsf3>
 80075a6:	4603      	mov	r3, r0
 80075a8:	461c      	mov	r4, r3
 80075aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80075b0:	f7f9 fbb8 	bl	8000d24 <__aeabi_fmul>
 80075b4:	4603      	mov	r3, r0
 80075b6:	461d      	mov	r5, r3
 80075b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80075ba:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80075bc:	f7f9 faaa 	bl	8000b14 <__addsf3>
 80075c0:	4603      	mov	r3, r0
 80075c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7f9 fbad 	bl	8000d24 <__aeabi_fmul>
 80075ca:	4603      	mov	r3, r0
 80075cc:	461e      	mov	r6, r3
 80075ce:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80075d0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80075d4:	f7f9 fa9c 	bl	8000b10 <__aeabi_fsub>
 80075d8:	4603      	mov	r3, r0
 80075da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f9 fa97 	bl	8000b10 <__aeabi_fsub>
 80075e2:	4603      	mov	r3, r0
 80075e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7f9 fb9c 	bl	8000d24 <__aeabi_fmul>
 80075ec:	4603      	mov	r3, r0
 80075ee:	4619      	mov	r1, r3
 80075f0:	4630      	mov	r0, r6
 80075f2:	f7f9 fa8f 	bl	8000b14 <__addsf3>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7f9 fa87 	bl	8000b10 <__aeabi_fsub>
 8007602:	4603      	mov	r3, r0
 8007604:	4619      	mov	r1, r3
 8007606:	4628      	mov	r0, r5
 8007608:	f7f9 fb8c 	bl	8000d24 <__aeabi_fmul>
 800760c:	4603      	mov	r3, r0
 800760e:	4619      	mov	r1, r3
 8007610:	4620      	mov	r0, r4
 8007612:	f7f9 fa7f 	bl	8000b14 <__addsf3>
 8007616:	4603      	mov	r3, r0
 8007618:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800761a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761c:	4619      	mov	r1, r3
 800761e:	4618      	mov	r0, r3
 8007620:	f7f9 fa78 	bl	8000b14 <__addsf3>
 8007624:	4603      	mov	r3, r0
 8007626:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800762a:	4618      	mov	r0, r3
 800762c:	f7f9 fa70 	bl	8000b10 <__aeabi_fsub>
 8007630:	4603      	mov	r3, r0
 8007632:	68f9      	ldr	r1, [r7, #12]
 8007634:	4618      	mov	r0, r3
 8007636:	f7f9 fa6b 	bl	8000b10 <__aeabi_fsub>
 800763a:	4603      	mov	r3, r0
 800763c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007640:	4618      	mov	r0, r3
 8007642:	f7f9 fb6f 	bl	8000d24 <__aeabi_fmul>
 8007646:	4603      	mov	r3, r0
 8007648:	461c      	mov	r4, r3
 800764a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800764e:	4619      	mov	r1, r3
 8007650:	4618      	mov	r0, r3
 8007652:	f7f9 fa5f 	bl	8000b14 <__addsf3>
 8007656:	4603      	mov	r3, r0
 8007658:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800765c:	4618      	mov	r0, r3
 800765e:	f7f9 fa59 	bl	8000b14 <__addsf3>
 8007662:	4603      	mov	r3, r0
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	4618      	mov	r0, r3
 8007668:	f7f9 fa52 	bl	8000b10 <__aeabi_fsub>
 800766c:	4603      	mov	r3, r0
 800766e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8007672:	4618      	mov	r0, r3
 8007674:	f7f9 fb56 	bl	8000d24 <__aeabi_fmul>
 8007678:	4603      	mov	r3, r0
 800767a:	4619      	mov	r1, r3
 800767c:	4620      	mov	r0, r4
 800767e:	f7f9 fa49 	bl	8000b14 <__addsf3>
 8007682:	4603      	mov	r3, r0
 8007684:	461c      	mov	r4, r3
 8007686:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800768a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800768e:	f7f9 fb49 	bl	8000d24 <__aeabi_fmul>
 8007692:	4603      	mov	r3, r0
 8007694:	461d      	mov	r5, r3
 8007696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007698:	4619      	mov	r1, r3
 800769a:	4618      	mov	r0, r3
 800769c:	f7f9 fa3a 	bl	8000b14 <__addsf3>
 80076a0:	4603      	mov	r3, r0
 80076a2:	4619      	mov	r1, r3
 80076a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80076a8:	f7f9 fa32 	bl	8000b10 <__aeabi_fsub>
 80076ac:	4603      	mov	r3, r0
 80076ae:	461e      	mov	r6, r3
 80076b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076b2:	4619      	mov	r1, r3
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7f9 fa2d 	bl	8000b14 <__addsf3>
 80076ba:	4603      	mov	r3, r0
 80076bc:	4619      	mov	r1, r3
 80076be:	4630      	mov	r0, r6
 80076c0:	f7f9 fa26 	bl	8000b10 <__aeabi_fsub>
 80076c4:	4603      	mov	r3, r0
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7f9 fa21 	bl	8000b10 <__aeabi_fsub>
 80076ce:	4603      	mov	r3, r0
 80076d0:	4619      	mov	r1, r3
 80076d2:	4628      	mov	r0, r5
 80076d4:	f7f9 fb26 	bl	8000d24 <__aeabi_fmul>
 80076d8:	4603      	mov	r3, r0
 80076da:	4619      	mov	r1, r3
 80076dc:	4620      	mov	r0, r4
 80076de:	f7f9 fa17 	bl	8000b10 <__aeabi_fsub>
 80076e2:	4603      	mov	r3, r0
 80076e4:	461c      	mov	r4, r3
 80076e6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80076ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80076ec:	f7f9 fb1a 	bl	8000d24 <__aeabi_fmul>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461d      	mov	r5, r3
 80076f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076f6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80076fa:	f7f9 fa09 	bl	8000b10 <__aeabi_fsub>
 80076fe:	4603      	mov	r3, r0
 8007700:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007702:	4618      	mov	r0, r3
 8007704:	f7f9 fa04 	bl	8000b10 <__aeabi_fsub>
 8007708:	4603      	mov	r3, r0
 800770a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800770c:	4618      	mov	r0, r3
 800770e:	f7f9 fb09 	bl	8000d24 <__aeabi_fmul>
 8007712:	4603      	mov	r3, r0
 8007714:	461e      	mov	r6, r3
 8007716:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007718:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800771a:	f7f9 f9f9 	bl	8000b10 <__aeabi_fsub>
 800771e:	4603      	mov	r3, r0
 8007720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007722:	4618      	mov	r0, r3
 8007724:	f7f9 fafe 	bl	8000d24 <__aeabi_fmul>
 8007728:	4603      	mov	r3, r0
 800772a:	4619      	mov	r1, r3
 800772c:	4630      	mov	r0, r6
 800772e:	f7f9 f9f1 	bl	8000b14 <__addsf3>
 8007732:	4603      	mov	r3, r0
 8007734:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007738:	4618      	mov	r0, r3
 800773a:	f7f9 f9e9 	bl	8000b10 <__aeabi_fsub>
 800773e:	4603      	mov	r3, r0
 8007740:	4619      	mov	r1, r3
 8007742:	4628      	mov	r0, r5
 8007744:	f7f9 faee 	bl	8000d24 <__aeabi_fmul>
 8007748:	4603      	mov	r3, r0
 800774a:	4619      	mov	r1, r3
 800774c:	4620      	mov	r0, r4
 800774e:	f7f9 f9e1 	bl	8000b14 <__addsf3>
 8007752:	4603      	mov	r3, r0
 8007754:	461c      	mov	r4, r3
 8007756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800775a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800775c:	f7f9 fae2 	bl	8000d24 <__aeabi_fmul>
 8007760:	4603      	mov	r3, r0
 8007762:	461d      	mov	r5, r3
 8007764:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007768:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800776a:	f7f9 fadb 	bl	8000d24 <__aeabi_fmul>
 800776e:	4603      	mov	r3, r0
 8007770:	4619      	mov	r1, r3
 8007772:	4628      	mov	r0, r5
 8007774:	f7f9 f9ce 	bl	8000b14 <__addsf3>
 8007778:	4603      	mov	r3, r0
 800777a:	461d      	mov	r5, r3
 800777c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800777e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007780:	f7f9 f9c6 	bl	8000b10 <__aeabi_fsub>
 8007784:	4603      	mov	r3, r0
 8007786:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007788:	4618      	mov	r0, r3
 800778a:	f7f9 facb 	bl	8000d24 <__aeabi_fmul>
 800778e:	4603      	mov	r3, r0
 8007790:	461e      	mov	r6, r3
 8007792:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007794:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007798:	f7f9 f9bc 	bl	8000b14 <__addsf3>
 800779c:	4603      	mov	r3, r0
 800779e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7f9 fabf 	bl	8000d24 <__aeabi_fmul>
 80077a6:	4603      	mov	r3, r0
 80077a8:	4619      	mov	r1, r3
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7f9 f9b2 	bl	8000b14 <__addsf3>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7f9 f9aa 	bl	8000b10 <__aeabi_fsub>
 80077bc:	4603      	mov	r3, r0
 80077be:	4619      	mov	r1, r3
 80077c0:	4628      	mov	r0, r5
 80077c2:	f7f9 faaf 	bl	8000d24 <__aeabi_fmul>
 80077c6:	4603      	mov	r3, r0
 80077c8:	4619      	mov	r1, r3
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7f9 f9a2 	bl	8000b14 <__addsf3>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461c      	mov	r4, r3
 80077d4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80077d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80077da:	f7f9 faa3 	bl	8000d24 <__aeabi_fmul>
 80077de:	4603      	mov	r3, r0
 80077e0:	461d      	mov	r5, r3
 80077e2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80077e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80077e8:	f7f9 fa9c 	bl	8000d24 <__aeabi_fmul>
 80077ec:	4603      	mov	r3, r0
 80077ee:	4619      	mov	r1, r3
 80077f0:	4628      	mov	r0, r5
 80077f2:	f7f9 f98d 	bl	8000b10 <__aeabi_fsub>
 80077f6:	4603      	mov	r3, r0
 80077f8:	461d      	mov	r5, r3
 80077fa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80077fc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80077fe:	f7f9 f989 	bl	8000b14 <__addsf3>
 8007802:	4603      	mov	r3, r0
 8007804:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007806:	4618      	mov	r0, r3
 8007808:	f7f9 fa8c 	bl	8000d24 <__aeabi_fmul>
 800780c:	4603      	mov	r3, r0
 800780e:	461e      	mov	r6, r3
 8007810:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007812:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007816:	f7f9 f97b 	bl	8000b10 <__aeabi_fsub>
 800781a:	4603      	mov	r3, r0
 800781c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800781e:	4618      	mov	r0, r3
 8007820:	f7f9 f976 	bl	8000b10 <__aeabi_fsub>
 8007824:	4603      	mov	r3, r0
 8007826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007828:	4618      	mov	r0, r3
 800782a:	f7f9 fa7b 	bl	8000d24 <__aeabi_fmul>
 800782e:	4603      	mov	r3, r0
 8007830:	4619      	mov	r1, r3
 8007832:	4630      	mov	r0, r6
 8007834:	f7f9 f96e 	bl	8000b14 <__addsf3>
 8007838:	4603      	mov	r3, r0
 800783a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800783e:	4618      	mov	r0, r3
 8007840:	f7f9 f966 	bl	8000b10 <__aeabi_fsub>
 8007844:	4603      	mov	r3, r0
 8007846:	4619      	mov	r1, r3
 8007848:	4628      	mov	r0, r5
 800784a:	f7f9 fa6b 	bl	8000d24 <__aeabi_fmul>
 800784e:	4603      	mov	r3, r0
 8007850:	4619      	mov	r1, r3
 8007852:	4620      	mov	r0, r4
 8007854:	f7f9 f95e 	bl	8000b14 <__addsf3>
 8007858:	4603      	mov	r3, r0
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800785c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007860:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8007864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007866:	4619      	mov	r1, r3
 8007868:	4618      	mov	r0, r3
 800786a:	f7f9 f953 	bl	8000b14 <__addsf3>
 800786e:	4603      	mov	r3, r0
 8007870:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007874:	4618      	mov	r0, r3
 8007876:	f7f9 f94b 	bl	8000b10 <__aeabi_fsub>
 800787a:	4603      	mov	r3, r0
 800787c:	68f9      	ldr	r1, [r7, #12]
 800787e:	4618      	mov	r0, r3
 8007880:	f7f9 f946 	bl	8000b10 <__aeabi_fsub>
 8007884:	4603      	mov	r3, r0
 8007886:	4619      	mov	r1, r3
 8007888:	4620      	mov	r0, r4
 800788a:	f7f9 fa4b 	bl	8000d24 <__aeabi_fmul>
 800788e:	4603      	mov	r3, r0
 8007890:	461c      	mov	r4, r3
 8007892:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007896:	4619      	mov	r1, r3
 8007898:	4618      	mov	r0, r3
 800789a:	f7f9 f93b 	bl	8000b14 <__addsf3>
 800789e:	4603      	mov	r3, r0
 80078a0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7f9 f935 	bl	8000b14 <__addsf3>
 80078aa:	4603      	mov	r3, r0
 80078ac:	68b9      	ldr	r1, [r7, #8]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7f9 f92e 	bl	8000b10 <__aeabi_fsub>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7f9 fa32 	bl	8000d24 <__aeabi_fmul>
 80078c0:	4603      	mov	r3, r0
 80078c2:	4619      	mov	r1, r3
 80078c4:	4620      	mov	r0, r4
 80078c6:	f7f9 f925 	bl	8000b14 <__addsf3>
 80078ca:	4603      	mov	r3, r0
 80078cc:	461c      	mov	r4, r3
 80078ce:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80078d2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80078d6:	f7f9 fa25 	bl	8000d24 <__aeabi_fmul>
 80078da:	4603      	mov	r3, r0
 80078dc:	461d      	mov	r5, r3
 80078de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e0:	4619      	mov	r1, r3
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7f9 f916 	bl	8000b14 <__addsf3>
 80078e8:	4603      	mov	r3, r0
 80078ea:	4619      	mov	r1, r3
 80078ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80078f0:	f7f9 f90e 	bl	8000b10 <__aeabi_fsub>
 80078f4:	4603      	mov	r3, r0
 80078f6:	461e      	mov	r6, r3
 80078f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078fa:	4619      	mov	r1, r3
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7f9 f909 	bl	8000b14 <__addsf3>
 8007902:	4603      	mov	r3, r0
 8007904:	4619      	mov	r1, r3
 8007906:	4630      	mov	r0, r6
 8007908:	f7f9 f902 	bl	8000b10 <__aeabi_fsub>
 800790c:	4603      	mov	r3, r0
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	4618      	mov	r0, r3
 8007912:	f7f9 f8fd 	bl	8000b10 <__aeabi_fsub>
 8007916:	4603      	mov	r3, r0
 8007918:	4619      	mov	r1, r3
 800791a:	4628      	mov	r0, r5
 800791c:	f7f9 fa02 	bl	8000d24 <__aeabi_fmul>
 8007920:	4603      	mov	r3, r0
 8007922:	4619      	mov	r1, r3
 8007924:	4620      	mov	r0, r4
 8007926:	f7f9 f8f3 	bl	8000b10 <__aeabi_fsub>
 800792a:	4603      	mov	r3, r0
 800792c:	461c      	mov	r4, r3
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007934:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007938:	4618      	mov	r0, r3
 800793a:	f7f9 f9f3 	bl	8000d24 <__aeabi_fmul>
 800793e:	4603      	mov	r3, r0
 8007940:	461d      	mov	r5, r3
 8007942:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007946:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007948:	f7f9 f9ec 	bl	8000d24 <__aeabi_fmul>
 800794c:	4603      	mov	r3, r0
 800794e:	4619      	mov	r1, r3
 8007950:	4628      	mov	r0, r5
 8007952:	f7f9 f8dd 	bl	8000b10 <__aeabi_fsub>
 8007956:	4603      	mov	r3, r0
 8007958:	461d      	mov	r5, r3
 800795a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800795c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007960:	f7f9 f8d6 	bl	8000b10 <__aeabi_fsub>
 8007964:	4603      	mov	r3, r0
 8007966:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007968:	4618      	mov	r0, r3
 800796a:	f7f9 f8d1 	bl	8000b10 <__aeabi_fsub>
 800796e:	4603      	mov	r3, r0
 8007970:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007972:	4618      	mov	r0, r3
 8007974:	f7f9 f9d6 	bl	8000d24 <__aeabi_fmul>
 8007978:	4603      	mov	r3, r0
 800797a:	461e      	mov	r6, r3
 800797c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800797e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007980:	f7f9 f8c6 	bl	8000b10 <__aeabi_fsub>
 8007984:	4603      	mov	r3, r0
 8007986:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007988:	4618      	mov	r0, r3
 800798a:	f7f9 f9cb 	bl	8000d24 <__aeabi_fmul>
 800798e:	4603      	mov	r3, r0
 8007990:	4619      	mov	r1, r3
 8007992:	4630      	mov	r0, r6
 8007994:	f7f9 f8be 	bl	8000b14 <__addsf3>
 8007998:	4603      	mov	r3, r0
 800799a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800799e:	4618      	mov	r0, r3
 80079a0:	f7f9 f8b6 	bl	8000b10 <__aeabi_fsub>
 80079a4:	4603      	mov	r3, r0
 80079a6:	4619      	mov	r1, r3
 80079a8:	4628      	mov	r0, r5
 80079aa:	f7f9 f9bb 	bl	8000d24 <__aeabi_fmul>
 80079ae:	4603      	mov	r3, r0
 80079b0:	4619      	mov	r1, r3
 80079b2:	4620      	mov	r0, r4
 80079b4:	f7f9 f8ae 	bl	8000b14 <__addsf3>
 80079b8:	4603      	mov	r3, r0
 80079ba:	461c      	mov	r4, r3
 80079bc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80079c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80079c2:	f7f9 f9af 	bl	8000d24 <__aeabi_fmul>
 80079c6:	4603      	mov	r3, r0
 80079c8:	461d      	mov	r5, r3
 80079ca:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80079ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80079d0:	f7f9 f9a8 	bl	8000d24 <__aeabi_fmul>
 80079d4:	4603      	mov	r3, r0
 80079d6:	4619      	mov	r1, r3
 80079d8:	4628      	mov	r0, r5
 80079da:	f7f9 f89b 	bl	8000b14 <__addsf3>
 80079de:	4603      	mov	r3, r0
 80079e0:	461d      	mov	r5, r3
 80079e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80079e4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80079e6:	f7f9 f893 	bl	8000b10 <__aeabi_fsub>
 80079ea:	4603      	mov	r3, r0
 80079ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7f9 f998 	bl	8000d24 <__aeabi_fmul>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461e      	mov	r6, r3
 80079f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80079fa:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80079fe:	f7f9 f889 	bl	8000b14 <__addsf3>
 8007a02:	4603      	mov	r3, r0
 8007a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7f9 f98c 	bl	8000d24 <__aeabi_fmul>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4630      	mov	r0, r6
 8007a12:	f7f9 f87f 	bl	8000b14 <__addsf3>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7f9 f877 	bl	8000b10 <__aeabi_fsub>
 8007a22:	4603      	mov	r3, r0
 8007a24:	4619      	mov	r1, r3
 8007a26:	4628      	mov	r0, r5
 8007a28:	f7f9 f97c 	bl	8000d24 <__aeabi_fmul>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4620      	mov	r0, r4
 8007a32:	f7f9 f86f 	bl	8000b14 <__addsf3>
 8007a36:	4603      	mov	r3, r0
 8007a38:	461c      	mov	r4, r3
 8007a3a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007a3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007a40:	f7f9 f970 	bl	8000d24 <__aeabi_fmul>
 8007a44:	4603      	mov	r3, r0
 8007a46:	461d      	mov	r5, r3
 8007a48:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a4e:	f7f9 f969 	bl	8000d24 <__aeabi_fmul>
 8007a52:	4603      	mov	r3, r0
 8007a54:	4619      	mov	r1, r3
 8007a56:	4628      	mov	r0, r5
 8007a58:	f7f9 f85a 	bl	8000b10 <__aeabi_fsub>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	461d      	mov	r5, r3
 8007a60:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007a62:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007a64:	f7f9 f856 	bl	8000b14 <__addsf3>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7f9 f959 	bl	8000d24 <__aeabi_fmul>
 8007a72:	4603      	mov	r3, r0
 8007a74:	461e      	mov	r6, r3
 8007a76:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007a78:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007a7c:	f7f9 f848 	bl	8000b10 <__aeabi_fsub>
 8007a80:	4603      	mov	r3, r0
 8007a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7f9 f843 	bl	8000b10 <__aeabi_fsub>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7f9 f948 	bl	8000d24 <__aeabi_fmul>
 8007a94:	4603      	mov	r3, r0
 8007a96:	4619      	mov	r1, r3
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7f9 f83b 	bl	8000b14 <__addsf3>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7f9 f833 	bl	8000b10 <__aeabi_fsub>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4619      	mov	r1, r3
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f7f9 f938 	bl	8000d24 <__aeabi_fmul>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f7f9 f82b 	bl	8000b14 <__addsf3>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8007ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7f9 f824 	bl	8000b14 <__addsf3>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7f9 f81c 	bl	8000b10 <__aeabi_fsub>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	68f9      	ldr	r1, [r7, #12]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f9 f817 	bl	8000b10 <__aeabi_fsub>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7f9 f91b 	bl	8000d24 <__aeabi_fmul>
 8007aee:	4603      	mov	r3, r0
 8007af0:	461c      	mov	r4, r3
 8007af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007af6:	4619      	mov	r1, r3
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7f9 f80b 	bl	8000b14 <__addsf3>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7f9 f805 	bl	8000b14 <__addsf3>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7f8 fffe 	bl	8000b10 <__aeabi_fsub>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7f9 f902 	bl	8000d24 <__aeabi_fmul>
 8007b20:	4603      	mov	r3, r0
 8007b22:	4619      	mov	r1, r3
 8007b24:	4620      	mov	r0, r4
 8007b26:	f7f8 fff5 	bl	8000b14 <__addsf3>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	461c      	mov	r4, r3
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007b34:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7f9 f8f3 	bl	8000d24 <__aeabi_fmul>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	461d      	mov	r5, r3
 8007b42:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007b46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b48:	f7f9 f8ec 	bl	8000d24 <__aeabi_fmul>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4628      	mov	r0, r5
 8007b52:	f7f8 ffdf 	bl	8000b14 <__addsf3>
 8007b56:	4603      	mov	r3, r0
 8007b58:	461d      	mov	r5, r3
 8007b5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b5c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007b60:	f7f8 ffd6 	bl	8000b10 <__aeabi_fsub>
 8007b64:	4603      	mov	r3, r0
 8007b66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7f8 ffd1 	bl	8000b10 <__aeabi_fsub>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7f9 f8d6 	bl	8000d24 <__aeabi_fmul>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	461e      	mov	r6, r3
 8007b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b80:	f7f8 ffc6 	bl	8000b10 <__aeabi_fsub>
 8007b84:	4603      	mov	r3, r0
 8007b86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7f9 f8cb 	bl	8000d24 <__aeabi_fmul>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4619      	mov	r1, r3
 8007b92:	4630      	mov	r0, r6
 8007b94:	f7f8 ffbe 	bl	8000b14 <__addsf3>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7f8 ffb6 	bl	8000b10 <__aeabi_fsub>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f7f9 f8bb 	bl	8000d24 <__aeabi_fmul>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f7f8 ffae 	bl	8000b14 <__addsf3>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	461c      	mov	r4, r3
 8007bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bbe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007bc2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7f9 f8ac 	bl	8000d24 <__aeabi_fmul>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	461d      	mov	r5, r3
 8007bd0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007bd6:	f7f9 f8a5 	bl	8000d24 <__aeabi_fmul>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4628      	mov	r0, r5
 8007be0:	f7f8 ff98 	bl	8000b14 <__addsf3>
 8007be4:	4603      	mov	r3, r0
 8007be6:	461d      	mov	r5, r3
 8007be8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007bea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007bec:	f7f8 ff90 	bl	8000b10 <__aeabi_fsub>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7f9 f895 	bl	8000d24 <__aeabi_fmul>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	461e      	mov	r6, r3
 8007bfe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007c00:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007c04:	f7f8 ff86 	bl	8000b14 <__addsf3>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7f9 f889 	bl	8000d24 <__aeabi_fmul>
 8007c12:	4603      	mov	r3, r0
 8007c14:	4619      	mov	r1, r3
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7f8 ff7c 	bl	8000b14 <__addsf3>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7f8 ff74 	bl	8000b10 <__aeabi_fsub>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f7f9 f879 	bl	8000d24 <__aeabi_fmul>
 8007c32:	4603      	mov	r3, r0
 8007c34:	4619      	mov	r1, r3
 8007c36:	4620      	mov	r0, r4
 8007c38:	f7f8 ff6c 	bl	8000b14 <__addsf3>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	461c      	mov	r4, r3
 8007c40:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007c44:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007c46:	f7f9 f86d 	bl	8000d24 <__aeabi_fmul>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461d      	mov	r5, r3
 8007c4e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007c50:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007c52:	f7f8 ff5f 	bl	8000b14 <__addsf3>
 8007c56:	4603      	mov	r3, r0
 8007c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7f9 f862 	bl	8000d24 <__aeabi_fmul>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461e      	mov	r6, r3
 8007c64:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007c66:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007c6a:	f7f8 ff51 	bl	8000b10 <__aeabi_fsub>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7f8 ff4c 	bl	8000b10 <__aeabi_fsub>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7f9 f851 	bl	8000d24 <__aeabi_fmul>
 8007c82:	4603      	mov	r3, r0
 8007c84:	4619      	mov	r1, r3
 8007c86:	4630      	mov	r0, r6
 8007c88:	f7f8 ff44 	bl	8000b14 <__addsf3>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7f8 ff3c 	bl	8000b10 <__aeabi_fsub>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f7f9 f841 	bl	8000d24 <__aeabi_fmul>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f7f8 ff34 	bl	8000b14 <__addsf3>
 8007cac:	4603      	mov	r3, r0
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4); // normalise step magnitude
 8007cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cb4:	f7f9 f836 	bl	8000d24 <__aeabi_fmul>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	461c      	mov	r4, r3
 8007cbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cc0:	f7f9 f830 	bl	8000d24 <__aeabi_fmul>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f7f8 ff23 	bl	8000b14 <__addsf3>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	461c      	mov	r4, r3
 8007cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd6:	f7f9 f825 	bl	8000d24 <__aeabi_fmul>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7f8 ff18 	bl	8000b14 <__addsf3>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	461c      	mov	r4, r3
 8007ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cec:	f7f9 f81a 	bl	8000d24 <__aeabi_fmul>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f7f8 ff0d 	bl	8000b14 <__addsf3>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f002 fb4d 	bl	800a39c <sqrtf>
 8007d02:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f / norm;
 8007d04:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007d06:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007d0a:	f7f9 f8bf 	bl	8000e8c <__aeabi_fdiv>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	65fb      	str	r3, [r7, #92]	; 0x5c
    s1 *= norm;
 8007d12:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d16:	f7f9 f805 	bl	8000d24 <__aeabi_fmul>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	633b      	str	r3, [r7, #48]	; 0x30
    s2 *= norm;
 8007d1e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d22:	f7f8 ffff 	bl	8000d24 <__aeabi_fmul>
 8007d26:	4603      	mov	r3, r0
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 *= norm;
 8007d2a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d2e:	f7f8 fff9 	bl	8000d24 <__aeabi_fmul>
 8007d32:	4603      	mov	r3, r0
 8007d34:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 *= norm;
 8007d36:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d3a:	f7f8 fff3 	bl	8000d24 <__aeabi_fmul>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8007d42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7f8 ffe9 	bl	8000d24 <__aeabi_fmul>
 8007d52:	4603      	mov	r3, r0
 8007d54:	461c      	mov	r4, r3
 8007d56:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007d5a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007d5e:	f7f8 ffe1 	bl	8000d24 <__aeabi_fmul>
 8007d62:	4603      	mov	r3, r0
 8007d64:	4619      	mov	r1, r3
 8007d66:	4620      	mov	r0, r4
 8007d68:	f7f8 fed2 	bl	8000b10 <__aeabi_fsub>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	461c      	mov	r4, r3
 8007d70:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007d74:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007d78:	f7f8 ffd4 	bl	8000d24 <__aeabi_fmul>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4620      	mov	r0, r4
 8007d82:	f7f8 fec5 	bl	8000b10 <__aeabi_fsub>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7f8 ffc9 	bl	8000d24 <__aeabi_fmul>
 8007d92:	4603      	mov	r3, r0
 8007d94:	461c      	mov	r4, r3
 8007d96:	4ba4      	ldr	r3, [pc, #656]	; (8008028 <QuaternionUpdate+0x1178>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7f8 ffc1 	bl	8000d24 <__aeabi_fmul>
 8007da2:	4603      	mov	r3, r0
 8007da4:	4619      	mov	r1, r3
 8007da6:	4620      	mov	r0, r4
 8007da8:	f7f8 feb2 	bl	8000b10 <__aeabi_fsub>
 8007dac:	4603      	mov	r3, r0
 8007dae:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007db6:	f7f8 ffb5 	bl	8000d24 <__aeabi_fmul>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	461c      	mov	r4, r3
 8007dbe:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007dc2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007dc6:	f7f8 ffad 	bl	8000d24 <__aeabi_fmul>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f7f8 fea0 	bl	8000b14 <__addsf3>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	461c      	mov	r4, r3
 8007dd8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007ddc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007de0:	f7f8 ffa0 	bl	8000d24 <__aeabi_fmul>
 8007de4:	4603      	mov	r3, r0
 8007de6:	4619      	mov	r1, r3
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7f8 fe91 	bl	8000b10 <__aeabi_fsub>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7f8 ff95 	bl	8000d24 <__aeabi_fmul>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	461c      	mov	r4, r3
 8007dfe:	4b8a      	ldr	r3, [pc, #552]	; (8008028 <QuaternionUpdate+0x1178>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7f8 ff8d 	bl	8000d24 <__aeabi_fmul>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f7f8 fe7e 	bl	8000b10 <__aeabi_fsub>
 8007e14:	4603      	mov	r3, r0
 8007e16:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8007e18:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007e1c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007e20:	f7f8 ff80 	bl	8000d24 <__aeabi_fmul>
 8007e24:	4603      	mov	r3, r0
 8007e26:	461c      	mov	r4, r3
 8007e28:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007e2c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007e30:	f7f8 ff78 	bl	8000d24 <__aeabi_fmul>
 8007e34:	4603      	mov	r3, r0
 8007e36:	4619      	mov	r1, r3
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7f8 fe69 	bl	8000b10 <__aeabi_fsub>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	461c      	mov	r4, r3
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007e48:	f7f8 ff6c 	bl	8000d24 <__aeabi_fmul>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4620      	mov	r0, r4
 8007e52:	f7f8 fe5f 	bl	8000b14 <__addsf3>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7f8 ff61 	bl	8000d24 <__aeabi_fmul>
 8007e62:	4603      	mov	r3, r0
 8007e64:	461c      	mov	r4, r3
 8007e66:	4b70      	ldr	r3, [pc, #448]	; (8008028 <QuaternionUpdate+0x1178>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7f8 ff59 	bl	8000d24 <__aeabi_fmul>
 8007e72:	4603      	mov	r3, r0
 8007e74:	4619      	mov	r1, r3
 8007e76:	4620      	mov	r0, r4
 8007e78:	f7f8 fe4a 	bl	8000b10 <__aeabi_fsub>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8007e80:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007e84:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007e88:	f7f8 ff4c 	bl	8000d24 <__aeabi_fmul>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	461c      	mov	r4, r3
 8007e90:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007e94:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007e98:	f7f8 ff44 	bl	8000d24 <__aeabi_fmul>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f7f8 fe37 	bl	8000b14 <__addsf3>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	461c      	mov	r4, r3
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007eb0:	f7f8 ff38 	bl	8000d24 <__aeabi_fmul>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f7f8 fe29 	bl	8000b10 <__aeabi_fsub>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7f8 ff2d 	bl	8000d24 <__aeabi_fmul>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	461c      	mov	r4, r3
 8007ece:	4b56      	ldr	r3, [pc, #344]	; (8008028 <QuaternionUpdate+0x1178>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7f8 ff25 	bl	8000d24 <__aeabi_fmul>
 8007eda:	4603      	mov	r3, r0
 8007edc:	4619      	mov	r1, r3
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f7f8 fe16 	bl	8000b10 <__aeabi_fsub>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8007ee8:	4b50      	ldr	r3, [pc, #320]	; (800802c <QuaternionUpdate+0x117c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6a39      	ldr	r1, [r7, #32]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7f8 ff18 	bl	8000d24 <__aeabi_fmul>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007efc:	f7f8 fe0a 	bl	8000b14 <__addsf3>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q2 += qDot2 * deltat;
 8007f06:	4b49      	ldr	r3, [pc, #292]	; (800802c <QuaternionUpdate+0x117c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69f9      	ldr	r1, [r7, #28]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7f8 ff09 	bl	8000d24 <__aeabi_fmul>
 8007f12:	4603      	mov	r3, r0
 8007f14:	4619      	mov	r1, r3
 8007f16:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007f1a:	f7f8 fdfb 	bl	8000b14 <__addsf3>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q3 += qDot3 * deltat;
 8007f24:	4b41      	ldr	r3, [pc, #260]	; (800802c <QuaternionUpdate+0x117c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69b9      	ldr	r1, [r7, #24]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7f8 fefa 	bl	8000d24 <__aeabi_fmul>
 8007f30:	4603      	mov	r3, r0
 8007f32:	4619      	mov	r1, r3
 8007f34:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007f38:	f7f8 fdec 	bl	8000b14 <__addsf3>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q4 += qDot4 * deltat;
 8007f42:	4b3a      	ldr	r3, [pc, #232]	; (800802c <QuaternionUpdate+0x117c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6979      	ldr	r1, [r7, #20]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7f8 feeb 	bl	8000d24 <__aeabi_fmul>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	4619      	mov	r1, r3
 8007f52:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007f56:	f7f8 fddd 	bl	8000b14 <__addsf3>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4); // normalise quaternion
 8007f60:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007f64:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007f68:	f7f8 fedc 	bl	8000d24 <__aeabi_fmul>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	461c      	mov	r4, r3
 8007f70:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007f74:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007f78:	f7f8 fed4 	bl	8000d24 <__aeabi_fmul>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4620      	mov	r0, r4
 8007f82:	f7f8 fdc7 	bl	8000b14 <__addsf3>
 8007f86:	4603      	mov	r3, r0
 8007f88:	461c      	mov	r4, r3
 8007f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f8e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007f92:	f7f8 fec7 	bl	8000d24 <__aeabi_fmul>
 8007f96:	4603      	mov	r3, r0
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f7f8 fdba 	bl	8000b14 <__addsf3>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	461c      	mov	r4, r3
 8007fa4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007fa8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007fac:	f7f8 feba 	bl	8000d24 <__aeabi_fmul>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f7f8 fdad 	bl	8000b14 <__addsf3>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f002 f9ed 	bl	800a39c <sqrtf>
 8007fc2:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f / norm;
 8007fc4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007fc6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007fca:	f7f8 ff5f 	bl	8000e8c <__aeabi_fdiv>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    q[0] = q1 * norm;
 8007fd2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007fd4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007fd8:	f7f8 fea4 	bl	8000d24 <__aeabi_fmul>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	461a      	mov	r2, r3
 8007fe0:	4b13      	ldr	r3, [pc, #76]	; (8008030 <QuaternionUpdate+0x1180>)
 8007fe2:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 8007fe4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007fe6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007fea:	f7f8 fe9b 	bl	8000d24 <__aeabi_fmul>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <QuaternionUpdate+0x1180>)
 8007ff4:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 8007ff6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007ff8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007ffc:	f7f8 fe92 	bl	8000d24 <__aeabi_fmul>
 8008000:	4603      	mov	r3, r0
 8008002:	461a      	mov	r2, r3
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <QuaternionUpdate+0x1180>)
 8008006:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 8008008:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800800a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800800e:	f7f8 fe89 	bl	8000d24 <__aeabi_fmul>
 8008012:	4603      	mov	r3, r0
 8008014:	461a      	mov	r2, r3
 8008016:	4b06      	ldr	r3, [pc, #24]	; (8008030 <QuaternionUpdate+0x1180>)
 8008018:	60da      	str	r2, [r3, #12]
 800801a:	e002      	b.n	8008022 <QuaternionUpdate+0x1172>
        return; // handle NaN
 800801c:	bf00      	nop
 800801e:	e000      	b.n	8008022 <QuaternionUpdate+0x1172>
        return; // handle NaN
 8008020:	bf00      	nop
}
 8008022:	37b4      	adds	r7, #180	; 0xb4
 8008024:	46bd      	mov	sp, r7
 8008026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008028:	2000000c 	.word	0x2000000c
 800802c:	200002e4 	.word	0x200002e4
 8008030:	20000010 	.word	0x20000010

08008034 <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8008038:	2200      	movs	r2, #0
 800803a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800803e:	4802      	ldr	r0, [pc, #8]	; (8008048 <nRF24_CSN_L+0x14>)
 8008040:	f7f9 fb8a 	bl	8001758 <HAL_GPIO_WritePin>
}
 8008044:	bf00      	nop
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40010c00 	.word	0x40010c00

0800804c <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8008050:	2201      	movs	r2, #1
 8008052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008056:	4802      	ldr	r0, [pc, #8]	; (8008060 <nRF24_CSN_H+0x14>)
 8008058:	f7f9 fb7e 	bl	8001758 <HAL_GPIO_WritePin>
}
 800805c:	bf00      	nop
 800805e:	bd80      	pop	{r7, pc}
 8008060:	40010c00 	.word	0x40010c00

08008064 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af02      	add	r7, sp, #8
 800806a:	4603      	mov	r3, r0
 800806c:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {
 800806e:	f107 020f 	add.w	r2, r7, #15
 8008072:	1df9      	adds	r1, r7, #7
 8008074:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	2301      	movs	r3, #1
 800807c:	4806      	ldr	r0, [pc, #24]	; (8008098 <nRF24_LL_RW+0x34>)
 800807e:	f7fb f83b 	bl	80030f8 <HAL_SPI_TransmitReceive>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <nRF24_LL_RW+0x28>
        Error_Handler();
 8008088:	f7fc fd92 	bl	8004bb0 <Error_Handler>
    };
    return result;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	200000fc 	.word	0x200000fc

0800809c <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80080a6:	f7ff ffc5 	bl	8008034 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff ffd6 	bl	8008064 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80080b8:	20ff      	movs	r0, #255	; 0xff
 80080ba:	f7ff ffd3 	bl	8008064 <nRF24_LL_RW>
 80080be:	4603      	mov	r3, r0
 80080c0:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80080c2:	f7ff ffc3 	bl	800804c <nRF24_CSN_H>

	return value;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	460a      	mov	r2, r1
 80080da:	71fb      	strb	r3, [r7, #7]
 80080dc:	4613      	mov	r3, r2
 80080de:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80080e0:	f7ff ffa8 	bl	8008034 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	2b1f      	cmp	r3, #31
 80080e8:	d810      	bhi.n	800810c <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80080ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ee:	f003 031f 	and.w	r3, r3, #31
 80080f2:	b25b      	sxtb	r3, r3
 80080f4:	f043 0320 	orr.w	r3, r3, #32
 80080f8:	b25b      	sxtb	r3, r3
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff ffb1 	bl	8008064 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8008102:	79bb      	ldrb	r3, [r7, #6]
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff ffad 	bl	8008064 <nRF24_LL_RW>
 800810a:	e013      	b.n	8008134 <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff ffa8 	bl	8008064 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	2be1      	cmp	r3, #225	; 0xe1
 8008118:	d00c      	beq.n	8008134 <nRF24_WriteReg+0x64>
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	2be2      	cmp	r3, #226	; 0xe2
 800811e:	d009      	beq.n	8008134 <nRF24_WriteReg+0x64>
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	2be3      	cmp	r3, #227	; 0xe3
 8008124:	d006      	beq.n	8008134 <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	2bff      	cmp	r3, #255	; 0xff
 800812a:	d003      	beq.n	8008134 <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 800812c:	79bb      	ldrb	r3, [r7, #6]
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff ff98 	bl	8008064 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8008134:	f7ff ff8a 	bl	800804c <nRF24_CSN_H>
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8008140:	b590      	push	{r4, r7, lr}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	71fb      	strb	r3, [r7, #7]
 800814c:	4613      	mov	r3, r2
 800814e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8008150:	f7ff ff70 	bl	8008034 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff ff84 	bl	8008064 <nRF24_LL_RW>
	while (count--)
 800815c:	e007      	b.n	800816e <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800815e:	683c      	ldr	r4, [r7, #0]
 8008160:	1c63      	adds	r3, r4, #1
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	20ff      	movs	r0, #255	; 0xff
 8008166:	f7ff ff7d 	bl	8008064 <nRF24_LL_RW>
 800816a:	4603      	mov	r3, r0
 800816c:	7023      	strb	r3, [r4, #0]
	while (count--)
 800816e:	79bb      	ldrb	r3, [r7, #6]
 8008170:	1e5a      	subs	r2, r3, #1
 8008172:	71ba      	strb	r2, [r7, #6]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f2      	bne.n	800815e <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8008178:	f7ff ff68 	bl	800804c <nRF24_CSN_H>
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	bd90      	pop	{r4, r7, pc}

08008184 <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	71fb      	strb	r3, [r7, #7]
 8008190:	4613      	mov	r3, r2
 8008192:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8008194:	f7ff ff4e 	bl	8008034 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8008198:	79fb      	ldrb	r3, [r7, #7]
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff ff62 	bl	8008064 <nRF24_LL_RW>
	while (count--)
 80081a0:	e006      	b.n	80081b0 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	603a      	str	r2, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff ff5a 	bl	8008064 <nRF24_LL_RW>
	while (count--)
 80081b0:	79bb      	ldrb	r3, [r7, #6]
 80081b2:	1e5a      	subs	r2, r3, #1
 80081b4:	71ba      	strb	r2, [r7, #6]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1f3      	bne.n	80081a2 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80081ba:	f7ff ff47 	bl	800804c <nRF24_CSN_H>
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 80081ca:	2108      	movs	r1, #8
 80081cc:	2000      	movs	r0, #0
 80081ce:	f7ff ff7f 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 80081d2:	213f      	movs	r1, #63	; 0x3f
 80081d4:	2001      	movs	r0, #1
 80081d6:	f7ff ff7b 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 80081da:	2103      	movs	r1, #3
 80081dc:	2002      	movs	r0, #2
 80081de:	f7ff ff77 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 80081e2:	2103      	movs	r1, #3
 80081e4:	2003      	movs	r0, #3
 80081e6:	f7ff ff73 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 80081ea:	2103      	movs	r1, #3
 80081ec:	2004      	movs	r0, #4
 80081ee:	f7ff ff6f 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 80081f2:	2102      	movs	r1, #2
 80081f4:	2005      	movs	r0, #5
 80081f6:	f7ff ff6b 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 80081fa:	210e      	movs	r1, #14
 80081fc:	2006      	movs	r0, #6
 80081fe:	f7ff ff67 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8008202:	2100      	movs	r1, #0
 8008204:	2007      	movs	r0, #7
 8008206:	f7ff ff63 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800820a:	2100      	movs	r1, #0
 800820c:	2011      	movs	r0, #17
 800820e:	f7ff ff5f 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8008212:	2100      	movs	r1, #0
 8008214:	2012      	movs	r0, #18
 8008216:	f7ff ff5b 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 800821a:	2100      	movs	r1, #0
 800821c:	2013      	movs	r0, #19
 800821e:	f7ff ff57 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8008222:	2100      	movs	r1, #0
 8008224:	2014      	movs	r0, #20
 8008226:	f7ff ff53 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 800822a:	2100      	movs	r1, #0
 800822c:	2015      	movs	r0, #21
 800822e:	f7ff ff4f 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8008232:	2100      	movs	r1, #0
 8008234:	2016      	movs	r0, #22
 8008236:	f7ff ff4b 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800823a:	2100      	movs	r1, #0
 800823c:	201c      	movs	r0, #28
 800823e:	f7ff ff47 	bl	80080d0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8008242:	2100      	movs	r1, #0
 8008244:	201d      	movs	r0, #29
 8008246:	f7ff ff43 	bl	80080d0 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 800824a:	f000 f98f 	bl	800856c <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 800824e:	f000 f985 	bl	800855c <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 8008252:	f000 f993 	bl	800857c <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 8008256:	f7ff fef9 	bl	800804c <nRF24_CSN_H>
}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8008266:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <nRF24_Check+0x58>)
 8008268:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800826a:	2205      	movs	r2, #5
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	2030      	movs	r0, #48	; 0x30
 8008270:	f7ff ff88 	bl	8008184 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8008274:	463b      	mov	r3, r7
 8008276:	2205      	movs	r2, #5
 8008278:	4619      	mov	r1, r3
 800827a:	2010      	movs	r0, #16
 800827c:	f7ff ff60 	bl	8008140 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
 8008284:	e00f      	b.n	80082a6 <nRF24_Check+0x46>
	{
		if (rxbuf[i] != *ptr++)
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	3310      	adds	r3, #16
 800828a:	443b      	add	r3, r7
 800828c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	1c59      	adds	r1, r3, #1
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d001      	beq.n	80082a0 <nRF24_Check+0x40>
			return 0;
 800829c:	2300      	movs	r3, #0
 800829e:	e006      	b.n	80082ae <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++)
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	3301      	adds	r3, #1
 80082a4:	73fb      	strb	r3, [r7, #15]
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d9ec      	bls.n	8008286 <nRF24_Check+0x26>
	}

	return 1;
 80082ac:	2301      	movs	r3, #1
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	0800b76c 	.word	0x0800b76c

080082bc <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80082c6:	2000      	movs	r0, #0
 80082c8:	f7ff fee8 	bl	800809c <nRF24_ReadReg>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d104      	bne.n	80082e0 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	f043 0302 	orr.w	r3, r3, #2
 80082dc:	73fb      	strb	r3, [r7, #15]
 80082de:	e003      	b.n	80082e8 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	f023 0302 	bic.w	r3, r3, #2
 80082e6:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	4619      	mov	r1, r3
 80082ec:	2000      	movs	r0, #0
 80082ee:	f7ff feef 	bl	80080d0 <nRF24_WriteReg>
}
 80082f2:	bf00      	nop
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	4603      	mov	r3, r0
 8008302:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8008304:	2000      	movs	r0, #0
 8008306:	f7ff fec9 	bl	800809c <nRF24_ReadReg>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	f023 0301 	bic.w	r3, r3, #1
 8008314:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8008316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	b25a      	sxtb	r2, r3
 8008320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008324:	4313      	orrs	r3, r2
 8008326:	b25b      	sxtb	r3, r3
 8008328:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	4619      	mov	r1, r3
 800832e:	2000      	movs	r0, #0
 8008330:	f7ff fece 	bl	80080d0 <nRF24_WriteReg>
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8008346:	2000      	movs	r0, #0
 8008348:	f7ff fea8 	bl	800809c <nRF24_ReadReg>
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	f023 030c 	bic.w	r3, r3, #12
 8008356:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8008358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800835c:	f003 030c 	and.w	r3, r3, #12
 8008360:	b25a      	sxtb	r2, r3
 8008362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008366:	4313      	orrs	r3, r2
 8008368:	b25b      	sxtb	r3, r3
 800836a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	4619      	mov	r1, r3
 8008370:	2000      	movs	r0, #0
 8008372:	f7ff fead 	bl	80080d0 <nRF24_WriteReg>
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	4603      	mov	r3, r0
 8008386:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	4619      	mov	r1, r3
 800838c:	2005      	movs	r0, #5
 800838e:	f7ff fe9f 	bl	80080d0 <nRF24_WriteReg>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <nRF24_SetAutoRetr>:
// input:
//   ard -Thời gian giữa những lần truyền lại
//   arc - Số lần truyện lại (tối đa 15)
// note: 0x00 có nghĩa là tắt chức năng truyền lại
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	4603      	mov	r3, r0
 80083a2:	460a      	mov	r2, r1
 80083a4:	71fb      	strb	r3, [r7, #7]
 80083a6:	4613      	mov	r3, r2
 80083a8:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	b25a      	sxtb	r2, r3
 80083b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80083b4:	f003 030f 	and.w	r3, r3, #15
 80083b8:	b25b      	sxtb	r3, r3
 80083ba:	4313      	orrs	r3, r2
 80083bc:	b25b      	sxtb	r3, r3
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	4619      	mov	r1, r3
 80083c2:	2004      	movs	r0, #4
 80083c4:	f7ff fe84 	bl	80080d0 <nRF24_WriteReg>
}
 80083c8:	bf00      	nop
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	3b02      	subs	r3, #2
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	4619      	mov	r1, r3
 80083e2:	2003      	movs	r0, #3
 80083e4:	f7ff fe74 	bl	80080d0 <nRF24_WriteReg>
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	2b06      	cmp	r3, #6
 8008400:	d00a      	beq.n	8008418 <nRF24_SetAddr+0x28>
 8008402:	2b06      	cmp	r3, #6
 8008404:	dc36      	bgt.n	8008474 <nRF24_SetAddr+0x84>
 8008406:	2b01      	cmp	r3, #1
 8008408:	dc02      	bgt.n	8008410 <nRF24_SetAddr+0x20>
 800840a:	2b00      	cmp	r3, #0
 800840c:	da04      	bge.n	8008418 <nRF24_SetAddr+0x28>
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
		break;
	default:
		break;
 800840e:	e031      	b.n	8008474 <nRF24_SetAddr+0x84>
 8008410:	3b02      	subs	r3, #2
	switch (pipe)
 8008412:	2b03      	cmp	r3, #3
 8008414:	d82e      	bhi.n	8008474 <nRF24_SetAddr+0x84>
 8008416:	e023      	b.n	8008460 <nRF24_SetAddr+0x70>
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8008418:	2003      	movs	r0, #3
 800841a:	f7ff fe3f 	bl	800809c <nRF24_ReadReg>
 800841e:	4603      	mov	r3, r0
 8008420:	3301      	adds	r3, #1
 8008422:	73fb      	strb	r3, [r7, #15]
		addr += addr_width;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	4413      	add	r3, r2
 800842a:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 800842c:	f7ff fe02 	bl	8008034 <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	4a13      	ldr	r2, [pc, #76]	; (8008480 <nRF24_SetAddr+0x90>)
 8008434:	5cd3      	ldrb	r3, [r2, r3]
 8008436:	f043 0320 	orr.w	r3, r3, #32
 800843a:	b2db      	uxtb	r3, r3
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff fe11 	bl	8008064 <nRF24_LL_RW>
			nRF24_LL_RW(*addr--);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	1e5a      	subs	r2, r3, #1
 8008446:	603a      	str	r2, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff fe0a 	bl	8008064 <nRF24_LL_RW>
		} while (addr_width--);
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	1e5a      	subs	r2, r3, #1
 8008454:	73fa      	strb	r2, [r7, #15]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1f3      	bne.n	8008442 <nRF24_SetAddr+0x52>
		nRF24_CSN_H();
 800845a:	f7ff fdf7 	bl	800804c <nRF24_CSN_H>
		break;
 800845e:	e00a      	b.n	8008476 <nRF24_SetAddr+0x86>
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	4a07      	ldr	r2, [pc, #28]	; (8008480 <nRF24_SetAddr+0x90>)
 8008464:	5cd2      	ldrb	r2, [r2, r3]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f7ff fe2f 	bl	80080d0 <nRF24_WriteReg>
		break;
 8008472:	e000      	b.n	8008476 <nRF24_SetAddr+0x86>
		break;
 8008474:	bf00      	nop
	}
}
 8008476:	bf00      	nop
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	0800b7c0 	.word	0x0800b7c0

08008484 <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800848e:	2006      	movs	r0, #6
 8008490:	f7ff fe04 	bl	800809c <nRF24_ReadReg>
 8008494:	4603      	mov	r3, r0
 8008496:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	f023 0306 	bic.w	r3, r3, #6
 800849e:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80084a0:	7bfa      	ldrb	r2, [r7, #15]
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	4619      	mov	r1, r3
 80084ac:	2006      	movs	r0, #6
 80084ae:	f7ff fe0f 	bl	80080d0 <nRF24_WriteReg>
}
 80084b2:	bf00      	nop
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	4603      	mov	r3, r0
 80084c2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80084c4:	2006      	movs	r0, #6
 80084c6:	f7ff fde9 	bl	800809c <nRF24_ReadReg>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80084d4:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80084d6:	7bfa      	ldrb	r2, [r7, #15]
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	4313      	orrs	r3, r2
 80084dc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	4619      	mov	r1, r3
 80084e2:	2006      	movs	r0, #6
 80084e4:	f7ff fdf4 	bl	80080d0 <nRF24_WriteReg>
}
 80084e8:	bf00      	nop
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <nRF24_EnableAA>:
 * @brief CHo phép auto retransmit cho từng pipe
 *
 * @param pipe pipe cần cấu hình
 */
void nRF24_EnableAA(uint8_t pipe)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80084fa:	2001      	movs	r0, #1
 80084fc:	f7ff fdce 	bl	800809c <nRF24_ReadReg>
 8008500:	4603      	mov	r3, r0
 8008502:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	2201      	movs	r2, #1
 8008508:	fa02 f303 	lsl.w	r3, r2, r3
 800850c:	b25a      	sxtb	r2, r3
 800850e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008512:	4313      	orrs	r3, r2
 8008514:	b25b      	sxtb	r3, r3
 8008516:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	4619      	mov	r1, r3
 800851c:	2001      	movs	r0, #1
 800851e:	f7ff fdd7 	bl	80080d0 <nRF24_WriteReg>
}
 8008522:	bf00      	nop
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <nRF24_GetStatus>:
 * @brief lấy giá trị STATUS register
 *
 * @return uint8_t Giá trị của STATUS
 */
uint8_t nRF24_GetStatus(void)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 800852e:	2007      	movs	r0, #7
 8008530:	f7ff fdb4 	bl	800809c <nRF24_ReadReg>
 8008534:	4603      	mov	r3, r0
}
 8008536:	4618      	mov	r0, r3
 8008538:	bd80      	pop	{r7, pc}

0800853a <nRF24_ResetPLOS>:
/**
 * @brief Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
 *
 */
void nRF24_ResetPLOS(void)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 8008540:	2005      	movs	r0, #5
 8008542:	f7ff fdab 	bl	800809c <nRF24_ReadReg>
 8008546:	4603      	mov	r3, r0
 8008548:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 800854a:	79fb      	ldrb	r3, [r7, #7]
 800854c:	4619      	mov	r1, r3
 800854e:	2005      	movs	r0, #5
 8008550:	f7ff fdbe 	bl	80080d0 <nRF24_WriteReg>
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8008560:	21ff      	movs	r1, #255	; 0xff
 8008562:	20e1      	movs	r0, #225	; 0xe1
 8008564:	f7ff fdb4 	bl	80080d0 <nRF24_WriteReg>
}
 8008568:	bf00      	nop
 800856a:	bd80      	pop	{r7, pc}

0800856c <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8008570:	21ff      	movs	r1, #255	; 0xff
 8008572:	20e2      	movs	r0, #226	; 0xe2
 8008574:	f7ff fdac 	bl	80080d0 <nRF24_WriteReg>
}
 8008578:	bf00      	nop
 800857a:	bd80      	pop	{r7, pc}

0800857c <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8008582:	2007      	movs	r0, #7
 8008584:	f7ff fd8a 	bl	800809c <nRF24_ReadReg>
 8008588:	4603      	mov	r3, r0
 800858a:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8008592:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	4619      	mov	r1, r3
 8008598:	2007      	movs	r0, #7
 800859a:	f7ff fd99 	bl	80080d0 <nRF24_WriteReg>
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <nRF24_WritePayload>:
 *
 * @param pBuf con trỏ , trỏ tới buffer chứa paylaod
 * @param length độ dài của paylaod
 */
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	460b      	mov	r3, r1
 80085b0:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	461a      	mov	r2, r3
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	20a0      	movs	r0, #160	; 0xa0
 80085ba:	f7ff fde3 	bl	8008184 <nRF24_WriteMBReg>
}
 80085be:	bf00      	nop
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <calculate_PID>:

//-----------------------------------------------------------------------------
// calculate PID
//-----------------------------------------------------------------------------
void calculate_PID(float setpoint_roll, float setpoint_pitch, float setpoint_yaw, float roll_angle, float pitch_angle, float yaw_angle, PID_t *PID_out)
{
 80085c8:	b5b0      	push	{r4, r5, r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	603b      	str	r3, [r7, #0]
    // pitch PID calculations
    error = setpoint_pitch - pitch_angle * 12.5 - 1500;
 80085d6:	68b8      	ldr	r0, [r7, #8]
 80085d8:	f7f7 ff1e 	bl	8000418 <__aeabi_f2d>
 80085dc:	4604      	mov	r4, r0
 80085de:	460d      	mov	r5, r1
 80085e0:	6a38      	ldr	r0, [r7, #32]
 80085e2:	f7f7 ff19 	bl	8000418 <__aeabi_f2d>
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	4bb3      	ldr	r3, [pc, #716]	; (80088b8 <calculate_PID+0x2f0>)
 80085ec:	f7f7 ff6c 	bl	80004c8 <__aeabi_dmul>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4620      	mov	r0, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	f7f7 fdae 	bl	8000158 <__aeabi_dsub>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4610      	mov	r0, r2
 8008602:	4619      	mov	r1, r3
 8008604:	a3a4      	add	r3, pc, #656	; (adr r3, 8008898 <calculate_PID+0x2d0>)
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	f7f7 fda5 	bl	8000158 <__aeabi_dsub>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4610      	mov	r0, r2
 8008614:	4619      	mov	r1, r3
 8008616:	f7f8 fa27 	bl	8000a68 <__aeabi_d2f>
 800861a:	4603      	mov	r3, r0
 800861c:	4aa7      	ldr	r2, [pc, #668]	; (80088bc <calculate_PID+0x2f4>)
 800861e:	6013      	str	r3, [r2, #0]
    Pterm_pitch = error * Kp_pitch;
 8008620:	4ba6      	ldr	r3, [pc, #664]	; (80088bc <calculate_PID+0x2f4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8008628:	4618      	mov	r0, r3
 800862a:	f7f8 fb7b 	bl	8000d24 <__aeabi_fmul>
 800862e:	4603      	mov	r3, r0
 8008630:	461a      	mov	r2, r3
 8008632:	4ba3      	ldr	r3, [pc, #652]	; (80088c0 <calculate_PID+0x2f8>)
 8008634:	601a      	str	r2, [r3, #0]
    Iterm_pitch += error;
 8008636:	4ba3      	ldr	r3, [pc, #652]	; (80088c4 <calculate_PID+0x2fc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4aa0      	ldr	r2, [pc, #640]	; (80088bc <calculate_PID+0x2f4>)
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	4611      	mov	r1, r2
 8008640:	4618      	mov	r0, r3
 8008642:	f7f8 fa67 	bl	8000b14 <__addsf3>
 8008646:	4603      	mov	r3, r0
 8008648:	461a      	mov	r2, r3
 800864a:	4b9e      	ldr	r3, [pc, #632]	; (80088c4 <calculate_PID+0x2fc>)
 800864c:	601a      	str	r2, [r3, #0]
    Dterm_pitch = (error - last_error_pitch) * Kd_pitch;
 800864e:	4b9b      	ldr	r3, [pc, #620]	; (80088bc <calculate_PID+0x2f4>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a9d      	ldr	r2, [pc, #628]	; (80088c8 <calculate_PID+0x300>)
 8008654:	6812      	ldr	r2, [r2, #0]
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f7f8 fa59 	bl	8000b10 <__aeabi_fsub>
 800865e:	4603      	mov	r3, r0
 8008660:	4618      	mov	r0, r3
 8008662:	f7f7 fed9 	bl	8000418 <__aeabi_f2d>
 8008666:	a38e      	add	r3, pc, #568	; (adr r3, 80088a0 <calculate_PID+0x2d8>)
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f7f7 ff2c 	bl	80004c8 <__aeabi_dmul>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4610      	mov	r0, r2
 8008676:	4619      	mov	r1, r3
 8008678:	f7f8 f9f6 	bl	8000a68 <__aeabi_d2f>
 800867c:	4603      	mov	r3, r0
 800867e:	4a93      	ldr	r2, [pc, #588]	; (80088cc <calculate_PID+0x304>)
 8008680:	6013      	str	r3, [r2, #0]
    last_error_pitch = error;
 8008682:	4b8e      	ldr	r3, [pc, #568]	; (80088bc <calculate_PID+0x2f4>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a90      	ldr	r2, [pc, #576]	; (80088c8 <calculate_PID+0x300>)
 8008688:	6013      	str	r3, [r2, #0]
    PID_pitch_out = Pterm_pitch + (Iterm_pitch * Ki_pitch) + Dterm_pitch;
 800868a:	4b8d      	ldr	r3, [pc, #564]	; (80088c0 <calculate_PID+0x2f8>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4618      	mov	r0, r3
 8008690:	f7f7 fec2 	bl	8000418 <__aeabi_f2d>
 8008694:	4604      	mov	r4, r0
 8008696:	460d      	mov	r5, r1
 8008698:	4b8a      	ldr	r3, [pc, #552]	; (80088c4 <calculate_PID+0x2fc>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f7f7 febb 	bl	8000418 <__aeabi_f2d>
 80086a2:	f04f 0200 	mov.w	r2, #0
 80086a6:	f04f 0300 	mov.w	r3, #0
 80086aa:	f7f7 ff0d 	bl	80004c8 <__aeabi_dmul>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4620      	mov	r0, r4
 80086b4:	4629      	mov	r1, r5
 80086b6:	f7f7 fd51 	bl	800015c <__adddf3>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4614      	mov	r4, r2
 80086c0:	461d      	mov	r5, r3
 80086c2:	4b82      	ldr	r3, [pc, #520]	; (80088cc <calculate_PID+0x304>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7f7 fea6 	bl	8000418 <__aeabi_f2d>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4620      	mov	r0, r4
 80086d2:	4629      	mov	r1, r5
 80086d4:	f7f7 fd42 	bl	800015c <__adddf3>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4610      	mov	r0, r2
 80086de:	4619      	mov	r1, r3
 80086e0:	f7f8 f9c2 	bl	8000a68 <__aeabi_d2f>
 80086e4:	4603      	mov	r3, r0
 80086e6:	4a7a      	ldr	r2, [pc, #488]	; (80088d0 <calculate_PID+0x308>)
 80086e8:	6013      	str	r3, [r2, #0]
    if (PID_pitch_out > MAX_pitch_output)
 80086ea:	4b79      	ldr	r3, [pc, #484]	; (80088d0 <calculate_PID+0x308>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4979      	ldr	r1, [pc, #484]	; (80088d4 <calculate_PID+0x30c>)
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7f8 fcd3 	bl	800109c <__aeabi_fcmpgt>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <calculate_PID+0x13a>
        PID_pitch_out = MAX_pitch_output;
 80086fc:	4b74      	ldr	r3, [pc, #464]	; (80088d0 <calculate_PID+0x308>)
 80086fe:	4a75      	ldr	r2, [pc, #468]	; (80088d4 <calculate_PID+0x30c>)
 8008700:	601a      	str	r2, [r3, #0]
    if (PID_pitch_out < -MAX_pitch_output)
 8008702:	4b73      	ldr	r3, [pc, #460]	; (80088d0 <calculate_PID+0x308>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4974      	ldr	r1, [pc, #464]	; (80088d8 <calculate_PID+0x310>)
 8008708:	4618      	mov	r0, r3
 800870a:	f7f8 fca9 	bl	8001060 <__aeabi_fcmplt>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <calculate_PID+0x152>
        PID_pitch_out = -MAX_pitch_output;
 8008714:	4b6e      	ldr	r3, [pc, #440]	; (80088d0 <calculate_PID+0x308>)
 8008716:	4a70      	ldr	r2, [pc, #448]	; (80088d8 <calculate_PID+0x310>)
 8008718:	601a      	str	r2, [r3, #0]

    // roll PID calculations
    error = setpoint_roll + roll_angle * 12.5 - 1500;
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f7f7 fe7c 	bl	8000418 <__aeabi_f2d>
 8008720:	4604      	mov	r4, r0
 8008722:	460d      	mov	r5, r1
 8008724:	6838      	ldr	r0, [r7, #0]
 8008726:	f7f7 fe77 	bl	8000418 <__aeabi_f2d>
 800872a:	f04f 0200 	mov.w	r2, #0
 800872e:	4b62      	ldr	r3, [pc, #392]	; (80088b8 <calculate_PID+0x2f0>)
 8008730:	f7f7 feca 	bl	80004c8 <__aeabi_dmul>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4620      	mov	r0, r4
 800873a:	4629      	mov	r1, r5
 800873c:	f7f7 fd0e 	bl	800015c <__adddf3>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	4610      	mov	r0, r2
 8008746:	4619      	mov	r1, r3
 8008748:	a353      	add	r3, pc, #332	; (adr r3, 8008898 <calculate_PID+0x2d0>)
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f7f7 fd03 	bl	8000158 <__aeabi_dsub>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4610      	mov	r0, r2
 8008758:	4619      	mov	r1, r3
 800875a:	f7f8 f985 	bl	8000a68 <__aeabi_d2f>
 800875e:	4603      	mov	r3, r0
 8008760:	4a56      	ldr	r2, [pc, #344]	; (80088bc <calculate_PID+0x2f4>)
 8008762:	6013      	str	r3, [r2, #0]
    Pterm_roll = error * Kp_roll;
 8008764:	4b55      	ldr	r3, [pc, #340]	; (80088bc <calculate_PID+0x2f4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f7f7 fe55 	bl	8000418 <__aeabi_f2d>
 800876e:	a34e      	add	r3, pc, #312	; (adr r3, 80088a8 <calculate_PID+0x2e0>)
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f7f7 fea8 	bl	80004c8 <__aeabi_dmul>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4610      	mov	r0, r2
 800877e:	4619      	mov	r1, r3
 8008780:	f7f8 f972 	bl	8000a68 <__aeabi_d2f>
 8008784:	4603      	mov	r3, r0
 8008786:	4a55      	ldr	r2, [pc, #340]	; (80088dc <calculate_PID+0x314>)
 8008788:	6013      	str	r3, [r2, #0]
    Iterm_roll += error;
 800878a:	4b55      	ldr	r3, [pc, #340]	; (80088e0 <calculate_PID+0x318>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a4b      	ldr	r2, [pc, #300]	; (80088bc <calculate_PID+0x2f4>)
 8008790:	6812      	ldr	r2, [r2, #0]
 8008792:	4611      	mov	r1, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f7f8 f9bd 	bl	8000b14 <__addsf3>
 800879a:	4603      	mov	r3, r0
 800879c:	461a      	mov	r2, r3
 800879e:	4b50      	ldr	r3, [pc, #320]	; (80088e0 <calculate_PID+0x318>)
 80087a0:	601a      	str	r2, [r3, #0]
    Dterm_roll = (error - last_error_roll) * Kd_roll;
 80087a2:	4b46      	ldr	r3, [pc, #280]	; (80088bc <calculate_PID+0x2f4>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a4f      	ldr	r2, [pc, #316]	; (80088e4 <calculate_PID+0x31c>)
 80087a8:	6812      	ldr	r2, [r2, #0]
 80087aa:	4611      	mov	r1, r2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7f8 f9af 	bl	8000b10 <__aeabi_fsub>
 80087b2:	4603      	mov	r3, r0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7f7 fe2f 	bl	8000418 <__aeabi_f2d>
 80087ba:	a33d      	add	r3, pc, #244	; (adr r3, 80088b0 <calculate_PID+0x2e8>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	f7f7 fe82 	bl	80004c8 <__aeabi_dmul>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4610      	mov	r0, r2
 80087ca:	4619      	mov	r1, r3
 80087cc:	f7f8 f94c 	bl	8000a68 <__aeabi_d2f>
 80087d0:	4603      	mov	r3, r0
 80087d2:	4a45      	ldr	r2, [pc, #276]	; (80088e8 <calculate_PID+0x320>)
 80087d4:	6013      	str	r3, [r2, #0]
    last_error_roll = error;
 80087d6:	4b39      	ldr	r3, [pc, #228]	; (80088bc <calculate_PID+0x2f4>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a42      	ldr	r2, [pc, #264]	; (80088e4 <calculate_PID+0x31c>)
 80087dc:	6013      	str	r3, [r2, #0]
    PID_roll_out = Pterm_roll + (Iterm_roll * Ki_roll) + Dterm_roll;
 80087de:	4b3f      	ldr	r3, [pc, #252]	; (80088dc <calculate_PID+0x314>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7f7 fe18 	bl	8000418 <__aeabi_f2d>
 80087e8:	4604      	mov	r4, r0
 80087ea:	460d      	mov	r5, r1
 80087ec:	4b3c      	ldr	r3, [pc, #240]	; (80088e0 <calculate_PID+0x318>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7f7 fe11 	bl	8000418 <__aeabi_f2d>
 80087f6:	f04f 0200 	mov.w	r2, #0
 80087fa:	f04f 0300 	mov.w	r3, #0
 80087fe:	f7f7 fe63 	bl	80004c8 <__aeabi_dmul>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f7f7 fca7 	bl	800015c <__adddf3>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4614      	mov	r4, r2
 8008814:	461d      	mov	r5, r3
 8008816:	4b34      	ldr	r3, [pc, #208]	; (80088e8 <calculate_PID+0x320>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f7f7 fdfc 	bl	8000418 <__aeabi_f2d>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4620      	mov	r0, r4
 8008826:	4629      	mov	r1, r5
 8008828:	f7f7 fc98 	bl	800015c <__adddf3>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4610      	mov	r0, r2
 8008832:	4619      	mov	r1, r3
 8008834:	f7f8 f918 	bl	8000a68 <__aeabi_d2f>
 8008838:	4603      	mov	r3, r0
 800883a:	4a2c      	ldr	r2, [pc, #176]	; (80088ec <calculate_PID+0x324>)
 800883c:	6013      	str	r3, [r2, #0]
    if (PID_roll_out > MAX_roll_output)
 800883e:	4b2b      	ldr	r3, [pc, #172]	; (80088ec <calculate_PID+0x324>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4924      	ldr	r1, [pc, #144]	; (80088d4 <calculate_PID+0x30c>)
 8008844:	4618      	mov	r0, r3
 8008846:	f7f8 fc29 	bl	800109c <__aeabi_fcmpgt>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <calculate_PID+0x28e>
        PID_roll_out = MAX_roll_output;
 8008850:	4b26      	ldr	r3, [pc, #152]	; (80088ec <calculate_PID+0x324>)
 8008852:	4a20      	ldr	r2, [pc, #128]	; (80088d4 <calculate_PID+0x30c>)
 8008854:	601a      	str	r2, [r3, #0]
    if (PID_roll_out < -MAX_roll_output)
 8008856:	4b25      	ldr	r3, [pc, #148]	; (80088ec <calculate_PID+0x324>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	491f      	ldr	r1, [pc, #124]	; (80088d8 <calculate_PID+0x310>)
 800885c:	4618      	mov	r0, r3
 800885e:	f7f8 fbff 	bl	8001060 <__aeabi_fcmplt>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <calculate_PID+0x2a6>
        PID_roll_out = -MAX_roll_output;
 8008868:	4b20      	ldr	r3, [pc, #128]	; (80088ec <calculate_PID+0x324>)
 800886a:	4a1b      	ldr	r2, [pc, #108]	; (80088d8 <calculate_PID+0x310>)
 800886c:	601a      	str	r2, [r3, #0]

    // yaw PID calculations
    error = (setpoint_yaw + abs_yaw_angle) * 12.5;
 800886e:	4b20      	ldr	r3, [pc, #128]	; (80088f0 <calculate_PID+0x328>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	4618      	mov	r0, r3
 8008876:	f7f8 f94d 	bl	8000b14 <__addsf3>
 800887a:	4603      	mov	r3, r0
 800887c:	491d      	ldr	r1, [pc, #116]	; (80088f4 <calculate_PID+0x32c>)
 800887e:	4618      	mov	r0, r3
 8008880:	f7f8 fa50 	bl	8000d24 <__aeabi_fmul>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	4b0c      	ldr	r3, [pc, #48]	; (80088bc <calculate_PID+0x2f4>)
 800888a:	601a      	str	r2, [r3, #0]
    Pterm_yaw = error * Kp_yaw;
 800888c:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <calculate_PID+0x2f4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	e032      	b.n	80088f8 <calculate_PID+0x330>
 8008892:	bf00      	nop
 8008894:	f3af 8000 	nop.w
 8008898:	00000000 	.word	0x00000000
 800889c:	40977000 	.word	0x40977000
 80088a0:	66666666 	.word	0x66666666
 80088a4:	400a6666 	.word	0x400a6666
 80088a8:	9999999a 	.word	0x9999999a
 80088ac:	3fd99999 	.word	0x3fd99999
 80088b0:	33333333 	.word	0x33333333
 80088b4:	40133333 	.word	0x40133333
 80088b8:	40290000 	.word	0x40290000
 80088bc:	20000338 	.word	0x20000338
 80088c0:	2000033c 	.word	0x2000033c
 80088c4:	20000340 	.word	0x20000340
 80088c8:	20000348 	.word	0x20000348
 80088cc:	20000344 	.word	0x20000344
 80088d0:	2000034c 	.word	0x2000034c
 80088d4:	43e30000 	.word	0x43e30000
 80088d8:	c3e30000 	.word	0xc3e30000
 80088dc:	20000350 	.word	0x20000350
 80088e0:	20000354 	.word	0x20000354
 80088e4:	2000035c 	.word	0x2000035c
 80088e8:	20000358 	.word	0x20000358
 80088ec:	20000360 	.word	0x20000360
 80088f0:	2000023c 	.word	0x2000023c
 80088f4:	41480000 	.word	0x41480000
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f7 fd8d 	bl	8000418 <__aeabi_f2d>
 80088fe:	a344      	add	r3, pc, #272	; (adr r3, 8008a10 <calculate_PID+0x448>)
 8008900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008904:	f7f7 fde0 	bl	80004c8 <__aeabi_dmul>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4610      	mov	r0, r2
 800890e:	4619      	mov	r1, r3
 8008910:	f7f8 f8aa 	bl	8000a68 <__aeabi_d2f>
 8008914:	4603      	mov	r3, r0
 8008916:	4a40      	ldr	r2, [pc, #256]	; (8008a18 <calculate_PID+0x450>)
 8008918:	6013      	str	r3, [r2, #0]
    Iterm_yaw += error;
 800891a:	4b40      	ldr	r3, [pc, #256]	; (8008a1c <calculate_PID+0x454>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a40      	ldr	r2, [pc, #256]	; (8008a20 <calculate_PID+0x458>)
 8008920:	6812      	ldr	r2, [r2, #0]
 8008922:	4611      	mov	r1, r2
 8008924:	4618      	mov	r0, r3
 8008926:	f7f8 f8f5 	bl	8000b14 <__addsf3>
 800892a:	4603      	mov	r3, r0
 800892c:	461a      	mov	r2, r3
 800892e:	4b3b      	ldr	r3, [pc, #236]	; (8008a1c <calculate_PID+0x454>)
 8008930:	601a      	str	r2, [r3, #0]
    Dterm_yaw = (error - last_error_yaw) * Kd_yaw;
 8008932:	4b3b      	ldr	r3, [pc, #236]	; (8008a20 <calculate_PID+0x458>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a3b      	ldr	r2, [pc, #236]	; (8008a24 <calculate_PID+0x45c>)
 8008938:	6812      	ldr	r2, [r2, #0]
 800893a:	4611      	mov	r1, r2
 800893c:	4618      	mov	r0, r3
 800893e:	f7f8 f8e7 	bl	8000b10 <__aeabi_fsub>
 8008942:	4603      	mov	r3, r0
 8008944:	4938      	ldr	r1, [pc, #224]	; (8008a28 <calculate_PID+0x460>)
 8008946:	4618      	mov	r0, r3
 8008948:	f7f8 f9ec 	bl	8000d24 <__aeabi_fmul>
 800894c:	4603      	mov	r3, r0
 800894e:	461a      	mov	r2, r3
 8008950:	4b36      	ldr	r3, [pc, #216]	; (8008a2c <calculate_PID+0x464>)
 8008952:	601a      	str	r2, [r3, #0]
    last_error_yaw = error;
 8008954:	4b32      	ldr	r3, [pc, #200]	; (8008a20 <calculate_PID+0x458>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a32      	ldr	r2, [pc, #200]	; (8008a24 <calculate_PID+0x45c>)
 800895a:	6013      	str	r3, [r2, #0]
    PID_yaw_out = Pterm_yaw + (Iterm_yaw * Ki_yaw) + Dterm_yaw;
 800895c:	4b2e      	ldr	r3, [pc, #184]	; (8008a18 <calculate_PID+0x450>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	f7f7 fd59 	bl	8000418 <__aeabi_f2d>
 8008966:	4604      	mov	r4, r0
 8008968:	460d      	mov	r5, r1
 800896a:	4b2c      	ldr	r3, [pc, #176]	; (8008a1c <calculate_PID+0x454>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4618      	mov	r0, r3
 8008970:	f7f7 fd52 	bl	8000418 <__aeabi_f2d>
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	f04f 0300 	mov.w	r3, #0
 800897c:	f7f7 fda4 	bl	80004c8 <__aeabi_dmul>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f7 fbe8 	bl	800015c <__adddf3>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4614      	mov	r4, r2
 8008992:	461d      	mov	r5, r3
 8008994:	4b25      	ldr	r3, [pc, #148]	; (8008a2c <calculate_PID+0x464>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f7f7 fd3d 	bl	8000418 <__aeabi_f2d>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4620      	mov	r0, r4
 80089a4:	4629      	mov	r1, r5
 80089a6:	f7f7 fbd9 	bl	800015c <__adddf3>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4610      	mov	r0, r2
 80089b0:	4619      	mov	r1, r3
 80089b2:	f7f8 f859 	bl	8000a68 <__aeabi_d2f>
 80089b6:	4603      	mov	r3, r0
 80089b8:	4a1d      	ldr	r2, [pc, #116]	; (8008a30 <calculate_PID+0x468>)
 80089ba:	6013      	str	r3, [r2, #0]
    if (PID_yaw_out > MAX_yaw_output)
 80089bc:	4b1c      	ldr	r3, [pc, #112]	; (8008a30 <calculate_PID+0x468>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	491c      	ldr	r1, [pc, #112]	; (8008a34 <calculate_PID+0x46c>)
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7f8 fb6a 	bl	800109c <__aeabi_fcmpgt>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <calculate_PID+0x40c>
        PID_yaw_out = MAX_yaw_output;
 80089ce:	4b18      	ldr	r3, [pc, #96]	; (8008a30 <calculate_PID+0x468>)
 80089d0:	4a18      	ldr	r2, [pc, #96]	; (8008a34 <calculate_PID+0x46c>)
 80089d2:	601a      	str	r2, [r3, #0]
    if (PID_yaw_out < -MAX_yaw_output)
 80089d4:	4b16      	ldr	r3, [pc, #88]	; (8008a30 <calculate_PID+0x468>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4917      	ldr	r1, [pc, #92]	; (8008a38 <calculate_PID+0x470>)
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f8 fb40 	bl	8001060 <__aeabi_fcmplt>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <calculate_PID+0x424>
        PID_yaw_out = -MAX_yaw_output;
 80089e6:	4b12      	ldr	r3, [pc, #72]	; (8008a30 <calculate_PID+0x468>)
 80089e8:	4a13      	ldr	r2, [pc, #76]	; (8008a38 <calculate_PID+0x470>)
 80089ea:	601a      	str	r2, [r3, #0]

    PID_out->PID_roll_out = PID_roll_out;
 80089ec:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <calculate_PID+0x474>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	601a      	str	r2, [r3, #0]
    PID_out->PID_pitch_out = PID_pitch_out;
 80089f4:	4b12      	ldr	r3, [pc, #72]	; (8008a40 <calculate_PID+0x478>)
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	605a      	str	r2, [r3, #4]
    PID_out->PID_yaw_out = PID_yaw_out;
 80089fc:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <calculate_PID+0x468>)
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	609a      	str	r2, [r3, #8]
}
 8008a04:	bf00      	nop
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8008a0c:	f3af 8000 	nop.w
 8008a10:	33333333 	.word	0x33333333
 8008a14:	3fc33333 	.word	0x3fc33333
 8008a18:	20000364 	.word	0x20000364
 8008a1c:	20000368 	.word	0x20000368
 8008a20:	20000338 	.word	0x20000338
 8008a24:	20000370 	.word	0x20000370
 8008a28:	40400000 	.word	0x40400000
 8008a2c:	2000036c 	.word	0x2000036c
 8008a30:	20000374 	.word	0x20000374
 8008a34:	43e30000 	.word	0x43e30000
 8008a38:	c3e30000 	.word	0xc3e30000
 8008a3c:	20000360 	.word	0x20000360
 8008a40:	2000034c 	.word	0x2000034c

08008a44 <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a4e:	4802      	ldr	r0, [pc, #8]	; (8008a58 <nRF24_CE_L+0x14>)
 8008a50:	f7f8 fe82 	bl	8001758 <HAL_GPIO_WritePin>
}
 8008a54:	bf00      	nop
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	40010800 	.word	0x40010800

08008a5c <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8008a60:	2201      	movs	r2, #1
 8008a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a66:	4802      	ldr	r0, [pc, #8]	; (8008a70 <nRF24_CE_H+0x14>)
 8008a68:	f7f8 fe76 	bl	8001758 <HAL_GPIO_WritePin>
}
 8008a6c:	bf00      	nop
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	40010800 	.word	0x40010800

08008a74 <Delay_ms>:


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7f8 fbb5 	bl	80011ec <HAL_Delay>
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <Toggle_LED>:

extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8008a90:	2104      	movs	r1, #4
 8008a92:	4802      	ldr	r0, [pc, #8]	; (8008a9c <Toggle_LED+0x10>)
 8008a94:	f7f8 fe78 	bl	8001788 <HAL_GPIO_TogglePin>
}
 8008a98:	bf00      	nop
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	40010c00 	.word	0x40010c00

08008aa0 <convert_to_us>:

NRF_Packet payload_packet;
uint8_t payload_length;

uint8_t convert_to_us(uint32_t val, uint32_t min, uint32_t middle, uint32_t max)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
    if (val > max)
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d901      	bls.n	8008aba <convert_to_us+0x1a>
        val = max;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	60fb      	str	r3, [r7, #12]
    if (val < min)
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d201      	bcs.n	8008ac6 <convert_to_us+0x26>
        val = min;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	60fb      	str	r3, [r7, #12]
    if (val < middle)
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d20d      	bcs.n	8008aea <convert_to_us+0x4a>
        return (val - min) * (1500 - 0) / (middle - min) + 0;
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008ad8:	fb03 f202 	mul.w	r2, r3, r2
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	1acb      	subs	r3, r1, r3
 8008ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	e00e      	b.n	8008b08 <convert_to_us+0x68>
    else
        return (val - middle) * (2000 - 1500) / (max - middle) + 1500;
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008af4:	fb03 f202 	mul.w	r2, r3, r2
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	1acb      	subs	r3, r1, r3
 8008afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	3b24      	subs	r3, #36	; 0x24
 8008b06:	b2db      	uxtb	r3, r3
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr
	...

08008b14 <nRF24_TransmitPacket>:
} nRF24_TXResult;

// Length of received payload

nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
    volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8008b20:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <nRF24_TransmitPacket+0x80>)
 8008b22:	60bb      	str	r3, [r7, #8]
    uint8_t status;
    nRF24_CE_L();
 8008b24:	f7ff ff8e 	bl	8008a44 <nRF24_CE_L>
    nRF24_WritePayload(pBuf, length);
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff fd3a 	bl	80085a6 <nRF24_WritePayload>
    nRF24_CE_H();
 8008b32:	f7ff ff93 	bl	8008a5c <nRF24_CE_H>

    do
    {
        status = nRF24_GetStatus();
 8008b36:	f7ff fcf8 	bl	800852a <nRF24_GetStatus>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]
        if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT))
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d105      	bne.n	8008b54 <nRF24_TransmitPacket+0x40>
        {
            break;
        }
    } while (wait--);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	1e5a      	subs	r2, r3, #1
 8008b4c:	60ba      	str	r2, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f1      	bne.n	8008b36 <nRF24_TransmitPacket+0x22>
 8008b52:	e000      	b.n	8008b56 <nRF24_TransmitPacket+0x42>
            break;
 8008b54:	bf00      	nop
    nRF24_CE_L();
 8008b56:	f7ff ff75 	bl	8008a44 <nRF24_CE_L>

    if (!wait)
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <nRF24_TransmitPacket+0x50>
        return nRF24_TX_TIMEOUT;
 8008b60:	2302      	movs	r3, #2
 8008b62:	e012      	b.n	8008b8a <nRF24_TransmitPacket+0x76>

    nRF24_ClearIRQFlags();
 8008b64:	f7ff fd0a 	bl	800857c <nRF24_ClearIRQFlags>

    if (status & nRF24_FLAG_MAX_RT)
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	f003 0310 	and.w	r3, r3, #16
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <nRF24_TransmitPacket+0x62>
        return nRF24_TX_MAXRT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e009      	b.n	8008b8a <nRF24_TransmitPacket+0x76>

    if (status & nRF24_FLAG_TX_DS)
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	f003 0320 	and.w	r3, r3, #32
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <nRF24_TransmitPacket+0x70>
        return nRF24_TX_SUCCESS;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e002      	b.n	8008b8a <nRF24_TransmitPacket+0x76>

    nRF24_FlushTX();
 8008b84:	f7ff fcea 	bl	800855c <nRF24_FlushTX>

    return nRF24_TX_ERROR;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	000fffff 	.word	0x000fffff

08008b98 <reset_controller>:
void reset_controller(void)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
    payload_packet.throttle = 0;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <reset_controller+0x30>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	701a      	strb	r2, [r3, #0]
    payload_packet.yaw = 127;
 8008ba2:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <reset_controller+0x30>)
 8008ba4:	227f      	movs	r2, #127	; 0x7f
 8008ba6:	705a      	strb	r2, [r3, #1]
    payload_packet.pitch = 127;
 8008ba8:	4b07      	ldr	r3, [pc, #28]	; (8008bc8 <reset_controller+0x30>)
 8008baa:	227f      	movs	r2, #127	; 0x7f
 8008bac:	709a      	strb	r2, [r3, #2]
    payload_packet.roll = 127;
 8008bae:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <reset_controller+0x30>)
 8008bb0:	227f      	movs	r2, #127	; 0x7f
 8008bb2:	70da      	strb	r2, [r3, #3]
    payload_packet.button = 0;
 8008bb4:	4b04      	ldr	r3, [pc, #16]	; (8008bc8 <reset_controller+0x30>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	711a      	strb	r2, [r3, #4]
    payload_packet.button_1 = 0;
 8008bba:	4b03      	ldr	r3, [pc, #12]	; (8008bc8 <reset_controller+0x30>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	715a      	strb	r2, [r3, #5]
}
 8008bc0:	bf00      	nop
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bc80      	pop	{r7}
 8008bc6:	4770      	bx	lr
 8008bc8:	20000378 	.word	0x20000378

08008bcc <runRadio>:

#endif // DEMO_TX_

int runRadio(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af02      	add	r7, sp, #8
#if(DEBUG_FC)
	printf("\r\nSTM32 is online.\r\n");
 8008bd2:	4853      	ldr	r0, [pc, #332]	; (8008d20 <runRadio+0x154>)
 8008bd4:	f000 fbd4 	bl	8009380 <puts>
#endif //debug
    nRF24_CE_L();
 8008bd8:	f7ff ff34 	bl	8008a44 <nRF24_CE_L>
#if(DEBUG_FC)
    printf("nRF24L01+ check: ");
 8008bdc:	4851      	ldr	r0, [pc, #324]	; (8008d24 <runRadio+0x158>)
 8008bde:	f000 fb49 	bl	8009274 <iprintf>
#endif
    if (!nRF24_Check())
 8008be2:	f7ff fb3d 	bl	8008260 <nRF24_Check>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d108      	bne.n	8008bfe <runRadio+0x32>
    {
        while (1)
        {
            Toggle_LED();
 8008bec:	f7ff ff4e 	bl	8008a8c <Toggle_LED>
            Delay_ms(50);
 8008bf0:	2032      	movs	r0, #50	; 0x32
 8008bf2:	f7ff ff3f 	bl	8008a74 <Delay_ms>
#if(DEBUG_FC)
            printf("FAIL\r\n");
 8008bf6:	484c      	ldr	r0, [pc, #304]	; (8008d28 <runRadio+0x15c>)
 8008bf8:	f000 fbc2 	bl	8009380 <puts>
            Toggle_LED();
 8008bfc:	e7f6      	b.n	8008bec <runRadio+0x20>
#endif
        }
    }
    nRF24_Init();
 8008bfe:	f7ff fae2 	bl	80081c6 <nRF24_Init>
#if(DEBUG_FC)
    printf("OK\r\n");
 8008c02:	484a      	ldr	r0, [pc, #296]	; (8008d2c <runRadio+0x160>)
 8008c04:	f000 fbbc 	bl	8009380 <puts>
#endif

	nRF24_CE_L();
 8008c08:	f7ff ff1c 	bl	8008a44 <nRF24_CE_L>

    /***************************************************************************/

#if (TX_SINGLE)

    nRF24_SetRFChannel(40);
 8008c0c:	2028      	movs	r0, #40	; 0x28
 8008c0e:	f7ff fbb6 	bl	800837e <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8008c12:	2008      	movs	r0, #8
 8008c14:	f7ff fc51 	bl	80084ba <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8008c18:	200c      	movs	r0, #12
 8008c1a:	f7ff fb8f 	bl	800833c <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 8008c1e:	2003      	movs	r0, #3
 8008c20:	f7ff fbd6 	bl	80083d0 <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 8008c24:	4942      	ldr	r1, [pc, #264]	; (8008d30 <runRadio+0x164>)
 8008c26:	2006      	movs	r0, #6
 8008c28:	f7ff fbe2 	bl	80083f0 <nRF24_SetAddr>
    nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR);
 8008c2c:	4940      	ldr	r1, [pc, #256]	; (8008d30 <runRadio+0x164>)
 8008c2e:	2000      	movs	r0, #0
 8008c30:	f7ff fbde 	bl	80083f0 <nRF24_SetAddr>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8008c34:	2006      	movs	r0, #6
 8008c36:	f7ff fc25 	bl	8008484 <nRF24_SetTXPower>
    nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 8008c3a:	210a      	movs	r1, #10
 8008c3c:	2009      	movs	r0, #9
 8008c3e:	f7ff fbac 	bl	800839a <nRF24_SetAutoRetr>
    nRF24_EnableAA(nRF24_PIPE0);
 8008c42:	2000      	movs	r0, #0
 8008c44:	f7ff fc54 	bl	80084f0 <nRF24_EnableAA>
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f7ff fb56 	bl	80082fa <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 8008c4e:	f7ff fc95 	bl	800857c <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8008c52:	2002      	movs	r0, #2
 8008c54:	f7ff fb32 	bl	80082bc <nRF24_SetPowerMode>

    payload_length = sizeof(payload_packet);
 8008c58:	4b36      	ldr	r3, [pc, #216]	; (8008d34 <runRadio+0x168>)
 8008c5a:	2206      	movs	r2, #6
 8008c5c:	701a      	strb	r2, [r3, #0]
    reset_controller();
 8008c5e:	f7ff ff9b 	bl	8008b98 <reset_controller>
    while (1)
    {

        payload_packet.throttle = convert_to_us(value[0], 450, 1585, 3620);
 8008c62:	4b35      	ldr	r3, [pc, #212]	; (8008d38 <runRadio+0x16c>)
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	f640 6324 	movw	r3, #3620	; 0xe24
 8008c6a:	f240 6231 	movw	r2, #1585	; 0x631
 8008c6e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8008c72:	f7ff ff15 	bl	8008aa0 <convert_to_us>
 8008c76:	4603      	mov	r3, r0
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4b30      	ldr	r3, [pc, #192]	; (8008d3c <runRadio+0x170>)
 8008c7c:	701a      	strb	r2, [r3, #0]
        payload_packet.roll = convert_to_us(value[1], 450, 1585, 3620);
 8008c7e:	4b2e      	ldr	r3, [pc, #184]	; (8008d38 <runRadio+0x16c>)
 8008c80:	6858      	ldr	r0, [r3, #4]
 8008c82:	f640 6324 	movw	r3, #3620	; 0xe24
 8008c86:	f240 6231 	movw	r2, #1585	; 0x631
 8008c8a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8008c8e:	f7ff ff07 	bl	8008aa0 <convert_to_us>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461a      	mov	r2, r3
 8008c96:	4b29      	ldr	r3, [pc, #164]	; (8008d3c <runRadio+0x170>)
 8008c98:	70da      	strb	r2, [r3, #3]
        payload_packet.pitch = convert_to_us(value[2], 450, 1585, 3620);
 8008c9a:	4b27      	ldr	r3, [pc, #156]	; (8008d38 <runRadio+0x16c>)
 8008c9c:	6898      	ldr	r0, [r3, #8]
 8008c9e:	f640 6324 	movw	r3, #3620	; 0xe24
 8008ca2:	f240 6231 	movw	r2, #1585	; 0x631
 8008ca6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8008caa:	f7ff fef9 	bl	8008aa0 <convert_to_us>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4b22      	ldr	r3, [pc, #136]	; (8008d3c <runRadio+0x170>)
 8008cb4:	709a      	strb	r2, [r3, #2]
        payload_packet.yaw = convert_to_us(value[3], 450, 1585, 3620);
 8008cb6:	4b20      	ldr	r3, [pc, #128]	; (8008d38 <runRadio+0x16c>)
 8008cb8:	68d8      	ldr	r0, [r3, #12]
 8008cba:	f640 6324 	movw	r3, #3620	; 0xe24
 8008cbe:	f240 6231 	movw	r2, #1585	; 0x631
 8008cc2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8008cc6:	f7ff feeb 	bl	8008aa0 <convert_to_us>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4b1b      	ldr	r3, [pc, #108]	; (8008d3c <runRadio+0x170>)
 8008cd0:	705a      	strb	r2, [r3, #1]
#if(DEBUG_FC)
        printf( "value: %u  %u  %u  %u\n", (size_t)payload_packet.throttle, (size_t)payload_packet.roll, (size_t)payload_packet.pitch, (size_t)payload_packet.yaw);
 8008cd2:	4b1a      	ldr	r3, [pc, #104]	; (8008d3c <runRadio+0x170>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4b18      	ldr	r3, [pc, #96]	; (8008d3c <runRadio+0x170>)
 8008cda:	78db      	ldrb	r3, [r3, #3]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	4b17      	ldr	r3, [pc, #92]	; (8008d3c <runRadio+0x170>)
 8008ce0:	789b      	ldrb	r3, [r3, #2]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	4b15      	ldr	r3, [pc, #84]	; (8008d3c <runRadio+0x170>)
 8008ce6:	785b      	ldrb	r3, [r3, #1]
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	4603      	mov	r3, r0
 8008cec:	4814      	ldr	r0, [pc, #80]	; (8008d40 <runRadio+0x174>)
 8008cee:	f000 fac1 	bl	8009274 <iprintf>
#endif //debug
        nRF24_TXResult result = nRF24_TransmitPacket((uint8_t *)&payload_packet, payload_length);
 8008cf2:	4b10      	ldr	r3, [pc, #64]	; (8008d34 <runRadio+0x168>)
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4810      	ldr	r0, [pc, #64]	; (8008d3c <runRadio+0x170>)
 8008cfa:	f7ff ff0b 	bl	8008b14 <nRF24_TransmitPacket>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	71fb      	strb	r3, [r7, #7]
        switch (result)
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d005      	beq.n	8008d14 <runRadio+0x148>
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d000      	beq.n	8008d0e <runRadio+0x142>
        case nRF24_TX_MAXRT:
            nRF24_ResetPLOS();
        case nRF24_TX_TIMEOUT:
        default:
            // todo: Bị lỗi khi truyền đi
            break;
 8008d0c:	e003      	b.n	8008d16 <runRadio+0x14a>
            nRF24_ResetPLOS();
 8008d0e:	f7ff fc14 	bl	800853a <nRF24_ResetPLOS>
            break;
 8008d12:	e000      	b.n	8008d16 <runRadio+0x14a>
            break;
 8008d14:	bf00      	nop
        }
        Delay_ms(10);
 8008d16:	200a      	movs	r0, #10
 8008d18:	f7ff feac 	bl	8008a74 <Delay_ms>
    {
 8008d1c:	e7a1      	b.n	8008c62 <runRadio+0x96>
 8008d1e:	bf00      	nop
 8008d20:	0800b774 	.word	0x0800b774
 8008d24:	0800b788 	.word	0x0800b788
 8008d28:	0800b79c 	.word	0x0800b79c
 8008d2c:	0800b7a4 	.word	0x0800b7a4
 8008d30:	0800b7c8 	.word	0x0800b7c8
 8008d34:	2000037e 	.word	0x2000037e
 8008d38:	20000210 	.word	0x20000210
 8008d3c:	20000378 	.word	0x20000378
 8008d40:	0800b7a8 	.word	0x0800b7a8

08008d44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <HAL_MspInit+0x5c>)
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	4a14      	ldr	r2, [pc, #80]	; (8008da0 <HAL_MspInit+0x5c>)
 8008d50:	f043 0301 	orr.w	r3, r3, #1
 8008d54:	6193      	str	r3, [r2, #24]
 8008d56:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <HAL_MspInit+0x5c>)
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	60bb      	str	r3, [r7, #8]
 8008d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d62:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <HAL_MspInit+0x5c>)
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	4a0e      	ldr	r2, [pc, #56]	; (8008da0 <HAL_MspInit+0x5c>)
 8008d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d6c:	61d3      	str	r3, [r2, #28]
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <HAL_MspInit+0x5c>)
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d76:	607b      	str	r3, [r7, #4]
 8008d78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <HAL_MspInit+0x60>)
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	4a04      	ldr	r2, [pc, #16]	; (8008da4 <HAL_MspInit+0x60>)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d96:	bf00      	nop
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bc80      	pop	{r7}
 8008d9e:	4770      	bx	lr
 8008da0:	40021000 	.word	0x40021000
 8008da4:	40010000 	.word	0x40010000

08008da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	; 0x28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008db0:	f107 0314 	add.w	r3, r7, #20
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	605a      	str	r2, [r3, #4]
 8008dba:	609a      	str	r2, [r3, #8]
 8008dbc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a1d      	ldr	r2, [pc, #116]	; (8008e38 <HAL_I2C_MspInit+0x90>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d132      	bne.n	8008e2e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dc8:	4b1c      	ldr	r3, [pc, #112]	; (8008e3c <HAL_I2C_MspInit+0x94>)
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	4a1b      	ldr	r2, [pc, #108]	; (8008e3c <HAL_I2C_MspInit+0x94>)
 8008dce:	f043 0308 	orr.w	r3, r3, #8
 8008dd2:	6193      	str	r3, [r2, #24]
 8008dd4:	4b19      	ldr	r3, [pc, #100]	; (8008e3c <HAL_I2C_MspInit+0x94>)
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	613b      	str	r3, [r7, #16]
 8008dde:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008de0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008de6:	2312      	movs	r3, #18
 8008de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008dea:	2303      	movs	r3, #3
 8008dec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dee:	f107 0314 	add.w	r3, r7, #20
 8008df2:	4619      	mov	r1, r3
 8008df4:	4812      	ldr	r0, [pc, #72]	; (8008e40 <HAL_I2C_MspInit+0x98>)
 8008df6:	f7f8 fb2b 	bl	8001450 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8008dfa:	4b12      	ldr	r3, [pc, #72]	; (8008e44 <HAL_I2C_MspInit+0x9c>)
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	f043 0302 	orr.w	r3, r3, #2
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e10:	4a0c      	ldr	r2, [pc, #48]	; (8008e44 <HAL_I2C_MspInit+0x9c>)
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008e16:	4b09      	ldr	r3, [pc, #36]	; (8008e3c <HAL_I2C_MspInit+0x94>)
 8008e18:	69db      	ldr	r3, [r3, #28]
 8008e1a:	4a08      	ldr	r2, [pc, #32]	; (8008e3c <HAL_I2C_MspInit+0x94>)
 8008e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e20:	61d3      	str	r3, [r2, #28]
 8008e22:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <HAL_I2C_MspInit+0x94>)
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008e2e:	bf00      	nop
 8008e30:	3728      	adds	r7, #40	; 0x28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	40005400 	.word	0x40005400
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	40010c00 	.word	0x40010c00
 8008e44:	40010000 	.word	0x40010000

08008e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e50:	f107 0310 	add.w	r3, r7, #16
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	605a      	str	r2, [r3, #4]
 8008e5a:	609a      	str	r2, [r3, #8]
 8008e5c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a1c      	ldr	r2, [pc, #112]	; (8008ed4 <HAL_SPI_MspInit+0x8c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d131      	bne.n	8008ecc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008e68:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <HAL_SPI_MspInit+0x90>)
 8008e6a:	69db      	ldr	r3, [r3, #28]
 8008e6c:	4a1a      	ldr	r2, [pc, #104]	; (8008ed8 <HAL_SPI_MspInit+0x90>)
 8008e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e72:	61d3      	str	r3, [r2, #28]
 8008e74:	4b18      	ldr	r3, [pc, #96]	; (8008ed8 <HAL_SPI_MspInit+0x90>)
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e80:	4b15      	ldr	r3, [pc, #84]	; (8008ed8 <HAL_SPI_MspInit+0x90>)
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	4a14      	ldr	r2, [pc, #80]	; (8008ed8 <HAL_SPI_MspInit+0x90>)
 8008e86:	f043 0308 	orr.w	r3, r3, #8
 8008e8a:	6193      	str	r3, [r2, #24]
 8008e8c:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <HAL_SPI_MspInit+0x90>)
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f003 0308 	and.w	r3, r3, #8
 8008e94:	60bb      	str	r3, [r7, #8]
 8008e96:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 8008e98:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8008e9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ea6:	f107 0310 	add.w	r3, r7, #16
 8008eaa:	4619      	mov	r1, r3
 8008eac:	480b      	ldr	r0, [pc, #44]	; (8008edc <HAL_SPI_MspInit+0x94>)
 8008eae:	f7f8 facf 	bl	8001450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8008eb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8008ec0:	f107 0310 	add.w	r3, r7, #16
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4805      	ldr	r0, [pc, #20]	; (8008edc <HAL_SPI_MspInit+0x94>)
 8008ec8:	f7f8 fac2 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008ecc:	bf00      	nop
 8008ece:	3720      	adds	r7, #32
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40003800 	.word	0x40003800
 8008ed8:	40021000 	.word	0x40021000
 8008edc:	40010c00 	.word	0x40010c00

08008ee0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a0d      	ldr	r2, [pc, #52]	; (8008f24 <HAL_TIM_PWM_MspInit+0x44>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d113      	bne.n	8008f1a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <HAL_TIM_PWM_MspInit+0x48>)
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	4a0c      	ldr	r2, [pc, #48]	; (8008f28 <HAL_TIM_PWM_MspInit+0x48>)
 8008ef8:	f043 0302 	orr.w	r3, r3, #2
 8008efc:	61d3      	str	r3, [r2, #28]
 8008efe:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <HAL_TIM_PWM_MspInit+0x48>)
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	201d      	movs	r0, #29
 8008f10:	f7f8 fa67 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008f14:	201d      	movs	r0, #29
 8008f16:	f7f8 fa80 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008f1a:	bf00      	nop
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	40000400 	.word	0x40000400
 8008f28:	40021000 	.word	0x40021000

08008f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f34:	f107 0310 	add.w	r3, r7, #16
 8008f38:	2200      	movs	r2, #0
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	605a      	str	r2, [r3, #4]
 8008f3e:	609a      	str	r2, [r3, #8]
 8008f40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a1b      	ldr	r2, [pc, #108]	; (8008fb4 <HAL_TIM_MspPostInit+0x88>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d12f      	bne.n	8008fac <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f4c:	4b1a      	ldr	r3, [pc, #104]	; (8008fb8 <HAL_TIM_MspPostInit+0x8c>)
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	4a19      	ldr	r2, [pc, #100]	; (8008fb8 <HAL_TIM_MspPostInit+0x8c>)
 8008f52:	f043 0304 	orr.w	r3, r3, #4
 8008f56:	6193      	str	r3, [r2, #24]
 8008f58:	4b17      	ldr	r3, [pc, #92]	; (8008fb8 <HAL_TIM_MspPostInit+0x8c>)
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f64:	4b14      	ldr	r3, [pc, #80]	; (8008fb8 <HAL_TIM_MspPostInit+0x8c>)
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	4a13      	ldr	r2, [pc, #76]	; (8008fb8 <HAL_TIM_MspPostInit+0x8c>)
 8008f6a:	f043 0308 	orr.w	r3, r3, #8
 8008f6e:	6193      	str	r3, [r2, #24]
 8008f70:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <HAL_TIM_MspPostInit+0x8c>)
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	60bb      	str	r3, [r7, #8]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM_SR_Pin|PWM_SL_Pin;
 8008f7c:	23c0      	movs	r3, #192	; 0xc0
 8008f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f80:	2302      	movs	r3, #2
 8008f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f84:	2302      	movs	r3, #2
 8008f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f88:	f107 0310 	add.w	r3, r7, #16
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	480b      	ldr	r0, [pc, #44]	; (8008fbc <HAL_TIM_MspPostInit+0x90>)
 8008f90:	f7f8 fa5e 	bl	8001450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8008f94:	2303      	movs	r3, #3
 8008f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f98:	2302      	movs	r3, #2
 8008f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fa0:	f107 0310 	add.w	r3, r7, #16
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4806      	ldr	r0, [pc, #24]	; (8008fc0 <HAL_TIM_MspPostInit+0x94>)
 8008fa8:	f7f8 fa52 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008fac:	bf00      	nop
 8008fae:	3720      	adds	r7, #32
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	40000400 	.word	0x40000400
 8008fb8:	40021000 	.word	0x40021000
 8008fbc:	40010800 	.word	0x40010800
 8008fc0:	40010c00 	.word	0x40010c00

08008fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fcc:	f107 0310 	add.w	r3, r7, #16
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	605a      	str	r2, [r3, #4]
 8008fd6:	609a      	str	r2, [r3, #8]
 8008fd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a1c      	ldr	r2, [pc, #112]	; (8009050 <HAL_UART_MspInit+0x8c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d131      	bne.n	8009048 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008fe4:	4b1b      	ldr	r3, [pc, #108]	; (8009054 <HAL_UART_MspInit+0x90>)
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	4a1a      	ldr	r2, [pc, #104]	; (8009054 <HAL_UART_MspInit+0x90>)
 8008fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fee:	6193      	str	r3, [r2, #24]
 8008ff0:	4b18      	ldr	r3, [pc, #96]	; (8009054 <HAL_UART_MspInit+0x90>)
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ffc:	4b15      	ldr	r3, [pc, #84]	; (8009054 <HAL_UART_MspInit+0x90>)
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	4a14      	ldr	r2, [pc, #80]	; (8009054 <HAL_UART_MspInit+0x90>)
 8009002:	f043 0304 	orr.w	r3, r3, #4
 8009006:	6193      	str	r3, [r2, #24]
 8009008:	4b12      	ldr	r3, [pc, #72]	; (8009054 <HAL_UART_MspInit+0x90>)
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	60bb      	str	r3, [r7, #8]
 8009012:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009018:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800901a:	2302      	movs	r3, #2
 800901c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800901e:	2303      	movs	r3, #3
 8009020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009022:	f107 0310 	add.w	r3, r7, #16
 8009026:	4619      	mov	r1, r3
 8009028:	480b      	ldr	r0, [pc, #44]	; (8009058 <HAL_UART_MspInit+0x94>)
 800902a:	f7f8 fa11 	bl	8001450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800902e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009034:	2300      	movs	r3, #0
 8009036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009038:	2300      	movs	r3, #0
 800903a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800903c:	f107 0310 	add.w	r3, r7, #16
 8009040:	4619      	mov	r1, r3
 8009042:	4805      	ldr	r0, [pc, #20]	; (8009058 <HAL_UART_MspInit+0x94>)
 8009044:	f7f8 fa04 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009048:	bf00      	nop
 800904a:	3720      	adds	r7, #32
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	40013800 	.word	0x40013800
 8009054:	40021000 	.word	0x40021000
 8009058:	40010800 	.word	0x40010800

0800905c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800905c:	b480      	push	{r7}
 800905e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009060:	bf00      	nop
 8009062:	46bd      	mov	sp, r7
 8009064:	bc80      	pop	{r7}
 8009066:	4770      	bx	lr

08009068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800906c:	e7fe      	b.n	800906c <HardFault_Handler+0x4>

0800906e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800906e:	b480      	push	{r7}
 8009070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009072:	e7fe      	b.n	8009072 <MemManage_Handler+0x4>

08009074 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009074:	b480      	push	{r7}
 8009076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009078:	e7fe      	b.n	8009078 <BusFault_Handler+0x4>

0800907a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800907a:	b480      	push	{r7}
 800907c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800907e:	e7fe      	b.n	800907e <UsageFault_Handler+0x4>

08009080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009084:	bf00      	nop
 8009086:	46bd      	mov	sp, r7
 8009088:	bc80      	pop	{r7}
 800908a:	4770      	bx	lr

0800908c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009090:	bf00      	nop
 8009092:	46bd      	mov	sp, r7
 8009094:	bc80      	pop	{r7}
 8009096:	4770      	bx	lr

08009098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800909c:	bf00      	nop
 800909e:	46bd      	mov	sp, r7
 80090a0:	bc80      	pop	{r7}
 80090a2:	4770      	bx	lr

080090a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80090a8:	f7f8 f884 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80090ac:	bf00      	nop
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80090b4:	4802      	ldr	r0, [pc, #8]	; (80090c0 <TIM3_IRQHandler+0x10>)
 80090b6:	f7fa fbab 	bl	8003810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80090ba:	bf00      	nop
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	20000154 	.word	0x20000154

080090c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090d0:	2300      	movs	r3, #0
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	e00a      	b.n	80090ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80090d6:	f3af 8000 	nop.w
 80090da:	4601      	mov	r1, r0
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	60ba      	str	r2, [r7, #8]
 80090e2:	b2ca      	uxtb	r2, r1
 80090e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	3301      	adds	r3, #1
 80090ea:	617b      	str	r3, [r7, #20]
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	dbf0      	blt.n	80090d6 <_read+0x12>
	}

return len;
 80090f4:	687b      	ldr	r3, [r7, #4]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <_close>:
	}
	return len;
}

int _close(int file)
{
 80090fe:	b480      	push	{r7}
 8009100:	b083      	sub	sp, #12
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
	return -1;
 8009106:	f04f 33ff 	mov.w	r3, #4294967295
}
 800910a:	4618      	mov	r0, r3
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr

08009114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009124:	605a      	str	r2, [r3, #4]
	return 0;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr

08009132 <_isatty>:

int _isatty(int file)
{
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
	return 1;
 800913a:	2301      	movs	r3, #1
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr

08009146 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	60f8      	str	r0, [r7, #12]
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	607a      	str	r2, [r7, #4]
	return 0;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	bc80      	pop	{r7}
 800915c:	4770      	bx	lr
	...

08009160 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009168:	4b11      	ldr	r3, [pc, #68]	; (80091b0 <_sbrk+0x50>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <_sbrk+0x16>
		heap_end = &end;
 8009170:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <_sbrk+0x50>)
 8009172:	4a10      	ldr	r2, [pc, #64]	; (80091b4 <_sbrk+0x54>)
 8009174:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009176:	4b0e      	ldr	r3, [pc, #56]	; (80091b0 <_sbrk+0x50>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800917c:	4b0c      	ldr	r3, [pc, #48]	; (80091b0 <_sbrk+0x50>)
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4413      	add	r3, r2
 8009184:	466a      	mov	r2, sp
 8009186:	4293      	cmp	r3, r2
 8009188:	d907      	bls.n	800919a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800918a:	f000 f841 	bl	8009210 <__errno>
 800918e:	4603      	mov	r3, r0
 8009190:	220c      	movs	r2, #12
 8009192:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8009194:	f04f 33ff 	mov.w	r3, #4294967295
 8009198:	e006      	b.n	80091a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800919a:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <_sbrk+0x50>)
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4413      	add	r3, r2
 80091a2:	4a03      	ldr	r2, [pc, #12]	; (80091b0 <_sbrk+0x50>)
 80091a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80091a6:	68fb      	ldr	r3, [r7, #12]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20000380 	.word	0x20000380
 80091b4:	20000398 	.word	0x20000398

080091b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80091bc:	bf00      	nop
 80091be:	46bd      	mov	sp, r7
 80091c0:	bc80      	pop	{r7}
 80091c2:	4770      	bx	lr

080091c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80091c4:	480c      	ldr	r0, [pc, #48]	; (80091f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80091c6:	490d      	ldr	r1, [pc, #52]	; (80091fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80091c8:	4a0d      	ldr	r2, [pc, #52]	; (8009200 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80091ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091cc:	e002      	b.n	80091d4 <LoopCopyDataInit>

080091ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091d2:	3304      	adds	r3, #4

080091d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091d8:	d3f9      	bcc.n	80091ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091da:	4a0a      	ldr	r2, [pc, #40]	; (8009204 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80091dc:	4c0a      	ldr	r4, [pc, #40]	; (8009208 <LoopFillZerobss+0x22>)
  movs r3, #0
 80091de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091e0:	e001      	b.n	80091e6 <LoopFillZerobss>

080091e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091e4:	3204      	adds	r2, #4

080091e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091e8:	d3fb      	bcc.n	80091e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80091ea:	f7ff ffe5 	bl	80091b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80091ee:	f000 f815 	bl	800921c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80091f2:	f7fb f96f 	bl	80044d4 <main>
  bx lr
 80091f6:	4770      	bx	lr
  ldr r0, =_sdata
 80091f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091fc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8009200:	0800b8f0 	.word	0x0800b8f0
  ldr r2, =_sbss
 8009204:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8009208:	20000394 	.word	0x20000394

0800920c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800920c:	e7fe      	b.n	800920c <ADC1_2_IRQHandler>
	...

08009210 <__errno>:
 8009210:	4b01      	ldr	r3, [pc, #4]	; (8009218 <__errno+0x8>)
 8009212:	6818      	ldr	r0, [r3, #0]
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	20000024 	.word	0x20000024

0800921c <__libc_init_array>:
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	2600      	movs	r6, #0
 8009220:	4d0c      	ldr	r5, [pc, #48]	; (8009254 <__libc_init_array+0x38>)
 8009222:	4c0d      	ldr	r4, [pc, #52]	; (8009258 <__libc_init_array+0x3c>)
 8009224:	1b64      	subs	r4, r4, r5
 8009226:	10a4      	asrs	r4, r4, #2
 8009228:	42a6      	cmp	r6, r4
 800922a:	d109      	bne.n	8009240 <__libc_init_array+0x24>
 800922c:	f002 fa7a 	bl	800b724 <_init>
 8009230:	2600      	movs	r6, #0
 8009232:	4d0a      	ldr	r5, [pc, #40]	; (800925c <__libc_init_array+0x40>)
 8009234:	4c0a      	ldr	r4, [pc, #40]	; (8009260 <__libc_init_array+0x44>)
 8009236:	1b64      	subs	r4, r4, r5
 8009238:	10a4      	asrs	r4, r4, #2
 800923a:	42a6      	cmp	r6, r4
 800923c:	d105      	bne.n	800924a <__libc_init_array+0x2e>
 800923e:	bd70      	pop	{r4, r5, r6, pc}
 8009240:	f855 3b04 	ldr.w	r3, [r5], #4
 8009244:	4798      	blx	r3
 8009246:	3601      	adds	r6, #1
 8009248:	e7ee      	b.n	8009228 <__libc_init_array+0xc>
 800924a:	f855 3b04 	ldr.w	r3, [r5], #4
 800924e:	4798      	blx	r3
 8009250:	3601      	adds	r6, #1
 8009252:	e7f2      	b.n	800923a <__libc_init_array+0x1e>
 8009254:	0800b8e8 	.word	0x0800b8e8
 8009258:	0800b8e8 	.word	0x0800b8e8
 800925c:	0800b8e8 	.word	0x0800b8e8
 8009260:	0800b8ec 	.word	0x0800b8ec

08009264 <memset>:
 8009264:	4603      	mov	r3, r0
 8009266:	4402      	add	r2, r0
 8009268:	4293      	cmp	r3, r2
 800926a:	d100      	bne.n	800926e <memset+0xa>
 800926c:	4770      	bx	lr
 800926e:	f803 1b01 	strb.w	r1, [r3], #1
 8009272:	e7f9      	b.n	8009268 <memset+0x4>

08009274 <iprintf>:
 8009274:	b40f      	push	{r0, r1, r2, r3}
 8009276:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <iprintf+0x2c>)
 8009278:	b513      	push	{r0, r1, r4, lr}
 800927a:	681c      	ldr	r4, [r3, #0]
 800927c:	b124      	cbz	r4, 8009288 <iprintf+0x14>
 800927e:	69a3      	ldr	r3, [r4, #24]
 8009280:	b913      	cbnz	r3, 8009288 <iprintf+0x14>
 8009282:	4620      	mov	r0, r4
 8009284:	f000 fa5a 	bl	800973c <__sinit>
 8009288:	ab05      	add	r3, sp, #20
 800928a:	4620      	mov	r0, r4
 800928c:	9a04      	ldr	r2, [sp, #16]
 800928e:	68a1      	ldr	r1, [r4, #8]
 8009290:	9301      	str	r3, [sp, #4]
 8009292:	f000 fc5d 	bl	8009b50 <_vfiprintf_r>
 8009296:	b002      	add	sp, #8
 8009298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800929c:	b004      	add	sp, #16
 800929e:	4770      	bx	lr
 80092a0:	20000024 	.word	0x20000024

080092a4 <_puts_r>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	460e      	mov	r6, r1
 80092a8:	4605      	mov	r5, r0
 80092aa:	b118      	cbz	r0, 80092b4 <_puts_r+0x10>
 80092ac:	6983      	ldr	r3, [r0, #24]
 80092ae:	b90b      	cbnz	r3, 80092b4 <_puts_r+0x10>
 80092b0:	f000 fa44 	bl	800973c <__sinit>
 80092b4:	69ab      	ldr	r3, [r5, #24]
 80092b6:	68ac      	ldr	r4, [r5, #8]
 80092b8:	b913      	cbnz	r3, 80092c0 <_puts_r+0x1c>
 80092ba:	4628      	mov	r0, r5
 80092bc:	f000 fa3e 	bl	800973c <__sinit>
 80092c0:	4b2c      	ldr	r3, [pc, #176]	; (8009374 <_puts_r+0xd0>)
 80092c2:	429c      	cmp	r4, r3
 80092c4:	d120      	bne.n	8009308 <_puts_r+0x64>
 80092c6:	686c      	ldr	r4, [r5, #4]
 80092c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092ca:	07db      	lsls	r3, r3, #31
 80092cc:	d405      	bmi.n	80092da <_puts_r+0x36>
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	0598      	lsls	r0, r3, #22
 80092d2:	d402      	bmi.n	80092da <_puts_r+0x36>
 80092d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092d6:	f000 facf 	bl	8009878 <__retarget_lock_acquire_recursive>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	0719      	lsls	r1, r3, #28
 80092de:	d51d      	bpl.n	800931c <_puts_r+0x78>
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	b1db      	cbz	r3, 800931c <_puts_r+0x78>
 80092e4:	3e01      	subs	r6, #1
 80092e6:	68a3      	ldr	r3, [r4, #8]
 80092e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092ec:	3b01      	subs	r3, #1
 80092ee:	60a3      	str	r3, [r4, #8]
 80092f0:	bb39      	cbnz	r1, 8009342 <_puts_r+0x9e>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	da38      	bge.n	8009368 <_puts_r+0xc4>
 80092f6:	4622      	mov	r2, r4
 80092f8:	210a      	movs	r1, #10
 80092fa:	4628      	mov	r0, r5
 80092fc:	f000 f848 	bl	8009390 <__swbuf_r>
 8009300:	3001      	adds	r0, #1
 8009302:	d011      	beq.n	8009328 <_puts_r+0x84>
 8009304:	250a      	movs	r5, #10
 8009306:	e011      	b.n	800932c <_puts_r+0x88>
 8009308:	4b1b      	ldr	r3, [pc, #108]	; (8009378 <_puts_r+0xd4>)
 800930a:	429c      	cmp	r4, r3
 800930c:	d101      	bne.n	8009312 <_puts_r+0x6e>
 800930e:	68ac      	ldr	r4, [r5, #8]
 8009310:	e7da      	b.n	80092c8 <_puts_r+0x24>
 8009312:	4b1a      	ldr	r3, [pc, #104]	; (800937c <_puts_r+0xd8>)
 8009314:	429c      	cmp	r4, r3
 8009316:	bf08      	it	eq
 8009318:	68ec      	ldreq	r4, [r5, #12]
 800931a:	e7d5      	b.n	80092c8 <_puts_r+0x24>
 800931c:	4621      	mov	r1, r4
 800931e:	4628      	mov	r0, r5
 8009320:	f000 f888 	bl	8009434 <__swsetup_r>
 8009324:	2800      	cmp	r0, #0
 8009326:	d0dd      	beq.n	80092e4 <_puts_r+0x40>
 8009328:	f04f 35ff 	mov.w	r5, #4294967295
 800932c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800932e:	07da      	lsls	r2, r3, #31
 8009330:	d405      	bmi.n	800933e <_puts_r+0x9a>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	059b      	lsls	r3, r3, #22
 8009336:	d402      	bmi.n	800933e <_puts_r+0x9a>
 8009338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933a:	f000 fa9e 	bl	800987a <__retarget_lock_release_recursive>
 800933e:	4628      	mov	r0, r5
 8009340:	bd70      	pop	{r4, r5, r6, pc}
 8009342:	2b00      	cmp	r3, #0
 8009344:	da04      	bge.n	8009350 <_puts_r+0xac>
 8009346:	69a2      	ldr	r2, [r4, #24]
 8009348:	429a      	cmp	r2, r3
 800934a:	dc06      	bgt.n	800935a <_puts_r+0xb6>
 800934c:	290a      	cmp	r1, #10
 800934e:	d004      	beq.n	800935a <_puts_r+0xb6>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	6022      	str	r2, [r4, #0]
 8009356:	7019      	strb	r1, [r3, #0]
 8009358:	e7c5      	b.n	80092e6 <_puts_r+0x42>
 800935a:	4622      	mov	r2, r4
 800935c:	4628      	mov	r0, r5
 800935e:	f000 f817 	bl	8009390 <__swbuf_r>
 8009362:	3001      	adds	r0, #1
 8009364:	d1bf      	bne.n	80092e6 <_puts_r+0x42>
 8009366:	e7df      	b.n	8009328 <_puts_r+0x84>
 8009368:	250a      	movs	r5, #10
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	6022      	str	r2, [r4, #0]
 8009370:	701d      	strb	r5, [r3, #0]
 8009372:	e7db      	b.n	800932c <_puts_r+0x88>
 8009374:	0800b808 	.word	0x0800b808
 8009378:	0800b828 	.word	0x0800b828
 800937c:	0800b7e8 	.word	0x0800b7e8

08009380 <puts>:
 8009380:	4b02      	ldr	r3, [pc, #8]	; (800938c <puts+0xc>)
 8009382:	4601      	mov	r1, r0
 8009384:	6818      	ldr	r0, [r3, #0]
 8009386:	f7ff bf8d 	b.w	80092a4 <_puts_r>
 800938a:	bf00      	nop
 800938c:	20000024 	.word	0x20000024

08009390 <__swbuf_r>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	460e      	mov	r6, r1
 8009394:	4614      	mov	r4, r2
 8009396:	4605      	mov	r5, r0
 8009398:	b118      	cbz	r0, 80093a2 <__swbuf_r+0x12>
 800939a:	6983      	ldr	r3, [r0, #24]
 800939c:	b90b      	cbnz	r3, 80093a2 <__swbuf_r+0x12>
 800939e:	f000 f9cd 	bl	800973c <__sinit>
 80093a2:	4b21      	ldr	r3, [pc, #132]	; (8009428 <__swbuf_r+0x98>)
 80093a4:	429c      	cmp	r4, r3
 80093a6:	d12b      	bne.n	8009400 <__swbuf_r+0x70>
 80093a8:	686c      	ldr	r4, [r5, #4]
 80093aa:	69a3      	ldr	r3, [r4, #24]
 80093ac:	60a3      	str	r3, [r4, #8]
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	071a      	lsls	r2, r3, #28
 80093b2:	d52f      	bpl.n	8009414 <__swbuf_r+0x84>
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	b36b      	cbz	r3, 8009414 <__swbuf_r+0x84>
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	6820      	ldr	r0, [r4, #0]
 80093bc:	b2f6      	uxtb	r6, r6
 80093be:	1ac0      	subs	r0, r0, r3
 80093c0:	6963      	ldr	r3, [r4, #20]
 80093c2:	4637      	mov	r7, r6
 80093c4:	4283      	cmp	r3, r0
 80093c6:	dc04      	bgt.n	80093d2 <__swbuf_r+0x42>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f922 	bl	8009614 <_fflush_r>
 80093d0:	bb30      	cbnz	r0, 8009420 <__swbuf_r+0x90>
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	3001      	adds	r0, #1
 80093d6:	3b01      	subs	r3, #1
 80093d8:	60a3      	str	r3, [r4, #8]
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	701e      	strb	r6, [r3, #0]
 80093e2:	6963      	ldr	r3, [r4, #20]
 80093e4:	4283      	cmp	r3, r0
 80093e6:	d004      	beq.n	80093f2 <__swbuf_r+0x62>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	07db      	lsls	r3, r3, #31
 80093ec:	d506      	bpl.n	80093fc <__swbuf_r+0x6c>
 80093ee:	2e0a      	cmp	r6, #10
 80093f0:	d104      	bne.n	80093fc <__swbuf_r+0x6c>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f000 f90d 	bl	8009614 <_fflush_r>
 80093fa:	b988      	cbnz	r0, 8009420 <__swbuf_r+0x90>
 80093fc:	4638      	mov	r0, r7
 80093fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009400:	4b0a      	ldr	r3, [pc, #40]	; (800942c <__swbuf_r+0x9c>)
 8009402:	429c      	cmp	r4, r3
 8009404:	d101      	bne.n	800940a <__swbuf_r+0x7a>
 8009406:	68ac      	ldr	r4, [r5, #8]
 8009408:	e7cf      	b.n	80093aa <__swbuf_r+0x1a>
 800940a:	4b09      	ldr	r3, [pc, #36]	; (8009430 <__swbuf_r+0xa0>)
 800940c:	429c      	cmp	r4, r3
 800940e:	bf08      	it	eq
 8009410:	68ec      	ldreq	r4, [r5, #12]
 8009412:	e7ca      	b.n	80093aa <__swbuf_r+0x1a>
 8009414:	4621      	mov	r1, r4
 8009416:	4628      	mov	r0, r5
 8009418:	f000 f80c 	bl	8009434 <__swsetup_r>
 800941c:	2800      	cmp	r0, #0
 800941e:	d0cb      	beq.n	80093b8 <__swbuf_r+0x28>
 8009420:	f04f 37ff 	mov.w	r7, #4294967295
 8009424:	e7ea      	b.n	80093fc <__swbuf_r+0x6c>
 8009426:	bf00      	nop
 8009428:	0800b808 	.word	0x0800b808
 800942c:	0800b828 	.word	0x0800b828
 8009430:	0800b7e8 	.word	0x0800b7e8

08009434 <__swsetup_r>:
 8009434:	4b32      	ldr	r3, [pc, #200]	; (8009500 <__swsetup_r+0xcc>)
 8009436:	b570      	push	{r4, r5, r6, lr}
 8009438:	681d      	ldr	r5, [r3, #0]
 800943a:	4606      	mov	r6, r0
 800943c:	460c      	mov	r4, r1
 800943e:	b125      	cbz	r5, 800944a <__swsetup_r+0x16>
 8009440:	69ab      	ldr	r3, [r5, #24]
 8009442:	b913      	cbnz	r3, 800944a <__swsetup_r+0x16>
 8009444:	4628      	mov	r0, r5
 8009446:	f000 f979 	bl	800973c <__sinit>
 800944a:	4b2e      	ldr	r3, [pc, #184]	; (8009504 <__swsetup_r+0xd0>)
 800944c:	429c      	cmp	r4, r3
 800944e:	d10f      	bne.n	8009470 <__swsetup_r+0x3c>
 8009450:	686c      	ldr	r4, [r5, #4]
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009458:	0719      	lsls	r1, r3, #28
 800945a:	d42c      	bmi.n	80094b6 <__swsetup_r+0x82>
 800945c:	06dd      	lsls	r5, r3, #27
 800945e:	d411      	bmi.n	8009484 <__swsetup_r+0x50>
 8009460:	2309      	movs	r3, #9
 8009462:	6033      	str	r3, [r6, #0]
 8009464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	e03e      	b.n	80094ee <__swsetup_r+0xba>
 8009470:	4b25      	ldr	r3, [pc, #148]	; (8009508 <__swsetup_r+0xd4>)
 8009472:	429c      	cmp	r4, r3
 8009474:	d101      	bne.n	800947a <__swsetup_r+0x46>
 8009476:	68ac      	ldr	r4, [r5, #8]
 8009478:	e7eb      	b.n	8009452 <__swsetup_r+0x1e>
 800947a:	4b24      	ldr	r3, [pc, #144]	; (800950c <__swsetup_r+0xd8>)
 800947c:	429c      	cmp	r4, r3
 800947e:	bf08      	it	eq
 8009480:	68ec      	ldreq	r4, [r5, #12]
 8009482:	e7e6      	b.n	8009452 <__swsetup_r+0x1e>
 8009484:	0758      	lsls	r0, r3, #29
 8009486:	d512      	bpl.n	80094ae <__swsetup_r+0x7a>
 8009488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800948a:	b141      	cbz	r1, 800949e <__swsetup_r+0x6a>
 800948c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009490:	4299      	cmp	r1, r3
 8009492:	d002      	beq.n	800949a <__swsetup_r+0x66>
 8009494:	4630      	mov	r0, r6
 8009496:	f000 fa57 	bl	8009948 <_free_r>
 800949a:	2300      	movs	r3, #0
 800949c:	6363      	str	r3, [r4, #52]	; 0x34
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094a4:	81a3      	strh	r3, [r4, #12]
 80094a6:	2300      	movs	r3, #0
 80094a8:	6063      	str	r3, [r4, #4]
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f043 0308 	orr.w	r3, r3, #8
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	b94b      	cbnz	r3, 80094ce <__swsetup_r+0x9a>
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094c4:	d003      	beq.n	80094ce <__swsetup_r+0x9a>
 80094c6:	4621      	mov	r1, r4
 80094c8:	4630      	mov	r0, r6
 80094ca:	f000 f9fd 	bl	80098c8 <__smakebuf_r>
 80094ce:	89a0      	ldrh	r0, [r4, #12]
 80094d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094d4:	f010 0301 	ands.w	r3, r0, #1
 80094d8:	d00a      	beq.n	80094f0 <__swsetup_r+0xbc>
 80094da:	2300      	movs	r3, #0
 80094dc:	60a3      	str	r3, [r4, #8]
 80094de:	6963      	ldr	r3, [r4, #20]
 80094e0:	425b      	negs	r3, r3
 80094e2:	61a3      	str	r3, [r4, #24]
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	b943      	cbnz	r3, 80094fa <__swsetup_r+0xc6>
 80094e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094ec:	d1ba      	bne.n	8009464 <__swsetup_r+0x30>
 80094ee:	bd70      	pop	{r4, r5, r6, pc}
 80094f0:	0781      	lsls	r1, r0, #30
 80094f2:	bf58      	it	pl
 80094f4:	6963      	ldrpl	r3, [r4, #20]
 80094f6:	60a3      	str	r3, [r4, #8]
 80094f8:	e7f4      	b.n	80094e4 <__swsetup_r+0xb0>
 80094fa:	2000      	movs	r0, #0
 80094fc:	e7f7      	b.n	80094ee <__swsetup_r+0xba>
 80094fe:	bf00      	nop
 8009500:	20000024 	.word	0x20000024
 8009504:	0800b808 	.word	0x0800b808
 8009508:	0800b828 	.word	0x0800b828
 800950c:	0800b7e8 	.word	0x0800b7e8

08009510 <__sflush_r>:
 8009510:	898a      	ldrh	r2, [r1, #12]
 8009512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009514:	4605      	mov	r5, r0
 8009516:	0710      	lsls	r0, r2, #28
 8009518:	460c      	mov	r4, r1
 800951a:	d457      	bmi.n	80095cc <__sflush_r+0xbc>
 800951c:	684b      	ldr	r3, [r1, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	dc04      	bgt.n	800952c <__sflush_r+0x1c>
 8009522:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009524:	2b00      	cmp	r3, #0
 8009526:	dc01      	bgt.n	800952c <__sflush_r+0x1c>
 8009528:	2000      	movs	r0, #0
 800952a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800952e:	2e00      	cmp	r6, #0
 8009530:	d0fa      	beq.n	8009528 <__sflush_r+0x18>
 8009532:	2300      	movs	r3, #0
 8009534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009538:	682f      	ldr	r7, [r5, #0]
 800953a:	602b      	str	r3, [r5, #0]
 800953c:	d032      	beq.n	80095a4 <__sflush_r+0x94>
 800953e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	075a      	lsls	r2, r3, #29
 8009544:	d505      	bpl.n	8009552 <__sflush_r+0x42>
 8009546:	6863      	ldr	r3, [r4, #4]
 8009548:	1ac0      	subs	r0, r0, r3
 800954a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800954c:	b10b      	cbz	r3, 8009552 <__sflush_r+0x42>
 800954e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009550:	1ac0      	subs	r0, r0, r3
 8009552:	2300      	movs	r3, #0
 8009554:	4602      	mov	r2, r0
 8009556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009558:	4628      	mov	r0, r5
 800955a:	6a21      	ldr	r1, [r4, #32]
 800955c:	47b0      	blx	r6
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	d106      	bne.n	8009572 <__sflush_r+0x62>
 8009564:	6829      	ldr	r1, [r5, #0]
 8009566:	291d      	cmp	r1, #29
 8009568:	d82c      	bhi.n	80095c4 <__sflush_r+0xb4>
 800956a:	4a29      	ldr	r2, [pc, #164]	; (8009610 <__sflush_r+0x100>)
 800956c:	40ca      	lsrs	r2, r1
 800956e:	07d6      	lsls	r6, r2, #31
 8009570:	d528      	bpl.n	80095c4 <__sflush_r+0xb4>
 8009572:	2200      	movs	r2, #0
 8009574:	6062      	str	r2, [r4, #4]
 8009576:	6922      	ldr	r2, [r4, #16]
 8009578:	04d9      	lsls	r1, r3, #19
 800957a:	6022      	str	r2, [r4, #0]
 800957c:	d504      	bpl.n	8009588 <__sflush_r+0x78>
 800957e:	1c42      	adds	r2, r0, #1
 8009580:	d101      	bne.n	8009586 <__sflush_r+0x76>
 8009582:	682b      	ldr	r3, [r5, #0]
 8009584:	b903      	cbnz	r3, 8009588 <__sflush_r+0x78>
 8009586:	6560      	str	r0, [r4, #84]	; 0x54
 8009588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800958a:	602f      	str	r7, [r5, #0]
 800958c:	2900      	cmp	r1, #0
 800958e:	d0cb      	beq.n	8009528 <__sflush_r+0x18>
 8009590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009594:	4299      	cmp	r1, r3
 8009596:	d002      	beq.n	800959e <__sflush_r+0x8e>
 8009598:	4628      	mov	r0, r5
 800959a:	f000 f9d5 	bl	8009948 <_free_r>
 800959e:	2000      	movs	r0, #0
 80095a0:	6360      	str	r0, [r4, #52]	; 0x34
 80095a2:	e7c2      	b.n	800952a <__sflush_r+0x1a>
 80095a4:	6a21      	ldr	r1, [r4, #32]
 80095a6:	2301      	movs	r3, #1
 80095a8:	4628      	mov	r0, r5
 80095aa:	47b0      	blx	r6
 80095ac:	1c41      	adds	r1, r0, #1
 80095ae:	d1c7      	bne.n	8009540 <__sflush_r+0x30>
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0c4      	beq.n	8009540 <__sflush_r+0x30>
 80095b6:	2b1d      	cmp	r3, #29
 80095b8:	d001      	beq.n	80095be <__sflush_r+0xae>
 80095ba:	2b16      	cmp	r3, #22
 80095bc:	d101      	bne.n	80095c2 <__sflush_r+0xb2>
 80095be:	602f      	str	r7, [r5, #0]
 80095c0:	e7b2      	b.n	8009528 <__sflush_r+0x18>
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c8:	81a3      	strh	r3, [r4, #12]
 80095ca:	e7ae      	b.n	800952a <__sflush_r+0x1a>
 80095cc:	690f      	ldr	r7, [r1, #16]
 80095ce:	2f00      	cmp	r7, #0
 80095d0:	d0aa      	beq.n	8009528 <__sflush_r+0x18>
 80095d2:	0793      	lsls	r3, r2, #30
 80095d4:	bf18      	it	ne
 80095d6:	2300      	movne	r3, #0
 80095d8:	680e      	ldr	r6, [r1, #0]
 80095da:	bf08      	it	eq
 80095dc:	694b      	ldreq	r3, [r1, #20]
 80095de:	1bf6      	subs	r6, r6, r7
 80095e0:	600f      	str	r7, [r1, #0]
 80095e2:	608b      	str	r3, [r1, #8]
 80095e4:	2e00      	cmp	r6, #0
 80095e6:	dd9f      	ble.n	8009528 <__sflush_r+0x18>
 80095e8:	4633      	mov	r3, r6
 80095ea:	463a      	mov	r2, r7
 80095ec:	4628      	mov	r0, r5
 80095ee:	6a21      	ldr	r1, [r4, #32]
 80095f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80095f4:	47e0      	blx	ip
 80095f6:	2800      	cmp	r0, #0
 80095f8:	dc06      	bgt.n	8009608 <__sflush_r+0xf8>
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	e790      	b.n	800952a <__sflush_r+0x1a>
 8009608:	4407      	add	r7, r0
 800960a:	1a36      	subs	r6, r6, r0
 800960c:	e7ea      	b.n	80095e4 <__sflush_r+0xd4>
 800960e:	bf00      	nop
 8009610:	20400001 	.word	0x20400001

08009614 <_fflush_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	690b      	ldr	r3, [r1, #16]
 8009618:	4605      	mov	r5, r0
 800961a:	460c      	mov	r4, r1
 800961c:	b913      	cbnz	r3, 8009624 <_fflush_r+0x10>
 800961e:	2500      	movs	r5, #0
 8009620:	4628      	mov	r0, r5
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	b118      	cbz	r0, 800962e <_fflush_r+0x1a>
 8009626:	6983      	ldr	r3, [r0, #24]
 8009628:	b90b      	cbnz	r3, 800962e <_fflush_r+0x1a>
 800962a:	f000 f887 	bl	800973c <__sinit>
 800962e:	4b14      	ldr	r3, [pc, #80]	; (8009680 <_fflush_r+0x6c>)
 8009630:	429c      	cmp	r4, r3
 8009632:	d11b      	bne.n	800966c <_fflush_r+0x58>
 8009634:	686c      	ldr	r4, [r5, #4]
 8009636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0ef      	beq.n	800961e <_fflush_r+0xa>
 800963e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009640:	07d0      	lsls	r0, r2, #31
 8009642:	d404      	bmi.n	800964e <_fflush_r+0x3a>
 8009644:	0599      	lsls	r1, r3, #22
 8009646:	d402      	bmi.n	800964e <_fflush_r+0x3a>
 8009648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800964a:	f000 f915 	bl	8009878 <__retarget_lock_acquire_recursive>
 800964e:	4628      	mov	r0, r5
 8009650:	4621      	mov	r1, r4
 8009652:	f7ff ff5d 	bl	8009510 <__sflush_r>
 8009656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009658:	4605      	mov	r5, r0
 800965a:	07da      	lsls	r2, r3, #31
 800965c:	d4e0      	bmi.n	8009620 <_fflush_r+0xc>
 800965e:	89a3      	ldrh	r3, [r4, #12]
 8009660:	059b      	lsls	r3, r3, #22
 8009662:	d4dd      	bmi.n	8009620 <_fflush_r+0xc>
 8009664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009666:	f000 f908 	bl	800987a <__retarget_lock_release_recursive>
 800966a:	e7d9      	b.n	8009620 <_fflush_r+0xc>
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <_fflush_r+0x70>)
 800966e:	429c      	cmp	r4, r3
 8009670:	d101      	bne.n	8009676 <_fflush_r+0x62>
 8009672:	68ac      	ldr	r4, [r5, #8]
 8009674:	e7df      	b.n	8009636 <_fflush_r+0x22>
 8009676:	4b04      	ldr	r3, [pc, #16]	; (8009688 <_fflush_r+0x74>)
 8009678:	429c      	cmp	r4, r3
 800967a:	bf08      	it	eq
 800967c:	68ec      	ldreq	r4, [r5, #12]
 800967e:	e7da      	b.n	8009636 <_fflush_r+0x22>
 8009680:	0800b808 	.word	0x0800b808
 8009684:	0800b828 	.word	0x0800b828
 8009688:	0800b7e8 	.word	0x0800b7e8

0800968c <std>:
 800968c:	2300      	movs	r3, #0
 800968e:	b510      	push	{r4, lr}
 8009690:	4604      	mov	r4, r0
 8009692:	e9c0 3300 	strd	r3, r3, [r0]
 8009696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800969a:	6083      	str	r3, [r0, #8]
 800969c:	8181      	strh	r1, [r0, #12]
 800969e:	6643      	str	r3, [r0, #100]	; 0x64
 80096a0:	81c2      	strh	r2, [r0, #14]
 80096a2:	6183      	str	r3, [r0, #24]
 80096a4:	4619      	mov	r1, r3
 80096a6:	2208      	movs	r2, #8
 80096a8:	305c      	adds	r0, #92	; 0x5c
 80096aa:	f7ff fddb 	bl	8009264 <memset>
 80096ae:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <std+0x38>)
 80096b0:	6224      	str	r4, [r4, #32]
 80096b2:	6263      	str	r3, [r4, #36]	; 0x24
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <std+0x3c>)
 80096b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80096b8:	4b04      	ldr	r3, [pc, #16]	; (80096cc <std+0x40>)
 80096ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096bc:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <std+0x44>)
 80096be:	6323      	str	r3, [r4, #48]	; 0x30
 80096c0:	bd10      	pop	{r4, pc}
 80096c2:	bf00      	nop
 80096c4:	0800a0fd 	.word	0x0800a0fd
 80096c8:	0800a11f 	.word	0x0800a11f
 80096cc:	0800a157 	.word	0x0800a157
 80096d0:	0800a17b 	.word	0x0800a17b

080096d4 <_cleanup_r>:
 80096d4:	4901      	ldr	r1, [pc, #4]	; (80096dc <_cleanup_r+0x8>)
 80096d6:	f000 b8af 	b.w	8009838 <_fwalk_reent>
 80096da:	bf00      	nop
 80096dc:	08009615 	.word	0x08009615

080096e0 <__sfmoreglue>:
 80096e0:	2268      	movs	r2, #104	; 0x68
 80096e2:	b570      	push	{r4, r5, r6, lr}
 80096e4:	1e4d      	subs	r5, r1, #1
 80096e6:	4355      	muls	r5, r2
 80096e8:	460e      	mov	r6, r1
 80096ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096ee:	f000 f993 	bl	8009a18 <_malloc_r>
 80096f2:	4604      	mov	r4, r0
 80096f4:	b140      	cbz	r0, 8009708 <__sfmoreglue+0x28>
 80096f6:	2100      	movs	r1, #0
 80096f8:	e9c0 1600 	strd	r1, r6, [r0]
 80096fc:	300c      	adds	r0, #12
 80096fe:	60a0      	str	r0, [r4, #8]
 8009700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009704:	f7ff fdae 	bl	8009264 <memset>
 8009708:	4620      	mov	r0, r4
 800970a:	bd70      	pop	{r4, r5, r6, pc}

0800970c <__sfp_lock_acquire>:
 800970c:	4801      	ldr	r0, [pc, #4]	; (8009714 <__sfp_lock_acquire+0x8>)
 800970e:	f000 b8b3 	b.w	8009878 <__retarget_lock_acquire_recursive>
 8009712:	bf00      	nop
 8009714:	20000385 	.word	0x20000385

08009718 <__sfp_lock_release>:
 8009718:	4801      	ldr	r0, [pc, #4]	; (8009720 <__sfp_lock_release+0x8>)
 800971a:	f000 b8ae 	b.w	800987a <__retarget_lock_release_recursive>
 800971e:	bf00      	nop
 8009720:	20000385 	.word	0x20000385

08009724 <__sinit_lock_acquire>:
 8009724:	4801      	ldr	r0, [pc, #4]	; (800972c <__sinit_lock_acquire+0x8>)
 8009726:	f000 b8a7 	b.w	8009878 <__retarget_lock_acquire_recursive>
 800972a:	bf00      	nop
 800972c:	20000386 	.word	0x20000386

08009730 <__sinit_lock_release>:
 8009730:	4801      	ldr	r0, [pc, #4]	; (8009738 <__sinit_lock_release+0x8>)
 8009732:	f000 b8a2 	b.w	800987a <__retarget_lock_release_recursive>
 8009736:	bf00      	nop
 8009738:	20000386 	.word	0x20000386

0800973c <__sinit>:
 800973c:	b510      	push	{r4, lr}
 800973e:	4604      	mov	r4, r0
 8009740:	f7ff fff0 	bl	8009724 <__sinit_lock_acquire>
 8009744:	69a3      	ldr	r3, [r4, #24]
 8009746:	b11b      	cbz	r3, 8009750 <__sinit+0x14>
 8009748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800974c:	f7ff bff0 	b.w	8009730 <__sinit_lock_release>
 8009750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009754:	6523      	str	r3, [r4, #80]	; 0x50
 8009756:	4b13      	ldr	r3, [pc, #76]	; (80097a4 <__sinit+0x68>)
 8009758:	4a13      	ldr	r2, [pc, #76]	; (80097a8 <__sinit+0x6c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	62a2      	str	r2, [r4, #40]	; 0x28
 800975e:	42a3      	cmp	r3, r4
 8009760:	bf08      	it	eq
 8009762:	2301      	moveq	r3, #1
 8009764:	4620      	mov	r0, r4
 8009766:	bf08      	it	eq
 8009768:	61a3      	streq	r3, [r4, #24]
 800976a:	f000 f81f 	bl	80097ac <__sfp>
 800976e:	6060      	str	r0, [r4, #4]
 8009770:	4620      	mov	r0, r4
 8009772:	f000 f81b 	bl	80097ac <__sfp>
 8009776:	60a0      	str	r0, [r4, #8]
 8009778:	4620      	mov	r0, r4
 800977a:	f000 f817 	bl	80097ac <__sfp>
 800977e:	2200      	movs	r2, #0
 8009780:	2104      	movs	r1, #4
 8009782:	60e0      	str	r0, [r4, #12]
 8009784:	6860      	ldr	r0, [r4, #4]
 8009786:	f7ff ff81 	bl	800968c <std>
 800978a:	2201      	movs	r2, #1
 800978c:	2109      	movs	r1, #9
 800978e:	68a0      	ldr	r0, [r4, #8]
 8009790:	f7ff ff7c 	bl	800968c <std>
 8009794:	2202      	movs	r2, #2
 8009796:	2112      	movs	r1, #18
 8009798:	68e0      	ldr	r0, [r4, #12]
 800979a:	f7ff ff77 	bl	800968c <std>
 800979e:	2301      	movs	r3, #1
 80097a0:	61a3      	str	r3, [r4, #24]
 80097a2:	e7d1      	b.n	8009748 <__sinit+0xc>
 80097a4:	0800b7e4 	.word	0x0800b7e4
 80097a8:	080096d5 	.word	0x080096d5

080097ac <__sfp>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	4607      	mov	r7, r0
 80097b0:	f7ff ffac 	bl	800970c <__sfp_lock_acquire>
 80097b4:	4b1e      	ldr	r3, [pc, #120]	; (8009830 <__sfp+0x84>)
 80097b6:	681e      	ldr	r6, [r3, #0]
 80097b8:	69b3      	ldr	r3, [r6, #24]
 80097ba:	b913      	cbnz	r3, 80097c2 <__sfp+0x16>
 80097bc:	4630      	mov	r0, r6
 80097be:	f7ff ffbd 	bl	800973c <__sinit>
 80097c2:	3648      	adds	r6, #72	; 0x48
 80097c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	d503      	bpl.n	80097d4 <__sfp+0x28>
 80097cc:	6833      	ldr	r3, [r6, #0]
 80097ce:	b30b      	cbz	r3, 8009814 <__sfp+0x68>
 80097d0:	6836      	ldr	r6, [r6, #0]
 80097d2:	e7f7      	b.n	80097c4 <__sfp+0x18>
 80097d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097d8:	b9d5      	cbnz	r5, 8009810 <__sfp+0x64>
 80097da:	4b16      	ldr	r3, [pc, #88]	; (8009834 <__sfp+0x88>)
 80097dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097e0:	60e3      	str	r3, [r4, #12]
 80097e2:	6665      	str	r5, [r4, #100]	; 0x64
 80097e4:	f000 f847 	bl	8009876 <__retarget_lock_init_recursive>
 80097e8:	f7ff ff96 	bl	8009718 <__sfp_lock_release>
 80097ec:	2208      	movs	r2, #8
 80097ee:	4629      	mov	r1, r5
 80097f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80097f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80097f8:	6025      	str	r5, [r4, #0]
 80097fa:	61a5      	str	r5, [r4, #24]
 80097fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009800:	f7ff fd30 	bl	8009264 <memset>
 8009804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800980c:	4620      	mov	r0, r4
 800980e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009810:	3468      	adds	r4, #104	; 0x68
 8009812:	e7d9      	b.n	80097c8 <__sfp+0x1c>
 8009814:	2104      	movs	r1, #4
 8009816:	4638      	mov	r0, r7
 8009818:	f7ff ff62 	bl	80096e0 <__sfmoreglue>
 800981c:	4604      	mov	r4, r0
 800981e:	6030      	str	r0, [r6, #0]
 8009820:	2800      	cmp	r0, #0
 8009822:	d1d5      	bne.n	80097d0 <__sfp+0x24>
 8009824:	f7ff ff78 	bl	8009718 <__sfp_lock_release>
 8009828:	230c      	movs	r3, #12
 800982a:	603b      	str	r3, [r7, #0]
 800982c:	e7ee      	b.n	800980c <__sfp+0x60>
 800982e:	bf00      	nop
 8009830:	0800b7e4 	.word	0x0800b7e4
 8009834:	ffff0001 	.word	0xffff0001

08009838 <_fwalk_reent>:
 8009838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800983c:	4606      	mov	r6, r0
 800983e:	4688      	mov	r8, r1
 8009840:	2700      	movs	r7, #0
 8009842:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800984a:	f1b9 0901 	subs.w	r9, r9, #1
 800984e:	d505      	bpl.n	800985c <_fwalk_reent+0x24>
 8009850:	6824      	ldr	r4, [r4, #0]
 8009852:	2c00      	cmp	r4, #0
 8009854:	d1f7      	bne.n	8009846 <_fwalk_reent+0xe>
 8009856:	4638      	mov	r0, r7
 8009858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800985c:	89ab      	ldrh	r3, [r5, #12]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d907      	bls.n	8009872 <_fwalk_reent+0x3a>
 8009862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009866:	3301      	adds	r3, #1
 8009868:	d003      	beq.n	8009872 <_fwalk_reent+0x3a>
 800986a:	4629      	mov	r1, r5
 800986c:	4630      	mov	r0, r6
 800986e:	47c0      	blx	r8
 8009870:	4307      	orrs	r7, r0
 8009872:	3568      	adds	r5, #104	; 0x68
 8009874:	e7e9      	b.n	800984a <_fwalk_reent+0x12>

08009876 <__retarget_lock_init_recursive>:
 8009876:	4770      	bx	lr

08009878 <__retarget_lock_acquire_recursive>:
 8009878:	4770      	bx	lr

0800987a <__retarget_lock_release_recursive>:
 800987a:	4770      	bx	lr

0800987c <__swhatbuf_r>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	460e      	mov	r6, r1
 8009880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009884:	4614      	mov	r4, r2
 8009886:	2900      	cmp	r1, #0
 8009888:	461d      	mov	r5, r3
 800988a:	b096      	sub	sp, #88	; 0x58
 800988c:	da08      	bge.n	80098a0 <__swhatbuf_r+0x24>
 800988e:	2200      	movs	r2, #0
 8009890:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009894:	602a      	str	r2, [r5, #0]
 8009896:	061a      	lsls	r2, r3, #24
 8009898:	d410      	bmi.n	80098bc <__swhatbuf_r+0x40>
 800989a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800989e:	e00e      	b.n	80098be <__swhatbuf_r+0x42>
 80098a0:	466a      	mov	r2, sp
 80098a2:	f000 fc91 	bl	800a1c8 <_fstat_r>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	dbf1      	blt.n	800988e <__swhatbuf_r+0x12>
 80098aa:	9a01      	ldr	r2, [sp, #4]
 80098ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098b4:	425a      	negs	r2, r3
 80098b6:	415a      	adcs	r2, r3
 80098b8:	602a      	str	r2, [r5, #0]
 80098ba:	e7ee      	b.n	800989a <__swhatbuf_r+0x1e>
 80098bc:	2340      	movs	r3, #64	; 0x40
 80098be:	2000      	movs	r0, #0
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	b016      	add	sp, #88	; 0x58
 80098c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080098c8 <__smakebuf_r>:
 80098c8:	898b      	ldrh	r3, [r1, #12]
 80098ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098cc:	079d      	lsls	r5, r3, #30
 80098ce:	4606      	mov	r6, r0
 80098d0:	460c      	mov	r4, r1
 80098d2:	d507      	bpl.n	80098e4 <__smakebuf_r+0x1c>
 80098d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	6123      	str	r3, [r4, #16]
 80098dc:	2301      	movs	r3, #1
 80098de:	6163      	str	r3, [r4, #20]
 80098e0:	b002      	add	sp, #8
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	466a      	mov	r2, sp
 80098e6:	ab01      	add	r3, sp, #4
 80098e8:	f7ff ffc8 	bl	800987c <__swhatbuf_r>
 80098ec:	9900      	ldr	r1, [sp, #0]
 80098ee:	4605      	mov	r5, r0
 80098f0:	4630      	mov	r0, r6
 80098f2:	f000 f891 	bl	8009a18 <_malloc_r>
 80098f6:	b948      	cbnz	r0, 800990c <__smakebuf_r+0x44>
 80098f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098fc:	059a      	lsls	r2, r3, #22
 80098fe:	d4ef      	bmi.n	80098e0 <__smakebuf_r+0x18>
 8009900:	f023 0303 	bic.w	r3, r3, #3
 8009904:	f043 0302 	orr.w	r3, r3, #2
 8009908:	81a3      	strh	r3, [r4, #12]
 800990a:	e7e3      	b.n	80098d4 <__smakebuf_r+0xc>
 800990c:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <__smakebuf_r+0x7c>)
 800990e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	6020      	str	r0, [r4, #0]
 8009914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	9b00      	ldr	r3, [sp, #0]
 800991c:	6120      	str	r0, [r4, #16]
 800991e:	6163      	str	r3, [r4, #20]
 8009920:	9b01      	ldr	r3, [sp, #4]
 8009922:	b15b      	cbz	r3, 800993c <__smakebuf_r+0x74>
 8009924:	4630      	mov	r0, r6
 8009926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800992a:	f000 fc5f 	bl	800a1ec <_isatty_r>
 800992e:	b128      	cbz	r0, 800993c <__smakebuf_r+0x74>
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	f023 0303 	bic.w	r3, r3, #3
 8009936:	f043 0301 	orr.w	r3, r3, #1
 800993a:	81a3      	strh	r3, [r4, #12]
 800993c:	89a0      	ldrh	r0, [r4, #12]
 800993e:	4305      	orrs	r5, r0
 8009940:	81a5      	strh	r5, [r4, #12]
 8009942:	e7cd      	b.n	80098e0 <__smakebuf_r+0x18>
 8009944:	080096d5 	.word	0x080096d5

08009948 <_free_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4605      	mov	r5, r0
 800994c:	2900      	cmp	r1, #0
 800994e:	d040      	beq.n	80099d2 <_free_r+0x8a>
 8009950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009954:	1f0c      	subs	r4, r1, #4
 8009956:	2b00      	cmp	r3, #0
 8009958:	bfb8      	it	lt
 800995a:	18e4      	addlt	r4, r4, r3
 800995c:	f000 fc76 	bl	800a24c <__malloc_lock>
 8009960:	4a1c      	ldr	r2, [pc, #112]	; (80099d4 <_free_r+0x8c>)
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	b933      	cbnz	r3, 8009974 <_free_r+0x2c>
 8009966:	6063      	str	r3, [r4, #4]
 8009968:	6014      	str	r4, [r2, #0]
 800996a:	4628      	mov	r0, r5
 800996c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009970:	f000 bc72 	b.w	800a258 <__malloc_unlock>
 8009974:	42a3      	cmp	r3, r4
 8009976:	d908      	bls.n	800998a <_free_r+0x42>
 8009978:	6820      	ldr	r0, [r4, #0]
 800997a:	1821      	adds	r1, r4, r0
 800997c:	428b      	cmp	r3, r1
 800997e:	bf01      	itttt	eq
 8009980:	6819      	ldreq	r1, [r3, #0]
 8009982:	685b      	ldreq	r3, [r3, #4]
 8009984:	1809      	addeq	r1, r1, r0
 8009986:	6021      	streq	r1, [r4, #0]
 8009988:	e7ed      	b.n	8009966 <_free_r+0x1e>
 800998a:	461a      	mov	r2, r3
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	b10b      	cbz	r3, 8009994 <_free_r+0x4c>
 8009990:	42a3      	cmp	r3, r4
 8009992:	d9fa      	bls.n	800998a <_free_r+0x42>
 8009994:	6811      	ldr	r1, [r2, #0]
 8009996:	1850      	adds	r0, r2, r1
 8009998:	42a0      	cmp	r0, r4
 800999a:	d10b      	bne.n	80099b4 <_free_r+0x6c>
 800999c:	6820      	ldr	r0, [r4, #0]
 800999e:	4401      	add	r1, r0
 80099a0:	1850      	adds	r0, r2, r1
 80099a2:	4283      	cmp	r3, r0
 80099a4:	6011      	str	r1, [r2, #0]
 80099a6:	d1e0      	bne.n	800996a <_free_r+0x22>
 80099a8:	6818      	ldr	r0, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	4401      	add	r1, r0
 80099ae:	6011      	str	r1, [r2, #0]
 80099b0:	6053      	str	r3, [r2, #4]
 80099b2:	e7da      	b.n	800996a <_free_r+0x22>
 80099b4:	d902      	bls.n	80099bc <_free_r+0x74>
 80099b6:	230c      	movs	r3, #12
 80099b8:	602b      	str	r3, [r5, #0]
 80099ba:	e7d6      	b.n	800996a <_free_r+0x22>
 80099bc:	6820      	ldr	r0, [r4, #0]
 80099be:	1821      	adds	r1, r4, r0
 80099c0:	428b      	cmp	r3, r1
 80099c2:	bf01      	itttt	eq
 80099c4:	6819      	ldreq	r1, [r3, #0]
 80099c6:	685b      	ldreq	r3, [r3, #4]
 80099c8:	1809      	addeq	r1, r1, r0
 80099ca:	6021      	streq	r1, [r4, #0]
 80099cc:	6063      	str	r3, [r4, #4]
 80099ce:	6054      	str	r4, [r2, #4]
 80099d0:	e7cb      	b.n	800996a <_free_r+0x22>
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	20000388 	.word	0x20000388

080099d8 <sbrk_aligned>:
 80099d8:	b570      	push	{r4, r5, r6, lr}
 80099da:	4e0e      	ldr	r6, [pc, #56]	; (8009a14 <sbrk_aligned+0x3c>)
 80099dc:	460c      	mov	r4, r1
 80099de:	6831      	ldr	r1, [r6, #0]
 80099e0:	4605      	mov	r5, r0
 80099e2:	b911      	cbnz	r1, 80099ea <sbrk_aligned+0x12>
 80099e4:	f000 fb7a 	bl	800a0dc <_sbrk_r>
 80099e8:	6030      	str	r0, [r6, #0]
 80099ea:	4621      	mov	r1, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	f000 fb75 	bl	800a0dc <_sbrk_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d00a      	beq.n	8009a0c <sbrk_aligned+0x34>
 80099f6:	1cc4      	adds	r4, r0, #3
 80099f8:	f024 0403 	bic.w	r4, r4, #3
 80099fc:	42a0      	cmp	r0, r4
 80099fe:	d007      	beq.n	8009a10 <sbrk_aligned+0x38>
 8009a00:	1a21      	subs	r1, r4, r0
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 fb6a 	bl	800a0dc <_sbrk_r>
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d101      	bne.n	8009a10 <sbrk_aligned+0x38>
 8009a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8009a10:	4620      	mov	r0, r4
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	2000038c 	.word	0x2000038c

08009a18 <_malloc_r>:
 8009a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1c:	1ccd      	adds	r5, r1, #3
 8009a1e:	f025 0503 	bic.w	r5, r5, #3
 8009a22:	3508      	adds	r5, #8
 8009a24:	2d0c      	cmp	r5, #12
 8009a26:	bf38      	it	cc
 8009a28:	250c      	movcc	r5, #12
 8009a2a:	2d00      	cmp	r5, #0
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	db01      	blt.n	8009a34 <_malloc_r+0x1c>
 8009a30:	42a9      	cmp	r1, r5
 8009a32:	d905      	bls.n	8009a40 <_malloc_r+0x28>
 8009a34:	230c      	movs	r3, #12
 8009a36:	2600      	movs	r6, #0
 8009a38:	603b      	str	r3, [r7, #0]
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a40:	4e2e      	ldr	r6, [pc, #184]	; (8009afc <_malloc_r+0xe4>)
 8009a42:	f000 fc03 	bl	800a24c <__malloc_lock>
 8009a46:	6833      	ldr	r3, [r6, #0]
 8009a48:	461c      	mov	r4, r3
 8009a4a:	bb34      	cbnz	r4, 8009a9a <_malloc_r+0x82>
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f7ff ffc2 	bl	80099d8 <sbrk_aligned>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	4604      	mov	r4, r0
 8009a58:	d14d      	bne.n	8009af6 <_malloc_r+0xde>
 8009a5a:	6834      	ldr	r4, [r6, #0]
 8009a5c:	4626      	mov	r6, r4
 8009a5e:	2e00      	cmp	r6, #0
 8009a60:	d140      	bne.n	8009ae4 <_malloc_r+0xcc>
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	4631      	mov	r1, r6
 8009a66:	4638      	mov	r0, r7
 8009a68:	eb04 0803 	add.w	r8, r4, r3
 8009a6c:	f000 fb36 	bl	800a0dc <_sbrk_r>
 8009a70:	4580      	cmp	r8, r0
 8009a72:	d13a      	bne.n	8009aea <_malloc_r+0xd2>
 8009a74:	6821      	ldr	r1, [r4, #0]
 8009a76:	3503      	adds	r5, #3
 8009a78:	1a6d      	subs	r5, r5, r1
 8009a7a:	f025 0503 	bic.w	r5, r5, #3
 8009a7e:	3508      	adds	r5, #8
 8009a80:	2d0c      	cmp	r5, #12
 8009a82:	bf38      	it	cc
 8009a84:	250c      	movcc	r5, #12
 8009a86:	4638      	mov	r0, r7
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7ff ffa5 	bl	80099d8 <sbrk_aligned>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d02b      	beq.n	8009aea <_malloc_r+0xd2>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	442b      	add	r3, r5
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	e00e      	b.n	8009ab8 <_malloc_r+0xa0>
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	1b52      	subs	r2, r2, r5
 8009a9e:	d41e      	bmi.n	8009ade <_malloc_r+0xc6>
 8009aa0:	2a0b      	cmp	r2, #11
 8009aa2:	d916      	bls.n	8009ad2 <_malloc_r+0xba>
 8009aa4:	1961      	adds	r1, r4, r5
 8009aa6:	42a3      	cmp	r3, r4
 8009aa8:	6025      	str	r5, [r4, #0]
 8009aaa:	bf18      	it	ne
 8009aac:	6059      	strne	r1, [r3, #4]
 8009aae:	6863      	ldr	r3, [r4, #4]
 8009ab0:	bf08      	it	eq
 8009ab2:	6031      	streq	r1, [r6, #0]
 8009ab4:	5162      	str	r2, [r4, r5]
 8009ab6:	604b      	str	r3, [r1, #4]
 8009ab8:	4638      	mov	r0, r7
 8009aba:	f104 060b 	add.w	r6, r4, #11
 8009abe:	f000 fbcb 	bl	800a258 <__malloc_unlock>
 8009ac2:	f026 0607 	bic.w	r6, r6, #7
 8009ac6:	1d23      	adds	r3, r4, #4
 8009ac8:	1af2      	subs	r2, r6, r3
 8009aca:	d0b6      	beq.n	8009a3a <_malloc_r+0x22>
 8009acc:	1b9b      	subs	r3, r3, r6
 8009ace:	50a3      	str	r3, [r4, r2]
 8009ad0:	e7b3      	b.n	8009a3a <_malloc_r+0x22>
 8009ad2:	6862      	ldr	r2, [r4, #4]
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	bf0c      	ite	eq
 8009ad8:	6032      	streq	r2, [r6, #0]
 8009ada:	605a      	strne	r2, [r3, #4]
 8009adc:	e7ec      	b.n	8009ab8 <_malloc_r+0xa0>
 8009ade:	4623      	mov	r3, r4
 8009ae0:	6864      	ldr	r4, [r4, #4]
 8009ae2:	e7b2      	b.n	8009a4a <_malloc_r+0x32>
 8009ae4:	4634      	mov	r4, r6
 8009ae6:	6876      	ldr	r6, [r6, #4]
 8009ae8:	e7b9      	b.n	8009a5e <_malloc_r+0x46>
 8009aea:	230c      	movs	r3, #12
 8009aec:	4638      	mov	r0, r7
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	f000 fbb2 	bl	800a258 <__malloc_unlock>
 8009af4:	e7a1      	b.n	8009a3a <_malloc_r+0x22>
 8009af6:	6025      	str	r5, [r4, #0]
 8009af8:	e7de      	b.n	8009ab8 <_malloc_r+0xa0>
 8009afa:	bf00      	nop
 8009afc:	20000388 	.word	0x20000388

08009b00 <__sfputc_r>:
 8009b00:	6893      	ldr	r3, [r2, #8]
 8009b02:	b410      	push	{r4}
 8009b04:	3b01      	subs	r3, #1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	6093      	str	r3, [r2, #8]
 8009b0a:	da07      	bge.n	8009b1c <__sfputc_r+0x1c>
 8009b0c:	6994      	ldr	r4, [r2, #24]
 8009b0e:	42a3      	cmp	r3, r4
 8009b10:	db01      	blt.n	8009b16 <__sfputc_r+0x16>
 8009b12:	290a      	cmp	r1, #10
 8009b14:	d102      	bne.n	8009b1c <__sfputc_r+0x1c>
 8009b16:	bc10      	pop	{r4}
 8009b18:	f7ff bc3a 	b.w	8009390 <__swbuf_r>
 8009b1c:	6813      	ldr	r3, [r2, #0]
 8009b1e:	1c58      	adds	r0, r3, #1
 8009b20:	6010      	str	r0, [r2, #0]
 8009b22:	7019      	strb	r1, [r3, #0]
 8009b24:	4608      	mov	r0, r1
 8009b26:	bc10      	pop	{r4}
 8009b28:	4770      	bx	lr

08009b2a <__sfputs_r>:
 8009b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	460f      	mov	r7, r1
 8009b30:	4614      	mov	r4, r2
 8009b32:	18d5      	adds	r5, r2, r3
 8009b34:	42ac      	cmp	r4, r5
 8009b36:	d101      	bne.n	8009b3c <__sfputs_r+0x12>
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e007      	b.n	8009b4c <__sfputs_r+0x22>
 8009b3c:	463a      	mov	r2, r7
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b44:	f7ff ffdc 	bl	8009b00 <__sfputc_r>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d1f3      	bne.n	8009b34 <__sfputs_r+0xa>
 8009b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b50 <_vfiprintf_r>:
 8009b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	460d      	mov	r5, r1
 8009b56:	4614      	mov	r4, r2
 8009b58:	4698      	mov	r8, r3
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	b09d      	sub	sp, #116	; 0x74
 8009b5e:	b118      	cbz	r0, 8009b68 <_vfiprintf_r+0x18>
 8009b60:	6983      	ldr	r3, [r0, #24]
 8009b62:	b90b      	cbnz	r3, 8009b68 <_vfiprintf_r+0x18>
 8009b64:	f7ff fdea 	bl	800973c <__sinit>
 8009b68:	4b89      	ldr	r3, [pc, #548]	; (8009d90 <_vfiprintf_r+0x240>)
 8009b6a:	429d      	cmp	r5, r3
 8009b6c:	d11b      	bne.n	8009ba6 <_vfiprintf_r+0x56>
 8009b6e:	6875      	ldr	r5, [r6, #4]
 8009b70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b72:	07d9      	lsls	r1, r3, #31
 8009b74:	d405      	bmi.n	8009b82 <_vfiprintf_r+0x32>
 8009b76:	89ab      	ldrh	r3, [r5, #12]
 8009b78:	059a      	lsls	r2, r3, #22
 8009b7a:	d402      	bmi.n	8009b82 <_vfiprintf_r+0x32>
 8009b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b7e:	f7ff fe7b 	bl	8009878 <__retarget_lock_acquire_recursive>
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	071b      	lsls	r3, r3, #28
 8009b86:	d501      	bpl.n	8009b8c <_vfiprintf_r+0x3c>
 8009b88:	692b      	ldr	r3, [r5, #16]
 8009b8a:	b9eb      	cbnz	r3, 8009bc8 <_vfiprintf_r+0x78>
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f7ff fc50 	bl	8009434 <__swsetup_r>
 8009b94:	b1c0      	cbz	r0, 8009bc8 <_vfiprintf_r+0x78>
 8009b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b98:	07dc      	lsls	r4, r3, #31
 8009b9a:	d50e      	bpl.n	8009bba <_vfiprintf_r+0x6a>
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba0:	b01d      	add	sp, #116	; 0x74
 8009ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba6:	4b7b      	ldr	r3, [pc, #492]	; (8009d94 <_vfiprintf_r+0x244>)
 8009ba8:	429d      	cmp	r5, r3
 8009baa:	d101      	bne.n	8009bb0 <_vfiprintf_r+0x60>
 8009bac:	68b5      	ldr	r5, [r6, #8]
 8009bae:	e7df      	b.n	8009b70 <_vfiprintf_r+0x20>
 8009bb0:	4b79      	ldr	r3, [pc, #484]	; (8009d98 <_vfiprintf_r+0x248>)
 8009bb2:	429d      	cmp	r5, r3
 8009bb4:	bf08      	it	eq
 8009bb6:	68f5      	ldreq	r5, [r6, #12]
 8009bb8:	e7da      	b.n	8009b70 <_vfiprintf_r+0x20>
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	0598      	lsls	r0, r3, #22
 8009bbe:	d4ed      	bmi.n	8009b9c <_vfiprintf_r+0x4c>
 8009bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bc2:	f7ff fe5a 	bl	800987a <__retarget_lock_release_recursive>
 8009bc6:	e7e9      	b.n	8009b9c <_vfiprintf_r+0x4c>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9309      	str	r3, [sp, #36]	; 0x24
 8009bcc:	2320      	movs	r3, #32
 8009bce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bd2:	2330      	movs	r3, #48	; 0x30
 8009bd4:	f04f 0901 	mov.w	r9, #1
 8009bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bdc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009d9c <_vfiprintf_r+0x24c>
 8009be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009be4:	4623      	mov	r3, r4
 8009be6:	469a      	mov	sl, r3
 8009be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bec:	b10a      	cbz	r2, 8009bf2 <_vfiprintf_r+0xa2>
 8009bee:	2a25      	cmp	r2, #37	; 0x25
 8009bf0:	d1f9      	bne.n	8009be6 <_vfiprintf_r+0x96>
 8009bf2:	ebba 0b04 	subs.w	fp, sl, r4
 8009bf6:	d00b      	beq.n	8009c10 <_vfiprintf_r+0xc0>
 8009bf8:	465b      	mov	r3, fp
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f7ff ff93 	bl	8009b2a <__sfputs_r>
 8009c04:	3001      	adds	r0, #1
 8009c06:	f000 80aa 	beq.w	8009d5e <_vfiprintf_r+0x20e>
 8009c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c0c:	445a      	add	r2, fp
 8009c0e:	9209      	str	r2, [sp, #36]	; 0x24
 8009c10:	f89a 3000 	ldrb.w	r3, [sl]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 80a2 	beq.w	8009d5e <_vfiprintf_r+0x20e>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c24:	f10a 0a01 	add.w	sl, sl, #1
 8009c28:	9304      	str	r3, [sp, #16]
 8009c2a:	9307      	str	r3, [sp, #28]
 8009c2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c30:	931a      	str	r3, [sp, #104]	; 0x68
 8009c32:	4654      	mov	r4, sl
 8009c34:	2205      	movs	r2, #5
 8009c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3a:	4858      	ldr	r0, [pc, #352]	; (8009d9c <_vfiprintf_r+0x24c>)
 8009c3c:	f000 faf8 	bl	800a230 <memchr>
 8009c40:	9a04      	ldr	r2, [sp, #16]
 8009c42:	b9d8      	cbnz	r0, 8009c7c <_vfiprintf_r+0x12c>
 8009c44:	06d1      	lsls	r1, r2, #27
 8009c46:	bf44      	itt	mi
 8009c48:	2320      	movmi	r3, #32
 8009c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c4e:	0713      	lsls	r3, r2, #28
 8009c50:	bf44      	itt	mi
 8009c52:	232b      	movmi	r3, #43	; 0x2b
 8009c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c58:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c5e:	d015      	beq.n	8009c8c <_vfiprintf_r+0x13c>
 8009c60:	4654      	mov	r4, sl
 8009c62:	2000      	movs	r0, #0
 8009c64:	f04f 0c0a 	mov.w	ip, #10
 8009c68:	9a07      	ldr	r2, [sp, #28]
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c70:	3b30      	subs	r3, #48	; 0x30
 8009c72:	2b09      	cmp	r3, #9
 8009c74:	d94e      	bls.n	8009d14 <_vfiprintf_r+0x1c4>
 8009c76:	b1b0      	cbz	r0, 8009ca6 <_vfiprintf_r+0x156>
 8009c78:	9207      	str	r2, [sp, #28]
 8009c7a:	e014      	b.n	8009ca6 <_vfiprintf_r+0x156>
 8009c7c:	eba0 0308 	sub.w	r3, r0, r8
 8009c80:	fa09 f303 	lsl.w	r3, r9, r3
 8009c84:	4313      	orrs	r3, r2
 8009c86:	46a2      	mov	sl, r4
 8009c88:	9304      	str	r3, [sp, #16]
 8009c8a:	e7d2      	b.n	8009c32 <_vfiprintf_r+0xe2>
 8009c8c:	9b03      	ldr	r3, [sp, #12]
 8009c8e:	1d19      	adds	r1, r3, #4
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	9103      	str	r1, [sp, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bfbb      	ittet	lt
 8009c98:	425b      	neglt	r3, r3
 8009c9a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c9e:	9307      	strge	r3, [sp, #28]
 8009ca0:	9307      	strlt	r3, [sp, #28]
 8009ca2:	bfb8      	it	lt
 8009ca4:	9204      	strlt	r2, [sp, #16]
 8009ca6:	7823      	ldrb	r3, [r4, #0]
 8009ca8:	2b2e      	cmp	r3, #46	; 0x2e
 8009caa:	d10c      	bne.n	8009cc6 <_vfiprintf_r+0x176>
 8009cac:	7863      	ldrb	r3, [r4, #1]
 8009cae:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb0:	d135      	bne.n	8009d1e <_vfiprintf_r+0x1ce>
 8009cb2:	9b03      	ldr	r3, [sp, #12]
 8009cb4:	3402      	adds	r4, #2
 8009cb6:	1d1a      	adds	r2, r3, #4
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	9203      	str	r2, [sp, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfb8      	it	lt
 8009cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cc4:	9305      	str	r3, [sp, #20]
 8009cc6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009da0 <_vfiprintf_r+0x250>
 8009cca:	2203      	movs	r2, #3
 8009ccc:	4650      	mov	r0, sl
 8009cce:	7821      	ldrb	r1, [r4, #0]
 8009cd0:	f000 faae 	bl	800a230 <memchr>
 8009cd4:	b140      	cbz	r0, 8009ce8 <_vfiprintf_r+0x198>
 8009cd6:	2340      	movs	r3, #64	; 0x40
 8009cd8:	eba0 000a 	sub.w	r0, r0, sl
 8009cdc:	fa03 f000 	lsl.w	r0, r3, r0
 8009ce0:	9b04      	ldr	r3, [sp, #16]
 8009ce2:	3401      	adds	r4, #1
 8009ce4:	4303      	orrs	r3, r0
 8009ce6:	9304      	str	r3, [sp, #16]
 8009ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cec:	2206      	movs	r2, #6
 8009cee:	482d      	ldr	r0, [pc, #180]	; (8009da4 <_vfiprintf_r+0x254>)
 8009cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cf4:	f000 fa9c 	bl	800a230 <memchr>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d03f      	beq.n	8009d7c <_vfiprintf_r+0x22c>
 8009cfc:	4b2a      	ldr	r3, [pc, #168]	; (8009da8 <_vfiprintf_r+0x258>)
 8009cfe:	bb1b      	cbnz	r3, 8009d48 <_vfiprintf_r+0x1f8>
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	3307      	adds	r3, #7
 8009d04:	f023 0307 	bic.w	r3, r3, #7
 8009d08:	3308      	adds	r3, #8
 8009d0a:	9303      	str	r3, [sp, #12]
 8009d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0e:	443b      	add	r3, r7
 8009d10:	9309      	str	r3, [sp, #36]	; 0x24
 8009d12:	e767      	b.n	8009be4 <_vfiprintf_r+0x94>
 8009d14:	460c      	mov	r4, r1
 8009d16:	2001      	movs	r0, #1
 8009d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d1c:	e7a5      	b.n	8009c6a <_vfiprintf_r+0x11a>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f04f 0c0a 	mov.w	ip, #10
 8009d24:	4619      	mov	r1, r3
 8009d26:	3401      	adds	r4, #1
 8009d28:	9305      	str	r3, [sp, #20]
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d30:	3a30      	subs	r2, #48	; 0x30
 8009d32:	2a09      	cmp	r2, #9
 8009d34:	d903      	bls.n	8009d3e <_vfiprintf_r+0x1ee>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0c5      	beq.n	8009cc6 <_vfiprintf_r+0x176>
 8009d3a:	9105      	str	r1, [sp, #20]
 8009d3c:	e7c3      	b.n	8009cc6 <_vfiprintf_r+0x176>
 8009d3e:	4604      	mov	r4, r0
 8009d40:	2301      	movs	r3, #1
 8009d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d46:	e7f0      	b.n	8009d2a <_vfiprintf_r+0x1da>
 8009d48:	ab03      	add	r3, sp, #12
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	4630      	mov	r0, r6
 8009d50:	4b16      	ldr	r3, [pc, #88]	; (8009dac <_vfiprintf_r+0x25c>)
 8009d52:	a904      	add	r1, sp, #16
 8009d54:	f3af 8000 	nop.w
 8009d58:	4607      	mov	r7, r0
 8009d5a:	1c78      	adds	r0, r7, #1
 8009d5c:	d1d6      	bne.n	8009d0c <_vfiprintf_r+0x1bc>
 8009d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d60:	07d9      	lsls	r1, r3, #31
 8009d62:	d405      	bmi.n	8009d70 <_vfiprintf_r+0x220>
 8009d64:	89ab      	ldrh	r3, [r5, #12]
 8009d66:	059a      	lsls	r2, r3, #22
 8009d68:	d402      	bmi.n	8009d70 <_vfiprintf_r+0x220>
 8009d6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d6c:	f7ff fd85 	bl	800987a <__retarget_lock_release_recursive>
 8009d70:	89ab      	ldrh	r3, [r5, #12]
 8009d72:	065b      	lsls	r3, r3, #25
 8009d74:	f53f af12 	bmi.w	8009b9c <_vfiprintf_r+0x4c>
 8009d78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d7a:	e711      	b.n	8009ba0 <_vfiprintf_r+0x50>
 8009d7c:	ab03      	add	r3, sp, #12
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	462a      	mov	r2, r5
 8009d82:	4630      	mov	r0, r6
 8009d84:	4b09      	ldr	r3, [pc, #36]	; (8009dac <_vfiprintf_r+0x25c>)
 8009d86:	a904      	add	r1, sp, #16
 8009d88:	f000 f882 	bl	8009e90 <_printf_i>
 8009d8c:	e7e4      	b.n	8009d58 <_vfiprintf_r+0x208>
 8009d8e:	bf00      	nop
 8009d90:	0800b808 	.word	0x0800b808
 8009d94:	0800b828 	.word	0x0800b828
 8009d98:	0800b7e8 	.word	0x0800b7e8
 8009d9c:	0800b848 	.word	0x0800b848
 8009da0:	0800b84e 	.word	0x0800b84e
 8009da4:	0800b852 	.word	0x0800b852
 8009da8:	00000000 	.word	0x00000000
 8009dac:	08009b2b 	.word	0x08009b2b

08009db0 <_printf_common>:
 8009db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db4:	4616      	mov	r6, r2
 8009db6:	4699      	mov	r9, r3
 8009db8:	688a      	ldr	r2, [r1, #8]
 8009dba:	690b      	ldr	r3, [r1, #16]
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	bfb8      	it	lt
 8009dc2:	4613      	movlt	r3, r2
 8009dc4:	6033      	str	r3, [r6, #0]
 8009dc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dca:	460c      	mov	r4, r1
 8009dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009dd0:	b10a      	cbz	r2, 8009dd6 <_printf_common+0x26>
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	6033      	str	r3, [r6, #0]
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	0699      	lsls	r1, r3, #26
 8009dda:	bf42      	ittt	mi
 8009ddc:	6833      	ldrmi	r3, [r6, #0]
 8009dde:	3302      	addmi	r3, #2
 8009de0:	6033      	strmi	r3, [r6, #0]
 8009de2:	6825      	ldr	r5, [r4, #0]
 8009de4:	f015 0506 	ands.w	r5, r5, #6
 8009de8:	d106      	bne.n	8009df8 <_printf_common+0x48>
 8009dea:	f104 0a19 	add.w	sl, r4, #25
 8009dee:	68e3      	ldr	r3, [r4, #12]
 8009df0:	6832      	ldr	r2, [r6, #0]
 8009df2:	1a9b      	subs	r3, r3, r2
 8009df4:	42ab      	cmp	r3, r5
 8009df6:	dc28      	bgt.n	8009e4a <_printf_common+0x9a>
 8009df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dfc:	1e13      	subs	r3, r2, #0
 8009dfe:	6822      	ldr	r2, [r4, #0]
 8009e00:	bf18      	it	ne
 8009e02:	2301      	movne	r3, #1
 8009e04:	0692      	lsls	r2, r2, #26
 8009e06:	d42d      	bmi.n	8009e64 <_printf_common+0xb4>
 8009e08:	4649      	mov	r1, r9
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e10:	47c0      	blx	r8
 8009e12:	3001      	adds	r0, #1
 8009e14:	d020      	beq.n	8009e58 <_printf_common+0xa8>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	68e5      	ldr	r5, [r4, #12]
 8009e1a:	f003 0306 	and.w	r3, r3, #6
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	bf18      	it	ne
 8009e22:	2500      	movne	r5, #0
 8009e24:	6832      	ldr	r2, [r6, #0]
 8009e26:	f04f 0600 	mov.w	r6, #0
 8009e2a:	68a3      	ldr	r3, [r4, #8]
 8009e2c:	bf08      	it	eq
 8009e2e:	1aad      	subeq	r5, r5, r2
 8009e30:	6922      	ldr	r2, [r4, #16]
 8009e32:	bf08      	it	eq
 8009e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	bfc4      	itt	gt
 8009e3c:	1a9b      	subgt	r3, r3, r2
 8009e3e:	18ed      	addgt	r5, r5, r3
 8009e40:	341a      	adds	r4, #26
 8009e42:	42b5      	cmp	r5, r6
 8009e44:	d11a      	bne.n	8009e7c <_printf_common+0xcc>
 8009e46:	2000      	movs	r0, #0
 8009e48:	e008      	b.n	8009e5c <_printf_common+0xac>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4652      	mov	r2, sl
 8009e4e:	4649      	mov	r1, r9
 8009e50:	4638      	mov	r0, r7
 8009e52:	47c0      	blx	r8
 8009e54:	3001      	adds	r0, #1
 8009e56:	d103      	bne.n	8009e60 <_printf_common+0xb0>
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e60:	3501      	adds	r5, #1
 8009e62:	e7c4      	b.n	8009dee <_printf_common+0x3e>
 8009e64:	2030      	movs	r0, #48	; 0x30
 8009e66:	18e1      	adds	r1, r4, r3
 8009e68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e72:	4422      	add	r2, r4
 8009e74:	3302      	adds	r3, #2
 8009e76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e7a:	e7c5      	b.n	8009e08 <_printf_common+0x58>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	4622      	mov	r2, r4
 8009e80:	4649      	mov	r1, r9
 8009e82:	4638      	mov	r0, r7
 8009e84:	47c0      	blx	r8
 8009e86:	3001      	adds	r0, #1
 8009e88:	d0e6      	beq.n	8009e58 <_printf_common+0xa8>
 8009e8a:	3601      	adds	r6, #1
 8009e8c:	e7d9      	b.n	8009e42 <_printf_common+0x92>
	...

08009e90 <_printf_i>:
 8009e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	7e0f      	ldrb	r7, [r1, #24]
 8009e96:	4691      	mov	r9, r2
 8009e98:	2f78      	cmp	r7, #120	; 0x78
 8009e9a:	4680      	mov	r8, r0
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	469a      	mov	sl, r3
 8009ea0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ea6:	d807      	bhi.n	8009eb8 <_printf_i+0x28>
 8009ea8:	2f62      	cmp	r7, #98	; 0x62
 8009eaa:	d80a      	bhi.n	8009ec2 <_printf_i+0x32>
 8009eac:	2f00      	cmp	r7, #0
 8009eae:	f000 80d9 	beq.w	800a064 <_printf_i+0x1d4>
 8009eb2:	2f58      	cmp	r7, #88	; 0x58
 8009eb4:	f000 80a4 	beq.w	800a000 <_printf_i+0x170>
 8009eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ec0:	e03a      	b.n	8009f38 <_printf_i+0xa8>
 8009ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ec6:	2b15      	cmp	r3, #21
 8009ec8:	d8f6      	bhi.n	8009eb8 <_printf_i+0x28>
 8009eca:	a101      	add	r1, pc, #4	; (adr r1, 8009ed0 <_printf_i+0x40>)
 8009ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ed0:	08009f29 	.word	0x08009f29
 8009ed4:	08009f3d 	.word	0x08009f3d
 8009ed8:	08009eb9 	.word	0x08009eb9
 8009edc:	08009eb9 	.word	0x08009eb9
 8009ee0:	08009eb9 	.word	0x08009eb9
 8009ee4:	08009eb9 	.word	0x08009eb9
 8009ee8:	08009f3d 	.word	0x08009f3d
 8009eec:	08009eb9 	.word	0x08009eb9
 8009ef0:	08009eb9 	.word	0x08009eb9
 8009ef4:	08009eb9 	.word	0x08009eb9
 8009ef8:	08009eb9 	.word	0x08009eb9
 8009efc:	0800a04b 	.word	0x0800a04b
 8009f00:	08009f6d 	.word	0x08009f6d
 8009f04:	0800a02d 	.word	0x0800a02d
 8009f08:	08009eb9 	.word	0x08009eb9
 8009f0c:	08009eb9 	.word	0x08009eb9
 8009f10:	0800a06d 	.word	0x0800a06d
 8009f14:	08009eb9 	.word	0x08009eb9
 8009f18:	08009f6d 	.word	0x08009f6d
 8009f1c:	08009eb9 	.word	0x08009eb9
 8009f20:	08009eb9 	.word	0x08009eb9
 8009f24:	0800a035 	.word	0x0800a035
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	1d1a      	adds	r2, r3, #4
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	602a      	str	r2, [r5, #0]
 8009f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e0a4      	b.n	800a086 <_printf_i+0x1f6>
 8009f3c:	6820      	ldr	r0, [r4, #0]
 8009f3e:	6829      	ldr	r1, [r5, #0]
 8009f40:	0606      	lsls	r6, r0, #24
 8009f42:	f101 0304 	add.w	r3, r1, #4
 8009f46:	d50a      	bpl.n	8009f5e <_printf_i+0xce>
 8009f48:	680e      	ldr	r6, [r1, #0]
 8009f4a:	602b      	str	r3, [r5, #0]
 8009f4c:	2e00      	cmp	r6, #0
 8009f4e:	da03      	bge.n	8009f58 <_printf_i+0xc8>
 8009f50:	232d      	movs	r3, #45	; 0x2d
 8009f52:	4276      	negs	r6, r6
 8009f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f58:	230a      	movs	r3, #10
 8009f5a:	485e      	ldr	r0, [pc, #376]	; (800a0d4 <_printf_i+0x244>)
 8009f5c:	e019      	b.n	8009f92 <_printf_i+0x102>
 8009f5e:	680e      	ldr	r6, [r1, #0]
 8009f60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f64:	602b      	str	r3, [r5, #0]
 8009f66:	bf18      	it	ne
 8009f68:	b236      	sxthne	r6, r6
 8009f6a:	e7ef      	b.n	8009f4c <_printf_i+0xbc>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	6820      	ldr	r0, [r4, #0]
 8009f70:	1d19      	adds	r1, r3, #4
 8009f72:	6029      	str	r1, [r5, #0]
 8009f74:	0601      	lsls	r1, r0, #24
 8009f76:	d501      	bpl.n	8009f7c <_printf_i+0xec>
 8009f78:	681e      	ldr	r6, [r3, #0]
 8009f7a:	e002      	b.n	8009f82 <_printf_i+0xf2>
 8009f7c:	0646      	lsls	r6, r0, #25
 8009f7e:	d5fb      	bpl.n	8009f78 <_printf_i+0xe8>
 8009f80:	881e      	ldrh	r6, [r3, #0]
 8009f82:	2f6f      	cmp	r7, #111	; 0x6f
 8009f84:	bf0c      	ite	eq
 8009f86:	2308      	moveq	r3, #8
 8009f88:	230a      	movne	r3, #10
 8009f8a:	4852      	ldr	r0, [pc, #328]	; (800a0d4 <_printf_i+0x244>)
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f92:	6865      	ldr	r5, [r4, #4]
 8009f94:	2d00      	cmp	r5, #0
 8009f96:	bfa8      	it	ge
 8009f98:	6821      	ldrge	r1, [r4, #0]
 8009f9a:	60a5      	str	r5, [r4, #8]
 8009f9c:	bfa4      	itt	ge
 8009f9e:	f021 0104 	bicge.w	r1, r1, #4
 8009fa2:	6021      	strge	r1, [r4, #0]
 8009fa4:	b90e      	cbnz	r6, 8009faa <_printf_i+0x11a>
 8009fa6:	2d00      	cmp	r5, #0
 8009fa8:	d04d      	beq.n	800a046 <_printf_i+0x1b6>
 8009faa:	4615      	mov	r5, r2
 8009fac:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fb0:	fb03 6711 	mls	r7, r3, r1, r6
 8009fb4:	5dc7      	ldrb	r7, [r0, r7]
 8009fb6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fba:	4637      	mov	r7, r6
 8009fbc:	42bb      	cmp	r3, r7
 8009fbe:	460e      	mov	r6, r1
 8009fc0:	d9f4      	bls.n	8009fac <_printf_i+0x11c>
 8009fc2:	2b08      	cmp	r3, #8
 8009fc4:	d10b      	bne.n	8009fde <_printf_i+0x14e>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	07de      	lsls	r6, r3, #31
 8009fca:	d508      	bpl.n	8009fde <_printf_i+0x14e>
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	6861      	ldr	r1, [r4, #4]
 8009fd0:	4299      	cmp	r1, r3
 8009fd2:	bfde      	ittt	le
 8009fd4:	2330      	movle	r3, #48	; 0x30
 8009fd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fde:	1b52      	subs	r2, r2, r5
 8009fe0:	6122      	str	r2, [r4, #16]
 8009fe2:	464b      	mov	r3, r9
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	f8cd a000 	str.w	sl, [sp]
 8009fec:	aa03      	add	r2, sp, #12
 8009fee:	f7ff fedf 	bl	8009db0 <_printf_common>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d14c      	bne.n	800a090 <_printf_i+0x200>
 8009ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffa:	b004      	add	sp, #16
 8009ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a000:	4834      	ldr	r0, [pc, #208]	; (800a0d4 <_printf_i+0x244>)
 800a002:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a006:	6829      	ldr	r1, [r5, #0]
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a00e:	6029      	str	r1, [r5, #0]
 800a010:	061d      	lsls	r5, r3, #24
 800a012:	d514      	bpl.n	800a03e <_printf_i+0x1ae>
 800a014:	07df      	lsls	r7, r3, #31
 800a016:	bf44      	itt	mi
 800a018:	f043 0320 	orrmi.w	r3, r3, #32
 800a01c:	6023      	strmi	r3, [r4, #0]
 800a01e:	b91e      	cbnz	r6, 800a028 <_printf_i+0x198>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	f023 0320 	bic.w	r3, r3, #32
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	2310      	movs	r3, #16
 800a02a:	e7af      	b.n	8009f8c <_printf_i+0xfc>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	f043 0320 	orr.w	r3, r3, #32
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	2378      	movs	r3, #120	; 0x78
 800a036:	4828      	ldr	r0, [pc, #160]	; (800a0d8 <_printf_i+0x248>)
 800a038:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a03c:	e7e3      	b.n	800a006 <_printf_i+0x176>
 800a03e:	0659      	lsls	r1, r3, #25
 800a040:	bf48      	it	mi
 800a042:	b2b6      	uxthmi	r6, r6
 800a044:	e7e6      	b.n	800a014 <_printf_i+0x184>
 800a046:	4615      	mov	r5, r2
 800a048:	e7bb      	b.n	8009fc2 <_printf_i+0x132>
 800a04a:	682b      	ldr	r3, [r5, #0]
 800a04c:	6826      	ldr	r6, [r4, #0]
 800a04e:	1d18      	adds	r0, r3, #4
 800a050:	6961      	ldr	r1, [r4, #20]
 800a052:	6028      	str	r0, [r5, #0]
 800a054:	0635      	lsls	r5, r6, #24
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	d501      	bpl.n	800a05e <_printf_i+0x1ce>
 800a05a:	6019      	str	r1, [r3, #0]
 800a05c:	e002      	b.n	800a064 <_printf_i+0x1d4>
 800a05e:	0670      	lsls	r0, r6, #25
 800a060:	d5fb      	bpl.n	800a05a <_printf_i+0x1ca>
 800a062:	8019      	strh	r1, [r3, #0]
 800a064:	2300      	movs	r3, #0
 800a066:	4615      	mov	r5, r2
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	e7ba      	b.n	8009fe2 <_printf_i+0x152>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	2100      	movs	r1, #0
 800a070:	1d1a      	adds	r2, r3, #4
 800a072:	602a      	str	r2, [r5, #0]
 800a074:	681d      	ldr	r5, [r3, #0]
 800a076:	6862      	ldr	r2, [r4, #4]
 800a078:	4628      	mov	r0, r5
 800a07a:	f000 f8d9 	bl	800a230 <memchr>
 800a07e:	b108      	cbz	r0, 800a084 <_printf_i+0x1f4>
 800a080:	1b40      	subs	r0, r0, r5
 800a082:	6060      	str	r0, [r4, #4]
 800a084:	6863      	ldr	r3, [r4, #4]
 800a086:	6123      	str	r3, [r4, #16]
 800a088:	2300      	movs	r3, #0
 800a08a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a08e:	e7a8      	b.n	8009fe2 <_printf_i+0x152>
 800a090:	462a      	mov	r2, r5
 800a092:	4649      	mov	r1, r9
 800a094:	4640      	mov	r0, r8
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	47d0      	blx	sl
 800a09a:	3001      	adds	r0, #1
 800a09c:	d0ab      	beq.n	8009ff6 <_printf_i+0x166>
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	079b      	lsls	r3, r3, #30
 800a0a2:	d413      	bmi.n	800a0cc <_printf_i+0x23c>
 800a0a4:	68e0      	ldr	r0, [r4, #12]
 800a0a6:	9b03      	ldr	r3, [sp, #12]
 800a0a8:	4298      	cmp	r0, r3
 800a0aa:	bfb8      	it	lt
 800a0ac:	4618      	movlt	r0, r3
 800a0ae:	e7a4      	b.n	8009ffa <_printf_i+0x16a>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	4632      	mov	r2, r6
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	47d0      	blx	sl
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	d09b      	beq.n	8009ff6 <_printf_i+0x166>
 800a0be:	3501      	adds	r5, #1
 800a0c0:	68e3      	ldr	r3, [r4, #12]
 800a0c2:	9903      	ldr	r1, [sp, #12]
 800a0c4:	1a5b      	subs	r3, r3, r1
 800a0c6:	42ab      	cmp	r3, r5
 800a0c8:	dcf2      	bgt.n	800a0b0 <_printf_i+0x220>
 800a0ca:	e7eb      	b.n	800a0a4 <_printf_i+0x214>
 800a0cc:	2500      	movs	r5, #0
 800a0ce:	f104 0619 	add.w	r6, r4, #25
 800a0d2:	e7f5      	b.n	800a0c0 <_printf_i+0x230>
 800a0d4:	0800b859 	.word	0x0800b859
 800a0d8:	0800b86a 	.word	0x0800b86a

0800a0dc <_sbrk_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	2300      	movs	r3, #0
 800a0e0:	4d05      	ldr	r5, [pc, #20]	; (800a0f8 <_sbrk_r+0x1c>)
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4608      	mov	r0, r1
 800a0e6:	602b      	str	r3, [r5, #0]
 800a0e8:	f7ff f83a 	bl	8009160 <_sbrk>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_sbrk_r+0x1a>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_sbrk_r+0x1a>
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	20000390 	.word	0x20000390

0800a0fc <__sread>:
 800a0fc:	b510      	push	{r4, lr}
 800a0fe:	460c      	mov	r4, r1
 800a100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a104:	f000 f8ae 	bl	800a264 <_read_r>
 800a108:	2800      	cmp	r0, #0
 800a10a:	bfab      	itete	ge
 800a10c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a10e:	89a3      	ldrhlt	r3, [r4, #12]
 800a110:	181b      	addge	r3, r3, r0
 800a112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a116:	bfac      	ite	ge
 800a118:	6563      	strge	r3, [r4, #84]	; 0x54
 800a11a:	81a3      	strhlt	r3, [r4, #12]
 800a11c:	bd10      	pop	{r4, pc}

0800a11e <__swrite>:
 800a11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a122:	461f      	mov	r7, r3
 800a124:	898b      	ldrh	r3, [r1, #12]
 800a126:	4605      	mov	r5, r0
 800a128:	05db      	lsls	r3, r3, #23
 800a12a:	460c      	mov	r4, r1
 800a12c:	4616      	mov	r6, r2
 800a12e:	d505      	bpl.n	800a13c <__swrite+0x1e>
 800a130:	2302      	movs	r3, #2
 800a132:	2200      	movs	r2, #0
 800a134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a138:	f000 f868 	bl	800a20c <_lseek_r>
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	4632      	mov	r2, r6
 800a140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a144:	81a3      	strh	r3, [r4, #12]
 800a146:	4628      	mov	r0, r5
 800a148:	463b      	mov	r3, r7
 800a14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a152:	f000 b817 	b.w	800a184 <_write_r>

0800a156 <__sseek>:
 800a156:	b510      	push	{r4, lr}
 800a158:	460c      	mov	r4, r1
 800a15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a15e:	f000 f855 	bl	800a20c <_lseek_r>
 800a162:	1c43      	adds	r3, r0, #1
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	bf15      	itete	ne
 800a168:	6560      	strne	r0, [r4, #84]	; 0x54
 800a16a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a16e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a172:	81a3      	strheq	r3, [r4, #12]
 800a174:	bf18      	it	ne
 800a176:	81a3      	strhne	r3, [r4, #12]
 800a178:	bd10      	pop	{r4, pc}

0800a17a <__sclose>:
 800a17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a17e:	f000 b813 	b.w	800a1a8 <_close_r>
	...

0800a184 <_write_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4604      	mov	r4, r0
 800a188:	4608      	mov	r0, r1
 800a18a:	4611      	mov	r1, r2
 800a18c:	2200      	movs	r2, #0
 800a18e:	4d05      	ldr	r5, [pc, #20]	; (800a1a4 <_write_r+0x20>)
 800a190:	602a      	str	r2, [r5, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	f7fa f988 	bl	80044a8 <_write>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	d102      	bne.n	800a1a2 <_write_r+0x1e>
 800a19c:	682b      	ldr	r3, [r5, #0]
 800a19e:	b103      	cbz	r3, 800a1a2 <_write_r+0x1e>
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	bd38      	pop	{r3, r4, r5, pc}
 800a1a4:	20000390 	.word	0x20000390

0800a1a8 <_close_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4d05      	ldr	r5, [pc, #20]	; (800a1c4 <_close_r+0x1c>)
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	4608      	mov	r0, r1
 800a1b2:	602b      	str	r3, [r5, #0]
 800a1b4:	f7fe ffa3 	bl	80090fe <_close>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d102      	bne.n	800a1c2 <_close_r+0x1a>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	b103      	cbz	r3, 800a1c2 <_close_r+0x1a>
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	20000390 	.word	0x20000390

0800a1c8 <_fstat_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	4d06      	ldr	r5, [pc, #24]	; (800a1e8 <_fstat_r+0x20>)
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	f7fe ff9d 	bl	8009114 <_fstat>
 800a1da:	1c43      	adds	r3, r0, #1
 800a1dc:	d102      	bne.n	800a1e4 <_fstat_r+0x1c>
 800a1de:	682b      	ldr	r3, [r5, #0]
 800a1e0:	b103      	cbz	r3, 800a1e4 <_fstat_r+0x1c>
 800a1e2:	6023      	str	r3, [r4, #0]
 800a1e4:	bd38      	pop	{r3, r4, r5, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20000390 	.word	0x20000390

0800a1ec <_isatty_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4d05      	ldr	r5, [pc, #20]	; (800a208 <_isatty_r+0x1c>)
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	602b      	str	r3, [r5, #0]
 800a1f8:	f7fe ff9b 	bl	8009132 <_isatty>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_isatty_r+0x1a>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	b103      	cbz	r3, 800a206 <_isatty_r+0x1a>
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	20000390 	.word	0x20000390

0800a20c <_lseek_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4604      	mov	r4, r0
 800a210:	4608      	mov	r0, r1
 800a212:	4611      	mov	r1, r2
 800a214:	2200      	movs	r2, #0
 800a216:	4d05      	ldr	r5, [pc, #20]	; (800a22c <_lseek_r+0x20>)
 800a218:	602a      	str	r2, [r5, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	f7fe ff93 	bl	8009146 <_lseek>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d102      	bne.n	800a22a <_lseek_r+0x1e>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	b103      	cbz	r3, 800a22a <_lseek_r+0x1e>
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	20000390 	.word	0x20000390

0800a230 <memchr>:
 800a230:	4603      	mov	r3, r0
 800a232:	b510      	push	{r4, lr}
 800a234:	b2c9      	uxtb	r1, r1
 800a236:	4402      	add	r2, r0
 800a238:	4293      	cmp	r3, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	d101      	bne.n	800a242 <memchr+0x12>
 800a23e:	2000      	movs	r0, #0
 800a240:	e003      	b.n	800a24a <memchr+0x1a>
 800a242:	7804      	ldrb	r4, [r0, #0]
 800a244:	3301      	adds	r3, #1
 800a246:	428c      	cmp	r4, r1
 800a248:	d1f6      	bne.n	800a238 <memchr+0x8>
 800a24a:	bd10      	pop	{r4, pc}

0800a24c <__malloc_lock>:
 800a24c:	4801      	ldr	r0, [pc, #4]	; (800a254 <__malloc_lock+0x8>)
 800a24e:	f7ff bb13 	b.w	8009878 <__retarget_lock_acquire_recursive>
 800a252:	bf00      	nop
 800a254:	20000384 	.word	0x20000384

0800a258 <__malloc_unlock>:
 800a258:	4801      	ldr	r0, [pc, #4]	; (800a260 <__malloc_unlock+0x8>)
 800a25a:	f7ff bb0e 	b.w	800987a <__retarget_lock_release_recursive>
 800a25e:	bf00      	nop
 800a260:	20000384 	.word	0x20000384

0800a264 <_read_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	4611      	mov	r1, r2
 800a26c:	2200      	movs	r2, #0
 800a26e:	4d05      	ldr	r5, [pc, #20]	; (800a284 <_read_r+0x20>)
 800a270:	602a      	str	r2, [r5, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	f7fe ff26 	bl	80090c4 <_read>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d102      	bne.n	800a282 <_read_r+0x1e>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	b103      	cbz	r3, 800a282 <_read_r+0x1e>
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	20000390 	.word	0x20000390

0800a288 <pow>:
 800a288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a28c:	4614      	mov	r4, r2
 800a28e:	461d      	mov	r5, r3
 800a290:	4680      	mov	r8, r0
 800a292:	4689      	mov	r9, r1
 800a294:	f000 f89c 	bl	800a3d0 <__ieee754_pow>
 800a298:	4622      	mov	r2, r4
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	462b      	mov	r3, r5
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	f7f6 fbaa 	bl	80009fc <__aeabi_dcmpun>
 800a2a8:	bbc8      	cbnz	r0, 800a31e <pow+0x96>
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	4649      	mov	r1, r9
 800a2b2:	f7f6 fb71 	bl	8000998 <__aeabi_dcmpeq>
 800a2b6:	b1b8      	cbz	r0, 800a2e8 <pow+0x60>
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4620      	mov	r0, r4
 800a2be:	4629      	mov	r1, r5
 800a2c0:	f7f6 fb6a 	bl	8000998 <__aeabi_dcmpeq>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d141      	bne.n	800a34c <pow+0xc4>
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	f001 f890 	bl	800b3f0 <finite>
 800a2d0:	b328      	cbz	r0, 800a31e <pow+0x96>
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	4629      	mov	r1, r5
 800a2da:	f7f6 fb67 	bl	80009ac <__aeabi_dcmplt>
 800a2de:	b1f0      	cbz	r0, 800a31e <pow+0x96>
 800a2e0:	f7fe ff96 	bl	8009210 <__errno>
 800a2e4:	2322      	movs	r3, #34	; 0x22
 800a2e6:	e019      	b.n	800a31c <pow+0x94>
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f001 f880 	bl	800b3f0 <finite>
 800a2f0:	b9c8      	cbnz	r0, 800a326 <pow+0x9e>
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	f001 f87b 	bl	800b3f0 <finite>
 800a2fa:	b1a0      	cbz	r0, 800a326 <pow+0x9e>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	f001 f876 	bl	800b3f0 <finite>
 800a304:	b178      	cbz	r0, 800a326 <pow+0x9e>
 800a306:	4632      	mov	r2, r6
 800a308:	463b      	mov	r3, r7
 800a30a:	4630      	mov	r0, r6
 800a30c:	4639      	mov	r1, r7
 800a30e:	f7f6 fb75 	bl	80009fc <__aeabi_dcmpun>
 800a312:	2800      	cmp	r0, #0
 800a314:	d0e4      	beq.n	800a2e0 <pow+0x58>
 800a316:	f7fe ff7b 	bl	8009210 <__errno>
 800a31a:	2321      	movs	r3, #33	; 0x21
 800a31c:	6003      	str	r3, [r0, #0]
 800a31e:	4630      	mov	r0, r6
 800a320:	4639      	mov	r1, r7
 800a322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a326:	2200      	movs	r2, #0
 800a328:	2300      	movs	r3, #0
 800a32a:	4630      	mov	r0, r6
 800a32c:	4639      	mov	r1, r7
 800a32e:	f7f6 fb33 	bl	8000998 <__aeabi_dcmpeq>
 800a332:	2800      	cmp	r0, #0
 800a334:	d0f3      	beq.n	800a31e <pow+0x96>
 800a336:	4640      	mov	r0, r8
 800a338:	4649      	mov	r1, r9
 800a33a:	f001 f859 	bl	800b3f0 <finite>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d0ed      	beq.n	800a31e <pow+0x96>
 800a342:	4620      	mov	r0, r4
 800a344:	4629      	mov	r1, r5
 800a346:	f001 f853 	bl	800b3f0 <finite>
 800a34a:	e7c8      	b.n	800a2de <pow+0x56>
 800a34c:	2600      	movs	r6, #0
 800a34e:	4f01      	ldr	r7, [pc, #4]	; (800a354 <pow+0xcc>)
 800a350:	e7e5      	b.n	800a31e <pow+0x96>
 800a352:	bf00      	nop
 800a354:	3ff00000 	.word	0x3ff00000

0800a358 <asinf>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4604      	mov	r4, r0
 800a35c:	f000 fdfe 	bl	800af5c <__ieee754_asinf>
 800a360:	4621      	mov	r1, r4
 800a362:	4605      	mov	r5, r0
 800a364:	4620      	mov	r0, r4
 800a366:	f7f6 fea3 	bl	80010b0 <__aeabi_fcmpun>
 800a36a:	b980      	cbnz	r0, 800a38e <asinf+0x36>
 800a36c:	4620      	mov	r0, r4
 800a36e:	f001 f9d1 	bl	800b714 <fabsf>
 800a372:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a376:	f7f6 fe91 	bl	800109c <__aeabi_fcmpgt>
 800a37a:	b140      	cbz	r0, 800a38e <asinf+0x36>
 800a37c:	f7fe ff48 	bl	8009210 <__errno>
 800a380:	2321      	movs	r3, #33	; 0x21
 800a382:	6003      	str	r3, [r0, #0]
 800a384:	4803      	ldr	r0, [pc, #12]	; (800a394 <asinf+0x3c>)
 800a386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a38a:	f001 b9c7 	b.w	800b71c <nanf>
 800a38e:	4628      	mov	r0, r5
 800a390:	bd38      	pop	{r3, r4, r5, pc}
 800a392:	bf00      	nop
 800a394:	0800b84d 	.word	0x0800b84d

0800a398 <atan2f>:
 800a398:	f000 bf24 	b.w	800b1e4 <__ieee754_atan2f>

0800a39c <sqrtf>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4605      	mov	r5, r0
 800a3a0:	f000 ffa6 	bl	800b2f0 <__ieee754_sqrtf>
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f7f6 fe81 	bl	80010b0 <__aeabi_fcmpun>
 800a3ae:	b968      	cbnz	r0, 800a3cc <sqrtf+0x30>
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f7f6 fe54 	bl	8001060 <__aeabi_fcmplt>
 800a3b8:	b140      	cbz	r0, 800a3cc <sqrtf+0x30>
 800a3ba:	f7fe ff29 	bl	8009210 <__errno>
 800a3be:	2321      	movs	r3, #33	; 0x21
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	6003      	str	r3, [r0, #0]
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	f7f6 fd61 	bl	8000e8c <__aeabi_fdiv>
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}

0800a3d0 <__ieee754_pow>:
 800a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	b093      	sub	sp, #76	; 0x4c
 800a3d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3da:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800a3de:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a3e2:	4689      	mov	r9, r1
 800a3e4:	ea56 0102 	orrs.w	r1, r6, r2
 800a3e8:	4680      	mov	r8, r0
 800a3ea:	d111      	bne.n	800a410 <__ieee754_pow+0x40>
 800a3ec:	1803      	adds	r3, r0, r0
 800a3ee:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800a3f2:	4152      	adcs	r2, r2
 800a3f4:	4299      	cmp	r1, r3
 800a3f6:	4b82      	ldr	r3, [pc, #520]	; (800a600 <__ieee754_pow+0x230>)
 800a3f8:	4193      	sbcs	r3, r2
 800a3fa:	f080 84b9 	bcs.w	800ad70 <__ieee754_pow+0x9a0>
 800a3fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a402:	4640      	mov	r0, r8
 800a404:	4649      	mov	r1, r9
 800a406:	f7f5 fea9 	bl	800015c <__adddf3>
 800a40a:	4683      	mov	fp, r0
 800a40c:	468c      	mov	ip, r1
 800a40e:	e06f      	b.n	800a4f0 <__ieee754_pow+0x120>
 800a410:	4b7c      	ldr	r3, [pc, #496]	; (800a604 <__ieee754_pow+0x234>)
 800a412:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800a416:	429c      	cmp	r4, r3
 800a418:	464d      	mov	r5, r9
 800a41a:	4682      	mov	sl, r0
 800a41c:	dc06      	bgt.n	800a42c <__ieee754_pow+0x5c>
 800a41e:	d101      	bne.n	800a424 <__ieee754_pow+0x54>
 800a420:	2800      	cmp	r0, #0
 800a422:	d1ec      	bne.n	800a3fe <__ieee754_pow+0x2e>
 800a424:	429e      	cmp	r6, r3
 800a426:	dc01      	bgt.n	800a42c <__ieee754_pow+0x5c>
 800a428:	d10f      	bne.n	800a44a <__ieee754_pow+0x7a>
 800a42a:	b172      	cbz	r2, 800a44a <__ieee754_pow+0x7a>
 800a42c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a430:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a434:	ea55 050a 	orrs.w	r5, r5, sl
 800a438:	d1e1      	bne.n	800a3fe <__ieee754_pow+0x2e>
 800a43a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a43e:	18db      	adds	r3, r3, r3
 800a440:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a444:	4152      	adcs	r2, r2
 800a446:	429d      	cmp	r5, r3
 800a448:	e7d5      	b.n	800a3f6 <__ieee754_pow+0x26>
 800a44a:	2d00      	cmp	r5, #0
 800a44c:	da39      	bge.n	800a4c2 <__ieee754_pow+0xf2>
 800a44e:	4b6e      	ldr	r3, [pc, #440]	; (800a608 <__ieee754_pow+0x238>)
 800a450:	429e      	cmp	r6, r3
 800a452:	dc52      	bgt.n	800a4fa <__ieee754_pow+0x12a>
 800a454:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a458:	429e      	cmp	r6, r3
 800a45a:	f340 849c 	ble.w	800ad96 <__ieee754_pow+0x9c6>
 800a45e:	1533      	asrs	r3, r6, #20
 800a460:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a464:	2b14      	cmp	r3, #20
 800a466:	dd0f      	ble.n	800a488 <__ieee754_pow+0xb8>
 800a468:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a46c:	fa22 f103 	lsr.w	r1, r2, r3
 800a470:	fa01 f303 	lsl.w	r3, r1, r3
 800a474:	4293      	cmp	r3, r2
 800a476:	f040 848e 	bne.w	800ad96 <__ieee754_pow+0x9c6>
 800a47a:	f001 0101 	and.w	r1, r1, #1
 800a47e:	f1c1 0302 	rsb	r3, r1, #2
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	b182      	cbz	r2, 800a4a8 <__ieee754_pow+0xd8>
 800a486:	e05d      	b.n	800a544 <__ieee754_pow+0x174>
 800a488:	2a00      	cmp	r2, #0
 800a48a:	d159      	bne.n	800a540 <__ieee754_pow+0x170>
 800a48c:	f1c3 0314 	rsb	r3, r3, #20
 800a490:	fa46 f103 	asr.w	r1, r6, r3
 800a494:	fa01 f303 	lsl.w	r3, r1, r3
 800a498:	42b3      	cmp	r3, r6
 800a49a:	f040 8479 	bne.w	800ad90 <__ieee754_pow+0x9c0>
 800a49e:	f001 0101 	and.w	r1, r1, #1
 800a4a2:	f1c1 0302 	rsb	r3, r1, #2
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	4b58      	ldr	r3, [pc, #352]	; (800a60c <__ieee754_pow+0x23c>)
 800a4aa:	429e      	cmp	r6, r3
 800a4ac:	d132      	bne.n	800a514 <__ieee754_pow+0x144>
 800a4ae:	2f00      	cmp	r7, #0
 800a4b0:	f280 846a 	bge.w	800ad88 <__ieee754_pow+0x9b8>
 800a4b4:	4642      	mov	r2, r8
 800a4b6:	464b      	mov	r3, r9
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	4954      	ldr	r1, [pc, #336]	; (800a60c <__ieee754_pow+0x23c>)
 800a4bc:	f7f6 f92e 	bl	800071c <__aeabi_ddiv>
 800a4c0:	e7a3      	b.n	800a40a <__ieee754_pow+0x3a>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	2a00      	cmp	r2, #0
 800a4c8:	d13c      	bne.n	800a544 <__ieee754_pow+0x174>
 800a4ca:	4b4e      	ldr	r3, [pc, #312]	; (800a604 <__ieee754_pow+0x234>)
 800a4cc:	429e      	cmp	r6, r3
 800a4ce:	d1eb      	bne.n	800a4a8 <__ieee754_pow+0xd8>
 800a4d0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a4d4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a4d8:	ea53 030a 	orrs.w	r3, r3, sl
 800a4dc:	f000 8448 	beq.w	800ad70 <__ieee754_pow+0x9a0>
 800a4e0:	4b4b      	ldr	r3, [pc, #300]	; (800a610 <__ieee754_pow+0x240>)
 800a4e2:	429c      	cmp	r4, r3
 800a4e4:	dd0b      	ble.n	800a4fe <__ieee754_pow+0x12e>
 800a4e6:	2f00      	cmp	r7, #0
 800a4e8:	f2c0 8448 	blt.w	800ad7c <__ieee754_pow+0x9ac>
 800a4ec:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a4f0:	4658      	mov	r0, fp
 800a4f2:	4661      	mov	r1, ip
 800a4f4:	b013      	add	sp, #76	; 0x4c
 800a4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e7e2      	b.n	800a4c4 <__ieee754_pow+0xf4>
 800a4fe:	2f00      	cmp	r7, #0
 800a500:	f04f 0b00 	mov.w	fp, #0
 800a504:	f04f 0c00 	mov.w	ip, #0
 800a508:	daf2      	bge.n	800a4f0 <__ieee754_pow+0x120>
 800a50a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a50e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a512:	e7ed      	b.n	800a4f0 <__ieee754_pow+0x120>
 800a514:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a518:	d106      	bne.n	800a528 <__ieee754_pow+0x158>
 800a51a:	4642      	mov	r2, r8
 800a51c:	464b      	mov	r3, r9
 800a51e:	4640      	mov	r0, r8
 800a520:	4649      	mov	r1, r9
 800a522:	f7f5 ffd1 	bl	80004c8 <__aeabi_dmul>
 800a526:	e770      	b.n	800a40a <__ieee754_pow+0x3a>
 800a528:	4b3a      	ldr	r3, [pc, #232]	; (800a614 <__ieee754_pow+0x244>)
 800a52a:	429f      	cmp	r7, r3
 800a52c:	d10a      	bne.n	800a544 <__ieee754_pow+0x174>
 800a52e:	2d00      	cmp	r5, #0
 800a530:	db08      	blt.n	800a544 <__ieee754_pow+0x174>
 800a532:	4640      	mov	r0, r8
 800a534:	4649      	mov	r1, r9
 800a536:	b013      	add	sp, #76	; 0x4c
 800a538:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53c:	f000 bc5e 	b.w	800adfc <__ieee754_sqrt>
 800a540:	2300      	movs	r3, #0
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	4640      	mov	r0, r8
 800a546:	4649      	mov	r1, r9
 800a548:	f000 ff4f 	bl	800b3ea <fabs>
 800a54c:	4683      	mov	fp, r0
 800a54e:	468c      	mov	ip, r1
 800a550:	f1ba 0f00 	cmp.w	sl, #0
 800a554:	d128      	bne.n	800a5a8 <__ieee754_pow+0x1d8>
 800a556:	b124      	cbz	r4, 800a562 <__ieee754_pow+0x192>
 800a558:	4b2c      	ldr	r3, [pc, #176]	; (800a60c <__ieee754_pow+0x23c>)
 800a55a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a55e:	429a      	cmp	r2, r3
 800a560:	d122      	bne.n	800a5a8 <__ieee754_pow+0x1d8>
 800a562:	2f00      	cmp	r7, #0
 800a564:	da07      	bge.n	800a576 <__ieee754_pow+0x1a6>
 800a566:	465a      	mov	r2, fp
 800a568:	4663      	mov	r3, ip
 800a56a:	2000      	movs	r0, #0
 800a56c:	4927      	ldr	r1, [pc, #156]	; (800a60c <__ieee754_pow+0x23c>)
 800a56e:	f7f6 f8d5 	bl	800071c <__aeabi_ddiv>
 800a572:	4683      	mov	fp, r0
 800a574:	468c      	mov	ip, r1
 800a576:	2d00      	cmp	r5, #0
 800a578:	daba      	bge.n	800a4f0 <__ieee754_pow+0x120>
 800a57a:	9b00      	ldr	r3, [sp, #0]
 800a57c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a580:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a584:	4323      	orrs	r3, r4
 800a586:	d108      	bne.n	800a59a <__ieee754_pow+0x1ca>
 800a588:	465a      	mov	r2, fp
 800a58a:	4663      	mov	r3, ip
 800a58c:	4658      	mov	r0, fp
 800a58e:	4661      	mov	r1, ip
 800a590:	f7f5 fde2 	bl	8000158 <__aeabi_dsub>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	e790      	b.n	800a4bc <__ieee754_pow+0xec>
 800a59a:	9b00      	ldr	r3, [sp, #0]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d1a7      	bne.n	800a4f0 <__ieee754_pow+0x120>
 800a5a0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a5a4:	469c      	mov	ip, r3
 800a5a6:	e7a3      	b.n	800a4f0 <__ieee754_pow+0x120>
 800a5a8:	0feb      	lsrs	r3, r5, #31
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	930c      	str	r3, [sp, #48]	; 0x30
 800a5ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5b0:	9b00      	ldr	r3, [sp, #0]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	d104      	bne.n	800a5c0 <__ieee754_pow+0x1f0>
 800a5b6:	4642      	mov	r2, r8
 800a5b8:	464b      	mov	r3, r9
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	4649      	mov	r1, r9
 800a5be:	e7e7      	b.n	800a590 <__ieee754_pow+0x1c0>
 800a5c0:	4b15      	ldr	r3, [pc, #84]	; (800a618 <__ieee754_pow+0x248>)
 800a5c2:	429e      	cmp	r6, r3
 800a5c4:	f340 80f6 	ble.w	800a7b4 <__ieee754_pow+0x3e4>
 800a5c8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a5cc:	429e      	cmp	r6, r3
 800a5ce:	4b10      	ldr	r3, [pc, #64]	; (800a610 <__ieee754_pow+0x240>)
 800a5d0:	dd09      	ble.n	800a5e6 <__ieee754_pow+0x216>
 800a5d2:	429c      	cmp	r4, r3
 800a5d4:	dc0c      	bgt.n	800a5f0 <__ieee754_pow+0x220>
 800a5d6:	2f00      	cmp	r7, #0
 800a5d8:	da0c      	bge.n	800a5f4 <__ieee754_pow+0x224>
 800a5da:	2000      	movs	r0, #0
 800a5dc:	b013      	add	sp, #76	; 0x4c
 800a5de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e2:	f000 befd 	b.w	800b3e0 <__math_oflow>
 800a5e6:	429c      	cmp	r4, r3
 800a5e8:	dbf5      	blt.n	800a5d6 <__ieee754_pow+0x206>
 800a5ea:	4b08      	ldr	r3, [pc, #32]	; (800a60c <__ieee754_pow+0x23c>)
 800a5ec:	429c      	cmp	r4, r3
 800a5ee:	dd15      	ble.n	800a61c <__ieee754_pow+0x24c>
 800a5f0:	2f00      	cmp	r7, #0
 800a5f2:	dcf2      	bgt.n	800a5da <__ieee754_pow+0x20a>
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	b013      	add	sp, #76	; 0x4c
 800a5f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	f000 beeb 	b.w	800b3d6 <__math_uflow>
 800a600:	fff00000 	.word	0xfff00000
 800a604:	7ff00000 	.word	0x7ff00000
 800a608:	433fffff 	.word	0x433fffff
 800a60c:	3ff00000 	.word	0x3ff00000
 800a610:	3fefffff 	.word	0x3fefffff
 800a614:	3fe00000 	.word	0x3fe00000
 800a618:	41e00000 	.word	0x41e00000
 800a61c:	4661      	mov	r1, ip
 800a61e:	2200      	movs	r2, #0
 800a620:	4658      	mov	r0, fp
 800a622:	4b5f      	ldr	r3, [pc, #380]	; (800a7a0 <__ieee754_pow+0x3d0>)
 800a624:	f7f5 fd98 	bl	8000158 <__aeabi_dsub>
 800a628:	a355      	add	r3, pc, #340	; (adr r3, 800a780 <__ieee754_pow+0x3b0>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	4604      	mov	r4, r0
 800a630:	460d      	mov	r5, r1
 800a632:	f7f5 ff49 	bl	80004c8 <__aeabi_dmul>
 800a636:	a354      	add	r3, pc, #336	; (adr r3, 800a788 <__ieee754_pow+0x3b8>)
 800a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63c:	4606      	mov	r6, r0
 800a63e:	460f      	mov	r7, r1
 800a640:	4620      	mov	r0, r4
 800a642:	4629      	mov	r1, r5
 800a644:	f7f5 ff40 	bl	80004c8 <__aeabi_dmul>
 800a648:	2200      	movs	r2, #0
 800a64a:	4682      	mov	sl, r0
 800a64c:	468b      	mov	fp, r1
 800a64e:	4620      	mov	r0, r4
 800a650:	4629      	mov	r1, r5
 800a652:	4b54      	ldr	r3, [pc, #336]	; (800a7a4 <__ieee754_pow+0x3d4>)
 800a654:	f7f5 ff38 	bl	80004c8 <__aeabi_dmul>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	a14c      	add	r1, pc, #304	; (adr r1, 800a790 <__ieee754_pow+0x3c0>)
 800a65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a662:	f7f5 fd79 	bl	8000158 <__aeabi_dsub>
 800a666:	4622      	mov	r2, r4
 800a668:	462b      	mov	r3, r5
 800a66a:	f7f5 ff2d 	bl	80004c8 <__aeabi_dmul>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	2000      	movs	r0, #0
 800a674:	494c      	ldr	r1, [pc, #304]	; (800a7a8 <__ieee754_pow+0x3d8>)
 800a676:	f7f5 fd6f 	bl	8000158 <__aeabi_dsub>
 800a67a:	4622      	mov	r2, r4
 800a67c:	462b      	mov	r3, r5
 800a67e:	4680      	mov	r8, r0
 800a680:	4689      	mov	r9, r1
 800a682:	4620      	mov	r0, r4
 800a684:	4629      	mov	r1, r5
 800a686:	f7f5 ff1f 	bl	80004c8 <__aeabi_dmul>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	4640      	mov	r0, r8
 800a690:	4649      	mov	r1, r9
 800a692:	f7f5 ff19 	bl	80004c8 <__aeabi_dmul>
 800a696:	a340      	add	r3, pc, #256	; (adr r3, 800a798 <__ieee754_pow+0x3c8>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	f7f5 ff14 	bl	80004c8 <__aeabi_dmul>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4650      	mov	r0, sl
 800a6a6:	4659      	mov	r1, fp
 800a6a8:	f7f5 fd56 	bl	8000158 <__aeabi_dsub>
 800a6ac:	f04f 0a00 	mov.w	sl, #0
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	f7f5 fd4e 	bl	800015c <__adddf3>
 800a6c0:	4632      	mov	r2, r6
 800a6c2:	463b      	mov	r3, r7
 800a6c4:	4650      	mov	r0, sl
 800a6c6:	468b      	mov	fp, r1
 800a6c8:	f7f5 fd46 	bl	8000158 <__aeabi_dsub>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	f7f5 fd40 	bl	8000158 <__aeabi_dsub>
 800a6d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6dc:	9b00      	ldr	r3, [sp, #0]
 800a6de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	f04f 0600 	mov.w	r6, #0
 800a6e8:	f04f 0200 	mov.w	r2, #0
 800a6ec:	bf0c      	ite	eq
 800a6ee:	4b2f      	ldreq	r3, [pc, #188]	; (800a7ac <__ieee754_pow+0x3dc>)
 800a6f0:	4b2b      	ldrne	r3, [pc, #172]	; (800a7a0 <__ieee754_pow+0x3d0>)
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	460d      	mov	r5, r1
 800a6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6fa:	e9cd 2300 	strd	r2, r3, [sp]
 800a6fe:	4632      	mov	r2, r6
 800a700:	463b      	mov	r3, r7
 800a702:	f7f5 fd29 	bl	8000158 <__aeabi_dsub>
 800a706:	4652      	mov	r2, sl
 800a708:	465b      	mov	r3, fp
 800a70a:	f7f5 fedd 	bl	80004c8 <__aeabi_dmul>
 800a70e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a712:	4680      	mov	r8, r0
 800a714:	4689      	mov	r9, r1
 800a716:	4620      	mov	r0, r4
 800a718:	4629      	mov	r1, r5
 800a71a:	f7f5 fed5 	bl	80004c8 <__aeabi_dmul>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	4640      	mov	r0, r8
 800a724:	4649      	mov	r1, r9
 800a726:	f7f5 fd19 	bl	800015c <__adddf3>
 800a72a:	4632      	mov	r2, r6
 800a72c:	463b      	mov	r3, r7
 800a72e:	4680      	mov	r8, r0
 800a730:	4689      	mov	r9, r1
 800a732:	4650      	mov	r0, sl
 800a734:	4659      	mov	r1, fp
 800a736:	f7f5 fec7 	bl	80004c8 <__aeabi_dmul>
 800a73a:	4604      	mov	r4, r0
 800a73c:	460d      	mov	r5, r1
 800a73e:	460b      	mov	r3, r1
 800a740:	4602      	mov	r2, r0
 800a742:	4649      	mov	r1, r9
 800a744:	4640      	mov	r0, r8
 800a746:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a74a:	f7f5 fd07 	bl	800015c <__adddf3>
 800a74e:	4b18      	ldr	r3, [pc, #96]	; (800a7b0 <__ieee754_pow+0x3e0>)
 800a750:	4682      	mov	sl, r0
 800a752:	4299      	cmp	r1, r3
 800a754:	460f      	mov	r7, r1
 800a756:	460e      	mov	r6, r1
 800a758:	f340 82e5 	ble.w	800ad26 <__ieee754_pow+0x956>
 800a75c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a760:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a764:	4303      	orrs	r3, r0
 800a766:	f000 81df 	beq.w	800ab28 <__ieee754_pow+0x758>
 800a76a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a76e:	2200      	movs	r2, #0
 800a770:	2300      	movs	r3, #0
 800a772:	f7f6 f91b 	bl	80009ac <__aeabi_dcmplt>
 800a776:	3800      	subs	r0, #0
 800a778:	bf18      	it	ne
 800a77a:	2001      	movne	r0, #1
 800a77c:	e72e      	b.n	800a5dc <__ieee754_pow+0x20c>
 800a77e:	bf00      	nop
 800a780:	60000000 	.word	0x60000000
 800a784:	3ff71547 	.word	0x3ff71547
 800a788:	f85ddf44 	.word	0xf85ddf44
 800a78c:	3e54ae0b 	.word	0x3e54ae0b
 800a790:	55555555 	.word	0x55555555
 800a794:	3fd55555 	.word	0x3fd55555
 800a798:	652b82fe 	.word	0x652b82fe
 800a79c:	3ff71547 	.word	0x3ff71547
 800a7a0:	3ff00000 	.word	0x3ff00000
 800a7a4:	3fd00000 	.word	0x3fd00000
 800a7a8:	3fe00000 	.word	0x3fe00000
 800a7ac:	bff00000 	.word	0xbff00000
 800a7b0:	408fffff 	.word	0x408fffff
 800a7b4:	4bd2      	ldr	r3, [pc, #840]	; (800ab00 <__ieee754_pow+0x730>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	402b      	ands	r3, r5
 800a7ba:	b943      	cbnz	r3, 800a7ce <__ieee754_pow+0x3fe>
 800a7bc:	4658      	mov	r0, fp
 800a7be:	4661      	mov	r1, ip
 800a7c0:	4bd0      	ldr	r3, [pc, #832]	; (800ab04 <__ieee754_pow+0x734>)
 800a7c2:	f7f5 fe81 	bl	80004c8 <__aeabi_dmul>
 800a7c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a7ca:	4683      	mov	fp, r0
 800a7cc:	460c      	mov	r4, r1
 800a7ce:	1523      	asrs	r3, r4, #20
 800a7d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a7d4:	4413      	add	r3, r2
 800a7d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7d8:	4bcb      	ldr	r3, [pc, #812]	; (800ab08 <__ieee754_pow+0x738>)
 800a7da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a7de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a7e2:	429c      	cmp	r4, r3
 800a7e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a7e8:	dd08      	ble.n	800a7fc <__ieee754_pow+0x42c>
 800a7ea:	4bc8      	ldr	r3, [pc, #800]	; (800ab0c <__ieee754_pow+0x73c>)
 800a7ec:	429c      	cmp	r4, r3
 800a7ee:	f340 8199 	ble.w	800ab24 <__ieee754_pow+0x754>
 800a7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7f4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7fc:	2600      	movs	r6, #0
 800a7fe:	00f3      	lsls	r3, r6, #3
 800a800:	930d      	str	r3, [sp, #52]	; 0x34
 800a802:	4bc3      	ldr	r3, [pc, #780]	; (800ab10 <__ieee754_pow+0x740>)
 800a804:	4658      	mov	r0, fp
 800a806:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a80a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a80e:	4629      	mov	r1, r5
 800a810:	461a      	mov	r2, r3
 800a812:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a816:	4623      	mov	r3, r4
 800a818:	f7f5 fc9e 	bl	8000158 <__aeabi_dsub>
 800a81c:	46da      	mov	sl, fp
 800a81e:	462b      	mov	r3, r5
 800a820:	4652      	mov	r2, sl
 800a822:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a826:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a82a:	f7f5 fc97 	bl	800015c <__adddf3>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	2000      	movs	r0, #0
 800a834:	49b7      	ldr	r1, [pc, #732]	; (800ab14 <__ieee754_pow+0x744>)
 800a836:	f7f5 ff71 	bl	800071c <__aeabi_ddiv>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a842:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a846:	f7f5 fe3f 	bl	80004c8 <__aeabi_dmul>
 800a84a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a84e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a852:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a856:	2300      	movs	r3, #0
 800a858:	2200      	movs	r2, #0
 800a85a:	46ab      	mov	fp, r5
 800a85c:	106d      	asrs	r5, r5, #1
 800a85e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a868:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a86c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a870:	4640      	mov	r0, r8
 800a872:	4649      	mov	r1, r9
 800a874:	4614      	mov	r4, r2
 800a876:	461d      	mov	r5, r3
 800a878:	f7f5 fe26 	bl	80004c8 <__aeabi_dmul>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a884:	f7f5 fc68 	bl	8000158 <__aeabi_dsub>
 800a888:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a88c:	4606      	mov	r6, r0
 800a88e:	460f      	mov	r7, r1
 800a890:	4620      	mov	r0, r4
 800a892:	4629      	mov	r1, r5
 800a894:	f7f5 fc60 	bl	8000158 <__aeabi_dsub>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4650      	mov	r0, sl
 800a89e:	4659      	mov	r1, fp
 800a8a0:	f7f5 fc5a 	bl	8000158 <__aeabi_dsub>
 800a8a4:	4642      	mov	r2, r8
 800a8a6:	464b      	mov	r3, r9
 800a8a8:	f7f5 fe0e 	bl	80004c8 <__aeabi_dmul>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f5 fc50 	bl	8000158 <__aeabi_dsub>
 800a8b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8bc:	f7f5 fe04 	bl	80004c8 <__aeabi_dmul>
 800a8c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	f7f5 fdfc 	bl	80004c8 <__aeabi_dmul>
 800a8d0:	a379      	add	r3, pc, #484	; (adr r3, 800aab8 <__ieee754_pow+0x6e8>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	460d      	mov	r5, r1
 800a8da:	f7f5 fdf5 	bl	80004c8 <__aeabi_dmul>
 800a8de:	a378      	add	r3, pc, #480	; (adr r3, 800aac0 <__ieee754_pow+0x6f0>)
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	f7f5 fc3a 	bl	800015c <__adddf3>
 800a8e8:	4622      	mov	r2, r4
 800a8ea:	462b      	mov	r3, r5
 800a8ec:	f7f5 fdec 	bl	80004c8 <__aeabi_dmul>
 800a8f0:	a375      	add	r3, pc, #468	; (adr r3, 800aac8 <__ieee754_pow+0x6f8>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f7f5 fc31 	bl	800015c <__adddf3>
 800a8fa:	4622      	mov	r2, r4
 800a8fc:	462b      	mov	r3, r5
 800a8fe:	f7f5 fde3 	bl	80004c8 <__aeabi_dmul>
 800a902:	a373      	add	r3, pc, #460	; (adr r3, 800aad0 <__ieee754_pow+0x700>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	f7f5 fc28 	bl	800015c <__adddf3>
 800a90c:	4622      	mov	r2, r4
 800a90e:	462b      	mov	r3, r5
 800a910:	f7f5 fdda 	bl	80004c8 <__aeabi_dmul>
 800a914:	a370      	add	r3, pc, #448	; (adr r3, 800aad8 <__ieee754_pow+0x708>)
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f7f5 fc1f 	bl	800015c <__adddf3>
 800a91e:	4622      	mov	r2, r4
 800a920:	462b      	mov	r3, r5
 800a922:	f7f5 fdd1 	bl	80004c8 <__aeabi_dmul>
 800a926:	a36e      	add	r3, pc, #440	; (adr r3, 800aae0 <__ieee754_pow+0x710>)
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f7f5 fc16 	bl	800015c <__adddf3>
 800a930:	4622      	mov	r2, r4
 800a932:	4606      	mov	r6, r0
 800a934:	460f      	mov	r7, r1
 800a936:	462b      	mov	r3, r5
 800a938:	4620      	mov	r0, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7f5 fdc4 	bl	80004c8 <__aeabi_dmul>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	4630      	mov	r0, r6
 800a946:	4639      	mov	r1, r7
 800a948:	f7f5 fdbe 	bl	80004c8 <__aeabi_dmul>
 800a94c:	4604      	mov	r4, r0
 800a94e:	460d      	mov	r5, r1
 800a950:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a954:	4642      	mov	r2, r8
 800a956:	464b      	mov	r3, r9
 800a958:	f7f5 fc00 	bl	800015c <__adddf3>
 800a95c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a960:	f7f5 fdb2 	bl	80004c8 <__aeabi_dmul>
 800a964:	4622      	mov	r2, r4
 800a966:	462b      	mov	r3, r5
 800a968:	f7f5 fbf8 	bl	800015c <__adddf3>
 800a96c:	4642      	mov	r2, r8
 800a96e:	4606      	mov	r6, r0
 800a970:	460f      	mov	r7, r1
 800a972:	464b      	mov	r3, r9
 800a974:	4640      	mov	r0, r8
 800a976:	4649      	mov	r1, r9
 800a978:	f7f5 fda6 	bl	80004c8 <__aeabi_dmul>
 800a97c:	2200      	movs	r2, #0
 800a97e:	4b66      	ldr	r3, [pc, #408]	; (800ab18 <__ieee754_pow+0x748>)
 800a980:	4682      	mov	sl, r0
 800a982:	468b      	mov	fp, r1
 800a984:	f7f5 fbea 	bl	800015c <__adddf3>
 800a988:	4632      	mov	r2, r6
 800a98a:	463b      	mov	r3, r7
 800a98c:	f7f5 fbe6 	bl	800015c <__adddf3>
 800a990:	2400      	movs	r4, #0
 800a992:	460d      	mov	r5, r1
 800a994:	4622      	mov	r2, r4
 800a996:	460b      	mov	r3, r1
 800a998:	4640      	mov	r0, r8
 800a99a:	4649      	mov	r1, r9
 800a99c:	f7f5 fd94 	bl	80004c8 <__aeabi_dmul>
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	4689      	mov	r9, r1
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	4b5b      	ldr	r3, [pc, #364]	; (800ab18 <__ieee754_pow+0x748>)
 800a9ac:	f7f5 fbd4 	bl	8000158 <__aeabi_dsub>
 800a9b0:	4652      	mov	r2, sl
 800a9b2:	465b      	mov	r3, fp
 800a9b4:	f7f5 fbd0 	bl	8000158 <__aeabi_dsub>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4630      	mov	r0, r6
 800a9be:	4639      	mov	r1, r7
 800a9c0:	f7f5 fbca 	bl	8000158 <__aeabi_dsub>
 800a9c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9c8:	f7f5 fd7e 	bl	80004c8 <__aeabi_dmul>
 800a9cc:	4622      	mov	r2, r4
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9d6:	462b      	mov	r3, r5
 800a9d8:	f7f5 fd76 	bl	80004c8 <__aeabi_dmul>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	4639      	mov	r1, r7
 800a9e4:	f7f5 fbba 	bl	800015c <__adddf3>
 800a9e8:	2400      	movs	r4, #0
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	460f      	mov	r7, r1
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	f7f5 fbb1 	bl	800015c <__adddf3>
 800a9fa:	a33b      	add	r3, pc, #236	; (adr r3, 800aae8 <__ieee754_pow+0x718>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	4620      	mov	r0, r4
 800aa02:	460d      	mov	r5, r1
 800aa04:	f7f5 fd60 	bl	80004c8 <__aeabi_dmul>
 800aa08:	4642      	mov	r2, r8
 800aa0a:	464b      	mov	r3, r9
 800aa0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa10:	4620      	mov	r0, r4
 800aa12:	4629      	mov	r1, r5
 800aa14:	f7f5 fba0 	bl	8000158 <__aeabi_dsub>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	4639      	mov	r1, r7
 800aa20:	f7f5 fb9a 	bl	8000158 <__aeabi_dsub>
 800aa24:	a332      	add	r3, pc, #200	; (adr r3, 800aaf0 <__ieee754_pow+0x720>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f7f5 fd4d 	bl	80004c8 <__aeabi_dmul>
 800aa2e:	a332      	add	r3, pc, #200	; (adr r3, 800aaf8 <__ieee754_pow+0x728>)
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	4606      	mov	r6, r0
 800aa36:	460f      	mov	r7, r1
 800aa38:	4620      	mov	r0, r4
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	f7f5 fd44 	bl	80004c8 <__aeabi_dmul>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4630      	mov	r0, r6
 800aa46:	4639      	mov	r1, r7
 800aa48:	f7f5 fb88 	bl	800015c <__adddf3>
 800aa4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa4e:	4b33      	ldr	r3, [pc, #204]	; (800ab1c <__ieee754_pow+0x74c>)
 800aa50:	f04f 0a00 	mov.w	sl, #0
 800aa54:	4413      	add	r3, r2
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	f7f5 fb7f 	bl	800015c <__adddf3>
 800aa5e:	4680      	mov	r8, r0
 800aa60:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aa62:	4689      	mov	r9, r1
 800aa64:	f7f5 fcc6 	bl	80003f4 <__aeabi_i2d>
 800aa68:	4604      	mov	r4, r0
 800aa6a:	460d      	mov	r5, r1
 800aa6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa6e:	4b2c      	ldr	r3, [pc, #176]	; (800ab20 <__ieee754_pow+0x750>)
 800aa70:	4413      	add	r3, r2
 800aa72:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aa76:	4642      	mov	r2, r8
 800aa78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa7c:	464b      	mov	r3, r9
 800aa7e:	f7f5 fb6d 	bl	800015c <__adddf3>
 800aa82:	4632      	mov	r2, r6
 800aa84:	463b      	mov	r3, r7
 800aa86:	f7f5 fb69 	bl	800015c <__adddf3>
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	f7f5 fb65 	bl	800015c <__adddf3>
 800aa92:	4622      	mov	r2, r4
 800aa94:	462b      	mov	r3, r5
 800aa96:	4650      	mov	r0, sl
 800aa98:	468b      	mov	fp, r1
 800aa9a:	f7f5 fb5d 	bl	8000158 <__aeabi_dsub>
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	463b      	mov	r3, r7
 800aaa2:	f7f5 fb59 	bl	8000158 <__aeabi_dsub>
 800aaa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaaa:	f7f5 fb55 	bl	8000158 <__aeabi_dsub>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4640      	mov	r0, r8
 800aab4:	4649      	mov	r1, r9
 800aab6:	e60d      	b.n	800a6d4 <__ieee754_pow+0x304>
 800aab8:	4a454eef 	.word	0x4a454eef
 800aabc:	3fca7e28 	.word	0x3fca7e28
 800aac0:	93c9db65 	.word	0x93c9db65
 800aac4:	3fcd864a 	.word	0x3fcd864a
 800aac8:	a91d4101 	.word	0xa91d4101
 800aacc:	3fd17460 	.word	0x3fd17460
 800aad0:	518f264d 	.word	0x518f264d
 800aad4:	3fd55555 	.word	0x3fd55555
 800aad8:	db6fabff 	.word	0xdb6fabff
 800aadc:	3fdb6db6 	.word	0x3fdb6db6
 800aae0:	33333303 	.word	0x33333303
 800aae4:	3fe33333 	.word	0x3fe33333
 800aae8:	e0000000 	.word	0xe0000000
 800aaec:	3feec709 	.word	0x3feec709
 800aaf0:	dc3a03fd 	.word	0xdc3a03fd
 800aaf4:	3feec709 	.word	0x3feec709
 800aaf8:	145b01f5 	.word	0x145b01f5
 800aafc:	be3e2fe0 	.word	0xbe3e2fe0
 800ab00:	7ff00000 	.word	0x7ff00000
 800ab04:	43400000 	.word	0x43400000
 800ab08:	0003988e 	.word	0x0003988e
 800ab0c:	000bb679 	.word	0x000bb679
 800ab10:	0800b880 	.word	0x0800b880
 800ab14:	3ff00000 	.word	0x3ff00000
 800ab18:	40080000 	.word	0x40080000
 800ab1c:	0800b8a0 	.word	0x0800b8a0
 800ab20:	0800b890 	.word	0x0800b890
 800ab24:	2601      	movs	r6, #1
 800ab26:	e66a      	b.n	800a7fe <__ieee754_pow+0x42e>
 800ab28:	a39d      	add	r3, pc, #628	; (adr r3, 800ada0 <__ieee754_pow+0x9d0>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	4640      	mov	r0, r8
 800ab30:	4649      	mov	r1, r9
 800ab32:	f7f5 fb13 	bl	800015c <__adddf3>
 800ab36:	4622      	mov	r2, r4
 800ab38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab3c:	462b      	mov	r3, r5
 800ab3e:	4650      	mov	r0, sl
 800ab40:	4639      	mov	r1, r7
 800ab42:	f7f5 fb09 	bl	8000158 <__aeabi_dsub>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab4e:	f7f5 ff4b 	bl	80009e8 <__aeabi_dcmpgt>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f47f ae09 	bne.w	800a76a <__ieee754_pow+0x39a>
 800ab58:	4aa3      	ldr	r2, [pc, #652]	; (800ade8 <__ieee754_pow+0xa18>)
 800ab5a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	f340 8101 	ble.w	800ad66 <__ieee754_pow+0x996>
 800ab64:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ab68:	2000      	movs	r0, #0
 800ab6a:	151b      	asrs	r3, r3, #20
 800ab6c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ab70:	fa4a f303 	asr.w	r3, sl, r3
 800ab74:	4433      	add	r3, r6
 800ab76:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ab7a:	4f9c      	ldr	r7, [pc, #624]	; (800adec <__ieee754_pow+0xa1c>)
 800ab7c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ab80:	4117      	asrs	r7, r2
 800ab82:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ab86:	ea23 0107 	bic.w	r1, r3, r7
 800ab8a:	f1c2 0214 	rsb	r2, r2, #20
 800ab8e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ab92:	460b      	mov	r3, r1
 800ab94:	fa4a fa02 	asr.w	sl, sl, r2
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	4620      	mov	r0, r4
 800aba0:	bfb8      	it	lt
 800aba2:	f1ca 0a00 	rsblt	sl, sl, #0
 800aba6:	f7f5 fad7 	bl	8000158 <__aeabi_dsub>
 800abaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abb2:	2400      	movs	r4, #0
 800abb4:	4642      	mov	r2, r8
 800abb6:	464b      	mov	r3, r9
 800abb8:	f7f5 fad0 	bl	800015c <__adddf3>
 800abbc:	a37a      	add	r3, pc, #488	; (adr r3, 800ada8 <__ieee754_pow+0x9d8>)
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	4620      	mov	r0, r4
 800abc4:	460d      	mov	r5, r1
 800abc6:	f7f5 fc7f 	bl	80004c8 <__aeabi_dmul>
 800abca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abce:	4606      	mov	r6, r0
 800abd0:	460f      	mov	r7, r1
 800abd2:	4620      	mov	r0, r4
 800abd4:	4629      	mov	r1, r5
 800abd6:	f7f5 fabf 	bl	8000158 <__aeabi_dsub>
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	4640      	mov	r0, r8
 800abe0:	4649      	mov	r1, r9
 800abe2:	f7f5 fab9 	bl	8000158 <__aeabi_dsub>
 800abe6:	a372      	add	r3, pc, #456	; (adr r3, 800adb0 <__ieee754_pow+0x9e0>)
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	f7f5 fc6c 	bl	80004c8 <__aeabi_dmul>
 800abf0:	a371      	add	r3, pc, #452	; (adr r3, 800adb8 <__ieee754_pow+0x9e8>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	4680      	mov	r8, r0
 800abf8:	4689      	mov	r9, r1
 800abfa:	4620      	mov	r0, r4
 800abfc:	4629      	mov	r1, r5
 800abfe:	f7f5 fc63 	bl	80004c8 <__aeabi_dmul>
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	4640      	mov	r0, r8
 800ac08:	4649      	mov	r1, r9
 800ac0a:	f7f5 faa7 	bl	800015c <__adddf3>
 800ac0e:	4604      	mov	r4, r0
 800ac10:	460d      	mov	r5, r1
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	4630      	mov	r0, r6
 800ac18:	4639      	mov	r1, r7
 800ac1a:	f7f5 fa9f 	bl	800015c <__adddf3>
 800ac1e:	4632      	mov	r2, r6
 800ac20:	463b      	mov	r3, r7
 800ac22:	4680      	mov	r8, r0
 800ac24:	4689      	mov	r9, r1
 800ac26:	f7f5 fa97 	bl	8000158 <__aeabi_dsub>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4620      	mov	r0, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7f5 fa91 	bl	8000158 <__aeabi_dsub>
 800ac36:	4642      	mov	r2, r8
 800ac38:	4606      	mov	r6, r0
 800ac3a:	460f      	mov	r7, r1
 800ac3c:	464b      	mov	r3, r9
 800ac3e:	4640      	mov	r0, r8
 800ac40:	4649      	mov	r1, r9
 800ac42:	f7f5 fc41 	bl	80004c8 <__aeabi_dmul>
 800ac46:	a35e      	add	r3, pc, #376	; (adr r3, 800adc0 <__ieee754_pow+0x9f0>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	460d      	mov	r5, r1
 800ac50:	f7f5 fc3a 	bl	80004c8 <__aeabi_dmul>
 800ac54:	a35c      	add	r3, pc, #368	; (adr r3, 800adc8 <__ieee754_pow+0x9f8>)
 800ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5a:	f7f5 fa7d 	bl	8000158 <__aeabi_dsub>
 800ac5e:	4622      	mov	r2, r4
 800ac60:	462b      	mov	r3, r5
 800ac62:	f7f5 fc31 	bl	80004c8 <__aeabi_dmul>
 800ac66:	a35a      	add	r3, pc, #360	; (adr r3, 800add0 <__ieee754_pow+0xa00>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	f7f5 fa76 	bl	800015c <__adddf3>
 800ac70:	4622      	mov	r2, r4
 800ac72:	462b      	mov	r3, r5
 800ac74:	f7f5 fc28 	bl	80004c8 <__aeabi_dmul>
 800ac78:	a357      	add	r3, pc, #348	; (adr r3, 800add8 <__ieee754_pow+0xa08>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	f7f5 fa6b 	bl	8000158 <__aeabi_dsub>
 800ac82:	4622      	mov	r2, r4
 800ac84:	462b      	mov	r3, r5
 800ac86:	f7f5 fc1f 	bl	80004c8 <__aeabi_dmul>
 800ac8a:	a355      	add	r3, pc, #340	; (adr r3, 800ade0 <__ieee754_pow+0xa10>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f7f5 fa64 	bl	800015c <__adddf3>
 800ac94:	4622      	mov	r2, r4
 800ac96:	462b      	mov	r3, r5
 800ac98:	f7f5 fc16 	bl	80004c8 <__aeabi_dmul>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4640      	mov	r0, r8
 800aca2:	4649      	mov	r1, r9
 800aca4:	f7f5 fa58 	bl	8000158 <__aeabi_dsub>
 800aca8:	4604      	mov	r4, r0
 800acaa:	460d      	mov	r5, r1
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	4640      	mov	r0, r8
 800acb2:	4649      	mov	r1, r9
 800acb4:	f7f5 fc08 	bl	80004c8 <__aeabi_dmul>
 800acb8:	2200      	movs	r2, #0
 800acba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800acc2:	4620      	mov	r0, r4
 800acc4:	4629      	mov	r1, r5
 800acc6:	f7f5 fa47 	bl	8000158 <__aeabi_dsub>
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acd2:	f7f5 fd23 	bl	800071c <__aeabi_ddiv>
 800acd6:	4632      	mov	r2, r6
 800acd8:	4604      	mov	r4, r0
 800acda:	460d      	mov	r5, r1
 800acdc:	463b      	mov	r3, r7
 800acde:	4640      	mov	r0, r8
 800ace0:	4649      	mov	r1, r9
 800ace2:	f7f5 fbf1 	bl	80004c8 <__aeabi_dmul>
 800ace6:	4632      	mov	r2, r6
 800ace8:	463b      	mov	r3, r7
 800acea:	f7f5 fa37 	bl	800015c <__adddf3>
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	4620      	mov	r0, r4
 800acf4:	4629      	mov	r1, r5
 800acf6:	f7f5 fa2f 	bl	8000158 <__aeabi_dsub>
 800acfa:	4642      	mov	r2, r8
 800acfc:	464b      	mov	r3, r9
 800acfe:	f7f5 fa2b 	bl	8000158 <__aeabi_dsub>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	2000      	movs	r0, #0
 800ad08:	4939      	ldr	r1, [pc, #228]	; (800adf0 <__ieee754_pow+0xa20>)
 800ad0a:	f7f5 fa25 	bl	8000158 <__aeabi_dsub>
 800ad0e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ad12:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ad16:	da29      	bge.n	800ad6c <__ieee754_pow+0x99c>
 800ad18:	4652      	mov	r2, sl
 800ad1a:	f000 fb71 	bl	800b400 <scalbn>
 800ad1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad22:	f7ff bbfe 	b.w	800a522 <__ieee754_pow+0x152>
 800ad26:	4b33      	ldr	r3, [pc, #204]	; (800adf4 <__ieee754_pow+0xa24>)
 800ad28:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ad2c:	429f      	cmp	r7, r3
 800ad2e:	f77f af13 	ble.w	800ab58 <__ieee754_pow+0x788>
 800ad32:	4b31      	ldr	r3, [pc, #196]	; (800adf8 <__ieee754_pow+0xa28>)
 800ad34:	440b      	add	r3, r1
 800ad36:	4303      	orrs	r3, r0
 800ad38:	d009      	beq.n	800ad4e <__ieee754_pow+0x97e>
 800ad3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	2300      	movs	r3, #0
 800ad42:	f7f5 fe33 	bl	80009ac <__aeabi_dcmplt>
 800ad46:	3800      	subs	r0, #0
 800ad48:	bf18      	it	ne
 800ad4a:	2001      	movne	r0, #1
 800ad4c:	e453      	b.n	800a5f6 <__ieee754_pow+0x226>
 800ad4e:	4622      	mov	r2, r4
 800ad50:	462b      	mov	r3, r5
 800ad52:	f7f5 fa01 	bl	8000158 <__aeabi_dsub>
 800ad56:	4642      	mov	r2, r8
 800ad58:	464b      	mov	r3, r9
 800ad5a:	f7f5 fe3b 	bl	80009d4 <__aeabi_dcmpge>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	f43f aefa 	beq.w	800ab58 <__ieee754_pow+0x788>
 800ad64:	e7e9      	b.n	800ad3a <__ieee754_pow+0x96a>
 800ad66:	f04f 0a00 	mov.w	sl, #0
 800ad6a:	e720      	b.n	800abae <__ieee754_pow+0x7de>
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	e7d6      	b.n	800ad1e <__ieee754_pow+0x94e>
 800ad70:	f04f 0b00 	mov.w	fp, #0
 800ad74:	f8df c078 	ldr.w	ip, [pc, #120]	; 800adf0 <__ieee754_pow+0xa20>
 800ad78:	f7ff bbba 	b.w	800a4f0 <__ieee754_pow+0x120>
 800ad7c:	f04f 0b00 	mov.w	fp, #0
 800ad80:	f04f 0c00 	mov.w	ip, #0
 800ad84:	f7ff bbb4 	b.w	800a4f0 <__ieee754_pow+0x120>
 800ad88:	4640      	mov	r0, r8
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	f7ff bb3d 	b.w	800a40a <__ieee754_pow+0x3a>
 800ad90:	9200      	str	r2, [sp, #0]
 800ad92:	f7ff bb89 	b.w	800a4a8 <__ieee754_pow+0xd8>
 800ad96:	2300      	movs	r3, #0
 800ad98:	f7ff bb73 	b.w	800a482 <__ieee754_pow+0xb2>
 800ad9c:	f3af 8000 	nop.w
 800ada0:	652b82fe 	.word	0x652b82fe
 800ada4:	3c971547 	.word	0x3c971547
 800ada8:	00000000 	.word	0x00000000
 800adac:	3fe62e43 	.word	0x3fe62e43
 800adb0:	fefa39ef 	.word	0xfefa39ef
 800adb4:	3fe62e42 	.word	0x3fe62e42
 800adb8:	0ca86c39 	.word	0x0ca86c39
 800adbc:	be205c61 	.word	0xbe205c61
 800adc0:	72bea4d0 	.word	0x72bea4d0
 800adc4:	3e663769 	.word	0x3e663769
 800adc8:	c5d26bf1 	.word	0xc5d26bf1
 800adcc:	3ebbbd41 	.word	0x3ebbbd41
 800add0:	af25de2c 	.word	0xaf25de2c
 800add4:	3f11566a 	.word	0x3f11566a
 800add8:	16bebd93 	.word	0x16bebd93
 800addc:	3f66c16c 	.word	0x3f66c16c
 800ade0:	5555553e 	.word	0x5555553e
 800ade4:	3fc55555 	.word	0x3fc55555
 800ade8:	3fe00000 	.word	0x3fe00000
 800adec:	000fffff 	.word	0x000fffff
 800adf0:	3ff00000 	.word	0x3ff00000
 800adf4:	4090cbff 	.word	0x4090cbff
 800adf8:	3f6f3400 	.word	0x3f6f3400

0800adfc <__ieee754_sqrt>:
 800adfc:	f8df c158 	ldr.w	ip, [pc, #344]	; 800af58 <__ieee754_sqrt+0x15c>
 800ae00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae04:	ea3c 0c01 	bics.w	ip, ip, r1
 800ae08:	4606      	mov	r6, r0
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	460c      	mov	r4, r1
 800ae0e:	460a      	mov	r2, r1
 800ae10:	4607      	mov	r7, r0
 800ae12:	4603      	mov	r3, r0
 800ae14:	d10f      	bne.n	800ae36 <__ieee754_sqrt+0x3a>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	f7f5 fb55 	bl	80004c8 <__aeabi_dmul>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	4630      	mov	r0, r6
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7f5 f999 	bl	800015c <__adddf3>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	460d      	mov	r5, r1
 800ae2e:	4630      	mov	r0, r6
 800ae30:	4629      	mov	r1, r5
 800ae32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae36:	2900      	cmp	r1, #0
 800ae38:	dc0e      	bgt.n	800ae58 <__ieee754_sqrt+0x5c>
 800ae3a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ae3e:	ea5c 0707 	orrs.w	r7, ip, r7
 800ae42:	d0f4      	beq.n	800ae2e <__ieee754_sqrt+0x32>
 800ae44:	b141      	cbz	r1, 800ae58 <__ieee754_sqrt+0x5c>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	f7f5 f985 	bl	8000158 <__aeabi_dsub>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	f7f5 fc63 	bl	800071c <__aeabi_ddiv>
 800ae56:	e7e8      	b.n	800ae2a <__ieee754_sqrt+0x2e>
 800ae58:	1521      	asrs	r1, r4, #20
 800ae5a:	d075      	beq.n	800af48 <__ieee754_sqrt+0x14c>
 800ae5c:	07cc      	lsls	r4, r1, #31
 800ae5e:	f04f 0400 	mov.w	r4, #0
 800ae62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ae66:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800ae6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ae6e:	bf5e      	ittt	pl
 800ae70:	0fd9      	lsrpl	r1, r3, #31
 800ae72:	005b      	lslpl	r3, r3, #1
 800ae74:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800ae78:	0fd9      	lsrs	r1, r3, #31
 800ae7a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ae7e:	2516      	movs	r5, #22
 800ae80:	4620      	mov	r0, r4
 800ae82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae86:	107f      	asrs	r7, r7, #1
 800ae88:	005b      	lsls	r3, r3, #1
 800ae8a:	1846      	adds	r6, r0, r1
 800ae8c:	4296      	cmp	r6, r2
 800ae8e:	bfde      	ittt	le
 800ae90:	1b92      	suble	r2, r2, r6
 800ae92:	1870      	addle	r0, r6, r1
 800ae94:	1864      	addle	r4, r4, r1
 800ae96:	0052      	lsls	r2, r2, #1
 800ae98:	3d01      	subs	r5, #1
 800ae9a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ae9e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800aea2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aea6:	d1f0      	bne.n	800ae8a <__ieee754_sqrt+0x8e>
 800aea8:	4629      	mov	r1, r5
 800aeaa:	f04f 0e20 	mov.w	lr, #32
 800aeae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aeb2:	4282      	cmp	r2, r0
 800aeb4:	eb06 0c05 	add.w	ip, r6, r5
 800aeb8:	dc02      	bgt.n	800aec0 <__ieee754_sqrt+0xc4>
 800aeba:	d113      	bne.n	800aee4 <__ieee754_sqrt+0xe8>
 800aebc:	459c      	cmp	ip, r3
 800aebe:	d811      	bhi.n	800aee4 <__ieee754_sqrt+0xe8>
 800aec0:	f1bc 0f00 	cmp.w	ip, #0
 800aec4:	eb0c 0506 	add.w	r5, ip, r6
 800aec8:	da43      	bge.n	800af52 <__ieee754_sqrt+0x156>
 800aeca:	2d00      	cmp	r5, #0
 800aecc:	db41      	blt.n	800af52 <__ieee754_sqrt+0x156>
 800aece:	f100 0801 	add.w	r8, r0, #1
 800aed2:	1a12      	subs	r2, r2, r0
 800aed4:	4640      	mov	r0, r8
 800aed6:	459c      	cmp	ip, r3
 800aed8:	bf88      	it	hi
 800aeda:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800aede:	eba3 030c 	sub.w	r3, r3, ip
 800aee2:	4431      	add	r1, r6
 800aee4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aee8:	f1be 0e01 	subs.w	lr, lr, #1
 800aeec:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800aef0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aef4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aef8:	d1db      	bne.n	800aeb2 <__ieee754_sqrt+0xb6>
 800aefa:	4313      	orrs	r3, r2
 800aefc:	d006      	beq.n	800af0c <__ieee754_sqrt+0x110>
 800aefe:	1c48      	adds	r0, r1, #1
 800af00:	bf0b      	itete	eq
 800af02:	4671      	moveq	r1, lr
 800af04:	3101      	addne	r1, #1
 800af06:	3401      	addeq	r4, #1
 800af08:	f021 0101 	bicne.w	r1, r1, #1
 800af0c:	1063      	asrs	r3, r4, #1
 800af0e:	0849      	lsrs	r1, r1, #1
 800af10:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800af14:	07e2      	lsls	r2, r4, #31
 800af16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800af1a:	bf48      	it	mi
 800af1c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800af20:	460e      	mov	r6, r1
 800af22:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800af26:	e782      	b.n	800ae2e <__ieee754_sqrt+0x32>
 800af28:	0ada      	lsrs	r2, r3, #11
 800af2a:	3815      	subs	r0, #21
 800af2c:	055b      	lsls	r3, r3, #21
 800af2e:	2a00      	cmp	r2, #0
 800af30:	d0fa      	beq.n	800af28 <__ieee754_sqrt+0x12c>
 800af32:	02d5      	lsls	r5, r2, #11
 800af34:	d50a      	bpl.n	800af4c <__ieee754_sqrt+0x150>
 800af36:	f1c1 0420 	rsb	r4, r1, #32
 800af3a:	fa23 f404 	lsr.w	r4, r3, r4
 800af3e:	1e4d      	subs	r5, r1, #1
 800af40:	408b      	lsls	r3, r1
 800af42:	4322      	orrs	r2, r4
 800af44:	1b41      	subs	r1, r0, r5
 800af46:	e789      	b.n	800ae5c <__ieee754_sqrt+0x60>
 800af48:	4608      	mov	r0, r1
 800af4a:	e7f0      	b.n	800af2e <__ieee754_sqrt+0x132>
 800af4c:	0052      	lsls	r2, r2, #1
 800af4e:	3101      	adds	r1, #1
 800af50:	e7ef      	b.n	800af32 <__ieee754_sqrt+0x136>
 800af52:	4680      	mov	r8, r0
 800af54:	e7bd      	b.n	800aed2 <__ieee754_sqrt+0xd6>
 800af56:	bf00      	nop
 800af58:	7ff00000 	.word	0x7ff00000

0800af5c <__ieee754_asinf>:
 800af5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af60:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800af64:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800af68:	4604      	mov	r4, r0
 800af6a:	4605      	mov	r5, r0
 800af6c:	d10c      	bne.n	800af88 <__ieee754_asinf+0x2c>
 800af6e:	498d      	ldr	r1, [pc, #564]	; (800b1a4 <__ieee754_asinf+0x248>)
 800af70:	f7f5 fed8 	bl	8000d24 <__aeabi_fmul>
 800af74:	498c      	ldr	r1, [pc, #560]	; (800b1a8 <__ieee754_asinf+0x24c>)
 800af76:	4605      	mov	r5, r0
 800af78:	4620      	mov	r0, r4
 800af7a:	f7f5 fed3 	bl	8000d24 <__aeabi_fmul>
 800af7e:	4601      	mov	r1, r0
 800af80:	4628      	mov	r0, r5
 800af82:	f7f5 fdc7 	bl	8000b14 <__addsf3>
 800af86:	e006      	b.n	800af96 <__ieee754_asinf+0x3a>
 800af88:	dd07      	ble.n	800af9a <__ieee754_asinf+0x3e>
 800af8a:	4601      	mov	r1, r0
 800af8c:	f7f5 fdc0 	bl	8000b10 <__aeabi_fsub>
 800af90:	4601      	mov	r1, r0
 800af92:	f7f5 ff7b 	bl	8000e8c <__aeabi_fdiv>
 800af96:	4604      	mov	r4, r0
 800af98:	e00e      	b.n	800afb8 <__ieee754_asinf+0x5c>
 800af9a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800af9e:	da58      	bge.n	800b052 <__ieee754_asinf+0xf6>
 800afa0:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800afa4:	da0b      	bge.n	800afbe <__ieee754_asinf+0x62>
 800afa6:	4981      	ldr	r1, [pc, #516]	; (800b1ac <__ieee754_asinf+0x250>)
 800afa8:	f7f5 fdb4 	bl	8000b14 <__addsf3>
 800afac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800afb0:	f7f6 f874 	bl	800109c <__aeabi_fcmpgt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d04c      	beq.n	800b052 <__ieee754_asinf+0xf6>
 800afb8:	4620      	mov	r0, r4
 800afba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afbe:	4601      	mov	r1, r0
 800afc0:	f7f5 feb0 	bl	8000d24 <__aeabi_fmul>
 800afc4:	4605      	mov	r5, r0
 800afc6:	497a      	ldr	r1, [pc, #488]	; (800b1b0 <__ieee754_asinf+0x254>)
 800afc8:	f7f5 feac 	bl	8000d24 <__aeabi_fmul>
 800afcc:	4979      	ldr	r1, [pc, #484]	; (800b1b4 <__ieee754_asinf+0x258>)
 800afce:	f7f5 fda1 	bl	8000b14 <__addsf3>
 800afd2:	4629      	mov	r1, r5
 800afd4:	f7f5 fea6 	bl	8000d24 <__aeabi_fmul>
 800afd8:	4977      	ldr	r1, [pc, #476]	; (800b1b8 <__ieee754_asinf+0x25c>)
 800afda:	f7f5 fd99 	bl	8000b10 <__aeabi_fsub>
 800afde:	4629      	mov	r1, r5
 800afe0:	f7f5 fea0 	bl	8000d24 <__aeabi_fmul>
 800afe4:	4975      	ldr	r1, [pc, #468]	; (800b1bc <__ieee754_asinf+0x260>)
 800afe6:	f7f5 fd95 	bl	8000b14 <__addsf3>
 800afea:	4629      	mov	r1, r5
 800afec:	f7f5 fe9a 	bl	8000d24 <__aeabi_fmul>
 800aff0:	4973      	ldr	r1, [pc, #460]	; (800b1c0 <__ieee754_asinf+0x264>)
 800aff2:	f7f5 fd8d 	bl	8000b10 <__aeabi_fsub>
 800aff6:	4629      	mov	r1, r5
 800aff8:	f7f5 fe94 	bl	8000d24 <__aeabi_fmul>
 800affc:	4971      	ldr	r1, [pc, #452]	; (800b1c4 <__ieee754_asinf+0x268>)
 800affe:	f7f5 fd89 	bl	8000b14 <__addsf3>
 800b002:	4629      	mov	r1, r5
 800b004:	f7f5 fe8e 	bl	8000d24 <__aeabi_fmul>
 800b008:	496f      	ldr	r1, [pc, #444]	; (800b1c8 <__ieee754_asinf+0x26c>)
 800b00a:	4606      	mov	r6, r0
 800b00c:	4628      	mov	r0, r5
 800b00e:	f7f5 fe89 	bl	8000d24 <__aeabi_fmul>
 800b012:	496e      	ldr	r1, [pc, #440]	; (800b1cc <__ieee754_asinf+0x270>)
 800b014:	f7f5 fd7c 	bl	8000b10 <__aeabi_fsub>
 800b018:	4629      	mov	r1, r5
 800b01a:	f7f5 fe83 	bl	8000d24 <__aeabi_fmul>
 800b01e:	496c      	ldr	r1, [pc, #432]	; (800b1d0 <__ieee754_asinf+0x274>)
 800b020:	f7f5 fd78 	bl	8000b14 <__addsf3>
 800b024:	4629      	mov	r1, r5
 800b026:	f7f5 fe7d 	bl	8000d24 <__aeabi_fmul>
 800b02a:	496a      	ldr	r1, [pc, #424]	; (800b1d4 <__ieee754_asinf+0x278>)
 800b02c:	f7f5 fd70 	bl	8000b10 <__aeabi_fsub>
 800b030:	4629      	mov	r1, r5
 800b032:	f7f5 fe77 	bl	8000d24 <__aeabi_fmul>
 800b036:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b03a:	f7f5 fd6b 	bl	8000b14 <__addsf3>
 800b03e:	4601      	mov	r1, r0
 800b040:	4630      	mov	r0, r6
 800b042:	f7f5 ff23 	bl	8000e8c <__aeabi_fdiv>
 800b046:	4621      	mov	r1, r4
 800b048:	f7f5 fe6c 	bl	8000d24 <__aeabi_fmul>
 800b04c:	4601      	mov	r1, r0
 800b04e:	4620      	mov	r0, r4
 800b050:	e797      	b.n	800af82 <__ieee754_asinf+0x26>
 800b052:	4620      	mov	r0, r4
 800b054:	f000 fb5e 	bl	800b714 <fabsf>
 800b058:	4601      	mov	r1, r0
 800b05a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b05e:	f7f5 fd57 	bl	8000b10 <__aeabi_fsub>
 800b062:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b066:	f7f5 fe5d 	bl	8000d24 <__aeabi_fmul>
 800b06a:	4606      	mov	r6, r0
 800b06c:	4950      	ldr	r1, [pc, #320]	; (800b1b0 <__ieee754_asinf+0x254>)
 800b06e:	f7f5 fe59 	bl	8000d24 <__aeabi_fmul>
 800b072:	4950      	ldr	r1, [pc, #320]	; (800b1b4 <__ieee754_asinf+0x258>)
 800b074:	f7f5 fd4e 	bl	8000b14 <__addsf3>
 800b078:	4631      	mov	r1, r6
 800b07a:	f7f5 fe53 	bl	8000d24 <__aeabi_fmul>
 800b07e:	494e      	ldr	r1, [pc, #312]	; (800b1b8 <__ieee754_asinf+0x25c>)
 800b080:	f7f5 fd46 	bl	8000b10 <__aeabi_fsub>
 800b084:	4631      	mov	r1, r6
 800b086:	f7f5 fe4d 	bl	8000d24 <__aeabi_fmul>
 800b08a:	494c      	ldr	r1, [pc, #304]	; (800b1bc <__ieee754_asinf+0x260>)
 800b08c:	f7f5 fd42 	bl	8000b14 <__addsf3>
 800b090:	4631      	mov	r1, r6
 800b092:	f7f5 fe47 	bl	8000d24 <__aeabi_fmul>
 800b096:	494a      	ldr	r1, [pc, #296]	; (800b1c0 <__ieee754_asinf+0x264>)
 800b098:	f7f5 fd3a 	bl	8000b10 <__aeabi_fsub>
 800b09c:	4631      	mov	r1, r6
 800b09e:	f7f5 fe41 	bl	8000d24 <__aeabi_fmul>
 800b0a2:	4948      	ldr	r1, [pc, #288]	; (800b1c4 <__ieee754_asinf+0x268>)
 800b0a4:	f7f5 fd36 	bl	8000b14 <__addsf3>
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	f7f5 fe3b 	bl	8000d24 <__aeabi_fmul>
 800b0ae:	4946      	ldr	r1, [pc, #280]	; (800b1c8 <__ieee754_asinf+0x26c>)
 800b0b0:	4681      	mov	r9, r0
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f7f5 fe36 	bl	8000d24 <__aeabi_fmul>
 800b0b8:	4944      	ldr	r1, [pc, #272]	; (800b1cc <__ieee754_asinf+0x270>)
 800b0ba:	f7f5 fd29 	bl	8000b10 <__aeabi_fsub>
 800b0be:	4631      	mov	r1, r6
 800b0c0:	f7f5 fe30 	bl	8000d24 <__aeabi_fmul>
 800b0c4:	4942      	ldr	r1, [pc, #264]	; (800b1d0 <__ieee754_asinf+0x274>)
 800b0c6:	f7f5 fd25 	bl	8000b14 <__addsf3>
 800b0ca:	4631      	mov	r1, r6
 800b0cc:	f7f5 fe2a 	bl	8000d24 <__aeabi_fmul>
 800b0d0:	4940      	ldr	r1, [pc, #256]	; (800b1d4 <__ieee754_asinf+0x278>)
 800b0d2:	f7f5 fd1d 	bl	8000b10 <__aeabi_fsub>
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	f7f5 fe24 	bl	8000d24 <__aeabi_fmul>
 800b0dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b0e0:	f7f5 fd18 	bl	8000b14 <__addsf3>
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f000 f902 	bl	800b2f0 <__ieee754_sqrtf>
 800b0ec:	4b3a      	ldr	r3, [pc, #232]	; (800b1d8 <__ieee754_asinf+0x27c>)
 800b0ee:	4607      	mov	r7, r0
 800b0f0:	4598      	cmp	r8, r3
 800b0f2:	dd1a      	ble.n	800b12a <__ieee754_asinf+0x1ce>
 800b0f4:	4651      	mov	r1, sl
 800b0f6:	4648      	mov	r0, r9
 800b0f8:	f7f5 fec8 	bl	8000e8c <__aeabi_fdiv>
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	f7f5 fe11 	bl	8000d24 <__aeabi_fmul>
 800b102:	4639      	mov	r1, r7
 800b104:	f7f5 fd06 	bl	8000b14 <__addsf3>
 800b108:	4601      	mov	r1, r0
 800b10a:	f7f5 fd03 	bl	8000b14 <__addsf3>
 800b10e:	4933      	ldr	r1, [pc, #204]	; (800b1dc <__ieee754_asinf+0x280>)
 800b110:	f7f5 fd00 	bl	8000b14 <__addsf3>
 800b114:	4601      	mov	r1, r0
 800b116:	4823      	ldr	r0, [pc, #140]	; (800b1a4 <__ieee754_asinf+0x248>)
 800b118:	f7f5 fcfa 	bl	8000b10 <__aeabi_fsub>
 800b11c:	2d00      	cmp	r5, #0
 800b11e:	4604      	mov	r4, r0
 800b120:	f73f af4a 	bgt.w	800afb8 <__ieee754_asinf+0x5c>
 800b124:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b128:	e735      	b.n	800af96 <__ieee754_asinf+0x3a>
 800b12a:	4601      	mov	r1, r0
 800b12c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800b130:	f7f5 fcf0 	bl	8000b14 <__addsf3>
 800b134:	4651      	mov	r1, sl
 800b136:	4604      	mov	r4, r0
 800b138:	4648      	mov	r0, r9
 800b13a:	f7f5 fea7 	bl	8000e8c <__aeabi_fdiv>
 800b13e:	4601      	mov	r1, r0
 800b140:	4620      	mov	r0, r4
 800b142:	f7f5 fdef 	bl	8000d24 <__aeabi_fmul>
 800b146:	f028 080f 	bic.w	r8, r8, #15
 800b14a:	4681      	mov	r9, r0
 800b14c:	4641      	mov	r1, r8
 800b14e:	4640      	mov	r0, r8
 800b150:	f7f5 fde8 	bl	8000d24 <__aeabi_fmul>
 800b154:	4601      	mov	r1, r0
 800b156:	4630      	mov	r0, r6
 800b158:	f7f5 fcda 	bl	8000b10 <__aeabi_fsub>
 800b15c:	4641      	mov	r1, r8
 800b15e:	4604      	mov	r4, r0
 800b160:	4638      	mov	r0, r7
 800b162:	f7f5 fcd7 	bl	8000b14 <__addsf3>
 800b166:	4601      	mov	r1, r0
 800b168:	4620      	mov	r0, r4
 800b16a:	f7f5 fe8f 	bl	8000e8c <__aeabi_fdiv>
 800b16e:	4601      	mov	r1, r0
 800b170:	f7f5 fcd0 	bl	8000b14 <__addsf3>
 800b174:	4601      	mov	r1, r0
 800b176:	480c      	ldr	r0, [pc, #48]	; (800b1a8 <__ieee754_asinf+0x24c>)
 800b178:	f7f5 fcca 	bl	8000b10 <__aeabi_fsub>
 800b17c:	4601      	mov	r1, r0
 800b17e:	4648      	mov	r0, r9
 800b180:	f7f5 fcc6 	bl	8000b10 <__aeabi_fsub>
 800b184:	4641      	mov	r1, r8
 800b186:	4604      	mov	r4, r0
 800b188:	4640      	mov	r0, r8
 800b18a:	f7f5 fcc3 	bl	8000b14 <__addsf3>
 800b18e:	4601      	mov	r1, r0
 800b190:	4813      	ldr	r0, [pc, #76]	; (800b1e0 <__ieee754_asinf+0x284>)
 800b192:	f7f5 fcbd 	bl	8000b10 <__aeabi_fsub>
 800b196:	4601      	mov	r1, r0
 800b198:	4620      	mov	r0, r4
 800b19a:	f7f5 fcb9 	bl	8000b10 <__aeabi_fsub>
 800b19e:	4601      	mov	r1, r0
 800b1a0:	480f      	ldr	r0, [pc, #60]	; (800b1e0 <__ieee754_asinf+0x284>)
 800b1a2:	e7b9      	b.n	800b118 <__ieee754_asinf+0x1bc>
 800b1a4:	3fc90fdb 	.word	0x3fc90fdb
 800b1a8:	b33bbd2e 	.word	0xb33bbd2e
 800b1ac:	7149f2ca 	.word	0x7149f2ca
 800b1b0:	3811ef08 	.word	0x3811ef08
 800b1b4:	3a4f7f04 	.word	0x3a4f7f04
 800b1b8:	3d241146 	.word	0x3d241146
 800b1bc:	3e4e0aa8 	.word	0x3e4e0aa8
 800b1c0:	3ea6b090 	.word	0x3ea6b090
 800b1c4:	3e2aaaab 	.word	0x3e2aaaab
 800b1c8:	3d9dc62e 	.word	0x3d9dc62e
 800b1cc:	3f303361 	.word	0x3f303361
 800b1d0:	4001572d 	.word	0x4001572d
 800b1d4:	4019d139 	.word	0x4019d139
 800b1d8:	3f799999 	.word	0x3f799999
 800b1dc:	333bbd2e 	.word	0x333bbd2e
 800b1e0:	3f490fdb 	.word	0x3f490fdb

0800b1e4 <__ieee754_atan2f>:
 800b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b1ea:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	dc05      	bgt.n	800b1fe <__ieee754_atan2f+0x1a>
 800b1f2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b1f6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	dd04      	ble.n	800b208 <__ieee754_atan2f+0x24>
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7f5 fc88 	bl	8000b14 <__addsf3>
 800b204:	4603      	mov	r3, r0
 800b206:	e011      	b.n	800b22c <__ieee754_atan2f+0x48>
 800b208:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b20c:	d103      	bne.n	800b216 <__ieee754_atan2f+0x32>
 800b20e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b212:	f000 b973 	b.w	800b4fc <atanf>
 800b216:	178c      	asrs	r4, r1, #30
 800b218:	f004 0402 	and.w	r4, r4, #2
 800b21c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b220:	b932      	cbnz	r2, 800b230 <__ieee754_atan2f+0x4c>
 800b222:	2c02      	cmp	r4, #2
 800b224:	d04c      	beq.n	800b2c0 <__ieee754_atan2f+0xdc>
 800b226:	2c03      	cmp	r4, #3
 800b228:	d100      	bne.n	800b22c <__ieee754_atan2f+0x48>
 800b22a:	4b29      	ldr	r3, [pc, #164]	; (800b2d0 <__ieee754_atan2f+0xec>)
 800b22c:	4618      	mov	r0, r3
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	b91e      	cbnz	r6, 800b23a <__ieee754_atan2f+0x56>
 800b232:	2f00      	cmp	r7, #0
 800b234:	da4a      	bge.n	800b2cc <__ieee754_atan2f+0xe8>
 800b236:	4b27      	ldr	r3, [pc, #156]	; (800b2d4 <__ieee754_atan2f+0xf0>)
 800b238:	e7f8      	b.n	800b22c <__ieee754_atan2f+0x48>
 800b23a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b23e:	d10e      	bne.n	800b25e <__ieee754_atan2f+0x7a>
 800b240:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b244:	f104 34ff 	add.w	r4, r4, #4294967295
 800b248:	d105      	bne.n	800b256 <__ieee754_atan2f+0x72>
 800b24a:	2c02      	cmp	r4, #2
 800b24c:	d83a      	bhi.n	800b2c4 <__ieee754_atan2f+0xe0>
 800b24e:	4b22      	ldr	r3, [pc, #136]	; (800b2d8 <__ieee754_atan2f+0xf4>)
 800b250:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b254:	e7ea      	b.n	800b22c <__ieee754_atan2f+0x48>
 800b256:	2c02      	cmp	r4, #2
 800b258:	d836      	bhi.n	800b2c8 <__ieee754_atan2f+0xe4>
 800b25a:	4b20      	ldr	r3, [pc, #128]	; (800b2dc <__ieee754_atan2f+0xf8>)
 800b25c:	e7f8      	b.n	800b250 <__ieee754_atan2f+0x6c>
 800b25e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b262:	d0e6      	beq.n	800b232 <__ieee754_atan2f+0x4e>
 800b264:	1b92      	subs	r2, r2, r6
 800b266:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800b26a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800b26e:	da17      	bge.n	800b2a0 <__ieee754_atan2f+0xbc>
 800b270:	2900      	cmp	r1, #0
 800b272:	da01      	bge.n	800b278 <__ieee754_atan2f+0x94>
 800b274:	303c      	adds	r0, #60	; 0x3c
 800b276:	db15      	blt.n	800b2a4 <__ieee754_atan2f+0xc0>
 800b278:	4618      	mov	r0, r3
 800b27a:	f7f5 fe07 	bl	8000e8c <__aeabi_fdiv>
 800b27e:	f000 fa49 	bl	800b714 <fabsf>
 800b282:	f000 f93b 	bl	800b4fc <atanf>
 800b286:	4603      	mov	r3, r0
 800b288:	2c01      	cmp	r4, #1
 800b28a:	d00d      	beq.n	800b2a8 <__ieee754_atan2f+0xc4>
 800b28c:	2c02      	cmp	r4, #2
 800b28e:	d00e      	beq.n	800b2ae <__ieee754_atan2f+0xca>
 800b290:	2c00      	cmp	r4, #0
 800b292:	d0cb      	beq.n	800b22c <__ieee754_atan2f+0x48>
 800b294:	4912      	ldr	r1, [pc, #72]	; (800b2e0 <__ieee754_atan2f+0xfc>)
 800b296:	4618      	mov	r0, r3
 800b298:	f7f5 fc3c 	bl	8000b14 <__addsf3>
 800b29c:	4911      	ldr	r1, [pc, #68]	; (800b2e4 <__ieee754_atan2f+0x100>)
 800b29e:	e00c      	b.n	800b2ba <__ieee754_atan2f+0xd6>
 800b2a0:	4b11      	ldr	r3, [pc, #68]	; (800b2e8 <__ieee754_atan2f+0x104>)
 800b2a2:	e7f1      	b.n	800b288 <__ieee754_atan2f+0xa4>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e7ef      	b.n	800b288 <__ieee754_atan2f+0xa4>
 800b2a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2ac:	e7be      	b.n	800b22c <__ieee754_atan2f+0x48>
 800b2ae:	490c      	ldr	r1, [pc, #48]	; (800b2e0 <__ieee754_atan2f+0xfc>)
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7f5 fc2f 	bl	8000b14 <__addsf3>
 800b2b6:	4601      	mov	r1, r0
 800b2b8:	480a      	ldr	r0, [pc, #40]	; (800b2e4 <__ieee754_atan2f+0x100>)
 800b2ba:	f7f5 fc29 	bl	8000b10 <__aeabi_fsub>
 800b2be:	e7a1      	b.n	800b204 <__ieee754_atan2f+0x20>
 800b2c0:	4b08      	ldr	r3, [pc, #32]	; (800b2e4 <__ieee754_atan2f+0x100>)
 800b2c2:	e7b3      	b.n	800b22c <__ieee754_atan2f+0x48>
 800b2c4:	4b09      	ldr	r3, [pc, #36]	; (800b2ec <__ieee754_atan2f+0x108>)
 800b2c6:	e7b1      	b.n	800b22c <__ieee754_atan2f+0x48>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	e7af      	b.n	800b22c <__ieee754_atan2f+0x48>
 800b2cc:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <__ieee754_atan2f+0x104>)
 800b2ce:	e7ad      	b.n	800b22c <__ieee754_atan2f+0x48>
 800b2d0:	c0490fdb 	.word	0xc0490fdb
 800b2d4:	bfc90fdb 	.word	0xbfc90fdb
 800b2d8:	0800b8b0 	.word	0x0800b8b0
 800b2dc:	0800b8bc 	.word	0x0800b8bc
 800b2e0:	33bbbd2e 	.word	0x33bbbd2e
 800b2e4:	40490fdb 	.word	0x40490fdb
 800b2e8:	3fc90fdb 	.word	0x3fc90fdb
 800b2ec:	3f490fdb 	.word	0x3f490fdb

0800b2f0 <__ieee754_sqrtf>:
 800b2f0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b2f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b2f8:	b570      	push	{r4, r5, r6, lr}
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	d309      	bcc.n	800b314 <__ieee754_sqrtf+0x24>
 800b300:	4601      	mov	r1, r0
 800b302:	f7f5 fd0f 	bl	8000d24 <__aeabi_fmul>
 800b306:	4601      	mov	r1, r0
 800b308:	4620      	mov	r0, r4
 800b30a:	f7f5 fc03 	bl	8000b14 <__addsf3>
 800b30e:	4604      	mov	r4, r0
 800b310:	4620      	mov	r0, r4
 800b312:	bd70      	pop	{r4, r5, r6, pc}
 800b314:	2a00      	cmp	r2, #0
 800b316:	d0fb      	beq.n	800b310 <__ieee754_sqrtf+0x20>
 800b318:	2800      	cmp	r0, #0
 800b31a:	da06      	bge.n	800b32a <__ieee754_sqrtf+0x3a>
 800b31c:	4601      	mov	r1, r0
 800b31e:	f7f5 fbf7 	bl	8000b10 <__aeabi_fsub>
 800b322:	4601      	mov	r1, r0
 800b324:	f7f5 fdb2 	bl	8000e8c <__aeabi_fdiv>
 800b328:	e7f1      	b.n	800b30e <__ieee754_sqrtf+0x1e>
 800b32a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800b32e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800b332:	d029      	beq.n	800b388 <__ieee754_sqrtf+0x98>
 800b334:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800b338:	07cb      	lsls	r3, r1, #31
 800b33a:	f04f 0300 	mov.w	r3, #0
 800b33e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800b342:	f04f 0419 	mov.w	r4, #25
 800b346:	461e      	mov	r6, r3
 800b348:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800b34c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b350:	bf58      	it	pl
 800b352:	0052      	lslpl	r2, r2, #1
 800b354:	1040      	asrs	r0, r0, #1
 800b356:	0052      	lsls	r2, r2, #1
 800b358:	1875      	adds	r5, r6, r1
 800b35a:	4295      	cmp	r5, r2
 800b35c:	bfde      	ittt	le
 800b35e:	186e      	addle	r6, r5, r1
 800b360:	1b52      	suble	r2, r2, r5
 800b362:	185b      	addle	r3, r3, r1
 800b364:	3c01      	subs	r4, #1
 800b366:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b36a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b36e:	d1f3      	bne.n	800b358 <__ieee754_sqrtf+0x68>
 800b370:	b112      	cbz	r2, 800b378 <__ieee754_sqrtf+0x88>
 800b372:	3301      	adds	r3, #1
 800b374:	f023 0301 	bic.w	r3, r3, #1
 800b378:	105c      	asrs	r4, r3, #1
 800b37a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b37e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800b382:	e7c5      	b.n	800b310 <__ieee754_sqrtf+0x20>
 800b384:	005b      	lsls	r3, r3, #1
 800b386:	3201      	adds	r2, #1
 800b388:	0218      	lsls	r0, r3, #8
 800b38a:	d5fb      	bpl.n	800b384 <__ieee754_sqrtf+0x94>
 800b38c:	3a01      	subs	r2, #1
 800b38e:	1a89      	subs	r1, r1, r2
 800b390:	e7d0      	b.n	800b334 <__ieee754_sqrtf+0x44>

0800b392 <with_errno>:
 800b392:	b570      	push	{r4, r5, r6, lr}
 800b394:	4604      	mov	r4, r0
 800b396:	460d      	mov	r5, r1
 800b398:	4616      	mov	r6, r2
 800b39a:	f7fd ff39 	bl	8009210 <__errno>
 800b39e:	4629      	mov	r1, r5
 800b3a0:	6006      	str	r6, [r0, #0]
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	bd70      	pop	{r4, r5, r6, pc}

0800b3a6 <xflow>:
 800b3a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3a8:	4615      	mov	r5, r2
 800b3aa:	461c      	mov	r4, r3
 800b3ac:	b180      	cbz	r0, 800b3d0 <xflow+0x2a>
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b3b4:	e9cd 0100 	strd	r0, r1, [sp]
 800b3b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3bc:	4628      	mov	r0, r5
 800b3be:	4621      	mov	r1, r4
 800b3c0:	f7f5 f882 	bl	80004c8 <__aeabi_dmul>
 800b3c4:	2222      	movs	r2, #34	; 0x22
 800b3c6:	b003      	add	sp, #12
 800b3c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3cc:	f7ff bfe1 	b.w	800b392 <with_errno>
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	e7ee      	b.n	800b3b4 <xflow+0xe>

0800b3d6 <__math_uflow>:
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3dc:	f7ff bfe3 	b.w	800b3a6 <xflow>

0800b3e0 <__math_oflow>:
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b3e6:	f7ff bfde 	b.w	800b3a6 <xflow>

0800b3ea <fabs>:
 800b3ea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b3ee:	4770      	bx	lr

0800b3f0 <finite>:
 800b3f0:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b3f4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b3f8:	0fc0      	lsrs	r0, r0, #31
 800b3fa:	4770      	bx	lr
 800b3fc:	0000      	movs	r0, r0
	...

0800b400 <scalbn>:
 800b400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b402:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b406:	4604      	mov	r4, r0
 800b408:	460d      	mov	r5, r1
 800b40a:	4617      	mov	r7, r2
 800b40c:	460b      	mov	r3, r1
 800b40e:	b996      	cbnz	r6, 800b436 <scalbn+0x36>
 800b410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b414:	4303      	orrs	r3, r0
 800b416:	d039      	beq.n	800b48c <scalbn+0x8c>
 800b418:	4b33      	ldr	r3, [pc, #204]	; (800b4e8 <scalbn+0xe8>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	f7f5 f854 	bl	80004c8 <__aeabi_dmul>
 800b420:	4b32      	ldr	r3, [pc, #200]	; (800b4ec <scalbn+0xec>)
 800b422:	4604      	mov	r4, r0
 800b424:	429f      	cmp	r7, r3
 800b426:	460d      	mov	r5, r1
 800b428:	da0f      	bge.n	800b44a <scalbn+0x4a>
 800b42a:	a32b      	add	r3, pc, #172	; (adr r3, 800b4d8 <scalbn+0xd8>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	f7f5 f84a 	bl	80004c8 <__aeabi_dmul>
 800b434:	e006      	b.n	800b444 <scalbn+0x44>
 800b436:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b43a:	4296      	cmp	r6, r2
 800b43c:	d10a      	bne.n	800b454 <scalbn+0x54>
 800b43e:	4602      	mov	r2, r0
 800b440:	f7f4 fe8c 	bl	800015c <__adddf3>
 800b444:	4604      	mov	r4, r0
 800b446:	460d      	mov	r5, r1
 800b448:	e020      	b.n	800b48c <scalbn+0x8c>
 800b44a:	460b      	mov	r3, r1
 800b44c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b450:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b454:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b458:	19b9      	adds	r1, r7, r6
 800b45a:	4291      	cmp	r1, r2
 800b45c:	dd0e      	ble.n	800b47c <scalbn+0x7c>
 800b45e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b462:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b466:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b46a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b46e:	4820      	ldr	r0, [pc, #128]	; (800b4f0 <scalbn+0xf0>)
 800b470:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b474:	a31a      	add	r3, pc, #104	; (adr r3, 800b4e0 <scalbn+0xe0>)
 800b476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47a:	e7d9      	b.n	800b430 <scalbn+0x30>
 800b47c:	2900      	cmp	r1, #0
 800b47e:	dd08      	ble.n	800b492 <scalbn+0x92>
 800b480:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b484:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b488:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b48c:	4620      	mov	r0, r4
 800b48e:	4629      	mov	r1, r5
 800b490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b492:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b496:	da12      	bge.n	800b4be <scalbn+0xbe>
 800b498:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b49c:	429f      	cmp	r7, r3
 800b49e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b4a2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800b4a6:	dcdc      	bgt.n	800b462 <scalbn+0x62>
 800b4a8:	a30b      	add	r3, pc, #44	; (adr r3, 800b4d8 <scalbn+0xd8>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b4b2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b4b6:	480f      	ldr	r0, [pc, #60]	; (800b4f4 <scalbn+0xf4>)
 800b4b8:	f041 011f 	orr.w	r1, r1, #31
 800b4bc:	e7b8      	b.n	800b430 <scalbn+0x30>
 800b4be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b4c2:	3136      	adds	r1, #54	; 0x36
 800b4c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b4c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	4b09      	ldr	r3, [pc, #36]	; (800b4f8 <scalbn+0xf8>)
 800b4d4:	e7ac      	b.n	800b430 <scalbn+0x30>
 800b4d6:	bf00      	nop
 800b4d8:	c2f8f359 	.word	0xc2f8f359
 800b4dc:	01a56e1f 	.word	0x01a56e1f
 800b4e0:	8800759c 	.word	0x8800759c
 800b4e4:	7e37e43c 	.word	0x7e37e43c
 800b4e8:	43500000 	.word	0x43500000
 800b4ec:	ffff3cb0 	.word	0xffff3cb0
 800b4f0:	8800759c 	.word	0x8800759c
 800b4f4:	c2f8f359 	.word	0xc2f8f359
 800b4f8:	3c900000 	.word	0x3c900000

0800b4fc <atanf>:
 800b4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b500:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b504:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800b508:	4604      	mov	r4, r0
 800b50a:	4680      	mov	r8, r0
 800b50c:	db0e      	blt.n	800b52c <atanf+0x30>
 800b50e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b512:	dd04      	ble.n	800b51e <atanf+0x22>
 800b514:	4601      	mov	r1, r0
 800b516:	f7f5 fafd 	bl	8000b14 <__addsf3>
 800b51a:	4604      	mov	r4, r0
 800b51c:	e003      	b.n	800b526 <atanf+0x2a>
 800b51e:	2800      	cmp	r0, #0
 800b520:	f300 80ce 	bgt.w	800b6c0 <atanf+0x1c4>
 800b524:	4c67      	ldr	r4, [pc, #412]	; (800b6c4 <atanf+0x1c8>)
 800b526:	4620      	mov	r0, r4
 800b528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b52c:	4b66      	ldr	r3, [pc, #408]	; (800b6c8 <atanf+0x1cc>)
 800b52e:	429d      	cmp	r5, r3
 800b530:	dc0e      	bgt.n	800b550 <atanf+0x54>
 800b532:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800b536:	da08      	bge.n	800b54a <atanf+0x4e>
 800b538:	4964      	ldr	r1, [pc, #400]	; (800b6cc <atanf+0x1d0>)
 800b53a:	f7f5 faeb 	bl	8000b14 <__addsf3>
 800b53e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b542:	f7f5 fdab 	bl	800109c <__aeabi_fcmpgt>
 800b546:	2800      	cmp	r0, #0
 800b548:	d1ed      	bne.n	800b526 <atanf+0x2a>
 800b54a:	f04f 36ff 	mov.w	r6, #4294967295
 800b54e:	e01c      	b.n	800b58a <atanf+0x8e>
 800b550:	f000 f8e0 	bl	800b714 <fabsf>
 800b554:	4b5e      	ldr	r3, [pc, #376]	; (800b6d0 <atanf+0x1d4>)
 800b556:	4604      	mov	r4, r0
 800b558:	429d      	cmp	r5, r3
 800b55a:	dc7c      	bgt.n	800b656 <atanf+0x15a>
 800b55c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b560:	429d      	cmp	r5, r3
 800b562:	dc67      	bgt.n	800b634 <atanf+0x138>
 800b564:	4601      	mov	r1, r0
 800b566:	f7f5 fad5 	bl	8000b14 <__addsf3>
 800b56a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b56e:	f7f5 facf 	bl	8000b10 <__aeabi_fsub>
 800b572:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b576:	4605      	mov	r5, r0
 800b578:	4620      	mov	r0, r4
 800b57a:	f7f5 facb 	bl	8000b14 <__addsf3>
 800b57e:	4601      	mov	r1, r0
 800b580:	4628      	mov	r0, r5
 800b582:	f7f5 fc83 	bl	8000e8c <__aeabi_fdiv>
 800b586:	2600      	movs	r6, #0
 800b588:	4604      	mov	r4, r0
 800b58a:	4621      	mov	r1, r4
 800b58c:	4620      	mov	r0, r4
 800b58e:	f7f5 fbc9 	bl	8000d24 <__aeabi_fmul>
 800b592:	4601      	mov	r1, r0
 800b594:	4607      	mov	r7, r0
 800b596:	f7f5 fbc5 	bl	8000d24 <__aeabi_fmul>
 800b59a:	4605      	mov	r5, r0
 800b59c:	494d      	ldr	r1, [pc, #308]	; (800b6d4 <atanf+0x1d8>)
 800b59e:	f7f5 fbc1 	bl	8000d24 <__aeabi_fmul>
 800b5a2:	494d      	ldr	r1, [pc, #308]	; (800b6d8 <atanf+0x1dc>)
 800b5a4:	f7f5 fab6 	bl	8000b14 <__addsf3>
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	f7f5 fbbb 	bl	8000d24 <__aeabi_fmul>
 800b5ae:	494b      	ldr	r1, [pc, #300]	; (800b6dc <atanf+0x1e0>)
 800b5b0:	f7f5 fab0 	bl	8000b14 <__addsf3>
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	f7f5 fbb5 	bl	8000d24 <__aeabi_fmul>
 800b5ba:	4949      	ldr	r1, [pc, #292]	; (800b6e0 <atanf+0x1e4>)
 800b5bc:	f7f5 faaa 	bl	8000b14 <__addsf3>
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	f7f5 fbaf 	bl	8000d24 <__aeabi_fmul>
 800b5c6:	4947      	ldr	r1, [pc, #284]	; (800b6e4 <atanf+0x1e8>)
 800b5c8:	f7f5 faa4 	bl	8000b14 <__addsf3>
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	f7f5 fba9 	bl	8000d24 <__aeabi_fmul>
 800b5d2:	4945      	ldr	r1, [pc, #276]	; (800b6e8 <atanf+0x1ec>)
 800b5d4:	f7f5 fa9e 	bl	8000b14 <__addsf3>
 800b5d8:	4639      	mov	r1, r7
 800b5da:	f7f5 fba3 	bl	8000d24 <__aeabi_fmul>
 800b5de:	4943      	ldr	r1, [pc, #268]	; (800b6ec <atanf+0x1f0>)
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f7f5 fb9e 	bl	8000d24 <__aeabi_fmul>
 800b5e8:	4941      	ldr	r1, [pc, #260]	; (800b6f0 <atanf+0x1f4>)
 800b5ea:	f7f5 fa91 	bl	8000b10 <__aeabi_fsub>
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f7f5 fb98 	bl	8000d24 <__aeabi_fmul>
 800b5f4:	493f      	ldr	r1, [pc, #252]	; (800b6f4 <atanf+0x1f8>)
 800b5f6:	f7f5 fa8b 	bl	8000b10 <__aeabi_fsub>
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	f7f5 fb92 	bl	8000d24 <__aeabi_fmul>
 800b600:	493d      	ldr	r1, [pc, #244]	; (800b6f8 <atanf+0x1fc>)
 800b602:	f7f5 fa85 	bl	8000b10 <__aeabi_fsub>
 800b606:	4629      	mov	r1, r5
 800b608:	f7f5 fb8c 	bl	8000d24 <__aeabi_fmul>
 800b60c:	493b      	ldr	r1, [pc, #236]	; (800b6fc <atanf+0x200>)
 800b60e:	f7f5 fa7f 	bl	8000b10 <__aeabi_fsub>
 800b612:	4629      	mov	r1, r5
 800b614:	f7f5 fb86 	bl	8000d24 <__aeabi_fmul>
 800b618:	4601      	mov	r1, r0
 800b61a:	4638      	mov	r0, r7
 800b61c:	f7f5 fa7a 	bl	8000b14 <__addsf3>
 800b620:	4621      	mov	r1, r4
 800b622:	f7f5 fb7f 	bl	8000d24 <__aeabi_fmul>
 800b626:	1c73      	adds	r3, r6, #1
 800b628:	4601      	mov	r1, r0
 800b62a:	d133      	bne.n	800b694 <atanf+0x198>
 800b62c:	4620      	mov	r0, r4
 800b62e:	f7f5 fa6f 	bl	8000b10 <__aeabi_fsub>
 800b632:	e772      	b.n	800b51a <atanf+0x1e>
 800b634:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b638:	f7f5 fa6a 	bl	8000b10 <__aeabi_fsub>
 800b63c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b640:	4605      	mov	r5, r0
 800b642:	4620      	mov	r0, r4
 800b644:	f7f5 fa66 	bl	8000b14 <__addsf3>
 800b648:	4601      	mov	r1, r0
 800b64a:	4628      	mov	r0, r5
 800b64c:	f7f5 fc1e 	bl	8000e8c <__aeabi_fdiv>
 800b650:	2601      	movs	r6, #1
 800b652:	4604      	mov	r4, r0
 800b654:	e799      	b.n	800b58a <atanf+0x8e>
 800b656:	4b2a      	ldr	r3, [pc, #168]	; (800b700 <atanf+0x204>)
 800b658:	429d      	cmp	r5, r3
 800b65a:	dc14      	bgt.n	800b686 <atanf+0x18a>
 800b65c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b660:	f7f5 fa56 	bl	8000b10 <__aeabi_fsub>
 800b664:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b668:	4605      	mov	r5, r0
 800b66a:	4620      	mov	r0, r4
 800b66c:	f7f5 fb5a 	bl	8000d24 <__aeabi_fmul>
 800b670:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b674:	f7f5 fa4e 	bl	8000b14 <__addsf3>
 800b678:	4601      	mov	r1, r0
 800b67a:	4628      	mov	r0, r5
 800b67c:	f7f5 fc06 	bl	8000e8c <__aeabi_fdiv>
 800b680:	2602      	movs	r6, #2
 800b682:	4604      	mov	r4, r0
 800b684:	e781      	b.n	800b58a <atanf+0x8e>
 800b686:	4601      	mov	r1, r0
 800b688:	481e      	ldr	r0, [pc, #120]	; (800b704 <atanf+0x208>)
 800b68a:	f7f5 fbff 	bl	8000e8c <__aeabi_fdiv>
 800b68e:	2603      	movs	r6, #3
 800b690:	4604      	mov	r4, r0
 800b692:	e77a      	b.n	800b58a <atanf+0x8e>
 800b694:	4b1c      	ldr	r3, [pc, #112]	; (800b708 <atanf+0x20c>)
 800b696:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b69a:	f7f5 fa39 	bl	8000b10 <__aeabi_fsub>
 800b69e:	4621      	mov	r1, r4
 800b6a0:	f7f5 fa36 	bl	8000b10 <__aeabi_fsub>
 800b6a4:	4b19      	ldr	r3, [pc, #100]	; (800b70c <atanf+0x210>)
 800b6a6:	4601      	mov	r1, r0
 800b6a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b6ac:	f7f5 fa30 	bl	8000b10 <__aeabi_fsub>
 800b6b0:	f1b8 0f00 	cmp.w	r8, #0
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	f6bf af36 	bge.w	800b526 <atanf+0x2a>
 800b6ba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b6be:	e72c      	b.n	800b51a <atanf+0x1e>
 800b6c0:	4c13      	ldr	r4, [pc, #76]	; (800b710 <atanf+0x214>)
 800b6c2:	e730      	b.n	800b526 <atanf+0x2a>
 800b6c4:	bfc90fdb 	.word	0xbfc90fdb
 800b6c8:	3edfffff 	.word	0x3edfffff
 800b6cc:	7149f2ca 	.word	0x7149f2ca
 800b6d0:	3f97ffff 	.word	0x3f97ffff
 800b6d4:	3c8569d7 	.word	0x3c8569d7
 800b6d8:	3d4bda59 	.word	0x3d4bda59
 800b6dc:	3d886b35 	.word	0x3d886b35
 800b6e0:	3dba2e6e 	.word	0x3dba2e6e
 800b6e4:	3e124925 	.word	0x3e124925
 800b6e8:	3eaaaaab 	.word	0x3eaaaaab
 800b6ec:	bd15a221 	.word	0xbd15a221
 800b6f0:	3d6ef16b 	.word	0x3d6ef16b
 800b6f4:	3d9d8795 	.word	0x3d9d8795
 800b6f8:	3de38e38 	.word	0x3de38e38
 800b6fc:	3e4ccccd 	.word	0x3e4ccccd
 800b700:	401bffff 	.word	0x401bffff
 800b704:	bf800000 	.word	0xbf800000
 800b708:	0800b8d8 	.word	0x0800b8d8
 800b70c:	0800b8c8 	.word	0x0800b8c8
 800b710:	3fc90fdb 	.word	0x3fc90fdb

0800b714 <fabsf>:
 800b714:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b718:	4770      	bx	lr
	...

0800b71c <nanf>:
 800b71c:	4800      	ldr	r0, [pc, #0]	; (800b720 <nanf+0x4>)
 800b71e:	4770      	bx	lr
 800b720:	7fc00000 	.word	0x7fc00000

0800b724 <_init>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	bf00      	nop
 800b728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b72a:	bc08      	pop	{r3}
 800b72c:	469e      	mov	lr, r3
 800b72e:	4770      	bx	lr

0800b730 <_fini>:
 800b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b732:	bf00      	nop
 800b734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b736:	bc08      	pop	{r3}
 800b738:	469e      	mov	lr, r3
 800b73a:	4770      	bx	lr
