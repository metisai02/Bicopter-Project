
Test_boardC21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800b7d0  0800b7d0  0001b7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b978  0800b978  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800b978  0800b978  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b978  0800b978  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b978  0800b978  0001b978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000088  0800ba08  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800ba08  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012120  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c1  00000000  00000000  000321d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  00034b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00035ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193e5  00000000  00000000  00037148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159f3  00000000  00000000  0005052d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009246e  00000000  00000000  00065f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f838e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006138  00000000  00000000  000f83e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b7b4 	.word	0x0800b7b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800b7b4 	.word	0x0800b7b4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2uiz>:
 80010dc:	0042      	lsls	r2, r0, #1
 80010de:	d20e      	bcs.n	80010fe <__aeabi_f2uiz+0x22>
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30b      	bcc.n	80010fe <__aeabi_f2uiz+0x22>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d409      	bmi.n	8001104 <__aeabi_f2uiz+0x28>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	fa23 f002 	lsr.w	r0, r3, r2
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr
 8001104:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001108:	d101      	bne.n	800110e <__aeabi_f2uiz+0x32>
 800110a:	0242      	lsls	r2, r0, #9
 800110c:	d102      	bne.n	8001114 <__aeabi_f2uiz+0x38>
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	4770      	bx	lr
 8001114:	f04f 0000 	mov.w	r0, #0
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x28>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x28>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f947 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f007 fe4a 	bl	8008dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f95f 	bl	800142a <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f927 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000020 	.word	0x20000020
 80011a0:	20000004 	.word	0x20000004
 80011a4:	20000000 	.word	0x20000000

080011a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x1c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x20>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x20>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000004 	.word	0x20000004
 80011c8:	200000a4 	.word	0x200000a4

080011cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b02      	ldr	r3, [pc, #8]	; (80011dc <HAL_GetTick+0x10>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	200000a4 	.word	0x200000a4

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff fff0 	bl	80011cc <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffe0 	bl	80011cc <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000004 	.word	0x20000004

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4906      	ldr	r1, [pc, #24]	; (80012c0 <__NVIC_EnableIRQ+0x34>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff90 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff2d 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff42 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff90 	bl	8001318 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5f 	bl	80012c4 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff35 	bl	800128c <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b08b      	sub	sp, #44	; 0x2c
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001456:	e169      	b.n	800172c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001458:	2201      	movs	r2, #1
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	429a      	cmp	r2, r3
 8001472:	f040 8158 	bne.w	8001726 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a9a      	ldr	r2, [pc, #616]	; (80016e4 <HAL_GPIO_Init+0x2a0>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d05e      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 8001480:	4a98      	ldr	r2, [pc, #608]	; (80016e4 <HAL_GPIO_Init+0x2a0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d875      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 8001486:	4a98      	ldr	r2, [pc, #608]	; (80016e8 <HAL_GPIO_Init+0x2a4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d058      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 800148c:	4a96      	ldr	r2, [pc, #600]	; (80016e8 <HAL_GPIO_Init+0x2a4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d86f      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 8001492:	4a96      	ldr	r2, [pc, #600]	; (80016ec <HAL_GPIO_Init+0x2a8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d052      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 8001498:	4a94      	ldr	r2, [pc, #592]	; (80016ec <HAL_GPIO_Init+0x2a8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d869      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 800149e:	4a94      	ldr	r2, [pc, #592]	; (80016f0 <HAL_GPIO_Init+0x2ac>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d04c      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 80014a4:	4a92      	ldr	r2, [pc, #584]	; (80016f0 <HAL_GPIO_Init+0x2ac>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d863      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014aa:	4a92      	ldr	r2, [pc, #584]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d046      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 80014b0:	4a90      	ldr	r2, [pc, #576]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d85d      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d82a      	bhi.n	8001510 <HAL_GPIO_Init+0xcc>
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	d859      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <HAL_GPIO_Init+0x80>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	0800153f 	.word	0x0800153f
 80014c8:	08001519 	.word	0x08001519
 80014cc:	0800152b 	.word	0x0800152b
 80014d0:	0800156d 	.word	0x0800156d
 80014d4:	08001573 	.word	0x08001573
 80014d8:	08001573 	.word	0x08001573
 80014dc:	08001573 	.word	0x08001573
 80014e0:	08001573 	.word	0x08001573
 80014e4:	08001573 	.word	0x08001573
 80014e8:	08001573 	.word	0x08001573
 80014ec:	08001573 	.word	0x08001573
 80014f0:	08001573 	.word	0x08001573
 80014f4:	08001573 	.word	0x08001573
 80014f8:	08001573 	.word	0x08001573
 80014fc:	08001573 	.word	0x08001573
 8001500:	08001573 	.word	0x08001573
 8001504:	08001573 	.word	0x08001573
 8001508:	08001521 	.word	0x08001521
 800150c:	08001535 	.word	0x08001535
 8001510:	4a79      	ldr	r2, [pc, #484]	; (80016f8 <HAL_GPIO_Init+0x2b4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001516:	e02c      	b.n	8001572 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e029      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	3304      	adds	r3, #4
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e024      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	3308      	adds	r3, #8
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e01f      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	330c      	adds	r3, #12
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e01a      	b.n	8001574 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001546:	2304      	movs	r3, #4
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e013      	b.n	8001574 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d105      	bne.n	8001560 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001554:	2308      	movs	r3, #8
 8001556:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	611a      	str	r2, [r3, #16]
          break;
 800155e:	e009      	b.n	8001574 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	615a      	str	r2, [r3, #20]
          break;
 800156a:	e003      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
          break;
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x130>
          break;
 8001572:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d801      	bhi.n	800157e <HAL_GPIO_Init+0x13a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	e001      	b.n	8001582 <HAL_GPIO_Init+0x13e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3304      	adds	r3, #4
 8001582:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2bff      	cmp	r3, #255	; 0xff
 8001588:	d802      	bhi.n	8001590 <HAL_GPIO_Init+0x14c>
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	e002      	b.n	8001596 <HAL_GPIO_Init+0x152>
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	3b08      	subs	r3, #8
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	210f      	movs	r1, #15
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	6a39      	ldr	r1, [r7, #32]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	431a      	orrs	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80b1 	beq.w	8001726 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c4:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <HAL_GPIO_Init+0x2b8>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a4c      	ldr	r2, [pc, #304]	; (80016fc <HAL_GPIO_Init+0x2b8>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <HAL_GPIO_Init+0x2b8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015dc:	4a48      	ldr	r2, [pc, #288]	; (8001700 <HAL_GPIO_Init+0x2bc>)
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a40      	ldr	r2, [pc, #256]	; (8001704 <HAL_GPIO_Init+0x2c0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d013      	beq.n	8001630 <HAL_GPIO_Init+0x1ec>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3f      	ldr	r2, [pc, #252]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d00d      	beq.n	800162c <HAL_GPIO_Init+0x1e8>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3e      	ldr	r2, [pc, #248]	; (800170c <HAL_GPIO_Init+0x2c8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_Init+0x1e4>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a3d      	ldr	r2, [pc, #244]	; (8001710 <HAL_GPIO_Init+0x2cc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_GPIO_Init+0x1e0>
 8001620:	2303      	movs	r3, #3
 8001622:	e006      	b.n	8001632 <HAL_GPIO_Init+0x1ee>
 8001624:	2304      	movs	r3, #4
 8001626:	e004      	b.n	8001632 <HAL_GPIO_Init+0x1ee>
 8001628:	2302      	movs	r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x1ee>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_GPIO_Init+0x1ee>
 8001630:	2300      	movs	r3, #0
 8001632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001634:	f002 0203 	and.w	r2, r2, #3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4093      	lsls	r3, r2
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001642:	492f      	ldr	r1, [pc, #188]	; (8001700 <HAL_GPIO_Init+0x2bc>)
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	492c      	ldr	r1, [pc, #176]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	43db      	mvns	r3, r3
 8001672:	4928      	ldr	r1, [pc, #160]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 8001674:	4013      	ands	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4922      	ldr	r1, [pc, #136]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	43db      	mvns	r3, r3
 800169a:	491e      	ldr	r1, [pc, #120]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 800169c:	4013      	ands	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	4918      	ldr	r1, [pc, #96]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4914      	ldr	r1, [pc, #80]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d021      	beq.n	8001718 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
 80016e0:	e021      	b.n	8001726 <HAL_GPIO_Init+0x2e2>
 80016e2:	bf00      	nop
 80016e4:	10320000 	.word	0x10320000
 80016e8:	10310000 	.word	0x10310000
 80016ec:	10220000 	.word	0x10220000
 80016f0:	10210000 	.word	0x10210000
 80016f4:	10120000 	.word	0x10120000
 80016f8:	10110000 	.word	0x10110000
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010000 	.word	0x40010000
 8001704:	40010800 	.word	0x40010800
 8001708:	40010c00 	.word	0x40010c00
 800170c:	40011000 	.word	0x40011000
 8001710:	40011400 	.word	0x40011400
 8001714:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_GPIO_Init+0x304>)
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	43db      	mvns	r3, r3
 8001720:	4909      	ldr	r1, [pc, #36]	; (8001748 <HAL_GPIO_Init+0x304>)
 8001722:	4013      	ands	r3, r2
 8001724:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3301      	adds	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	fa22 f303 	lsr.w	r3, r2, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	f47f ae8e 	bne.w	8001458 <HAL_GPIO_Init+0x14>
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	372c      	adds	r7, #44	; 0x2c
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	611a      	str	r2, [r3, #16]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	041a      	lsls	r2, r3, #16
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43d9      	mvns	r1, r3
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	400b      	ands	r3, r1
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	611a      	str	r2, [r3, #16]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e12b      	b.n	8001a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f007 fb2c 	bl	8008e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001814:	f001 fba0 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a81      	ldr	r2, [pc, #516]	; (8001a24 <HAL_I2C_Init+0x274>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d807      	bhi.n	8001834 <HAL_I2C_Init+0x84>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a80      	ldr	r2, [pc, #512]	; (8001a28 <HAL_I2C_Init+0x278>)
 8001828:	4293      	cmp	r3, r2
 800182a:	bf94      	ite	ls
 800182c:	2301      	movls	r3, #1
 800182e:	2300      	movhi	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	e006      	b.n	8001842 <HAL_I2C_Init+0x92>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a7d      	ldr	r2, [pc, #500]	; (8001a2c <HAL_I2C_Init+0x27c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	bf94      	ite	ls
 800183c:	2301      	movls	r3, #1
 800183e:	2300      	movhi	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0e7      	b.n	8001a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4a78      	ldr	r2, [pc, #480]	; (8001a30 <HAL_I2C_Init+0x280>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a6a      	ldr	r2, [pc, #424]	; (8001a24 <HAL_I2C_Init+0x274>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d802      	bhi.n	8001884 <HAL_I2C_Init+0xd4>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3301      	adds	r3, #1
 8001882:	e009      	b.n	8001898 <HAL_I2C_Init+0xe8>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	4a69      	ldr	r2, [pc, #420]	; (8001a34 <HAL_I2C_Init+0x284>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	3301      	adds	r3, #1
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	430b      	orrs	r3, r1
 800189e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	495c      	ldr	r1, [pc, #368]	; (8001a24 <HAL_I2C_Init+0x274>)
 80018b4:	428b      	cmp	r3, r1
 80018b6:	d819      	bhi.n	80018ec <HAL_I2C_Init+0x13c>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1e59      	subs	r1, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018cc:	400b      	ands	r3, r1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00a      	beq.n	80018e8 <HAL_I2C_Init+0x138>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e59      	subs	r1, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e6:	e051      	b.n	800198c <HAL_I2C_Init+0x1dc>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e04f      	b.n	800198c <HAL_I2C_Init+0x1dc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d111      	bne.n	8001918 <HAL_I2C_Init+0x168>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e58      	subs	r0, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	e012      	b.n	800193e <HAL_I2C_Init+0x18e>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1e58      	subs	r0, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	0099      	lsls	r1, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	fbb0 f3f3 	udiv	r3, r0, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Init+0x196>
 8001942:	2301      	movs	r3, #1
 8001944:	e022      	b.n	800198c <HAL_I2C_Init+0x1dc>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10e      	bne.n	800196c <HAL_I2C_Init+0x1bc>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1e58      	subs	r0, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	440b      	add	r3, r1
 800195c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001960:	3301      	adds	r3, #1
 8001962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196a:	e00f      	b.n	800198c <HAL_I2C_Init+0x1dc>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1e58      	subs	r0, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	0099      	lsls	r1, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001982:	3301      	adds	r3, #1
 8001984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	6809      	ldr	r1, [r1, #0]
 8001990:	4313      	orrs	r3, r2
 8001992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6911      	ldr	r1, [r2, #16]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68d2      	ldr	r2, [r2, #12]
 80019c6:	4311      	orrs	r1, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	000186a0 	.word	0x000186a0
 8001a28:	001e847f 	.word	0x001e847f
 8001a2c:	003d08ff 	.word	0x003d08ff
 8001a30:	431bde83 	.word	0x431bde83
 8001a34:	10624dd3 	.word	0x10624dd3

08001a38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	817b      	strh	r3, [r7, #10]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	813b      	strh	r3, [r7, #8]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a52:	f7ff fbbb 	bl	80011cc <HAL_GetTick>
 8001a56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	f040 80d9 	bne.w	8001c18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2319      	movs	r3, #25
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	496d      	ldr	r1, [pc, #436]	; (8001c24 <HAL_I2C_Mem_Write+0x1ec>)
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 fcc1 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e0cc      	b.n	8001c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_I2C_Mem_Write+0x56>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e0c5      	b.n	8001c1a <HAL_I2C_Mem_Write+0x1e2>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d007      	beq.n	8001ab4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2221      	movs	r2, #33	; 0x21
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a3a      	ldr	r2, [r7, #32]
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <HAL_I2C_Mem_Write+0x1f0>)
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af6:	88f8      	ldrh	r0, [r7, #6]
 8001af8:	893a      	ldrh	r2, [r7, #8]
 8001afa:	8979      	ldrh	r1, [r7, #10]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4603      	mov	r3, r0
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 faf8 	bl	80020fc <I2C_RequestMemoryWrite>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d052      	beq.n	8001bb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e081      	b.n	8001c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fd42 	bl	80025a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00d      	beq.n	8001b42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d107      	bne.n	8001b3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06b      	b.n	8001c1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d11b      	bne.n	8001bb8 <HAL_I2C_Mem_Write+0x180>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d017      	beq.n	8001bb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1aa      	bne.n	8001b16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fd2e 	bl	8002626 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d107      	bne.n	8001be8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e016      	b.n	8001c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e000      	b.n	8001c1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c18:	2302      	movs	r3, #2
  }
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	00100002 	.word	0x00100002
 8001c28:	ffff0000 	.word	0xffff0000

08001c2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	817b      	strh	r3, [r7, #10]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	813b      	strh	r3, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c4a:	f7ff fabf 	bl	80011cc <HAL_GetTick>
 8001c4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	f040 8244 	bne.w	80020e6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2319      	movs	r3, #25
 8001c64:	2201      	movs	r2, #1
 8001c66:	4982      	ldr	r1, [pc, #520]	; (8001e70 <HAL_I2C_Mem_Read+0x244>)
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fbc5 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c74:	2302      	movs	r3, #2
 8001c76:	e237      	b.n	80020e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_I2C_Mem_Read+0x5a>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e230      	b.n	80020e8 <HAL_I2C_Mem_Read+0x4bc>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d007      	beq.n	8001cac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2222      	movs	r2, #34	; 0x22
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4a62      	ldr	r2, [pc, #392]	; (8001e74 <HAL_I2C_Mem_Read+0x248>)
 8001cec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cee:	88f8      	ldrh	r0, [r7, #6]
 8001cf0:	893a      	ldrh	r2, [r7, #8]
 8001cf2:	8979      	ldrh	r1, [r7, #10]
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fa92 	bl	8002228 <I2C_RequestMemoryRead>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e1ec      	b.n	80020e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d113      	bne.n	8001d3e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e1c0      	b.n	80020c0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d11e      	bne.n	8001d84 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d54:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d56:	b672      	cpsid	i
}
 8001d58:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d80:	b662      	cpsie	i
}
 8001d82:	e035      	b.n	8001df0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d11e      	bne.n	8001dca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
}
 8001d9e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dc6:	b662      	cpsie	i
}
 8001dc8:	e012      	b.n	8001df0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dd8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001df0:	e166      	b.n	80020c0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	f200 811f 	bhi.w	800203a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d123      	bne.n	8001e4c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 fc4d 	bl	80026a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e167      	b.n	80020e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e4a:	e139      	b.n	80020c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d152      	bne.n	8001efa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4906      	ldr	r1, [pc, #24]	; (8001e78 <HAL_I2C_Mem_Read+0x24c>)
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 faca 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e13c      	b.n	80020e8 <HAL_I2C_Mem_Read+0x4bc>
 8001e6e:	bf00      	nop
 8001e70:	00100002 	.word	0x00100002
 8001e74:	ffff0000 	.word	0xffff0000
 8001e78:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ec2:	b662      	cpsie	i
}
 8001ec4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ef8:	e0e2      	b.n	80020c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f00:	2200      	movs	r2, #0
 8001f02:	497b      	ldr	r1, [pc, #492]	; (80020f0 <HAL_I2C_Mem_Read+0x4c4>)
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 fa77 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0e9      	b.n	80020e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f24:	b672      	cpsid	i
}
 8001f26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f5a:	4b66      	ldr	r3, [pc, #408]	; (80020f4 <HAL_I2C_Mem_Read+0x4c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	08db      	lsrs	r3, r3, #3
 8001f60:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_I2C_Mem_Read+0x4cc>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0a1a      	lsrs	r2, r3, #8
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00da      	lsls	r2, r3, #3
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d118      	bne.n	8001fb2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f043 0220 	orr.w	r2, r3, #32
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001fa2:	b662      	cpsie	i
}
 8001fa4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e09a      	b.n	80020e8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d1d9      	bne.n	8001f74 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002002:	b662      	cpsie	i
}
 8002004:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202e:	b29b      	uxth	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002038:	e042      	b.n	80020c0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fb32 	bl	80026a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e04c      	b.n	80020e8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206a:	3b01      	subs	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d118      	bne.n	80020c0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f47f ae94 	bne.w	8001df2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
  }
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	00010004 	.word	0x00010004
 80020f4:	20000020 	.word	0x20000020
 80020f8:	14f8b589 	.word	0x14f8b589

080020fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	4603      	mov	r3, r0
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	460b      	mov	r3, r1
 8002110:	813b      	strh	r3, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	2200      	movs	r2, #0
 800212e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f960 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800214c:	d103      	bne.n	8002156 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e05f      	b.n	800221a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800215a:	897b      	ldrh	r3, [r7, #10]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002168:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	6a3a      	ldr	r2, [r7, #32]
 800216e:	492d      	ldr	r1, [pc, #180]	; (8002224 <I2C_RequestMemoryWrite+0x128>)
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f998 	bl	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e04c      	b.n	800221a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002198:	6a39      	ldr	r1, [r7, #32]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fa02 	bl	80025a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00d      	beq.n	80021c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d107      	bne.n	80021be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e02b      	b.n	800221a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	611a      	str	r2, [r3, #16]
 80021d2:	e021      	b.n	8002218 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021d4:	893b      	ldrh	r3, [r7, #8]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e4:	6a39      	ldr	r1, [r7, #32]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f9dc 	bl	80025a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d107      	bne.n	800220a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002208:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e005      	b.n	800221a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800220e:	893b      	ldrh	r3, [r7, #8]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	00010002 	.word	0x00010002

08002228 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	4608      	mov	r0, r1
 8002232:	4611      	mov	r1, r2
 8002234:	461a      	mov	r2, r3
 8002236:	4603      	mov	r3, r0
 8002238:	817b      	strh	r3, [r7, #10]
 800223a:	460b      	mov	r3, r1
 800223c:	813b      	strh	r3, [r7, #8]
 800223e:	4613      	mov	r3, r2
 8002240:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002250:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002260:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	2200      	movs	r2, #0
 800226a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f8c2 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002288:	d103      	bne.n	8002292 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e0aa      	b.n	80023ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002296:	897b      	ldrh	r3, [r7, #10]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	4952      	ldr	r1, [pc, #328]	; (80023f4 <I2C_RequestMemoryRead+0x1cc>)
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f8fa 	bl	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e097      	b.n	80023ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	6a39      	ldr	r1, [r7, #32]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f964 	bl	80025a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00d      	beq.n	80022fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d107      	bne.n	80022fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e076      	b.n	80023ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d105      	bne.n	8002310 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002304:	893b      	ldrh	r3, [r7, #8]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	611a      	str	r2, [r3, #16]
 800230e:	e021      	b.n	8002354 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002310:	893b      	ldrh	r3, [r7, #8]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	b29b      	uxth	r3, r3
 8002316:	b2da      	uxtb	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002320:	6a39      	ldr	r1, [r7, #32]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f93e 	bl	80025a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00d      	beq.n	800234a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b04      	cmp	r3, #4
 8002334:	d107      	bne.n	8002346 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002344:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e050      	b.n	80023ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800234a:	893b      	ldrh	r3, [r7, #8]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002356:	6a39      	ldr	r1, [r7, #32]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f923 	bl	80025a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00d      	beq.n	8002380 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	2b04      	cmp	r3, #4
 800236a:	d107      	bne.n	800237c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e035      	b.n	80023ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2200      	movs	r2, #0
 8002398:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f82b 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00d      	beq.n	80023c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b6:	d103      	bne.n	80023c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e013      	b.n	80023ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023c4:	897b      	ldrh	r3, [r7, #10]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	6a3a      	ldr	r2, [r7, #32]
 80023d8:	4906      	ldr	r1, [pc, #24]	; (80023f4 <I2C_RequestMemoryRead+0x1cc>)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f863 	bl	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	00010002 	.word	0x00010002

080023f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002408:	e025      	b.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d021      	beq.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002412:	f7fe fedb 	bl	80011cc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d302      	bcc.n	8002428 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f043 0220 	orr.w	r2, r3, #32
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e023      	b.n	800249e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10d      	bne.n	800247c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	e00c      	b.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	429a      	cmp	r2, r3
 800249a:	d0b6      	beq.n	800240a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b4:	e051      	b.n	800255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c4:	d123      	bne.n	800250e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f043 0204 	orr.w	r2, r3, #4
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e046      	b.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d021      	beq.n	800255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002516:	f7fe fe59 	bl	80011cc <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d116      	bne.n	800255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f043 0220 	orr.w	r2, r3, #32
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e020      	b.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d10c      	bne.n	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4013      	ands	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf14      	ite	ne
 8002576:	2301      	movne	r3, #1
 8002578:	2300      	moveq	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	e00b      	b.n	8002596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	43da      	mvns	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4013      	ands	r3, r2
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d18d      	bne.n	80024b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b0:	e02d      	b.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f8ce 	bl	8002754 <I2C_IsAcknowledgeFailed>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e02d      	b.n	800261e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d021      	beq.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7fe fdff 	bl	80011cc <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d116      	bne.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f043 0220 	orr.w	r2, r3, #32
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e007      	b.n	800261e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d1ca      	bne.n	80025b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002632:	e02d      	b.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f88d 	bl	8002754 <I2C_IsAcknowledgeFailed>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e02d      	b.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d021      	beq.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264c:	f7fe fdbe 	bl	80011cc <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	429a      	cmp	r2, r3
 800265a:	d302      	bcc.n	8002662 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e007      	b.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b04      	cmp	r3, #4
 800269c:	d1ca      	bne.n	8002634 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026b4:	e042      	b.n	800273c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d119      	bne.n	80026f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0210 	mvn.w	r2, #16
 80026cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e029      	b.n	800274c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f8:	f7fe fd68 	bl	80011cc <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e007      	b.n	800274c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	d1b5      	bne.n	80026b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276a:	d11b      	bne.n	80027a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002774:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f043 0204 	orr.w	r2, r3, #4
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e272      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8087 	beq.w	80028de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d0:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d00c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027dc:	4b8f      	ldr	r3, [pc, #572]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d112      	bne.n	800280e <HAL_RCC_OscConfig+0x5e>
 80027e8:	4b8c      	ldr	r3, [pc, #560]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d10b      	bne.n	800280e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	4b89      	ldr	r3, [pc, #548]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d06c      	beq.n	80028dc <HAL_RCC_OscConfig+0x12c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d168      	bne.n	80028dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e24c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x76>
 8002818:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a7f      	ldr	r2, [pc, #508]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e02e      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x98>
 800282e:	4b7b      	ldr	r3, [pc, #492]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7a      	ldr	r2, [pc, #488]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a77      	ldr	r2, [pc, #476]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0xbc>
 8002852:	4b72      	ldr	r3, [pc, #456]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a71      	ldr	r2, [pc, #452]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a67      	ldr	r2, [pc, #412]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fc9e 	bl	80011cc <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7fe fc9a 	bl	80011cc <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e200      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xe4>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fc8a 	bl	80011cc <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe fc86 	bl	80011cc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1ec      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x10c>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d063      	beq.n	80029b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ea:	4b4c      	ldr	r3, [pc, #304]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x18c>
 8002902:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b43      	ldr	r3, [pc, #268]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x176>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1c0      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4939      	ldr	r1, [pc, #228]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e03a      	b.n	80029b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_RCC_OscConfig+0x270>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe fc3f 	bl	80011cc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7fe fc3b 	bl	80011cc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1a1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4927      	ldr	r1, [pc, #156]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <HAL_RCC_OscConfig+0x270>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fc1e 	bl	80011cc <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe fc1a 	bl	80011cc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e180      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d03a      	beq.n	8002a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <HAL_RCC_OscConfig+0x274>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe fbfe 	bl	80011cc <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fbfa 	bl	80011cc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e160      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029f2:	2001      	movs	r0, #1
 80029f4:	f000 fad8 	bl	8002fa8 <RCC_Delay>
 80029f8:	e01c      	b.n	8002a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_RCC_OscConfig+0x274>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fbe4 	bl	80011cc <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a06:	e00f      	b.n	8002a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fbe0 	bl	80011cc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d908      	bls.n	8002a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e146      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	42420000 	.word	0x42420000
 8002a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b92      	ldr	r3, [pc, #584]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e9      	bne.n	8002a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80a6 	beq.w	8002b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b8b      	ldr	r3, [pc, #556]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b88      	ldr	r3, [pc, #544]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4a87      	ldr	r2, [pc, #540]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	61d3      	str	r3, [r2, #28]
 8002a5e:	4b85      	ldr	r3, [pc, #532]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b82      	ldr	r3, [pc, #520]	; (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d118      	bne.n	8002aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	4b7f      	ldr	r3, [pc, #508]	; (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a7e      	ldr	r2, [pc, #504]	; (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fba1 	bl	80011cc <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8e:	f7fe fb9d 	bl	80011cc <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b64      	cmp	r3, #100	; 0x64
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e103      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b75      	ldr	r3, [pc, #468]	; (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x312>
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a6e      	ldr	r2, [pc, #440]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	e02d      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x334>
 8002aca:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a69      	ldr	r2, [pc, #420]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6213      	str	r3, [r2, #32]
 8002ad6:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a66      	ldr	r2, [pc, #408]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	e01c      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x356>
 8002aec:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4a60      	ldr	r2, [pc, #384]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	f043 0304 	orr.w	r3, r3, #4
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	4b5e      	ldr	r3, [pc, #376]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a5d      	ldr	r2, [pc, #372]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	e00b      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002b06:	4b5b      	ldr	r3, [pc, #364]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a5a      	ldr	r2, [pc, #360]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fb51 	bl	80011cc <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fb4d 	bl	80011cc <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0b1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCC_OscConfig+0x37e>
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b52:	f7fe fb3b 	bl	80011cc <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fb37 	bl	80011cc <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e09b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ee      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d061      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d146      	bne.n	8002c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b33      	ldr	r3, [pc, #204]	; (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fb0b 	bl	80011cc <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe fb07 	bl	80011cc <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e06d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d108      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002be2:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4921      	ldr	r1, [pc, #132]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a19      	ldr	r1, [r3, #32]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	430b      	orrs	r3, r1
 8002c06:	491b      	ldr	r1, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe fadb 	bl	80011cc <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe fad7 	bl	80011cc <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e03d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x46a>
 8002c38:	e035      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fac4 	bl	80011cc <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fac0 	bl	80011cc <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e026      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x498>
 8002c66:	e01e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e019      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_OscConfig+0x500>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d0      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d910      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 0207 	bic.w	r2, r3, #7
 8002cde:	4965      	ldr	r1, [pc, #404]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0b8      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d10:	4b59      	ldr	r3, [pc, #356]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a58      	ldr	r2, [pc, #352]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d28:	4b53      	ldr	r3, [pc, #332]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a52      	ldr	r2, [pc, #328]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b50      	ldr	r3, [pc, #320]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	494d      	ldr	r1, [pc, #308]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d040      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d115      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e07f      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e073      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06b      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4936      	ldr	r1, [pc, #216]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da4:	f7fe fa12 	bl	80011cc <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe fa0e 	bl	80011cc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e053      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d210      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 0207 	bic.w	r2, r3, #7
 8002dea:	4922      	ldr	r1, [pc, #136]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e032      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4916      	ldr	r1, [pc, #88]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	490e      	ldr	r1, [pc, #56]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e42:	f000 f821 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	490a      	ldr	r1, [pc, #40]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	5ccb      	ldrb	r3, [r1, r3]
 8002e56:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5a:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <HAL_RCC_ClockConfig+0x1cc>)
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_RCC_ClockConfig+0x1d0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe f970 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40022000 	.word	0x40022000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	0800b85c 	.word	0x0800b85c
 8002e80:	20000020 	.word	0x20000020
 8002e84:	20000000 	.word	0x20000000

08002e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e88:	b490      	push	{r4, r7}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e8e:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <HAL_RCC_GetSysClockFreq+0xac>)
 8002e90:	1d3c      	adds	r4, r7, #4
 8002e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e98:	f240 2301 	movw	r3, #513	; 0x201
 8002e9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eb2:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x46>
 8002ec6:	e02b      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eca:	623b      	str	r3, [r7, #32]
      break;
 8002ecc:	e02b      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	0c9b      	lsrs	r3, r3, #18
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	3328      	adds	r3, #40	; 0x28
 8002ed8:	443b      	add	r3, r7
 8002eda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ede:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d012      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0c5b      	lsrs	r3, r3, #17
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	3328      	adds	r3, #40	; 0x28
 8002ef6:	443b      	add	r3, r7
 8002ef8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002efc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f02:	fb03 f202 	mul.w	r2, r3, r2
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0e:	e004      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	623b      	str	r3, [r7, #32]
      break;
 8002f1e:	e002      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f22:	623b      	str	r3, [r7, #32]
      break;
 8002f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f26:	6a3b      	ldr	r3, [r7, #32]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc90      	pop	{r4, r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	0800b7d0 	.word	0x0800b7d0
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	007a1200 	.word	0x007a1200
 8002f40:	003d0900 	.word	0x003d0900

08002f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f48:	4b02      	ldr	r3, [pc, #8]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	20000020 	.word	0x20000020

08002f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f5c:	f7ff fff2 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4903      	ldr	r1, [pc, #12]	; (8002f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	0800b86c 	.word	0x0800b86c

08002f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f84:	f7ff ffde 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	0adb      	lsrs	r3, r3, #11
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	; (8002fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	0800b86c 	.word	0x0800b86c

08002fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <RCC_Delay+0x34>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <RCC_Delay+0x38>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0a5b      	lsrs	r3, r3, #9
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fc4:	bf00      	nop
  }
  while (Delay --);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e5a      	subs	r2, r3, #1
 8002fca:	60fa      	str	r2, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f9      	bne.n	8002fc4 <RCC_Delay+0x1c>
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	20000020 	.word	0x20000020
 8002fe0:	10624dd3 	.word	0x10624dd3

08002fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e076      	b.n	80030e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003006:	d009      	beq.n	800301c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	61da      	str	r2, [r3, #28]
 800300e:	e005      	b.n	800301c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f005 ff4c 	bl	8008ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	ea42 0103 	orr.w	r1, r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	0c1a      	lsrs	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f002 0204 	and.w	r2, r2, #4
 80030c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08c      	sub	sp, #48	; 0x30
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030fa:	2301      	movs	r3, #1
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_SPI_TransmitReceive+0x26>
 800310e:	2302      	movs	r3, #2
 8003110:	e18a      	b.n	8003428 <HAL_SPI_TransmitReceive+0x33c>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800311a:	f7fe f857 	bl	80011cc <HAL_GetTick>
 800311e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003130:	887b      	ldrh	r3, [r7, #2]
 8003132:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003134:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003138:	2b01      	cmp	r3, #1
 800313a:	d00f      	beq.n	800315c <HAL_SPI_TransmitReceive+0x70>
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003142:	d107      	bne.n	8003154 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <HAL_SPI_TransmitReceive+0x68>
 800314c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003150:	2b04      	cmp	r3, #4
 8003152:	d003      	beq.n	800315c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003154:	2302      	movs	r3, #2
 8003156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800315a:	e15b      	b.n	8003414 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_SPI_TransmitReceive+0x82>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_SPI_TransmitReceive+0x82>
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003174:	e14e      	b.n	8003414 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b04      	cmp	r3, #4
 8003180:	d003      	beq.n	800318a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2205      	movs	r2, #5
 8003186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	887a      	ldrh	r2, [r7, #2]
 800319a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	887a      	ldrh	r2, [r7, #2]
 80031b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d007      	beq.n	80031de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e6:	d178      	bne.n	80032da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x10a>
 80031f0:	8b7b      	ldrh	r3, [r7, #26]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d166      	bne.n	80032c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	881a      	ldrh	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	1c9a      	adds	r2, r3, #2
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800321a:	e053      	b.n	80032c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b02      	cmp	r3, #2
 8003228:	d11b      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x176>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d016      	beq.n	8003262 <HAL_SPI_TransmitReceive+0x176>
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d113      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	1c9a      	adds	r2, r3, #2
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d119      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x1b8>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d014      	beq.n	80032a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	b292      	uxth	r2, r2
 8003286:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032a0:	2301      	movs	r3, #1
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032a4:	f7fd ff92 	bl	80011cc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d807      	bhi.n	80032c4 <HAL_SPI_TransmitReceive+0x1d8>
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ba:	d003      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032c2:	e0a7      	b.n	8003414 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1a6      	bne.n	800321c <HAL_SPI_TransmitReceive+0x130>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1a1      	bne.n	800321c <HAL_SPI_TransmitReceive+0x130>
 80032d8:	e07c      	b.n	80033d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x1fc>
 80032e2:	8b7b      	ldrh	r3, [r7, #26]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d16b      	bne.n	80033c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	7812      	ldrb	r2, [r2, #0]
 80032f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800330e:	e057      	b.n	80033c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d11c      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x26c>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d017      	beq.n	8003358 <HAL_SPI_TransmitReceive+0x26c>
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d114      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d119      	bne.n	800339a <HAL_SPI_TransmitReceive+0x2ae>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d014      	beq.n	800339a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003396:	2301      	movs	r3, #1
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800339a:	f7fd ff17 	bl	80011cc <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d803      	bhi.n	80033b2 <HAL_SPI_TransmitReceive+0x2c6>
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d102      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x2cc>
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d103      	bne.n	80033c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033be:	e029      	b.n	8003414 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1a2      	bne.n	8003310 <HAL_SPI_TransmitReceive+0x224>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d19d      	bne.n	8003310 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f8b1 	bl	8003540 <SPI_EndRxTxTransaction>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d006      	beq.n	80033f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033f0:	e010      	b.n	8003414 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	e000      	b.n	8003414 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003412:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003424:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003428:	4618      	mov	r0, r3
 800342a:	3730      	adds	r7, #48	; 0x30
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003440:	f7fd fec4 	bl	80011cc <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4413      	add	r3, r2
 800344e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003450:	f7fd febc 	bl	80011cc <HAL_GetTick>
 8003454:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003456:	4b39      	ldr	r3, [pc, #228]	; (800353c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	015b      	lsls	r3, r3, #5
 800345c:	0d1b      	lsrs	r3, r3, #20
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003466:	e054      	b.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d050      	beq.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003470:	f7fd feac 	bl	80011cc <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	429a      	cmp	r2, r3
 800347e:	d902      	bls.n	8003486 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d13d      	bne.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003494:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349e:	d111      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a8:	d004      	beq.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b2:	d107      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034cc:	d10f      	bne.n	80034ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e017      	b.n	8003532 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	3b01      	subs	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d19b      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000020 	.word	0x20000020

08003540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff ff6a 	bl	8003430 <SPI_WaitFlagStateUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e000      	b.n	8003574 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d001      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e03a      	b.n	800360a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a18      	ldr	r2, [pc, #96]	; (8003614 <HAL_TIM_Base_Start_IT+0x98>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x58>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035be:	d009      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x58>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a14      	ldr	r2, [pc, #80]	; (8003618 <HAL_TIM_Base_Start_IT+0x9c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x58>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a13      	ldr	r2, [pc, #76]	; (800361c <HAL_TIM_Base_Start_IT+0xa0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d111      	bne.n	80035f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d010      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f6:	e007      	b.n	8003608 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800

08003620 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e041      	b.n	80036b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f005 fc90 	bl	8008f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f000 faba 	bl	8003bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <HAL_TIM_PWM_Start+0x24>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	e022      	b.n	800372a <HAL_TIM_PWM_Start+0x6a>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d109      	bne.n	80036fe <HAL_TIM_PWM_Start+0x3e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	e015      	b.n	800372a <HAL_TIM_PWM_Start+0x6a>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d109      	bne.n	8003718 <HAL_TIM_PWM_Start+0x58>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	bf14      	ite	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2300      	moveq	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e008      	b.n	800372a <HAL_TIM_PWM_Start+0x6a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	bf14      	ite	ne
 8003724:	2301      	movne	r3, #1
 8003726:	2300      	moveq	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e05e      	b.n	80037f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <HAL_TIM_PWM_Start+0x82>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003740:	e013      	b.n	800376a <HAL_TIM_PWM_Start+0xaa>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d104      	bne.n	8003752 <HAL_TIM_PWM_Start+0x92>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003750:	e00b      	b.n	800376a <HAL_TIM_PWM_Start+0xaa>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d104      	bne.n	8003762 <HAL_TIM_PWM_Start+0xa2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003760:	e003      	b.n	800376a <HAL_TIM_PWM_Start+0xaa>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2201      	movs	r2, #1
 8003770:	6839      	ldr	r1, [r7, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fc1a 	bl	8003fac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_TIM_PWM_Start+0x138>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d107      	bne.n	8003792 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <HAL_TIM_PWM_Start+0x138>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_TIM_PWM_Start+0xfa>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a4:	d009      	beq.n	80037ba <HAL_TIM_PWM_Start+0xfa>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a14      	ldr	r2, [pc, #80]	; (80037fc <HAL_TIM_PWM_Start+0x13c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIM_PWM_Start+0xfa>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_TIM_PWM_Start+0x140>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d111      	bne.n	80037de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b06      	cmp	r3, #6
 80037ca:	d010      	beq.n	80037ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037dc:	e007      	b.n	80037ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d122      	bne.n	8003860 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b02      	cmp	r3, #2
 8003826:	d11b      	bne.n	8003860 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0202 	mvn.w	r2, #2
 8003830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f9ab 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 800384c:	e005      	b.n	800385a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f99e 	bl	8003b90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f9ad 	bl	8003bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b04      	cmp	r3, #4
 800386c:	d122      	bne.n	80038b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b04      	cmp	r3, #4
 800387a:	d11b      	bne.n	80038b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0204 	mvn.w	r2, #4
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f981 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 80038a0:	e005      	b.n	80038ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f974 	bl	8003b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f983 	bl	8003bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d122      	bne.n	8003908 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d11b      	bne.n	8003908 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0208 	mvn.w	r2, #8
 80038d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2204      	movs	r2, #4
 80038de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f957 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 80038f4:	e005      	b.n	8003902 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f94a 	bl	8003b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f959 	bl	8003bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b10      	cmp	r3, #16
 8003914:	d122      	bne.n	800395c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b10      	cmp	r3, #16
 8003922:	d11b      	bne.n	800395c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0210 	mvn.w	r2, #16
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2208      	movs	r2, #8
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f92d 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f920 	bl	8003b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f92f 	bl	8003bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0201 	mvn.w	r2, #1
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 ff80 	bl	8004888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	2b80      	cmp	r3, #128	; 0x80
 8003994:	d10e      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b80      	cmp	r3, #128	; 0x80
 80039a2:	d107      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fb87 	bl	80040c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d10e      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d107      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8f3 	bl	8003bc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d10e      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d107      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0220 	mvn.w	r2, #32
 8003a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fb52 	bl	80040b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0ac      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b0c      	cmp	r3, #12
 8003a3a:	f200 809f 	bhi.w	8003b7c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a79 	.word	0x08003a79
 8003a48:	08003b7d 	.word	0x08003b7d
 8003a4c:	08003b7d 	.word	0x08003b7d
 8003a50:	08003b7d 	.word	0x08003b7d
 8003a54:	08003ab9 	.word	0x08003ab9
 8003a58:	08003b7d 	.word	0x08003b7d
 8003a5c:	08003b7d 	.word	0x08003b7d
 8003a60:	08003b7d 	.word	0x08003b7d
 8003a64:	08003afb 	.word	0x08003afb
 8003a68:	08003b7d 	.word	0x08003b7d
 8003a6c:	08003b7d 	.word	0x08003b7d
 8003a70:	08003b7d 	.word	0x08003b7d
 8003a74:	08003b3b 	.word	0x08003b3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f90c 	bl	8003c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0208 	orr.w	r2, r2, #8
 8003a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0204 	bic.w	r2, r2, #4
 8003aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6999      	ldr	r1, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	619a      	str	r2, [r3, #24]
      break;
 8003ab6:	e062      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f952 	bl	8003d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6999      	ldr	r1, [r3, #24]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	619a      	str	r2, [r3, #24]
      break;
 8003af8:	e041      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f99b 	bl	8003e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0208 	orr.w	r2, r2, #8
 8003b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0204 	bic.w	r2, r2, #4
 8003b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69d9      	ldr	r1, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]
      break;
 8003b38:	e021      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f9e5 	bl	8003f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69d9      	ldr	r1, [r3, #28]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	021a      	lsls	r2, r3, #8
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	61da      	str	r2, [r3, #28]
      break;
 8003b7a:	e000      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a29      	ldr	r2, [pc, #164]	; (8003c90 <TIM_Base_SetConfig+0xb8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <TIM_Base_SetConfig+0x30>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf6:	d007      	beq.n	8003c08 <TIM_Base_SetConfig+0x30>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <TIM_Base_SetConfig+0xbc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_Base_SetConfig+0x30>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <TIM_Base_SetConfig+0xc0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d108      	bne.n	8003c1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <TIM_Base_SetConfig+0xb8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00b      	beq.n	8003c3a <TIM_Base_SetConfig+0x62>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c28:	d007      	beq.n	8003c3a <TIM_Base_SetConfig+0x62>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <TIM_Base_SetConfig+0xbc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d003      	beq.n	8003c3a <TIM_Base_SetConfig+0x62>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <TIM_Base_SetConfig+0xc0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d108      	bne.n	8003c4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <TIM_Base_SetConfig+0xb8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d103      	bne.n	8003c80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	615a      	str	r2, [r3, #20]
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	40000400 	.word	0x40000400
 8003c98:	40000800 	.word	0x40000800

08003c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f023 0201 	bic.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f023 0302 	bic.w	r3, r3, #2
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <TIM_OC1_SetConfig+0xc8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10c      	bne.n	8003d12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0308 	bic.w	r3, r3, #8
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a13      	ldr	r2, [pc, #76]	; (8003d64 <TIM_OC1_SetConfig+0xc8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d111      	bne.n	8003d3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40012c00 	.word	0x40012c00

08003d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f023 0210 	bic.w	r2, r3, #16
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0320 	bic.w	r3, r3, #32
 8003db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <TIM_OC2_SetConfig+0xd0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d10d      	bne.n	8003de4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <TIM_OC2_SetConfig+0xd0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d113      	bne.n	8003e14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	40012c00 	.word	0x40012c00

08003e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <TIM_OC3_SetConfig+0xd0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d10d      	bne.n	8003eb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <TIM_OC3_SetConfig+0xd0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d113      	bne.n	8003ee6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	621a      	str	r2, [r3, #32]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40012c00 	.word	0x40012c00

08003f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	031b      	lsls	r3, r3, #12
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a0f      	ldr	r2, [pc, #60]	; (8003fa8 <TIM_OC4_SetConfig+0x98>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d109      	bne.n	8003f84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	40012c00 	.word	0x40012c00

08003fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a1a      	ldr	r2, [r3, #32]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	401a      	ands	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004008:	2302      	movs	r3, #2
 800400a:	e046      	b.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d009      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a10      	ldr	r2, [pc, #64]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d10c      	bne.n	8004088 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	4313      	orrs	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800

080040b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e03f      	b.n	8004166 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f004 ffa8 	bl	8009050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2224      	movs	r2, #36	; 0x24
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f905 	bl	8004328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800412c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800413c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800414c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b08a      	sub	sp, #40	; 0x28
 8004172:	af02      	add	r7, sp, #8
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b20      	cmp	r3, #32
 800418c:	d17c      	bne.n	8004288 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_UART_Transmit+0x2c>
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e075      	b.n	800428a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_UART_Transmit+0x3e>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e06e      	b.n	800428a <HAL_UART_Transmit+0x11c>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2221      	movs	r2, #33	; 0x21
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c2:	f7fd f803 	bl	80011cc <HAL_GetTick>
 80041c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	88fa      	ldrh	r2, [r7, #6]
 80041d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d108      	bne.n	80041f0 <HAL_UART_Transmit+0x82>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d104      	bne.n	80041f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	e003      	b.n	80041f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004200:	e02a      	b.n	8004258 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	2180      	movs	r1, #128	; 0x80
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f840 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e036      	b.n	800428a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	3302      	adds	r3, #2
 8004236:	61bb      	str	r3, [r7, #24]
 8004238:	e007      	b.n	800424a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	781a      	ldrb	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3301      	adds	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1cf      	bne.n	8004202 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	2140      	movs	r1, #64	; 0x40
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f810 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e006      	b.n	800428a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a2:	e02c      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d028      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80042b2:	f7fc ff8b 	bl	80011cc <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d21d      	bcs.n	80042fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e00f      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	429a      	cmp	r2, r3
 800431a:	d0c3      	beq.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004362:	f023 030c 	bic.w	r3, r3, #12
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	430b      	orrs	r3, r1
 800436e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2c      	ldr	r2, [pc, #176]	; (800443c <UART_SetConfig+0x114>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004390:	f7fe fdf6 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	e002      	b.n	800439e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004398:	f7fe fdde 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 800439c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009a      	lsls	r2, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	4a22      	ldr	r2, [pc, #136]	; (8004440 <UART_SetConfig+0x118>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	0119      	lsls	r1, r3, #4
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009a      	lsls	r2, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d4:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <UART_SetConfig+0x118>)
 80043d6:	fba3 0302 	umull	r0, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	2064      	movs	r0, #100	; 0x64
 80043de:	fb00 f303 	mul.w	r3, r0, r3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	3332      	adds	r3, #50	; 0x32
 80043e8:	4a15      	ldr	r2, [pc, #84]	; (8004440 <UART_SetConfig+0x118>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f4:	4419      	add	r1, r3
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	009a      	lsls	r2, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	fbb2 f2f3 	udiv	r2, r2, r3
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <UART_SetConfig+0x118>)
 800440e:	fba3 0302 	umull	r0, r3, r3, r2
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2064      	movs	r0, #100	; 0x64
 8004416:	fb00 f303 	mul.w	r3, r0, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	; 0x32
 8004420:	4a07      	ldr	r2, [pc, #28]	; (8004440 <UART_SetConfig+0x118>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	440a      	add	r2, r1
 8004432:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40013800 	.word	0x40013800
 8004440:	51eb851f 	.word	0x51eb851f

08004444 <_write>:
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int _write(int file, char *ptr, int len)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	b29a      	uxth	r2, r3
 8004454:	f04f 33ff 	mov.w	r3, #4294967295
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4804      	ldr	r0, [pc, #16]	; (800446c <_write+0x28>)
 800445c:	f7ff fe87 	bl	800416e <HAL_UART_Transmit>
  return len;
 8004460:	687b      	ldr	r3, [r7, #4]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	2000019c 	.word	0x2000019c

08004470 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004474:	f7fc fe52 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004478:	f000 f83e 	bl	80044f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800447c:	f000 f98a 	bl	8004794 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004480:	f000 f87c 	bl	800457c <MX_I2C1_Init>
  MX_SPI2_Init();
 8004484:	f000 f8a8 	bl	80045d8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004488:	f000 f8dc 	bl	8004644 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800448c:	f000 f958 	bl	8004740 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  while (MPU9255_Init(&hi2c1) == 1)
 8004490:	e006      	b.n	80044a0 <main+0x30>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8004492:	2104      	movs	r1, #4
 8004494:	4814      	ldr	r0, [pc, #80]	; (80044e8 <main+0x78>)
 8004496:	f7fd f971 	bl	800177c <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800449a:	2064      	movs	r0, #100	; 0x64
 800449c:	f7fc fea0 	bl	80011e0 <HAL_Delay>
  while (MPU9255_Init(&hi2c1) == 1)
 80044a0:	4812      	ldr	r0, [pc, #72]	; (80044ec <main+0x7c>)
 80044a2:	f000 fb01 	bl	8004aa8 <MPU9255_Init>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d0f2      	beq.n	8004492 <main+0x22>
  }

  while (throttle_rc < 1020 || throttle_rc > 1050)
 80044ac:	e002      	b.n	80044b4 <main+0x44>
  {
    // Read again
    HAL_Delay(20);
 80044ae:	2014      	movs	r0, #20
 80044b0:	f7fc fe96 	bl	80011e0 <HAL_Delay>
  while (throttle_rc < 1020 || throttle_rc > 1050)
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <main+0x80>)
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80044bc:	d3f7      	bcc.n	80044ae <main+0x3e>
 80044be:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <main+0x80>)
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	f240 421a 	movw	r2, #1050	; 0x41a
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d8f1      	bhi.n	80044ae <main+0x3e>
  }

  HAL_TIM_Base_Start_IT(&htim3);
 80044ca:	480a      	ldr	r0, [pc, #40]	; (80044f4 <main+0x84>)
 80044cc:	f7ff f856 	bl	800357c <HAL_TIM_Base_Start_IT>

  // int count;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80044d0:	210c      	movs	r1, #12
 80044d2:	4808      	ldr	r0, [pc, #32]	; (80044f4 <main+0x84>)
 80044d4:	f7ff f8f4 	bl	80036c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80044d8:	2108      	movs	r1, #8
 80044da:	4806      	ldr	r0, [pc, #24]	; (80044f4 <main+0x84>)
 80044dc:	f7ff f8f0 	bl	80036c0 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    runRadio();
 80044e0:	f004 fbba 	bl	8008c58 <runRadio>
  {
 80044e4:	e7fc      	b.n	80044e0 <main+0x70>
 80044e6:	bf00      	nop
 80044e8:	40010c00 	.word	0x40010c00
 80044ec:	200000a8 	.word	0x200000a8
 80044f0:	20000242 	.word	0x20000242
 80044f4:	20000154 	.word	0x20000154

080044f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b090      	sub	sp, #64	; 0x40
 80044fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044fe:	f107 0318 	add.w	r3, r7, #24
 8004502:	2228      	movs	r2, #40	; 0x28
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f004 fef2 	bl	80092f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800450c:	1d3b      	adds	r3, r7, #4
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	605a      	str	r2, [r3, #4]
 8004514:	609a      	str	r2, [r3, #8]
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800451a:	2302      	movs	r3, #2
 800451c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800451e:	2301      	movs	r3, #1
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004522:	2310      	movs	r3, #16
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004526:	2302      	movs	r3, #2
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800452a:	2300      	movs	r3, #0
 800452c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800452e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004534:	f107 0318 	add.w	r3, r7, #24
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe f939 	bl	80027b0 <HAL_RCC_OscConfig>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8004544:	f000 fa1a 	bl	800497c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004548:	230f      	movs	r3, #15
 800454a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800454c:	2302      	movs	r3, #2
 800454e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe fba6 	bl	8002cb4 <HAL_RCC_ClockConfig>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800456e:	f000 fa05 	bl	800497c <Error_Handler>
  }
}
 8004572:	bf00      	nop
 8004574:	3740      	adds	r7, #64	; 0x40
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <MX_I2C1_Init+0x50>)
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <MX_I2C1_Init+0x54>)
 8004584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004586:	4b11      	ldr	r3, [pc, #68]	; (80045cc <MX_I2C1_Init+0x50>)
 8004588:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <MX_I2C1_Init+0x58>)
 800458a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <MX_I2C1_Init+0x50>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004592:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <MX_I2C1_Init+0x50>)
 8004594:	2200      	movs	r2, #0
 8004596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004598:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <MX_I2C1_Init+0x50>)
 800459a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800459e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045a0:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <MX_I2C1_Init+0x50>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80045a6:	4b09      	ldr	r3, [pc, #36]	; (80045cc <MX_I2C1_Init+0x50>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045ac:	4b07      	ldr	r3, [pc, #28]	; (80045cc <MX_I2C1_Init+0x50>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <MX_I2C1_Init+0x50>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045b8:	4804      	ldr	r0, [pc, #16]	; (80045cc <MX_I2C1_Init+0x50>)
 80045ba:	f7fd f8f9 	bl	80017b0 <HAL_I2C_Init>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80045c4:	f000 f9da 	bl	800497c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80045c8:	bf00      	nop
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	200000a8 	.word	0x200000a8
 80045d0:	40005400 	.word	0x40005400
 80045d4:	000186a0 	.word	0x000186a0

080045d8 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80045dc:	4b17      	ldr	r3, [pc, #92]	; (800463c <MX_SPI2_Init+0x64>)
 80045de:	4a18      	ldr	r2, [pc, #96]	; (8004640 <MX_SPI2_Init+0x68>)
 80045e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045e2:	4b16      	ldr	r3, [pc, #88]	; (800463c <MX_SPI2_Init+0x64>)
 80045e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <MX_SPI2_Init+0x64>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <MX_SPI2_Init+0x64>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f6:	4b11      	ldr	r3, [pc, #68]	; (800463c <MX_SPI2_Init+0x64>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <MX_SPI2_Init+0x64>)
 80045fe:	2200      	movs	r2, #0
 8004600:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004602:	4b0e      	ldr	r3, [pc, #56]	; (800463c <MX_SPI2_Init+0x64>)
 8004604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004608:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <MX_SPI2_Init+0x64>)
 800460c:	2200      	movs	r2, #0
 800460e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <MX_SPI2_Init+0x64>)
 8004612:	2200      	movs	r2, #0
 8004614:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004616:	4b09      	ldr	r3, [pc, #36]	; (800463c <MX_SPI2_Init+0x64>)
 8004618:	2200      	movs	r2, #0
 800461a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <MX_SPI2_Init+0x64>)
 800461e:	2200      	movs	r2, #0
 8004620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <MX_SPI2_Init+0x64>)
 8004624:	220a      	movs	r2, #10
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004628:	4804      	ldr	r0, [pc, #16]	; (800463c <MX_SPI2_Init+0x64>)
 800462a:	f7fe fcdb 	bl	8002fe4 <HAL_SPI_Init>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004634:	f000 f9a2 	bl	800497c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 8004638:	bf00      	nop
 800463a:	bd80      	pop	{r7, pc}
 800463c:	200000fc 	.word	0x200000fc
 8004640:	40003800 	.word	0x40003800

08004644 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800464a:	f107 0320 	add.w	r3, r7, #32
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	60da      	str	r2, [r3, #12]
 8004660:	611a      	str	r2, [r3, #16]
 8004662:	615a      	str	r2, [r3, #20]
 8004664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004666:	4b34      	ldr	r3, [pc, #208]	; (8004738 <MX_TIM3_Init+0xf4>)
 8004668:	4a34      	ldr	r2, [pc, #208]	; (800473c <MX_TIM3_Init+0xf8>)
 800466a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <MX_TIM3_Init+0xf4>)
 800466e:	223f      	movs	r2, #63	; 0x3f
 8004670:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004672:	4b31      	ldr	r3, [pc, #196]	; (8004738 <MX_TIM3_Init+0xf4>)
 8004674:	2200      	movs	r2, #0
 8004676:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8004678:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <MX_TIM3_Init+0xf4>)
 800467a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800467e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004680:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <MX_TIM3_Init+0xf4>)
 8004682:	2200      	movs	r2, #0
 8004684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004686:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <MX_TIM3_Init+0xf4>)
 8004688:	2200      	movs	r2, #0
 800468a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800468c:	482a      	ldr	r0, [pc, #168]	; (8004738 <MX_TIM3_Init+0xf4>)
 800468e:	f7fe ffc7 	bl	8003620 <HAL_TIM_PWM_Init>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004698:	f000 f970 	bl	800497c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800469c:	2300      	movs	r3, #0
 800469e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046a4:	f107 0320 	add.w	r3, r7, #32
 80046a8:	4619      	mov	r1, r3
 80046aa:	4823      	ldr	r0, [pc, #140]	; (8004738 <MX_TIM3_Init+0xf4>)
 80046ac:	f7ff fca2 	bl	8003ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80046b6:	f000 f961 	bl	800497c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046ba:	2360      	movs	r3, #96	; 0x60
 80046bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046ca:	1d3b      	adds	r3, r7, #4
 80046cc:	2200      	movs	r2, #0
 80046ce:	4619      	mov	r1, r3
 80046d0:	4819      	ldr	r0, [pc, #100]	; (8004738 <MX_TIM3_Init+0xf4>)
 80046d2:	f7ff f99f 	bl	8003a14 <HAL_TIM_PWM_ConfigChannel>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80046dc:	f000 f94e 	bl	800497c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	2204      	movs	r2, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4814      	ldr	r0, [pc, #80]	; (8004738 <MX_TIM3_Init+0xf4>)
 80046e8:	f7ff f994 	bl	8003a14 <HAL_TIM_PWM_ConfigChannel>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80046f2:	f000 f943 	bl	800497c <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 80046f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	2208      	movs	r2, #8
 8004700:	4619      	mov	r1, r3
 8004702:	480d      	ldr	r0, [pc, #52]	; (8004738 <MX_TIM3_Init+0xf4>)
 8004704:	f7ff f986 	bl	8003a14 <HAL_TIM_PWM_ConfigChannel>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800470e:	f000 f935 	bl	800497c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	220c      	movs	r2, #12
 8004716:	4619      	mov	r1, r3
 8004718:	4807      	ldr	r0, [pc, #28]	; (8004738 <MX_TIM3_Init+0xf4>)
 800471a:	f7ff f97b 	bl	8003a14 <HAL_TIM_PWM_ConfigChannel>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8004724:	f000 f92a 	bl	800497c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004728:	4803      	ldr	r0, [pc, #12]	; (8004738 <MX_TIM3_Init+0xf4>)
 800472a:	f004 fc45 	bl	8008fb8 <HAL_TIM_MspPostInit>
}
 800472e:	bf00      	nop
 8004730:	3728      	adds	r7, #40	; 0x28
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000154 	.word	0x20000154
 800473c:	40000400 	.word	0x40000400

08004740 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004746:	4a12      	ldr	r2, [pc, #72]	; (8004790 <MX_USART1_UART_Init+0x50>)
 8004748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <MX_USART1_UART_Init+0x4c>)
 800474c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004754:	2200      	movs	r2, #0
 8004756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004758:	4b0c      	ldr	r3, [pc, #48]	; (800478c <MX_USART1_UART_Init+0x4c>)
 800475a:	2200      	movs	r2, #0
 800475c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800475e:	4b0b      	ldr	r3, [pc, #44]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004766:	220c      	movs	r2, #12
 8004768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <MX_USART1_UART_Init+0x4c>)
 800476c:	2200      	movs	r2, #0
 800476e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004772:	2200      	movs	r2, #0
 8004774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004776:	4805      	ldr	r0, [pc, #20]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004778:	f7ff fcac 	bl	80040d4 <HAL_UART_Init>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004782:	f000 f8fb 	bl	800497c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8004786:	bf00      	nop
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	2000019c 	.word	0x2000019c
 8004790:	40013800 	.word	0x40013800

08004794 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479a:	f107 0310 	add.w	r3, r7, #16
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	605a      	str	r2, [r3, #4]
 80047a4:	609a      	str	r2, [r3, #8]
 80047a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a8:	4b33      	ldr	r3, [pc, #204]	; (8004878 <MX_GPIO_Init+0xe4>)
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	4a32      	ldr	r2, [pc, #200]	; (8004878 <MX_GPIO_Init+0xe4>)
 80047ae:	f043 0310 	orr.w	r3, r3, #16
 80047b2:	6193      	str	r3, [r2, #24]
 80047b4:	4b30      	ldr	r3, [pc, #192]	; (8004878 <MX_GPIO_Init+0xe4>)
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c0:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <MX_GPIO_Init+0xe4>)
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	4a2c      	ldr	r2, [pc, #176]	; (8004878 <MX_GPIO_Init+0xe4>)
 80047c6:	f043 0304 	orr.w	r3, r3, #4
 80047ca:	6193      	str	r3, [r2, #24]
 80047cc:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <MX_GPIO_Init+0xe4>)
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047d8:	4b27      	ldr	r3, [pc, #156]	; (8004878 <MX_GPIO_Init+0xe4>)
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <MX_GPIO_Init+0xe4>)
 80047de:	f043 0308 	orr.w	r3, r3, #8
 80047e2:	6193      	str	r3, [r2, #24]
 80047e4:	4b24      	ldr	r3, [pc, #144]	; (8004878 <MX_GPIO_Init+0xe4>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin, GPIO_PIN_RESET);
 80047f0:	2200      	movs	r2, #0
 80047f2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80047f6:	4821      	ldr	r0, [pc, #132]	; (800487c <MX_GPIO_Init+0xe8>)
 80047f8:	f7fc ffa8 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin | NRF_CSN_Pin, GPIO_PIN_RESET);
 80047fc:	2200      	movs	r2, #0
 80047fe:	f241 0104 	movw	r1, #4100	; 0x1004
 8004802:	481f      	ldr	r0, [pc, #124]	; (8004880 <MX_GPIO_Init+0xec>)
 8004804:	f7fc ffa2 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004808:	2200      	movs	r2, #0
 800480a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800480e:	481d      	ldr	r0, [pc, #116]	; (8004884 <MX_GPIO_Init+0xf0>)
 8004810:	f7fc ff9c 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8004814:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004822:	2302      	movs	r3, #2
 8004824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004826:	f107 0310 	add.w	r3, r7, #16
 800482a:	4619      	mov	r1, r3
 800482c:	4813      	ldr	r0, [pc, #76]	; (800487c <MX_GPIO_Init+0xe8>)
 800482e:	f7fc fe09 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin | NRF_CSN_Pin;
 8004832:	f241 0304 	movw	r3, #4100	; 0x1004
 8004836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004838:	2301      	movs	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004840:	2302      	movs	r3, #2
 8004842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004844:	f107 0310 	add.w	r3, r7, #16
 8004848:	4619      	mov	r1, r3
 800484a:	480d      	ldr	r0, [pc, #52]	; (8004880 <MX_GPIO_Init+0xec>)
 800484c:	f7fc fdfa 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8004850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004856:	2301      	movs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485e:	2302      	movs	r3, #2
 8004860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8004862:	f107 0310 	add.w	r3, r7, #16
 8004866:	4619      	mov	r1, r3
 8004868:	4806      	ldr	r0, [pc, #24]	; (8004884 <MX_GPIO_Init+0xf0>)
 800486a:	f7fc fdeb 	bl	8001444 <HAL_GPIO_Init>
}
 800486e:	bf00      	nop
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000
 800487c:	40011000 	.word	0x40011000
 8004880:	40010c00 	.word	0x40010c00
 8004884:	40010800 	.word	0x40010800

08004888 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488a:	b087      	sub	sp, #28
 800488c:	af04      	add	r7, sp, #16
 800488e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim3.Instance)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d14c      	bne.n	8004936 <HAL_TIM_PeriodElapsedCallback+0xae>
  {
    readAll(&hi2c1, &MPU9255);
 800489c:	492b      	ldr	r1, [pc, #172]	; (800494c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800489e:	482c      	ldr	r0, [pc, #176]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80048a0:	f000 f966 	bl	8004b70 <readAll>
    abs_yaw_angle = abs_yaw_angle + MPU9255.GyroX * dt;
 80048a4:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fb fdb5 	bl	8000418 <__aeabi_f2d>
 80048ae:	4604      	mov	r4, r0
 80048b0:	460d      	mov	r5, r1
 80048b2:	4b26      	ldr	r3, [pc, #152]	; (800494c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fb fdae 	bl	8000418 <__aeabi_f2d>
 80048bc:	a320      	add	r3, pc, #128	; (adr r3, 8004940 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f7fb fe01 	bl	80004c8 <__aeabi_dmul>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4620      	mov	r0, r4
 80048cc:	4629      	mov	r1, r5
 80048ce:	f7fb fc45 	bl	800015c <__adddf3>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4610      	mov	r0, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	f7fc f8c5 	bl	8000a68 <__aeabi_d2f>
 80048de:	4603      	mov	r3, r0
 80048e0:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80048e2:	6013      	str	r3, [r2, #0]
    // receive rc

    // calculate PID
    calculate_PID(roll_rc, pitch_rc, yaw_rc, MPU9255.roll, MPU9255.pitch, MPU9255.yaw, &pid);
 80048e4:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80048e6:	8818      	ldrh	r0, [r3, #0]
 80048e8:	4b1c      	ldr	r3, [pc, #112]	; (800495c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80048ea:	8819      	ldrh	r1, [r3, #0]
 80048ec:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80048ee:	881c      	ldrh	r4, [r3, #0]
 80048f0:	4b16      	ldr	r3, [pc, #88]	; (800494c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80048f2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80048f4:	4b15      	ldr	r3, [pc, #84]	; (800494c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	4a14      	ldr	r2, [pc, #80]	; (800494c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80048fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048fc:	4e19      	ldr	r6, [pc, #100]	; (8004964 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80048fe:	9602      	str	r6, [sp, #8]
 8004900:	9201      	str	r2, [sp, #4]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	462b      	mov	r3, r5
 8004906:	4622      	mov	r2, r4
 8004908:	f003 fdd2 	bl	80084b0 <calculate_PID>

    // value PWM
    calculate_motor_output(&esc_right, &esc_left, &servo_right, &servo_left, throttle_rc, &pid);
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	4a14      	ldr	r2, [pc, #80]	; (8004964 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004912:	9201      	str	r2, [sp, #4]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4b15      	ldr	r3, [pc, #84]	; (800496c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004918:	4a15      	ldr	r2, [pc, #84]	; (8004970 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800491a:	4916      	ldr	r1, [pc, #88]	; (8004974 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800491c:	4816      	ldr	r0, [pc, #88]	; (8004978 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800491e:	f000 f833 	bl	8004988 <calculate_motor_output>

    // htim3.Instance->CCR1 = servo_right;
    // htim3.Instance->CCR2 = servo_left;
    htim3.Instance->CCR3 = esc_right;
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004924:	881a      	ldrh	r2, [r3, #0]
 8004926:	4b08      	ldr	r3, [pc, #32]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR4 = esc_left;
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800492e:	881a      	ldrh	r2, [r3, #0]
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800493e:	bf00      	nop
 8004940:	47ae147b 	.word	0x47ae147b
 8004944:	3f947ae1 	.word	0x3f947ae1
 8004948:	20000154 	.word	0x20000154
 800494c:	200001e0 	.word	0x200001e0
 8004950:	200000a8 	.word	0x200000a8
 8004954:	20000230 	.word	0x20000230
 8004958:	2000023c 	.word	0x2000023c
 800495c:	2000023e 	.word	0x2000023e
 8004960:	20000240 	.word	0x20000240
 8004964:	20000224 	.word	0x20000224
 8004968:	20000242 	.word	0x20000242
 800496c:	20000236 	.word	0x20000236
 8004970:	20000234 	.word	0x20000234
 8004974:	2000023a 	.word	0x2000023a
 8004978:	20000238 	.word	0x20000238

0800497c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <calculate_motor_output>:
#include "main.h"
#include "pid.h"
#include "motor.h"

void calculate_motor_output(uint16_t *esc_right, uint16_t *esc_left, uint16_t *servo_right, uint16_t *servo_left, uint16_t throttle_rc, PID_t *pid)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
    // value PWM
    *esc_right = throttle_rc + pid->PID_roll_out;
 8004996:	8b3b      	ldrh	r3, [r7, #24]
 8004998:	4618      	mov	r0, r3
 800499a:	f7fc f96f 	bl	8000c7c <__aeabi_i2f>
 800499e:	4602      	mov	r2, r0
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7fc f8b4 	bl	8000b14 <__addsf3>
 80049ac:	4603      	mov	r3, r0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fc fb94 	bl	80010dc <__aeabi_f2uiz>
 80049b4:	4603      	mov	r3, r0
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	801a      	strh	r2, [r3, #0]
    *esc_left = throttle_rc - pid->PID_roll_out;
 80049bc:	8b3b      	ldrh	r3, [r7, #24]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fc f95c 	bl	8000c7c <__aeabi_i2f>
 80049c4:	4602      	mov	r2, r0
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f7fc f89f 	bl	8000b10 <__aeabi_fsub>
 80049d2:	4603      	mov	r3, r0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fc fb81 	bl	80010dc <__aeabi_f2uiz>
 80049da:	4603      	mov	r3, r0
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	801a      	strh	r2, [r3, #0]
    if(*esc_right < 1000)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ea:	d203      	bcs.n	80049f4 <calculate_motor_output+0x6c>
    {
    	*esc_right = 1000;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049f2:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_right > 2000)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80049fc:	d903      	bls.n	8004a06 <calculate_motor_output+0x7e>
    {
    	*esc_right = 2000;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a04:	801a      	strh	r2, [r3, #0]
    }
    if(*esc_left < 1000)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a0e:	d203      	bcs.n	8004a18 <calculate_motor_output+0x90>
    {
        *esc_left = 1000;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a16:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left > 2000)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004a20:	d903      	bls.n	8004a2a <calculate_motor_output+0xa2>
    {
        *esc_left = 2000;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a28:	801a      	strh	r2, [r3, #0]
    }
    *servo_right = 1500 + pid->PID_pitch_out - pid->PID_yaw_out + SERVO_RIGHT_OFFSET;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	491d      	ldr	r1, [pc, #116]	; (8004aa4 <calculate_motor_output+0x11c>)
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fc f86f 	bl	8000b14 <__addsf3>
 8004a36:	4603      	mov	r3, r0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f7fc f865 	bl	8000b10 <__aeabi_fsub>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fc f861 	bl	8000b14 <__addsf3>
 8004a52:	4603      	mov	r3, r0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fc fb41 	bl	80010dc <__aeabi_f2uiz>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	801a      	strh	r2, [r3, #0]
    *servo_left = 1500 - pid->PID_pitch_out - pid->PID_yaw_out + SERVO_LEFT_OFFSET;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4619      	mov	r1, r3
 8004a68:	480e      	ldr	r0, [pc, #56]	; (8004aa4 <calculate_motor_output+0x11c>)
 8004a6a:	f7fc f851 	bl	8000b10 <__aeabi_fsub>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7fc f849 	bl	8000b10 <__aeabi_fsub>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fc f845 	bl	8000b14 <__addsf3>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fc fb25 	bl	80010dc <__aeabi_f2uiz>
 8004a92:	4603      	mov	r3, r0
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	801a      	strh	r2, [r3, #0]
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	44bb8000 	.word	0x44bb8000

08004aa8 <MPU9255_Init>:
//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af04      	add	r7, sp, #16
 8004aae:	6078      	str	r0, [r7, #4]
    // pre-def. vars
    uint8_t readData;
    uint8_t writeData;

    // read MPU9255 WHOAMI
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 8004ab0:	2364      	movs	r3, #100	; 0x64
 8004ab2:	9302      	str	r3, [sp, #8]
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	f107 030f 	add.w	r3, r7, #15
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	2301      	movs	r3, #1
 8004ac0:	2275      	movs	r2, #117	; 0x75
 8004ac2:	21d0      	movs	r1, #208	; 0xd0
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fd f8b1 	bl	8001c2c <HAL_I2C_Mem_Read>

    if (readData == 113)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b71      	cmp	r3, #113	; 0x71
 8004ace:	d13e      	bne.n	8004b4e <MPU9255_Init+0xa6>
    {
        // Start by performing self test and reporting values
        MPU9250SelfTest(I2Cx, SelfTest);
 8004ad0:	4921      	ldr	r1, [pc, #132]	; (8004b58 <MPU9255_Init+0xb0>)
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f001 fc98 	bl	8006408 <MPU9250SelfTest>

        // Calibrate gyro and accelerometers, load biases in bias registers
        calibrateMPU9250(I2Cx, gyroBias, accelBias);
 8004ad8:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <MPU9255_Init+0xb4>)
 8004ada:	4921      	ldr	r1, [pc, #132]	; (8004b60 <MPU9255_Init+0xb8>)
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f001 f85d 	bl	8005b9c <calibrateMPU9250>
        HAL_Delay(1000);
 8004ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ae6:	f7fc fb7b 	bl	80011e0 <HAL_Delay>

        // init Gyro and Accelerometer
        initMPU9250(I2Cx);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 ff74 	bl	80059d8 <initMPU9250>

        // enable Mag bypass
        writeData = 0x22;
 8004af0:	2322      	movs	r3, #34	; 0x22
 8004af2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 8004af4:	2364      	movs	r3, #100	; 0x64
 8004af6:	9302      	str	r3, [sp, #8]
 8004af8:	2301      	movs	r3, #1
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	f107 030e 	add.w	r3, r7, #14
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2301      	movs	r3, #1
 8004b04:	2237      	movs	r2, #55	; 0x37
 8004b06:	21d0      	movs	r1, #208	; 0xd0
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7fc ff95 	bl	8001a38 <HAL_I2C_Mem_Write>

        // Read the WHO_AM_I register of the magnetometer
        HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout); // Read WHO_AM_I register for AK8963
 8004b0e:	2364      	movs	r3, #100	; 0x64
 8004b10:	9302      	str	r3, [sp, #8]
 8004b12:	2301      	movs	r3, #1
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	f107 030f 	add.w	r3, r7, #15
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2118      	movs	r1, #24
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd f882 	bl	8001c2c <HAL_I2C_Mem_Read>

        HAL_Delay(1000);
 8004b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b2c:	f7fc fb58 	bl	80011e0 <HAL_Delay>

        // Get magnetometer calibration from AK8963 ROM
        initAK8963(I2Cx, magCalibration); // Initialize device for active mode read of magnetometer
 8004b30:	490c      	ldr	r1, [pc, #48]	; (8004b64 <MPU9255_Init+0xbc>)
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fd14 	bl	8005560 <initAK8963>

        calibrateMag(I2Cx, magBias, magScale);
 8004b38:	4a0b      	ldr	r2, [pc, #44]	; (8004b68 <MPU9255_Init+0xc0>)
 8004b3a:	490c      	ldr	r1, [pc, #48]	; (8004b6c <MPU9255_Init+0xc4>)
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fde1 	bl	8005704 <calibrateMag>

        HAL_Delay(1000);
 8004b42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b46:	f7fc fb4b 	bl	80011e0 <HAL_Delay>
        return 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e000      	b.n	8004b50 <MPU9255_Init+0xa8>
    }
    return 1; // Loop forever if communication doesn't happen
 8004b4e:	2301      	movs	r3, #1
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200002a4 	.word	0x200002a4
 8004b5c:	20000280 	.word	0x20000280
 8004b60:	20000274 	.word	0x20000274
 8004b64:	20000268 	.word	0x20000268
 8004b68:	20000298 	.word	0x20000298
 8004b6c:	2000028c 	.word	0x2000028c

08004b70 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t *DataStruct)
{
 8004b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b74:	b08b      	sub	sp, #44	; 0x2c
 8004b76:	af06      	add	r7, sp, #24
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
    uint8_t Data;

    // If intPin goes high, all data registers have new data
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8004b7c:	2364      	movs	r3, #100	; 0x64
 8004b7e:	9302      	str	r3, [sp, #8]
 8004b80:	2301      	movs	r3, #1
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	f107 030f 	add.w	r3, r7, #15
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	223a      	movs	r2, #58	; 0x3a
 8004b8e:	21d0      	movs	r1, #208	; 0xd0
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fd f84b 	bl	8001c2c <HAL_I2C_Mem_Read>
    if (Data & 0x01)
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 8123 	beq.w	8004de8 <readAll+0x278>
    {                                    // On interrupt, check if data ready interrupt
        readAccelData(I2Cx, accelCount); // Read the x/y/z adc values
 8004ba2:	4997      	ldr	r1, [pc, #604]	; (8004e00 <readAll+0x290>)
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fc29 	bl	80053fc <readAccelData>
        getAres();
 8004baa:	f000 fbf9 	bl	80053a0 <getAres>

        // Now we'll calculate the accleration value into actual g's
        ax = (float)accelCount[0] * aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 8004bae:	4b94      	ldr	r3, [pc, #592]	; (8004e00 <readAll+0x290>)
 8004bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fc f861 	bl	8000c7c <__aeabi_i2f>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4b91      	ldr	r3, [pc, #580]	; (8004e04 <readAll+0x294>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f7fc f8ae 	bl	8000d24 <__aeabi_fmul>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4b8e      	ldr	r3, [pc, #568]	; (8004e08 <readAll+0x298>)
 8004bce:	601a      	str	r2, [r3, #0]
        ay = (float)accelCount[1] * aRes; // - accelBias[1];
 8004bd0:	4b8b      	ldr	r3, [pc, #556]	; (8004e00 <readAll+0x290>)
 8004bd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fc f850 	bl	8000c7c <__aeabi_i2f>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b89      	ldr	r3, [pc, #548]	; (8004e04 <readAll+0x294>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4619      	mov	r1, r3
 8004be4:	4610      	mov	r0, r2
 8004be6:	f7fc f89d 	bl	8000d24 <__aeabi_fmul>
 8004bea:	4603      	mov	r3, r0
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b87      	ldr	r3, [pc, #540]	; (8004e0c <readAll+0x29c>)
 8004bf0:	601a      	str	r2, [r3, #0]
        az = (float)accelCount[2] * aRes; // - accelBias[2];
 8004bf2:	4b83      	ldr	r3, [pc, #524]	; (8004e00 <readAll+0x290>)
 8004bf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fc f83f 	bl	8000c7c <__aeabi_i2f>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	4b80      	ldr	r3, [pc, #512]	; (8004e04 <readAll+0x294>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f7fc f88c 	bl	8000d24 <__aeabi_fmul>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b7f      	ldr	r3, [pc, #508]	; (8004e10 <readAll+0x2a0>)
 8004c12:	601a      	str	r2, [r3, #0]

        DataStruct->AccelX = ax;
 8004c14:	4b7c      	ldr	r3, [pc, #496]	; (8004e08 <readAll+0x298>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	601a      	str	r2, [r3, #0]
        DataStruct->AccelY = ay;
 8004c1c:	4b7b      	ldr	r3, [pc, #492]	; (8004e0c <readAll+0x29c>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	605a      	str	r2, [r3, #4]
        DataStruct->AccelZ = az;
 8004c24:	4b7a      	ldr	r3, [pc, #488]	; (8004e10 <readAll+0x2a0>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	609a      	str	r2, [r3, #8]

        readGyroData(I2Cx, gyroCount); // Read the x/y/z adc values
 8004c2c:	4979      	ldr	r1, [pc, #484]	; (8004e14 <readAll+0x2a4>)
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fc17 	bl	8005462 <readGyroData>
        getGres();
 8004c34:	f000 fb82 	bl	800533c <getGres>

        // Calculate the gyro value into actual degrees per second
        gx = (float)gyroCount[0] * gRes; // get actual gyro value, this depends on scale being set
 8004c38:	4b76      	ldr	r3, [pc, #472]	; (8004e14 <readAll+0x2a4>)
 8004c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc f81c 	bl	8000c7c <__aeabi_i2f>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b74      	ldr	r3, [pc, #464]	; (8004e18 <readAll+0x2a8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7fc f869 	bl	8000d24 <__aeabi_fmul>
 8004c52:	4603      	mov	r3, r0
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b71      	ldr	r3, [pc, #452]	; (8004e1c <readAll+0x2ac>)
 8004c58:	601a      	str	r2, [r3, #0]
        gy = (float)gyroCount[1] * gRes;
 8004c5a:	4b6e      	ldr	r3, [pc, #440]	; (8004e14 <readAll+0x2a4>)
 8004c5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fc f80b 	bl	8000c7c <__aeabi_i2f>
 8004c66:	4602      	mov	r2, r0
 8004c68:	4b6b      	ldr	r3, [pc, #428]	; (8004e18 <readAll+0x2a8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f7fc f858 	bl	8000d24 <__aeabi_fmul>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	4b69      	ldr	r3, [pc, #420]	; (8004e20 <readAll+0x2b0>)
 8004c7a:	601a      	str	r2, [r3, #0]
        gz = (float)gyroCount[2] * gRes;
 8004c7c:	4b65      	ldr	r3, [pc, #404]	; (8004e14 <readAll+0x2a4>)
 8004c7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fb fffa 	bl	8000c7c <__aeabi_i2f>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b63      	ldr	r3, [pc, #396]	; (8004e18 <readAll+0x2a8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f7fc f847 	bl	8000d24 <__aeabi_fmul>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b62      	ldr	r3, [pc, #392]	; (8004e24 <readAll+0x2b4>)
 8004c9c:	601a      	str	r2, [r3, #0]

        DataStruct->GyroX = gx;
 8004c9e:	4b5f      	ldr	r3, [pc, #380]	; (8004e1c <readAll+0x2ac>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	60da      	str	r2, [r3, #12]
        DataStruct->GyroY = gy;
 8004ca6:	4b5e      	ldr	r3, [pc, #376]	; (8004e20 <readAll+0x2b0>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	611a      	str	r2, [r3, #16]
        DataStruct->GyroZ = gz;
 8004cae:	4b5d      	ldr	r3, [pc, #372]	; (8004e24 <readAll+0x2b4>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	615a      	str	r2, [r3, #20]

        readMagData(I2Cx, magCount); // Read the x/y/z adc values
 8004cb6:	495c      	ldr	r1, [pc, #368]	; (8004e28 <readAll+0x2b8>)
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fc05 	bl	80054c8 <readMagData>
        getMres();
 8004cbe:	f000 fb1f 	bl	8005300 <getMres>

        // Calculate the magnetometer values in milliGauss
        // Include factory calibration per data sheet and user environmental corrections
        mx = (float)magCount[0] * mRes * magCalibration[0] - magBias[0]; // get actual magnetometer value, this depends on scale being set
 8004cc2:	4b59      	ldr	r3, [pc, #356]	; (8004e28 <readAll+0x2b8>)
 8004cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fb ffd7 	bl	8000c7c <__aeabi_i2f>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	4b56      	ldr	r3, [pc, #344]	; (8004e2c <readAll+0x2bc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f7fc f824 	bl	8000d24 <__aeabi_fmul>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4b53      	ldr	r3, [pc, #332]	; (8004e30 <readAll+0x2c0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f7fc f81c 	bl	8000d24 <__aeabi_fmul>
 8004cec:	4603      	mov	r3, r0
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <readAll+0x2c4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f7fb ff0a 	bl	8000b10 <__aeabi_fsub>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4b4d      	ldr	r3, [pc, #308]	; (8004e38 <readAll+0x2c8>)
 8004d02:	601a      	str	r2, [r3, #0]
        my = (float)magCount[1] * mRes * magCalibration[1] - magBias[1];
 8004d04:	4b48      	ldr	r3, [pc, #288]	; (8004e28 <readAll+0x2b8>)
 8004d06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb ffb6 	bl	8000c7c <__aeabi_i2f>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b46      	ldr	r3, [pc, #280]	; (8004e2c <readAll+0x2bc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4619      	mov	r1, r3
 8004d18:	4610      	mov	r0, r2
 8004d1a:	f7fc f803 	bl	8000d24 <__aeabi_fmul>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <readAll+0x2c0>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f7fb fffb 	bl	8000d24 <__aeabi_fmul>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <readAll+0x2c4>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f7fb fee9 	bl	8000b10 <__aeabi_fsub>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	461a      	mov	r2, r3
 8004d42:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <readAll+0x2cc>)
 8004d44:	601a      	str	r2, [r3, #0]
        mz = (float)magCount[2] * mRes * magCalibration[2] - magBias[2];
 8004d46:	4b38      	ldr	r3, [pc, #224]	; (8004e28 <readAll+0x2b8>)
 8004d48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fb ff95 	bl	8000c7c <__aeabi_i2f>
 8004d52:	4602      	mov	r2, r0
 8004d54:	4b35      	ldr	r3, [pc, #212]	; (8004e2c <readAll+0x2bc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f7fb ffe2 	bl	8000d24 <__aeabi_fmul>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b32      	ldr	r3, [pc, #200]	; (8004e30 <readAll+0x2c0>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f7fb ffda 	bl	8000d24 <__aeabi_fmul>
 8004d70:	4603      	mov	r3, r0
 8004d72:	461a      	mov	r2, r3
 8004d74:	4b2f      	ldr	r3, [pc, #188]	; (8004e34 <readAll+0x2c4>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f7fb fec8 	bl	8000b10 <__aeabi_fsub>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	4b2e      	ldr	r3, [pc, #184]	; (8004e40 <readAll+0x2d0>)
 8004d86:	601a      	str	r2, [r3, #0]
        mx *= magScale[0];
 8004d88:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <readAll+0x2d4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <readAll+0x2c8>)
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fb ffc6 	bl	8000d24 <__aeabi_fmul>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <readAll+0x2c8>)
 8004d9e:	601a      	str	r2, [r3, #0]
        my *= magScale[1];
 8004da0:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <readAll+0x2d4>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4a25      	ldr	r2, [pc, #148]	; (8004e3c <readAll+0x2cc>)
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fb ffba 	bl	8000d24 <__aeabi_fmul>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <readAll+0x2cc>)
 8004db6:	601a      	str	r2, [r3, #0]
        mz *= magScale[2];
 8004db8:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <readAll+0x2d4>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4a20      	ldr	r2, [pc, #128]	; (8004e40 <readAll+0x2d0>)
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fb ffae 	bl	8000d24 <__aeabi_fmul>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b1c      	ldr	r3, [pc, #112]	; (8004e40 <readAll+0x2d0>)
 8004dce:	601a      	str	r2, [r3, #0]

        DataStruct->MagX = mx;
 8004dd0:	4b19      	ldr	r3, [pc, #100]	; (8004e38 <readAll+0x2c8>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	619a      	str	r2, [r3, #24]
        DataStruct->MagY = my;
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <readAll+0x2cc>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	61da      	str	r2, [r3, #28]
        DataStruct->MagZ = mz;
 8004de0:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <readAll+0x2d0>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	621a      	str	r2, [r3, #32]
    }

    // Now = __HAL_TIM_GET_COUNTER(&htim1);
    Now = HAL_GetTick();
 8004de8:	f7fc f9f0 	bl	80011cc <HAL_GetTick>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <readAll+0x2d8>)
 8004df0:	6013      	str	r3, [r2, #0]
    deltat = ((Now - lastUpdate) / 1000.0f); // set integration time by time elapsed since last filter update
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <readAll+0x2d8>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <readAll+0x2dc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	e027      	b.n	8004e50 <readAll+0x2e0>
 8004e00:	20000250 	.word	0x20000250
 8004e04:	20000244 	.word	0x20000244
 8004e08:	200002d8 	.word	0x200002d8
 8004e0c:	200002dc 	.word	0x200002dc
 8004e10:	200002e0 	.word	0x200002e0
 8004e14:	20000258 	.word	0x20000258
 8004e18:	20000248 	.word	0x20000248
 8004e1c:	200002e4 	.word	0x200002e4
 8004e20:	200002e8 	.word	0x200002e8
 8004e24:	200002ec 	.word	0x200002ec
 8004e28:	20000260 	.word	0x20000260
 8004e2c:	2000024c 	.word	0x2000024c
 8004e30:	20000268 	.word	0x20000268
 8004e34:	2000028c 	.word	0x2000028c
 8004e38:	200002f0 	.word	0x200002f0
 8004e3c:	200002f4 	.word	0x200002f4
 8004e40:	200002f8 	.word	0x200002f8
 8004e44:	20000298 	.word	0x20000298
 8004e48:	200002d4 	.word	0x200002d4
 8004e4c:	200002d0 	.word	0x200002d0
 8004e50:	f7fb ff10 	bl	8000c74 <__aeabi_ui2f>
 8004e54:	4603      	mov	r3, r0
 8004e56:	499c      	ldr	r1, [pc, #624]	; (80050c8 <readAll+0x558>)
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fc f817 	bl	8000e8c <__aeabi_fdiv>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	461a      	mov	r2, r3
 8004e62:	4b9a      	ldr	r3, [pc, #616]	; (80050cc <readAll+0x55c>)
 8004e64:	601a      	str	r2, [r3, #0]
    lastUpdate = Now;
 8004e66:	4b9a      	ldr	r3, [pc, #616]	; (80050d0 <readAll+0x560>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a9a      	ldr	r2, [pc, #616]	; (80050d4 <readAll+0x564>)
 8004e6c:	6013      	str	r3, [r2, #0]
    sum += deltat; // sum for averaging filter update rate
 8004e6e:	4b9a      	ldr	r3, [pc, #616]	; (80050d8 <readAll+0x568>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a96      	ldr	r2, [pc, #600]	; (80050cc <readAll+0x55c>)
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	4611      	mov	r1, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fb fe4b 	bl	8000b14 <__addsf3>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	461a      	mov	r2, r3
 8004e82:	4b95      	ldr	r3, [pc, #596]	; (80050d8 <readAll+0x568>)
 8004e84:	601a      	str	r2, [r3, #0]

    // Calculate quaternions based on Madgwick's filter
    // Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
    //...coordinate systems also different. So, to compensate this, order should be my - mx - mz
    // QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
    QuaternionUpdate(ax, ay, az, gx * PI / 180.0f, gy * PI / 180.0f, gz * PI / 180.0f, my, mx, mz);
 8004e86:	4b95      	ldr	r3, [pc, #596]	; (80050dc <readAll+0x56c>)
 8004e88:	681c      	ldr	r4, [r3, #0]
 8004e8a:	4b95      	ldr	r3, [pc, #596]	; (80050e0 <readAll+0x570>)
 8004e8c:	681d      	ldr	r5, [r3, #0]
 8004e8e:	4b95      	ldr	r3, [pc, #596]	; (80050e4 <readAll+0x574>)
 8004e90:	681e      	ldr	r6, [r3, #0]
 8004e92:	4b95      	ldr	r3, [pc, #596]	; (80050e8 <readAll+0x578>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fabe 	bl	8000418 <__aeabi_f2d>
 8004e9c:	a388      	add	r3, pc, #544	; (adr r3, 80050c0 <readAll+0x550>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f7fb fb11 	bl	80004c8 <__aeabi_dmul>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	4b8e      	ldr	r3, [pc, #568]	; (80050ec <readAll+0x57c>)
 8004eb4:	f7fb fc32 	bl	800071c <__aeabi_ddiv>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f7fb fdd2 	bl	8000a68 <__aeabi_d2f>
 8004ec4:	4681      	mov	r9, r0
 8004ec6:	4b8a      	ldr	r3, [pc, #552]	; (80050f0 <readAll+0x580>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fb faa4 	bl	8000418 <__aeabi_f2d>
 8004ed0:	a37b      	add	r3, pc, #492	; (adr r3, 80050c0 <readAll+0x550>)
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f7fb faf7 	bl	80004c8 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	4b81      	ldr	r3, [pc, #516]	; (80050ec <readAll+0x57c>)
 8004ee8:	f7fb fc18 	bl	800071c <__aeabi_ddiv>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	f7fb fdb8 	bl	8000a68 <__aeabi_d2f>
 8004ef8:	4680      	mov	r8, r0
 8004efa:	4b7e      	ldr	r3, [pc, #504]	; (80050f4 <readAll+0x584>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fb fa8a 	bl	8000418 <__aeabi_f2d>
 8004f04:	a36e      	add	r3, pc, #440	; (adr r3, 80050c0 <readAll+0x550>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	f7fb fadd 	bl	80004c8 <__aeabi_dmul>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	4b74      	ldr	r3, [pc, #464]	; (80050ec <readAll+0x57c>)
 8004f1c:	f7fb fbfe 	bl	800071c <__aeabi_ddiv>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	f7fb fd9e 	bl	8000a68 <__aeabi_d2f>
 8004f2c:	4b72      	ldr	r3, [pc, #456]	; (80050f8 <readAll+0x588>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a72      	ldr	r2, [pc, #456]	; (80050fc <readAll+0x58c>)
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	4972      	ldr	r1, [pc, #456]	; (8005100 <readAll+0x590>)
 8004f36:	6809      	ldr	r1, [r1, #0]
 8004f38:	9104      	str	r1, [sp, #16]
 8004f3a:	9203      	str	r2, [sp, #12]
 8004f3c:	9302      	str	r3, [sp, #8]
 8004f3e:	9001      	str	r0, [sp, #4]
 8004f40:	f8cd 8000 	str.w	r8, [sp]
 8004f44:	464b      	mov	r3, r9
 8004f46:	4632      	mov	r2, r6
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f001 ff24 	bl	8006d98 <QuaternionUpdate>

    // Convert quaternions to Euler angles
    a12 = 2.0f * (q[1] * q[2] + q[0] * q[3]);
 8004f50:	4b6c      	ldr	r3, [pc, #432]	; (8005104 <readAll+0x594>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a6b      	ldr	r2, [pc, #428]	; (8005104 <readAll+0x594>)
 8004f56:	6892      	ldr	r2, [r2, #8]
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fb fee2 	bl	8000d24 <__aeabi_fmul>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461c      	mov	r4, r3
 8004f64:	4b67      	ldr	r3, [pc, #412]	; (8005104 <readAll+0x594>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a66      	ldr	r2, [pc, #408]	; (8005104 <readAll+0x594>)
 8004f6a:	68d2      	ldr	r2, [r2, #12]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fb fed8 	bl	8000d24 <__aeabi_fmul>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4619      	mov	r1, r3
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f7fb fdcb 	bl	8000b14 <__addsf3>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4619      	mov	r1, r3
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fb fdc6 	bl	8000b14 <__addsf3>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4b5e      	ldr	r3, [pc, #376]	; (8005108 <readAll+0x598>)
 8004f8e:	601a      	str	r2, [r3, #0]
    a22 = q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8004f90:	4b5c      	ldr	r3, [pc, #368]	; (8005104 <readAll+0x594>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a5b      	ldr	r2, [pc, #364]	; (8005104 <readAll+0x594>)
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fb fec2 	bl	8000d24 <__aeabi_fmul>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461c      	mov	r4, r3
 8004fa4:	4b57      	ldr	r3, [pc, #348]	; (8005104 <readAll+0x594>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4a56      	ldr	r2, [pc, #344]	; (8005104 <readAll+0x594>)
 8004faa:	6852      	ldr	r2, [r2, #4]
 8004fac:	4611      	mov	r1, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fb feb8 	bl	8000d24 <__aeabi_fmul>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f7fb fdab 	bl	8000b14 <__addsf3>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	461c      	mov	r4, r3
 8004fc2:	4b50      	ldr	r3, [pc, #320]	; (8005104 <readAll+0x594>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	4a4f      	ldr	r2, [pc, #316]	; (8005104 <readAll+0x594>)
 8004fc8:	6892      	ldr	r2, [r2, #8]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fb fea9 	bl	8000d24 <__aeabi_fmul>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7fb fd9a 	bl	8000b10 <__aeabi_fsub>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	461c      	mov	r4, r3
 8004fe0:	4b48      	ldr	r3, [pc, #288]	; (8005104 <readAll+0x594>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a47      	ldr	r2, [pc, #284]	; (8005104 <readAll+0x594>)
 8004fe6:	68d2      	ldr	r2, [r2, #12]
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fb fe9a 	bl	8000d24 <__aeabi_fmul>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f7fb fd8b 	bl	8000b10 <__aeabi_fsub>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4b43      	ldr	r3, [pc, #268]	; (800510c <readAll+0x59c>)
 8005000:	601a      	str	r2, [r3, #0]
    a31 = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8005002:	4b40      	ldr	r3, [pc, #256]	; (8005104 <readAll+0x594>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a3f      	ldr	r2, [pc, #252]	; (8005104 <readAll+0x594>)
 8005008:	6852      	ldr	r2, [r2, #4]
 800500a:	4611      	mov	r1, r2
 800500c:	4618      	mov	r0, r3
 800500e:	f7fb fe89 	bl	8000d24 <__aeabi_fmul>
 8005012:	4603      	mov	r3, r0
 8005014:	461c      	mov	r4, r3
 8005016:	4b3b      	ldr	r3, [pc, #236]	; (8005104 <readAll+0x594>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	4a3a      	ldr	r2, [pc, #232]	; (8005104 <readAll+0x594>)
 800501c:	68d2      	ldr	r2, [r2, #12]
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f7fb fe7f 	bl	8000d24 <__aeabi_fmul>
 8005026:	4603      	mov	r3, r0
 8005028:	4619      	mov	r1, r3
 800502a:	4620      	mov	r0, r4
 800502c:	f7fb fd72 	bl	8000b14 <__addsf3>
 8005030:	4603      	mov	r3, r0
 8005032:	4619      	mov	r1, r3
 8005034:	4618      	mov	r0, r3
 8005036:	f7fb fd6d 	bl	8000b14 <__addsf3>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	4b34      	ldr	r3, [pc, #208]	; (8005110 <readAll+0x5a0>)
 8005040:	601a      	str	r2, [r3, #0]
    a32 = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8005042:	4b30      	ldr	r3, [pc, #192]	; (8005104 <readAll+0x594>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4a2f      	ldr	r2, [pc, #188]	; (8005104 <readAll+0x594>)
 8005048:	68d2      	ldr	r2, [r2, #12]
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f7fb fe69 	bl	8000d24 <__aeabi_fmul>
 8005052:	4603      	mov	r3, r0
 8005054:	461c      	mov	r4, r3
 8005056:	4b2b      	ldr	r3, [pc, #172]	; (8005104 <readAll+0x594>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2a      	ldr	r2, [pc, #168]	; (8005104 <readAll+0x594>)
 800505c:	6892      	ldr	r2, [r2, #8]
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f7fb fe5f 	bl	8000d24 <__aeabi_fmul>
 8005066:	4603      	mov	r3, r0
 8005068:	4619      	mov	r1, r3
 800506a:	4620      	mov	r0, r4
 800506c:	f7fb fd50 	bl	8000b10 <__aeabi_fsub>
 8005070:	4603      	mov	r3, r0
 8005072:	4619      	mov	r1, r3
 8005074:	4618      	mov	r0, r3
 8005076:	f7fb fd4d 	bl	8000b14 <__addsf3>
 800507a:	4603      	mov	r3, r0
 800507c:	461a      	mov	r2, r3
 800507e:	4b25      	ldr	r3, [pc, #148]	; (8005114 <readAll+0x5a4>)
 8005080:	601a      	str	r2, [r3, #0]
    a33 = q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 8005082:	4b20      	ldr	r3, [pc, #128]	; (8005104 <readAll+0x594>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <readAll+0x594>)
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f7fb fe49 	bl	8000d24 <__aeabi_fmul>
 8005092:	4603      	mov	r3, r0
 8005094:	461c      	mov	r4, r3
 8005096:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <readAll+0x594>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <readAll+0x594>)
 800509c:	6852      	ldr	r2, [r2, #4]
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fb fe3f 	bl	8000d24 <__aeabi_fmul>
 80050a6:	4603      	mov	r3, r0
 80050a8:	4619      	mov	r1, r3
 80050aa:	4620      	mov	r0, r4
 80050ac:	f7fb fd30 	bl	8000b10 <__aeabi_fsub>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461c      	mov	r4, r3
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <readAll+0x594>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4a12      	ldr	r2, [pc, #72]	; (8005104 <readAll+0x594>)
 80050ba:	6892      	ldr	r2, [r2, #8]
 80050bc:	e02c      	b.n	8005118 <readAll+0x5a8>
 80050be:	bf00      	nop
 80050c0:	35f80991 	.word	0x35f80991
 80050c4:	40092492 	.word	0x40092492
 80050c8:	447a0000 	.word	0x447a0000
 80050cc:	200002c8 	.word	0x200002c8
 80050d0:	200002d4 	.word	0x200002d4
 80050d4:	200002d0 	.word	0x200002d0
 80050d8:	200002cc 	.word	0x200002cc
 80050dc:	200002d8 	.word	0x200002d8
 80050e0:	200002dc 	.word	0x200002dc
 80050e4:	200002e0 	.word	0x200002e0
 80050e8:	200002e4 	.word	0x200002e4
 80050ec:	40668000 	.word	0x40668000
 80050f0:	200002e8 	.word	0x200002e8
 80050f4:	200002ec 	.word	0x200002ec
 80050f8:	200002f4 	.word	0x200002f4
 80050fc:	200002f0 	.word	0x200002f0
 8005100:	200002f8 	.word	0x200002f8
 8005104:	20000010 	.word	0x20000010
 8005108:	20000308 	.word	0x20000308
 800510c:	2000030c 	.word	0x2000030c
 8005110:	20000310 	.word	0x20000310
 8005114:	20000314 	.word	0x20000314
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f7fb fe02 	bl	8000d24 <__aeabi_fmul>
 8005120:	4603      	mov	r3, r0
 8005122:	4619      	mov	r1, r3
 8005124:	4620      	mov	r0, r4
 8005126:	f7fb fcf3 	bl	8000b10 <__aeabi_fsub>
 800512a:	4603      	mov	r3, r0
 800512c:	461c      	mov	r4, r3
 800512e:	4b62      	ldr	r3, [pc, #392]	; (80052b8 <readAll+0x748>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	4a61      	ldr	r2, [pc, #388]	; (80052b8 <readAll+0x748>)
 8005134:	68d2      	ldr	r2, [r2, #12]
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f7fb fdf3 	bl	8000d24 <__aeabi_fmul>
 800513e:	4603      	mov	r3, r0
 8005140:	4619      	mov	r1, r3
 8005142:	4620      	mov	r0, r4
 8005144:	f7fb fce6 	bl	8000b14 <__addsf3>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	4b5b      	ldr	r3, [pc, #364]	; (80052bc <readAll+0x74c>)
 800514e:	601a      	str	r2, [r3, #0]

    pitch = -asinf(a32);
 8005150:	4b5b      	ldr	r3, [pc, #364]	; (80052c0 <readAll+0x750>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f005 f945 	bl	800a3e4 <asinf>
 800515a:	4603      	mov	r3, r0
 800515c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005160:	4a58      	ldr	r2, [pc, #352]	; (80052c4 <readAll+0x754>)
 8005162:	6013      	str	r3, [r2, #0]
    roll = atan2f(a31, a33);
 8005164:	4b58      	ldr	r3, [pc, #352]	; (80052c8 <readAll+0x758>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a54      	ldr	r2, [pc, #336]	; (80052bc <readAll+0x74c>)
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f005 f958 	bl	800a424 <atan2f>
 8005174:	4603      	mov	r3, r0
 8005176:	4a55      	ldr	r2, [pc, #340]	; (80052cc <readAll+0x75c>)
 8005178:	6013      	str	r3, [r2, #0]
    yaw = atan2f(a12, a22);
 800517a:	4b55      	ldr	r3, [pc, #340]	; (80052d0 <readAll+0x760>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a55      	ldr	r2, [pc, #340]	; (80052d4 <readAll+0x764>)
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	4611      	mov	r1, r2
 8005184:	4618      	mov	r0, r3
 8005186:	f005 f94d 	bl	800a424 <atan2f>
 800518a:	4603      	mov	r3, r0
 800518c:	4a52      	ldr	r2, [pc, #328]	; (80052d8 <readAll+0x768>)
 800518e:	6013      	str	r3, [r2, #0]
    pitch *= 180.0f / PI;
 8005190:	4b4c      	ldr	r3, [pc, #304]	; (80052c4 <readAll+0x754>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7fb f93f 	bl	8000418 <__aeabi_f2d>
 800519a:	a345      	add	r3, pc, #276	; (adr r3, 80052b0 <readAll+0x740>)
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	f7fb f992 	bl	80004c8 <__aeabi_dmul>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	f7fb fc5c 	bl	8000a68 <__aeabi_d2f>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4a44      	ldr	r2, [pc, #272]	; (80052c4 <readAll+0x754>)
 80051b4:	6013      	str	r3, [r2, #0]
    yaw *= 180.0f / PI;
 80051b6:	4b48      	ldr	r3, [pc, #288]	; (80052d8 <readAll+0x768>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fb f92c 	bl	8000418 <__aeabi_f2d>
 80051c0:	a33b      	add	r3, pc, #236	; (adr r3, 80052b0 <readAll+0x740>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f7fb f97f 	bl	80004c8 <__aeabi_dmul>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	f7fb fc49 	bl	8000a68 <__aeabi_d2f>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a3f      	ldr	r2, [pc, #252]	; (80052d8 <readAll+0x768>)
 80051da:	6013      	str	r3, [r2, #0]
    yaw += 5.53f; // Declination
 80051dc:	4b3e      	ldr	r3, [pc, #248]	; (80052d8 <readAll+0x768>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	493e      	ldr	r1, [pc, #248]	; (80052dc <readAll+0x76c>)
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb fc96 	bl	8000b14 <__addsf3>
 80051e8:	4603      	mov	r3, r0
 80051ea:	461a      	mov	r2, r3
 80051ec:	4b3a      	ldr	r3, [pc, #232]	; (80052d8 <readAll+0x768>)
 80051ee:	601a      	str	r2, [r3, #0]

    if (yaw < 0)
 80051f0:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <readAll+0x768>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f04f 0100 	mov.w	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fb ff31 	bl	8001060 <__aeabi_fcmplt>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <readAll+0x6a8>
        yaw += 360.0f; // Ensure yaw stays between 0 and 360
 8005204:	4b34      	ldr	r3, [pc, #208]	; (80052d8 <readAll+0x768>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4935      	ldr	r1, [pc, #212]	; (80052e0 <readAll+0x770>)
 800520a:	4618      	mov	r0, r3
 800520c:	f7fb fc82 	bl	8000b14 <__addsf3>
 8005210:	4603      	mov	r3, r0
 8005212:	461a      	mov	r2, r3
 8005214:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <readAll+0x768>)
 8005216:	601a      	str	r2, [r3, #0]
    roll *= 180.0f / PI;
 8005218:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <readAll+0x75c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb f8fb 	bl	8000418 <__aeabi_f2d>
 8005222:	a323      	add	r3, pc, #140	; (adr r3, 80052b0 <readAll+0x740>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f94e 	bl	80004c8 <__aeabi_dmul>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	f7fb fc18 	bl	8000a68 <__aeabi_d2f>
 8005238:	4603      	mov	r3, r0
 800523a:	4a24      	ldr	r2, [pc, #144]	; (80052cc <readAll+0x75c>)
 800523c:	6013      	str	r3, [r2, #0]
    lin_ax = ax + a31;
 800523e:	4b29      	ldr	r3, [pc, #164]	; (80052e4 <readAll+0x774>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a21      	ldr	r2, [pc, #132]	; (80052c8 <readAll+0x758>)
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	4611      	mov	r1, r2
 8005248:	4618      	mov	r0, r3
 800524a:	f7fb fc63 	bl	8000b14 <__addsf3>
 800524e:	4603      	mov	r3, r0
 8005250:	461a      	mov	r2, r3
 8005252:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <readAll+0x778>)
 8005254:	601a      	str	r2, [r3, #0]
    lin_ay = ay + a32;
 8005256:	4b25      	ldr	r3, [pc, #148]	; (80052ec <readAll+0x77c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <readAll+0x750>)
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	4611      	mov	r1, r2
 8005260:	4618      	mov	r0, r3
 8005262:	f7fb fc57 	bl	8000b14 <__addsf3>
 8005266:	4603      	mov	r3, r0
 8005268:	461a      	mov	r2, r3
 800526a:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <readAll+0x780>)
 800526c:	601a      	str	r2, [r3, #0]
    lin_az = az - a33;
 800526e:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <readAll+0x784>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a12      	ldr	r2, [pc, #72]	; (80052bc <readAll+0x74c>)
 8005274:	6812      	ldr	r2, [r2, #0]
 8005276:	4611      	mov	r1, r2
 8005278:	4618      	mov	r0, r3
 800527a:	f7fb fc49 	bl	8000b10 <__aeabi_fsub>
 800527e:	4603      	mov	r3, r0
 8005280:	461a      	mov	r2, r3
 8005282:	4b1d      	ldr	r3, [pc, #116]	; (80052f8 <readAll+0x788>)
 8005284:	601a      	str	r2, [r3, #0]

    DataStruct->yaw = yaw;
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <readAll+0x768>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	62da      	str	r2, [r3, #44]	; 0x2c
    DataStruct->pitch = pitch;
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <readAll+0x754>)
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	625a      	str	r2, [r3, #36]	; 0x24
    DataStruct->roll = roll;
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <readAll+0x75c>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	629a      	str	r2, [r3, #40]	; 0x28

    sum = 0;
 800529e:	4b17      	ldr	r3, [pc, #92]	; (80052fc <readAll+0x78c>)
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052b0:	d0051a32 	.word	0xd0051a32
 80052b4:	404ca2e8 	.word	0x404ca2e8
 80052b8:	20000010 	.word	0x20000010
 80052bc:	20000318 	.word	0x20000318
 80052c0:	20000314 	.word	0x20000314
 80052c4:	200002bc 	.word	0x200002bc
 80052c8:	20000310 	.word	0x20000310
 80052cc:	200002c4 	.word	0x200002c4
 80052d0:	20000308 	.word	0x20000308
 80052d4:	2000030c 	.word	0x2000030c
 80052d8:	200002c0 	.word	0x200002c0
 80052dc:	40b0f5c3 	.word	0x40b0f5c3
 80052e0:	43b40000 	.word	0x43b40000
 80052e4:	200002d8 	.word	0x200002d8
 80052e8:	200002fc 	.word	0x200002fc
 80052ec:	200002dc 	.word	0x200002dc
 80052f0:	20000300 	.word	0x20000300
 80052f4:	200002e0 	.word	0x200002e0
 80052f8:	20000304 	.word	0x20000304
 80052fc:	200002cc 	.word	0x200002cc

08005300 <getMres>:
//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres()
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
    switch (Mscale)
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <getMres+0x2c>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <getMres+0x12>
 800530c:	2b01      	cmp	r3, #1
 800530e:	d004      	beq.n	800531a <getMres+0x1a>
        break;
    case MFS_16BITS:
        mRes = 10. * 4912. / 32760.0; // Proper scale to return milliGauss
        break;
    }
}
 8005310:	e007      	b.n	8005322 <getMres+0x22>
        mRes = 10. * 4912. / 8190.; // Proper scale to return milliGauss
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <getMres+0x30>)
 8005314:	4a07      	ldr	r2, [pc, #28]	; (8005334 <getMres+0x34>)
 8005316:	601a      	str	r2, [r3, #0]
        break;
 8005318:	e003      	b.n	8005322 <getMres+0x22>
        mRes = 10. * 4912. / 32760.0; // Proper scale to return milliGauss
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <getMres+0x30>)
 800531c:	4a06      	ldr	r2, [pc, #24]	; (8005338 <getMres+0x38>)
 800531e:	601a      	str	r2, [r3, #0]
        break;
 8005320:	bf00      	nop
}
 8005322:	bf00      	nop
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000007 	.word	0x20000007
 8005330:	2000024c 	.word	0x2000024c
 8005334:	40bfebff 	.word	0x40bfebff
 8005338:	3fbfebff 	.word	0x3fbfebff

0800533c <getGres>:

void getGres()
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
    switch (Gscale)
 8005340:	4b11      	ldr	r3, [pc, #68]	; (8005388 <getGres+0x4c>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d81b      	bhi.n	8005380 <getGres+0x44>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <getGres+0x14>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005361 	.word	0x08005361
 8005354:	08005369 	.word	0x08005369
 8005358:	08005371 	.word	0x08005371
 800535c:	08005379 	.word	0x08005379
    {
        // Possible gyro scales (and their register bit settings) are:
        // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
        gRes = 250.0 / 32768.0;
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <getGres+0x50>)
 8005362:	4a0b      	ldr	r2, [pc, #44]	; (8005390 <getGres+0x54>)
 8005364:	601a      	str	r2, [r3, #0]
        break;
 8005366:	e00b      	b.n	8005380 <getGres+0x44>
    case GFS_500DPS:
        gRes = 500.0 / 32768.0;
 8005368:	4b08      	ldr	r3, [pc, #32]	; (800538c <getGres+0x50>)
 800536a:	4a0a      	ldr	r2, [pc, #40]	; (8005394 <getGres+0x58>)
 800536c:	601a      	str	r2, [r3, #0]
        break;
 800536e:	e007      	b.n	8005380 <getGres+0x44>
    case GFS_1000DPS:
        gRes = 1000.0 / 32768.0;
 8005370:	4b06      	ldr	r3, [pc, #24]	; (800538c <getGres+0x50>)
 8005372:	4a09      	ldr	r2, [pc, #36]	; (8005398 <getGres+0x5c>)
 8005374:	601a      	str	r2, [r3, #0]
        break;
 8005376:	e003      	b.n	8005380 <getGres+0x44>
    case GFS_2000DPS:
        gRes = 2000.0 / 32768.0;
 8005378:	4b04      	ldr	r3, [pc, #16]	; (800538c <getGres+0x50>)
 800537a:	4a08      	ldr	r2, [pc, #32]	; (800539c <getGres+0x60>)
 800537c:	601a      	str	r2, [r3, #0]
        break;
 800537e:	bf00      	nop
    }
}
 8005380:	bf00      	nop
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr
 8005388:	20000005 	.word	0x20000005
 800538c:	20000248 	.word	0x20000248
 8005390:	3bfa0000 	.word	0x3bfa0000
 8005394:	3c7a0000 	.word	0x3c7a0000
 8005398:	3cfa0000 	.word	0x3cfa0000
 800539c:	3d7a0000 	.word	0x3d7a0000

080053a0 <getAres>:

void getAres()
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
    switch (Ascale)
 80053a4:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <getAres+0x54>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d81f      	bhi.n	80053ec <getAres+0x4c>
 80053ac:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <getAres+0x14>)
 80053ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b2:	bf00      	nop
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	080053cf 	.word	0x080053cf
 80053bc:	080053d9 	.word	0x080053d9
 80053c0:	080053e3 	.word	0x080053e3
    {
        // Possible accelerometer scales (and their register bit settings) are:
        // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
        aRes = 2.0 / 32768.0;
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <getAres+0x58>)
 80053c6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80053ca:	601a      	str	r2, [r3, #0]
        break;
 80053cc:	e00e      	b.n	80053ec <getAres+0x4c>
    case AFS_4G:
        aRes = 4.0 / 32768.0;
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <getAres+0x58>)
 80053d0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80053d4:	601a      	str	r2, [r3, #0]
        break;
 80053d6:	e009      	b.n	80053ec <getAres+0x4c>
    case AFS_8G:
        aRes = 8.0 / 32768.0;
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <getAres+0x58>)
 80053da:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80053de:	601a      	str	r2, [r3, #0]
        break;
 80053e0:	e004      	b.n	80053ec <getAres+0x4c>
    case AFS_16G:
        aRes = 16.0 / 32768.0;
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <getAres+0x58>)
 80053e4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80053e8:	601a      	str	r2, [r3, #0]
        break;
 80053ea:	bf00      	nop
    }
}
 80053ec:	bf00      	nop
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr
 80053f4:	20000006 	.word	0x20000006
 80053f8:	20000244 	.word	0x20000244

080053fc <readAccelData>:

// read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t *destination)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af04      	add	r7, sp, #16
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
    uint8_t rawAccelData[6];                                                                    // x/y/z accel register data stored here
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8005406:	2364      	movs	r3, #100	; 0x64
 8005408:	9302      	str	r3, [sp, #8]
 800540a:	2306      	movs	r3, #6
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	f107 0308 	add.w	r3, r7, #8
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	2301      	movs	r3, #1
 8005416:	223b      	movs	r2, #59	; 0x3b
 8005418:	21d0      	movs	r1, #208	; 0xd0
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fc fc06 	bl	8001c2c <HAL_I2C_Mem_Read>
    destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];                         // Turn the MSB and LSB into a signed 16-bit value
 8005420:	7a3b      	ldrb	r3, [r7, #8]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	b21a      	sxth	r2, r3
 8005426:	7a7b      	ldrb	r3, [r7, #9]
 8005428:	b21b      	sxth	r3, r3
 800542a:	4313      	orrs	r3, r2
 800542c:	b21a      	sxth	r2, r3
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	801a      	strh	r2, [r3, #0]
    destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8005432:	7abb      	ldrb	r3, [r7, #10]
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	b219      	sxth	r1, r3
 8005438:	7afb      	ldrb	r3, [r7, #11]
 800543a:	b21a      	sxth	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	3302      	adds	r3, #2
 8005440:	430a      	orrs	r2, r1
 8005442:	b212      	sxth	r2, r2
 8005444:	801a      	strh	r2, [r3, #0]
    destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8005446:	7b3b      	ldrb	r3, [r7, #12]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	b219      	sxth	r1, r3
 800544c:	7b7b      	ldrb	r3, [r7, #13]
 800544e:	b21a      	sxth	r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	3304      	adds	r3, #4
 8005454:	430a      	orrs	r2, r1
 8005456:	b212      	sxth	r2, r2
 8005458:	801a      	strh	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <readGyroData>:

// read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t *destination)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b088      	sub	sp, #32
 8005466:	af04      	add	r7, sp, #16
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
    uint8_t rawGyroData[6];                                                                   // x/y/z gyro register data stored here
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout); // Read the six raw data registers sequentially into data array
 800546c:	2364      	movs	r3, #100	; 0x64
 800546e:	9302      	str	r3, [sp, #8]
 8005470:	2306      	movs	r3, #6
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	f107 0308 	add.w	r3, r7, #8
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	2301      	movs	r3, #1
 800547c:	2243      	movs	r2, #67	; 0x43
 800547e:	21d0      	movs	r1, #208	; 0xd0
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7fc fbd3 	bl	8001c2c <HAL_I2C_Mem_Read>
    destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];                         // Turn the MSB and LSB into a signed 16-bit value
 8005486:	7a3b      	ldrb	r3, [r7, #8]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	b21a      	sxth	r2, r3
 800548c:	7a7b      	ldrb	r3, [r7, #9]
 800548e:	b21b      	sxth	r3, r3
 8005490:	4313      	orrs	r3, r2
 8005492:	b21a      	sxth	r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	801a      	strh	r2, [r3, #0]
    destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8005498:	7abb      	ldrb	r3, [r7, #10]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	b219      	sxth	r1, r3
 800549e:	7afb      	ldrb	r3, [r7, #11]
 80054a0:	b21a      	sxth	r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	3302      	adds	r3, #2
 80054a6:	430a      	orrs	r2, r1
 80054a8:	b212      	sxth	r2, r2
 80054aa:	801a      	strh	r2, [r3, #0]
    destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 80054ac:	7b3b      	ldrb	r3, [r7, #12]
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	b219      	sxth	r1, r3
 80054b2:	7b7b      	ldrb	r3, [r7, #13]
 80054b4:	b21a      	sxth	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	3304      	adds	r3, #4
 80054ba:	430a      	orrs	r2, r1
 80054bc:	b212      	sxth	r2, r2
 80054be:	801a      	strh	r2, [r3, #0]
}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t *destination)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af04      	add	r7, sp, #16
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]

    uint8_t readData;

    HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 80054d2:	2364      	movs	r3, #100	; 0x64
 80054d4:	9302      	str	r3, [sp, #8]
 80054d6:	2301      	movs	r3, #1
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	f107 0316 	add.w	r3, r7, #22
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	2301      	movs	r3, #1
 80054e2:	2202      	movs	r2, #2
 80054e4:	2118      	movs	r1, #24
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fc fba0 	bl	8001c2c <HAL_I2C_Mem_Read>
    if ((readData & 0x01) == 0x01)
 80054ec:	7dbb      	ldrb	r3, [r7, #22]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d030      	beq.n	8005558 <readMagData+0x90>
    {
        uint8_t rawMagData[7];                                                                    // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
        HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout); // Read the six raw data and ST2 registers sequentially into data array
 80054f6:	2364      	movs	r3, #100	; 0x64
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	2307      	movs	r3, #7
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	f107 030c 	add.w	r3, r7, #12
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	2301      	movs	r3, #1
 8005506:	2203      	movs	r2, #3
 8005508:	2118      	movs	r1, #24
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fc fb8e 	bl	8001c2c <HAL_I2C_Mem_Read>
        uint8_t c = rawMagData[6];
 8005510:	7cbb      	ldrb	r3, [r7, #18]
 8005512:	75fb      	strb	r3, [r7, #23]
        if (!(c & 0x08))
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d11c      	bne.n	8005558 <readMagData+0x90>
        {
            destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0]; // Turn the MSB and LSB into a signed 16-bit value
 800551e:	7b7b      	ldrb	r3, [r7, #13]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	b21a      	sxth	r2, r3
 8005524:	7b3b      	ldrb	r3, [r7, #12]
 8005526:	b21b      	sxth	r3, r3
 8005528:	4313      	orrs	r3, r2
 800552a:	b21a      	sxth	r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	801a      	strh	r2, [r3, #0]
            destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2]; // Data stored as little Endian
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	b219      	sxth	r1, r3
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	b21a      	sxth	r2, r3
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	3302      	adds	r3, #2
 800553e:	430a      	orrs	r2, r1
 8005540:	b212      	sxth	r2, r2
 8005542:	801a      	strh	r2, [r3, #0]
            destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4];
 8005544:	7c7b      	ldrb	r3, [r7, #17]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	b219      	sxth	r1, r3
 800554a:	7c3b      	ldrb	r3, [r7, #16]
 800554c:	b21a      	sxth	r2, r3
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	3304      	adds	r3, #4
 8005552:	430a      	orrs	r2, r1
 8005554:	b212      	sxth	r2, r2
 8005556:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8005558:	bf00      	nop
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float *destination)
{
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b089      	sub	sp, #36	; 0x24
 8005564:	af04      	add	r7, sp, #16
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
    // First extract the factory calibration for each magnetometer axis
    //  x/y/z gyro calibration data stored here
    uint8_t rawMagCalData[3];

    // Power down magnetometer
    writeData = 0x00;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 800556e:	2364      	movs	r3, #100	; 0x64
 8005570:	9302      	str	r3, [sp, #8]
 8005572:	2301      	movs	r3, #1
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	f107 030f 	add.w	r3, r7, #15
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2301      	movs	r3, #1
 800557e:	220a      	movs	r2, #10
 8005580:	2118      	movs	r1, #24
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc fa58 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005588:	2064      	movs	r0, #100	; 0x64
 800558a:	f7fb fe29 	bl	80011e0 <HAL_Delay>

    writeData = 0x0F;
 800558e:	230f      	movs	r3, #15
 8005590:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout); // Enter Fuse ROM access mode
 8005592:	2364      	movs	r3, #100	; 0x64
 8005594:	9302      	str	r3, [sp, #8]
 8005596:	2301      	movs	r3, #1
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	f107 030f 	add.w	r3, r7, #15
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	2301      	movs	r3, #1
 80055a2:	220a      	movs	r2, #10
 80055a4:	2118      	movs	r1, #24
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fc fa46 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 80055ac:	2064      	movs	r0, #100	; 0x64
 80055ae:	f7fb fe17 	bl	80011e0 <HAL_Delay>

    HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout); // Read the x-, y-, and z-axis calibration values
 80055b2:	2364      	movs	r3, #100	; 0x64
 80055b4:	9302      	str	r3, [sp, #8]
 80055b6:	2303      	movs	r3, #3
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	f107 030c 	add.w	r3, r7, #12
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	2301      	movs	r3, #1
 80055c2:	2210      	movs	r2, #16
 80055c4:	2118      	movs	r1, #24
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fc fb30 	bl	8001c2c <HAL_I2C_Mem_Read>
    destination[0] = (float)(rawMagCalData[0] - 128) / 256. + 1.;                              // Return x-axis sensitivity adjustment values, etc.
 80055cc:	7b3b      	ldrb	r3, [r7, #12]
 80055ce:	3b80      	subs	r3, #128	; 0x80
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fb fb53 	bl	8000c7c <__aeabi_i2f>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fa ff1d 	bl	8000418 <__aeabi_f2d>
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	4b44      	ldr	r3, [pc, #272]	; (80056f4 <initAK8963+0x194>)
 80055e4:	f7fb f89a 	bl	800071c <__aeabi_ddiv>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4610      	mov	r0, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	4b40      	ldr	r3, [pc, #256]	; (80056f8 <initAK8963+0x198>)
 80055f6:	f7fa fdb1 	bl	800015c <__adddf3>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4610      	mov	r0, r2
 8005600:	4619      	mov	r1, r3
 8005602:	f7fb fa31 	bl	8000a68 <__aeabi_d2f>
 8005606:	4602      	mov	r2, r0
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	601a      	str	r2, [r3, #0]
    destination[1] = (float)(rawMagCalData[1] - 128) / 256. + 1.;
 800560c:	7b7b      	ldrb	r3, [r7, #13]
 800560e:	3b80      	subs	r3, #128	; 0x80
 8005610:	4618      	mov	r0, r3
 8005612:	f7fb fb33 	bl	8000c7c <__aeabi_i2f>
 8005616:	4603      	mov	r3, r0
 8005618:	4618      	mov	r0, r3
 800561a:	f7fa fefd 	bl	8000418 <__aeabi_f2d>
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	4b34      	ldr	r3, [pc, #208]	; (80056f4 <initAK8963+0x194>)
 8005624:	f7fb f87a 	bl	800071c <__aeabi_ddiv>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4610      	mov	r0, r2
 800562e:	4619      	mov	r1, r3
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	4b30      	ldr	r3, [pc, #192]	; (80056f8 <initAK8963+0x198>)
 8005636:	f7fa fd91 	bl	800015c <__adddf3>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	1d1c      	adds	r4, r3, #4
 8005646:	f7fb fa0f 	bl	8000a68 <__aeabi_d2f>
 800564a:	4603      	mov	r3, r0
 800564c:	6023      	str	r3, [r4, #0]
    destination[2] = (float)(rawMagCalData[2] - 128) / 256. + 1.;
 800564e:	7bbb      	ldrb	r3, [r7, #14]
 8005650:	3b80      	subs	r3, #128	; 0x80
 8005652:	4618      	mov	r0, r3
 8005654:	f7fb fb12 	bl	8000c7c <__aeabi_i2f>
 8005658:	4603      	mov	r3, r0
 800565a:	4618      	mov	r0, r3
 800565c:	f7fa fedc 	bl	8000418 <__aeabi_f2d>
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <initAK8963+0x194>)
 8005666:	f7fb f859 	bl	800071c <__aeabi_ddiv>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4610      	mov	r0, r2
 8005670:	4619      	mov	r1, r3
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <initAK8963+0x198>)
 8005678:	f7fa fd70 	bl	800015c <__adddf3>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	f103 0408 	add.w	r4, r3, #8
 800568a:	f7fb f9ed 	bl	8000a68 <__aeabi_d2f>
 800568e:	4603      	mov	r3, r0
 8005690:	6023      	str	r3, [r4, #0]

    writeData = 0x00;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout); // Power down magnetometer
 8005696:	2364      	movs	r3, #100	; 0x64
 8005698:	9302      	str	r3, [sp, #8]
 800569a:	2301      	movs	r3, #1
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	f107 030f 	add.w	r3, r7, #15
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	2301      	movs	r3, #1
 80056a6:	220a      	movs	r2, #10
 80056a8:	2118      	movs	r1, #24
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fc f9c4 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 80056b0:	2064      	movs	r0, #100	; 0x64
 80056b2:	f7fb fd95 	bl	80011e0 <HAL_Delay>

    // Configure the magnetometer for continuous read and highest resolution
    // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
    // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
    writeData = Mscale << 4 | Mmode;
 80056b6:	4b11      	ldr	r3, [pc, #68]	; (80056fc <initAK8963+0x19c>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	b25a      	sxtb	r2, r3
 80056be:	4b10      	ldr	r3, [pc, #64]	; (8005700 <initAK8963+0x1a0>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b25b      	sxtb	r3, r3
 80056c4:	4313      	orrs	r3, r2
 80056c6:	b25b      	sxtb	r3, r3
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout); // Set magnetometer data resolution and sample ODR
 80056cc:	2364      	movs	r3, #100	; 0x64
 80056ce:	9302      	str	r3, [sp, #8]
 80056d0:	2301      	movs	r3, #1
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	f107 030f 	add.w	r3, r7, #15
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	2301      	movs	r3, #1
 80056dc:	220a      	movs	r2, #10
 80056de:	2118      	movs	r1, #24
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fc f9a9 	bl	8001a38 <HAL_I2C_Mem_Write>

    // writeData = 0x16;
    // HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
    HAL_Delay(10);
 80056e6:	200a      	movs	r0, #10
 80056e8:	f7fb fd7a 	bl	80011e0 <HAL_Delay>
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd90      	pop	{r4, r7, pc}
 80056f4:	40700000 	.word	0x40700000
 80056f8:	3ff00000 	.word	0x3ff00000
 80056fc:	20000007 	.word	0x20000007
 8005700:	20000008 	.word	0x20000008

08005704 <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float *dest1, float *dest2)
{
 8005704:	b590      	push	{r4, r7, lr}
 8005706:	b095      	sub	sp, #84	; 0x54
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]

    uint16_t ii = 0, sample_count = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005716:	2300      	movs	r3, #0
 8005718:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 800571c:	2300      	movs	r3, #0
 800571e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005720:	2300      	movs	r3, #0
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005724:	2300      	movs	r3, #0
 8005726:	643b      	str	r3, [r7, #64]	; 0x40
 8005728:	2300      	movs	r3, #0
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800572c:	2300      	movs	r3, #0
 800572e:	633b      	str	r3, [r7, #48]	; 0x30
 8005730:	2300      	movs	r3, #0
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
    int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8005734:	4aa2      	ldr	r2, [pc, #648]	; (80059c0 <calibrateMag+0x2bc>)
 8005736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800573a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800573e:	6018      	str	r0, [r3, #0]
 8005740:	3304      	adds	r3, #4
 8005742:	8019      	strh	r1, [r3, #0]
 8005744:	4a9f      	ldr	r2, [pc, #636]	; (80059c4 <calibrateMag+0x2c0>)
 8005746:	f107 031c 	add.w	r3, r7, #28
 800574a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800574e:	6018      	str	r0, [r3, #0]
 8005750:	3304      	adds	r3, #4
 8005752:	8019      	strh	r1, [r3, #0]
 8005754:	2300      	movs	r3, #0
 8005756:	82bb      	strh	r3, [r7, #20]
 8005758:	2300      	movs	r3, #0
 800575a:	82fb      	strh	r3, [r7, #22]
 800575c:	2300      	movs	r3, #0
 800575e:	833b      	strh	r3, [r7, #24]

    HAL_Delay(4000);
 8005760:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005764:	f7fb fd3c 	bl	80011e0 <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if (Mmode == 0x02)
 8005768:	4b97      	ldr	r3, [pc, #604]	; (80059c8 <calibrateMag+0x2c4>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d102      	bne.n	8005776 <calibrateMag+0x72>
        sample_count = 128; // at 8 Hz ODR, new mag data is available every 125 ms
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if (Mmode == 0x06)
 8005776:	4b94      	ldr	r3, [pc, #592]	; (80059c8 <calibrateMag+0x2c4>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b06      	cmp	r3, #6
 800577c:	d103      	bne.n	8005786 <calibrateMag+0x82>
        sample_count = 1500; // at 100 Hz ODR, new mag data is available every 10 ms
 800577e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005782:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    for (ii = 0; ii < sample_count; ii++)
 8005786:	2300      	movs	r3, #0
 8005788:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800578c:	e055      	b.n	800583a <calibrateMag+0x136>
    {
        readMagData(I2Cx, mag_temp); // Read the mag data
 800578e:	f107 0314 	add.w	r3, r7, #20
 8005792:	4619      	mov	r1, r3
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff fe97 	bl	80054c8 <readMagData>
        for (int jj = 0; jj < 3; jj++)
 800579a:	2300      	movs	r3, #0
 800579c:	64bb      	str	r3, [r7, #72]	; 0x48
 800579e:	e036      	b.n	800580e <calibrateMag+0x10a>
        {
            if (mag_temp[jj] > mag_max[jj])
 80057a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	3350      	adds	r3, #80	; 0x50
 80057a6:	443b      	add	r3, r7
 80057a8:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80057ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	3350      	adds	r3, #80	; 0x50
 80057b2:	443b      	add	r3, r7
 80057b4:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	dd0b      	ble.n	80057d4 <calibrateMag+0xd0>
                mag_max[jj] = mag_temp[jj];
 80057bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	3350      	adds	r3, #80	; 0x50
 80057c2:	443b      	add	r3, r7
 80057c4:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80057c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	3350      	adds	r3, #80	; 0x50
 80057ce:	443b      	add	r3, r7
 80057d0:	f823 2c2c 	strh.w	r2, [r3, #-44]
            if (mag_temp[jj] < mag_min[jj])
 80057d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	3350      	adds	r3, #80	; 0x50
 80057da:	443b      	add	r3, r7
 80057dc:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80057e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	3350      	adds	r3, #80	; 0x50
 80057e6:	443b      	add	r3, r7
 80057e8:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	da0b      	bge.n	8005808 <calibrateMag+0x104>
                mag_min[jj] = mag_temp[jj];
 80057f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	3350      	adds	r3, #80	; 0x50
 80057f6:	443b      	add	r3, r7
 80057f8:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80057fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	3350      	adds	r3, #80	; 0x50
 8005802:	443b      	add	r3, r7
 8005804:	f823 2c34 	strh.w	r2, [r3, #-52]
        for (int jj = 0; jj < 3; jj++)
 8005808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800580a:	3301      	adds	r3, #1
 800580c:	64bb      	str	r3, [r7, #72]	; 0x48
 800580e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005810:	2b02      	cmp	r3, #2
 8005812:	ddc5      	ble.n	80057a0 <calibrateMag+0x9c>
        }
        if (Mmode == 0x02)
 8005814:	4b6c      	ldr	r3, [pc, #432]	; (80059c8 <calibrateMag+0x2c4>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d102      	bne.n	8005822 <calibrateMag+0x11e>
            HAL_Delay(135); // at 8 Hz ODR, new mag data is available every 125 ms
 800581c:	2087      	movs	r0, #135	; 0x87
 800581e:	f7fb fcdf 	bl	80011e0 <HAL_Delay>
        if (Mmode == 0x06)
 8005822:	4b69      	ldr	r3, [pc, #420]	; (80059c8 <calibrateMag+0x2c4>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b06      	cmp	r3, #6
 8005828:	d102      	bne.n	8005830 <calibrateMag+0x12c>
            HAL_Delay(12); // at 100 Hz ODR, new mag data is available every 10 ms
 800582a:	200c      	movs	r0, #12
 800582c:	f7fb fcd8 	bl	80011e0 <HAL_Delay>
    for (ii = 0; ii < sample_count; ii++)
 8005830:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005834:	3301      	adds	r3, #1
 8005836:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800583a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800583e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005842:	429a      	cmp	r2, r3
 8005844:	d3a3      	bcc.n	800578e <calibrateMag+0x8a>
    }

    // Get hard iron correction
    mag_bias[0] = (mag_max[0] + mag_min[0]) / 2; // get average x mag bias in counts
 8005846:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800584a:	461a      	mov	r2, r3
 800584c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	0fda      	lsrs	r2, r3, #31
 8005854:	4413      	add	r3, r2
 8005856:	105b      	asrs	r3, r3, #1
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1] = (mag_max[1] + mag_min[1]) / 2; // get average y mag bias in counts
 800585a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800585e:	461a      	mov	r2, r3
 8005860:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005864:	4413      	add	r3, r2
 8005866:	0fda      	lsrs	r2, r3, #31
 8005868:	4413      	add	r3, r2
 800586a:	105b      	asrs	r3, r3, #1
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2] = (mag_max[2] + mag_min[2]) / 2; // get average z mag bias in counts
 800586e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005872:	461a      	mov	r2, r3
 8005874:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005878:	4413      	add	r3, r2
 800587a:	0fda      	lsrs	r2, r3, #31
 800587c:	4413      	add	r3, r2
 800587e:	105b      	asrs	r3, r3, #1
 8005880:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float)mag_bias[0] * mRes * magCalibration[0]; // save mag biases in G for main program
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	4618      	mov	r0, r3
 8005886:	f7fb f9f9 	bl	8000c7c <__aeabi_i2f>
 800588a:	4602      	mov	r2, r0
 800588c:	4b4f      	ldr	r3, [pc, #316]	; (80059cc <calibrateMag+0x2c8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f7fb fa46 	bl	8000d24 <__aeabi_fmul>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	4b4c      	ldr	r3, [pc, #304]	; (80059d0 <calibrateMag+0x2cc>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4619      	mov	r1, r3
 80058a2:	4610      	mov	r0, r2
 80058a4:	f7fb fa3e 	bl	8000d24 <__aeabi_fmul>
 80058a8:	4603      	mov	r3, r0
 80058aa:	461a      	mov	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	601a      	str	r2, [r3, #0]
    dest1[1] = (float)mag_bias[1] * mRes * magCalibration[1];
 80058b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fb f9e2 	bl	8000c7c <__aeabi_i2f>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b44      	ldr	r3, [pc, #272]	; (80059cc <calibrateMag+0x2c8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f7fb fa2f 	bl	8000d24 <__aeabi_fmul>
 80058c6:	4603      	mov	r3, r0
 80058c8:	4618      	mov	r0, r3
 80058ca:	4b41      	ldr	r3, [pc, #260]	; (80059d0 <calibrateMag+0x2cc>)
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	1d1c      	adds	r4, r3, #4
 80058d2:	4611      	mov	r1, r2
 80058d4:	f7fb fa26 	bl	8000d24 <__aeabi_fmul>
 80058d8:	4603      	mov	r3, r0
 80058da:	6023      	str	r3, [r4, #0]
    dest1[2] = (float)mag_bias[2] * mRes * magCalibration[2];
 80058dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fb f9cc 	bl	8000c7c <__aeabi_i2f>
 80058e4:	4602      	mov	r2, r0
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <calibrateMag+0x2c8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f7fb fa19 	bl	8000d24 <__aeabi_fmul>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4618      	mov	r0, r3
 80058f6:	4b36      	ldr	r3, [pc, #216]	; (80059d0 <calibrateMag+0x2cc>)
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f103 0408 	add.w	r4, r3, #8
 8005900:	4611      	mov	r1, r2
 8005902:	f7fb fa0f 	bl	8000d24 <__aeabi_fmul>
 8005906:	4603      	mov	r3, r0
 8005908:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0] = (mag_max[0] - mag_min[0]) / 2; // get average x axis max chord length in counts
 800590a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800590e:	461a      	mov	r2, r3
 8005910:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	0fda      	lsrs	r2, r3, #31
 8005918:	4413      	add	r3, r2
 800591a:	105b      	asrs	r3, r3, #1
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1] = (mag_max[1] - mag_min[1]) / 2; // get average y axis max chord length in counts
 800591e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005922:	461a      	mov	r2, r3
 8005924:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	0fda      	lsrs	r2, r3, #31
 800592c:	4413      	add	r3, r2
 800592e:	105b      	asrs	r3, r3, #1
 8005930:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2] = (mag_max[2] - mag_min[2]) / 2; // get average z axis max chord length in counts
 8005932:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005936:	461a      	mov	r2, r3
 8005938:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	0fda      	lsrs	r2, r3, #31
 8005940:	4413      	add	r3, r2
 8005942:	105b      	asrs	r3, r3, #1
 8005944:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8005946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	441a      	add	r2, r3
 800594c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594e:	4413      	add	r3, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f7fb f993 	bl	8000c7c <__aeabi_i2f>
 8005956:	4603      	mov	r3, r0
 8005958:	647b      	str	r3, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 800595a:	491e      	ldr	r1, [pc, #120]	; (80059d4 <calibrateMag+0x2d0>)
 800595c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800595e:	f7fb fa95 	bl	8000e8c <__aeabi_fdiv>
 8005962:	4603      	mov	r3, r0
 8005964:	647b      	str	r3, [r7, #68]	; 0x44

    dest2[0] = avg_rad / ((float)mag_scale[0]);
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	4618      	mov	r0, r3
 800596a:	f7fb f987 	bl	8000c7c <__aeabi_i2f>
 800596e:	4603      	mov	r3, r0
 8005970:	4619      	mov	r1, r3
 8005972:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005974:	f7fb fa8a 	bl	8000e8c <__aeabi_fdiv>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad / ((float)mag_scale[1]);
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	4618      	mov	r0, r3
 8005984:	f7fb f97a 	bl	8000c7c <__aeabi_i2f>
 8005988:	4602      	mov	r2, r0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	1d1c      	adds	r4, r3, #4
 800598e:	4611      	mov	r1, r2
 8005990:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005992:	f7fb fa7b 	bl	8000e8c <__aeabi_fdiv>
 8005996:	4603      	mov	r3, r0
 8005998:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad / ((float)mag_scale[2]);
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	4618      	mov	r0, r3
 800599e:	f7fb f96d 	bl	8000c7c <__aeabi_i2f>
 80059a2:	4602      	mov	r2, r0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f103 0408 	add.w	r4, r3, #8
 80059aa:	4611      	mov	r1, r2
 80059ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80059ae:	f7fb fa6d 	bl	8000e8c <__aeabi_fdiv>
 80059b2:	4603      	mov	r3, r0
 80059b4:	6023      	str	r3, [r4, #0]
}
 80059b6:	bf00      	nop
 80059b8:	3754      	adds	r7, #84	; 0x54
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd90      	pop	{r4, r7, pc}
 80059be:	bf00      	nop
 80059c0:	0800b7e0 	.word	0x0800b7e0
 80059c4:	0800b7e8 	.word	0x0800b7e8
 80059c8:	20000008 	.word	0x20000008
 80059cc:	2000024c 	.word	0x2000024c
 80059d0:	20000268 	.word	0x20000268
 80059d4:	40400000 	.word	0x40400000

080059d8 <initMPU9250>:

void initMPU9250(I2C_HandleTypeDef *I2Cx)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af04      	add	r7, sp, #16
 80059de:	6078      	str	r0, [r7, #4]
    // pre def. vars
    uint8_t readData;
    uint8_t writeData;

    // Wake up device
    writeData = 0x00;
 80059e0:	2300      	movs	r3, #0
 80059e2:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80059e4:	2364      	movs	r3, #100	; 0x64
 80059e6:	9302      	str	r3, [sp, #8]
 80059e8:	2301      	movs	r3, #1
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	f107 030e 	add.w	r3, r7, #14
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2301      	movs	r3, #1
 80059f4:	226b      	movs	r2, #107	; 0x6b
 80059f6:	21d0      	movs	r1, #208	; 0xd0
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7fc f81d 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 80059fe:	2064      	movs	r0, #100	; 0x64
 8005a00:	f7fb fbee 	bl	80011e0 <HAL_Delay>

    writeData = 0x01;
 8005a04:	2301      	movs	r3, #1
 8005a06:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8005a08:	2364      	movs	r3, #100	; 0x64
 8005a0a:	9302      	str	r3, [sp, #8]
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	f107 030e 	add.w	r3, r7, #14
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	2301      	movs	r3, #1
 8005a18:	226b      	movs	r2, #107	; 0x6b
 8005a1a:	21d0      	movs	r1, #208	; 0xd0
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7fc f80b 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005a22:	2064      	movs	r0, #100	; 0x64
 8005a24:	f7fb fbdc 	bl	80011e0 <HAL_Delay>

    writeData = 0x03;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8005a2c:	2364      	movs	r3, #100	; 0x64
 8005a2e:	9302      	str	r3, [sp, #8]
 8005a30:	2301      	movs	r3, #1
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	f107 030e 	add.w	r3, r7, #14
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	221a      	movs	r2, #26
 8005a3e:	21d0      	movs	r1, #208	; 0xd0
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fb fff9 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005a46:	2064      	movs	r0, #100	; 0x64
 8005a48:	f7fb fbca 	bl	80011e0 <HAL_Delay>

    writeData = 0x04;
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8005a50:	2364      	movs	r3, #100	; 0x64
 8005a52:	9302      	str	r3, [sp, #8]
 8005a54:	2301      	movs	r3, #1
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	f107 030e 	add.w	r3, r7, #14
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	2301      	movs	r3, #1
 8005a60:	2219      	movs	r2, #25
 8005a62:	21d0      	movs	r1, #208	; 0xd0
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7fb ffe7 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005a6a:	2064      	movs	r0, #100	; 0x64
 8005a6c:	f7fb fbb8 	bl	80011e0 <HAL_Delay>

    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8005a70:	2364      	movs	r3, #100	; 0x64
 8005a72:	9302      	str	r3, [sp, #8]
 8005a74:	2301      	movs	r3, #1
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	f107 030f 	add.w	r3, r7, #15
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	2301      	movs	r3, #1
 8005a80:	221b      	movs	r2, #27
 8005a82:	21d0      	movs	r1, #208	; 0xd0
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7fc f8d1 	bl	8001c2c <HAL_I2C_Mem_Read>
    readData = readData & ~0x03;       // Clear Fchoice bits [1:0]
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	f023 0303 	bic.w	r3, r3, #3
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	73fb      	strb	r3, [r7, #15]
    readData = readData & ~0x18;       // Clear GFS bits [4:3]
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	f023 0318 	bic.w	r3, r3, #24
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	73fb      	strb	r3, [r7, #15]
    readData = readData | Gscale << 3; // Set full scale range for the gyro
 8005a9e:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <initMPU9250+0x1bc>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	b25a      	sxtb	r2, r3
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	b25b      	sxtb	r3, r3
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	b25b      	sxtb	r3, r3
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);
 8005ab2:	2064      	movs	r0, #100	; 0x64
 8005ab4:	f7fb fb94 	bl	80011e0 <HAL_Delay>

    writeData = readData;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8005abc:	2364      	movs	r3, #100	; 0x64
 8005abe:	9302      	str	r3, [sp, #8]
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	f107 030e 	add.w	r3, r7, #14
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	2301      	movs	r3, #1
 8005acc:	221b      	movs	r2, #27
 8005ace:	21d0      	movs	r1, #208	; 0xd0
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7fb ffb1 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005ad6:	2064      	movs	r0, #100	; 0x64
 8005ad8:	f7fb fb82 	bl	80011e0 <HAL_Delay>

    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8005adc:	2364      	movs	r3, #100	; 0x64
 8005ade:	9302      	str	r3, [sp, #8]
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	f107 030f 	add.w	r3, r7, #15
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	2301      	movs	r3, #1
 8005aec:	221c      	movs	r2, #28
 8005aee:	21d0      	movs	r1, #208	; 0xd0
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7fc f89b 	bl	8001c2c <HAL_I2C_Mem_Read>
    readData = readData & ~0x18;       // Clear AFS bits [4:3]
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	f023 0318 	bic.w	r3, r3, #24
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	73fb      	strb	r3, [r7, #15]
    readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8005b00:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <initMPU9250+0x1c0>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	b25a      	sxtb	r2, r3
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	b25b      	sxtb	r3, r3
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	b25b      	sxtb	r3, r3
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	73fb      	strb	r3, [r7, #15]

    writeData = readData;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8005b18:	2364      	movs	r3, #100	; 0x64
 8005b1a:	9302      	str	r3, [sp, #8]
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	9301      	str	r3, [sp, #4]
 8005b20:	f107 030e 	add.w	r3, r7, #14
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	2301      	movs	r3, #1
 8005b28:	221c      	movs	r2, #28
 8005b2a:	21d0      	movs	r1, #208	; 0xd0
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fb ff83 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005b32:	2064      	movs	r0, #100	; 0x64
 8005b34:	f7fb fb54 	bl	80011e0 <HAL_Delay>
    //**
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8005b38:	2364      	movs	r3, #100	; 0x64
 8005b3a:	9302      	str	r3, [sp, #8]
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	f107 030f 	add.w	r3, r7, #15
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	2301      	movs	r3, #1
 8005b48:	221d      	movs	r2, #29
 8005b4a:	21d0      	movs	r1, #208	; 0xd0
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7fc f86d 	bl	8001c2c <HAL_I2C_Mem_Read>
    readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	f023 030f 	bic.w	r3, r3, #15
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	73fb      	strb	r3, [r7, #15]
    readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	f043 0303 	orr.w	r3, r3, #3
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	73fb      	strb	r3, [r7, #15]

    writeData = readData;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8005b6a:	2364      	movs	r3, #100	; 0x64
 8005b6c:	9302      	str	r3, [sp, #8]
 8005b6e:	2301      	movs	r3, #1
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	f107 030e 	add.w	r3, r7, #14
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	221d      	movs	r2, #29
 8005b7c:	21d0      	movs	r1, #208	; 0xd0
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fb ff5a 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005b84:	2064      	movs	r0, #100	; 0x64
 8005b86:	f7fb fb2b 	bl	80011e0 <HAL_Delay>
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000005 	.word	0x20000005
 8005b98:	20000006 	.word	0x20000006

08005b9c <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float *dest1, float *dest2)
{
 8005b9c:	b5b0      	push	{r4, r5, r7, lr}
 8005b9e:	b09e      	sub	sp, #120	; 0x78
 8005ba0:	af04      	add	r7, sp, #16
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
    // pre def. vars
    uint8_t writeData;

    uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
    uint16_t ii, packet_count, fifo_count;
    int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8005ba8:	2300      	movs	r3, #0
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bac:	2300      	movs	r3, #0
 8005bae:	643b      	str	r3, [r7, #64]	; 0x40
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb8:	2300      	movs	r3, #0
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	63bb      	str	r3, [r7, #56]	; 0x38

    // reset device
    writeData = 0x80;
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout); // Write a one to bit 7 reset bit; toggle reset device
 8005bc6:	2364      	movs	r3, #100	; 0x64
 8005bc8:	9302      	str	r3, [sp, #8]
 8005bca:	2301      	movs	r3, #1
 8005bcc:	9301      	str	r3, [sp, #4]
 8005bce:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	226b      	movs	r2, #107	; 0x6b
 8005bd8:	21d0      	movs	r1, #208	; 0xd0
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f7fb ff2c 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8005be0:	2064      	movs	r0, #100	; 0x64
 8005be2:	f7fb fafd 	bl	80011e0 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    writeData = 0x01;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8005bec:	2364      	movs	r3, #100	; 0x64
 8005bee:	9302      	str	r3, [sp, #8]
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	226b      	movs	r2, #107	; 0x6b
 8005bfe:	21d0      	movs	r1, #208	; 0xd0
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7fb ff19 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8005c0c:	2364      	movs	r3, #100	; 0x64
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	2301      	movs	r3, #1
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	226c      	movs	r2, #108	; 0x6c
 8005c1e:	21d0      	movs	r1, #208	; 0xd0
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7fb ff09 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(200);
 8005c26:	20c8      	movs	r0, #200	; 0xc8
 8005c28:	f7fb fada 	bl	80011e0 <HAL_Delay>

    // Configure device for bias calculation
    writeData = 0x00;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout); // Disable all interrupts
 8005c32:	2364      	movs	r3, #100	; 0x64
 8005c34:	9302      	str	r3, [sp, #8]
 8005c36:	2301      	movs	r3, #1
 8005c38:	9301      	str	r3, [sp, #4]
 8005c3a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	2301      	movs	r3, #1
 8005c42:	2238      	movs	r2, #56	; 0x38
 8005c44:	21d0      	movs	r1, #208	; 0xd0
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7fb fef6 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout); // Disable FIFO
 8005c52:	2364      	movs	r3, #100	; 0x64
 8005c54:	9302      	str	r3, [sp, #8]
 8005c56:	2301      	movs	r3, #1
 8005c58:	9301      	str	r3, [sp, #4]
 8005c5a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	2301      	movs	r3, #1
 8005c62:	2223      	movs	r2, #35	; 0x23
 8005c64:	21d0      	movs	r1, #208	; 0xd0
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7fb fee6 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout); // Turn on internal clock source
 8005c72:	2364      	movs	r3, #100	; 0x64
 8005c74:	9302      	str	r3, [sp, #8]
 8005c76:	2301      	movs	r3, #1
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	2301      	movs	r3, #1
 8005c82:	226b      	movs	r2, #107	; 0x6b
 8005c84:	21d0      	movs	r1, #208	; 0xd0
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7fb fed6 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout); // Disable I2C master
 8005c92:	2364      	movs	r3, #100	; 0x64
 8005c94:	9302      	str	r3, [sp, #8]
 8005c96:	2301      	movs	r3, #1
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	2224      	movs	r2, #36	; 0x24
 8005ca4:	21d0      	movs	r1, #208	; 0xd0
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7fb fec6 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005cac:	2300      	movs	r3, #0
 8005cae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout); // Disable FIFO and I2C master modes
 8005cb2:	2364      	movs	r3, #100	; 0x64
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	226a      	movs	r2, #106	; 0x6a
 8005cc4:	21d0      	movs	r1, #208	; 0xd0
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f7fb feb6 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x0C;
 8005ccc:	230c      	movs	r3, #12
 8005cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout); // Reset FIFO and DMP
 8005cd2:	2364      	movs	r3, #100	; 0x64
 8005cd4:	9302      	str	r3, [sp, #8]
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	226a      	movs	r2, #106	; 0x6a
 8005ce4:	21d0      	movs	r1, #208	; 0xd0
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7fb fea6 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(15);
 8005cec:	200f      	movs	r0, #15
 8005cee:	f7fb fa77 	bl	80011e0 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    writeData = 0x01;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout); // Set low-pass filter to 188 Hz
 8005cf8:	2364      	movs	r3, #100	; 0x64
 8005cfa:	9302      	str	r3, [sp, #8]
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	2301      	movs	r3, #1
 8005d08:	221a      	movs	r2, #26
 8005d0a:	21d0      	movs	r1, #208	; 0xd0
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f7fb fe93 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005d12:	2300      	movs	r3, #0
 8005d14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout); // Set sample rate to 1 kHz
 8005d18:	2364      	movs	r3, #100	; 0x64
 8005d1a:	9302      	str	r3, [sp, #8]
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	2301      	movs	r3, #1
 8005d28:	2219      	movs	r2, #25
 8005d2a:	21d0      	movs	r1, #208	; 0xd0
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7fb fe83 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005d32:	2300      	movs	r3, #0
 8005d34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8005d38:	2364      	movs	r3, #100	; 0x64
 8005d3a:	9302      	str	r3, [sp, #8]
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	2301      	movs	r3, #1
 8005d48:	221b      	movs	r2, #27
 8005d4a:	21d0      	movs	r1, #208	; 0xd0
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7fb fe73 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8005d58:	2364      	movs	r3, #100	; 0x64
 8005d5a:	9302      	str	r3, [sp, #8]
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	9301      	str	r3, [sp, #4]
 8005d60:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	2301      	movs	r3, #1
 8005d68:	221c      	movs	r2, #28
 8005d6a:	21d0      	movs	r1, #208	; 0xd0
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f7fb fe63 	bl	8001a38 <HAL_I2C_Mem_Write>

    uint16_t gyrosensitivity = 131;    // = 131 LSB/degrees/sec
 8005d72:	2383      	movs	r3, #131	; 0x83
 8005d74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    uint16_t accelsensitivity = 16384; // = 16384 LSB/g
 8005d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d7c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    writeData = 0x40;
 8005d80:	2340      	movs	r3, #64	; 0x40
 8005d82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout); // Enable FIFO
 8005d86:	2364      	movs	r3, #100	; 0x64
 8005d88:	9302      	str	r3, [sp, #8]
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	2301      	movs	r3, #1
 8005d96:	226a      	movs	r2, #106	; 0x6a
 8005d98:	21d0      	movs	r1, #208	; 0xd0
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7fb fe4c 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x78;
 8005da0:	2378      	movs	r3, #120	; 0x78
 8005da2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout); // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8005da6:	2364      	movs	r3, #100	; 0x64
 8005da8:	9302      	str	r3, [sp, #8]
 8005daa:	2301      	movs	r3, #1
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	2301      	movs	r3, #1
 8005db6:	2223      	movs	r2, #35	; 0x23
 8005db8:	21d0      	movs	r1, #208	; 0xd0
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7fb fe3c 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(40);                                                                    // accumulate 40 samples in 40 milliseconds = 480 bytes
 8005dc0:	2028      	movs	r0, #40	; 0x28
 8005dc2:	f7fb fa0d 	bl	80011e0 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    writeData = 0x00;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);       // Disable gyro and accelerometer sensors for FIFO
 8005dcc:	2364      	movs	r3, #100	; 0x64
 8005dce:	9302      	str	r3, [sp, #8]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	2301      	movs	r3, #1
 8005ddc:	2223      	movs	r2, #35	; 0x23
 8005dde:	21d0      	movs	r1, #208	; 0xd0
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7fb fe29 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout); // read FIFO sample count
 8005de6:	2364      	movs	r3, #100	; 0x64
 8005de8:	9302      	str	r3, [sp, #8]
 8005dea:	2302      	movs	r3, #2
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	2301      	movs	r3, #1
 8005df6:	2272      	movs	r2, #114	; 0x72
 8005df8:	21d0      	movs	r1, #208	; 0xd0
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7fb ff16 	bl	8001c2c <HAL_I2C_Mem_Read>
    fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8005e00:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	b21a      	sxth	r2, r3
 8005e08:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005e0c:	b21b      	sxth	r3, r3
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	b21b      	sxth	r3, r3
 8005e12:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 8005e16:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005e1a:	4a5a      	ldr	r2, [pc, #360]	; (8005f84 <calibrateMPU9250+0x3e8>)
 8005e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e20:	08db      	lsrs	r3, r3, #3
 8005e22:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

    for (ii = 0; ii < packet_count; ii++)
 8005e26:	2300      	movs	r3, #0
 8005e28:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e2c:	e077      	b.n	8005f1e <calibrateMPU9250+0x382>
    {
        int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8005e2e:	2300      	movs	r3, #0
 8005e30:	833b      	strh	r3, [r7, #24]
 8005e32:	2300      	movs	r3, #0
 8005e34:	837b      	strh	r3, [r7, #26]
 8005e36:	2300      	movs	r3, #0
 8005e38:	83bb      	strh	r3, [r7, #28]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	823b      	strh	r3, [r7, #16]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	827b      	strh	r3, [r7, #18]
 8005e42:	2300      	movs	r3, #0
 8005e44:	82bb      	strh	r3, [r7, #20]
        HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8005e46:	2364      	movs	r3, #100	; 0x64
 8005e48:	9302      	str	r3, [sp, #8]
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	2301      	movs	r3, #1
 8005e56:	2274      	movs	r2, #116	; 0x74
 8005e58:	21d0      	movs	r1, #208	; 0xd0
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7fb fee6 	bl	8001c2c <HAL_I2C_Mem_Read>

        // Form signed 16-bit integer for each sample in FIFO
        accel_temp[0] = (int16_t)(((int16_t)calibData[0] << 8) | calibData[1]);
 8005e60:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	b21a      	sxth	r2, r3
 8005e68:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005e6c:	b21b      	sxth	r3, r3
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	b21b      	sxth	r3, r3
 8005e72:	833b      	strh	r3, [r7, #24]
        accel_temp[1] = (int16_t)(((int16_t)calibData[2] << 8) | calibData[3]);
 8005e74:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	b21a      	sxth	r2, r3
 8005e7c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b21b      	sxth	r3, r3
 8005e86:	837b      	strh	r3, [r7, #26]
        accel_temp[2] = (int16_t)(((int16_t)calibData[4] << 8) | calibData[5]);
 8005e88:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	b21a      	sxth	r2, r3
 8005e90:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005e94:	b21b      	sxth	r3, r3
 8005e96:	4313      	orrs	r3, r2
 8005e98:	b21b      	sxth	r3, r3
 8005e9a:	83bb      	strh	r3, [r7, #28]
        gyro_temp[0] = (int16_t)(((int16_t)calibData[6] << 8) | calibData[7]);
 8005e9c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	b21a      	sxth	r2, r3
 8005ea4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ea8:	b21b      	sxth	r3, r3
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	b21b      	sxth	r3, r3
 8005eae:	823b      	strh	r3, [r7, #16]
        gyro_temp[1] = (int16_t)(((int16_t)calibData[8] << 8) | calibData[9]);
 8005eb0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	b21a      	sxth	r2, r3
 8005eb8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005ebc:	b21b      	sxth	r3, r3
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	b21b      	sxth	r3, r3
 8005ec2:	827b      	strh	r3, [r7, #18]
        gyro_temp[2] = (int16_t)(((int16_t)calibData[10] << 8) | calibData[11]);
 8005ec4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	b21a      	sxth	r2, r3
 8005ecc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005ed0:	b21b      	sxth	r3, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b21b      	sxth	r3, r3
 8005ed6:	82bb      	strh	r3, [r7, #20]

        // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
        accel_bias[0] += (int32_t)accel_temp[0];
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005ede:	4413      	add	r3, r2
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30
        accel_bias[1] += (int32_t)accel_temp[1];
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005ee8:	4413      	add	r3, r2
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
        accel_bias[2] += (int32_t)accel_temp[2];
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	63bb      	str	r3, [r7, #56]	; 0x38
        gyro_bias[0] += (int32_t)gyro_temp[0];
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        gyro_bias[1] += (int32_t)gyro_temp[1];
 8005f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f02:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005f06:	4413      	add	r3, r2
 8005f08:	643b      	str	r3, [r7, #64]	; 0x40
        gyro_bias[2] += (int32_t)gyro_temp[2];
 8005f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005f10:	4413      	add	r3, r2
 8005f12:	647b      	str	r3, [r7, #68]	; 0x44
    for (ii = 0; ii < packet_count; ii++)
 8005f14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f18:	3301      	adds	r3, #1
 8005f1a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f1e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005f22:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d381      	bcc.n	8005e2e <calibrateMPU9250+0x292>
    }

    // Normalize sums to get average count biases
    accel_bias[0] /= (int32_t)packet_count;
 8005f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f2c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005f30:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f34:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[1] /= (int32_t)packet_count;
 8005f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005f3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
    accel_bias[2] /= (int32_t)packet_count;
 8005f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005f48:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f4c:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[0] /= (int32_t)packet_count;
 8005f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005f54:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f58:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[1] /= (int32_t)packet_count;
 8005f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005f60:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f64:	643b      	str	r3, [r7, #64]	; 0x40
    gyro_bias[2] /= (int32_t)packet_count;
 8005f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f68:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005f6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f70:	647b      	str	r3, [r7, #68]	; 0x44

    // Remove gravity from the z-axis accelerometer bias calculation
    if (accel_bias[2] > 0L)
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dd07      	ble.n	8005f88 <calibrateMPU9250+0x3ec>
    {
        accel_bias[2] -= (int32_t)accelsensitivity;
 8005f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f82:	e006      	b.n	8005f92 <calibrateMPU9250+0x3f6>
 8005f84:	aaaaaaab 	.word	0xaaaaaaab
    }
    else
    {
        accel_bias[2] += (int32_t)accelsensitivity;
 8005f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f8a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f8e:	4413      	add	r3, r2
 8005f90:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    calibData[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8005f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f94:	425b      	negs	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	da00      	bge.n	8005f9c <calibrateMPU9250+0x400>
 8005f9a:	3303      	adds	r3, #3
 8005f9c:	109b      	asrs	r3, r3, #2
 8005f9e:	121b      	asrs	r3, r3, #8
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    calibData[1] = (-gyro_bias[0] / 4) & 0xFF;      // Biases are additive, so change sign on calculated average gyro biases
 8005fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa8:	425b      	negs	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	da00      	bge.n	8005fb0 <calibrateMPU9250+0x414>
 8005fae:	3303      	adds	r3, #3
 8005fb0:	109b      	asrs	r3, r3, #2
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    calibData[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8005fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fba:	425b      	negs	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	da00      	bge.n	8005fc2 <calibrateMPU9250+0x426>
 8005fc0:	3303      	adds	r3, #3
 8005fc2:	109b      	asrs	r3, r3, #2
 8005fc4:	121b      	asrs	r3, r3, #8
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    calibData[3] = (-gyro_bias[1] / 4) & 0xFF;
 8005fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fce:	425b      	negs	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da00      	bge.n	8005fd6 <calibrateMPU9250+0x43a>
 8005fd4:	3303      	adds	r3, #3
 8005fd6:	109b      	asrs	r3, r3, #2
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    calibData[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8005fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe0:	425b      	negs	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	da00      	bge.n	8005fe8 <calibrateMPU9250+0x44c>
 8005fe6:	3303      	adds	r3, #3
 8005fe8:	109b      	asrs	r3, r3, #2
 8005fea:	121b      	asrs	r3, r3, #8
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    calibData[5] = (-gyro_bias[2] / 4) & 0xFF;
 8005ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff4:	425b      	negs	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	da00      	bge.n	8005ffc <calibrateMPU9250+0x460>
 8005ffa:	3303      	adds	r3, #3
 8005ffc:	109b      	asrs	r3, r3, #2
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    // Push gyro biases to hardware registers
    writeData = calibData[0];
 8006004:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800600c:	2364      	movs	r3, #100	; 0x64
 800600e:	9302      	str	r3, [sp, #8]
 8006010:	2301      	movs	r3, #1
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	2301      	movs	r3, #1
 800601c:	2213      	movs	r2, #19
 800601e:	21d0      	movs	r1, #208	; 0xd0
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7fb fd09 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = calibData[1];
 8006026:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800602a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800602e:	2364      	movs	r3, #100	; 0x64
 8006030:	9302      	str	r3, [sp, #8]
 8006032:	2301      	movs	r3, #1
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2301      	movs	r3, #1
 800603e:	2214      	movs	r2, #20
 8006040:	21d0      	movs	r1, #208	; 0xd0
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7fb fcf8 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = calibData[2];
 8006048:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800604c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8006050:	2364      	movs	r3, #100	; 0x64
 8006052:	9302      	str	r3, [sp, #8]
 8006054:	2301      	movs	r3, #1
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	2301      	movs	r3, #1
 8006060:	2215      	movs	r2, #21
 8006062:	21d0      	movs	r1, #208	; 0xd0
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f7fb fce7 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = calibData[3];
 800606a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800606e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8006072:	2364      	movs	r3, #100	; 0x64
 8006074:	9302      	str	r3, [sp, #8]
 8006076:	2301      	movs	r3, #1
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	2301      	movs	r3, #1
 8006082:	2216      	movs	r2, #22
 8006084:	21d0      	movs	r1, #208	; 0xd0
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7fb fcd6 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = calibData[4];
 800608c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006090:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8006094:	2364      	movs	r3, #100	; 0x64
 8006096:	9302      	str	r3, [sp, #8]
 8006098:	2301      	movs	r3, #1
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	2301      	movs	r3, #1
 80060a4:	2217      	movs	r2, #23
 80060a6:	21d0      	movs	r1, #208	; 0xd0
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7fb fcc5 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = calibData[5];
 80060ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80060b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80060b6:	2364      	movs	r3, #100	; 0x64
 80060b8:	9302      	str	r3, [sp, #8]
 80060ba:	2301      	movs	r3, #1
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	2301      	movs	r3, #1
 80060c6:	2218      	movs	r2, #24
 80060c8:	21d0      	movs	r1, #208	; 0xd0
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7fb fcb4 	bl	8001a38 <HAL_I2C_Mem_Write>

    // Output scaled gyro biases for display in the main program
    dest1[0] = (float)gyro_bias[0] / (float)gyrosensitivity;
 80060d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fa fdd2 	bl	8000c7c <__aeabi_i2f>
 80060d8:	4604      	mov	r4, r0
 80060da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fa fdc8 	bl	8000c74 <__aeabi_ui2f>
 80060e4:	4603      	mov	r3, r0
 80060e6:	4619      	mov	r1, r3
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7fa fecf 	bl	8000e8c <__aeabi_fdiv>
 80060ee:	4603      	mov	r3, r0
 80060f0:	461a      	mov	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	601a      	str	r2, [r3, #0]
    dest1[1] = (float)gyro_bias[1] / (float)gyrosensitivity;
 80060f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fa fdbf 	bl	8000c7c <__aeabi_i2f>
 80060fe:	4605      	mov	r5, r0
 8006100:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006104:	4618      	mov	r0, r3
 8006106:	f7fa fdb5 	bl	8000c74 <__aeabi_ui2f>
 800610a:	4602      	mov	r2, r0
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	1d1c      	adds	r4, r3, #4
 8006110:	4611      	mov	r1, r2
 8006112:	4628      	mov	r0, r5
 8006114:	f7fa feba 	bl	8000e8c <__aeabi_fdiv>
 8006118:	4603      	mov	r3, r0
 800611a:	6023      	str	r3, [r4, #0]
    dest1[2] = (float)gyro_bias[2] / (float)gyrosensitivity;
 800611c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611e:	4618      	mov	r0, r3
 8006120:	f7fa fdac 	bl	8000c7c <__aeabi_i2f>
 8006124:	4605      	mov	r5, r0
 8006126:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800612a:	4618      	mov	r0, r3
 800612c:	f7fa fda2 	bl	8000c74 <__aeabi_ui2f>
 8006130:	4602      	mov	r2, r0
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f103 0408 	add.w	r4, r3, #8
 8006138:	4611      	mov	r1, r2
 800613a:	4628      	mov	r0, r5
 800613c:	f7fa fea6 	bl	8000e8c <__aeabi_fdiv>
 8006140:	4603      	mov	r3, r0
 8006142:	6023      	str	r3, [r4, #0]

    // Construct the accelerometer biases for push to the hardware accelerometer bias registers.
    int32_t accel_bias_reg[3] = {0, 0, 0};                                                  // A place to hold the factory accelerometer trim biases
 8006144:	2300      	movs	r3, #0
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
 8006148:	2300      	movs	r3, #0
 800614a:	62bb      	str	r3, [r7, #40]	; 0x28
 800614c:	2300      	movs	r3, #0
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); // Read factory accelerometer trim values
 8006150:	2364      	movs	r3, #100	; 0x64
 8006152:	9302      	str	r3, [sp, #8]
 8006154:	2302      	movs	r3, #2
 8006156:	9301      	str	r3, [sp, #4]
 8006158:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	2301      	movs	r3, #1
 8006160:	2277      	movs	r2, #119	; 0x77
 8006162:	21d0      	movs	r1, #208	; 0xd0
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7fb fd61 	bl	8001c2c <HAL_I2C_Mem_Read>
    accel_bias_reg[0] = (int32_t)(((int16_t)calibData[0] << 8) | calibData[1]);
 800616a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8006174:	4313      	orrs	r3, r2
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8006178:	2364      	movs	r3, #100	; 0x64
 800617a:	9302      	str	r3, [sp, #8]
 800617c:	2302      	movs	r3, #2
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	2301      	movs	r3, #1
 8006188:	227a      	movs	r2, #122	; 0x7a
 800618a:	21d0      	movs	r1, #208	; 0xd0
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7fb fd4d 	bl	8001c2c <HAL_I2C_Mem_Read>
    accel_bias_reg[1] = (int32_t)(((int16_t)calibData[0] << 8) | calibData[1]);
 8006192:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800619c:	4313      	orrs	r3, r2
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 80061a0:	2364      	movs	r3, #100	; 0x64
 80061a2:	9302      	str	r3, [sp, #8]
 80061a4:	2302      	movs	r3, #2
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	2301      	movs	r3, #1
 80061b0:	227d      	movs	r2, #125	; 0x7d
 80061b2:	21d0      	movs	r1, #208	; 0xd0
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7fb fd39 	bl	8001c2c <HAL_I2C_Mem_Read>
    accel_bias_reg[2] = (int32_t)(((int16_t)calibData[0] << 8) | calibData[1]);
 80061ba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80061c4:	4313      	orrs	r3, r2
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
    uint32_t mask = 1uL;
 80061c8:	2301      	movs	r3, #1
 80061ca:	65bb      	str	r3, [r7, #88]	; 0x58
    // Define array to hold mask bit for each accelerometer bias axis
    uint8_t mask_bit[3] = {0, 0, 0};
 80061cc:	4a8d      	ldr	r2, [pc, #564]	; (8006404 <calibrateMPU9250+0x868>)
 80061ce:	f107 0320 	add.w	r3, r7, #32
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	4611      	mov	r1, r2
 80061d6:	8019      	strh	r1, [r3, #0]
 80061d8:	3302      	adds	r3, #2
 80061da:	0c12      	lsrs	r2, r2, #16
 80061dc:	701a      	strb	r2, [r3, #0]

    for (ii = 0; ii < 3; ii++)
 80061de:	2300      	movs	r3, #0
 80061e0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80061e4:	e017      	b.n	8006216 <calibrateMPU9250+0x67a>
    {
        // If temperature compensation bit is set, record that fact in mask_bit
        if ((accel_bias_reg[ii] & mask))
 80061e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	3368      	adds	r3, #104	; 0x68
 80061ee:	443b      	add	r3, r7
 80061f0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d006      	beq.n	800620c <calibrateMPU9250+0x670>
            mask_bit[ii] = 0x01;
 80061fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006202:	3368      	adds	r3, #104	; 0x68
 8006204:	443b      	add	r3, r7
 8006206:	2201      	movs	r2, #1
 8006208:	f803 2c48 	strb.w	r2, [r3, #-72]
    for (ii = 0; ii < 3; ii++)
 800620c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006210:	3301      	adds	r3, #1
 8006212:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006216:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800621a:	2b02      	cmp	r3, #2
 800621c:	d9e3      	bls.n	80061e6 <calibrateMPU9250+0x64a>
    }

    // Construct total accelerometer bias, including calculated average accelerometer bias from above
    accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800621e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	2b00      	cmp	r3, #0
 8006224:	da00      	bge.n	8006228 <calibrateMPU9250+0x68c>
 8006226:	3307      	adds	r3, #7
 8006228:	10db      	asrs	r3, r3, #3
 800622a:	425b      	negs	r3, r3
 800622c:	4413      	add	r3, r2
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias_reg[1] -= (accel_bias[1] / 8);
 8006230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	2b00      	cmp	r3, #0
 8006236:	da00      	bge.n	800623a <calibrateMPU9250+0x69e>
 8006238:	3307      	adds	r3, #7
 800623a:	10db      	asrs	r3, r3, #3
 800623c:	425b      	negs	r3, r3
 800623e:	4413      	add	r3, r2
 8006240:	62bb      	str	r3, [r7, #40]	; 0x28
    accel_bias_reg[2] -= (accel_bias[2] / 8);
 8006242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	da00      	bge.n	800624c <calibrateMPU9250+0x6b0>
 800624a:	3307      	adds	r3, #7
 800624c:	10db      	asrs	r3, r3, #3
 800624e:	425b      	negs	r3, r3
 8006250:	4413      	add	r3, r2
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c

    calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	121b      	asrs	r3, r3, #8
 8006258:	b2db      	uxtb	r3, r3
 800625a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    calibData[1] = (accel_bias_reg[0]) & 0xFF;
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8006266:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800626a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800626e:	4313      	orrs	r3, r2
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	121b      	asrs	r3, r3, #8
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    calibData[3] = (accel_bias_reg[1]) & 0xFF;
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8006288:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800628c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006290:	4313      	orrs	r3, r2
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	121b      	asrs	r3, r3, #8
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    calibData[5] = (accel_bias_reg[2]) & 0xFF;
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80062aa:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80062ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80062b2:	4313      	orrs	r3, r2
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    // Push accelerometer biases to hardware registers
    writeData = calibData[0];
 80062ba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80062be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80062c2:	2364      	movs	r3, #100	; 0x64
 80062c4:	9302      	str	r3, [sp, #8]
 80062c6:	2301      	movs	r3, #1
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2301      	movs	r3, #1
 80062d2:	2277      	movs	r2, #119	; 0x77
 80062d4:	21d0      	movs	r1, #208	; 0xd0
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7fb fbae 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = calibData[1];
 80062dc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80062e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80062e4:	2364      	movs	r3, #100	; 0x64
 80062e6:	9302      	str	r3, [sp, #8]
 80062e8:	2301      	movs	r3, #1
 80062ea:	9301      	str	r3, [sp, #4]
 80062ec:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	2301      	movs	r3, #1
 80062f4:	2278      	movs	r2, #120	; 0x78
 80062f6:	21d0      	movs	r1, #208	; 0xd0
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7fb fb9d 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = calibData[2];
 80062fe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006302:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8006306:	2364      	movs	r3, #100	; 0x64
 8006308:	9302      	str	r3, [sp, #8]
 800630a:	2301      	movs	r3, #1
 800630c:	9301      	str	r3, [sp, #4]
 800630e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2301      	movs	r3, #1
 8006316:	227a      	movs	r2, #122	; 0x7a
 8006318:	21d0      	movs	r1, #208	; 0xd0
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7fb fb8c 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = calibData[3];
 8006320:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006324:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8006328:	2364      	movs	r3, #100	; 0x64
 800632a:	9302      	str	r3, [sp, #8]
 800632c:	2301      	movs	r3, #1
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2301      	movs	r3, #1
 8006338:	227b      	movs	r2, #123	; 0x7b
 800633a:	21d0      	movs	r1, #208	; 0xd0
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7fb fb7b 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = calibData[4];
 8006342:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800634a:	2364      	movs	r3, #100	; 0x64
 800634c:	9302      	str	r3, [sp, #8]
 800634e:	2301      	movs	r3, #1
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	2301      	movs	r3, #1
 800635a:	227d      	movs	r2, #125	; 0x7d
 800635c:	21d0      	movs	r1, #208	; 0xd0
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7fb fb6a 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = calibData[5];
 8006364:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800636c:	2364      	movs	r3, #100	; 0x64
 800636e:	9302      	str	r3, [sp, #8]
 8006370:	2301      	movs	r3, #1
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	2301      	movs	r3, #1
 800637c:	227e      	movs	r2, #126	; 0x7e
 800637e:	21d0      	movs	r1, #208	; 0xd0
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f7fb fb59 	bl	8001a38 <HAL_I2C_Mem_Write>

    // Output scaled gyro biases for display in the main program
    dest2[0] = (float)accel_bias[0] / (float)accelsensitivity;
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	4618      	mov	r0, r3
 800638a:	f7fa fc77 	bl	8000c7c <__aeabi_i2f>
 800638e:	4604      	mov	r4, r0
 8006390:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006394:	4618      	mov	r0, r3
 8006396:	f7fa fc6d 	bl	8000c74 <__aeabi_ui2f>
 800639a:	4603      	mov	r3, r0
 800639c:	4619      	mov	r1, r3
 800639e:	4620      	mov	r0, r4
 80063a0:	f7fa fd74 	bl	8000e8c <__aeabi_fdiv>
 80063a4:	4603      	mov	r3, r0
 80063a6:	461a      	mov	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	601a      	str	r2, [r3, #0]
    dest2[1] = (float)accel_bias[1] / (float)accelsensitivity;
 80063ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fa fc64 	bl	8000c7c <__aeabi_i2f>
 80063b4:	4605      	mov	r5, r0
 80063b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fa fc5a 	bl	8000c74 <__aeabi_ui2f>
 80063c0:	4602      	mov	r2, r0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	1d1c      	adds	r4, r3, #4
 80063c6:	4611      	mov	r1, r2
 80063c8:	4628      	mov	r0, r5
 80063ca:	f7fa fd5f 	bl	8000e8c <__aeabi_fdiv>
 80063ce:	4603      	mov	r3, r0
 80063d0:	6023      	str	r3, [r4, #0]
    dest2[2] = (float)accel_bias[2] / (float)accelsensitivity;
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fa fc51 	bl	8000c7c <__aeabi_i2f>
 80063da:	4605      	mov	r5, r0
 80063dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fa fc47 	bl	8000c74 <__aeabi_ui2f>
 80063e6:	4602      	mov	r2, r0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f103 0408 	add.w	r4, r3, #8
 80063ee:	4611      	mov	r1, r2
 80063f0:	4628      	mov	r0, r5
 80063f2:	f7fa fd4b 	bl	8000e8c <__aeabi_fdiv>
 80063f6:	4603      	mov	r3, r0
 80063f8:	6023      	str	r3, [r4, #0]
}
 80063fa:	bf00      	nop
 80063fc:	3768      	adds	r7, #104	; 0x68
 80063fe:	46bd      	mov	sp, r7
 8006400:	bdb0      	pop	{r4, r5, r7, pc}
 8006402:	bf00      	nop
 8006404:	0800b7f0 	.word	0x0800b7f0

08006408 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float *destination)
{
 8006408:	b5b0      	push	{r4, r5, r7, lr}
 800640a:	b0a8      	sub	sp, #160	; 0xa0
 800640c:	af04      	add	r7, sp, #16
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
    uint8_t writeData;

    uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 8006412:	4aa2      	ldr	r2, [pc, #648]	; (800669c <MPU9250SelfTest+0x294>)
 8006414:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006418:	e892 0003 	ldmia.w	r2, {r0, r1}
 800641c:	6018      	str	r0, [r3, #0]
 800641e:	3304      	adds	r3, #4
 8006420:	8019      	strh	r1, [r3, #0]
    uint8_t selfTest[6];
    int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8006422:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	605a      	str	r2, [r3, #4]
 800642c:	609a      	str	r2, [r3, #8]
 800642e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	605a      	str	r2, [r3, #4]
 8006438:	609a      	str	r2, [r3, #8]
 800643a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	605a      	str	r2, [r3, #4]
 8006444:	609a      	str	r2, [r3, #8]
 8006446:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	605a      	str	r2, [r3, #4]
 8006450:	609a      	str	r2, [r3, #8]
    float factoryTrim[6];
    uint8_t FS = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    writeData = 0x00;
 8006458:	2300      	movs	r3, #0
 800645a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout); // Set gyro sample rate to 1 kHz
 800645e:	2364      	movs	r3, #100	; 0x64
 8006460:	9302      	str	r3, [sp, #8]
 8006462:	2301      	movs	r3, #1
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	2301      	movs	r3, #1
 800646e:	2219      	movs	r2, #25
 8006470:	21d0      	movs	r1, #208	; 0xd0
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fb fae0 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x02;
 8006478:	2302      	movs	r3, #2
 800647a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800647e:	2364      	movs	r3, #100	; 0x64
 8006480:	9302      	str	r3, [sp, #8]
 8006482:	2301      	movs	r3, #1
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	2301      	movs	r3, #1
 800648e:	221a      	movs	r2, #26
 8006490:	21d0      	movs	r1, #208	; 0xd0
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fb fad0 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = FS << 3;
 8006498:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout); // Set full scale range for the gyro to 250 dps
 80064a4:	2364      	movs	r3, #100	; 0x64
 80064a6:	9302      	str	r3, [sp, #8]
 80064a8:	2301      	movs	r3, #1
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	2301      	movs	r3, #1
 80064b4:	221b      	movs	r2, #27
 80064b6:	21d0      	movs	r1, #208	; 0xd0
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7fb fabd 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x02;
 80064be:	2302      	movs	r3, #2
 80064c0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80064c4:	2364      	movs	r3, #100	; 0x64
 80064c6:	9302      	str	r3, [sp, #8]
 80064c8:	2301      	movs	r3, #1
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	2301      	movs	r3, #1
 80064d4:	221d      	movs	r2, #29
 80064d6:	21d0      	movs	r1, #208	; 0xd0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7fb faad 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = FS << 3;
 80064de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout); // Set full scale range for the accelerometer to 2 g
 80064ea:	2364      	movs	r3, #100	; 0x64
 80064ec:	9302      	str	r3, [sp, #8]
 80064ee:	2301      	movs	r3, #1
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	2301      	movs	r3, #1
 80064fa:	221c      	movs	r2, #28
 80064fc:	21d0      	movs	r1, #208	; 0xd0
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fb fa9a 	bl	8001a38 <HAL_I2C_Mem_Write>

    // get average current values of gyro and acclerometer
    for (int ii = 0; ii < 200; ii++)
 8006504:	2300      	movs	r3, #0
 8006506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800650a:	e066      	b.n	80065da <MPU9250SelfTest+0x1d2>
    {

        HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 800650c:	2364      	movs	r3, #100	; 0x64
 800650e:	9302      	str	r3, [sp, #8]
 8006510:	2306      	movs	r3, #6
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	2301      	movs	r3, #1
 800651c:	223b      	movs	r2, #59	; 0x3b
 800651e:	21d0      	movs	r1, #208	; 0xd0
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7fb fb83 	bl	8001c2c <HAL_I2C_Mem_Read>
        aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]);                     // Turn the MSB and LSB into a signed 16-bit value
 8006526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006528:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800652c:	0212      	lsls	r2, r2, #8
 800652e:	b211      	sxth	r1, r2
 8006530:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8006534:	b212      	sxth	r2, r2
 8006536:	430a      	orrs	r2, r1
 8006538:	b212      	sxth	r2, r2
 800653a:	4413      	add	r3, r2
 800653c:	653b      	str	r3, [r7, #80]	; 0x50
        aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]);
 800653e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006540:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8006544:	0212      	lsls	r2, r2, #8
 8006546:	b211      	sxth	r1, r2
 8006548:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800654c:	b212      	sxth	r2, r2
 800654e:	430a      	orrs	r2, r1
 8006550:	b212      	sxth	r2, r2
 8006552:	4413      	add	r3, r2
 8006554:	657b      	str	r3, [r7, #84]	; 0x54
        aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]);
 8006556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006558:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800655c:	0212      	lsls	r2, r2, #8
 800655e:	b211      	sxth	r1, r2
 8006560:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8006564:	b212      	sxth	r2, r2
 8006566:	430a      	orrs	r2, r1
 8006568:	b212      	sxth	r2, r2
 800656a:	4413      	add	r3, r2
 800656c:	65bb      	str	r3, [r7, #88]	; 0x58

        HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout); // Read the six raw data registers sequentially into data array
 800656e:	2364      	movs	r3, #100	; 0x64
 8006570:	9302      	str	r3, [sp, #8]
 8006572:	2306      	movs	r3, #6
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	2301      	movs	r3, #1
 800657e:	2243      	movs	r2, #67	; 0x43
 8006580:	21d0      	movs	r1, #208	; 0xd0
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fb fb52 	bl	8001c2c <HAL_I2C_Mem_Read>
        gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]);                    // Turn the MSB and LSB into a signed 16-bit value
 8006588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800658a:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800658e:	0212      	lsls	r2, r2, #8
 8006590:	b211      	sxth	r1, r2
 8006592:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8006596:	b212      	sxth	r2, r2
 8006598:	430a      	orrs	r2, r1
 800659a:	b212      	sxth	r2, r2
 800659c:	4413      	add	r3, r2
 800659e:	65fb      	str	r3, [r7, #92]	; 0x5c
        gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]);
 80065a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065a2:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80065a6:	0212      	lsls	r2, r2, #8
 80065a8:	b211      	sxth	r1, r2
 80065aa:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80065ae:	b212      	sxth	r2, r2
 80065b0:	430a      	orrs	r2, r1
 80065b2:	b212      	sxth	r2, r2
 80065b4:	4413      	add	r3, r2
 80065b6:	663b      	str	r3, [r7, #96]	; 0x60
        gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]);
 80065b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ba:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80065be:	0212      	lsls	r2, r2, #8
 80065c0:	b211      	sxth	r1, r2
 80065c2:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80065c6:	b212      	sxth	r2, r2
 80065c8:	430a      	orrs	r2, r1
 80065ca:	b212      	sxth	r2, r2
 80065cc:	4413      	add	r3, r2
 80065ce:	667b      	str	r3, [r7, #100]	; 0x64
    for (int ii = 0; ii < 200; ii++)
 80065d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065d4:	3301      	adds	r3, #1
 80065d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80065da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065de:	2bc7      	cmp	r3, #199	; 0xc7
 80065e0:	dd94      	ble.n	800650c <MPU9250SelfTest+0x104>
    }

    // Get average of 200 values and store as average current readings
    for (int ii = 0; ii < 3; ii++)
 80065e2:	2300      	movs	r3, #0
 80065e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065e8:	e02c      	b.n	8006644 <MPU9250SelfTest+0x23c>
    {
        aAvg[ii] /= 200;
 80065ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	3390      	adds	r3, #144	; 0x90
 80065f2:	443b      	add	r3, r7
 80065f4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80065f8:	4a29      	ldr	r2, [pc, #164]	; (80066a0 <MPU9250SelfTest+0x298>)
 80065fa:	fb82 1203 	smull	r1, r2, r2, r3
 80065fe:	1192      	asrs	r2, r2, #6
 8006600:	17db      	asrs	r3, r3, #31
 8006602:	1ad2      	subs	r2, r2, r3
 8006604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	3390      	adds	r3, #144	; 0x90
 800660c:	443b      	add	r3, r7
 800660e:	f843 2c40 	str.w	r2, [r3, #-64]
        gAvg[ii] /= 200;
 8006612:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	3390      	adds	r3, #144	; 0x90
 800661a:	443b      	add	r3, r7
 800661c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8006620:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <MPU9250SelfTest+0x298>)
 8006622:	fb82 1203 	smull	r1, r2, r2, r3
 8006626:	1192      	asrs	r2, r2, #6
 8006628:	17db      	asrs	r3, r3, #31
 800662a:	1ad2      	subs	r2, r2, r3
 800662c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	3390      	adds	r3, #144	; 0x90
 8006634:	443b      	add	r3, r7
 8006636:	f843 2c34 	str.w	r2, [r3, #-52]
    for (int ii = 0; ii < 3; ii++)
 800663a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800663e:	3301      	adds	r3, #1
 8006640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006648:	2b02      	cmp	r3, #2
 800664a:	ddce      	ble.n	80065ea <MPU9250SelfTest+0x1e2>
    }

    // Configure the accelerometer for self-test
    writeData = 0xE0;
 800664c:	23e0      	movs	r3, #224	; 0xe0
 800664e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8006652:	2364      	movs	r3, #100	; 0x64
 8006654:	9302      	str	r3, [sp, #8]
 8006656:	2301      	movs	r3, #1
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2301      	movs	r3, #1
 8006662:	221c      	movs	r2, #28
 8006664:	21d0      	movs	r1, #208	; 0xd0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fb f9e6 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0xE0;
 800666c:	23e0      	movs	r3, #224	; 0xe0
 800666e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8006672:	2364      	movs	r3, #100	; 0x64
 8006674:	9302      	str	r3, [sp, #8]
 8006676:	2301      	movs	r3, #1
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	2301      	movs	r3, #1
 8006682:	221b      	movs	r2, #27
 8006684:	21d0      	movs	r1, #208	; 0xd0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fb f9d6 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(25);                                                                        // Delay a while to let the device stabilize
 800668c:	2019      	movs	r0, #25
 800668e:	f7fa fda7 	bl	80011e0 <HAL_Delay>

    // get average self-test values of gyro and acclerometer
    for (int ii = 0; ii < 200; ii++)
 8006692:	2300      	movs	r3, #0
 8006694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006698:	e06b      	b.n	8006772 <MPU9250SelfTest+0x36a>
 800669a:	bf00      	nop
 800669c:	0800b7f4 	.word	0x0800b7f4
 80066a0:	51eb851f 	.word	0x51eb851f
    {

        HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 80066a4:	2364      	movs	r3, #100	; 0x64
 80066a6:	9302      	str	r3, [sp, #8]
 80066a8:	2306      	movs	r3, #6
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	2301      	movs	r3, #1
 80066b4:	223b      	movs	r2, #59	; 0x3b
 80066b6:	21d0      	movs	r1, #208	; 0xd0
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fb fab7 	bl	8001c2c <HAL_I2C_Mem_Read>
        aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]);                   // Turn the MSB and LSB into a signed 16-bit value
 80066be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c0:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80066c4:	0212      	lsls	r2, r2, #8
 80066c6:	b211      	sxth	r1, r2
 80066c8:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80066cc:	b212      	sxth	r2, r2
 80066ce:	430a      	orrs	r2, r1
 80066d0:	b212      	sxth	r2, r2
 80066d2:	4413      	add	r3, r2
 80066d4:	647b      	str	r3, [r7, #68]	; 0x44
        aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]);
 80066d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d8:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80066dc:	0212      	lsls	r2, r2, #8
 80066de:	b211      	sxth	r1, r2
 80066e0:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80066e4:	b212      	sxth	r2, r2
 80066e6:	430a      	orrs	r2, r1
 80066e8:	b212      	sxth	r2, r2
 80066ea:	4413      	add	r3, r2
 80066ec:	64bb      	str	r3, [r7, #72]	; 0x48
        aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]);
 80066ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f0:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80066f4:	0212      	lsls	r2, r2, #8
 80066f6:	b211      	sxth	r1, r2
 80066f8:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80066fc:	b212      	sxth	r2, r2
 80066fe:	430a      	orrs	r2, r1
 8006700:	b212      	sxth	r2, r2
 8006702:	4413      	add	r3, r2
 8006704:	64fb      	str	r3, [r7, #76]	; 0x4c

        HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout); // Read the six raw data registers sequentially into data array
 8006706:	2364      	movs	r3, #100	; 0x64
 8006708:	9302      	str	r3, [sp, #8]
 800670a:	2306      	movs	r3, #6
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	2301      	movs	r3, #1
 8006716:	2243      	movs	r2, #67	; 0x43
 8006718:	21d0      	movs	r1, #208	; 0xd0
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fb fa86 	bl	8001c2c <HAL_I2C_Mem_Read>
        gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]);                  // Turn the MSB and LSB into a signed 16-bit value
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8006726:	0212      	lsls	r2, r2, #8
 8006728:	b211      	sxth	r1, r2
 800672a:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800672e:	b212      	sxth	r2, r2
 8006730:	430a      	orrs	r2, r1
 8006732:	b212      	sxth	r2, r2
 8006734:	4413      	add	r3, r2
 8006736:	63bb      	str	r3, [r7, #56]	; 0x38
        gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]);
 8006738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800673e:	0212      	lsls	r2, r2, #8
 8006740:	b211      	sxth	r1, r2
 8006742:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8006746:	b212      	sxth	r2, r2
 8006748:	430a      	orrs	r2, r1
 800674a:	b212      	sxth	r2, r2
 800674c:	4413      	add	r3, r2
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
        gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]);
 8006750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006752:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8006756:	0212      	lsls	r2, r2, #8
 8006758:	b211      	sxth	r1, r2
 800675a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800675e:	b212      	sxth	r2, r2
 8006760:	430a      	orrs	r2, r1
 8006762:	b212      	sxth	r2, r2
 8006764:	4413      	add	r3, r2
 8006766:	643b      	str	r3, [r7, #64]	; 0x40
    for (int ii = 0; ii < 200; ii++)
 8006768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800676c:	3301      	adds	r3, #1
 800676e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006772:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006776:	2bc7      	cmp	r3, #199	; 0xc7
 8006778:	dd94      	ble.n	80066a4 <MPU9250SelfTest+0x29c>
    }

    // Get average of 200 values and store as average self-test readings
    for (int ii = 0; ii < 3; ii++)
 800677a:	2300      	movs	r3, #0
 800677c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006780:	e02c      	b.n	80067dc <MPU9250SelfTest+0x3d4>
    {
        aSTAvg[ii] /= 200;
 8006782:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	3390      	adds	r3, #144	; 0x90
 800678a:	443b      	add	r3, r7
 800678c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006790:	4ad7      	ldr	r2, [pc, #860]	; (8006af0 <MPU9250SelfTest+0x6e8>)
 8006792:	fb82 1203 	smull	r1, r2, r2, r3
 8006796:	1192      	asrs	r2, r2, #6
 8006798:	17db      	asrs	r3, r3, #31
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	3390      	adds	r3, #144	; 0x90
 80067a4:	443b      	add	r3, r7
 80067a6:	f843 2c4c 	str.w	r2, [r3, #-76]
        gSTAvg[ii] /= 200;
 80067aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	3390      	adds	r3, #144	; 0x90
 80067b2:	443b      	add	r3, r7
 80067b4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80067b8:	4acd      	ldr	r2, [pc, #820]	; (8006af0 <MPU9250SelfTest+0x6e8>)
 80067ba:	fb82 1203 	smull	r1, r2, r2, r3
 80067be:	1192      	asrs	r2, r2, #6
 80067c0:	17db      	asrs	r3, r3, #31
 80067c2:	1ad2      	subs	r2, r2, r3
 80067c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	3390      	adds	r3, #144	; 0x90
 80067cc:	443b      	add	r3, r7
 80067ce:	f843 2c58 	str.w	r2, [r3, #-88]
    for (int ii = 0; ii < 3; ii++)
 80067d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067d6:	3301      	adds	r3, #1
 80067d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	ddce      	ble.n	8006782 <MPU9250SelfTest+0x37a>
    }

    // Configure the gyro and accelerometer for normal operation
    writeData = 0x00;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 80067ea:	2364      	movs	r3, #100	; 0x64
 80067ec:	9302      	str	r3, [sp, #8]
 80067ee:	2301      	movs	r3, #1
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	2301      	movs	r3, #1
 80067fa:	221c      	movs	r2, #28
 80067fc:	21d0      	movs	r1, #208	; 0xd0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fb f91a 	bl	8001a38 <HAL_I2C_Mem_Write>
    writeData = 0x00;
 8006804:	2300      	movs	r3, #0
 8006806:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 800680a:	2364      	movs	r3, #100	; 0x64
 800680c:	9302      	str	r3, [sp, #8]
 800680e:	2301      	movs	r3, #1
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	2301      	movs	r3, #1
 800681a:	221b      	movs	r2, #27
 800681c:	21d0      	movs	r1, #208	; 0xd0
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fb f90a 	bl	8001a38 <HAL_I2C_Mem_Write>
    HAL_Delay(25); // Delay a while to let the device stabilize
 8006824:	2019      	movs	r0, #25
 8006826:	f7fa fcdb 	bl	80011e0 <HAL_Delay>

    // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout); // X-axis accel self-test results
 800682a:	2364      	movs	r3, #100	; 0x64
 800682c:	9302      	str	r3, [sp, #8]
 800682e:	2301      	movs	r3, #1
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2301      	movs	r3, #1
 800683a:	220d      	movs	r2, #13
 800683c:	21d0      	movs	r1, #208	; 0xd0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fb f9f4 	bl	8001c2c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout); // Y-axis accel self-test results
 8006844:	2364      	movs	r3, #100	; 0x64
 8006846:	9302      	str	r3, [sp, #8]
 8006848:	2301      	movs	r3, #1
 800684a:	9301      	str	r3, [sp, #4]
 800684c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006850:	3301      	adds	r3, #1
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	2301      	movs	r3, #1
 8006856:	220e      	movs	r2, #14
 8006858:	21d0      	movs	r1, #208	; 0xd0
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fb f9e6 	bl	8001c2c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout); // Z-axis accel self-test results
 8006860:	2364      	movs	r3, #100	; 0x64
 8006862:	9302      	str	r3, [sp, #8]
 8006864:	2301      	movs	r3, #1
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800686c:	3302      	adds	r3, #2
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	2301      	movs	r3, #1
 8006872:	220f      	movs	r2, #15
 8006874:	21d0      	movs	r1, #208	; 0xd0
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fb f9d8 	bl	8001c2c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);  // X-axis gyro self-test results
 800687c:	2364      	movs	r3, #100	; 0x64
 800687e:	9302      	str	r3, [sp, #8]
 8006880:	2301      	movs	r3, #1
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006888:	3303      	adds	r3, #3
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	2301      	movs	r3, #1
 800688e:	2200      	movs	r2, #0
 8006890:	21d0      	movs	r1, #208	; 0xd0
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fb f9ca 	bl	8001c2c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);  // Y-axis gyro self-test results
 8006898:	2364      	movs	r3, #100	; 0x64
 800689a:	9302      	str	r3, [sp, #8]
 800689c:	2301      	movs	r3, #1
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80068a4:	3304      	adds	r3, #4
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	2301      	movs	r3, #1
 80068aa:	2201      	movs	r2, #1
 80068ac:	21d0      	movs	r1, #208	; 0xd0
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fb f9bc 	bl	8001c2c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);  // Z-axis gyro self-test results
 80068b4:	2364      	movs	r3, #100	; 0x64
 80068b6:	9302      	str	r3, [sp, #8]
 80068b8:	2301      	movs	r3, #1
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80068c0:	3305      	adds	r3, #5
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	2301      	movs	r3, #1
 80068c6:	2202      	movs	r2, #2
 80068c8:	21d0      	movs	r1, #208	; 0xd0
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fb f9ae 	bl	8001c2c <HAL_I2C_Mem_Read>

    // Retrieve factory self-test value from self-test code reads
    factoryTrim[0] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 80068d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80068d4:	f640 223c 	movw	r2, #2620	; 0xa3c
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fa f9cd 	bl	8000c7c <__aeabi_i2f>
 80068e2:	4603      	mov	r3, r0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7f9 fd97 	bl	8000418 <__aeabi_f2d>
 80068ea:	4604      	mov	r4, r0
 80068ec:	460d      	mov	r5, r1
 80068ee:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fa f9be 	bl	8000c74 <__aeabi_ui2f>
 80068f8:	4603      	mov	r3, r0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7f9 fd8c 	bl	8000418 <__aeabi_f2d>
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	4b7b      	ldr	r3, [pc, #492]	; (8006af4 <MPU9250SelfTest+0x6ec>)
 8006906:	f7f9 fc27 	bl	8000158 <__aeabi_dsub>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	a176      	add	r1, pc, #472	; (adr r1, 8006ae8 <MPU9250SelfTest+0x6e0>)
 8006910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006914:	f003 fcfe 	bl	800a314 <pow>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4620      	mov	r0, r4
 800691e:	4629      	mov	r1, r5
 8006920:	f7f9 fdd2 	bl	80004c8 <__aeabi_dmul>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4610      	mov	r0, r2
 800692a:	4619      	mov	r1, r3
 800692c:	f7fa f89c 	bl	8000a68 <__aeabi_d2f>
 8006930:	4603      	mov	r3, r0
 8006932:	623b      	str	r3, [r7, #32]
    factoryTrim[1] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8006934:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006938:	f640 223c 	movw	r2, #2620	; 0xa3c
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	4618      	mov	r0, r3
 8006942:	f7fa f99b 	bl	8000c7c <__aeabi_i2f>
 8006946:	4603      	mov	r3, r0
 8006948:	4618      	mov	r0, r3
 800694a:	f7f9 fd65 	bl	8000418 <__aeabi_f2d>
 800694e:	4604      	mov	r4, r0
 8006950:	460d      	mov	r5, r1
 8006952:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8006956:	4618      	mov	r0, r3
 8006958:	f7fa f98c 	bl	8000c74 <__aeabi_ui2f>
 800695c:	4603      	mov	r3, r0
 800695e:	4618      	mov	r0, r3
 8006960:	f7f9 fd5a 	bl	8000418 <__aeabi_f2d>
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	4b62      	ldr	r3, [pc, #392]	; (8006af4 <MPU9250SelfTest+0x6ec>)
 800696a:	f7f9 fbf5 	bl	8000158 <__aeabi_dsub>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	a15d      	add	r1, pc, #372	; (adr r1, 8006ae8 <MPU9250SelfTest+0x6e0>)
 8006974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006978:	f003 fccc 	bl	800a314 <pow>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4620      	mov	r0, r4
 8006982:	4629      	mov	r1, r5
 8006984:	f7f9 fda0 	bl	80004c8 <__aeabi_dmul>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4610      	mov	r0, r2
 800698e:	4619      	mov	r1, r3
 8006990:	f7fa f86a 	bl	8000a68 <__aeabi_d2f>
 8006994:	4603      	mov	r3, r0
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
    factoryTrim[2] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 8006998:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800699c:	f640 223c 	movw	r2, #2620	; 0xa3c
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fa f969 	bl	8000c7c <__aeabi_i2f>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7f9 fd33 	bl	8000418 <__aeabi_f2d>
 80069b2:	4604      	mov	r4, r0
 80069b4:	460d      	mov	r5, r1
 80069b6:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fa f95a 	bl	8000c74 <__aeabi_ui2f>
 80069c0:	4603      	mov	r3, r0
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7f9 fd28 	bl	8000418 <__aeabi_f2d>
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	4b49      	ldr	r3, [pc, #292]	; (8006af4 <MPU9250SelfTest+0x6ec>)
 80069ce:	f7f9 fbc3 	bl	8000158 <__aeabi_dsub>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	a144      	add	r1, pc, #272	; (adr r1, 8006ae8 <MPU9250SelfTest+0x6e0>)
 80069d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069dc:	f003 fc9a 	bl	800a314 <pow>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4620      	mov	r0, r4
 80069e6:	4629      	mov	r1, r5
 80069e8:	f7f9 fd6e 	bl	80004c8 <__aeabi_dmul>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	f7fa f838 	bl	8000a68 <__aeabi_d2f>
 80069f8:	4603      	mov	r3, r0
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
    factoryTrim[3] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 80069fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006a00:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fa f937 	bl	8000c7c <__aeabi_i2f>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7f9 fd01 	bl	8000418 <__aeabi_f2d>
 8006a16:	4604      	mov	r4, r0
 8006a18:	460d      	mov	r5, r1
 8006a1a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fa f928 	bl	8000c74 <__aeabi_ui2f>
 8006a24:	4603      	mov	r3, r0
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7f9 fcf6 	bl	8000418 <__aeabi_f2d>
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	4b30      	ldr	r3, [pc, #192]	; (8006af4 <MPU9250SelfTest+0x6ec>)
 8006a32:	f7f9 fb91 	bl	8000158 <__aeabi_dsub>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	a12b      	add	r1, pc, #172	; (adr r1, 8006ae8 <MPU9250SelfTest+0x6e0>)
 8006a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a40:	f003 fc68 	bl	800a314 <pow>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4620      	mov	r0, r4
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	f7f9 fd3c 	bl	80004c8 <__aeabi_dmul>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4610      	mov	r0, r2
 8006a56:	4619      	mov	r1, r3
 8006a58:	f7fa f806 	bl	8000a68 <__aeabi_d2f>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    factoryTrim[4] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8006a60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006a64:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fa f905 	bl	8000c7c <__aeabi_i2f>
 8006a72:	4603      	mov	r3, r0
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7f9 fccf 	bl	8000418 <__aeabi_f2d>
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	460d      	mov	r5, r1
 8006a7e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fa f8f6 	bl	8000c74 <__aeabi_ui2f>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7f9 fcc4 	bl	8000418 <__aeabi_f2d>
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <MPU9250SelfTest+0x6ec>)
 8006a96:	f7f9 fb5f 	bl	8000158 <__aeabi_dsub>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	a112      	add	r1, pc, #72	; (adr r1, 8006ae8 <MPU9250SelfTest+0x6e0>)
 8006aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa4:	f003 fc36 	bl	800a314 <pow>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	f7f9 fd0a 	bl	80004c8 <__aeabi_dmul>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4619      	mov	r1, r3
 8006abc:	f7f9 ffd4 	bl	8000a68 <__aeabi_d2f>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	633b      	str	r3, [r7, #48]	; 0x30
    factoryTrim[5] = (float)(2620 / 1 << FS) * (pow(1.01, ((float)selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8006ac4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006ac8:	f640 223c 	movw	r2, #2620	; 0xa3c
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fa f8d3 	bl	8000c7c <__aeabi_i2f>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7f9 fc9d 	bl	8000418 <__aeabi_f2d>
 8006ade:	4604      	mov	r4, r0
 8006ae0:	e00a      	b.n	8006af8 <MPU9250SelfTest+0x6f0>
 8006ae2:	bf00      	nop
 8006ae4:	f3af 8000 	nop.w
 8006ae8:	c28f5c29 	.word	0xc28f5c29
 8006aec:	3ff028f5 	.word	0x3ff028f5
 8006af0:	51eb851f 	.word	0x51eb851f
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	460d      	mov	r5, r1
 8006afa:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fa f8b8 	bl	8000c74 <__aeabi_ui2f>
 8006b04:	4603      	mov	r3, r0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7f9 fc86 	bl	8000418 <__aeabi_f2d>
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	4b9f      	ldr	r3, [pc, #636]	; (8006d90 <MPU9250SelfTest+0x988>)
 8006b12:	f7f9 fb21 	bl	8000158 <__aeabi_dsub>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	a19b      	add	r1, pc, #620	; (adr r1, 8006d88 <MPU9250SelfTest+0x980>)
 8006b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b20:	f003 fbf8 	bl	800a314 <pow>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4620      	mov	r0, r4
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7f9 fccc 	bl	80004c8 <__aeabi_dmul>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4610      	mov	r0, r2
 8006b36:	4619      	mov	r1, r3
 8006b38:	f7f9 ff96 	bl	8000a68 <__aeabi_d2f>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t testResults[6];

    // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
    // To get percent, must multiply by 100
    for (int i = 0; i < 3; i++)
 8006b40:	2300      	movs	r3, #0
 8006b42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b44:	e088      	b.n	8006c58 <MPU9250SelfTest+0x850>
    {
        testResults[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i] - 100.;         // Report percent differences
 8006b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	3390      	adds	r3, #144	; 0x90
 8006b4c:	443b      	add	r3, r7
 8006b4e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8006b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	3390      	adds	r3, #144	; 0x90
 8006b58:	443b      	add	r3, r7
 8006b5a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fa f88b 	bl	8000c7c <__aeabi_i2f>
 8006b66:	4603      	mov	r3, r0
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7f9 fc55 	bl	8000418 <__aeabi_f2d>
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	4b88      	ldr	r3, [pc, #544]	; (8006d94 <MPU9250SelfTest+0x98c>)
 8006b74:	f7f9 fca8 	bl	80004c8 <__aeabi_dmul>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	461d      	mov	r5, r3
 8006b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	3390      	adds	r3, #144	; 0x90
 8006b86:	443b      	add	r3, r7
 8006b88:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7f9 fc43 	bl	8000418 <__aeabi_f2d>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 fdbf 	bl	800071c <__aeabi_ddiv>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	4b7a      	ldr	r3, [pc, #488]	; (8006d94 <MPU9250SelfTest+0x98c>)
 8006bac:	f7f9 fad4 	bl	8000158 <__aeabi_dsub>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	f7f9 ff36 	bl	8000a28 <__aeabi_d2uiz>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	3390      	adds	r3, #144	; 0x90
 8006bc4:	443b      	add	r3, r7
 8006bc6:	f843 2c88 	str.w	r2, [r3, #-136]
        testResults[i + 3] = 100.0 * ((float)(gSTAvg[i] - gAvg[i])) / factoryTrim[i + 3] - 100.; // Report percent differences
 8006bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	3390      	adds	r3, #144	; 0x90
 8006bd0:	443b      	add	r3, r7
 8006bd2:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8006bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	3390      	adds	r3, #144	; 0x90
 8006bdc:	443b      	add	r3, r7
 8006bde:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fa f849 	bl	8000c7c <__aeabi_i2f>
 8006bea:	4603      	mov	r3, r0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7f9 fc13 	bl	8000418 <__aeabi_f2d>
 8006bf2:	f04f 0200 	mov.w	r2, #0
 8006bf6:	4b67      	ldr	r3, [pc, #412]	; (8006d94 <MPU9250SelfTest+0x98c>)
 8006bf8:	f7f9 fc66 	bl	80004c8 <__aeabi_dmul>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4614      	mov	r4, r2
 8006c02:	461d      	mov	r5, r3
 8006c04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c06:	3303      	adds	r3, #3
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	3390      	adds	r3, #144	; 0x90
 8006c0c:	443b      	add	r3, r7
 8006c0e:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7f9 fc00 	bl	8000418 <__aeabi_f2d>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f7f9 fd7c 	bl	800071c <__aeabi_ddiv>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	4b58      	ldr	r3, [pc, #352]	; (8006d94 <MPU9250SelfTest+0x98c>)
 8006c32:	f7f9 fa91 	bl	8000158 <__aeabi_dsub>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c40:	1cdc      	adds	r4, r3, #3
 8006c42:	f7f9 fef1 	bl	8000a28 <__aeabi_d2uiz>
 8006c46:	4602      	mov	r2, r0
 8006c48:	00a3      	lsls	r3, r4, #2
 8006c4a:	3390      	adds	r3, #144	; 0x90
 8006c4c:	443b      	add	r3, r7
 8006c4e:	f843 2c88 	str.w	r2, [r3, #-136]
    for (int i = 0; i < 3; i++)
 8006c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c54:	3301      	adds	r3, #1
 8006c56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	f77f af73 	ble.w	8006b46 <MPU9250SelfTest+0x73e>
    }

    for (int i = 0; i < 3; i++)
 8006c60:	2300      	movs	r3, #0
 8006c62:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c64:	e086      	b.n	8006d74 <MPU9250SelfTest+0x96c>
    {
        destination[i] = 100.0 * ((float)(aSTAvg[i] - aAvg[i])) / factoryTrim[i] - 100.;         // Report percent differences
 8006c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	3390      	adds	r3, #144	; 0x90
 8006c6c:	443b      	add	r3, r7
 8006c6e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8006c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	3390      	adds	r3, #144	; 0x90
 8006c78:	443b      	add	r3, r7
 8006c7a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7f9 fffb 	bl	8000c7c <__aeabi_i2f>
 8006c86:	4603      	mov	r3, r0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7f9 fbc5 	bl	8000418 <__aeabi_f2d>
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	4b40      	ldr	r3, [pc, #256]	; (8006d94 <MPU9250SelfTest+0x98c>)
 8006c94:	f7f9 fc18 	bl	80004c8 <__aeabi_dmul>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	3390      	adds	r3, #144	; 0x90
 8006ca6:	443b      	add	r3, r7
 8006ca8:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7f9 fbb3 	bl	8000418 <__aeabi_f2d>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7f9 fd2f 	bl	800071c <__aeabi_ddiv>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	4b32      	ldr	r3, [pc, #200]	; (8006d94 <MPU9250SelfTest+0x98c>)
 8006ccc:	f7f9 fa44 	bl	8000158 <__aeabi_dsub>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	18d4      	adds	r4, r2, r3
 8006ce0:	f7f9 fec2 	bl	8000a68 <__aeabi_d2f>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	6023      	str	r3, [r4, #0]
        destination[i + 3] = 100.0 * ((float)(gSTAvg[i] - gAvg[i])) / factoryTrim[i + 3] - 100.; // Report percent differences
 8006ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	3390      	adds	r3, #144	; 0x90
 8006cee:	443b      	add	r3, r7
 8006cf0:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8006cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	3390      	adds	r3, #144	; 0x90
 8006cfa:	443b      	add	r3, r7
 8006cfc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7f9 ffba 	bl	8000c7c <__aeabi_i2f>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7f9 fb84 	bl	8000418 <__aeabi_f2d>
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	4b1f      	ldr	r3, [pc, #124]	; (8006d94 <MPU9250SelfTest+0x98c>)
 8006d16:	f7f9 fbd7 	bl	80004c8 <__aeabi_dmul>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4614      	mov	r4, r2
 8006d20:	461d      	mov	r5, r3
 8006d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d24:	3303      	adds	r3, #3
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	3390      	adds	r3, #144	; 0x90
 8006d2a:	443b      	add	r3, r7
 8006d2c:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7f9 fb71 	bl	8000418 <__aeabi_f2d>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fced 	bl	800071c <__aeabi_ddiv>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4610      	mov	r0, r2
 8006d48:	4619      	mov	r1, r3
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <MPU9250SelfTest+0x98c>)
 8006d50:	f7f9 fa02 	bl	8000158 <__aeabi_dsub>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d5e:	3303      	adds	r3, #3
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	18d4      	adds	r4, r2, r3
 8006d66:	f7f9 fe7f 	bl	8000a68 <__aeabi_d2f>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 3; i++)
 8006d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d70:	3301      	adds	r3, #1
 8006d72:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	f77f af75 	ble.w	8006c66 <MPU9250SelfTest+0x85e>
    }
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	3790      	adds	r7, #144	; 0x90
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bdb0      	pop	{r4, r5, r7, pc}
 8006d86:	bf00      	nop
 8006d88:	c28f5c29 	.word	0xc28f5c29
 8006d8c:	3ff028f5 	.word	0x3ff028f5
 8006d90:	3ff00000 	.word	0x3ff00000
 8006d94:	40590000 	.word	0x40590000

08006d98 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
 8006d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d9a:	b0ad      	sub	sp, #180	; 0xb4
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8006da6:	4b8a      	ldr	r3, [pc, #552]	; (8006fd0 <QuaternionUpdate+0x238>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dae:	4b88      	ldr	r3, [pc, #544]	; (8006fd0 <QuaternionUpdate+0x238>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006db6:	4b86      	ldr	r3, [pc, #536]	; (8006fd0 <QuaternionUpdate+0x238>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006dbe:	4b84      	ldr	r3, [pc, #528]	; (8006fd0 <QuaternionUpdate+0x238>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8006dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7f9 fea1 	bl	8000b14 <__addsf3>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float _2q2 = 2.0f * q2;
 8006dd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7f9 fe98 	bl	8000b14 <__addsf3>
 8006de4:	4603      	mov	r3, r0
 8006de6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float _2q3 = 2.0f * q3;
 8006dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006dee:	4619      	mov	r1, r3
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7f9 fe8f 	bl	8000b14 <__addsf3>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float _2q4 = 2.0f * q4;
 8006dfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e00:	4619      	mov	r1, r3
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7f9 fe86 	bl	8000b14 <__addsf3>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 8006e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e12:	4619      	mov	r1, r3
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7f9 fe7d 	bl	8000b14 <__addsf3>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006e22:	f7f9 ff7f 	bl	8000d24 <__aeabi_fmul>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 8006e2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e30:	4619      	mov	r1, r3
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7f9 fe6e 	bl	8000b14 <__addsf3>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006e40:	f7f9 ff70 	bl	8000d24 <__aeabi_fmul>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 8006e4a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006e4e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006e52:	f7f9 ff67 	bl	8000d24 <__aeabi_fmul>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 8006e5c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006e60:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006e64:	f7f9 ff5e 	bl	8000d24 <__aeabi_fmul>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 8006e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e72:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006e76:	f7f9 ff55 	bl	8000d24 <__aeabi_fmul>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1q4 = q1 * q4;
 8006e7e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006e82:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006e86:	f7f9 ff4d 	bl	8000d24 <__aeabi_fmul>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2q2 = q2 * q2;
 8006e8e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006e92:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006e96:	f7f9 ff45 	bl	8000d24 <__aeabi_fmul>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	677b      	str	r3, [r7, #116]	; 0x74
    float q2q3 = q2 * q3;
 8006e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ea2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006ea6:	f7f9 ff3d 	bl	8000d24 <__aeabi_fmul>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	673b      	str	r3, [r7, #112]	; 0x70
    float q2q4 = q2 * q4;
 8006eae:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006eb2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006eb6:	f7f9 ff35 	bl	8000d24 <__aeabi_fmul>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
    float q3q3 = q3 * q3;
 8006ebe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ec2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006ec6:	f7f9 ff2d 	bl	8000d24 <__aeabi_fmul>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	66bb      	str	r3, [r7, #104]	; 0x68
    float q3q4 = q3 * q4;
 8006ece:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006ed2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006ed6:	f7f9 ff25 	bl	8000d24 <__aeabi_fmul>
 8006eda:	4603      	mov	r3, r0
 8006edc:	667b      	str	r3, [r7, #100]	; 0x64
    float q4q4 = q4 * q4;
 8006ede:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006ee2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006ee6:	f7f9 ff1d 	bl	8000d24 <__aeabi_fmul>
 8006eea:	4603      	mov	r3, r0
 8006eec:	663b      	str	r3, [r7, #96]	; 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 8006eee:	68f9      	ldr	r1, [r7, #12]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7f9 ff17 	bl	8000d24 <__aeabi_fmul>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	461c      	mov	r4, r3
 8006efa:	68b9      	ldr	r1, [r7, #8]
 8006efc:	68b8      	ldr	r0, [r7, #8]
 8006efe:	f7f9 ff11 	bl	8000d24 <__aeabi_fmul>
 8006f02:	4603      	mov	r3, r0
 8006f04:	4619      	mov	r1, r3
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7f9 fe04 	bl	8000b14 <__addsf3>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	461c      	mov	r4, r3
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7f9 ff06 	bl	8000d24 <__aeabi_fmul>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7f9 fdf9 	bl	8000b14 <__addsf3>
 8006f22:	4603      	mov	r3, r0
 8006f24:	4618      	mov	r0, r3
 8006f26:	f003 fa7f 	bl	800a428 <sqrtf>
 8006f2a:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f)
 8006f2c:	f04f 0100 	mov.w	r1, #0
 8006f30:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006f32:	f7fa f88b 	bl	800104c <__aeabi_fcmpeq>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f040 87e3 	bne.w	8007f04 <QuaternionUpdate+0x116c>
        return; // handle NaN
    norm = 1.0f / norm;
 8006f3e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006f40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006f44:	f7f9 ffa2 	bl	8000e8c <__aeabi_fdiv>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    ax *= norm;
 8006f4c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f7f9 fee8 	bl	8000d24 <__aeabi_fmul>
 8006f54:	4603      	mov	r3, r0
 8006f56:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 8006f58:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006f5a:	68b8      	ldr	r0, [r7, #8]
 8006f5c:	f7f9 fee2 	bl	8000d24 <__aeabi_fmul>
 8006f60:	4603      	mov	r3, r0
 8006f62:	60bb      	str	r3, [r7, #8]
    az *= norm;
 8006f64:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7f9 fedc 	bl	8000d24 <__aeabi_fmul>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8006f70:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006f74:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8006f78:	f7f9 fed4 	bl	8000d24 <__aeabi_fmul>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	461c      	mov	r4, r3
 8006f80:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8006f84:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8006f88:	f7f9 fecc 	bl	8000d24 <__aeabi_fmul>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4620      	mov	r0, r4
 8006f92:	f7f9 fdbf 	bl	8000b14 <__addsf3>
 8006f96:	4603      	mov	r3, r0
 8006f98:	461c      	mov	r4, r3
 8006f9a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006f9e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8006fa2:	f7f9 febf 	bl	8000d24 <__aeabi_fmul>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4620      	mov	r0, r4
 8006fac:	f7f9 fdb2 	bl	8000b14 <__addsf3>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f003 fa38 	bl	800a428 <sqrtf>
 8006fb8:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f)
 8006fba:	f04f 0100 	mov.w	r1, #0
 8006fbe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006fc0:	f7fa f844 	bl	800104c <__aeabi_fcmpeq>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f040 879e 	bne.w	8007f08 <QuaternionUpdate+0x1170>
 8006fcc:	e002      	b.n	8006fd4 <QuaternionUpdate+0x23c>
 8006fce:	bf00      	nop
 8006fd0:	20000010 	.word	0x20000010
        return; // handle NaN
    norm = 1.0f / norm;
 8006fd4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006fd6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006fda:	f7f9 ff57 	bl	8000e8c <__aeabi_fdiv>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
    mx *= norm;
 8006fe2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006fe4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8006fe8:	f7f9 fe9c 	bl	8000d24 <__aeabi_fmul>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    my *= norm;
 8006ff2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006ff4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8006ff8:	f7f9 fe94 	bl	8000d24 <__aeabi_fmul>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mz *= norm;
 8007002:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007004:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007008:	f7f9 fe8c 	bl	8000d24 <__aeabi_fmul>
 800700c:	4603      	mov	r3, r0
 800700e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 8007012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007016:	4619      	mov	r1, r3
 8007018:	4618      	mov	r0, r3
 800701a:	f7f9 fd7b 	bl	8000b14 <__addsf3>
 800701e:	4603      	mov	r3, r0
 8007020:	4619      	mov	r1, r3
 8007022:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007026:	f7f9 fe7d 	bl	8000d24 <__aeabi_fmul>
 800702a:	4603      	mov	r3, r0
 800702c:	65bb      	str	r3, [r7, #88]	; 0x58
    _2q1my = 2.0f * q1 * my;
 800702e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007032:	4619      	mov	r1, r3
 8007034:	4618      	mov	r0, r3
 8007036:	f7f9 fd6d 	bl	8000b14 <__addsf3>
 800703a:	4603      	mov	r3, r0
 800703c:	4619      	mov	r1, r3
 800703e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8007042:	f7f9 fe6f 	bl	8000d24 <__aeabi_fmul>
 8007046:	4603      	mov	r3, r0
 8007048:	657b      	str	r3, [r7, #84]	; 0x54
    _2q1mz = 2.0f * q1 * mz;
 800704a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800704e:	4619      	mov	r1, r3
 8007050:	4618      	mov	r0, r3
 8007052:	f7f9 fd5f 	bl	8000b14 <__addsf3>
 8007056:	4603      	mov	r3, r0
 8007058:	4619      	mov	r1, r3
 800705a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800705e:	f7f9 fe61 	bl	8000d24 <__aeabi_fmul>
 8007062:	4603      	mov	r3, r0
 8007064:	653b      	str	r3, [r7, #80]	; 0x50
    _2q2mx = 2.0f * q2 * mx;
 8007066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800706a:	4619      	mov	r1, r3
 800706c:	4618      	mov	r0, r3
 800706e:	f7f9 fd51 	bl	8000b14 <__addsf3>
 8007072:	4603      	mov	r3, r0
 8007074:	4619      	mov	r1, r3
 8007076:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800707a:	f7f9 fe53 	bl	8000d24 <__aeabi_fmul>
 800707e:	4603      	mov	r3, r0
 8007080:	64fb      	str	r3, [r7, #76]	; 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8007082:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007086:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800708a:	f7f9 fe4b 	bl	8000d24 <__aeabi_fmul>
 800708e:	4603      	mov	r3, r0
 8007090:	461c      	mov	r4, r3
 8007092:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007096:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007098:	f7f9 fe44 	bl	8000d24 <__aeabi_fmul>
 800709c:	4603      	mov	r3, r0
 800709e:	4619      	mov	r1, r3
 80070a0:	4620      	mov	r0, r4
 80070a2:	f7f9 fd35 	bl	8000b10 <__aeabi_fsub>
 80070a6:	4603      	mov	r3, r0
 80070a8:	461c      	mov	r4, r3
 80070aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80070b0:	f7f9 fe38 	bl	8000d24 <__aeabi_fmul>
 80070b4:	4603      	mov	r3, r0
 80070b6:	4619      	mov	r1, r3
 80070b8:	4620      	mov	r0, r4
 80070ba:	f7f9 fd2b 	bl	8000b14 <__addsf3>
 80070be:	4603      	mov	r3, r0
 80070c0:	461c      	mov	r4, r3
 80070c2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80070c4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80070c8:	f7f9 fe2c 	bl	8000d24 <__aeabi_fmul>
 80070cc:	4603      	mov	r3, r0
 80070ce:	4619      	mov	r1, r3
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7f9 fd1f 	bl	8000b14 <__addsf3>
 80070d6:	4603      	mov	r3, r0
 80070d8:	461c      	mov	r4, r3
 80070da:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80070de:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80070e2:	f7f9 fe1f 	bl	8000d24 <__aeabi_fmul>
 80070e6:	4603      	mov	r3, r0
 80070e8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7f9 fe19 	bl	8000d24 <__aeabi_fmul>
 80070f2:	4603      	mov	r3, r0
 80070f4:	4619      	mov	r1, r3
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7f9 fd0c 	bl	8000b14 <__addsf3>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461c      	mov	r4, r3
 8007100:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007104:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8007108:	f7f9 fe0c 	bl	8000d24 <__aeabi_fmul>
 800710c:	4603      	mov	r3, r0
 800710e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007112:	4618      	mov	r0, r3
 8007114:	f7f9 fe06 	bl	8000d24 <__aeabi_fmul>
 8007118:	4603      	mov	r3, r0
 800711a:	4619      	mov	r1, r3
 800711c:	4620      	mov	r0, r4
 800711e:	f7f9 fcf9 	bl	8000b14 <__addsf3>
 8007122:	4603      	mov	r3, r0
 8007124:	461c      	mov	r4, r3
 8007126:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007128:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800712c:	f7f9 fdfa 	bl	8000d24 <__aeabi_fmul>
 8007130:	4603      	mov	r3, r0
 8007132:	4619      	mov	r1, r3
 8007134:	4620      	mov	r0, r4
 8007136:	f7f9 fceb 	bl	8000b10 <__aeabi_fsub>
 800713a:	4603      	mov	r3, r0
 800713c:	461c      	mov	r4, r3
 800713e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007140:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007144:	f7f9 fdee 	bl	8000d24 <__aeabi_fmul>
 8007148:	4603      	mov	r3, r0
 800714a:	4619      	mov	r1, r3
 800714c:	4620      	mov	r0, r4
 800714e:	f7f9 fcdf 	bl	8000b10 <__aeabi_fsub>
 8007152:	4603      	mov	r3, r0
 8007154:	64bb      	str	r3, [r7, #72]	; 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8007156:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800715a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800715c:	f7f9 fde2 	bl	8000d24 <__aeabi_fmul>
 8007160:	4603      	mov	r3, r0
 8007162:	461c      	mov	r4, r3
 8007164:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007168:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800716c:	f7f9 fdda 	bl	8000d24 <__aeabi_fmul>
 8007170:	4603      	mov	r3, r0
 8007172:	4619      	mov	r1, r3
 8007174:	4620      	mov	r0, r4
 8007176:	f7f9 fccd 	bl	8000b14 <__addsf3>
 800717a:	4603      	mov	r3, r0
 800717c:	461c      	mov	r4, r3
 800717e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007182:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007184:	f7f9 fdce 	bl	8000d24 <__aeabi_fmul>
 8007188:	4603      	mov	r3, r0
 800718a:	4619      	mov	r1, r3
 800718c:	4620      	mov	r0, r4
 800718e:	f7f9 fcbf 	bl	8000b10 <__aeabi_fsub>
 8007192:	4603      	mov	r3, r0
 8007194:	461c      	mov	r4, r3
 8007196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800719a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800719c:	f7f9 fdc2 	bl	8000d24 <__aeabi_fmul>
 80071a0:	4603      	mov	r3, r0
 80071a2:	4619      	mov	r1, r3
 80071a4:	4620      	mov	r0, r4
 80071a6:	f7f9 fcb5 	bl	8000b14 <__addsf3>
 80071aa:	4603      	mov	r3, r0
 80071ac:	461c      	mov	r4, r3
 80071ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80071b0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80071b4:	f7f9 fdb6 	bl	8000d24 <__aeabi_fmul>
 80071b8:	4603      	mov	r3, r0
 80071ba:	4619      	mov	r1, r3
 80071bc:	4620      	mov	r0, r4
 80071be:	f7f9 fca7 	bl	8000b10 <__aeabi_fsub>
 80071c2:	4603      	mov	r3, r0
 80071c4:	461c      	mov	r4, r3
 80071c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071c8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80071cc:	f7f9 fdaa 	bl	8000d24 <__aeabi_fmul>
 80071d0:	4603      	mov	r3, r0
 80071d2:	4619      	mov	r1, r3
 80071d4:	4620      	mov	r0, r4
 80071d6:	f7f9 fc9d 	bl	8000b14 <__addsf3>
 80071da:	4603      	mov	r3, r0
 80071dc:	461c      	mov	r4, r3
 80071de:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80071e2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80071e6:	f7f9 fd9d 	bl	8000d24 <__aeabi_fmul>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7f9 fd97 	bl	8000d24 <__aeabi_fmul>
 80071f6:	4603      	mov	r3, r0
 80071f8:	4619      	mov	r1, r3
 80071fa:	4620      	mov	r0, r4
 80071fc:	f7f9 fc8a 	bl	8000b14 <__addsf3>
 8007200:	4603      	mov	r3, r0
 8007202:	461c      	mov	r4, r3
 8007204:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007206:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800720a:	f7f9 fd8b 	bl	8000d24 <__aeabi_fmul>
 800720e:	4603      	mov	r3, r0
 8007210:	4619      	mov	r1, r3
 8007212:	4620      	mov	r0, r4
 8007214:	f7f9 fc7c 	bl	8000b10 <__aeabi_fsub>
 8007218:	4603      	mov	r3, r0
 800721a:	647b      	str	r3, [r7, #68]	; 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 800721c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800721e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007220:	f7f9 fd80 	bl	8000d24 <__aeabi_fmul>
 8007224:	4603      	mov	r3, r0
 8007226:	461c      	mov	r4, r3
 8007228:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800722a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800722c:	f7f9 fd7a 	bl	8000d24 <__aeabi_fmul>
 8007230:	4603      	mov	r3, r0
 8007232:	4619      	mov	r1, r3
 8007234:	4620      	mov	r0, r4
 8007236:	f7f9 fc6d 	bl	8000b14 <__addsf3>
 800723a:	4603      	mov	r3, r0
 800723c:	4618      	mov	r0, r3
 800723e:	f003 f8f3 	bl	800a428 <sqrtf>
 8007242:	6438      	str	r0, [r7, #64]	; 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8007244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007246:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800724a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800724e:	4618      	mov	r0, r3
 8007250:	f7f9 fd68 	bl	8000d24 <__aeabi_fmul>
 8007254:	4603      	mov	r3, r0
 8007256:	461c      	mov	r4, r3
 8007258:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800725c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800725e:	f7f9 fd61 	bl	8000d24 <__aeabi_fmul>
 8007262:	4603      	mov	r3, r0
 8007264:	4619      	mov	r1, r3
 8007266:	4620      	mov	r0, r4
 8007268:	f7f9 fc54 	bl	8000b14 <__addsf3>
 800726c:	4603      	mov	r3, r0
 800726e:	461c      	mov	r4, r3
 8007270:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007274:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8007278:	f7f9 fd54 	bl	8000d24 <__aeabi_fmul>
 800727c:	4603      	mov	r3, r0
 800727e:	4619      	mov	r1, r3
 8007280:	4620      	mov	r0, r4
 8007282:	f7f9 fc47 	bl	8000b14 <__addsf3>
 8007286:	4603      	mov	r3, r0
 8007288:	461c      	mov	r4, r3
 800728a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800728e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007290:	f7f9 fd48 	bl	8000d24 <__aeabi_fmul>
 8007294:	4603      	mov	r3, r0
 8007296:	4619      	mov	r1, r3
 8007298:	4620      	mov	r0, r4
 800729a:	f7f9 fc3b 	bl	8000b14 <__addsf3>
 800729e:	4603      	mov	r3, r0
 80072a0:	461c      	mov	r4, r3
 80072a2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80072a4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80072a8:	f7f9 fd3c 	bl	8000d24 <__aeabi_fmul>
 80072ac:	4603      	mov	r3, r0
 80072ae:	4619      	mov	r1, r3
 80072b0:	4620      	mov	r0, r4
 80072b2:	f7f9 fc2d 	bl	8000b10 <__aeabi_fsub>
 80072b6:	4603      	mov	r3, r0
 80072b8:	461c      	mov	r4, r3
 80072ba:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80072be:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80072c2:	f7f9 fd2f 	bl	8000d24 <__aeabi_fmul>
 80072c6:	4603      	mov	r3, r0
 80072c8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7f9 fd29 	bl	8000d24 <__aeabi_fmul>
 80072d2:	4603      	mov	r3, r0
 80072d4:	4619      	mov	r1, r3
 80072d6:	4620      	mov	r0, r4
 80072d8:	f7f9 fc1c 	bl	8000b14 <__addsf3>
 80072dc:	4603      	mov	r3, r0
 80072de:	461c      	mov	r4, r3
 80072e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072e2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80072e6:	f7f9 fd1d 	bl	8000d24 <__aeabi_fmul>
 80072ea:	4603      	mov	r3, r0
 80072ec:	4619      	mov	r1, r3
 80072ee:	4620      	mov	r0, r4
 80072f0:	f7f9 fc0e 	bl	8000b10 <__aeabi_fsub>
 80072f4:	4603      	mov	r3, r0
 80072f6:	461c      	mov	r4, r3
 80072f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80072fa:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80072fe:	f7f9 fd11 	bl	8000d24 <__aeabi_fmul>
 8007302:	4603      	mov	r3, r0
 8007304:	4619      	mov	r1, r3
 8007306:	4620      	mov	r0, r4
 8007308:	f7f9 fc04 	bl	8000b14 <__addsf3>
 800730c:	4603      	mov	r3, r0
 800730e:	63fb      	str	r3, [r7, #60]	; 0x3c
    _4bx = 2.0f * _2bx;
 8007310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007312:	4619      	mov	r1, r3
 8007314:	4618      	mov	r0, r3
 8007316:	f7f9 fbfd 	bl	8000b14 <__addsf3>
 800731a:	4603      	mov	r3, r0
 800731c:	63bb      	str	r3, [r7, #56]	; 0x38
    _4bz = 2.0f * _2bz;
 800731e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007320:	4619      	mov	r1, r3
 8007322:	4618      	mov	r0, r3
 8007324:	f7f9 fbf6 	bl	8000b14 <__addsf3>
 8007328:	4603      	mov	r3, r0
 800732a:	637b      	str	r3, [r7, #52]	; 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800732c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007330:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	4619      	mov	r1, r3
 8007338:	4618      	mov	r0, r3
 800733a:	f7f9 fbeb 	bl	8000b14 <__addsf3>
 800733e:	4603      	mov	r3, r0
 8007340:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007344:	4618      	mov	r0, r3
 8007346:	f7f9 fbe3 	bl	8000b10 <__aeabi_fsub>
 800734a:	4603      	mov	r3, r0
 800734c:	68f9      	ldr	r1, [r7, #12]
 800734e:	4618      	mov	r0, r3
 8007350:	f7f9 fbde 	bl	8000b10 <__aeabi_fsub>
 8007354:	4603      	mov	r3, r0
 8007356:	4619      	mov	r1, r3
 8007358:	4620      	mov	r0, r4
 800735a:	f7f9 fce3 	bl	8000d24 <__aeabi_fmul>
 800735e:	4603      	mov	r3, r0
 8007360:	461c      	mov	r4, r3
 8007362:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007366:	4619      	mov	r1, r3
 8007368:	4618      	mov	r0, r3
 800736a:	f7f9 fbd3 	bl	8000b14 <__addsf3>
 800736e:	4603      	mov	r3, r0
 8007370:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007374:	4618      	mov	r0, r3
 8007376:	f7f9 fbcd 	bl	8000b14 <__addsf3>
 800737a:	4603      	mov	r3, r0
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	4618      	mov	r0, r3
 8007380:	f7f9 fbc6 	bl	8000b10 <__aeabi_fsub>
 8007384:	4603      	mov	r3, r0
 8007386:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800738a:	4618      	mov	r0, r3
 800738c:	f7f9 fcca 	bl	8000d24 <__aeabi_fmul>
 8007390:	4603      	mov	r3, r0
 8007392:	4619      	mov	r1, r3
 8007394:	4620      	mov	r0, r4
 8007396:	f7f9 fbbd 	bl	8000b14 <__addsf3>
 800739a:	4603      	mov	r3, r0
 800739c:	461c      	mov	r4, r3
 800739e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80073a4:	f7f9 fcbe 	bl	8000d24 <__aeabi_fmul>
 80073a8:	4603      	mov	r3, r0
 80073aa:	461d      	mov	r5, r3
 80073ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073ae:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80073b2:	f7f9 fbad 	bl	8000b10 <__aeabi_fsub>
 80073b6:	4603      	mov	r3, r0
 80073b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7f9 fba8 	bl	8000b10 <__aeabi_fsub>
 80073c0:	4603      	mov	r3, r0
 80073c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7f9 fcad 	bl	8000d24 <__aeabi_fmul>
 80073ca:	4603      	mov	r3, r0
 80073cc:	461e      	mov	r6, r3
 80073ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80073d2:	f7f9 fb9d 	bl	8000b10 <__aeabi_fsub>
 80073d6:	4603      	mov	r3, r0
 80073d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073da:	4618      	mov	r0, r3
 80073dc:	f7f9 fca2 	bl	8000d24 <__aeabi_fmul>
 80073e0:	4603      	mov	r3, r0
 80073e2:	4619      	mov	r1, r3
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7f9 fb95 	bl	8000b14 <__addsf3>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7f9 fb8d 	bl	8000b10 <__aeabi_fsub>
 80073f6:	4603      	mov	r3, r0
 80073f8:	4619      	mov	r1, r3
 80073fa:	4628      	mov	r0, r5
 80073fc:	f7f9 fc92 	bl	8000d24 <__aeabi_fmul>
 8007400:	4603      	mov	r3, r0
 8007402:	4619      	mov	r1, r3
 8007404:	4620      	mov	r0, r4
 8007406:	f7f9 fb83 	bl	8000b10 <__aeabi_fsub>
 800740a:	4603      	mov	r3, r0
 800740c:	461c      	mov	r4, r3
 800740e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007410:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007414:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007418:	4618      	mov	r0, r3
 800741a:	f7f9 fc83 	bl	8000d24 <__aeabi_fmul>
 800741e:	4603      	mov	r3, r0
 8007420:	461d      	mov	r5, r3
 8007422:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007426:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007428:	f7f9 fc7c 	bl	8000d24 <__aeabi_fmul>
 800742c:	4603      	mov	r3, r0
 800742e:	4619      	mov	r1, r3
 8007430:	4628      	mov	r0, r5
 8007432:	f7f9 fb6f 	bl	8000b14 <__addsf3>
 8007436:	4603      	mov	r3, r0
 8007438:	461d      	mov	r5, r3
 800743a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800743c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800743e:	f7f9 fb67 	bl	8000b10 <__aeabi_fsub>
 8007442:	4603      	mov	r3, r0
 8007444:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007446:	4618      	mov	r0, r3
 8007448:	f7f9 fc6c 	bl	8000d24 <__aeabi_fmul>
 800744c:	4603      	mov	r3, r0
 800744e:	461e      	mov	r6, r3
 8007450:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007452:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007456:	f7f9 fb5d 	bl	8000b14 <__addsf3>
 800745a:	4603      	mov	r3, r0
 800745c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800745e:	4618      	mov	r0, r3
 8007460:	f7f9 fc60 	bl	8000d24 <__aeabi_fmul>
 8007464:	4603      	mov	r3, r0
 8007466:	4619      	mov	r1, r3
 8007468:	4630      	mov	r0, r6
 800746a:	f7f9 fb53 	bl	8000b14 <__addsf3>
 800746e:	4603      	mov	r3, r0
 8007470:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007474:	4618      	mov	r0, r3
 8007476:	f7f9 fb4b 	bl	8000b10 <__aeabi_fsub>
 800747a:	4603      	mov	r3, r0
 800747c:	4619      	mov	r1, r3
 800747e:	4628      	mov	r0, r5
 8007480:	f7f9 fc50 	bl	8000d24 <__aeabi_fmul>
 8007484:	4603      	mov	r3, r0
 8007486:	4619      	mov	r1, r3
 8007488:	4620      	mov	r0, r4
 800748a:	f7f9 fb43 	bl	8000b14 <__addsf3>
 800748e:	4603      	mov	r3, r0
 8007490:	461c      	mov	r4, r3
 8007492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007496:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007498:	f7f9 fc44 	bl	8000d24 <__aeabi_fmul>
 800749c:	4603      	mov	r3, r0
 800749e:	461d      	mov	r5, r3
 80074a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80074a2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80074a4:	f7f9 fb36 	bl	8000b14 <__addsf3>
 80074a8:	4603      	mov	r3, r0
 80074aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7f9 fc39 	bl	8000d24 <__aeabi_fmul>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461e      	mov	r6, r3
 80074b6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80074b8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80074bc:	f7f9 fb28 	bl	8000b10 <__aeabi_fsub>
 80074c0:	4603      	mov	r3, r0
 80074c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7f9 fb23 	bl	8000b10 <__aeabi_fsub>
 80074ca:	4603      	mov	r3, r0
 80074cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7f9 fc28 	bl	8000d24 <__aeabi_fmul>
 80074d4:	4603      	mov	r3, r0
 80074d6:	4619      	mov	r1, r3
 80074d8:	4630      	mov	r0, r6
 80074da:	f7f9 fb1b 	bl	8000b14 <__addsf3>
 80074de:	4603      	mov	r3, r0
 80074e0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7f9 fb13 	bl	8000b10 <__aeabi_fsub>
 80074ea:	4603      	mov	r3, r0
 80074ec:	4619      	mov	r1, r3
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7f9 fc18 	bl	8000d24 <__aeabi_fmul>
 80074f4:	4603      	mov	r3, r0
 80074f6:	4619      	mov	r1, r3
 80074f8:	4620      	mov	r0, r4
 80074fa:	f7f9 fb0b 	bl	8000b14 <__addsf3>
 80074fe:	4603      	mov	r3, r0
 8007500:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8007502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007504:	4619      	mov	r1, r3
 8007506:	4618      	mov	r0, r3
 8007508:	f7f9 fb04 	bl	8000b14 <__addsf3>
 800750c:	4603      	mov	r3, r0
 800750e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007512:	4618      	mov	r0, r3
 8007514:	f7f9 fafc 	bl	8000b10 <__aeabi_fsub>
 8007518:	4603      	mov	r3, r0
 800751a:	68f9      	ldr	r1, [r7, #12]
 800751c:	4618      	mov	r0, r3
 800751e:	f7f9 faf7 	bl	8000b10 <__aeabi_fsub>
 8007522:	4603      	mov	r3, r0
 8007524:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007528:	4618      	mov	r0, r3
 800752a:	f7f9 fbfb 	bl	8000d24 <__aeabi_fmul>
 800752e:	4603      	mov	r3, r0
 8007530:	461c      	mov	r4, r3
 8007532:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007536:	4619      	mov	r1, r3
 8007538:	4618      	mov	r0, r3
 800753a:	f7f9 faeb 	bl	8000b14 <__addsf3>
 800753e:	4603      	mov	r3, r0
 8007540:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007544:	4618      	mov	r0, r3
 8007546:	f7f9 fae5 	bl	8000b14 <__addsf3>
 800754a:	4603      	mov	r3, r0
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	4618      	mov	r0, r3
 8007550:	f7f9 fade 	bl	8000b10 <__aeabi_fsub>
 8007554:	4603      	mov	r3, r0
 8007556:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800755a:	4618      	mov	r0, r3
 800755c:	f7f9 fbe2 	bl	8000d24 <__aeabi_fmul>
 8007560:	4603      	mov	r3, r0
 8007562:	4619      	mov	r1, r3
 8007564:	4620      	mov	r0, r4
 8007566:	f7f9 fad5 	bl	8000b14 <__addsf3>
 800756a:	4603      	mov	r3, r0
 800756c:	461c      	mov	r4, r3
 800756e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8007572:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007576:	f7f9 fbd5 	bl	8000d24 <__aeabi_fmul>
 800757a:	4603      	mov	r3, r0
 800757c:	461d      	mov	r5, r3
 800757e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007580:	4619      	mov	r1, r3
 8007582:	4618      	mov	r0, r3
 8007584:	f7f9 fac6 	bl	8000b14 <__addsf3>
 8007588:	4603      	mov	r3, r0
 800758a:	4619      	mov	r1, r3
 800758c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007590:	f7f9 fabe 	bl	8000b10 <__aeabi_fsub>
 8007594:	4603      	mov	r3, r0
 8007596:	461e      	mov	r6, r3
 8007598:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800759a:	4619      	mov	r1, r3
 800759c:	4618      	mov	r0, r3
 800759e:	f7f9 fab9 	bl	8000b14 <__addsf3>
 80075a2:	4603      	mov	r3, r0
 80075a4:	4619      	mov	r1, r3
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7f9 fab2 	bl	8000b10 <__aeabi_fsub>
 80075ac:	4603      	mov	r3, r0
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7f9 faad 	bl	8000b10 <__aeabi_fsub>
 80075b6:	4603      	mov	r3, r0
 80075b8:	4619      	mov	r1, r3
 80075ba:	4628      	mov	r0, r5
 80075bc:	f7f9 fbb2 	bl	8000d24 <__aeabi_fmul>
 80075c0:	4603      	mov	r3, r0
 80075c2:	4619      	mov	r1, r3
 80075c4:	4620      	mov	r0, r4
 80075c6:	f7f9 faa3 	bl	8000b10 <__aeabi_fsub>
 80075ca:	4603      	mov	r3, r0
 80075cc:	461c      	mov	r4, r3
 80075ce:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80075d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80075d4:	f7f9 fba6 	bl	8000d24 <__aeabi_fmul>
 80075d8:	4603      	mov	r3, r0
 80075da:	461d      	mov	r5, r3
 80075dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075de:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80075e2:	f7f9 fa95 	bl	8000b10 <__aeabi_fsub>
 80075e6:	4603      	mov	r3, r0
 80075e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7f9 fa90 	bl	8000b10 <__aeabi_fsub>
 80075f0:	4603      	mov	r3, r0
 80075f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7f9 fb95 	bl	8000d24 <__aeabi_fmul>
 80075fa:	4603      	mov	r3, r0
 80075fc:	461e      	mov	r6, r3
 80075fe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007600:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007602:	f7f9 fa85 	bl	8000b10 <__aeabi_fsub>
 8007606:	4603      	mov	r3, r0
 8007608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800760a:	4618      	mov	r0, r3
 800760c:	f7f9 fb8a 	bl	8000d24 <__aeabi_fmul>
 8007610:	4603      	mov	r3, r0
 8007612:	4619      	mov	r1, r3
 8007614:	4630      	mov	r0, r6
 8007616:	f7f9 fa7d 	bl	8000b14 <__addsf3>
 800761a:	4603      	mov	r3, r0
 800761c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007620:	4618      	mov	r0, r3
 8007622:	f7f9 fa75 	bl	8000b10 <__aeabi_fsub>
 8007626:	4603      	mov	r3, r0
 8007628:	4619      	mov	r1, r3
 800762a:	4628      	mov	r0, r5
 800762c:	f7f9 fb7a 	bl	8000d24 <__aeabi_fmul>
 8007630:	4603      	mov	r3, r0
 8007632:	4619      	mov	r1, r3
 8007634:	4620      	mov	r0, r4
 8007636:	f7f9 fa6d 	bl	8000b14 <__addsf3>
 800763a:	4603      	mov	r3, r0
 800763c:	461c      	mov	r4, r3
 800763e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007642:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007644:	f7f9 fb6e 	bl	8000d24 <__aeabi_fmul>
 8007648:	4603      	mov	r3, r0
 800764a:	461d      	mov	r5, r3
 800764c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007650:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007652:	f7f9 fb67 	bl	8000d24 <__aeabi_fmul>
 8007656:	4603      	mov	r3, r0
 8007658:	4619      	mov	r1, r3
 800765a:	4628      	mov	r0, r5
 800765c:	f7f9 fa5a 	bl	8000b14 <__addsf3>
 8007660:	4603      	mov	r3, r0
 8007662:	461d      	mov	r5, r3
 8007664:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007666:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007668:	f7f9 fa52 	bl	8000b10 <__aeabi_fsub>
 800766c:	4603      	mov	r3, r0
 800766e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007670:	4618      	mov	r0, r3
 8007672:	f7f9 fb57 	bl	8000d24 <__aeabi_fmul>
 8007676:	4603      	mov	r3, r0
 8007678:	461e      	mov	r6, r3
 800767a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800767c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007680:	f7f9 fa48 	bl	8000b14 <__addsf3>
 8007684:	4603      	mov	r3, r0
 8007686:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007688:	4618      	mov	r0, r3
 800768a:	f7f9 fb4b 	bl	8000d24 <__aeabi_fmul>
 800768e:	4603      	mov	r3, r0
 8007690:	4619      	mov	r1, r3
 8007692:	4630      	mov	r0, r6
 8007694:	f7f9 fa3e 	bl	8000b14 <__addsf3>
 8007698:	4603      	mov	r3, r0
 800769a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800769e:	4618      	mov	r0, r3
 80076a0:	f7f9 fa36 	bl	8000b10 <__aeabi_fsub>
 80076a4:	4603      	mov	r3, r0
 80076a6:	4619      	mov	r1, r3
 80076a8:	4628      	mov	r0, r5
 80076aa:	f7f9 fb3b 	bl	8000d24 <__aeabi_fmul>
 80076ae:	4603      	mov	r3, r0
 80076b0:	4619      	mov	r1, r3
 80076b2:	4620      	mov	r0, r4
 80076b4:	f7f9 fa2e 	bl	8000b14 <__addsf3>
 80076b8:	4603      	mov	r3, r0
 80076ba:	461c      	mov	r4, r3
 80076bc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80076c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80076c2:	f7f9 fb2f 	bl	8000d24 <__aeabi_fmul>
 80076c6:	4603      	mov	r3, r0
 80076c8:	461d      	mov	r5, r3
 80076ca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80076ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076d0:	f7f9 fb28 	bl	8000d24 <__aeabi_fmul>
 80076d4:	4603      	mov	r3, r0
 80076d6:	4619      	mov	r1, r3
 80076d8:	4628      	mov	r0, r5
 80076da:	f7f9 fa19 	bl	8000b10 <__aeabi_fsub>
 80076de:	4603      	mov	r3, r0
 80076e0:	461d      	mov	r5, r3
 80076e2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80076e4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80076e6:	f7f9 fa15 	bl	8000b14 <__addsf3>
 80076ea:	4603      	mov	r3, r0
 80076ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7f9 fb18 	bl	8000d24 <__aeabi_fmul>
 80076f4:	4603      	mov	r3, r0
 80076f6:	461e      	mov	r6, r3
 80076f8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80076fa:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80076fe:	f7f9 fa07 	bl	8000b10 <__aeabi_fsub>
 8007702:	4603      	mov	r3, r0
 8007704:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007706:	4618      	mov	r0, r3
 8007708:	f7f9 fa02 	bl	8000b10 <__aeabi_fsub>
 800770c:	4603      	mov	r3, r0
 800770e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007710:	4618      	mov	r0, r3
 8007712:	f7f9 fb07 	bl	8000d24 <__aeabi_fmul>
 8007716:	4603      	mov	r3, r0
 8007718:	4619      	mov	r1, r3
 800771a:	4630      	mov	r0, r6
 800771c:	f7f9 f9fa 	bl	8000b14 <__addsf3>
 8007720:	4603      	mov	r3, r0
 8007722:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007726:	4618      	mov	r0, r3
 8007728:	f7f9 f9f2 	bl	8000b10 <__aeabi_fsub>
 800772c:	4603      	mov	r3, r0
 800772e:	4619      	mov	r1, r3
 8007730:	4628      	mov	r0, r5
 8007732:	f7f9 faf7 	bl	8000d24 <__aeabi_fmul>
 8007736:	4603      	mov	r3, r0
 8007738:	4619      	mov	r1, r3
 800773a:	4620      	mov	r0, r4
 800773c:	f7f9 f9ea 	bl	8000b14 <__addsf3>
 8007740:	4603      	mov	r3, r0
 8007742:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8007744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007748:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800774c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774e:	4619      	mov	r1, r3
 8007750:	4618      	mov	r0, r3
 8007752:	f7f9 f9df 	bl	8000b14 <__addsf3>
 8007756:	4603      	mov	r3, r0
 8007758:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800775c:	4618      	mov	r0, r3
 800775e:	f7f9 f9d7 	bl	8000b10 <__aeabi_fsub>
 8007762:	4603      	mov	r3, r0
 8007764:	68f9      	ldr	r1, [r7, #12]
 8007766:	4618      	mov	r0, r3
 8007768:	f7f9 f9d2 	bl	8000b10 <__aeabi_fsub>
 800776c:	4603      	mov	r3, r0
 800776e:	4619      	mov	r1, r3
 8007770:	4620      	mov	r0, r4
 8007772:	f7f9 fad7 	bl	8000d24 <__aeabi_fmul>
 8007776:	4603      	mov	r3, r0
 8007778:	461c      	mov	r4, r3
 800777a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800777e:	4619      	mov	r1, r3
 8007780:	4618      	mov	r0, r3
 8007782:	f7f9 f9c7 	bl	8000b14 <__addsf3>
 8007786:	4603      	mov	r3, r0
 8007788:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800778c:	4618      	mov	r0, r3
 800778e:	f7f9 f9c1 	bl	8000b14 <__addsf3>
 8007792:	4603      	mov	r3, r0
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	4618      	mov	r0, r3
 8007798:	f7f9 f9ba 	bl	8000b10 <__aeabi_fsub>
 800779c:	4603      	mov	r3, r0
 800779e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7f9 fabe 	bl	8000d24 <__aeabi_fmul>
 80077a8:	4603      	mov	r3, r0
 80077aa:	4619      	mov	r1, r3
 80077ac:	4620      	mov	r0, r4
 80077ae:	f7f9 f9b1 	bl	8000b14 <__addsf3>
 80077b2:	4603      	mov	r3, r0
 80077b4:	461c      	mov	r4, r3
 80077b6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80077ba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80077be:	f7f9 fab1 	bl	8000d24 <__aeabi_fmul>
 80077c2:	4603      	mov	r3, r0
 80077c4:	461d      	mov	r5, r3
 80077c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077c8:	4619      	mov	r1, r3
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7f9 f9a2 	bl	8000b14 <__addsf3>
 80077d0:	4603      	mov	r3, r0
 80077d2:	4619      	mov	r1, r3
 80077d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80077d8:	f7f9 f99a 	bl	8000b10 <__aeabi_fsub>
 80077dc:	4603      	mov	r3, r0
 80077de:	461e      	mov	r6, r3
 80077e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077e2:	4619      	mov	r1, r3
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7f9 f995 	bl	8000b14 <__addsf3>
 80077ea:	4603      	mov	r3, r0
 80077ec:	4619      	mov	r1, r3
 80077ee:	4630      	mov	r0, r6
 80077f0:	f7f9 f98e 	bl	8000b10 <__aeabi_fsub>
 80077f4:	4603      	mov	r3, r0
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7f9 f989 	bl	8000b10 <__aeabi_fsub>
 80077fe:	4603      	mov	r3, r0
 8007800:	4619      	mov	r1, r3
 8007802:	4628      	mov	r0, r5
 8007804:	f7f9 fa8e 	bl	8000d24 <__aeabi_fmul>
 8007808:	4603      	mov	r3, r0
 800780a:	4619      	mov	r1, r3
 800780c:	4620      	mov	r0, r4
 800780e:	f7f9 f97f 	bl	8000b10 <__aeabi_fsub>
 8007812:	4603      	mov	r3, r0
 8007814:	461c      	mov	r4, r3
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800781c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007820:	4618      	mov	r0, r3
 8007822:	f7f9 fa7f 	bl	8000d24 <__aeabi_fmul>
 8007826:	4603      	mov	r3, r0
 8007828:	461d      	mov	r5, r3
 800782a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800782e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007830:	f7f9 fa78 	bl	8000d24 <__aeabi_fmul>
 8007834:	4603      	mov	r3, r0
 8007836:	4619      	mov	r1, r3
 8007838:	4628      	mov	r0, r5
 800783a:	f7f9 f969 	bl	8000b10 <__aeabi_fsub>
 800783e:	4603      	mov	r3, r0
 8007840:	461d      	mov	r5, r3
 8007842:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007844:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007848:	f7f9 f962 	bl	8000b10 <__aeabi_fsub>
 800784c:	4603      	mov	r3, r0
 800784e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007850:	4618      	mov	r0, r3
 8007852:	f7f9 f95d 	bl	8000b10 <__aeabi_fsub>
 8007856:	4603      	mov	r3, r0
 8007858:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800785a:	4618      	mov	r0, r3
 800785c:	f7f9 fa62 	bl	8000d24 <__aeabi_fmul>
 8007860:	4603      	mov	r3, r0
 8007862:	461e      	mov	r6, r3
 8007864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007866:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007868:	f7f9 f952 	bl	8000b10 <__aeabi_fsub>
 800786c:	4603      	mov	r3, r0
 800786e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007870:	4618      	mov	r0, r3
 8007872:	f7f9 fa57 	bl	8000d24 <__aeabi_fmul>
 8007876:	4603      	mov	r3, r0
 8007878:	4619      	mov	r1, r3
 800787a:	4630      	mov	r0, r6
 800787c:	f7f9 f94a 	bl	8000b14 <__addsf3>
 8007880:	4603      	mov	r3, r0
 8007882:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007886:	4618      	mov	r0, r3
 8007888:	f7f9 f942 	bl	8000b10 <__aeabi_fsub>
 800788c:	4603      	mov	r3, r0
 800788e:	4619      	mov	r1, r3
 8007890:	4628      	mov	r0, r5
 8007892:	f7f9 fa47 	bl	8000d24 <__aeabi_fmul>
 8007896:	4603      	mov	r3, r0
 8007898:	4619      	mov	r1, r3
 800789a:	4620      	mov	r0, r4
 800789c:	f7f9 f93a 	bl	8000b14 <__addsf3>
 80078a0:	4603      	mov	r3, r0
 80078a2:	461c      	mov	r4, r3
 80078a4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80078a8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80078aa:	f7f9 fa3b 	bl	8000d24 <__aeabi_fmul>
 80078ae:	4603      	mov	r3, r0
 80078b0:	461d      	mov	r5, r3
 80078b2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80078b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80078b8:	f7f9 fa34 	bl	8000d24 <__aeabi_fmul>
 80078bc:	4603      	mov	r3, r0
 80078be:	4619      	mov	r1, r3
 80078c0:	4628      	mov	r0, r5
 80078c2:	f7f9 f927 	bl	8000b14 <__addsf3>
 80078c6:	4603      	mov	r3, r0
 80078c8:	461d      	mov	r5, r3
 80078ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80078cc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80078ce:	f7f9 f91f 	bl	8000b10 <__aeabi_fsub>
 80078d2:	4603      	mov	r3, r0
 80078d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7f9 fa24 	bl	8000d24 <__aeabi_fmul>
 80078dc:	4603      	mov	r3, r0
 80078de:	461e      	mov	r6, r3
 80078e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80078e2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80078e6:	f7f9 f915 	bl	8000b14 <__addsf3>
 80078ea:	4603      	mov	r3, r0
 80078ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7f9 fa18 	bl	8000d24 <__aeabi_fmul>
 80078f4:	4603      	mov	r3, r0
 80078f6:	4619      	mov	r1, r3
 80078f8:	4630      	mov	r0, r6
 80078fa:	f7f9 f90b 	bl	8000b14 <__addsf3>
 80078fe:	4603      	mov	r3, r0
 8007900:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007904:	4618      	mov	r0, r3
 8007906:	f7f9 f903 	bl	8000b10 <__aeabi_fsub>
 800790a:	4603      	mov	r3, r0
 800790c:	4619      	mov	r1, r3
 800790e:	4628      	mov	r0, r5
 8007910:	f7f9 fa08 	bl	8000d24 <__aeabi_fmul>
 8007914:	4603      	mov	r3, r0
 8007916:	4619      	mov	r1, r3
 8007918:	4620      	mov	r0, r4
 800791a:	f7f9 f8fb 	bl	8000b14 <__addsf3>
 800791e:	4603      	mov	r3, r0
 8007920:	461c      	mov	r4, r3
 8007922:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007926:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007928:	f7f9 f9fc 	bl	8000d24 <__aeabi_fmul>
 800792c:	4603      	mov	r3, r0
 800792e:	461d      	mov	r5, r3
 8007930:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007934:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007936:	f7f9 f9f5 	bl	8000d24 <__aeabi_fmul>
 800793a:	4603      	mov	r3, r0
 800793c:	4619      	mov	r1, r3
 800793e:	4628      	mov	r0, r5
 8007940:	f7f9 f8e6 	bl	8000b10 <__aeabi_fsub>
 8007944:	4603      	mov	r3, r0
 8007946:	461d      	mov	r5, r3
 8007948:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800794a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800794c:	f7f9 f8e2 	bl	8000b14 <__addsf3>
 8007950:	4603      	mov	r3, r0
 8007952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007954:	4618      	mov	r0, r3
 8007956:	f7f9 f9e5 	bl	8000d24 <__aeabi_fmul>
 800795a:	4603      	mov	r3, r0
 800795c:	461e      	mov	r6, r3
 800795e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007960:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007964:	f7f9 f8d4 	bl	8000b10 <__aeabi_fsub>
 8007968:	4603      	mov	r3, r0
 800796a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800796c:	4618      	mov	r0, r3
 800796e:	f7f9 f8cf 	bl	8000b10 <__aeabi_fsub>
 8007972:	4603      	mov	r3, r0
 8007974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007976:	4618      	mov	r0, r3
 8007978:	f7f9 f9d4 	bl	8000d24 <__aeabi_fmul>
 800797c:	4603      	mov	r3, r0
 800797e:	4619      	mov	r1, r3
 8007980:	4630      	mov	r0, r6
 8007982:	f7f9 f8c7 	bl	8000b14 <__addsf3>
 8007986:	4603      	mov	r3, r0
 8007988:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800798c:	4618      	mov	r0, r3
 800798e:	f7f9 f8bf 	bl	8000b10 <__aeabi_fsub>
 8007992:	4603      	mov	r3, r0
 8007994:	4619      	mov	r1, r3
 8007996:	4628      	mov	r0, r5
 8007998:	f7f9 f9c4 	bl	8000d24 <__aeabi_fmul>
 800799c:	4603      	mov	r3, r0
 800799e:	4619      	mov	r1, r3
 80079a0:	4620      	mov	r0, r4
 80079a2:	f7f9 f8b7 	bl	8000b14 <__addsf3>
 80079a6:	4603      	mov	r3, r0
 80079a8:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80079aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ac:	4619      	mov	r1, r3
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7f9 f8b0 	bl	8000b14 <__addsf3>
 80079b4:	4603      	mov	r3, r0
 80079b6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7f9 f8a8 	bl	8000b10 <__aeabi_fsub>
 80079c0:	4603      	mov	r3, r0
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7f9 f8a3 	bl	8000b10 <__aeabi_fsub>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7f9 f9a7 	bl	8000d24 <__aeabi_fmul>
 80079d6:	4603      	mov	r3, r0
 80079d8:	461c      	mov	r4, r3
 80079da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079de:	4619      	mov	r1, r3
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7f9 f897 	bl	8000b14 <__addsf3>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7f9 f891 	bl	8000b14 <__addsf3>
 80079f2:	4603      	mov	r3, r0
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7f9 f88a 	bl	8000b10 <__aeabi_fsub>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7f9 f98e 	bl	8000d24 <__aeabi_fmul>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f7f9 f881 	bl	8000b14 <__addsf3>
 8007a12:	4603      	mov	r3, r0
 8007a14:	461c      	mov	r4, r3
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007a1c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7f9 f97f 	bl	8000d24 <__aeabi_fmul>
 8007a26:	4603      	mov	r3, r0
 8007a28:	461d      	mov	r5, r3
 8007a2a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007a2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a30:	f7f9 f978 	bl	8000d24 <__aeabi_fmul>
 8007a34:	4603      	mov	r3, r0
 8007a36:	4619      	mov	r1, r3
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f7f9 f86b 	bl	8000b14 <__addsf3>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	461d      	mov	r5, r3
 8007a42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a44:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007a48:	f7f9 f862 	bl	8000b10 <__aeabi_fsub>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7f9 f85d 	bl	8000b10 <__aeabi_fsub>
 8007a56:	4603      	mov	r3, r0
 8007a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7f9 f962 	bl	8000d24 <__aeabi_fmul>
 8007a60:	4603      	mov	r3, r0
 8007a62:	461e      	mov	r6, r3
 8007a64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a68:	f7f9 f852 	bl	8000b10 <__aeabi_fsub>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7f9 f957 	bl	8000d24 <__aeabi_fmul>
 8007a76:	4603      	mov	r3, r0
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7f9 f84a 	bl	8000b14 <__addsf3>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7f9 f842 	bl	8000b10 <__aeabi_fsub>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4628      	mov	r0, r5
 8007a92:	f7f9 f947 	bl	8000d24 <__aeabi_fmul>
 8007a96:	4603      	mov	r3, r0
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f7f9 f83a 	bl	8000b14 <__addsf3>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	461c      	mov	r4, r3
 8007aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007aaa:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7f9 f938 	bl	8000d24 <__aeabi_fmul>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007abc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007abe:	f7f9 f931 	bl	8000d24 <__aeabi_fmul>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f7f9 f824 	bl	8000b14 <__addsf3>
 8007acc:	4603      	mov	r3, r0
 8007ace:	461d      	mov	r5, r3
 8007ad0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007ad2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007ad4:	f7f9 f81c 	bl	8000b10 <__aeabi_fsub>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f9 f921 	bl	8000d24 <__aeabi_fmul>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	461e      	mov	r6, r3
 8007ae6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007ae8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007aec:	f7f9 f812 	bl	8000b14 <__addsf3>
 8007af0:	4603      	mov	r3, r0
 8007af2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7f9 f915 	bl	8000d24 <__aeabi_fmul>
 8007afa:	4603      	mov	r3, r0
 8007afc:	4619      	mov	r1, r3
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7f9 f808 	bl	8000b14 <__addsf3>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7f9 f800 	bl	8000b10 <__aeabi_fsub>
 8007b10:	4603      	mov	r3, r0
 8007b12:	4619      	mov	r1, r3
 8007b14:	4628      	mov	r0, r5
 8007b16:	f7f9 f905 	bl	8000d24 <__aeabi_fmul>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7f8 fff8 	bl	8000b14 <__addsf3>
 8007b24:	4603      	mov	r3, r0
 8007b26:	461c      	mov	r4, r3
 8007b28:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007b2c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007b2e:	f7f9 f8f9 	bl	8000d24 <__aeabi_fmul>
 8007b32:	4603      	mov	r3, r0
 8007b34:	461d      	mov	r5, r3
 8007b36:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007b38:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007b3a:	f7f8 ffeb 	bl	8000b14 <__addsf3>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7f9 f8ee 	bl	8000d24 <__aeabi_fmul>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	461e      	mov	r6, r3
 8007b4c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007b4e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007b52:	f7f8 ffdd 	bl	8000b10 <__aeabi_fsub>
 8007b56:	4603      	mov	r3, r0
 8007b58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f8 ffd8 	bl	8000b10 <__aeabi_fsub>
 8007b60:	4603      	mov	r3, r0
 8007b62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7f9 f8dd 	bl	8000d24 <__aeabi_fmul>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7f8 ffd0 	bl	8000b14 <__addsf3>
 8007b74:	4603      	mov	r3, r0
 8007b76:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7f8 ffc8 	bl	8000b10 <__aeabi_fsub>
 8007b80:	4603      	mov	r3, r0
 8007b82:	4619      	mov	r1, r3
 8007b84:	4628      	mov	r0, r5
 8007b86:	f7f9 f8cd 	bl	8000d24 <__aeabi_fmul>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f7f8 ffc0 	bl	8000b14 <__addsf3>
 8007b94:	4603      	mov	r3, r0
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4); // normalise step magnitude
 8007b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b9c:	f7f9 f8c2 	bl	8000d24 <__aeabi_fmul>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	461c      	mov	r4, r3
 8007ba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ba8:	f7f9 f8bc 	bl	8000d24 <__aeabi_fmul>
 8007bac:	4603      	mov	r3, r0
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f7f8 ffaf 	bl	8000b14 <__addsf3>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	461c      	mov	r4, r3
 8007bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bbe:	f7f9 f8b1 	bl	8000d24 <__aeabi_fmul>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7f8 ffa4 	bl	8000b14 <__addsf3>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	461c      	mov	r4, r3
 8007bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bd4:	f7f9 f8a6 	bl	8000d24 <__aeabi_fmul>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f7f8 ff99 	bl	8000b14 <__addsf3>
 8007be2:	4603      	mov	r3, r0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f002 fc1f 	bl	800a428 <sqrtf>
 8007bea:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f / norm;
 8007bec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007bee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007bf2:	f7f9 f94b 	bl	8000e8c <__aeabi_fdiv>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
    s1 *= norm;
 8007bfa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bfe:	f7f9 f891 	bl	8000d24 <__aeabi_fmul>
 8007c02:	4603      	mov	r3, r0
 8007c04:	633b      	str	r3, [r7, #48]	; 0x30
    s2 *= norm;
 8007c06:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007c08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c0a:	f7f9 f88b 	bl	8000d24 <__aeabi_fmul>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 *= norm;
 8007c12:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c16:	f7f9 f885 	bl	8000d24 <__aeabi_fmul>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 *= norm;
 8007c1e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c22:	f7f9 f87f 	bl	8000d24 <__aeabi_fmul>
 8007c26:	4603      	mov	r3, r0
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8007c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7f9 f875 	bl	8000d24 <__aeabi_fmul>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	461c      	mov	r4, r3
 8007c3e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007c42:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007c46:	f7f9 f86d 	bl	8000d24 <__aeabi_fmul>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f7f8 ff5e 	bl	8000b10 <__aeabi_fsub>
 8007c54:	4603      	mov	r3, r0
 8007c56:	461c      	mov	r4, r3
 8007c58:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007c5c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007c60:	f7f9 f860 	bl	8000d24 <__aeabi_fmul>
 8007c64:	4603      	mov	r3, r0
 8007c66:	4619      	mov	r1, r3
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f7f8 ff51 	bl	8000b10 <__aeabi_fsub>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7f9 f855 	bl	8000d24 <__aeabi_fmul>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	461c      	mov	r4, r3
 8007c7e:	4ba4      	ldr	r3, [pc, #656]	; (8007f10 <QuaternionUpdate+0x1178>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7f9 f84d 	bl	8000d24 <__aeabi_fmul>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f7f8 ff3e 	bl	8000b10 <__aeabi_fsub>
 8007c94:	4603      	mov	r3, r0
 8007c96:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007c9e:	f7f9 f841 	bl	8000d24 <__aeabi_fmul>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	461c      	mov	r4, r3
 8007ca6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007caa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007cae:	f7f9 f839 	bl	8000d24 <__aeabi_fmul>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7f8 ff2c 	bl	8000b14 <__addsf3>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	461c      	mov	r4, r3
 8007cc0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007cc4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007cc8:	f7f9 f82c 	bl	8000d24 <__aeabi_fmul>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7f8 ff1d 	bl	8000b10 <__aeabi_fsub>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7f9 f821 	bl	8000d24 <__aeabi_fmul>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	461c      	mov	r4, r3
 8007ce6:	4b8a      	ldr	r3, [pc, #552]	; (8007f10 <QuaternionUpdate+0x1178>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7f9 f819 	bl	8000d24 <__aeabi_fmul>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f7f8 ff0a 	bl	8000b10 <__aeabi_fsub>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8007d00:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007d04:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007d08:	f7f9 f80c 	bl	8000d24 <__aeabi_fmul>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	461c      	mov	r4, r3
 8007d10:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007d14:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007d18:	f7f9 f804 	bl	8000d24 <__aeabi_fmul>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4620      	mov	r0, r4
 8007d22:	f7f8 fef5 	bl	8000b10 <__aeabi_fsub>
 8007d26:	4603      	mov	r3, r0
 8007d28:	461c      	mov	r4, r3
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007d30:	f7f8 fff8 	bl	8000d24 <__aeabi_fmul>
 8007d34:	4603      	mov	r3, r0
 8007d36:	4619      	mov	r1, r3
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f7f8 feeb 	bl	8000b14 <__addsf3>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7f8 ffed 	bl	8000d24 <__aeabi_fmul>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	461c      	mov	r4, r3
 8007d4e:	4b70      	ldr	r3, [pc, #448]	; (8007f10 <QuaternionUpdate+0x1178>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7f8 ffe5 	bl	8000d24 <__aeabi_fmul>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f7f8 fed6 	bl	8000b10 <__aeabi_fsub>
 8007d64:	4603      	mov	r3, r0
 8007d66:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8007d68:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007d6c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007d70:	f7f8 ffd8 	bl	8000d24 <__aeabi_fmul>
 8007d74:	4603      	mov	r3, r0
 8007d76:	461c      	mov	r4, r3
 8007d78:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007d7c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007d80:	f7f8 ffd0 	bl	8000d24 <__aeabi_fmul>
 8007d84:	4603      	mov	r3, r0
 8007d86:	4619      	mov	r1, r3
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f7f8 fec3 	bl	8000b14 <__addsf3>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	461c      	mov	r4, r3
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007d98:	f7f8 ffc4 	bl	8000d24 <__aeabi_fmul>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4620      	mov	r0, r4
 8007da2:	f7f8 feb5 	bl	8000b10 <__aeabi_fsub>
 8007da6:	4603      	mov	r3, r0
 8007da8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7f8 ffb9 	bl	8000d24 <__aeabi_fmul>
 8007db2:	4603      	mov	r3, r0
 8007db4:	461c      	mov	r4, r3
 8007db6:	4b56      	ldr	r3, [pc, #344]	; (8007f10 <QuaternionUpdate+0x1178>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7f8 ffb1 	bl	8000d24 <__aeabi_fmul>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f7f8 fea2 	bl	8000b10 <__aeabi_fsub>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8007dd0:	4b50      	ldr	r3, [pc, #320]	; (8007f14 <QuaternionUpdate+0x117c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6a39      	ldr	r1, [r7, #32]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7f8 ffa4 	bl	8000d24 <__aeabi_fmul>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	4619      	mov	r1, r3
 8007de0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007de4:	f7f8 fe96 	bl	8000b14 <__addsf3>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q2 += qDot2 * deltat;
 8007dee:	4b49      	ldr	r3, [pc, #292]	; (8007f14 <QuaternionUpdate+0x117c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69f9      	ldr	r1, [r7, #28]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7f8 ff95 	bl	8000d24 <__aeabi_fmul>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007e02:	f7f8 fe87 	bl	8000b14 <__addsf3>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q3 += qDot3 * deltat;
 8007e0c:	4b41      	ldr	r3, [pc, #260]	; (8007f14 <QuaternionUpdate+0x117c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	69b9      	ldr	r1, [r7, #24]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7f8 ff86 	bl	8000d24 <__aeabi_fmul>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007e20:	f7f8 fe78 	bl	8000b14 <__addsf3>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q4 += qDot4 * deltat;
 8007e2a:	4b3a      	ldr	r3, [pc, #232]	; (8007f14 <QuaternionUpdate+0x117c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6979      	ldr	r1, [r7, #20]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7f8 ff77 	bl	8000d24 <__aeabi_fmul>
 8007e36:	4603      	mov	r3, r0
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007e3e:	f7f8 fe69 	bl	8000b14 <__addsf3>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4); // normalise quaternion
 8007e48:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007e4c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007e50:	f7f8 ff68 	bl	8000d24 <__aeabi_fmul>
 8007e54:	4603      	mov	r3, r0
 8007e56:	461c      	mov	r4, r3
 8007e58:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007e5c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007e60:	f7f8 ff60 	bl	8000d24 <__aeabi_fmul>
 8007e64:	4603      	mov	r3, r0
 8007e66:	4619      	mov	r1, r3
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f7f8 fe53 	bl	8000b14 <__addsf3>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	461c      	mov	r4, r3
 8007e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e76:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007e7a:	f7f8 ff53 	bl	8000d24 <__aeabi_fmul>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	4619      	mov	r1, r3
 8007e82:	4620      	mov	r0, r4
 8007e84:	f7f8 fe46 	bl	8000b14 <__addsf3>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	461c      	mov	r4, r3
 8007e8c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8007e90:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007e94:	f7f8 ff46 	bl	8000d24 <__aeabi_fmul>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f7f8 fe39 	bl	8000b14 <__addsf3>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f002 fabf 	bl	800a428 <sqrtf>
 8007eaa:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f / norm;
 8007eac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007eae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007eb2:	f7f8 ffeb 	bl	8000e8c <__aeabi_fdiv>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
    q[0] = q1 * norm;
 8007eba:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007ebc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007ec0:	f7f8 ff30 	bl	8000d24 <__aeabi_fmul>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	4b13      	ldr	r3, [pc, #76]	; (8007f18 <QuaternionUpdate+0x1180>)
 8007eca:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 8007ecc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007ece:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007ed2:	f7f8 ff27 	bl	8000d24 <__aeabi_fmul>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4b0f      	ldr	r3, [pc, #60]	; (8007f18 <QuaternionUpdate+0x1180>)
 8007edc:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 8007ede:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007ee0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007ee4:	f7f8 ff1e 	bl	8000d24 <__aeabi_fmul>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	461a      	mov	r2, r3
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <QuaternionUpdate+0x1180>)
 8007eee:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 8007ef0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007ef2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007ef6:	f7f8 ff15 	bl	8000d24 <__aeabi_fmul>
 8007efa:	4603      	mov	r3, r0
 8007efc:	461a      	mov	r2, r3
 8007efe:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <QuaternionUpdate+0x1180>)
 8007f00:	60da      	str	r2, [r3, #12]
 8007f02:	e002      	b.n	8007f0a <QuaternionUpdate+0x1172>
        return; // handle NaN
 8007f04:	bf00      	nop
 8007f06:	e000      	b.n	8007f0a <QuaternionUpdate+0x1172>
        return; // handle NaN
 8007f08:	bf00      	nop
}
 8007f0a:	37b4      	adds	r7, #180	; 0xb4
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f10:	2000000c 	.word	0x2000000c
 8007f14:	200002c8 	.word	0x200002c8
 8007f18:	20000010 	.word	0x20000010

08007f1c <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8007f20:	2200      	movs	r2, #0
 8007f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f26:	4802      	ldr	r0, [pc, #8]	; (8007f30 <nRF24_CSN_L+0x14>)
 8007f28:	f7f9 fc10 	bl	800174c <HAL_GPIO_WritePin>
}
 8007f2c:	bf00      	nop
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	40010c00 	.word	0x40010c00

08007f34 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f3e:	4802      	ldr	r0, [pc, #8]	; (8007f48 <nRF24_CSN_H+0x14>)
 8007f40:	f7f9 fc04 	bl	800174c <HAL_GPIO_WritePin>
}
 8007f44:	bf00      	nop
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40010c00 	.word	0x40010c00

08007f4c <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	4603      	mov	r3, r0
 8007f54:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {
 8007f56:	f107 020f 	add.w	r2, r7, #15
 8007f5a:	1df9      	adds	r1, r7, #7
 8007f5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	2301      	movs	r3, #1
 8007f64:	4806      	ldr	r0, [pc, #24]	; (8007f80 <nRF24_LL_RW+0x34>)
 8007f66:	f7fb f8c1 	bl	80030ec <HAL_SPI_TransmitReceive>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <nRF24_LL_RW+0x28>
        Error_Handler();
 8007f70:	f7fc fd04 	bl	800497c <Error_Handler>
    };
    return result;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	200000fc 	.word	0x200000fc

08007f84 <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8007f8e:	f7ff ffc5 	bl	8007f1c <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	f003 031f 	and.w	r3, r3, #31
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff ffd6 	bl	8007f4c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8007fa0:	20ff      	movs	r0, #255	; 0xff
 8007fa2:	f7ff ffd3 	bl	8007f4c <nRF24_LL_RW>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8007faa:	f7ff ffc3 	bl	8007f34 <nRF24_CSN_H>

	return value;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	460a      	mov	r2, r1
 8007fc2:	71fb      	strb	r3, [r7, #7]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8007fc8:	f7ff ffa8 	bl	8007f1c <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	2b1f      	cmp	r3, #31
 8007fd0:	d810      	bhi.n	8007ff4 <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8007fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fd6:	f003 031f 	and.w	r3, r3, #31
 8007fda:	b25b      	sxtb	r3, r3
 8007fdc:	f043 0320 	orr.w	r3, r3, #32
 8007fe0:	b25b      	sxtb	r3, r3
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7ff ffb1 	bl	8007f4c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8007fea:	79bb      	ldrb	r3, [r7, #6]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff ffad 	bl	8007f4c <nRF24_LL_RW>
 8007ff2:	e013      	b.n	800801c <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff ffa8 	bl	8007f4c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	2be1      	cmp	r3, #225	; 0xe1
 8008000:	d00c      	beq.n	800801c <nRF24_WriteReg+0x64>
 8008002:	79fb      	ldrb	r3, [r7, #7]
 8008004:	2be2      	cmp	r3, #226	; 0xe2
 8008006:	d009      	beq.n	800801c <nRF24_WriteReg+0x64>
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2be3      	cmp	r3, #227	; 0xe3
 800800c:	d006      	beq.n	800801c <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 800800e:	79fb      	ldrb	r3, [r7, #7]
 8008010:	2bff      	cmp	r3, #255	; 0xff
 8008012:	d003      	beq.n	800801c <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 8008014:	79bb      	ldrb	r3, [r7, #6]
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff ff98 	bl	8007f4c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800801c:	f7ff ff8a 	bl	8007f34 <nRF24_CSN_H>
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	6039      	str	r1, [r7, #0]
 8008032:	71fb      	strb	r3, [r7, #7]
 8008034:	4613      	mov	r3, r2
 8008036:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8008038:	f7ff ff70 	bl	8007f1c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	4618      	mov	r0, r3
 8008040:	f7ff ff84 	bl	8007f4c <nRF24_LL_RW>
	while (count--)
 8008044:	e007      	b.n	8008056 <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8008046:	683c      	ldr	r4, [r7, #0]
 8008048:	1c63      	adds	r3, r4, #1
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	20ff      	movs	r0, #255	; 0xff
 800804e:	f7ff ff7d 	bl	8007f4c <nRF24_LL_RW>
 8008052:	4603      	mov	r3, r0
 8008054:	7023      	strb	r3, [r4, #0]
	while (count--)
 8008056:	79bb      	ldrb	r3, [r7, #6]
 8008058:	1e5a      	subs	r2, r3, #1
 800805a:	71ba      	strb	r2, [r7, #6]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1f2      	bne.n	8008046 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8008060:	f7ff ff68 	bl	8007f34 <nRF24_CSN_H>
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	bd90      	pop	{r4, r7, pc}

0800806c <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	6039      	str	r1, [r7, #0]
 8008076:	71fb      	strb	r3, [r7, #7]
 8008078:	4613      	mov	r3, r2
 800807a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800807c:	f7ff ff4e 	bl	8007f1c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff ff62 	bl	8007f4c <nRF24_LL_RW>
	while (count--)
 8008088:	e006      	b.n	8008098 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	603a      	str	r2, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff ff5a 	bl	8007f4c <nRF24_LL_RW>
	while (count--)
 8008098:	79bb      	ldrb	r3, [r7, #6]
 800809a:	1e5a      	subs	r2, r3, #1
 800809c:	71ba      	strb	r2, [r7, #6]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1f3      	bne.n	800808a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80080a2:	f7ff ff47 	bl	8007f34 <nRF24_CSN_H>
}
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 80080b2:	2108      	movs	r1, #8
 80080b4:	2000      	movs	r0, #0
 80080b6:	f7ff ff7f 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 80080ba:	213f      	movs	r1, #63	; 0x3f
 80080bc:	2001      	movs	r0, #1
 80080be:	f7ff ff7b 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 80080c2:	2103      	movs	r1, #3
 80080c4:	2002      	movs	r0, #2
 80080c6:	f7ff ff77 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 80080ca:	2103      	movs	r1, #3
 80080cc:	2003      	movs	r0, #3
 80080ce:	f7ff ff73 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 80080d2:	2103      	movs	r1, #3
 80080d4:	2004      	movs	r0, #4
 80080d6:	f7ff ff6f 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 80080da:	2102      	movs	r1, #2
 80080dc:	2005      	movs	r0, #5
 80080de:	f7ff ff6b 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 80080e2:	210e      	movs	r1, #14
 80080e4:	2006      	movs	r0, #6
 80080e6:	f7ff ff67 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80080ea:	2100      	movs	r1, #0
 80080ec:	2007      	movs	r0, #7
 80080ee:	f7ff ff63 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 80080f2:	2100      	movs	r1, #0
 80080f4:	2011      	movs	r0, #17
 80080f6:	f7ff ff5f 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 80080fa:	2100      	movs	r1, #0
 80080fc:	2012      	movs	r0, #18
 80080fe:	f7ff ff5b 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8008102:	2100      	movs	r1, #0
 8008104:	2013      	movs	r0, #19
 8008106:	f7ff ff57 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800810a:	2100      	movs	r1, #0
 800810c:	2014      	movs	r0, #20
 800810e:	f7ff ff53 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8008112:	2100      	movs	r1, #0
 8008114:	2015      	movs	r0, #21
 8008116:	f7ff ff4f 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800811a:	2100      	movs	r1, #0
 800811c:	2016      	movs	r0, #22
 800811e:	f7ff ff4b 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8008122:	2100      	movs	r1, #0
 8008124:	201c      	movs	r0, #28
 8008126:	f7ff ff47 	bl	8007fb8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800812a:	2100      	movs	r1, #0
 800812c:	201d      	movs	r0, #29
 800812e:	f7ff ff43 	bl	8007fb8 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 8008132:	f000 f98f 	bl	8008454 <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 8008136:	f000 f985 	bl	8008444 <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 800813a:	f000 f993 	bl	8008464 <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 800813e:	f7ff fef9 	bl	8007f34 <nRF24_CSN_H>
}
 8008142:	bf00      	nop
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800814e:	4b14      	ldr	r3, [pc, #80]	; (80081a0 <nRF24_Check+0x58>)
 8008150:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8008152:	2205      	movs	r2, #5
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	2030      	movs	r0, #48	; 0x30
 8008158:	f7ff ff88 	bl	800806c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 800815c:	463b      	mov	r3, r7
 800815e:	2205      	movs	r2, #5
 8008160:	4619      	mov	r1, r3
 8008162:	2010      	movs	r0, #16
 8008164:	f7ff ff60 	bl	8008028 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
 800816c:	e00f      	b.n	800818e <nRF24_Check+0x46>
	{
		if (rxbuf[i] != *ptr++)
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	3310      	adds	r3, #16
 8008172:	443b      	add	r3, r7
 8008174:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	1c59      	adds	r1, r3, #1
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d001      	beq.n	8008188 <nRF24_Check+0x40>
			return 0;
 8008184:	2300      	movs	r3, #0
 8008186:	e006      	b.n	8008196 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++)
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	3301      	adds	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	2b04      	cmp	r3, #4
 8008192:	d9ec      	bls.n	800816e <nRF24_Check+0x26>
	}

	return 1;
 8008194:	2301      	movs	r3, #1
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	0800b7fc 	.word	0x0800b7fc

080081a4 <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80081ae:	2000      	movs	r0, #0
 80081b0:	f7ff fee8 	bl	8007f84 <nRF24_ReadReg>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 80081b8:	79fb      	ldrb	r3, [r7, #7]
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d104      	bne.n	80081c8 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	f043 0302 	orr.w	r3, r3, #2
 80081c4:	73fb      	strb	r3, [r7, #15]
 80081c6:	e003      	b.n	80081d0 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	f023 0302 	bic.w	r3, r3, #2
 80081ce:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	4619      	mov	r1, r3
 80081d4:	2000      	movs	r0, #0
 80081d6:	f7ff feef 	bl	8007fb8 <nRF24_WriteReg>
}
 80081da:	bf00      	nop
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	4603      	mov	r3, r0
 80081ea:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80081ec:	2000      	movs	r0, #0
 80081ee:	f7ff fec9 	bl	8007f84 <nRF24_ReadReg>
 80081f2:	4603      	mov	r3, r0
 80081f4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80081fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	b25a      	sxtb	r2, r3
 8008208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800820c:	4313      	orrs	r3, r2
 800820e:	b25b      	sxtb	r3, r3
 8008210:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	4619      	mov	r1, r3
 8008216:	2000      	movs	r0, #0
 8008218:	f7ff fece 	bl	8007fb8 <nRF24_WriteReg>
}
 800821c:	bf00      	nop
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800822e:	2000      	movs	r0, #0
 8008230:	f7ff fea8 	bl	8007f84 <nRF24_ReadReg>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	f023 030c 	bic.w	r3, r3, #12
 800823e:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8008240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008244:	f003 030c 	and.w	r3, r3, #12
 8008248:	b25a      	sxtb	r2, r3
 800824a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800824e:	4313      	orrs	r3, r2
 8008250:	b25b      	sxtb	r3, r3
 8008252:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	4619      	mov	r1, r3
 8008258:	2000      	movs	r0, #0
 800825a:	f7ff fead 	bl	8007fb8 <nRF24_WriteReg>
}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	4603      	mov	r3, r0
 800826e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	4619      	mov	r1, r3
 8008274:	2005      	movs	r0, #5
 8008276:	f7ff fe9f 	bl	8007fb8 <nRF24_WriteReg>
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <nRF24_SetAutoRetr>:
// input:
//   ard -Thời gian giữa những lần truyền lại
//   arc - Số lần truyện lại (tối đa 15)
// note: 0x00 có nghĩa là tắt chức năng truyền lại
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	4603      	mov	r3, r0
 800828a:	460a      	mov	r2, r1
 800828c:	71fb      	strb	r3, [r7, #7]
 800828e:	4613      	mov	r3, r2
 8008290:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	b25a      	sxtb	r2, r3
 8008298:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800829c:	f003 030f 	and.w	r3, r3, #15
 80082a0:	b25b      	sxtb	r3, r3
 80082a2:	4313      	orrs	r3, r2
 80082a4:	b25b      	sxtb	r3, r3
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	4619      	mov	r1, r3
 80082aa:	2004      	movs	r0, #4
 80082ac:	f7ff fe84 	bl	8007fb8 <nRF24_WriteReg>
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80082c2:	79fb      	ldrb	r3, [r7, #7]
 80082c4:	3b02      	subs	r3, #2
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	4619      	mov	r1, r3
 80082ca:	2003      	movs	r0, #3
 80082cc:	f7ff fe74 	bl	8007fb8 <nRF24_WriteReg>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	2b06      	cmp	r3, #6
 80082e8:	d00a      	beq.n	8008300 <nRF24_SetAddr+0x28>
 80082ea:	2b06      	cmp	r3, #6
 80082ec:	dc36      	bgt.n	800835c <nRF24_SetAddr+0x84>
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	dc02      	bgt.n	80082f8 <nRF24_SetAddr+0x20>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	da04      	bge.n	8008300 <nRF24_SetAddr+0x28>
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
		break;
	default:
		break;
 80082f6:	e031      	b.n	800835c <nRF24_SetAddr+0x84>
 80082f8:	3b02      	subs	r3, #2
	switch (pipe)
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d82e      	bhi.n	800835c <nRF24_SetAddr+0x84>
 80082fe:	e023      	b.n	8008348 <nRF24_SetAddr+0x70>
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8008300:	2003      	movs	r0, #3
 8008302:	f7ff fe3f 	bl	8007f84 <nRF24_ReadReg>
 8008306:	4603      	mov	r3, r0
 8008308:	3301      	adds	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
		addr += addr_width;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	4413      	add	r3, r2
 8008312:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 8008314:	f7ff fe02 	bl	8007f1c <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	4a13      	ldr	r2, [pc, #76]	; (8008368 <nRF24_SetAddr+0x90>)
 800831c:	5cd3      	ldrb	r3, [r2, r3]
 800831e:	f043 0320 	orr.w	r3, r3, #32
 8008322:	b2db      	uxtb	r3, r3
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fe11 	bl	8007f4c <nRF24_LL_RW>
			nRF24_LL_RW(*addr--);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	1e5a      	subs	r2, r3, #1
 800832e:	603a      	str	r2, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f7ff fe0a 	bl	8007f4c <nRF24_LL_RW>
		} while (addr_width--);
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	1e5a      	subs	r2, r3, #1
 800833c:	73fa      	strb	r2, [r7, #15]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f3      	bne.n	800832a <nRF24_SetAddr+0x52>
		nRF24_CSN_H();
 8008342:	f7ff fdf7 	bl	8007f34 <nRF24_CSN_H>
		break;
 8008346:	e00a      	b.n	800835e <nRF24_SetAddr+0x86>
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8008348:	79fb      	ldrb	r3, [r7, #7]
 800834a:	4a07      	ldr	r2, [pc, #28]	; (8008368 <nRF24_SetAddr+0x90>)
 800834c:	5cd2      	ldrb	r2, [r2, r3]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	4619      	mov	r1, r3
 8008354:	4610      	mov	r0, r2
 8008356:	f7ff fe2f 	bl	8007fb8 <nRF24_WriteReg>
		break;
 800835a:	e000      	b.n	800835e <nRF24_SetAddr+0x86>
		break;
 800835c:	bf00      	nop
	}
}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	0800b850 	.word	0x0800b850

0800836c <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8008376:	2006      	movs	r0, #6
 8008378:	f7ff fe04 	bl	8007f84 <nRF24_ReadReg>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	f023 0306 	bic.w	r3, r3, #6
 8008386:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8008388:	7bfa      	ldrb	r2, [r7, #15]
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	4313      	orrs	r3, r2
 800838e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	4619      	mov	r1, r3
 8008394:	2006      	movs	r0, #6
 8008396:	f7ff fe0f 	bl	8007fb8 <nRF24_WriteReg>
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	4603      	mov	r3, r0
 80083aa:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80083ac:	2006      	movs	r0, #6
 80083ae:	f7ff fde9 	bl	8007f84 <nRF24_ReadReg>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80083bc:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80083be:	7bfa      	ldrb	r2, [r7, #15]
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	4619      	mov	r1, r3
 80083ca:	2006      	movs	r0, #6
 80083cc:	f7ff fdf4 	bl	8007fb8 <nRF24_WriteReg>
}
 80083d0:	bf00      	nop
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <nRF24_EnableAA>:
 * @brief CHo phép auto retransmit cho từng pipe
 *
 * @param pipe pipe cần cấu hình
 */
void nRF24_EnableAA(uint8_t pipe)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80083e2:	2001      	movs	r0, #1
 80083e4:	f7ff fdce 	bl	8007f84 <nRF24_ReadReg>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	2201      	movs	r2, #1
 80083f0:	fa02 f303 	lsl.w	r3, r2, r3
 80083f4:	b25a      	sxtb	r2, r3
 80083f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	b25b      	sxtb	r3, r3
 80083fe:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	4619      	mov	r1, r3
 8008404:	2001      	movs	r0, #1
 8008406:	f7ff fdd7 	bl	8007fb8 <nRF24_WriteReg>
}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <nRF24_GetStatus>:
 * @brief lấy giá trị STATUS register
 *
 * @return uint8_t Giá trị của STATUS
 */
uint8_t nRF24_GetStatus(void)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8008416:	2007      	movs	r0, #7
 8008418:	f7ff fdb4 	bl	8007f84 <nRF24_ReadReg>
 800841c:	4603      	mov	r3, r0
}
 800841e:	4618      	mov	r0, r3
 8008420:	bd80      	pop	{r7, pc}

08008422 <nRF24_ResetPLOS>:
/**
 * @brief Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
 *
 */
void nRF24_ResetPLOS(void)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 8008428:	2005      	movs	r0, #5
 800842a:	f7ff fdab 	bl	8007f84 <nRF24_ReadReg>
 800842e:	4603      	mov	r3, r0
 8008430:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	4619      	mov	r1, r3
 8008436:	2005      	movs	r0, #5
 8008438:	f7ff fdbe 	bl	8007fb8 <nRF24_WriteReg>
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8008448:	21ff      	movs	r1, #255	; 0xff
 800844a:	20e1      	movs	r0, #225	; 0xe1
 800844c:	f7ff fdb4 	bl	8007fb8 <nRF24_WriteReg>
}
 8008450:	bf00      	nop
 8008452:	bd80      	pop	{r7, pc}

08008454 <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8008458:	21ff      	movs	r1, #255	; 0xff
 800845a:	20e2      	movs	r0, #226	; 0xe2
 800845c:	f7ff fdac 	bl	8007fb8 <nRF24_WriteReg>
}
 8008460:	bf00      	nop
 8008462:	bd80      	pop	{r7, pc}

08008464 <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 800846a:	2007      	movs	r0, #7
 800846c:	f7ff fd8a 	bl	8007f84 <nRF24_ReadReg>
 8008470:	4603      	mov	r3, r0
 8008472:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800847a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	4619      	mov	r1, r3
 8008480:	2007      	movs	r0, #7
 8008482:	f7ff fd99 	bl	8007fb8 <nRF24_WriteReg>
}
 8008486:	bf00      	nop
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <nRF24_WritePayload>:
 *
 * @param pBuf con trỏ , trỏ tới buffer chứa paylaod
 * @param length độ dài của paylaod
 */
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	461a      	mov	r2, r3
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	20a0      	movs	r0, #160	; 0xa0
 80084a2:	f7ff fde3 	bl	800806c <nRF24_WriteMBReg>
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <calculate_PID>:

//-----------------------------------------------------------------------------
// calculate PID
//-----------------------------------------------------------------------------
void calculate_PID(uint16_t roll_rc, uint16_t pitch_rc, uint16_t yaw_rc, float roll_angle, float pitch_angle, float yaw_angle, PID_t *PID_out)
{
 80084b0:	b5b0      	push	{r4, r5, r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	607b      	str	r3, [r7, #4]
 80084b8:	4603      	mov	r3, r0
 80084ba:	81fb      	strh	r3, [r7, #14]
 80084bc:	460b      	mov	r3, r1
 80084be:	81bb      	strh	r3, [r7, #12]
 80084c0:	4613      	mov	r3, r2
 80084c2:	817b      	strh	r3, [r7, #10]

    if (yaw_rc > 1390)
 80084c4:	897b      	ldrh	r3, [r7, #10]
 80084c6:	f240 526e 	movw	r2, #1390	; 0x56e
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d91a      	bls.n	8008504 <calculate_PID+0x54>
    {
        setpoint_yaw = setpoint_yaw + 0.7; // 0.7 is the rate of change of yaw
 80084ce:	4b0c      	ldr	r3, [pc, #48]	; (8008500 <calculate_PID+0x50>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7f7 ffa0 	bl	8000418 <__aeabi_f2d>
 80084d8:	a307      	add	r3, pc, #28	; (adr r3, 80084f8 <calculate_PID+0x48>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f7f7 fe3d 	bl	800015c <__adddf3>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4610      	mov	r0, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	f7f8 fabd 	bl	8000a68 <__aeabi_d2f>
 80084ee:	4603      	mov	r3, r0
 80084f0:	4a03      	ldr	r2, [pc, #12]	; (8008500 <calculate_PID+0x50>)
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	e01e      	b.n	8008534 <calculate_PID+0x84>
 80084f6:	bf00      	nop
 80084f8:	66666666 	.word	0x66666666
 80084fc:	3fe66666 	.word	0x3fe66666
 8008500:	20000364 	.word	0x20000364
    }                                      // more than 0.7 means faster yaw rotation
                                           // less than 0.7 means slower yaw rotation
    else if (yaw_rc < 1357)
 8008504:	897b      	ldrh	r3, [r7, #10]
 8008506:	f240 524c 	movw	r2, #1356	; 0x54c
 800850a:	4293      	cmp	r3, r2
 800850c:	d812      	bhi.n	8008534 <calculate_PID+0x84>
    {
        setpoint_yaw = setpoint_yaw - 0.7;
 800850e:	4bbc      	ldr	r3, [pc, #752]	; (8008800 <calculate_PID+0x350>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4618      	mov	r0, r3
 8008514:	f7f7 ff80 	bl	8000418 <__aeabi_f2d>
 8008518:	a3ad      	add	r3, pc, #692	; (adr r3, 80087d0 <calculate_PID+0x320>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f7f7 fe1b 	bl	8000158 <__aeabi_dsub>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4610      	mov	r0, r2
 8008528:	4619      	mov	r1, r3
 800852a:	f7f8 fa9d 	bl	8000a68 <__aeabi_d2f>
 800852e:	4603      	mov	r3, r0
 8008530:	4ab3      	ldr	r2, [pc, #716]	; (8008800 <calculate_PID+0x350>)
 8008532:	6013      	str	r3, [r2, #0]
    }

    // pitch PID calculations
    error = setpoint_pitch - pitch_angle * 12.5 - 1500;
 8008534:	4bb3      	ldr	r3, [pc, #716]	; (8008804 <calculate_PID+0x354>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f7f7 ff6d 	bl	8000418 <__aeabi_f2d>
 800853e:	4604      	mov	r4, r0
 8008540:	460d      	mov	r5, r1
 8008542:	6a38      	ldr	r0, [r7, #32]
 8008544:	f7f7 ff68 	bl	8000418 <__aeabi_f2d>
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	4bae      	ldr	r3, [pc, #696]	; (8008808 <calculate_PID+0x358>)
 800854e:	f7f7 ffbb 	bl	80004c8 <__aeabi_dmul>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f7 fdfd 	bl	8000158 <__aeabi_dsub>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	4610      	mov	r0, r2
 8008564:	4619      	mov	r1, r3
 8008566:	a39c      	add	r3, pc, #624	; (adr r3, 80087d8 <calculate_PID+0x328>)
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f7f7 fdf4 	bl	8000158 <__aeabi_dsub>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4610      	mov	r0, r2
 8008576:	4619      	mov	r1, r3
 8008578:	f7f8 fa76 	bl	8000a68 <__aeabi_d2f>
 800857c:	4603      	mov	r3, r0
 800857e:	4aa3      	ldr	r2, [pc, #652]	; (800880c <calculate_PID+0x35c>)
 8008580:	6013      	str	r3, [r2, #0]
    Pterm_pitch = error * Kp_pitch;
 8008582:	4ba2      	ldr	r3, [pc, #648]	; (800880c <calculate_PID+0x35c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800858a:	4618      	mov	r0, r3
 800858c:	f7f8 fbca 	bl	8000d24 <__aeabi_fmul>
 8008590:	4603      	mov	r3, r0
 8008592:	461a      	mov	r2, r3
 8008594:	4b9e      	ldr	r3, [pc, #632]	; (8008810 <calculate_PID+0x360>)
 8008596:	601a      	str	r2, [r3, #0]
    Iterm_pitch += (error + last_error_pitch) * Ki_pitch * dt / 2;
 8008598:	4b9e      	ldr	r3, [pc, #632]	; (8008814 <calculate_PID+0x364>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4618      	mov	r0, r3
 800859e:	f7f7 ff3b 	bl	8000418 <__aeabi_f2d>
 80085a2:	4604      	mov	r4, r0
 80085a4:	460d      	mov	r5, r1
 80085a6:	4b99      	ldr	r3, [pc, #612]	; (800880c <calculate_PID+0x35c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a9b      	ldr	r2, [pc, #620]	; (8008818 <calculate_PID+0x368>)
 80085ac:	6812      	ldr	r2, [r2, #0]
 80085ae:	4611      	mov	r1, r2
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7f8 faaf 	bl	8000b14 <__addsf3>
 80085b6:	4603      	mov	r3, r0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7f7 ff2d 	bl	8000418 <__aeabi_f2d>
 80085be:	f04f 0200 	mov.w	r2, #0
 80085c2:	f04f 0300 	mov.w	r3, #0
 80085c6:	f7f7 ff7f 	bl	80004c8 <__aeabi_dmul>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4610      	mov	r0, r2
 80085d0:	4619      	mov	r1, r3
 80085d2:	a383      	add	r3, pc, #524	; (adr r3, 80087e0 <calculate_PID+0x330>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f7f7 ff76 	bl	80004c8 <__aeabi_dmul>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4610      	mov	r0, r2
 80085e2:	4619      	mov	r1, r3
 80085e4:	f04f 0200 	mov.w	r2, #0
 80085e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085ec:	f7f8 f896 	bl	800071c <__aeabi_ddiv>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4620      	mov	r0, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	f7f7 fdb0 	bl	800015c <__adddf3>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4610      	mov	r0, r2
 8008602:	4619      	mov	r1, r3
 8008604:	f7f8 fa30 	bl	8000a68 <__aeabi_d2f>
 8008608:	4603      	mov	r3, r0
 800860a:	4a82      	ldr	r2, [pc, #520]	; (8008814 <calculate_PID+0x364>)
 800860c:	6013      	str	r3, [r2, #0]
    Dterm_pitch = (error - last_error_pitch) * Kd_pitch / dt;
 800860e:	4b7f      	ldr	r3, [pc, #508]	; (800880c <calculate_PID+0x35c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a81      	ldr	r2, [pc, #516]	; (8008818 <calculate_PID+0x368>)
 8008614:	6812      	ldr	r2, [r2, #0]
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f7f8 fa79 	bl	8000b10 <__aeabi_fsub>
 800861e:	4603      	mov	r3, r0
 8008620:	4618      	mov	r0, r3
 8008622:	f7f7 fef9 	bl	8000418 <__aeabi_f2d>
 8008626:	a370      	add	r3, pc, #448	; (adr r3, 80087e8 <calculate_PID+0x338>)
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f7f7 ff4c 	bl	80004c8 <__aeabi_dmul>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4610      	mov	r0, r2
 8008636:	4619      	mov	r1, r3
 8008638:	a369      	add	r3, pc, #420	; (adr r3, 80087e0 <calculate_PID+0x330>)
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	f7f8 f86d 	bl	800071c <__aeabi_ddiv>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4610      	mov	r0, r2
 8008648:	4619      	mov	r1, r3
 800864a:	f7f8 fa0d 	bl	8000a68 <__aeabi_d2f>
 800864e:	4603      	mov	r3, r0
 8008650:	4a72      	ldr	r2, [pc, #456]	; (800881c <calculate_PID+0x36c>)
 8008652:	6013      	str	r3, [r2, #0]
    last_error_pitch = error;
 8008654:	4b6d      	ldr	r3, [pc, #436]	; (800880c <calculate_PID+0x35c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a6f      	ldr	r2, [pc, #444]	; (8008818 <calculate_PID+0x368>)
 800865a:	6013      	str	r3, [r2, #0]
    PID_pitch_out = Pterm_pitch + Iterm_pitch + Dterm_pitch;
 800865c:	4b6c      	ldr	r3, [pc, #432]	; (8008810 <calculate_PID+0x360>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a6c      	ldr	r2, [pc, #432]	; (8008814 <calculate_PID+0x364>)
 8008662:	6812      	ldr	r2, [r2, #0]
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f7f8 fa54 	bl	8000b14 <__addsf3>
 800866c:	4603      	mov	r3, r0
 800866e:	461a      	mov	r2, r3
 8008670:	4b6a      	ldr	r3, [pc, #424]	; (800881c <calculate_PID+0x36c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f7f8 fa4c 	bl	8000b14 <__addsf3>
 800867c:	4603      	mov	r3, r0
 800867e:	461a      	mov	r2, r3
 8008680:	4b67      	ldr	r3, [pc, #412]	; (8008820 <calculate_PID+0x370>)
 8008682:	601a      	str	r2, [r3, #0]
    if (PID_pitch_out > MAX_pitch_output)
 8008684:	4b66      	ldr	r3, [pc, #408]	; (8008820 <calculate_PID+0x370>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4966      	ldr	r1, [pc, #408]	; (8008824 <calculate_PID+0x374>)
 800868a:	4618      	mov	r0, r3
 800868c:	f7f8 fd06 	bl	800109c <__aeabi_fcmpgt>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d002      	beq.n	800869c <calculate_PID+0x1ec>
        PID_pitch_out = MAX_pitch_output;
 8008696:	4b62      	ldr	r3, [pc, #392]	; (8008820 <calculate_PID+0x370>)
 8008698:	4a62      	ldr	r2, [pc, #392]	; (8008824 <calculate_PID+0x374>)
 800869a:	601a      	str	r2, [r3, #0]
    if (PID_pitch_out < -MAX_pitch_output)
 800869c:	4b60      	ldr	r3, [pc, #384]	; (8008820 <calculate_PID+0x370>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4961      	ldr	r1, [pc, #388]	; (8008828 <calculate_PID+0x378>)
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f8 fcdc 	bl	8001060 <__aeabi_fcmplt>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <calculate_PID+0x204>
        PID_pitch_out = -MAX_pitch_output;
 80086ae:	4b5c      	ldr	r3, [pc, #368]	; (8008820 <calculate_PID+0x370>)
 80086b0:	4a5d      	ldr	r2, [pc, #372]	; (8008828 <calculate_PID+0x378>)
 80086b2:	601a      	str	r2, [r3, #0]

    // roll PID calculations
    error = setpoint_roll + roll_angle * 12.5 - 1500;
 80086b4:	4b5d      	ldr	r3, [pc, #372]	; (800882c <calculate_PID+0x37c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7f7 fead 	bl	8000418 <__aeabi_f2d>
 80086be:	4604      	mov	r4, r0
 80086c0:	460d      	mov	r5, r1
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7f7 fea8 	bl	8000418 <__aeabi_f2d>
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	4b4e      	ldr	r3, [pc, #312]	; (8008808 <calculate_PID+0x358>)
 80086ce:	f7f7 fefb 	bl	80004c8 <__aeabi_dmul>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4620      	mov	r0, r4
 80086d8:	4629      	mov	r1, r5
 80086da:	f7f7 fd3f 	bl	800015c <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4610      	mov	r0, r2
 80086e4:	4619      	mov	r1, r3
 80086e6:	a33c      	add	r3, pc, #240	; (adr r3, 80087d8 <calculate_PID+0x328>)
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	f7f7 fd34 	bl	8000158 <__aeabi_dsub>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4610      	mov	r0, r2
 80086f6:	4619      	mov	r1, r3
 80086f8:	f7f8 f9b6 	bl	8000a68 <__aeabi_d2f>
 80086fc:	4603      	mov	r3, r0
 80086fe:	4a43      	ldr	r2, [pc, #268]	; (800880c <calculate_PID+0x35c>)
 8008700:	6013      	str	r3, [r2, #0]
    Pterm_roll = error * Kp_roll;
 8008702:	4b42      	ldr	r3, [pc, #264]	; (800880c <calculate_PID+0x35c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f7f7 fe86 	bl	8000418 <__aeabi_f2d>
 800870c:	a338      	add	r3, pc, #224	; (adr r3, 80087f0 <calculate_PID+0x340>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	f7f7 fed9 	bl	80004c8 <__aeabi_dmul>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4610      	mov	r0, r2
 800871c:	4619      	mov	r1, r3
 800871e:	f7f8 f9a3 	bl	8000a68 <__aeabi_d2f>
 8008722:	4603      	mov	r3, r0
 8008724:	4a42      	ldr	r2, [pc, #264]	; (8008830 <calculate_PID+0x380>)
 8008726:	6013      	str	r3, [r2, #0]
    Iterm_roll += (error + last_error_roll) * Ki_roll * dt / 2;
 8008728:	4b42      	ldr	r3, [pc, #264]	; (8008834 <calculate_PID+0x384>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4618      	mov	r0, r3
 800872e:	f7f7 fe73 	bl	8000418 <__aeabi_f2d>
 8008732:	4604      	mov	r4, r0
 8008734:	460d      	mov	r5, r1
 8008736:	4b35      	ldr	r3, [pc, #212]	; (800880c <calculate_PID+0x35c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a3f      	ldr	r2, [pc, #252]	; (8008838 <calculate_PID+0x388>)
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	4611      	mov	r1, r2
 8008740:	4618      	mov	r0, r3
 8008742:	f7f8 f9e7 	bl	8000b14 <__addsf3>
 8008746:	4603      	mov	r3, r0
 8008748:	4618      	mov	r0, r3
 800874a:	f7f7 fe65 	bl	8000418 <__aeabi_f2d>
 800874e:	f04f 0200 	mov.w	r2, #0
 8008752:	f04f 0300 	mov.w	r3, #0
 8008756:	f7f7 feb7 	bl	80004c8 <__aeabi_dmul>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4610      	mov	r0, r2
 8008760:	4619      	mov	r1, r3
 8008762:	a31f      	add	r3, pc, #124	; (adr r3, 80087e0 <calculate_PID+0x330>)
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	f7f7 feae 	bl	80004c8 <__aeabi_dmul>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	4610      	mov	r0, r2
 8008772:	4619      	mov	r1, r3
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800877c:	f7f7 ffce 	bl	800071c <__aeabi_ddiv>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4620      	mov	r0, r4
 8008786:	4629      	mov	r1, r5
 8008788:	f7f7 fce8 	bl	800015c <__adddf3>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4610      	mov	r0, r2
 8008792:	4619      	mov	r1, r3
 8008794:	f7f8 f968 	bl	8000a68 <__aeabi_d2f>
 8008798:	4603      	mov	r3, r0
 800879a:	4a26      	ldr	r2, [pc, #152]	; (8008834 <calculate_PID+0x384>)
 800879c:	6013      	str	r3, [r2, #0]
    Dterm_roll = (error - last_error_roll) * Kd_roll / dt;
 800879e:	4b1b      	ldr	r3, [pc, #108]	; (800880c <calculate_PID+0x35c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a25      	ldr	r2, [pc, #148]	; (8008838 <calculate_PID+0x388>)
 80087a4:	6812      	ldr	r2, [r2, #0]
 80087a6:	4611      	mov	r1, r2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7f8 f9b1 	bl	8000b10 <__aeabi_fsub>
 80087ae:	4603      	mov	r3, r0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7f7 fe31 	bl	8000418 <__aeabi_f2d>
 80087b6:	a310      	add	r3, pc, #64	; (adr r3, 80087f8 <calculate_PID+0x348>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	f7f7 fe84 	bl	80004c8 <__aeabi_dmul>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4610      	mov	r0, r2
 80087c6:	4619      	mov	r1, r3
 80087c8:	e038      	b.n	800883c <calculate_PID+0x38c>
 80087ca:	bf00      	nop
 80087cc:	f3af 8000 	nop.w
 80087d0:	66666666 	.word	0x66666666
 80087d4:	3fe66666 	.word	0x3fe66666
 80087d8:	00000000 	.word	0x00000000
 80087dc:	40977000 	.word	0x40977000
 80087e0:	47ae147b 	.word	0x47ae147b
 80087e4:	3f947ae1 	.word	0x3f947ae1
 80087e8:	66666666 	.word	0x66666666
 80087ec:	400a6666 	.word	0x400a6666
 80087f0:	9999999a 	.word	0x9999999a
 80087f4:	3fd99999 	.word	0x3fd99999
 80087f8:	33333333 	.word	0x33333333
 80087fc:	40133333 	.word	0x40133333
 8008800:	20000364 	.word	0x20000364
 8008804:	20000360 	.word	0x20000360
 8008808:	40290000 	.word	0x40290000
 800880c:	2000031c 	.word	0x2000031c
 8008810:	20000320 	.word	0x20000320
 8008814:	20000324 	.word	0x20000324
 8008818:	2000032c 	.word	0x2000032c
 800881c:	20000328 	.word	0x20000328
 8008820:	20000330 	.word	0x20000330
 8008824:	43e30000 	.word	0x43e30000
 8008828:	c3e30000 	.word	0xc3e30000
 800882c:	2000035c 	.word	0x2000035c
 8008830:	20000334 	.word	0x20000334
 8008834:	20000338 	.word	0x20000338
 8008838:	20000340 	.word	0x20000340
 800883c:	a38e      	add	r3, pc, #568	; (adr r3, 8008a78 <calculate_PID+0x5c8>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f7f7 ff6b 	bl	800071c <__aeabi_ddiv>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4610      	mov	r0, r2
 800884c:	4619      	mov	r1, r3
 800884e:	f7f8 f90b 	bl	8000a68 <__aeabi_d2f>
 8008852:	4603      	mov	r3, r0
 8008854:	4a8c      	ldr	r2, [pc, #560]	; (8008a88 <calculate_PID+0x5d8>)
 8008856:	6013      	str	r3, [r2, #0]
    last_error_roll = error;
 8008858:	4b8c      	ldr	r3, [pc, #560]	; (8008a8c <calculate_PID+0x5dc>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a8c      	ldr	r2, [pc, #560]	; (8008a90 <calculate_PID+0x5e0>)
 800885e:	6013      	str	r3, [r2, #0]
    PID_roll_out = Pterm_roll + Iterm_roll + Dterm_roll;
 8008860:	4b8c      	ldr	r3, [pc, #560]	; (8008a94 <calculate_PID+0x5e4>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a8c      	ldr	r2, [pc, #560]	; (8008a98 <calculate_PID+0x5e8>)
 8008866:	6812      	ldr	r2, [r2, #0]
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f7f8 f952 	bl	8000b14 <__addsf3>
 8008870:	4603      	mov	r3, r0
 8008872:	461a      	mov	r2, r3
 8008874:	4b84      	ldr	r3, [pc, #528]	; (8008a88 <calculate_PID+0x5d8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4619      	mov	r1, r3
 800887a:	4610      	mov	r0, r2
 800887c:	f7f8 f94a 	bl	8000b14 <__addsf3>
 8008880:	4603      	mov	r3, r0
 8008882:	461a      	mov	r2, r3
 8008884:	4b85      	ldr	r3, [pc, #532]	; (8008a9c <calculate_PID+0x5ec>)
 8008886:	601a      	str	r2, [r3, #0]
    if (PID_roll_out > MAX_roll_output)
 8008888:	4b84      	ldr	r3, [pc, #528]	; (8008a9c <calculate_PID+0x5ec>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4984      	ldr	r1, [pc, #528]	; (8008aa0 <calculate_PID+0x5f0>)
 800888e:	4618      	mov	r0, r3
 8008890:	f7f8 fc04 	bl	800109c <__aeabi_fcmpgt>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <calculate_PID+0x3f0>
        PID_roll_out = MAX_roll_output;
 800889a:	4b80      	ldr	r3, [pc, #512]	; (8008a9c <calculate_PID+0x5ec>)
 800889c:	4a80      	ldr	r2, [pc, #512]	; (8008aa0 <calculate_PID+0x5f0>)
 800889e:	601a      	str	r2, [r3, #0]
    if (PID_roll_out < -MAX_roll_output)
 80088a0:	4b7e      	ldr	r3, [pc, #504]	; (8008a9c <calculate_PID+0x5ec>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	497f      	ldr	r1, [pc, #508]	; (8008aa4 <calculate_PID+0x5f4>)
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f8 fbda 	bl	8001060 <__aeabi_fcmplt>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <calculate_PID+0x408>
        PID_roll_out = -MAX_roll_output;
 80088b2:	4b7a      	ldr	r3, [pc, #488]	; (8008a9c <calculate_PID+0x5ec>)
 80088b4:	4a7b      	ldr	r2, [pc, #492]	; (8008aa4 <calculate_PID+0x5f4>)
 80088b6:	601a      	str	r2, [r3, #0]

    // yaw PID calculations
    error = (setpoint_yaw + abs_yaw_angle) * 12.5;
 80088b8:	4b7b      	ldr	r3, [pc, #492]	; (8008aa8 <calculate_PID+0x5f8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a7b      	ldr	r2, [pc, #492]	; (8008aac <calculate_PID+0x5fc>)
 80088be:	6812      	ldr	r2, [r2, #0]
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7f8 f926 	bl	8000b14 <__addsf3>
 80088c8:	4603      	mov	r3, r0
 80088ca:	4979      	ldr	r1, [pc, #484]	; (8008ab0 <calculate_PID+0x600>)
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7f8 fa29 	bl	8000d24 <__aeabi_fmul>
 80088d2:	4603      	mov	r3, r0
 80088d4:	461a      	mov	r2, r3
 80088d6:	4b6d      	ldr	r3, [pc, #436]	; (8008a8c <calculate_PID+0x5dc>)
 80088d8:	601a      	str	r2, [r3, #0]
    Pterm_yaw = error * Kp_yaw;
 80088da:	4b6c      	ldr	r3, [pc, #432]	; (8008a8c <calculate_PID+0x5dc>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7f7 fd9a 	bl	8000418 <__aeabi_f2d>
 80088e4:	a366      	add	r3, pc, #408	; (adr r3, 8008a80 <calculate_PID+0x5d0>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 fded 	bl	80004c8 <__aeabi_dmul>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4610      	mov	r0, r2
 80088f4:	4619      	mov	r1, r3
 80088f6:	f7f8 f8b7 	bl	8000a68 <__aeabi_d2f>
 80088fa:	4603      	mov	r3, r0
 80088fc:	4a6d      	ldr	r2, [pc, #436]	; (8008ab4 <calculate_PID+0x604>)
 80088fe:	6013      	str	r3, [r2, #0]
    Iterm_yaw += (error + last_error_yaw) * Ki_yaw * dt / 2;
 8008900:	4b6d      	ldr	r3, [pc, #436]	; (8008ab8 <calculate_PID+0x608>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4618      	mov	r0, r3
 8008906:	f7f7 fd87 	bl	8000418 <__aeabi_f2d>
 800890a:	4604      	mov	r4, r0
 800890c:	460d      	mov	r5, r1
 800890e:	4b5f      	ldr	r3, [pc, #380]	; (8008a8c <calculate_PID+0x5dc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a6a      	ldr	r2, [pc, #424]	; (8008abc <calculate_PID+0x60c>)
 8008914:	6812      	ldr	r2, [r2, #0]
 8008916:	4611      	mov	r1, r2
 8008918:	4618      	mov	r0, r3
 800891a:	f7f8 f8fb 	bl	8000b14 <__addsf3>
 800891e:	4603      	mov	r3, r0
 8008920:	4618      	mov	r0, r3
 8008922:	f7f7 fd79 	bl	8000418 <__aeabi_f2d>
 8008926:	f04f 0200 	mov.w	r2, #0
 800892a:	f04f 0300 	mov.w	r3, #0
 800892e:	f7f7 fdcb 	bl	80004c8 <__aeabi_dmul>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4610      	mov	r0, r2
 8008938:	4619      	mov	r1, r3
 800893a:	a34f      	add	r3, pc, #316	; (adr r3, 8008a78 <calculate_PID+0x5c8>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fdc2 	bl	80004c8 <__aeabi_dmul>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4610      	mov	r0, r2
 800894a:	4619      	mov	r1, r3
 800894c:	f04f 0200 	mov.w	r2, #0
 8008950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008954:	f7f7 fee2 	bl	800071c <__aeabi_ddiv>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4620      	mov	r0, r4
 800895e:	4629      	mov	r1, r5
 8008960:	f7f7 fbfc 	bl	800015c <__adddf3>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4610      	mov	r0, r2
 800896a:	4619      	mov	r1, r3
 800896c:	f7f8 f87c 	bl	8000a68 <__aeabi_d2f>
 8008970:	4603      	mov	r3, r0
 8008972:	4a51      	ldr	r2, [pc, #324]	; (8008ab8 <calculate_PID+0x608>)
 8008974:	6013      	str	r3, [r2, #0]
    Dterm_yaw = (error - last_error_yaw) * Kd_yaw / dt;
 8008976:	4b45      	ldr	r3, [pc, #276]	; (8008a8c <calculate_PID+0x5dc>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a50      	ldr	r2, [pc, #320]	; (8008abc <calculate_PID+0x60c>)
 800897c:	6812      	ldr	r2, [r2, #0]
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f7f8 f8c5 	bl	8000b10 <__aeabi_fsub>
 8008986:	4603      	mov	r3, r0
 8008988:	4618      	mov	r0, r3
 800898a:	f7f7 fd45 	bl	8000418 <__aeabi_f2d>
 800898e:	f04f 0200 	mov.w	r2, #0
 8008992:	4b4b      	ldr	r3, [pc, #300]	; (8008ac0 <calculate_PID+0x610>)
 8008994:	f7f7 fd98 	bl	80004c8 <__aeabi_dmul>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4610      	mov	r0, r2
 800899e:	4619      	mov	r1, r3
 80089a0:	a335      	add	r3, pc, #212	; (adr r3, 8008a78 <calculate_PID+0x5c8>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f7 feb9 	bl	800071c <__aeabi_ddiv>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4610      	mov	r0, r2
 80089b0:	4619      	mov	r1, r3
 80089b2:	f7f8 f859 	bl	8000a68 <__aeabi_d2f>
 80089b6:	4603      	mov	r3, r0
 80089b8:	4a42      	ldr	r2, [pc, #264]	; (8008ac4 <calculate_PID+0x614>)
 80089ba:	6013      	str	r3, [r2, #0]
    last_error_yaw = error;
 80089bc:	4b33      	ldr	r3, [pc, #204]	; (8008a8c <calculate_PID+0x5dc>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a3e      	ldr	r2, [pc, #248]	; (8008abc <calculate_PID+0x60c>)
 80089c2:	6013      	str	r3, [r2, #0]
    PID_yaw_out = Pterm_yaw + (Iterm_yaw * Ki_yaw) + Dterm_yaw;
 80089c4:	4b3b      	ldr	r3, [pc, #236]	; (8008ab4 <calculate_PID+0x604>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7f7 fd25 	bl	8000418 <__aeabi_f2d>
 80089ce:	4604      	mov	r4, r0
 80089d0:	460d      	mov	r5, r1
 80089d2:	4b39      	ldr	r3, [pc, #228]	; (8008ab8 <calculate_PID+0x608>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f7 fd1e 	bl	8000418 <__aeabi_f2d>
 80089dc:	f04f 0200 	mov.w	r2, #0
 80089e0:	f04f 0300 	mov.w	r3, #0
 80089e4:	f7f7 fd70 	bl	80004c8 <__aeabi_dmul>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4620      	mov	r0, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	f7f7 fbb4 	bl	800015c <__adddf3>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4614      	mov	r4, r2
 80089fa:	461d      	mov	r5, r3
 80089fc:	4b31      	ldr	r3, [pc, #196]	; (8008ac4 <calculate_PID+0x614>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7f7 fd09 	bl	8000418 <__aeabi_f2d>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f7f7 fba5 	bl	800015c <__adddf3>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4610      	mov	r0, r2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f7f8 f825 	bl	8000a68 <__aeabi_d2f>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	4a29      	ldr	r2, [pc, #164]	; (8008ac8 <calculate_PID+0x618>)
 8008a22:	6013      	str	r3, [r2, #0]
    if (PID_yaw_out > MAX_yaw_output)
 8008a24:	4b28      	ldr	r3, [pc, #160]	; (8008ac8 <calculate_PID+0x618>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	491d      	ldr	r1, [pc, #116]	; (8008aa0 <calculate_PID+0x5f0>)
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7f8 fb36 	bl	800109c <__aeabi_fcmpgt>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <calculate_PID+0x58c>
        PID_yaw_out = MAX_yaw_output;
 8008a36:	4b24      	ldr	r3, [pc, #144]	; (8008ac8 <calculate_PID+0x618>)
 8008a38:	4a19      	ldr	r2, [pc, #100]	; (8008aa0 <calculate_PID+0x5f0>)
 8008a3a:	601a      	str	r2, [r3, #0]
    if (PID_yaw_out < -MAX_yaw_output)
 8008a3c:	4b22      	ldr	r3, [pc, #136]	; (8008ac8 <calculate_PID+0x618>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4918      	ldr	r1, [pc, #96]	; (8008aa4 <calculate_PID+0x5f4>)
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7f8 fb0c 	bl	8001060 <__aeabi_fcmplt>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <calculate_PID+0x5a4>
        PID_yaw_out = -MAX_yaw_output;
 8008a4e:	4b1e      	ldr	r3, [pc, #120]	; (8008ac8 <calculate_PID+0x618>)
 8008a50:	4a14      	ldr	r2, [pc, #80]	; (8008aa4 <calculate_PID+0x5f4>)
 8008a52:	601a      	str	r2, [r3, #0]

    PID_out->PID_roll_out = PID_roll_out;
 8008a54:	4b11      	ldr	r3, [pc, #68]	; (8008a9c <calculate_PID+0x5ec>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	601a      	str	r2, [r3, #0]
    PID_out->PID_pitch_out = PID_pitch_out;
 8008a5c:	4b1b      	ldr	r3, [pc, #108]	; (8008acc <calculate_PID+0x61c>)
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	605a      	str	r2, [r3, #4]
    PID_out->PID_yaw_out = PID_yaw_out;
 8008a64:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <calculate_PID+0x618>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	609a      	str	r2, [r3, #8]
}
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bdb0      	pop	{r4, r5, r7, pc}
 8008a74:	f3af 8000 	nop.w
 8008a78:	47ae147b 	.word	0x47ae147b
 8008a7c:	3f947ae1 	.word	0x3f947ae1
 8008a80:	33333333 	.word	0x33333333
 8008a84:	3fc33333 	.word	0x3fc33333
 8008a88:	2000033c 	.word	0x2000033c
 8008a8c:	2000031c 	.word	0x2000031c
 8008a90:	20000340 	.word	0x20000340
 8008a94:	20000334 	.word	0x20000334
 8008a98:	20000338 	.word	0x20000338
 8008a9c:	20000344 	.word	0x20000344
 8008aa0:	43e30000 	.word	0x43e30000
 8008aa4:	c3e30000 	.word	0xc3e30000
 8008aa8:	20000364 	.word	0x20000364
 8008aac:	20000230 	.word	0x20000230
 8008ab0:	41480000 	.word	0x41480000
 8008ab4:	20000348 	.word	0x20000348
 8008ab8:	2000034c 	.word	0x2000034c
 8008abc:	20000354 	.word	0x20000354
 8008ac0:	40080000 	.word	0x40080000
 8008ac4:	20000350 	.word	0x20000350
 8008ac8:	20000358 	.word	0x20000358
 8008acc:	20000330 	.word	0x20000330

08008ad0 <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008ada:	4802      	ldr	r0, [pc, #8]	; (8008ae4 <nRF24_CE_L+0x14>)
 8008adc:	f7f8 fe36 	bl	800174c <HAL_GPIO_WritePin>
}
 8008ae0:	bf00      	nop
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40010800 	.word	0x40010800

08008ae8 <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8008aec:	2201      	movs	r2, #1
 8008aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008af2:	4802      	ldr	r0, [pc, #8]	; (8008afc <nRF24_CE_H+0x14>)
 8008af4:	f7f8 fe2a 	bl	800174c <HAL_GPIO_WritePin>
}
 8008af8:	bf00      	nop
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	40010800 	.word	0x40010800

08008b00 <Delay_ms>:


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7f8 fb69 	bl	80011e0 <HAL_Delay>
 8008b0e:	bf00      	nop
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
	...

08008b18 <Toggle_LED>:

extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8008b1c:	2104      	movs	r1, #4
 8008b1e:	4802      	ldr	r0, [pc, #8]	; (8008b28 <Toggle_LED+0x10>)
 8008b20:	f7f8 fe2c 	bl	800177c <HAL_GPIO_TogglePin>
}
 8008b24:	bf00      	nop
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	40010c00 	.word	0x40010c00

08008b2c <convert_to_us>:

NRF_Packet payload_packet;
uint8_t payload_length;

uint8_t convert_to_us(uint32_t val, uint32_t min, uint32_t middle, uint32_t max)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	603b      	str	r3, [r7, #0]
    if (val > max)
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d901      	bls.n	8008b46 <convert_to_us+0x1a>
        val = max;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	60fb      	str	r3, [r7, #12]
    if (val < min)
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d201      	bcs.n	8008b52 <convert_to_us+0x26>
        val = min;
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	60fb      	str	r3, [r7, #12]
    if (val < middle)
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d20d      	bcs.n	8008b76 <convert_to_us+0x4a>
        return (val - min) * (1500 - 0) / (middle - min) + 0;
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008b64:	fb03 f202 	mul.w	r2, r3, r2
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	1acb      	subs	r3, r1, r3
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	e00e      	b.n	8008b94 <convert_to_us+0x68>
    else
        return (val - middle) * (2000 - 1500) / (max - middle) + 1500;
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008b80:	fb03 f202 	mul.w	r2, r3, r2
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	1acb      	subs	r3, r1, r3
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	3b24      	subs	r3, #36	; 0x24
 8008b92:	b2db      	uxtb	r3, r3
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bc80      	pop	{r7}
 8008b9c:	4770      	bx	lr
	...

08008ba0 <nRF24_TransmitPacket>:
} nRF24_TXResult;

// Length of received payload

nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70fb      	strb	r3, [r7, #3]
    volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8008bac:	4b1c      	ldr	r3, [pc, #112]	; (8008c20 <nRF24_TransmitPacket+0x80>)
 8008bae:	60bb      	str	r3, [r7, #8]
    uint8_t status;
    nRF24_CE_L();
 8008bb0:	f7ff ff8e 	bl	8008ad0 <nRF24_CE_L>
    nRF24_WritePayload(pBuf, length);
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff fc68 	bl	800848e <nRF24_WritePayload>
    nRF24_CE_H();
 8008bbe:	f7ff ff93 	bl	8008ae8 <nRF24_CE_H>

    do
    {
        status = nRF24_GetStatus();
 8008bc2:	f7ff fc26 	bl	8008412 <nRF24_GetStatus>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]
        if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT))
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d105      	bne.n	8008be0 <nRF24_TransmitPacket+0x40>
        {
            break;
        }
    } while (wait--);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	1e5a      	subs	r2, r3, #1
 8008bd8:	60ba      	str	r2, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1f1      	bne.n	8008bc2 <nRF24_TransmitPacket+0x22>
 8008bde:	e000      	b.n	8008be2 <nRF24_TransmitPacket+0x42>
            break;
 8008be0:	bf00      	nop
    nRF24_CE_L();
 8008be2:	f7ff ff75 	bl	8008ad0 <nRF24_CE_L>

    if (!wait)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <nRF24_TransmitPacket+0x50>
        return nRF24_TX_TIMEOUT;
 8008bec:	2302      	movs	r3, #2
 8008bee:	e012      	b.n	8008c16 <nRF24_TransmitPacket+0x76>

    nRF24_ClearIRQFlags();
 8008bf0:	f7ff fc38 	bl	8008464 <nRF24_ClearIRQFlags>

    if (status & nRF24_FLAG_MAX_RT)
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	f003 0310 	and.w	r3, r3, #16
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <nRF24_TransmitPacket+0x62>
        return nRF24_TX_MAXRT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e009      	b.n	8008c16 <nRF24_TransmitPacket+0x76>

    if (status & nRF24_FLAG_TX_DS)
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	f003 0320 	and.w	r3, r3, #32
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <nRF24_TransmitPacket+0x70>
        return nRF24_TX_SUCCESS;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e002      	b.n	8008c16 <nRF24_TransmitPacket+0x76>

    nRF24_FlushTX();
 8008c10:	f7ff fc18 	bl	8008444 <nRF24_FlushTX>

    return nRF24_TX_ERROR;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	000fffff 	.word	0x000fffff

08008c24 <reset_controller>:
void reset_controller(void)
{
 8008c24:	b480      	push	{r7}
 8008c26:	af00      	add	r7, sp, #0
    payload_packet.throttle = 0;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <reset_controller+0x30>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
    payload_packet.yaw = 127;
 8008c2e:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <reset_controller+0x30>)
 8008c30:	227f      	movs	r2, #127	; 0x7f
 8008c32:	705a      	strb	r2, [r3, #1]
    payload_packet.pitch = 127;
 8008c34:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <reset_controller+0x30>)
 8008c36:	227f      	movs	r2, #127	; 0x7f
 8008c38:	709a      	strb	r2, [r3, #2]
    payload_packet.roll = 127;
 8008c3a:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <reset_controller+0x30>)
 8008c3c:	227f      	movs	r2, #127	; 0x7f
 8008c3e:	70da      	strb	r2, [r3, #3]
    payload_packet.button = 0;
 8008c40:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <reset_controller+0x30>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	711a      	strb	r2, [r3, #4]
    payload_packet.button_1 = 0;
 8008c46:	4b03      	ldr	r3, [pc, #12]	; (8008c54 <reset_controller+0x30>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	715a      	strb	r2, [r3, #5]
}
 8008c4c:	bf00      	nop
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr
 8008c54:	20000368 	.word	0x20000368

08008c58 <runRadio>:

#endif // DEMO_TX_

int runRadio(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af02      	add	r7, sp, #8
#if(DEBUG_FC)
	printf("\r\nSTM32 is online.\r\n");
 8008c5e:	4853      	ldr	r0, [pc, #332]	; (8008dac <runRadio+0x154>)
 8008c60:	f000 fbd4 	bl	800940c <puts>
#endif //debug
    nRF24_CE_L();
 8008c64:	f7ff ff34 	bl	8008ad0 <nRF24_CE_L>
#if(DEBUG_FC)
    printf("nRF24L01+ check: ");
 8008c68:	4851      	ldr	r0, [pc, #324]	; (8008db0 <runRadio+0x158>)
 8008c6a:	f000 fb49 	bl	8009300 <iprintf>
#endif
    if (!nRF24_Check())
 8008c6e:	f7ff fa6b 	bl	8008148 <nRF24_Check>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d108      	bne.n	8008c8a <runRadio+0x32>
    {
        while (1)
        {
            Toggle_LED();
 8008c78:	f7ff ff4e 	bl	8008b18 <Toggle_LED>
            Delay_ms(50);
 8008c7c:	2032      	movs	r0, #50	; 0x32
 8008c7e:	f7ff ff3f 	bl	8008b00 <Delay_ms>
#if(DEBUG_FC)
            printf("FAIL\r\n");
 8008c82:	484c      	ldr	r0, [pc, #304]	; (8008db4 <runRadio+0x15c>)
 8008c84:	f000 fbc2 	bl	800940c <puts>
            Toggle_LED();
 8008c88:	e7f6      	b.n	8008c78 <runRadio+0x20>
#endif
        }
    }
    nRF24_Init();
 8008c8a:	f7ff fa10 	bl	80080ae <nRF24_Init>
#if(DEBUG_FC)
    printf("OK\r\n");
 8008c8e:	484a      	ldr	r0, [pc, #296]	; (8008db8 <runRadio+0x160>)
 8008c90:	f000 fbbc 	bl	800940c <puts>
#endif

	nRF24_CE_L();
 8008c94:	f7ff ff1c 	bl	8008ad0 <nRF24_CE_L>

    /***************************************************************************/

#if (TX_SINGLE)

    nRF24_SetRFChannel(40);
 8008c98:	2028      	movs	r0, #40	; 0x28
 8008c9a:	f7ff fae4 	bl	8008266 <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8008c9e:	2008      	movs	r0, #8
 8008ca0:	f7ff fb7f 	bl	80083a2 <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8008ca4:	200c      	movs	r0, #12
 8008ca6:	f7ff fabd 	bl	8008224 <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 8008caa:	2003      	movs	r0, #3
 8008cac:	f7ff fb04 	bl	80082b8 <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 8008cb0:	4942      	ldr	r1, [pc, #264]	; (8008dbc <runRadio+0x164>)
 8008cb2:	2006      	movs	r0, #6
 8008cb4:	f7ff fb10 	bl	80082d8 <nRF24_SetAddr>
    nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR);
 8008cb8:	4940      	ldr	r1, [pc, #256]	; (8008dbc <runRadio+0x164>)
 8008cba:	2000      	movs	r0, #0
 8008cbc:	f7ff fb0c 	bl	80082d8 <nRF24_SetAddr>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8008cc0:	2006      	movs	r0, #6
 8008cc2:	f7ff fb53 	bl	800836c <nRF24_SetTXPower>
    nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 8008cc6:	210a      	movs	r1, #10
 8008cc8:	2009      	movs	r0, #9
 8008cca:	f7ff fada 	bl	8008282 <nRF24_SetAutoRetr>
    nRF24_EnableAA(nRF24_PIPE0);
 8008cce:	2000      	movs	r0, #0
 8008cd0:	f7ff fb82 	bl	80083d8 <nRF24_EnableAA>
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	f7ff fa84 	bl	80081e2 <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 8008cda:	f7ff fbc3 	bl	8008464 <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8008cde:	2002      	movs	r0, #2
 8008ce0:	f7ff fa60 	bl	80081a4 <nRF24_SetPowerMode>

    payload_length = sizeof(payload_packet);
 8008ce4:	4b36      	ldr	r3, [pc, #216]	; (8008dc0 <runRadio+0x168>)
 8008ce6:	2206      	movs	r2, #6
 8008ce8:	701a      	strb	r2, [r3, #0]
    reset_controller();
 8008cea:	f7ff ff9b 	bl	8008c24 <reset_controller>
    while (1)
    {

        payload_packet.throttle = convert_to_us(value[0], 450, 1585, 3620);
 8008cee:	4b35      	ldr	r3, [pc, #212]	; (8008dc4 <runRadio+0x16c>)
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	f640 6324 	movw	r3, #3620	; 0xe24
 8008cf6:	f240 6231 	movw	r2, #1585	; 0x631
 8008cfa:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8008cfe:	f7ff ff15 	bl	8008b2c <convert_to_us>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	4b30      	ldr	r3, [pc, #192]	; (8008dc8 <runRadio+0x170>)
 8008d08:	701a      	strb	r2, [r3, #0]
        payload_packet.roll = convert_to_us(value[1], 450, 1585, 3620);
 8008d0a:	4b2e      	ldr	r3, [pc, #184]	; (8008dc4 <runRadio+0x16c>)
 8008d0c:	6858      	ldr	r0, [r3, #4]
 8008d0e:	f640 6324 	movw	r3, #3620	; 0xe24
 8008d12:	f240 6231 	movw	r2, #1585	; 0x631
 8008d16:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8008d1a:	f7ff ff07 	bl	8008b2c <convert_to_us>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	461a      	mov	r2, r3
 8008d22:	4b29      	ldr	r3, [pc, #164]	; (8008dc8 <runRadio+0x170>)
 8008d24:	70da      	strb	r2, [r3, #3]
        payload_packet.pitch = convert_to_us(value[2], 450, 1585, 3620);
 8008d26:	4b27      	ldr	r3, [pc, #156]	; (8008dc4 <runRadio+0x16c>)
 8008d28:	6898      	ldr	r0, [r3, #8]
 8008d2a:	f640 6324 	movw	r3, #3620	; 0xe24
 8008d2e:	f240 6231 	movw	r2, #1585	; 0x631
 8008d32:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8008d36:	f7ff fef9 	bl	8008b2c <convert_to_us>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	4b22      	ldr	r3, [pc, #136]	; (8008dc8 <runRadio+0x170>)
 8008d40:	709a      	strb	r2, [r3, #2]
        payload_packet.yaw = convert_to_us(value[3], 450, 1585, 3620);
 8008d42:	4b20      	ldr	r3, [pc, #128]	; (8008dc4 <runRadio+0x16c>)
 8008d44:	68d8      	ldr	r0, [r3, #12]
 8008d46:	f640 6324 	movw	r3, #3620	; 0xe24
 8008d4a:	f240 6231 	movw	r2, #1585	; 0x631
 8008d4e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8008d52:	f7ff feeb 	bl	8008b2c <convert_to_us>
 8008d56:	4603      	mov	r3, r0
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4b1b      	ldr	r3, [pc, #108]	; (8008dc8 <runRadio+0x170>)
 8008d5c:	705a      	strb	r2, [r3, #1]
#if(DEBUG_FC)
        printf( "value: %u  %u  %u  %u\n", (size_t)payload_packet.throttle, (size_t)payload_packet.roll, (size_t)payload_packet.pitch, (size_t)payload_packet.yaw);
 8008d5e:	4b1a      	ldr	r3, [pc, #104]	; (8008dc8 <runRadio+0x170>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	4619      	mov	r1, r3
 8008d64:	4b18      	ldr	r3, [pc, #96]	; (8008dc8 <runRadio+0x170>)
 8008d66:	78db      	ldrb	r3, [r3, #3]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4b17      	ldr	r3, [pc, #92]	; (8008dc8 <runRadio+0x170>)
 8008d6c:	789b      	ldrb	r3, [r3, #2]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <runRadio+0x170>)
 8008d72:	785b      	ldrb	r3, [r3, #1]
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	4603      	mov	r3, r0
 8008d78:	4814      	ldr	r0, [pc, #80]	; (8008dcc <runRadio+0x174>)
 8008d7a:	f000 fac1 	bl	8009300 <iprintf>
#endif //debug
        nRF24_TXResult result = nRF24_TransmitPacket((uint8_t *)&payload_packet, payload_length);
 8008d7e:	4b10      	ldr	r3, [pc, #64]	; (8008dc0 <runRadio+0x168>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	4619      	mov	r1, r3
 8008d84:	4810      	ldr	r0, [pc, #64]	; (8008dc8 <runRadio+0x170>)
 8008d86:	f7ff ff0b 	bl	8008ba0 <nRF24_TransmitPacket>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	71fb      	strb	r3, [r7, #7]
        switch (result)
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d005      	beq.n	8008da0 <runRadio+0x148>
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d000      	beq.n	8008d9a <runRadio+0x142>
        case nRF24_TX_MAXRT:
            nRF24_ResetPLOS();
        case nRF24_TX_TIMEOUT:
        default:
            // todo: Bị lỗi khi truyền đi
            break;
 8008d98:	e003      	b.n	8008da2 <runRadio+0x14a>
            nRF24_ResetPLOS();
 8008d9a:	f7ff fb42 	bl	8008422 <nRF24_ResetPLOS>
            break;
 8008d9e:	e000      	b.n	8008da2 <runRadio+0x14a>
            break;
 8008da0:	bf00      	nop
        }
        Delay_ms(10);
 8008da2:	200a      	movs	r0, #10
 8008da4:	f7ff feac 	bl	8008b00 <Delay_ms>
    {
 8008da8:	e7a1      	b.n	8008cee <runRadio+0x96>
 8008daa:	bf00      	nop
 8008dac:	0800b804 	.word	0x0800b804
 8008db0:	0800b818 	.word	0x0800b818
 8008db4:	0800b82c 	.word	0x0800b82c
 8008db8:	0800b834 	.word	0x0800b834
 8008dbc:	0800b858 	.word	0x0800b858
 8008dc0:	2000036e 	.word	0x2000036e
 8008dc4:	20000210 	.word	0x20000210
 8008dc8:	20000368 	.word	0x20000368
 8008dcc:	0800b838 	.word	0x0800b838

08008dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008dd6:	4b15      	ldr	r3, [pc, #84]	; (8008e2c <HAL_MspInit+0x5c>)
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	4a14      	ldr	r2, [pc, #80]	; (8008e2c <HAL_MspInit+0x5c>)
 8008ddc:	f043 0301 	orr.w	r3, r3, #1
 8008de0:	6193      	str	r3, [r2, #24]
 8008de2:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <HAL_MspInit+0x5c>)
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	60bb      	str	r3, [r7, #8]
 8008dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008dee:	4b0f      	ldr	r3, [pc, #60]	; (8008e2c <HAL_MspInit+0x5c>)
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	4a0e      	ldr	r2, [pc, #56]	; (8008e2c <HAL_MspInit+0x5c>)
 8008df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008df8:	61d3      	str	r3, [r2, #28]
 8008dfa:	4b0c      	ldr	r3, [pc, #48]	; (8008e2c <HAL_MspInit+0x5c>)
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e02:	607b      	str	r3, [r7, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008e06:	4b0a      	ldr	r3, [pc, #40]	; (8008e30 <HAL_MspInit+0x60>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	4a04      	ldr	r2, [pc, #16]	; (8008e30 <HAL_MspInit+0x60>)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr
 8008e2c:	40021000 	.word	0x40021000
 8008e30:	40010000 	.word	0x40010000

08008e34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08a      	sub	sp, #40	; 0x28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e3c:	f107 0314 	add.w	r3, r7, #20
 8008e40:	2200      	movs	r2, #0
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	605a      	str	r2, [r3, #4]
 8008e46:	609a      	str	r2, [r3, #8]
 8008e48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a1d      	ldr	r2, [pc, #116]	; (8008ec4 <HAL_I2C_MspInit+0x90>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d132      	bne.n	8008eba <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e54:	4b1c      	ldr	r3, [pc, #112]	; (8008ec8 <HAL_I2C_MspInit+0x94>)
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	4a1b      	ldr	r2, [pc, #108]	; (8008ec8 <HAL_I2C_MspInit+0x94>)
 8008e5a:	f043 0308 	orr.w	r3, r3, #8
 8008e5e:	6193      	str	r3, [r2, #24]
 8008e60:	4b19      	ldr	r3, [pc, #100]	; (8008ec8 <HAL_I2C_MspInit+0x94>)
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	f003 0308 	and.w	r3, r3, #8
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008e6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008e72:	2312      	movs	r3, #18
 8008e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e76:	2303      	movs	r3, #3
 8008e78:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e7a:	f107 0314 	add.w	r3, r7, #20
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4812      	ldr	r0, [pc, #72]	; (8008ecc <HAL_I2C_MspInit+0x98>)
 8008e82:	f7f8 fadf 	bl	8001444 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8008e86:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <HAL_I2C_MspInit+0x9c>)
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8008e92:	627b      	str	r3, [r7, #36]	; 0x24
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	f043 0302 	orr.w	r3, r3, #2
 8008e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e9c:	4a0c      	ldr	r2, [pc, #48]	; (8008ed0 <HAL_I2C_MspInit+0x9c>)
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008ea2:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <HAL_I2C_MspInit+0x94>)
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	4a08      	ldr	r2, [pc, #32]	; (8008ec8 <HAL_I2C_MspInit+0x94>)
 8008ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008eac:	61d3      	str	r3, [r2, #28]
 8008eae:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <HAL_I2C_MspInit+0x94>)
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008eba:	bf00      	nop
 8008ebc:	3728      	adds	r7, #40	; 0x28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	40005400 	.word	0x40005400
 8008ec8:	40021000 	.word	0x40021000
 8008ecc:	40010c00 	.word	0x40010c00
 8008ed0:	40010000 	.word	0x40010000

08008ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008edc:	f107 0310 	add.w	r3, r7, #16
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	605a      	str	r2, [r3, #4]
 8008ee6:	609a      	str	r2, [r3, #8]
 8008ee8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a1c      	ldr	r2, [pc, #112]	; (8008f60 <HAL_SPI_MspInit+0x8c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d131      	bne.n	8008f58 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008ef4:	4b1b      	ldr	r3, [pc, #108]	; (8008f64 <HAL_SPI_MspInit+0x90>)
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	4a1a      	ldr	r2, [pc, #104]	; (8008f64 <HAL_SPI_MspInit+0x90>)
 8008efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008efe:	61d3      	str	r3, [r2, #28]
 8008f00:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <HAL_SPI_MspInit+0x90>)
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f08:	60fb      	str	r3, [r7, #12]
 8008f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f0c:	4b15      	ldr	r3, [pc, #84]	; (8008f64 <HAL_SPI_MspInit+0x90>)
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	4a14      	ldr	r2, [pc, #80]	; (8008f64 <HAL_SPI_MspInit+0x90>)
 8008f12:	f043 0308 	orr.w	r3, r3, #8
 8008f16:	6193      	str	r3, [r2, #24]
 8008f18:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <HAL_SPI_MspInit+0x90>)
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	f003 0308 	and.w	r3, r3, #8
 8008f20:	60bb      	str	r3, [r7, #8]
 8008f22:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 8008f24:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8008f28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f32:	f107 0310 	add.w	r3, r7, #16
 8008f36:	4619      	mov	r1, r3
 8008f38:	480b      	ldr	r0, [pc, #44]	; (8008f68 <HAL_SPI_MspInit+0x94>)
 8008f3a:	f7f8 fa83 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8008f3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8008f4c:	f107 0310 	add.w	r3, r7, #16
 8008f50:	4619      	mov	r1, r3
 8008f52:	4805      	ldr	r0, [pc, #20]	; (8008f68 <HAL_SPI_MspInit+0x94>)
 8008f54:	f7f8 fa76 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008f58:	bf00      	nop
 8008f5a:	3720      	adds	r7, #32
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	40003800 	.word	0x40003800
 8008f64:	40021000 	.word	0x40021000
 8008f68:	40010c00 	.word	0x40010c00

08008f6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a0d      	ldr	r2, [pc, #52]	; (8008fb0 <HAL_TIM_PWM_MspInit+0x44>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d113      	bne.n	8008fa6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <HAL_TIM_PWM_MspInit+0x48>)
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	4a0c      	ldr	r2, [pc, #48]	; (8008fb4 <HAL_TIM_PWM_MspInit+0x48>)
 8008f84:	f043 0302 	orr.w	r3, r3, #2
 8008f88:	61d3      	str	r3, [r2, #28]
 8008f8a:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <HAL_TIM_PWM_MspInit+0x48>)
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f003 0302 	and.w	r3, r3, #2
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008f96:	2200      	movs	r2, #0
 8008f98:	2100      	movs	r1, #0
 8008f9a:	201d      	movs	r0, #29
 8008f9c:	f7f8 fa1b 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008fa0:	201d      	movs	r0, #29
 8008fa2:	f7f8 fa34 	bl	800140e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008fa6:	bf00      	nop
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	40000400 	.word	0x40000400
 8008fb4:	40021000 	.word	0x40021000

08008fb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fc0:	f107 0310 	add.w	r3, r7, #16
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	605a      	str	r2, [r3, #4]
 8008fca:	609a      	str	r2, [r3, #8]
 8008fcc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a1b      	ldr	r2, [pc, #108]	; (8009040 <HAL_TIM_MspPostInit+0x88>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d12f      	bne.n	8009038 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fd8:	4b1a      	ldr	r3, [pc, #104]	; (8009044 <HAL_TIM_MspPostInit+0x8c>)
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	4a19      	ldr	r2, [pc, #100]	; (8009044 <HAL_TIM_MspPostInit+0x8c>)
 8008fde:	f043 0304 	orr.w	r3, r3, #4
 8008fe2:	6193      	str	r3, [r2, #24]
 8008fe4:	4b17      	ldr	r3, [pc, #92]	; (8009044 <HAL_TIM_MspPostInit+0x8c>)
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	60fb      	str	r3, [r7, #12]
 8008fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ff0:	4b14      	ldr	r3, [pc, #80]	; (8009044 <HAL_TIM_MspPostInit+0x8c>)
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	4a13      	ldr	r2, [pc, #76]	; (8009044 <HAL_TIM_MspPostInit+0x8c>)
 8008ff6:	f043 0308 	orr.w	r3, r3, #8
 8008ffa:	6193      	str	r3, [r2, #24]
 8008ffc:	4b11      	ldr	r3, [pc, #68]	; (8009044 <HAL_TIM_MspPostInit+0x8c>)
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	60bb      	str	r3, [r7, #8]
 8009006:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM_SR_Pin|PWM_SL_Pin;
 8009008:	23c0      	movs	r3, #192	; 0xc0
 800900a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800900c:	2302      	movs	r3, #2
 800900e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009010:	2302      	movs	r3, #2
 8009012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009014:	f107 0310 	add.w	r3, r7, #16
 8009018:	4619      	mov	r1, r3
 800901a:	480b      	ldr	r0, [pc, #44]	; (8009048 <HAL_TIM_MspPostInit+0x90>)
 800901c:	f7f8 fa12 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8009020:	2303      	movs	r3, #3
 8009022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009024:	2302      	movs	r3, #2
 8009026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009028:	2302      	movs	r3, #2
 800902a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800902c:	f107 0310 	add.w	r3, r7, #16
 8009030:	4619      	mov	r1, r3
 8009032:	4806      	ldr	r0, [pc, #24]	; (800904c <HAL_TIM_MspPostInit+0x94>)
 8009034:	f7f8 fa06 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009038:	bf00      	nop
 800903a:	3720      	adds	r7, #32
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	40000400 	.word	0x40000400
 8009044:	40021000 	.word	0x40021000
 8009048:	40010800 	.word	0x40010800
 800904c:	40010c00 	.word	0x40010c00

08009050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009058:	f107 0310 	add.w	r3, r7, #16
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	609a      	str	r2, [r3, #8]
 8009064:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1c      	ldr	r2, [pc, #112]	; (80090dc <HAL_UART_MspInit+0x8c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d131      	bne.n	80090d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009070:	4b1b      	ldr	r3, [pc, #108]	; (80090e0 <HAL_UART_MspInit+0x90>)
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	4a1a      	ldr	r2, [pc, #104]	; (80090e0 <HAL_UART_MspInit+0x90>)
 8009076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800907a:	6193      	str	r3, [r2, #24]
 800907c:	4b18      	ldr	r3, [pc, #96]	; (80090e0 <HAL_UART_MspInit+0x90>)
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009088:	4b15      	ldr	r3, [pc, #84]	; (80090e0 <HAL_UART_MspInit+0x90>)
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	4a14      	ldr	r2, [pc, #80]	; (80090e0 <HAL_UART_MspInit+0x90>)
 800908e:	f043 0304 	orr.w	r3, r3, #4
 8009092:	6193      	str	r3, [r2, #24]
 8009094:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <HAL_UART_MspInit+0x90>)
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	60bb      	str	r3, [r7, #8]
 800909e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80090a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090a6:	2302      	movs	r3, #2
 80090a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80090aa:	2303      	movs	r3, #3
 80090ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090ae:	f107 0310 	add.w	r3, r7, #16
 80090b2:	4619      	mov	r1, r3
 80090b4:	480b      	ldr	r0, [pc, #44]	; (80090e4 <HAL_UART_MspInit+0x94>)
 80090b6:	f7f8 f9c5 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80090ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090c0:	2300      	movs	r3, #0
 80090c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090c4:	2300      	movs	r3, #0
 80090c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090c8:	f107 0310 	add.w	r3, r7, #16
 80090cc:	4619      	mov	r1, r3
 80090ce:	4805      	ldr	r0, [pc, #20]	; (80090e4 <HAL_UART_MspInit+0x94>)
 80090d0:	f7f8 f9b8 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80090d4:	bf00      	nop
 80090d6:	3720      	adds	r7, #32
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	40013800 	.word	0x40013800
 80090e0:	40021000 	.word	0x40021000
 80090e4:	40010800 	.word	0x40010800

080090e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80090ec:	bf00      	nop
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr

080090f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80090f4:	b480      	push	{r7}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80090f8:	e7fe      	b.n	80090f8 <HardFault_Handler+0x4>

080090fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80090fa:	b480      	push	{r7}
 80090fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80090fe:	e7fe      	b.n	80090fe <MemManage_Handler+0x4>

08009100 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009100:	b480      	push	{r7}
 8009102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009104:	e7fe      	b.n	8009104 <BusFault_Handler+0x4>

08009106 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009106:	b480      	push	{r7}
 8009108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800910a:	e7fe      	b.n	800910a <UsageFault_Handler+0x4>

0800910c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009110:	bf00      	nop
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009118:	b480      	push	{r7}
 800911a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800911c:	bf00      	nop
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr

08009124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009128:	bf00      	nop
 800912a:	46bd      	mov	sp, r7
 800912c:	bc80      	pop	{r7}
 800912e:	4770      	bx	lr

08009130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009134:	f7f8 f838 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009138:	bf00      	nop
 800913a:	bd80      	pop	{r7, pc}

0800913c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009140:	4802      	ldr	r0, [pc, #8]	; (800914c <TIM3_IRQHandler+0x10>)
 8009142:	f7fa fb5f 	bl	8003804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009146:	bf00      	nop
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000154 	.word	0x20000154

08009150 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800915c:	2300      	movs	r3, #0
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	e00a      	b.n	8009178 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009162:	f3af 8000 	nop.w
 8009166:	4601      	mov	r1, r0
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	60ba      	str	r2, [r7, #8]
 800916e:	b2ca      	uxtb	r2, r1
 8009170:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	3301      	adds	r3, #1
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	429a      	cmp	r2, r3
 800917e:	dbf0      	blt.n	8009162 <_read+0x12>
	}

return len;
 8009180:	687b      	ldr	r3, [r7, #4]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <_close>:
	}
	return len;
}

int _close(int file)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
	return -1;
 8009192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009196:	4618      	mov	r0, r3
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	bc80      	pop	{r7}
 800919e:	4770      	bx	lr

080091a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80091b0:	605a      	str	r2, [r3, #4]
	return 0;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bc80      	pop	{r7}
 80091bc:	4770      	bx	lr

080091be <_isatty>:

int _isatty(int file)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
	return 1;
 80091c6:	2301      	movs	r3, #1
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bc80      	pop	{r7}
 80091d0:	4770      	bx	lr

080091d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b085      	sub	sp, #20
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
	return 0;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bc80      	pop	{r7}
 80091e8:	4770      	bx	lr
	...

080091ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80091f4:	4b11      	ldr	r3, [pc, #68]	; (800923c <_sbrk+0x50>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <_sbrk+0x16>
		heap_end = &end;
 80091fc:	4b0f      	ldr	r3, [pc, #60]	; (800923c <_sbrk+0x50>)
 80091fe:	4a10      	ldr	r2, [pc, #64]	; (8009240 <_sbrk+0x54>)
 8009200:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009202:	4b0e      	ldr	r3, [pc, #56]	; (800923c <_sbrk+0x50>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009208:	4b0c      	ldr	r3, [pc, #48]	; (800923c <_sbrk+0x50>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4413      	add	r3, r2
 8009210:	466a      	mov	r2, sp
 8009212:	4293      	cmp	r3, r2
 8009214:	d907      	bls.n	8009226 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009216:	f000 f841 	bl	800929c <__errno>
 800921a:	4603      	mov	r3, r0
 800921c:	220c      	movs	r2, #12
 800921e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8009220:	f04f 33ff 	mov.w	r3, #4294967295
 8009224:	e006      	b.n	8009234 <_sbrk+0x48>
	}

	heap_end += incr;
 8009226:	4b05      	ldr	r3, [pc, #20]	; (800923c <_sbrk+0x50>)
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4413      	add	r3, r2
 800922e:	4a03      	ldr	r2, [pc, #12]	; (800923c <_sbrk+0x50>)
 8009230:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009232:	68fb      	ldr	r3, [r7, #12]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	20000370 	.word	0x20000370
 8009240:	20000388 	.word	0x20000388

08009244 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009248:	bf00      	nop
 800924a:	46bd      	mov	sp, r7
 800924c:	bc80      	pop	{r7}
 800924e:	4770      	bx	lr

08009250 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009250:	480c      	ldr	r0, [pc, #48]	; (8009284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009252:	490d      	ldr	r1, [pc, #52]	; (8009288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009254:	4a0d      	ldr	r2, [pc, #52]	; (800928c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009258:	e002      	b.n	8009260 <LoopCopyDataInit>

0800925a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800925a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800925c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800925e:	3304      	adds	r3, #4

08009260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009264:	d3f9      	bcc.n	800925a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009266:	4a0a      	ldr	r2, [pc, #40]	; (8009290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009268:	4c0a      	ldr	r4, [pc, #40]	; (8009294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800926a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800926c:	e001      	b.n	8009272 <LoopFillZerobss>

0800926e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800926e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009270:	3204      	adds	r2, #4

08009272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009274:	d3fb      	bcc.n	800926e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009276:	f7ff ffe5 	bl	8009244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800927a:	f000 f815 	bl	80092a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800927e:	f7fb f8f7 	bl	8004470 <main>
  bx lr
 8009282:	4770      	bx	lr
  ldr r0, =_sdata
 8009284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009288:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800928c:	0800b980 	.word	0x0800b980
  ldr r2, =_sbss
 8009290:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8009294:	20000384 	.word	0x20000384

08009298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009298:	e7fe      	b.n	8009298 <ADC1_2_IRQHandler>
	...

0800929c <__errno>:
 800929c:	4b01      	ldr	r3, [pc, #4]	; (80092a4 <__errno+0x8>)
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	20000024 	.word	0x20000024

080092a8 <__libc_init_array>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	2600      	movs	r6, #0
 80092ac:	4d0c      	ldr	r5, [pc, #48]	; (80092e0 <__libc_init_array+0x38>)
 80092ae:	4c0d      	ldr	r4, [pc, #52]	; (80092e4 <__libc_init_array+0x3c>)
 80092b0:	1b64      	subs	r4, r4, r5
 80092b2:	10a4      	asrs	r4, r4, #2
 80092b4:	42a6      	cmp	r6, r4
 80092b6:	d109      	bne.n	80092cc <__libc_init_array+0x24>
 80092b8:	f002 fa7c 	bl	800b7b4 <_init>
 80092bc:	2600      	movs	r6, #0
 80092be:	4d0a      	ldr	r5, [pc, #40]	; (80092e8 <__libc_init_array+0x40>)
 80092c0:	4c0a      	ldr	r4, [pc, #40]	; (80092ec <__libc_init_array+0x44>)
 80092c2:	1b64      	subs	r4, r4, r5
 80092c4:	10a4      	asrs	r4, r4, #2
 80092c6:	42a6      	cmp	r6, r4
 80092c8:	d105      	bne.n	80092d6 <__libc_init_array+0x2e>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d0:	4798      	blx	r3
 80092d2:	3601      	adds	r6, #1
 80092d4:	e7ee      	b.n	80092b4 <__libc_init_array+0xc>
 80092d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092da:	4798      	blx	r3
 80092dc:	3601      	adds	r6, #1
 80092de:	e7f2      	b.n	80092c6 <__libc_init_array+0x1e>
 80092e0:	0800b978 	.word	0x0800b978
 80092e4:	0800b978 	.word	0x0800b978
 80092e8:	0800b978 	.word	0x0800b978
 80092ec:	0800b97c 	.word	0x0800b97c

080092f0 <memset>:
 80092f0:	4603      	mov	r3, r0
 80092f2:	4402      	add	r2, r0
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d100      	bne.n	80092fa <memset+0xa>
 80092f8:	4770      	bx	lr
 80092fa:	f803 1b01 	strb.w	r1, [r3], #1
 80092fe:	e7f9      	b.n	80092f4 <memset+0x4>

08009300 <iprintf>:
 8009300:	b40f      	push	{r0, r1, r2, r3}
 8009302:	4b0a      	ldr	r3, [pc, #40]	; (800932c <iprintf+0x2c>)
 8009304:	b513      	push	{r0, r1, r4, lr}
 8009306:	681c      	ldr	r4, [r3, #0]
 8009308:	b124      	cbz	r4, 8009314 <iprintf+0x14>
 800930a:	69a3      	ldr	r3, [r4, #24]
 800930c:	b913      	cbnz	r3, 8009314 <iprintf+0x14>
 800930e:	4620      	mov	r0, r4
 8009310:	f000 fa5a 	bl	80097c8 <__sinit>
 8009314:	ab05      	add	r3, sp, #20
 8009316:	4620      	mov	r0, r4
 8009318:	9a04      	ldr	r2, [sp, #16]
 800931a:	68a1      	ldr	r1, [r4, #8]
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	f000 fc5d 	bl	8009bdc <_vfiprintf_r>
 8009322:	b002      	add	sp, #8
 8009324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009328:	b004      	add	sp, #16
 800932a:	4770      	bx	lr
 800932c:	20000024 	.word	0x20000024

08009330 <_puts_r>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	460e      	mov	r6, r1
 8009334:	4605      	mov	r5, r0
 8009336:	b118      	cbz	r0, 8009340 <_puts_r+0x10>
 8009338:	6983      	ldr	r3, [r0, #24]
 800933a:	b90b      	cbnz	r3, 8009340 <_puts_r+0x10>
 800933c:	f000 fa44 	bl	80097c8 <__sinit>
 8009340:	69ab      	ldr	r3, [r5, #24]
 8009342:	68ac      	ldr	r4, [r5, #8]
 8009344:	b913      	cbnz	r3, 800934c <_puts_r+0x1c>
 8009346:	4628      	mov	r0, r5
 8009348:	f000 fa3e 	bl	80097c8 <__sinit>
 800934c:	4b2c      	ldr	r3, [pc, #176]	; (8009400 <_puts_r+0xd0>)
 800934e:	429c      	cmp	r4, r3
 8009350:	d120      	bne.n	8009394 <_puts_r+0x64>
 8009352:	686c      	ldr	r4, [r5, #4]
 8009354:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009356:	07db      	lsls	r3, r3, #31
 8009358:	d405      	bmi.n	8009366 <_puts_r+0x36>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	0598      	lsls	r0, r3, #22
 800935e:	d402      	bmi.n	8009366 <_puts_r+0x36>
 8009360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009362:	f000 facf 	bl	8009904 <__retarget_lock_acquire_recursive>
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	0719      	lsls	r1, r3, #28
 800936a:	d51d      	bpl.n	80093a8 <_puts_r+0x78>
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	b1db      	cbz	r3, 80093a8 <_puts_r+0x78>
 8009370:	3e01      	subs	r6, #1
 8009372:	68a3      	ldr	r3, [r4, #8]
 8009374:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009378:	3b01      	subs	r3, #1
 800937a:	60a3      	str	r3, [r4, #8]
 800937c:	bb39      	cbnz	r1, 80093ce <_puts_r+0x9e>
 800937e:	2b00      	cmp	r3, #0
 8009380:	da38      	bge.n	80093f4 <_puts_r+0xc4>
 8009382:	4622      	mov	r2, r4
 8009384:	210a      	movs	r1, #10
 8009386:	4628      	mov	r0, r5
 8009388:	f000 f848 	bl	800941c <__swbuf_r>
 800938c:	3001      	adds	r0, #1
 800938e:	d011      	beq.n	80093b4 <_puts_r+0x84>
 8009390:	250a      	movs	r5, #10
 8009392:	e011      	b.n	80093b8 <_puts_r+0x88>
 8009394:	4b1b      	ldr	r3, [pc, #108]	; (8009404 <_puts_r+0xd4>)
 8009396:	429c      	cmp	r4, r3
 8009398:	d101      	bne.n	800939e <_puts_r+0x6e>
 800939a:	68ac      	ldr	r4, [r5, #8]
 800939c:	e7da      	b.n	8009354 <_puts_r+0x24>
 800939e:	4b1a      	ldr	r3, [pc, #104]	; (8009408 <_puts_r+0xd8>)
 80093a0:	429c      	cmp	r4, r3
 80093a2:	bf08      	it	eq
 80093a4:	68ec      	ldreq	r4, [r5, #12]
 80093a6:	e7d5      	b.n	8009354 <_puts_r+0x24>
 80093a8:	4621      	mov	r1, r4
 80093aa:	4628      	mov	r0, r5
 80093ac:	f000 f888 	bl	80094c0 <__swsetup_r>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d0dd      	beq.n	8009370 <_puts_r+0x40>
 80093b4:	f04f 35ff 	mov.w	r5, #4294967295
 80093b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093ba:	07da      	lsls	r2, r3, #31
 80093bc:	d405      	bmi.n	80093ca <_puts_r+0x9a>
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	059b      	lsls	r3, r3, #22
 80093c2:	d402      	bmi.n	80093ca <_puts_r+0x9a>
 80093c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093c6:	f000 fa9e 	bl	8009906 <__retarget_lock_release_recursive>
 80093ca:	4628      	mov	r0, r5
 80093cc:	bd70      	pop	{r4, r5, r6, pc}
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	da04      	bge.n	80093dc <_puts_r+0xac>
 80093d2:	69a2      	ldr	r2, [r4, #24]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	dc06      	bgt.n	80093e6 <_puts_r+0xb6>
 80093d8:	290a      	cmp	r1, #10
 80093da:	d004      	beq.n	80093e6 <_puts_r+0xb6>
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	6022      	str	r2, [r4, #0]
 80093e2:	7019      	strb	r1, [r3, #0]
 80093e4:	e7c5      	b.n	8009372 <_puts_r+0x42>
 80093e6:	4622      	mov	r2, r4
 80093e8:	4628      	mov	r0, r5
 80093ea:	f000 f817 	bl	800941c <__swbuf_r>
 80093ee:	3001      	adds	r0, #1
 80093f0:	d1bf      	bne.n	8009372 <_puts_r+0x42>
 80093f2:	e7df      	b.n	80093b4 <_puts_r+0x84>
 80093f4:	250a      	movs	r5, #10
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	6022      	str	r2, [r4, #0]
 80093fc:	701d      	strb	r5, [r3, #0]
 80093fe:	e7db      	b.n	80093b8 <_puts_r+0x88>
 8009400:	0800b898 	.word	0x0800b898
 8009404:	0800b8b8 	.word	0x0800b8b8
 8009408:	0800b878 	.word	0x0800b878

0800940c <puts>:
 800940c:	4b02      	ldr	r3, [pc, #8]	; (8009418 <puts+0xc>)
 800940e:	4601      	mov	r1, r0
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	f7ff bf8d 	b.w	8009330 <_puts_r>
 8009416:	bf00      	nop
 8009418:	20000024 	.word	0x20000024

0800941c <__swbuf_r>:
 800941c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941e:	460e      	mov	r6, r1
 8009420:	4614      	mov	r4, r2
 8009422:	4605      	mov	r5, r0
 8009424:	b118      	cbz	r0, 800942e <__swbuf_r+0x12>
 8009426:	6983      	ldr	r3, [r0, #24]
 8009428:	b90b      	cbnz	r3, 800942e <__swbuf_r+0x12>
 800942a:	f000 f9cd 	bl	80097c8 <__sinit>
 800942e:	4b21      	ldr	r3, [pc, #132]	; (80094b4 <__swbuf_r+0x98>)
 8009430:	429c      	cmp	r4, r3
 8009432:	d12b      	bne.n	800948c <__swbuf_r+0x70>
 8009434:	686c      	ldr	r4, [r5, #4]
 8009436:	69a3      	ldr	r3, [r4, #24]
 8009438:	60a3      	str	r3, [r4, #8]
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	071a      	lsls	r2, r3, #28
 800943e:	d52f      	bpl.n	80094a0 <__swbuf_r+0x84>
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	b36b      	cbz	r3, 80094a0 <__swbuf_r+0x84>
 8009444:	6923      	ldr	r3, [r4, #16]
 8009446:	6820      	ldr	r0, [r4, #0]
 8009448:	b2f6      	uxtb	r6, r6
 800944a:	1ac0      	subs	r0, r0, r3
 800944c:	6963      	ldr	r3, [r4, #20]
 800944e:	4637      	mov	r7, r6
 8009450:	4283      	cmp	r3, r0
 8009452:	dc04      	bgt.n	800945e <__swbuf_r+0x42>
 8009454:	4621      	mov	r1, r4
 8009456:	4628      	mov	r0, r5
 8009458:	f000 f922 	bl	80096a0 <_fflush_r>
 800945c:	bb30      	cbnz	r0, 80094ac <__swbuf_r+0x90>
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	3001      	adds	r0, #1
 8009462:	3b01      	subs	r3, #1
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	6022      	str	r2, [r4, #0]
 800946c:	701e      	strb	r6, [r3, #0]
 800946e:	6963      	ldr	r3, [r4, #20]
 8009470:	4283      	cmp	r3, r0
 8009472:	d004      	beq.n	800947e <__swbuf_r+0x62>
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	07db      	lsls	r3, r3, #31
 8009478:	d506      	bpl.n	8009488 <__swbuf_r+0x6c>
 800947a:	2e0a      	cmp	r6, #10
 800947c:	d104      	bne.n	8009488 <__swbuf_r+0x6c>
 800947e:	4621      	mov	r1, r4
 8009480:	4628      	mov	r0, r5
 8009482:	f000 f90d 	bl	80096a0 <_fflush_r>
 8009486:	b988      	cbnz	r0, 80094ac <__swbuf_r+0x90>
 8009488:	4638      	mov	r0, r7
 800948a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800948c:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <__swbuf_r+0x9c>)
 800948e:	429c      	cmp	r4, r3
 8009490:	d101      	bne.n	8009496 <__swbuf_r+0x7a>
 8009492:	68ac      	ldr	r4, [r5, #8]
 8009494:	e7cf      	b.n	8009436 <__swbuf_r+0x1a>
 8009496:	4b09      	ldr	r3, [pc, #36]	; (80094bc <__swbuf_r+0xa0>)
 8009498:	429c      	cmp	r4, r3
 800949a:	bf08      	it	eq
 800949c:	68ec      	ldreq	r4, [r5, #12]
 800949e:	e7ca      	b.n	8009436 <__swbuf_r+0x1a>
 80094a0:	4621      	mov	r1, r4
 80094a2:	4628      	mov	r0, r5
 80094a4:	f000 f80c 	bl	80094c0 <__swsetup_r>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d0cb      	beq.n	8009444 <__swbuf_r+0x28>
 80094ac:	f04f 37ff 	mov.w	r7, #4294967295
 80094b0:	e7ea      	b.n	8009488 <__swbuf_r+0x6c>
 80094b2:	bf00      	nop
 80094b4:	0800b898 	.word	0x0800b898
 80094b8:	0800b8b8 	.word	0x0800b8b8
 80094bc:	0800b878 	.word	0x0800b878

080094c0 <__swsetup_r>:
 80094c0:	4b32      	ldr	r3, [pc, #200]	; (800958c <__swsetup_r+0xcc>)
 80094c2:	b570      	push	{r4, r5, r6, lr}
 80094c4:	681d      	ldr	r5, [r3, #0]
 80094c6:	4606      	mov	r6, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	b125      	cbz	r5, 80094d6 <__swsetup_r+0x16>
 80094cc:	69ab      	ldr	r3, [r5, #24]
 80094ce:	b913      	cbnz	r3, 80094d6 <__swsetup_r+0x16>
 80094d0:	4628      	mov	r0, r5
 80094d2:	f000 f979 	bl	80097c8 <__sinit>
 80094d6:	4b2e      	ldr	r3, [pc, #184]	; (8009590 <__swsetup_r+0xd0>)
 80094d8:	429c      	cmp	r4, r3
 80094da:	d10f      	bne.n	80094fc <__swsetup_r+0x3c>
 80094dc:	686c      	ldr	r4, [r5, #4]
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094e4:	0719      	lsls	r1, r3, #28
 80094e6:	d42c      	bmi.n	8009542 <__swsetup_r+0x82>
 80094e8:	06dd      	lsls	r5, r3, #27
 80094ea:	d411      	bmi.n	8009510 <__swsetup_r+0x50>
 80094ec:	2309      	movs	r3, #9
 80094ee:	6033      	str	r3, [r6, #0]
 80094f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094f4:	f04f 30ff 	mov.w	r0, #4294967295
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	e03e      	b.n	800957a <__swsetup_r+0xba>
 80094fc:	4b25      	ldr	r3, [pc, #148]	; (8009594 <__swsetup_r+0xd4>)
 80094fe:	429c      	cmp	r4, r3
 8009500:	d101      	bne.n	8009506 <__swsetup_r+0x46>
 8009502:	68ac      	ldr	r4, [r5, #8]
 8009504:	e7eb      	b.n	80094de <__swsetup_r+0x1e>
 8009506:	4b24      	ldr	r3, [pc, #144]	; (8009598 <__swsetup_r+0xd8>)
 8009508:	429c      	cmp	r4, r3
 800950a:	bf08      	it	eq
 800950c:	68ec      	ldreq	r4, [r5, #12]
 800950e:	e7e6      	b.n	80094de <__swsetup_r+0x1e>
 8009510:	0758      	lsls	r0, r3, #29
 8009512:	d512      	bpl.n	800953a <__swsetup_r+0x7a>
 8009514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009516:	b141      	cbz	r1, 800952a <__swsetup_r+0x6a>
 8009518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800951c:	4299      	cmp	r1, r3
 800951e:	d002      	beq.n	8009526 <__swsetup_r+0x66>
 8009520:	4630      	mov	r0, r6
 8009522:	f000 fa57 	bl	80099d4 <_free_r>
 8009526:	2300      	movs	r3, #0
 8009528:	6363      	str	r3, [r4, #52]	; 0x34
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009530:	81a3      	strh	r3, [r4, #12]
 8009532:	2300      	movs	r3, #0
 8009534:	6063      	str	r3, [r4, #4]
 8009536:	6923      	ldr	r3, [r4, #16]
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	f043 0308 	orr.w	r3, r3, #8
 8009540:	81a3      	strh	r3, [r4, #12]
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	b94b      	cbnz	r3, 800955a <__swsetup_r+0x9a>
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800954c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009550:	d003      	beq.n	800955a <__swsetup_r+0x9a>
 8009552:	4621      	mov	r1, r4
 8009554:	4630      	mov	r0, r6
 8009556:	f000 f9fd 	bl	8009954 <__smakebuf_r>
 800955a:	89a0      	ldrh	r0, [r4, #12]
 800955c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009560:	f010 0301 	ands.w	r3, r0, #1
 8009564:	d00a      	beq.n	800957c <__swsetup_r+0xbc>
 8009566:	2300      	movs	r3, #0
 8009568:	60a3      	str	r3, [r4, #8]
 800956a:	6963      	ldr	r3, [r4, #20]
 800956c:	425b      	negs	r3, r3
 800956e:	61a3      	str	r3, [r4, #24]
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	b943      	cbnz	r3, 8009586 <__swsetup_r+0xc6>
 8009574:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009578:	d1ba      	bne.n	80094f0 <__swsetup_r+0x30>
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	0781      	lsls	r1, r0, #30
 800957e:	bf58      	it	pl
 8009580:	6963      	ldrpl	r3, [r4, #20]
 8009582:	60a3      	str	r3, [r4, #8]
 8009584:	e7f4      	b.n	8009570 <__swsetup_r+0xb0>
 8009586:	2000      	movs	r0, #0
 8009588:	e7f7      	b.n	800957a <__swsetup_r+0xba>
 800958a:	bf00      	nop
 800958c:	20000024 	.word	0x20000024
 8009590:	0800b898 	.word	0x0800b898
 8009594:	0800b8b8 	.word	0x0800b8b8
 8009598:	0800b878 	.word	0x0800b878

0800959c <__sflush_r>:
 800959c:	898a      	ldrh	r2, [r1, #12]
 800959e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a0:	4605      	mov	r5, r0
 80095a2:	0710      	lsls	r0, r2, #28
 80095a4:	460c      	mov	r4, r1
 80095a6:	d457      	bmi.n	8009658 <__sflush_r+0xbc>
 80095a8:	684b      	ldr	r3, [r1, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	dc04      	bgt.n	80095b8 <__sflush_r+0x1c>
 80095ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	dc01      	bgt.n	80095b8 <__sflush_r+0x1c>
 80095b4:	2000      	movs	r0, #0
 80095b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	d0fa      	beq.n	80095b4 <__sflush_r+0x18>
 80095be:	2300      	movs	r3, #0
 80095c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095c4:	682f      	ldr	r7, [r5, #0]
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	d032      	beq.n	8009630 <__sflush_r+0x94>
 80095ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	075a      	lsls	r2, r3, #29
 80095d0:	d505      	bpl.n	80095de <__sflush_r+0x42>
 80095d2:	6863      	ldr	r3, [r4, #4]
 80095d4:	1ac0      	subs	r0, r0, r3
 80095d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095d8:	b10b      	cbz	r3, 80095de <__sflush_r+0x42>
 80095da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095dc:	1ac0      	subs	r0, r0, r3
 80095de:	2300      	movs	r3, #0
 80095e0:	4602      	mov	r2, r0
 80095e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095e4:	4628      	mov	r0, r5
 80095e6:	6a21      	ldr	r1, [r4, #32]
 80095e8:	47b0      	blx	r6
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	d106      	bne.n	80095fe <__sflush_r+0x62>
 80095f0:	6829      	ldr	r1, [r5, #0]
 80095f2:	291d      	cmp	r1, #29
 80095f4:	d82c      	bhi.n	8009650 <__sflush_r+0xb4>
 80095f6:	4a29      	ldr	r2, [pc, #164]	; (800969c <__sflush_r+0x100>)
 80095f8:	40ca      	lsrs	r2, r1
 80095fa:	07d6      	lsls	r6, r2, #31
 80095fc:	d528      	bpl.n	8009650 <__sflush_r+0xb4>
 80095fe:	2200      	movs	r2, #0
 8009600:	6062      	str	r2, [r4, #4]
 8009602:	6922      	ldr	r2, [r4, #16]
 8009604:	04d9      	lsls	r1, r3, #19
 8009606:	6022      	str	r2, [r4, #0]
 8009608:	d504      	bpl.n	8009614 <__sflush_r+0x78>
 800960a:	1c42      	adds	r2, r0, #1
 800960c:	d101      	bne.n	8009612 <__sflush_r+0x76>
 800960e:	682b      	ldr	r3, [r5, #0]
 8009610:	b903      	cbnz	r3, 8009614 <__sflush_r+0x78>
 8009612:	6560      	str	r0, [r4, #84]	; 0x54
 8009614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009616:	602f      	str	r7, [r5, #0]
 8009618:	2900      	cmp	r1, #0
 800961a:	d0cb      	beq.n	80095b4 <__sflush_r+0x18>
 800961c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009620:	4299      	cmp	r1, r3
 8009622:	d002      	beq.n	800962a <__sflush_r+0x8e>
 8009624:	4628      	mov	r0, r5
 8009626:	f000 f9d5 	bl	80099d4 <_free_r>
 800962a:	2000      	movs	r0, #0
 800962c:	6360      	str	r0, [r4, #52]	; 0x34
 800962e:	e7c2      	b.n	80095b6 <__sflush_r+0x1a>
 8009630:	6a21      	ldr	r1, [r4, #32]
 8009632:	2301      	movs	r3, #1
 8009634:	4628      	mov	r0, r5
 8009636:	47b0      	blx	r6
 8009638:	1c41      	adds	r1, r0, #1
 800963a:	d1c7      	bne.n	80095cc <__sflush_r+0x30>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d0c4      	beq.n	80095cc <__sflush_r+0x30>
 8009642:	2b1d      	cmp	r3, #29
 8009644:	d001      	beq.n	800964a <__sflush_r+0xae>
 8009646:	2b16      	cmp	r3, #22
 8009648:	d101      	bne.n	800964e <__sflush_r+0xb2>
 800964a:	602f      	str	r7, [r5, #0]
 800964c:	e7b2      	b.n	80095b4 <__sflush_r+0x18>
 800964e:	89a3      	ldrh	r3, [r4, #12]
 8009650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009654:	81a3      	strh	r3, [r4, #12]
 8009656:	e7ae      	b.n	80095b6 <__sflush_r+0x1a>
 8009658:	690f      	ldr	r7, [r1, #16]
 800965a:	2f00      	cmp	r7, #0
 800965c:	d0aa      	beq.n	80095b4 <__sflush_r+0x18>
 800965e:	0793      	lsls	r3, r2, #30
 8009660:	bf18      	it	ne
 8009662:	2300      	movne	r3, #0
 8009664:	680e      	ldr	r6, [r1, #0]
 8009666:	bf08      	it	eq
 8009668:	694b      	ldreq	r3, [r1, #20]
 800966a:	1bf6      	subs	r6, r6, r7
 800966c:	600f      	str	r7, [r1, #0]
 800966e:	608b      	str	r3, [r1, #8]
 8009670:	2e00      	cmp	r6, #0
 8009672:	dd9f      	ble.n	80095b4 <__sflush_r+0x18>
 8009674:	4633      	mov	r3, r6
 8009676:	463a      	mov	r2, r7
 8009678:	4628      	mov	r0, r5
 800967a:	6a21      	ldr	r1, [r4, #32]
 800967c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009680:	47e0      	blx	ip
 8009682:	2800      	cmp	r0, #0
 8009684:	dc06      	bgt.n	8009694 <__sflush_r+0xf8>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f04f 30ff 	mov.w	r0, #4294967295
 800968c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	e790      	b.n	80095b6 <__sflush_r+0x1a>
 8009694:	4407      	add	r7, r0
 8009696:	1a36      	subs	r6, r6, r0
 8009698:	e7ea      	b.n	8009670 <__sflush_r+0xd4>
 800969a:	bf00      	nop
 800969c:	20400001 	.word	0x20400001

080096a0 <_fflush_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	690b      	ldr	r3, [r1, #16]
 80096a4:	4605      	mov	r5, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	b913      	cbnz	r3, 80096b0 <_fflush_r+0x10>
 80096aa:	2500      	movs	r5, #0
 80096ac:	4628      	mov	r0, r5
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	b118      	cbz	r0, 80096ba <_fflush_r+0x1a>
 80096b2:	6983      	ldr	r3, [r0, #24]
 80096b4:	b90b      	cbnz	r3, 80096ba <_fflush_r+0x1a>
 80096b6:	f000 f887 	bl	80097c8 <__sinit>
 80096ba:	4b14      	ldr	r3, [pc, #80]	; (800970c <_fflush_r+0x6c>)
 80096bc:	429c      	cmp	r4, r3
 80096be:	d11b      	bne.n	80096f8 <_fflush_r+0x58>
 80096c0:	686c      	ldr	r4, [r5, #4]
 80096c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0ef      	beq.n	80096aa <_fflush_r+0xa>
 80096ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096cc:	07d0      	lsls	r0, r2, #31
 80096ce:	d404      	bmi.n	80096da <_fflush_r+0x3a>
 80096d0:	0599      	lsls	r1, r3, #22
 80096d2:	d402      	bmi.n	80096da <_fflush_r+0x3a>
 80096d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096d6:	f000 f915 	bl	8009904 <__retarget_lock_acquire_recursive>
 80096da:	4628      	mov	r0, r5
 80096dc:	4621      	mov	r1, r4
 80096de:	f7ff ff5d 	bl	800959c <__sflush_r>
 80096e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e4:	4605      	mov	r5, r0
 80096e6:	07da      	lsls	r2, r3, #31
 80096e8:	d4e0      	bmi.n	80096ac <_fflush_r+0xc>
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	059b      	lsls	r3, r3, #22
 80096ee:	d4dd      	bmi.n	80096ac <_fflush_r+0xc>
 80096f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f2:	f000 f908 	bl	8009906 <__retarget_lock_release_recursive>
 80096f6:	e7d9      	b.n	80096ac <_fflush_r+0xc>
 80096f8:	4b05      	ldr	r3, [pc, #20]	; (8009710 <_fflush_r+0x70>)
 80096fa:	429c      	cmp	r4, r3
 80096fc:	d101      	bne.n	8009702 <_fflush_r+0x62>
 80096fe:	68ac      	ldr	r4, [r5, #8]
 8009700:	e7df      	b.n	80096c2 <_fflush_r+0x22>
 8009702:	4b04      	ldr	r3, [pc, #16]	; (8009714 <_fflush_r+0x74>)
 8009704:	429c      	cmp	r4, r3
 8009706:	bf08      	it	eq
 8009708:	68ec      	ldreq	r4, [r5, #12]
 800970a:	e7da      	b.n	80096c2 <_fflush_r+0x22>
 800970c:	0800b898 	.word	0x0800b898
 8009710:	0800b8b8 	.word	0x0800b8b8
 8009714:	0800b878 	.word	0x0800b878

08009718 <std>:
 8009718:	2300      	movs	r3, #0
 800971a:	b510      	push	{r4, lr}
 800971c:	4604      	mov	r4, r0
 800971e:	e9c0 3300 	strd	r3, r3, [r0]
 8009722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009726:	6083      	str	r3, [r0, #8]
 8009728:	8181      	strh	r1, [r0, #12]
 800972a:	6643      	str	r3, [r0, #100]	; 0x64
 800972c:	81c2      	strh	r2, [r0, #14]
 800972e:	6183      	str	r3, [r0, #24]
 8009730:	4619      	mov	r1, r3
 8009732:	2208      	movs	r2, #8
 8009734:	305c      	adds	r0, #92	; 0x5c
 8009736:	f7ff fddb 	bl	80092f0 <memset>
 800973a:	4b05      	ldr	r3, [pc, #20]	; (8009750 <std+0x38>)
 800973c:	6224      	str	r4, [r4, #32]
 800973e:	6263      	str	r3, [r4, #36]	; 0x24
 8009740:	4b04      	ldr	r3, [pc, #16]	; (8009754 <std+0x3c>)
 8009742:	62a3      	str	r3, [r4, #40]	; 0x28
 8009744:	4b04      	ldr	r3, [pc, #16]	; (8009758 <std+0x40>)
 8009746:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <std+0x44>)
 800974a:	6323      	str	r3, [r4, #48]	; 0x30
 800974c:	bd10      	pop	{r4, pc}
 800974e:	bf00      	nop
 8009750:	0800a189 	.word	0x0800a189
 8009754:	0800a1ab 	.word	0x0800a1ab
 8009758:	0800a1e3 	.word	0x0800a1e3
 800975c:	0800a207 	.word	0x0800a207

08009760 <_cleanup_r>:
 8009760:	4901      	ldr	r1, [pc, #4]	; (8009768 <_cleanup_r+0x8>)
 8009762:	f000 b8af 	b.w	80098c4 <_fwalk_reent>
 8009766:	bf00      	nop
 8009768:	080096a1 	.word	0x080096a1

0800976c <__sfmoreglue>:
 800976c:	2268      	movs	r2, #104	; 0x68
 800976e:	b570      	push	{r4, r5, r6, lr}
 8009770:	1e4d      	subs	r5, r1, #1
 8009772:	4355      	muls	r5, r2
 8009774:	460e      	mov	r6, r1
 8009776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800977a:	f000 f993 	bl	8009aa4 <_malloc_r>
 800977e:	4604      	mov	r4, r0
 8009780:	b140      	cbz	r0, 8009794 <__sfmoreglue+0x28>
 8009782:	2100      	movs	r1, #0
 8009784:	e9c0 1600 	strd	r1, r6, [r0]
 8009788:	300c      	adds	r0, #12
 800978a:	60a0      	str	r0, [r4, #8]
 800978c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009790:	f7ff fdae 	bl	80092f0 <memset>
 8009794:	4620      	mov	r0, r4
 8009796:	bd70      	pop	{r4, r5, r6, pc}

08009798 <__sfp_lock_acquire>:
 8009798:	4801      	ldr	r0, [pc, #4]	; (80097a0 <__sfp_lock_acquire+0x8>)
 800979a:	f000 b8b3 	b.w	8009904 <__retarget_lock_acquire_recursive>
 800979e:	bf00      	nop
 80097a0:	20000375 	.word	0x20000375

080097a4 <__sfp_lock_release>:
 80097a4:	4801      	ldr	r0, [pc, #4]	; (80097ac <__sfp_lock_release+0x8>)
 80097a6:	f000 b8ae 	b.w	8009906 <__retarget_lock_release_recursive>
 80097aa:	bf00      	nop
 80097ac:	20000375 	.word	0x20000375

080097b0 <__sinit_lock_acquire>:
 80097b0:	4801      	ldr	r0, [pc, #4]	; (80097b8 <__sinit_lock_acquire+0x8>)
 80097b2:	f000 b8a7 	b.w	8009904 <__retarget_lock_acquire_recursive>
 80097b6:	bf00      	nop
 80097b8:	20000376 	.word	0x20000376

080097bc <__sinit_lock_release>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__sinit_lock_release+0x8>)
 80097be:	f000 b8a2 	b.w	8009906 <__retarget_lock_release_recursive>
 80097c2:	bf00      	nop
 80097c4:	20000376 	.word	0x20000376

080097c8 <__sinit>:
 80097c8:	b510      	push	{r4, lr}
 80097ca:	4604      	mov	r4, r0
 80097cc:	f7ff fff0 	bl	80097b0 <__sinit_lock_acquire>
 80097d0:	69a3      	ldr	r3, [r4, #24]
 80097d2:	b11b      	cbz	r3, 80097dc <__sinit+0x14>
 80097d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097d8:	f7ff bff0 	b.w	80097bc <__sinit_lock_release>
 80097dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097e0:	6523      	str	r3, [r4, #80]	; 0x50
 80097e2:	4b13      	ldr	r3, [pc, #76]	; (8009830 <__sinit+0x68>)
 80097e4:	4a13      	ldr	r2, [pc, #76]	; (8009834 <__sinit+0x6c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80097ea:	42a3      	cmp	r3, r4
 80097ec:	bf08      	it	eq
 80097ee:	2301      	moveq	r3, #1
 80097f0:	4620      	mov	r0, r4
 80097f2:	bf08      	it	eq
 80097f4:	61a3      	streq	r3, [r4, #24]
 80097f6:	f000 f81f 	bl	8009838 <__sfp>
 80097fa:	6060      	str	r0, [r4, #4]
 80097fc:	4620      	mov	r0, r4
 80097fe:	f000 f81b 	bl	8009838 <__sfp>
 8009802:	60a0      	str	r0, [r4, #8]
 8009804:	4620      	mov	r0, r4
 8009806:	f000 f817 	bl	8009838 <__sfp>
 800980a:	2200      	movs	r2, #0
 800980c:	2104      	movs	r1, #4
 800980e:	60e0      	str	r0, [r4, #12]
 8009810:	6860      	ldr	r0, [r4, #4]
 8009812:	f7ff ff81 	bl	8009718 <std>
 8009816:	2201      	movs	r2, #1
 8009818:	2109      	movs	r1, #9
 800981a:	68a0      	ldr	r0, [r4, #8]
 800981c:	f7ff ff7c 	bl	8009718 <std>
 8009820:	2202      	movs	r2, #2
 8009822:	2112      	movs	r1, #18
 8009824:	68e0      	ldr	r0, [r4, #12]
 8009826:	f7ff ff77 	bl	8009718 <std>
 800982a:	2301      	movs	r3, #1
 800982c:	61a3      	str	r3, [r4, #24]
 800982e:	e7d1      	b.n	80097d4 <__sinit+0xc>
 8009830:	0800b874 	.word	0x0800b874
 8009834:	08009761 	.word	0x08009761

08009838 <__sfp>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	4607      	mov	r7, r0
 800983c:	f7ff ffac 	bl	8009798 <__sfp_lock_acquire>
 8009840:	4b1e      	ldr	r3, [pc, #120]	; (80098bc <__sfp+0x84>)
 8009842:	681e      	ldr	r6, [r3, #0]
 8009844:	69b3      	ldr	r3, [r6, #24]
 8009846:	b913      	cbnz	r3, 800984e <__sfp+0x16>
 8009848:	4630      	mov	r0, r6
 800984a:	f7ff ffbd 	bl	80097c8 <__sinit>
 800984e:	3648      	adds	r6, #72	; 0x48
 8009850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009854:	3b01      	subs	r3, #1
 8009856:	d503      	bpl.n	8009860 <__sfp+0x28>
 8009858:	6833      	ldr	r3, [r6, #0]
 800985a:	b30b      	cbz	r3, 80098a0 <__sfp+0x68>
 800985c:	6836      	ldr	r6, [r6, #0]
 800985e:	e7f7      	b.n	8009850 <__sfp+0x18>
 8009860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009864:	b9d5      	cbnz	r5, 800989c <__sfp+0x64>
 8009866:	4b16      	ldr	r3, [pc, #88]	; (80098c0 <__sfp+0x88>)
 8009868:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800986c:	60e3      	str	r3, [r4, #12]
 800986e:	6665      	str	r5, [r4, #100]	; 0x64
 8009870:	f000 f847 	bl	8009902 <__retarget_lock_init_recursive>
 8009874:	f7ff ff96 	bl	80097a4 <__sfp_lock_release>
 8009878:	2208      	movs	r2, #8
 800987a:	4629      	mov	r1, r5
 800987c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009880:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009884:	6025      	str	r5, [r4, #0]
 8009886:	61a5      	str	r5, [r4, #24]
 8009888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800988c:	f7ff fd30 	bl	80092f0 <memset>
 8009890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009898:	4620      	mov	r0, r4
 800989a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800989c:	3468      	adds	r4, #104	; 0x68
 800989e:	e7d9      	b.n	8009854 <__sfp+0x1c>
 80098a0:	2104      	movs	r1, #4
 80098a2:	4638      	mov	r0, r7
 80098a4:	f7ff ff62 	bl	800976c <__sfmoreglue>
 80098a8:	4604      	mov	r4, r0
 80098aa:	6030      	str	r0, [r6, #0]
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d1d5      	bne.n	800985c <__sfp+0x24>
 80098b0:	f7ff ff78 	bl	80097a4 <__sfp_lock_release>
 80098b4:	230c      	movs	r3, #12
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	e7ee      	b.n	8009898 <__sfp+0x60>
 80098ba:	bf00      	nop
 80098bc:	0800b874 	.word	0x0800b874
 80098c0:	ffff0001 	.word	0xffff0001

080098c4 <_fwalk_reent>:
 80098c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c8:	4606      	mov	r6, r0
 80098ca:	4688      	mov	r8, r1
 80098cc:	2700      	movs	r7, #0
 80098ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098d6:	f1b9 0901 	subs.w	r9, r9, #1
 80098da:	d505      	bpl.n	80098e8 <_fwalk_reent+0x24>
 80098dc:	6824      	ldr	r4, [r4, #0]
 80098de:	2c00      	cmp	r4, #0
 80098e0:	d1f7      	bne.n	80098d2 <_fwalk_reent+0xe>
 80098e2:	4638      	mov	r0, r7
 80098e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e8:	89ab      	ldrh	r3, [r5, #12]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d907      	bls.n	80098fe <_fwalk_reent+0x3a>
 80098ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098f2:	3301      	adds	r3, #1
 80098f4:	d003      	beq.n	80098fe <_fwalk_reent+0x3a>
 80098f6:	4629      	mov	r1, r5
 80098f8:	4630      	mov	r0, r6
 80098fa:	47c0      	blx	r8
 80098fc:	4307      	orrs	r7, r0
 80098fe:	3568      	adds	r5, #104	; 0x68
 8009900:	e7e9      	b.n	80098d6 <_fwalk_reent+0x12>

08009902 <__retarget_lock_init_recursive>:
 8009902:	4770      	bx	lr

08009904 <__retarget_lock_acquire_recursive>:
 8009904:	4770      	bx	lr

08009906 <__retarget_lock_release_recursive>:
 8009906:	4770      	bx	lr

08009908 <__swhatbuf_r>:
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	460e      	mov	r6, r1
 800990c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009910:	4614      	mov	r4, r2
 8009912:	2900      	cmp	r1, #0
 8009914:	461d      	mov	r5, r3
 8009916:	b096      	sub	sp, #88	; 0x58
 8009918:	da08      	bge.n	800992c <__swhatbuf_r+0x24>
 800991a:	2200      	movs	r2, #0
 800991c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009920:	602a      	str	r2, [r5, #0]
 8009922:	061a      	lsls	r2, r3, #24
 8009924:	d410      	bmi.n	8009948 <__swhatbuf_r+0x40>
 8009926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800992a:	e00e      	b.n	800994a <__swhatbuf_r+0x42>
 800992c:	466a      	mov	r2, sp
 800992e:	f000 fc91 	bl	800a254 <_fstat_r>
 8009932:	2800      	cmp	r0, #0
 8009934:	dbf1      	blt.n	800991a <__swhatbuf_r+0x12>
 8009936:	9a01      	ldr	r2, [sp, #4]
 8009938:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800993c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009940:	425a      	negs	r2, r3
 8009942:	415a      	adcs	r2, r3
 8009944:	602a      	str	r2, [r5, #0]
 8009946:	e7ee      	b.n	8009926 <__swhatbuf_r+0x1e>
 8009948:	2340      	movs	r3, #64	; 0x40
 800994a:	2000      	movs	r0, #0
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	b016      	add	sp, #88	; 0x58
 8009950:	bd70      	pop	{r4, r5, r6, pc}
	...

08009954 <__smakebuf_r>:
 8009954:	898b      	ldrh	r3, [r1, #12]
 8009956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009958:	079d      	lsls	r5, r3, #30
 800995a:	4606      	mov	r6, r0
 800995c:	460c      	mov	r4, r1
 800995e:	d507      	bpl.n	8009970 <__smakebuf_r+0x1c>
 8009960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	6123      	str	r3, [r4, #16]
 8009968:	2301      	movs	r3, #1
 800996a:	6163      	str	r3, [r4, #20]
 800996c:	b002      	add	sp, #8
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	466a      	mov	r2, sp
 8009972:	ab01      	add	r3, sp, #4
 8009974:	f7ff ffc8 	bl	8009908 <__swhatbuf_r>
 8009978:	9900      	ldr	r1, [sp, #0]
 800997a:	4605      	mov	r5, r0
 800997c:	4630      	mov	r0, r6
 800997e:	f000 f891 	bl	8009aa4 <_malloc_r>
 8009982:	b948      	cbnz	r0, 8009998 <__smakebuf_r+0x44>
 8009984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009988:	059a      	lsls	r2, r3, #22
 800998a:	d4ef      	bmi.n	800996c <__smakebuf_r+0x18>
 800998c:	f023 0303 	bic.w	r3, r3, #3
 8009990:	f043 0302 	orr.w	r3, r3, #2
 8009994:	81a3      	strh	r3, [r4, #12]
 8009996:	e7e3      	b.n	8009960 <__smakebuf_r+0xc>
 8009998:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <__smakebuf_r+0x7c>)
 800999a:	62b3      	str	r3, [r6, #40]	; 0x28
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	6020      	str	r0, [r4, #0]
 80099a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a4:	81a3      	strh	r3, [r4, #12]
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	6120      	str	r0, [r4, #16]
 80099aa:	6163      	str	r3, [r4, #20]
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	b15b      	cbz	r3, 80099c8 <__smakebuf_r+0x74>
 80099b0:	4630      	mov	r0, r6
 80099b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b6:	f000 fc5f 	bl	800a278 <_isatty_r>
 80099ba:	b128      	cbz	r0, 80099c8 <__smakebuf_r+0x74>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f023 0303 	bic.w	r3, r3, #3
 80099c2:	f043 0301 	orr.w	r3, r3, #1
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	89a0      	ldrh	r0, [r4, #12]
 80099ca:	4305      	orrs	r5, r0
 80099cc:	81a5      	strh	r5, [r4, #12]
 80099ce:	e7cd      	b.n	800996c <__smakebuf_r+0x18>
 80099d0:	08009761 	.word	0x08009761

080099d4 <_free_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4605      	mov	r5, r0
 80099d8:	2900      	cmp	r1, #0
 80099da:	d040      	beq.n	8009a5e <_free_r+0x8a>
 80099dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e0:	1f0c      	subs	r4, r1, #4
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	bfb8      	it	lt
 80099e6:	18e4      	addlt	r4, r4, r3
 80099e8:	f000 fc76 	bl	800a2d8 <__malloc_lock>
 80099ec:	4a1c      	ldr	r2, [pc, #112]	; (8009a60 <_free_r+0x8c>)
 80099ee:	6813      	ldr	r3, [r2, #0]
 80099f0:	b933      	cbnz	r3, 8009a00 <_free_r+0x2c>
 80099f2:	6063      	str	r3, [r4, #4]
 80099f4:	6014      	str	r4, [r2, #0]
 80099f6:	4628      	mov	r0, r5
 80099f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099fc:	f000 bc72 	b.w	800a2e4 <__malloc_unlock>
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	d908      	bls.n	8009a16 <_free_r+0x42>
 8009a04:	6820      	ldr	r0, [r4, #0]
 8009a06:	1821      	adds	r1, r4, r0
 8009a08:	428b      	cmp	r3, r1
 8009a0a:	bf01      	itttt	eq
 8009a0c:	6819      	ldreq	r1, [r3, #0]
 8009a0e:	685b      	ldreq	r3, [r3, #4]
 8009a10:	1809      	addeq	r1, r1, r0
 8009a12:	6021      	streq	r1, [r4, #0]
 8009a14:	e7ed      	b.n	80099f2 <_free_r+0x1e>
 8009a16:	461a      	mov	r2, r3
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	b10b      	cbz	r3, 8009a20 <_free_r+0x4c>
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	d9fa      	bls.n	8009a16 <_free_r+0x42>
 8009a20:	6811      	ldr	r1, [r2, #0]
 8009a22:	1850      	adds	r0, r2, r1
 8009a24:	42a0      	cmp	r0, r4
 8009a26:	d10b      	bne.n	8009a40 <_free_r+0x6c>
 8009a28:	6820      	ldr	r0, [r4, #0]
 8009a2a:	4401      	add	r1, r0
 8009a2c:	1850      	adds	r0, r2, r1
 8009a2e:	4283      	cmp	r3, r0
 8009a30:	6011      	str	r1, [r2, #0]
 8009a32:	d1e0      	bne.n	80099f6 <_free_r+0x22>
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	4401      	add	r1, r0
 8009a3a:	6011      	str	r1, [r2, #0]
 8009a3c:	6053      	str	r3, [r2, #4]
 8009a3e:	e7da      	b.n	80099f6 <_free_r+0x22>
 8009a40:	d902      	bls.n	8009a48 <_free_r+0x74>
 8009a42:	230c      	movs	r3, #12
 8009a44:	602b      	str	r3, [r5, #0]
 8009a46:	e7d6      	b.n	80099f6 <_free_r+0x22>
 8009a48:	6820      	ldr	r0, [r4, #0]
 8009a4a:	1821      	adds	r1, r4, r0
 8009a4c:	428b      	cmp	r3, r1
 8009a4e:	bf01      	itttt	eq
 8009a50:	6819      	ldreq	r1, [r3, #0]
 8009a52:	685b      	ldreq	r3, [r3, #4]
 8009a54:	1809      	addeq	r1, r1, r0
 8009a56:	6021      	streq	r1, [r4, #0]
 8009a58:	6063      	str	r3, [r4, #4]
 8009a5a:	6054      	str	r4, [r2, #4]
 8009a5c:	e7cb      	b.n	80099f6 <_free_r+0x22>
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	20000378 	.word	0x20000378

08009a64 <sbrk_aligned>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4e0e      	ldr	r6, [pc, #56]	; (8009aa0 <sbrk_aligned+0x3c>)
 8009a68:	460c      	mov	r4, r1
 8009a6a:	6831      	ldr	r1, [r6, #0]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	b911      	cbnz	r1, 8009a76 <sbrk_aligned+0x12>
 8009a70:	f000 fb7a 	bl	800a168 <_sbrk_r>
 8009a74:	6030      	str	r0, [r6, #0]
 8009a76:	4621      	mov	r1, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f000 fb75 	bl	800a168 <_sbrk_r>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d00a      	beq.n	8009a98 <sbrk_aligned+0x34>
 8009a82:	1cc4      	adds	r4, r0, #3
 8009a84:	f024 0403 	bic.w	r4, r4, #3
 8009a88:	42a0      	cmp	r0, r4
 8009a8a:	d007      	beq.n	8009a9c <sbrk_aligned+0x38>
 8009a8c:	1a21      	subs	r1, r4, r0
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f000 fb6a 	bl	800a168 <_sbrk_r>
 8009a94:	3001      	adds	r0, #1
 8009a96:	d101      	bne.n	8009a9c <sbrk_aligned+0x38>
 8009a98:	f04f 34ff 	mov.w	r4, #4294967295
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	2000037c 	.word	0x2000037c

08009aa4 <_malloc_r>:
 8009aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa8:	1ccd      	adds	r5, r1, #3
 8009aaa:	f025 0503 	bic.w	r5, r5, #3
 8009aae:	3508      	adds	r5, #8
 8009ab0:	2d0c      	cmp	r5, #12
 8009ab2:	bf38      	it	cc
 8009ab4:	250c      	movcc	r5, #12
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	4607      	mov	r7, r0
 8009aba:	db01      	blt.n	8009ac0 <_malloc_r+0x1c>
 8009abc:	42a9      	cmp	r1, r5
 8009abe:	d905      	bls.n	8009acc <_malloc_r+0x28>
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	2600      	movs	r6, #0
 8009ac4:	603b      	str	r3, [r7, #0]
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	4e2e      	ldr	r6, [pc, #184]	; (8009b88 <_malloc_r+0xe4>)
 8009ace:	f000 fc03 	bl	800a2d8 <__malloc_lock>
 8009ad2:	6833      	ldr	r3, [r6, #0]
 8009ad4:	461c      	mov	r4, r3
 8009ad6:	bb34      	cbnz	r4, 8009b26 <_malloc_r+0x82>
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4638      	mov	r0, r7
 8009adc:	f7ff ffc2 	bl	8009a64 <sbrk_aligned>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	d14d      	bne.n	8009b82 <_malloc_r+0xde>
 8009ae6:	6834      	ldr	r4, [r6, #0]
 8009ae8:	4626      	mov	r6, r4
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	d140      	bne.n	8009b70 <_malloc_r+0xcc>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	4631      	mov	r1, r6
 8009af2:	4638      	mov	r0, r7
 8009af4:	eb04 0803 	add.w	r8, r4, r3
 8009af8:	f000 fb36 	bl	800a168 <_sbrk_r>
 8009afc:	4580      	cmp	r8, r0
 8009afe:	d13a      	bne.n	8009b76 <_malloc_r+0xd2>
 8009b00:	6821      	ldr	r1, [r4, #0]
 8009b02:	3503      	adds	r5, #3
 8009b04:	1a6d      	subs	r5, r5, r1
 8009b06:	f025 0503 	bic.w	r5, r5, #3
 8009b0a:	3508      	adds	r5, #8
 8009b0c:	2d0c      	cmp	r5, #12
 8009b0e:	bf38      	it	cc
 8009b10:	250c      	movcc	r5, #12
 8009b12:	4638      	mov	r0, r7
 8009b14:	4629      	mov	r1, r5
 8009b16:	f7ff ffa5 	bl	8009a64 <sbrk_aligned>
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	d02b      	beq.n	8009b76 <_malloc_r+0xd2>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	442b      	add	r3, r5
 8009b22:	6023      	str	r3, [r4, #0]
 8009b24:	e00e      	b.n	8009b44 <_malloc_r+0xa0>
 8009b26:	6822      	ldr	r2, [r4, #0]
 8009b28:	1b52      	subs	r2, r2, r5
 8009b2a:	d41e      	bmi.n	8009b6a <_malloc_r+0xc6>
 8009b2c:	2a0b      	cmp	r2, #11
 8009b2e:	d916      	bls.n	8009b5e <_malloc_r+0xba>
 8009b30:	1961      	adds	r1, r4, r5
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	6025      	str	r5, [r4, #0]
 8009b36:	bf18      	it	ne
 8009b38:	6059      	strne	r1, [r3, #4]
 8009b3a:	6863      	ldr	r3, [r4, #4]
 8009b3c:	bf08      	it	eq
 8009b3e:	6031      	streq	r1, [r6, #0]
 8009b40:	5162      	str	r2, [r4, r5]
 8009b42:	604b      	str	r3, [r1, #4]
 8009b44:	4638      	mov	r0, r7
 8009b46:	f104 060b 	add.w	r6, r4, #11
 8009b4a:	f000 fbcb 	bl	800a2e4 <__malloc_unlock>
 8009b4e:	f026 0607 	bic.w	r6, r6, #7
 8009b52:	1d23      	adds	r3, r4, #4
 8009b54:	1af2      	subs	r2, r6, r3
 8009b56:	d0b6      	beq.n	8009ac6 <_malloc_r+0x22>
 8009b58:	1b9b      	subs	r3, r3, r6
 8009b5a:	50a3      	str	r3, [r4, r2]
 8009b5c:	e7b3      	b.n	8009ac6 <_malloc_r+0x22>
 8009b5e:	6862      	ldr	r2, [r4, #4]
 8009b60:	42a3      	cmp	r3, r4
 8009b62:	bf0c      	ite	eq
 8009b64:	6032      	streq	r2, [r6, #0]
 8009b66:	605a      	strne	r2, [r3, #4]
 8009b68:	e7ec      	b.n	8009b44 <_malloc_r+0xa0>
 8009b6a:	4623      	mov	r3, r4
 8009b6c:	6864      	ldr	r4, [r4, #4]
 8009b6e:	e7b2      	b.n	8009ad6 <_malloc_r+0x32>
 8009b70:	4634      	mov	r4, r6
 8009b72:	6876      	ldr	r6, [r6, #4]
 8009b74:	e7b9      	b.n	8009aea <_malloc_r+0x46>
 8009b76:	230c      	movs	r3, #12
 8009b78:	4638      	mov	r0, r7
 8009b7a:	603b      	str	r3, [r7, #0]
 8009b7c:	f000 fbb2 	bl	800a2e4 <__malloc_unlock>
 8009b80:	e7a1      	b.n	8009ac6 <_malloc_r+0x22>
 8009b82:	6025      	str	r5, [r4, #0]
 8009b84:	e7de      	b.n	8009b44 <_malloc_r+0xa0>
 8009b86:	bf00      	nop
 8009b88:	20000378 	.word	0x20000378

08009b8c <__sfputc_r>:
 8009b8c:	6893      	ldr	r3, [r2, #8]
 8009b8e:	b410      	push	{r4}
 8009b90:	3b01      	subs	r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	6093      	str	r3, [r2, #8]
 8009b96:	da07      	bge.n	8009ba8 <__sfputc_r+0x1c>
 8009b98:	6994      	ldr	r4, [r2, #24]
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	db01      	blt.n	8009ba2 <__sfputc_r+0x16>
 8009b9e:	290a      	cmp	r1, #10
 8009ba0:	d102      	bne.n	8009ba8 <__sfputc_r+0x1c>
 8009ba2:	bc10      	pop	{r4}
 8009ba4:	f7ff bc3a 	b.w	800941c <__swbuf_r>
 8009ba8:	6813      	ldr	r3, [r2, #0]
 8009baa:	1c58      	adds	r0, r3, #1
 8009bac:	6010      	str	r0, [r2, #0]
 8009bae:	7019      	strb	r1, [r3, #0]
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	bc10      	pop	{r4}
 8009bb4:	4770      	bx	lr

08009bb6 <__sfputs_r>:
 8009bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb8:	4606      	mov	r6, r0
 8009bba:	460f      	mov	r7, r1
 8009bbc:	4614      	mov	r4, r2
 8009bbe:	18d5      	adds	r5, r2, r3
 8009bc0:	42ac      	cmp	r4, r5
 8009bc2:	d101      	bne.n	8009bc8 <__sfputs_r+0x12>
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e007      	b.n	8009bd8 <__sfputs_r+0x22>
 8009bc8:	463a      	mov	r2, r7
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd0:	f7ff ffdc 	bl	8009b8c <__sfputc_r>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d1f3      	bne.n	8009bc0 <__sfputs_r+0xa>
 8009bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bdc <_vfiprintf_r>:
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	460d      	mov	r5, r1
 8009be2:	4614      	mov	r4, r2
 8009be4:	4698      	mov	r8, r3
 8009be6:	4606      	mov	r6, r0
 8009be8:	b09d      	sub	sp, #116	; 0x74
 8009bea:	b118      	cbz	r0, 8009bf4 <_vfiprintf_r+0x18>
 8009bec:	6983      	ldr	r3, [r0, #24]
 8009bee:	b90b      	cbnz	r3, 8009bf4 <_vfiprintf_r+0x18>
 8009bf0:	f7ff fdea 	bl	80097c8 <__sinit>
 8009bf4:	4b89      	ldr	r3, [pc, #548]	; (8009e1c <_vfiprintf_r+0x240>)
 8009bf6:	429d      	cmp	r5, r3
 8009bf8:	d11b      	bne.n	8009c32 <_vfiprintf_r+0x56>
 8009bfa:	6875      	ldr	r5, [r6, #4]
 8009bfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bfe:	07d9      	lsls	r1, r3, #31
 8009c00:	d405      	bmi.n	8009c0e <_vfiprintf_r+0x32>
 8009c02:	89ab      	ldrh	r3, [r5, #12]
 8009c04:	059a      	lsls	r2, r3, #22
 8009c06:	d402      	bmi.n	8009c0e <_vfiprintf_r+0x32>
 8009c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c0a:	f7ff fe7b 	bl	8009904 <__retarget_lock_acquire_recursive>
 8009c0e:	89ab      	ldrh	r3, [r5, #12]
 8009c10:	071b      	lsls	r3, r3, #28
 8009c12:	d501      	bpl.n	8009c18 <_vfiprintf_r+0x3c>
 8009c14:	692b      	ldr	r3, [r5, #16]
 8009c16:	b9eb      	cbnz	r3, 8009c54 <_vfiprintf_r+0x78>
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f7ff fc50 	bl	80094c0 <__swsetup_r>
 8009c20:	b1c0      	cbz	r0, 8009c54 <_vfiprintf_r+0x78>
 8009c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c24:	07dc      	lsls	r4, r3, #31
 8009c26:	d50e      	bpl.n	8009c46 <_vfiprintf_r+0x6a>
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	b01d      	add	sp, #116	; 0x74
 8009c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c32:	4b7b      	ldr	r3, [pc, #492]	; (8009e20 <_vfiprintf_r+0x244>)
 8009c34:	429d      	cmp	r5, r3
 8009c36:	d101      	bne.n	8009c3c <_vfiprintf_r+0x60>
 8009c38:	68b5      	ldr	r5, [r6, #8]
 8009c3a:	e7df      	b.n	8009bfc <_vfiprintf_r+0x20>
 8009c3c:	4b79      	ldr	r3, [pc, #484]	; (8009e24 <_vfiprintf_r+0x248>)
 8009c3e:	429d      	cmp	r5, r3
 8009c40:	bf08      	it	eq
 8009c42:	68f5      	ldreq	r5, [r6, #12]
 8009c44:	e7da      	b.n	8009bfc <_vfiprintf_r+0x20>
 8009c46:	89ab      	ldrh	r3, [r5, #12]
 8009c48:	0598      	lsls	r0, r3, #22
 8009c4a:	d4ed      	bmi.n	8009c28 <_vfiprintf_r+0x4c>
 8009c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c4e:	f7ff fe5a 	bl	8009906 <__retarget_lock_release_recursive>
 8009c52:	e7e9      	b.n	8009c28 <_vfiprintf_r+0x4c>
 8009c54:	2300      	movs	r3, #0
 8009c56:	9309      	str	r3, [sp, #36]	; 0x24
 8009c58:	2320      	movs	r3, #32
 8009c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c5e:	2330      	movs	r3, #48	; 0x30
 8009c60:	f04f 0901 	mov.w	r9, #1
 8009c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009e28 <_vfiprintf_r+0x24c>
 8009c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c70:	4623      	mov	r3, r4
 8009c72:	469a      	mov	sl, r3
 8009c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c78:	b10a      	cbz	r2, 8009c7e <_vfiprintf_r+0xa2>
 8009c7a:	2a25      	cmp	r2, #37	; 0x25
 8009c7c:	d1f9      	bne.n	8009c72 <_vfiprintf_r+0x96>
 8009c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c82:	d00b      	beq.n	8009c9c <_vfiprintf_r+0xc0>
 8009c84:	465b      	mov	r3, fp
 8009c86:	4622      	mov	r2, r4
 8009c88:	4629      	mov	r1, r5
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7ff ff93 	bl	8009bb6 <__sfputs_r>
 8009c90:	3001      	adds	r0, #1
 8009c92:	f000 80aa 	beq.w	8009dea <_vfiprintf_r+0x20e>
 8009c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c98:	445a      	add	r2, fp
 8009c9a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 80a2 	beq.w	8009dea <_vfiprintf_r+0x20e>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cb0:	f10a 0a01 	add.w	sl, sl, #1
 8009cb4:	9304      	str	r3, [sp, #16]
 8009cb6:	9307      	str	r3, [sp, #28]
 8009cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8009cbe:	4654      	mov	r4, sl
 8009cc0:	2205      	movs	r2, #5
 8009cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc6:	4858      	ldr	r0, [pc, #352]	; (8009e28 <_vfiprintf_r+0x24c>)
 8009cc8:	f000 faf8 	bl	800a2bc <memchr>
 8009ccc:	9a04      	ldr	r2, [sp, #16]
 8009cce:	b9d8      	cbnz	r0, 8009d08 <_vfiprintf_r+0x12c>
 8009cd0:	06d1      	lsls	r1, r2, #27
 8009cd2:	bf44      	itt	mi
 8009cd4:	2320      	movmi	r3, #32
 8009cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cda:	0713      	lsls	r3, r2, #28
 8009cdc:	bf44      	itt	mi
 8009cde:	232b      	movmi	r3, #43	; 0x2b
 8009ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cea:	d015      	beq.n	8009d18 <_vfiprintf_r+0x13c>
 8009cec:	4654      	mov	r4, sl
 8009cee:	2000      	movs	r0, #0
 8009cf0:	f04f 0c0a 	mov.w	ip, #10
 8009cf4:	9a07      	ldr	r2, [sp, #28]
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cfc:	3b30      	subs	r3, #48	; 0x30
 8009cfe:	2b09      	cmp	r3, #9
 8009d00:	d94e      	bls.n	8009da0 <_vfiprintf_r+0x1c4>
 8009d02:	b1b0      	cbz	r0, 8009d32 <_vfiprintf_r+0x156>
 8009d04:	9207      	str	r2, [sp, #28]
 8009d06:	e014      	b.n	8009d32 <_vfiprintf_r+0x156>
 8009d08:	eba0 0308 	sub.w	r3, r0, r8
 8009d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d10:	4313      	orrs	r3, r2
 8009d12:	46a2      	mov	sl, r4
 8009d14:	9304      	str	r3, [sp, #16]
 8009d16:	e7d2      	b.n	8009cbe <_vfiprintf_r+0xe2>
 8009d18:	9b03      	ldr	r3, [sp, #12]
 8009d1a:	1d19      	adds	r1, r3, #4
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	9103      	str	r1, [sp, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	bfbb      	ittet	lt
 8009d24:	425b      	neglt	r3, r3
 8009d26:	f042 0202 	orrlt.w	r2, r2, #2
 8009d2a:	9307      	strge	r3, [sp, #28]
 8009d2c:	9307      	strlt	r3, [sp, #28]
 8009d2e:	bfb8      	it	lt
 8009d30:	9204      	strlt	r2, [sp, #16]
 8009d32:	7823      	ldrb	r3, [r4, #0]
 8009d34:	2b2e      	cmp	r3, #46	; 0x2e
 8009d36:	d10c      	bne.n	8009d52 <_vfiprintf_r+0x176>
 8009d38:	7863      	ldrb	r3, [r4, #1]
 8009d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d3c:	d135      	bne.n	8009daa <_vfiprintf_r+0x1ce>
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	3402      	adds	r4, #2
 8009d42:	1d1a      	adds	r2, r3, #4
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	9203      	str	r2, [sp, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	bfb8      	it	lt
 8009d4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d50:	9305      	str	r3, [sp, #20]
 8009d52:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009e2c <_vfiprintf_r+0x250>
 8009d56:	2203      	movs	r2, #3
 8009d58:	4650      	mov	r0, sl
 8009d5a:	7821      	ldrb	r1, [r4, #0]
 8009d5c:	f000 faae 	bl	800a2bc <memchr>
 8009d60:	b140      	cbz	r0, 8009d74 <_vfiprintf_r+0x198>
 8009d62:	2340      	movs	r3, #64	; 0x40
 8009d64:	eba0 000a 	sub.w	r0, r0, sl
 8009d68:	fa03 f000 	lsl.w	r0, r3, r0
 8009d6c:	9b04      	ldr	r3, [sp, #16]
 8009d6e:	3401      	adds	r4, #1
 8009d70:	4303      	orrs	r3, r0
 8009d72:	9304      	str	r3, [sp, #16]
 8009d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d78:	2206      	movs	r2, #6
 8009d7a:	482d      	ldr	r0, [pc, #180]	; (8009e30 <_vfiprintf_r+0x254>)
 8009d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d80:	f000 fa9c 	bl	800a2bc <memchr>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d03f      	beq.n	8009e08 <_vfiprintf_r+0x22c>
 8009d88:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <_vfiprintf_r+0x258>)
 8009d8a:	bb1b      	cbnz	r3, 8009dd4 <_vfiprintf_r+0x1f8>
 8009d8c:	9b03      	ldr	r3, [sp, #12]
 8009d8e:	3307      	adds	r3, #7
 8009d90:	f023 0307 	bic.w	r3, r3, #7
 8009d94:	3308      	adds	r3, #8
 8009d96:	9303      	str	r3, [sp, #12]
 8009d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d9a:	443b      	add	r3, r7
 8009d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d9e:	e767      	b.n	8009c70 <_vfiprintf_r+0x94>
 8009da0:	460c      	mov	r4, r1
 8009da2:	2001      	movs	r0, #1
 8009da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009da8:	e7a5      	b.n	8009cf6 <_vfiprintf_r+0x11a>
 8009daa:	2300      	movs	r3, #0
 8009dac:	f04f 0c0a 	mov.w	ip, #10
 8009db0:	4619      	mov	r1, r3
 8009db2:	3401      	adds	r4, #1
 8009db4:	9305      	str	r3, [sp, #20]
 8009db6:	4620      	mov	r0, r4
 8009db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dbc:	3a30      	subs	r2, #48	; 0x30
 8009dbe:	2a09      	cmp	r2, #9
 8009dc0:	d903      	bls.n	8009dca <_vfiprintf_r+0x1ee>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0c5      	beq.n	8009d52 <_vfiprintf_r+0x176>
 8009dc6:	9105      	str	r1, [sp, #20]
 8009dc8:	e7c3      	b.n	8009d52 <_vfiprintf_r+0x176>
 8009dca:	4604      	mov	r4, r0
 8009dcc:	2301      	movs	r3, #1
 8009dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dd2:	e7f0      	b.n	8009db6 <_vfiprintf_r+0x1da>
 8009dd4:	ab03      	add	r3, sp, #12
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	462a      	mov	r2, r5
 8009dda:	4630      	mov	r0, r6
 8009ddc:	4b16      	ldr	r3, [pc, #88]	; (8009e38 <_vfiprintf_r+0x25c>)
 8009dde:	a904      	add	r1, sp, #16
 8009de0:	f3af 8000 	nop.w
 8009de4:	4607      	mov	r7, r0
 8009de6:	1c78      	adds	r0, r7, #1
 8009de8:	d1d6      	bne.n	8009d98 <_vfiprintf_r+0x1bc>
 8009dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dec:	07d9      	lsls	r1, r3, #31
 8009dee:	d405      	bmi.n	8009dfc <_vfiprintf_r+0x220>
 8009df0:	89ab      	ldrh	r3, [r5, #12]
 8009df2:	059a      	lsls	r2, r3, #22
 8009df4:	d402      	bmi.n	8009dfc <_vfiprintf_r+0x220>
 8009df6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009df8:	f7ff fd85 	bl	8009906 <__retarget_lock_release_recursive>
 8009dfc:	89ab      	ldrh	r3, [r5, #12]
 8009dfe:	065b      	lsls	r3, r3, #25
 8009e00:	f53f af12 	bmi.w	8009c28 <_vfiprintf_r+0x4c>
 8009e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e06:	e711      	b.n	8009c2c <_vfiprintf_r+0x50>
 8009e08:	ab03      	add	r3, sp, #12
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	462a      	mov	r2, r5
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4b09      	ldr	r3, [pc, #36]	; (8009e38 <_vfiprintf_r+0x25c>)
 8009e12:	a904      	add	r1, sp, #16
 8009e14:	f000 f882 	bl	8009f1c <_printf_i>
 8009e18:	e7e4      	b.n	8009de4 <_vfiprintf_r+0x208>
 8009e1a:	bf00      	nop
 8009e1c:	0800b898 	.word	0x0800b898
 8009e20:	0800b8b8 	.word	0x0800b8b8
 8009e24:	0800b878 	.word	0x0800b878
 8009e28:	0800b8d8 	.word	0x0800b8d8
 8009e2c:	0800b8de 	.word	0x0800b8de
 8009e30:	0800b8e2 	.word	0x0800b8e2
 8009e34:	00000000 	.word	0x00000000
 8009e38:	08009bb7 	.word	0x08009bb7

08009e3c <_printf_common>:
 8009e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e40:	4616      	mov	r6, r2
 8009e42:	4699      	mov	r9, r3
 8009e44:	688a      	ldr	r2, [r1, #8]
 8009e46:	690b      	ldr	r3, [r1, #16]
 8009e48:	4607      	mov	r7, r0
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	bfb8      	it	lt
 8009e4e:	4613      	movlt	r3, r2
 8009e50:	6033      	str	r3, [r6, #0]
 8009e52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e56:	460c      	mov	r4, r1
 8009e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e5c:	b10a      	cbz	r2, 8009e62 <_printf_common+0x26>
 8009e5e:	3301      	adds	r3, #1
 8009e60:	6033      	str	r3, [r6, #0]
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	0699      	lsls	r1, r3, #26
 8009e66:	bf42      	ittt	mi
 8009e68:	6833      	ldrmi	r3, [r6, #0]
 8009e6a:	3302      	addmi	r3, #2
 8009e6c:	6033      	strmi	r3, [r6, #0]
 8009e6e:	6825      	ldr	r5, [r4, #0]
 8009e70:	f015 0506 	ands.w	r5, r5, #6
 8009e74:	d106      	bne.n	8009e84 <_printf_common+0x48>
 8009e76:	f104 0a19 	add.w	sl, r4, #25
 8009e7a:	68e3      	ldr	r3, [r4, #12]
 8009e7c:	6832      	ldr	r2, [r6, #0]
 8009e7e:	1a9b      	subs	r3, r3, r2
 8009e80:	42ab      	cmp	r3, r5
 8009e82:	dc28      	bgt.n	8009ed6 <_printf_common+0x9a>
 8009e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e88:	1e13      	subs	r3, r2, #0
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	bf18      	it	ne
 8009e8e:	2301      	movne	r3, #1
 8009e90:	0692      	lsls	r2, r2, #26
 8009e92:	d42d      	bmi.n	8009ef0 <_printf_common+0xb4>
 8009e94:	4649      	mov	r1, r9
 8009e96:	4638      	mov	r0, r7
 8009e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e9c:	47c0      	blx	r8
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	d020      	beq.n	8009ee4 <_printf_common+0xa8>
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	68e5      	ldr	r5, [r4, #12]
 8009ea6:	f003 0306 	and.w	r3, r3, #6
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	bf18      	it	ne
 8009eae:	2500      	movne	r5, #0
 8009eb0:	6832      	ldr	r2, [r6, #0]
 8009eb2:	f04f 0600 	mov.w	r6, #0
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	bf08      	it	eq
 8009eba:	1aad      	subeq	r5, r5, r2
 8009ebc:	6922      	ldr	r2, [r4, #16]
 8009ebe:	bf08      	it	eq
 8009ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	bfc4      	itt	gt
 8009ec8:	1a9b      	subgt	r3, r3, r2
 8009eca:	18ed      	addgt	r5, r5, r3
 8009ecc:	341a      	adds	r4, #26
 8009ece:	42b5      	cmp	r5, r6
 8009ed0:	d11a      	bne.n	8009f08 <_printf_common+0xcc>
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	e008      	b.n	8009ee8 <_printf_common+0xac>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	4652      	mov	r2, sl
 8009eda:	4649      	mov	r1, r9
 8009edc:	4638      	mov	r0, r7
 8009ede:	47c0      	blx	r8
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d103      	bne.n	8009eec <_printf_common+0xb0>
 8009ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eec:	3501      	adds	r5, #1
 8009eee:	e7c4      	b.n	8009e7a <_printf_common+0x3e>
 8009ef0:	2030      	movs	r0, #48	; 0x30
 8009ef2:	18e1      	adds	r1, r4, r3
 8009ef4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009efe:	4422      	add	r2, r4
 8009f00:	3302      	adds	r3, #2
 8009f02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f06:	e7c5      	b.n	8009e94 <_printf_common+0x58>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4622      	mov	r2, r4
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	4638      	mov	r0, r7
 8009f10:	47c0      	blx	r8
 8009f12:	3001      	adds	r0, #1
 8009f14:	d0e6      	beq.n	8009ee4 <_printf_common+0xa8>
 8009f16:	3601      	adds	r6, #1
 8009f18:	e7d9      	b.n	8009ece <_printf_common+0x92>
	...

08009f1c <_printf_i>:
 8009f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	7e0f      	ldrb	r7, [r1, #24]
 8009f22:	4691      	mov	r9, r2
 8009f24:	2f78      	cmp	r7, #120	; 0x78
 8009f26:	4680      	mov	r8, r0
 8009f28:	460c      	mov	r4, r1
 8009f2a:	469a      	mov	sl, r3
 8009f2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f32:	d807      	bhi.n	8009f44 <_printf_i+0x28>
 8009f34:	2f62      	cmp	r7, #98	; 0x62
 8009f36:	d80a      	bhi.n	8009f4e <_printf_i+0x32>
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	f000 80d9 	beq.w	800a0f0 <_printf_i+0x1d4>
 8009f3e:	2f58      	cmp	r7, #88	; 0x58
 8009f40:	f000 80a4 	beq.w	800a08c <_printf_i+0x170>
 8009f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f4c:	e03a      	b.n	8009fc4 <_printf_i+0xa8>
 8009f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f52:	2b15      	cmp	r3, #21
 8009f54:	d8f6      	bhi.n	8009f44 <_printf_i+0x28>
 8009f56:	a101      	add	r1, pc, #4	; (adr r1, 8009f5c <_printf_i+0x40>)
 8009f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f5c:	08009fb5 	.word	0x08009fb5
 8009f60:	08009fc9 	.word	0x08009fc9
 8009f64:	08009f45 	.word	0x08009f45
 8009f68:	08009f45 	.word	0x08009f45
 8009f6c:	08009f45 	.word	0x08009f45
 8009f70:	08009f45 	.word	0x08009f45
 8009f74:	08009fc9 	.word	0x08009fc9
 8009f78:	08009f45 	.word	0x08009f45
 8009f7c:	08009f45 	.word	0x08009f45
 8009f80:	08009f45 	.word	0x08009f45
 8009f84:	08009f45 	.word	0x08009f45
 8009f88:	0800a0d7 	.word	0x0800a0d7
 8009f8c:	08009ff9 	.word	0x08009ff9
 8009f90:	0800a0b9 	.word	0x0800a0b9
 8009f94:	08009f45 	.word	0x08009f45
 8009f98:	08009f45 	.word	0x08009f45
 8009f9c:	0800a0f9 	.word	0x0800a0f9
 8009fa0:	08009f45 	.word	0x08009f45
 8009fa4:	08009ff9 	.word	0x08009ff9
 8009fa8:	08009f45 	.word	0x08009f45
 8009fac:	08009f45 	.word	0x08009f45
 8009fb0:	0800a0c1 	.word	0x0800a0c1
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	1d1a      	adds	r2, r3, #4
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	602a      	str	r2, [r5, #0]
 8009fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e0a4      	b.n	800a112 <_printf_i+0x1f6>
 8009fc8:	6820      	ldr	r0, [r4, #0]
 8009fca:	6829      	ldr	r1, [r5, #0]
 8009fcc:	0606      	lsls	r6, r0, #24
 8009fce:	f101 0304 	add.w	r3, r1, #4
 8009fd2:	d50a      	bpl.n	8009fea <_printf_i+0xce>
 8009fd4:	680e      	ldr	r6, [r1, #0]
 8009fd6:	602b      	str	r3, [r5, #0]
 8009fd8:	2e00      	cmp	r6, #0
 8009fda:	da03      	bge.n	8009fe4 <_printf_i+0xc8>
 8009fdc:	232d      	movs	r3, #45	; 0x2d
 8009fde:	4276      	negs	r6, r6
 8009fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe4:	230a      	movs	r3, #10
 8009fe6:	485e      	ldr	r0, [pc, #376]	; (800a160 <_printf_i+0x244>)
 8009fe8:	e019      	b.n	800a01e <_printf_i+0x102>
 8009fea:	680e      	ldr	r6, [r1, #0]
 8009fec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	bf18      	it	ne
 8009ff4:	b236      	sxthne	r6, r6
 8009ff6:	e7ef      	b.n	8009fd8 <_printf_i+0xbc>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	6820      	ldr	r0, [r4, #0]
 8009ffc:	1d19      	adds	r1, r3, #4
 8009ffe:	6029      	str	r1, [r5, #0]
 800a000:	0601      	lsls	r1, r0, #24
 800a002:	d501      	bpl.n	800a008 <_printf_i+0xec>
 800a004:	681e      	ldr	r6, [r3, #0]
 800a006:	e002      	b.n	800a00e <_printf_i+0xf2>
 800a008:	0646      	lsls	r6, r0, #25
 800a00a:	d5fb      	bpl.n	800a004 <_printf_i+0xe8>
 800a00c:	881e      	ldrh	r6, [r3, #0]
 800a00e:	2f6f      	cmp	r7, #111	; 0x6f
 800a010:	bf0c      	ite	eq
 800a012:	2308      	moveq	r3, #8
 800a014:	230a      	movne	r3, #10
 800a016:	4852      	ldr	r0, [pc, #328]	; (800a160 <_printf_i+0x244>)
 800a018:	2100      	movs	r1, #0
 800a01a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a01e:	6865      	ldr	r5, [r4, #4]
 800a020:	2d00      	cmp	r5, #0
 800a022:	bfa8      	it	ge
 800a024:	6821      	ldrge	r1, [r4, #0]
 800a026:	60a5      	str	r5, [r4, #8]
 800a028:	bfa4      	itt	ge
 800a02a:	f021 0104 	bicge.w	r1, r1, #4
 800a02e:	6021      	strge	r1, [r4, #0]
 800a030:	b90e      	cbnz	r6, 800a036 <_printf_i+0x11a>
 800a032:	2d00      	cmp	r5, #0
 800a034:	d04d      	beq.n	800a0d2 <_printf_i+0x1b6>
 800a036:	4615      	mov	r5, r2
 800a038:	fbb6 f1f3 	udiv	r1, r6, r3
 800a03c:	fb03 6711 	mls	r7, r3, r1, r6
 800a040:	5dc7      	ldrb	r7, [r0, r7]
 800a042:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a046:	4637      	mov	r7, r6
 800a048:	42bb      	cmp	r3, r7
 800a04a:	460e      	mov	r6, r1
 800a04c:	d9f4      	bls.n	800a038 <_printf_i+0x11c>
 800a04e:	2b08      	cmp	r3, #8
 800a050:	d10b      	bne.n	800a06a <_printf_i+0x14e>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	07de      	lsls	r6, r3, #31
 800a056:	d508      	bpl.n	800a06a <_printf_i+0x14e>
 800a058:	6923      	ldr	r3, [r4, #16]
 800a05a:	6861      	ldr	r1, [r4, #4]
 800a05c:	4299      	cmp	r1, r3
 800a05e:	bfde      	ittt	le
 800a060:	2330      	movle	r3, #48	; 0x30
 800a062:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a066:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a06a:	1b52      	subs	r2, r2, r5
 800a06c:	6122      	str	r2, [r4, #16]
 800a06e:	464b      	mov	r3, r9
 800a070:	4621      	mov	r1, r4
 800a072:	4640      	mov	r0, r8
 800a074:	f8cd a000 	str.w	sl, [sp]
 800a078:	aa03      	add	r2, sp, #12
 800a07a:	f7ff fedf 	bl	8009e3c <_printf_common>
 800a07e:	3001      	adds	r0, #1
 800a080:	d14c      	bne.n	800a11c <_printf_i+0x200>
 800a082:	f04f 30ff 	mov.w	r0, #4294967295
 800a086:	b004      	add	sp, #16
 800a088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08c:	4834      	ldr	r0, [pc, #208]	; (800a160 <_printf_i+0x244>)
 800a08e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a092:	6829      	ldr	r1, [r5, #0]
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	f851 6b04 	ldr.w	r6, [r1], #4
 800a09a:	6029      	str	r1, [r5, #0]
 800a09c:	061d      	lsls	r5, r3, #24
 800a09e:	d514      	bpl.n	800a0ca <_printf_i+0x1ae>
 800a0a0:	07df      	lsls	r7, r3, #31
 800a0a2:	bf44      	itt	mi
 800a0a4:	f043 0320 	orrmi.w	r3, r3, #32
 800a0a8:	6023      	strmi	r3, [r4, #0]
 800a0aa:	b91e      	cbnz	r6, 800a0b4 <_printf_i+0x198>
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	f023 0320 	bic.w	r3, r3, #32
 800a0b2:	6023      	str	r3, [r4, #0]
 800a0b4:	2310      	movs	r3, #16
 800a0b6:	e7af      	b.n	800a018 <_printf_i+0xfc>
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	f043 0320 	orr.w	r3, r3, #32
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	2378      	movs	r3, #120	; 0x78
 800a0c2:	4828      	ldr	r0, [pc, #160]	; (800a164 <_printf_i+0x248>)
 800a0c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0c8:	e7e3      	b.n	800a092 <_printf_i+0x176>
 800a0ca:	0659      	lsls	r1, r3, #25
 800a0cc:	bf48      	it	mi
 800a0ce:	b2b6      	uxthmi	r6, r6
 800a0d0:	e7e6      	b.n	800a0a0 <_printf_i+0x184>
 800a0d2:	4615      	mov	r5, r2
 800a0d4:	e7bb      	b.n	800a04e <_printf_i+0x132>
 800a0d6:	682b      	ldr	r3, [r5, #0]
 800a0d8:	6826      	ldr	r6, [r4, #0]
 800a0da:	1d18      	adds	r0, r3, #4
 800a0dc:	6961      	ldr	r1, [r4, #20]
 800a0de:	6028      	str	r0, [r5, #0]
 800a0e0:	0635      	lsls	r5, r6, #24
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	d501      	bpl.n	800a0ea <_printf_i+0x1ce>
 800a0e6:	6019      	str	r1, [r3, #0]
 800a0e8:	e002      	b.n	800a0f0 <_printf_i+0x1d4>
 800a0ea:	0670      	lsls	r0, r6, #25
 800a0ec:	d5fb      	bpl.n	800a0e6 <_printf_i+0x1ca>
 800a0ee:	8019      	strh	r1, [r3, #0]
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	4615      	mov	r5, r2
 800a0f4:	6123      	str	r3, [r4, #16]
 800a0f6:	e7ba      	b.n	800a06e <_printf_i+0x152>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	1d1a      	adds	r2, r3, #4
 800a0fe:	602a      	str	r2, [r5, #0]
 800a100:	681d      	ldr	r5, [r3, #0]
 800a102:	6862      	ldr	r2, [r4, #4]
 800a104:	4628      	mov	r0, r5
 800a106:	f000 f8d9 	bl	800a2bc <memchr>
 800a10a:	b108      	cbz	r0, 800a110 <_printf_i+0x1f4>
 800a10c:	1b40      	subs	r0, r0, r5
 800a10e:	6060      	str	r0, [r4, #4]
 800a110:	6863      	ldr	r3, [r4, #4]
 800a112:	6123      	str	r3, [r4, #16]
 800a114:	2300      	movs	r3, #0
 800a116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a11a:	e7a8      	b.n	800a06e <_printf_i+0x152>
 800a11c:	462a      	mov	r2, r5
 800a11e:	4649      	mov	r1, r9
 800a120:	4640      	mov	r0, r8
 800a122:	6923      	ldr	r3, [r4, #16]
 800a124:	47d0      	blx	sl
 800a126:	3001      	adds	r0, #1
 800a128:	d0ab      	beq.n	800a082 <_printf_i+0x166>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	079b      	lsls	r3, r3, #30
 800a12e:	d413      	bmi.n	800a158 <_printf_i+0x23c>
 800a130:	68e0      	ldr	r0, [r4, #12]
 800a132:	9b03      	ldr	r3, [sp, #12]
 800a134:	4298      	cmp	r0, r3
 800a136:	bfb8      	it	lt
 800a138:	4618      	movlt	r0, r3
 800a13a:	e7a4      	b.n	800a086 <_printf_i+0x16a>
 800a13c:	2301      	movs	r3, #1
 800a13e:	4632      	mov	r2, r6
 800a140:	4649      	mov	r1, r9
 800a142:	4640      	mov	r0, r8
 800a144:	47d0      	blx	sl
 800a146:	3001      	adds	r0, #1
 800a148:	d09b      	beq.n	800a082 <_printf_i+0x166>
 800a14a:	3501      	adds	r5, #1
 800a14c:	68e3      	ldr	r3, [r4, #12]
 800a14e:	9903      	ldr	r1, [sp, #12]
 800a150:	1a5b      	subs	r3, r3, r1
 800a152:	42ab      	cmp	r3, r5
 800a154:	dcf2      	bgt.n	800a13c <_printf_i+0x220>
 800a156:	e7eb      	b.n	800a130 <_printf_i+0x214>
 800a158:	2500      	movs	r5, #0
 800a15a:	f104 0619 	add.w	r6, r4, #25
 800a15e:	e7f5      	b.n	800a14c <_printf_i+0x230>
 800a160:	0800b8e9 	.word	0x0800b8e9
 800a164:	0800b8fa 	.word	0x0800b8fa

0800a168 <_sbrk_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	2300      	movs	r3, #0
 800a16c:	4d05      	ldr	r5, [pc, #20]	; (800a184 <_sbrk_r+0x1c>)
 800a16e:	4604      	mov	r4, r0
 800a170:	4608      	mov	r0, r1
 800a172:	602b      	str	r3, [r5, #0]
 800a174:	f7ff f83a 	bl	80091ec <_sbrk>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d102      	bne.n	800a182 <_sbrk_r+0x1a>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	b103      	cbz	r3, 800a182 <_sbrk_r+0x1a>
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	20000380 	.word	0x20000380

0800a188 <__sread>:
 800a188:	b510      	push	{r4, lr}
 800a18a:	460c      	mov	r4, r1
 800a18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a190:	f000 f8ae 	bl	800a2f0 <_read_r>
 800a194:	2800      	cmp	r0, #0
 800a196:	bfab      	itete	ge
 800a198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a19a:	89a3      	ldrhlt	r3, [r4, #12]
 800a19c:	181b      	addge	r3, r3, r0
 800a19e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1a2:	bfac      	ite	ge
 800a1a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1a6:	81a3      	strhlt	r3, [r4, #12]
 800a1a8:	bd10      	pop	{r4, pc}

0800a1aa <__swrite>:
 800a1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ae:	461f      	mov	r7, r3
 800a1b0:	898b      	ldrh	r3, [r1, #12]
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	05db      	lsls	r3, r3, #23
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	4616      	mov	r6, r2
 800a1ba:	d505      	bpl.n	800a1c8 <__swrite+0x1e>
 800a1bc:	2302      	movs	r3, #2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c4:	f000 f868 	bl	800a298 <_lseek_r>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1de:	f000 b817 	b.w	800a210 <_write_r>

0800a1e2 <__sseek>:
 800a1e2:	b510      	push	{r4, lr}
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ea:	f000 f855 	bl	800a298 <_lseek_r>
 800a1ee:	1c43      	adds	r3, r0, #1
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	bf15      	itete	ne
 800a1f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1fe:	81a3      	strheq	r3, [r4, #12]
 800a200:	bf18      	it	ne
 800a202:	81a3      	strhne	r3, [r4, #12]
 800a204:	bd10      	pop	{r4, pc}

0800a206 <__sclose>:
 800a206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20a:	f000 b813 	b.w	800a234 <_close_r>
	...

0800a210 <_write_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4604      	mov	r4, r0
 800a214:	4608      	mov	r0, r1
 800a216:	4611      	mov	r1, r2
 800a218:	2200      	movs	r2, #0
 800a21a:	4d05      	ldr	r5, [pc, #20]	; (800a230 <_write_r+0x20>)
 800a21c:	602a      	str	r2, [r5, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	f7fa f910 	bl	8004444 <_write>
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	d102      	bne.n	800a22e <_write_r+0x1e>
 800a228:	682b      	ldr	r3, [r5, #0]
 800a22a:	b103      	cbz	r3, 800a22e <_write_r+0x1e>
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
 800a230:	20000380 	.word	0x20000380

0800a234 <_close_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	2300      	movs	r3, #0
 800a238:	4d05      	ldr	r5, [pc, #20]	; (800a250 <_close_r+0x1c>)
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	602b      	str	r3, [r5, #0]
 800a240:	f7fe ffa3 	bl	800918a <_close>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d102      	bne.n	800a24e <_close_r+0x1a>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	b103      	cbz	r3, 800a24e <_close_r+0x1a>
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	20000380 	.word	0x20000380

0800a254 <_fstat_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	2300      	movs	r3, #0
 800a258:	4d06      	ldr	r5, [pc, #24]	; (800a274 <_fstat_r+0x20>)
 800a25a:	4604      	mov	r4, r0
 800a25c:	4608      	mov	r0, r1
 800a25e:	4611      	mov	r1, r2
 800a260:	602b      	str	r3, [r5, #0]
 800a262:	f7fe ff9d 	bl	80091a0 <_fstat>
 800a266:	1c43      	adds	r3, r0, #1
 800a268:	d102      	bne.n	800a270 <_fstat_r+0x1c>
 800a26a:	682b      	ldr	r3, [r5, #0]
 800a26c:	b103      	cbz	r3, 800a270 <_fstat_r+0x1c>
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	bd38      	pop	{r3, r4, r5, pc}
 800a272:	bf00      	nop
 800a274:	20000380 	.word	0x20000380

0800a278 <_isatty_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	2300      	movs	r3, #0
 800a27c:	4d05      	ldr	r5, [pc, #20]	; (800a294 <_isatty_r+0x1c>)
 800a27e:	4604      	mov	r4, r0
 800a280:	4608      	mov	r0, r1
 800a282:	602b      	str	r3, [r5, #0]
 800a284:	f7fe ff9b 	bl	80091be <_isatty>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d102      	bne.n	800a292 <_isatty_r+0x1a>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	b103      	cbz	r3, 800a292 <_isatty_r+0x1a>
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	20000380 	.word	0x20000380

0800a298 <_lseek_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	4611      	mov	r1, r2
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4d05      	ldr	r5, [pc, #20]	; (800a2b8 <_lseek_r+0x20>)
 800a2a4:	602a      	str	r2, [r5, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	f7fe ff93 	bl	80091d2 <_lseek>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_lseek_r+0x1e>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_lseek_r+0x1e>
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	20000380 	.word	0x20000380

0800a2bc <memchr>:
 800a2bc:	4603      	mov	r3, r0
 800a2be:	b510      	push	{r4, lr}
 800a2c0:	b2c9      	uxtb	r1, r1
 800a2c2:	4402      	add	r2, r0
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	d101      	bne.n	800a2ce <memchr+0x12>
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	e003      	b.n	800a2d6 <memchr+0x1a>
 800a2ce:	7804      	ldrb	r4, [r0, #0]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	428c      	cmp	r4, r1
 800a2d4:	d1f6      	bne.n	800a2c4 <memchr+0x8>
 800a2d6:	bd10      	pop	{r4, pc}

0800a2d8 <__malloc_lock>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	; (800a2e0 <__malloc_lock+0x8>)
 800a2da:	f7ff bb13 	b.w	8009904 <__retarget_lock_acquire_recursive>
 800a2de:	bf00      	nop
 800a2e0:	20000374 	.word	0x20000374

0800a2e4 <__malloc_unlock>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	; (800a2ec <__malloc_unlock+0x8>)
 800a2e6:	f7ff bb0e 	b.w	8009906 <__retarget_lock_release_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	20000374 	.word	0x20000374

0800a2f0 <_read_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	4d05      	ldr	r5, [pc, #20]	; (800a310 <_read_r+0x20>)
 800a2fc:	602a      	str	r2, [r5, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f7fe ff26 	bl	8009150 <_read>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_read_r+0x1e>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_read_r+0x1e>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20000380 	.word	0x20000380

0800a314 <pow>:
 800a314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a318:	4614      	mov	r4, r2
 800a31a:	461d      	mov	r5, r3
 800a31c:	4680      	mov	r8, r0
 800a31e:	4689      	mov	r9, r1
 800a320:	f000 f89e 	bl	800a460 <__ieee754_pow>
 800a324:	4622      	mov	r2, r4
 800a326:	4606      	mov	r6, r0
 800a328:	460f      	mov	r7, r1
 800a32a:	462b      	mov	r3, r5
 800a32c:	4620      	mov	r0, r4
 800a32e:	4629      	mov	r1, r5
 800a330:	f7f6 fb64 	bl	80009fc <__aeabi_dcmpun>
 800a334:	bbc8      	cbnz	r0, 800a3aa <pow+0x96>
 800a336:	2200      	movs	r2, #0
 800a338:	2300      	movs	r3, #0
 800a33a:	4640      	mov	r0, r8
 800a33c:	4649      	mov	r1, r9
 800a33e:	f7f6 fb2b 	bl	8000998 <__aeabi_dcmpeq>
 800a342:	b1b8      	cbz	r0, 800a374 <pow+0x60>
 800a344:	2200      	movs	r2, #0
 800a346:	2300      	movs	r3, #0
 800a348:	4620      	mov	r0, r4
 800a34a:	4629      	mov	r1, r5
 800a34c:	f7f6 fb24 	bl	8000998 <__aeabi_dcmpeq>
 800a350:	2800      	cmp	r0, #0
 800a352:	d141      	bne.n	800a3d8 <pow+0xc4>
 800a354:	4620      	mov	r0, r4
 800a356:	4629      	mov	r1, r5
 800a358:	f001 f892 	bl	800b480 <finite>
 800a35c:	b328      	cbz	r0, 800a3aa <pow+0x96>
 800a35e:	2200      	movs	r2, #0
 800a360:	2300      	movs	r3, #0
 800a362:	4620      	mov	r0, r4
 800a364:	4629      	mov	r1, r5
 800a366:	f7f6 fb21 	bl	80009ac <__aeabi_dcmplt>
 800a36a:	b1f0      	cbz	r0, 800a3aa <pow+0x96>
 800a36c:	f7fe ff96 	bl	800929c <__errno>
 800a370:	2322      	movs	r3, #34	; 0x22
 800a372:	e019      	b.n	800a3a8 <pow+0x94>
 800a374:	4630      	mov	r0, r6
 800a376:	4639      	mov	r1, r7
 800a378:	f001 f882 	bl	800b480 <finite>
 800a37c:	b9c8      	cbnz	r0, 800a3b2 <pow+0x9e>
 800a37e:	4640      	mov	r0, r8
 800a380:	4649      	mov	r1, r9
 800a382:	f001 f87d 	bl	800b480 <finite>
 800a386:	b1a0      	cbz	r0, 800a3b2 <pow+0x9e>
 800a388:	4620      	mov	r0, r4
 800a38a:	4629      	mov	r1, r5
 800a38c:	f001 f878 	bl	800b480 <finite>
 800a390:	b178      	cbz	r0, 800a3b2 <pow+0x9e>
 800a392:	4632      	mov	r2, r6
 800a394:	463b      	mov	r3, r7
 800a396:	4630      	mov	r0, r6
 800a398:	4639      	mov	r1, r7
 800a39a:	f7f6 fb2f 	bl	80009fc <__aeabi_dcmpun>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d0e4      	beq.n	800a36c <pow+0x58>
 800a3a2:	f7fe ff7b 	bl	800929c <__errno>
 800a3a6:	2321      	movs	r3, #33	; 0x21
 800a3a8:	6003      	str	r3, [r0, #0]
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	4639      	mov	r1, r7
 800a3ba:	f7f6 faed 	bl	8000998 <__aeabi_dcmpeq>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d0f3      	beq.n	800a3aa <pow+0x96>
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	f001 f85b 	bl	800b480 <finite>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d0ed      	beq.n	800a3aa <pow+0x96>
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	f001 f855 	bl	800b480 <finite>
 800a3d6:	e7c8      	b.n	800a36a <pow+0x56>
 800a3d8:	2600      	movs	r6, #0
 800a3da:	4f01      	ldr	r7, [pc, #4]	; (800a3e0 <pow+0xcc>)
 800a3dc:	e7e5      	b.n	800a3aa <pow+0x96>
 800a3de:	bf00      	nop
 800a3e0:	3ff00000 	.word	0x3ff00000

0800a3e4 <asinf>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	f000 fe00 	bl	800afec <__ieee754_asinf>
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f7f6 fe5d 	bl	80010b0 <__aeabi_fcmpun>
 800a3f6:	b980      	cbnz	r0, 800a41a <asinf+0x36>
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f001 f9d3 	bl	800b7a4 <fabsf>
 800a3fe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a402:	f7f6 fe4b 	bl	800109c <__aeabi_fcmpgt>
 800a406:	b140      	cbz	r0, 800a41a <asinf+0x36>
 800a408:	f7fe ff48 	bl	800929c <__errno>
 800a40c:	2321      	movs	r3, #33	; 0x21
 800a40e:	6003      	str	r3, [r0, #0]
 800a410:	4803      	ldr	r0, [pc, #12]	; (800a420 <asinf+0x3c>)
 800a412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a416:	f001 b9c9 	b.w	800b7ac <nanf>
 800a41a:	4628      	mov	r0, r5
 800a41c:	bd38      	pop	{r3, r4, r5, pc}
 800a41e:	bf00      	nop
 800a420:	0800b8dd 	.word	0x0800b8dd

0800a424 <atan2f>:
 800a424:	f000 bf26 	b.w	800b274 <__ieee754_atan2f>

0800a428 <sqrtf>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4605      	mov	r5, r0
 800a42c:	f000 ffa8 	bl	800b380 <__ieee754_sqrtf>
 800a430:	4629      	mov	r1, r5
 800a432:	4604      	mov	r4, r0
 800a434:	4628      	mov	r0, r5
 800a436:	f7f6 fe3b 	bl	80010b0 <__aeabi_fcmpun>
 800a43a:	b968      	cbnz	r0, 800a458 <sqrtf+0x30>
 800a43c:	2100      	movs	r1, #0
 800a43e:	4628      	mov	r0, r5
 800a440:	f7f6 fe0e 	bl	8001060 <__aeabi_fcmplt>
 800a444:	b140      	cbz	r0, 800a458 <sqrtf+0x30>
 800a446:	f7fe ff29 	bl	800929c <__errno>
 800a44a:	2321      	movs	r3, #33	; 0x21
 800a44c:	2100      	movs	r1, #0
 800a44e:	6003      	str	r3, [r0, #0]
 800a450:	4608      	mov	r0, r1
 800a452:	f7f6 fd1b 	bl	8000e8c <__aeabi_fdiv>
 800a456:	4604      	mov	r4, r0
 800a458:	4620      	mov	r0, r4
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	0000      	movs	r0, r0
	...

0800a460 <__ieee754_pow>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	b093      	sub	sp, #76	; 0x4c
 800a466:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a46a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800a46e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a472:	4689      	mov	r9, r1
 800a474:	ea56 0102 	orrs.w	r1, r6, r2
 800a478:	4680      	mov	r8, r0
 800a47a:	d111      	bne.n	800a4a0 <__ieee754_pow+0x40>
 800a47c:	1803      	adds	r3, r0, r0
 800a47e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800a482:	4152      	adcs	r2, r2
 800a484:	4299      	cmp	r1, r3
 800a486:	4b82      	ldr	r3, [pc, #520]	; (800a690 <__ieee754_pow+0x230>)
 800a488:	4193      	sbcs	r3, r2
 800a48a:	f080 84b9 	bcs.w	800ae00 <__ieee754_pow+0x9a0>
 800a48e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a492:	4640      	mov	r0, r8
 800a494:	4649      	mov	r1, r9
 800a496:	f7f5 fe61 	bl	800015c <__adddf3>
 800a49a:	4683      	mov	fp, r0
 800a49c:	468c      	mov	ip, r1
 800a49e:	e06f      	b.n	800a580 <__ieee754_pow+0x120>
 800a4a0:	4b7c      	ldr	r3, [pc, #496]	; (800a694 <__ieee754_pow+0x234>)
 800a4a2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800a4a6:	429c      	cmp	r4, r3
 800a4a8:	464d      	mov	r5, r9
 800a4aa:	4682      	mov	sl, r0
 800a4ac:	dc06      	bgt.n	800a4bc <__ieee754_pow+0x5c>
 800a4ae:	d101      	bne.n	800a4b4 <__ieee754_pow+0x54>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d1ec      	bne.n	800a48e <__ieee754_pow+0x2e>
 800a4b4:	429e      	cmp	r6, r3
 800a4b6:	dc01      	bgt.n	800a4bc <__ieee754_pow+0x5c>
 800a4b8:	d10f      	bne.n	800a4da <__ieee754_pow+0x7a>
 800a4ba:	b172      	cbz	r2, 800a4da <__ieee754_pow+0x7a>
 800a4bc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a4c0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a4c4:	ea55 050a 	orrs.w	r5, r5, sl
 800a4c8:	d1e1      	bne.n	800a48e <__ieee754_pow+0x2e>
 800a4ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a4ce:	18db      	adds	r3, r3, r3
 800a4d0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a4d4:	4152      	adcs	r2, r2
 800a4d6:	429d      	cmp	r5, r3
 800a4d8:	e7d5      	b.n	800a486 <__ieee754_pow+0x26>
 800a4da:	2d00      	cmp	r5, #0
 800a4dc:	da39      	bge.n	800a552 <__ieee754_pow+0xf2>
 800a4de:	4b6e      	ldr	r3, [pc, #440]	; (800a698 <__ieee754_pow+0x238>)
 800a4e0:	429e      	cmp	r6, r3
 800a4e2:	dc52      	bgt.n	800a58a <__ieee754_pow+0x12a>
 800a4e4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a4e8:	429e      	cmp	r6, r3
 800a4ea:	f340 849c 	ble.w	800ae26 <__ieee754_pow+0x9c6>
 800a4ee:	1533      	asrs	r3, r6, #20
 800a4f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a4f4:	2b14      	cmp	r3, #20
 800a4f6:	dd0f      	ble.n	800a518 <__ieee754_pow+0xb8>
 800a4f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a4fc:	fa22 f103 	lsr.w	r1, r2, r3
 800a500:	fa01 f303 	lsl.w	r3, r1, r3
 800a504:	4293      	cmp	r3, r2
 800a506:	f040 848e 	bne.w	800ae26 <__ieee754_pow+0x9c6>
 800a50a:	f001 0101 	and.w	r1, r1, #1
 800a50e:	f1c1 0302 	rsb	r3, r1, #2
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	b182      	cbz	r2, 800a538 <__ieee754_pow+0xd8>
 800a516:	e05d      	b.n	800a5d4 <__ieee754_pow+0x174>
 800a518:	2a00      	cmp	r2, #0
 800a51a:	d159      	bne.n	800a5d0 <__ieee754_pow+0x170>
 800a51c:	f1c3 0314 	rsb	r3, r3, #20
 800a520:	fa46 f103 	asr.w	r1, r6, r3
 800a524:	fa01 f303 	lsl.w	r3, r1, r3
 800a528:	42b3      	cmp	r3, r6
 800a52a:	f040 8479 	bne.w	800ae20 <__ieee754_pow+0x9c0>
 800a52e:	f001 0101 	and.w	r1, r1, #1
 800a532:	f1c1 0302 	rsb	r3, r1, #2
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	4b58      	ldr	r3, [pc, #352]	; (800a69c <__ieee754_pow+0x23c>)
 800a53a:	429e      	cmp	r6, r3
 800a53c:	d132      	bne.n	800a5a4 <__ieee754_pow+0x144>
 800a53e:	2f00      	cmp	r7, #0
 800a540:	f280 846a 	bge.w	800ae18 <__ieee754_pow+0x9b8>
 800a544:	4642      	mov	r2, r8
 800a546:	464b      	mov	r3, r9
 800a548:	2000      	movs	r0, #0
 800a54a:	4954      	ldr	r1, [pc, #336]	; (800a69c <__ieee754_pow+0x23c>)
 800a54c:	f7f6 f8e6 	bl	800071c <__aeabi_ddiv>
 800a550:	e7a3      	b.n	800a49a <__ieee754_pow+0x3a>
 800a552:	2300      	movs	r3, #0
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	2a00      	cmp	r2, #0
 800a558:	d13c      	bne.n	800a5d4 <__ieee754_pow+0x174>
 800a55a:	4b4e      	ldr	r3, [pc, #312]	; (800a694 <__ieee754_pow+0x234>)
 800a55c:	429e      	cmp	r6, r3
 800a55e:	d1eb      	bne.n	800a538 <__ieee754_pow+0xd8>
 800a560:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a564:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a568:	ea53 030a 	orrs.w	r3, r3, sl
 800a56c:	f000 8448 	beq.w	800ae00 <__ieee754_pow+0x9a0>
 800a570:	4b4b      	ldr	r3, [pc, #300]	; (800a6a0 <__ieee754_pow+0x240>)
 800a572:	429c      	cmp	r4, r3
 800a574:	dd0b      	ble.n	800a58e <__ieee754_pow+0x12e>
 800a576:	2f00      	cmp	r7, #0
 800a578:	f2c0 8448 	blt.w	800ae0c <__ieee754_pow+0x9ac>
 800a57c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a580:	4658      	mov	r0, fp
 800a582:	4661      	mov	r1, ip
 800a584:	b013      	add	sp, #76	; 0x4c
 800a586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58a:	2302      	movs	r3, #2
 800a58c:	e7e2      	b.n	800a554 <__ieee754_pow+0xf4>
 800a58e:	2f00      	cmp	r7, #0
 800a590:	f04f 0b00 	mov.w	fp, #0
 800a594:	f04f 0c00 	mov.w	ip, #0
 800a598:	daf2      	bge.n	800a580 <__ieee754_pow+0x120>
 800a59a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a59e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a5a2:	e7ed      	b.n	800a580 <__ieee754_pow+0x120>
 800a5a4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a5a8:	d106      	bne.n	800a5b8 <__ieee754_pow+0x158>
 800a5aa:	4642      	mov	r2, r8
 800a5ac:	464b      	mov	r3, r9
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	f7f5 ff89 	bl	80004c8 <__aeabi_dmul>
 800a5b6:	e770      	b.n	800a49a <__ieee754_pow+0x3a>
 800a5b8:	4b3a      	ldr	r3, [pc, #232]	; (800a6a4 <__ieee754_pow+0x244>)
 800a5ba:	429f      	cmp	r7, r3
 800a5bc:	d10a      	bne.n	800a5d4 <__ieee754_pow+0x174>
 800a5be:	2d00      	cmp	r5, #0
 800a5c0:	db08      	blt.n	800a5d4 <__ieee754_pow+0x174>
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	b013      	add	sp, #76	; 0x4c
 800a5c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	f000 bc5e 	b.w	800ae8c <__ieee754_sqrt>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	4640      	mov	r0, r8
 800a5d6:	4649      	mov	r1, r9
 800a5d8:	f000 ff4f 	bl	800b47a <fabs>
 800a5dc:	4683      	mov	fp, r0
 800a5de:	468c      	mov	ip, r1
 800a5e0:	f1ba 0f00 	cmp.w	sl, #0
 800a5e4:	d128      	bne.n	800a638 <__ieee754_pow+0x1d8>
 800a5e6:	b124      	cbz	r4, 800a5f2 <__ieee754_pow+0x192>
 800a5e8:	4b2c      	ldr	r3, [pc, #176]	; (800a69c <__ieee754_pow+0x23c>)
 800a5ea:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d122      	bne.n	800a638 <__ieee754_pow+0x1d8>
 800a5f2:	2f00      	cmp	r7, #0
 800a5f4:	da07      	bge.n	800a606 <__ieee754_pow+0x1a6>
 800a5f6:	465a      	mov	r2, fp
 800a5f8:	4663      	mov	r3, ip
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	4927      	ldr	r1, [pc, #156]	; (800a69c <__ieee754_pow+0x23c>)
 800a5fe:	f7f6 f88d 	bl	800071c <__aeabi_ddiv>
 800a602:	4683      	mov	fp, r0
 800a604:	468c      	mov	ip, r1
 800a606:	2d00      	cmp	r5, #0
 800a608:	daba      	bge.n	800a580 <__ieee754_pow+0x120>
 800a60a:	9b00      	ldr	r3, [sp, #0]
 800a60c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a610:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a614:	4323      	orrs	r3, r4
 800a616:	d108      	bne.n	800a62a <__ieee754_pow+0x1ca>
 800a618:	465a      	mov	r2, fp
 800a61a:	4663      	mov	r3, ip
 800a61c:	4658      	mov	r0, fp
 800a61e:	4661      	mov	r1, ip
 800a620:	f7f5 fd9a 	bl	8000158 <__aeabi_dsub>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	e790      	b.n	800a54c <__ieee754_pow+0xec>
 800a62a:	9b00      	ldr	r3, [sp, #0]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d1a7      	bne.n	800a580 <__ieee754_pow+0x120>
 800a630:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a634:	469c      	mov	ip, r3
 800a636:	e7a3      	b.n	800a580 <__ieee754_pow+0x120>
 800a638:	0feb      	lsrs	r3, r5, #31
 800a63a:	3b01      	subs	r3, #1
 800a63c:	930c      	str	r3, [sp, #48]	; 0x30
 800a63e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a640:	9b00      	ldr	r3, [sp, #0]
 800a642:	4313      	orrs	r3, r2
 800a644:	d104      	bne.n	800a650 <__ieee754_pow+0x1f0>
 800a646:	4642      	mov	r2, r8
 800a648:	464b      	mov	r3, r9
 800a64a:	4640      	mov	r0, r8
 800a64c:	4649      	mov	r1, r9
 800a64e:	e7e7      	b.n	800a620 <__ieee754_pow+0x1c0>
 800a650:	4b15      	ldr	r3, [pc, #84]	; (800a6a8 <__ieee754_pow+0x248>)
 800a652:	429e      	cmp	r6, r3
 800a654:	f340 80f6 	ble.w	800a844 <__ieee754_pow+0x3e4>
 800a658:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a65c:	429e      	cmp	r6, r3
 800a65e:	4b10      	ldr	r3, [pc, #64]	; (800a6a0 <__ieee754_pow+0x240>)
 800a660:	dd09      	ble.n	800a676 <__ieee754_pow+0x216>
 800a662:	429c      	cmp	r4, r3
 800a664:	dc0c      	bgt.n	800a680 <__ieee754_pow+0x220>
 800a666:	2f00      	cmp	r7, #0
 800a668:	da0c      	bge.n	800a684 <__ieee754_pow+0x224>
 800a66a:	2000      	movs	r0, #0
 800a66c:	b013      	add	sp, #76	; 0x4c
 800a66e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a672:	f000 befd 	b.w	800b470 <__math_oflow>
 800a676:	429c      	cmp	r4, r3
 800a678:	dbf5      	blt.n	800a666 <__ieee754_pow+0x206>
 800a67a:	4b08      	ldr	r3, [pc, #32]	; (800a69c <__ieee754_pow+0x23c>)
 800a67c:	429c      	cmp	r4, r3
 800a67e:	dd15      	ble.n	800a6ac <__ieee754_pow+0x24c>
 800a680:	2f00      	cmp	r7, #0
 800a682:	dcf2      	bgt.n	800a66a <__ieee754_pow+0x20a>
 800a684:	2000      	movs	r0, #0
 800a686:	b013      	add	sp, #76	; 0x4c
 800a688:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	f000 beeb 	b.w	800b466 <__math_uflow>
 800a690:	fff00000 	.word	0xfff00000
 800a694:	7ff00000 	.word	0x7ff00000
 800a698:	433fffff 	.word	0x433fffff
 800a69c:	3ff00000 	.word	0x3ff00000
 800a6a0:	3fefffff 	.word	0x3fefffff
 800a6a4:	3fe00000 	.word	0x3fe00000
 800a6a8:	41e00000 	.word	0x41e00000
 800a6ac:	4661      	mov	r1, ip
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	4658      	mov	r0, fp
 800a6b2:	4b5f      	ldr	r3, [pc, #380]	; (800a830 <__ieee754_pow+0x3d0>)
 800a6b4:	f7f5 fd50 	bl	8000158 <__aeabi_dsub>
 800a6b8:	a355      	add	r3, pc, #340	; (adr r3, 800a810 <__ieee754_pow+0x3b0>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	4604      	mov	r4, r0
 800a6c0:	460d      	mov	r5, r1
 800a6c2:	f7f5 ff01 	bl	80004c8 <__aeabi_dmul>
 800a6c6:	a354      	add	r3, pc, #336	; (adr r3, 800a818 <__ieee754_pow+0x3b8>)
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	460f      	mov	r7, r1
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	f7f5 fef8 	bl	80004c8 <__aeabi_dmul>
 800a6d8:	2200      	movs	r2, #0
 800a6da:	4682      	mov	sl, r0
 800a6dc:	468b      	mov	fp, r1
 800a6de:	4620      	mov	r0, r4
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4b54      	ldr	r3, [pc, #336]	; (800a834 <__ieee754_pow+0x3d4>)
 800a6e4:	f7f5 fef0 	bl	80004c8 <__aeabi_dmul>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	a14c      	add	r1, pc, #304	; (adr r1, 800a820 <__ieee754_pow+0x3c0>)
 800a6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6f2:	f7f5 fd31 	bl	8000158 <__aeabi_dsub>
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	462b      	mov	r3, r5
 800a6fa:	f7f5 fee5 	bl	80004c8 <__aeabi_dmul>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	2000      	movs	r0, #0
 800a704:	494c      	ldr	r1, [pc, #304]	; (800a838 <__ieee754_pow+0x3d8>)
 800a706:	f7f5 fd27 	bl	8000158 <__aeabi_dsub>
 800a70a:	4622      	mov	r2, r4
 800a70c:	462b      	mov	r3, r5
 800a70e:	4680      	mov	r8, r0
 800a710:	4689      	mov	r9, r1
 800a712:	4620      	mov	r0, r4
 800a714:	4629      	mov	r1, r5
 800a716:	f7f5 fed7 	bl	80004c8 <__aeabi_dmul>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4640      	mov	r0, r8
 800a720:	4649      	mov	r1, r9
 800a722:	f7f5 fed1 	bl	80004c8 <__aeabi_dmul>
 800a726:	a340      	add	r3, pc, #256	; (adr r3, 800a828 <__ieee754_pow+0x3c8>)
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	f7f5 fecc 	bl	80004c8 <__aeabi_dmul>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4650      	mov	r0, sl
 800a736:	4659      	mov	r1, fp
 800a738:	f7f5 fd0e 	bl	8000158 <__aeabi_dsub>
 800a73c:	f04f 0a00 	mov.w	sl, #0
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f5 fd06 	bl	800015c <__adddf3>
 800a750:	4632      	mov	r2, r6
 800a752:	463b      	mov	r3, r7
 800a754:	4650      	mov	r0, sl
 800a756:	468b      	mov	fp, r1
 800a758:	f7f5 fcfe 	bl	8000158 <__aeabi_dsub>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4620      	mov	r0, r4
 800a762:	4629      	mov	r1, r5
 800a764:	f7f5 fcf8 	bl	8000158 <__aeabi_dsub>
 800a768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a76c:	9b00      	ldr	r3, [sp, #0]
 800a76e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a770:	3b01      	subs	r3, #1
 800a772:	4313      	orrs	r3, r2
 800a774:	f04f 0600 	mov.w	r6, #0
 800a778:	f04f 0200 	mov.w	r2, #0
 800a77c:	bf0c      	ite	eq
 800a77e:	4b2f      	ldreq	r3, [pc, #188]	; (800a83c <__ieee754_pow+0x3dc>)
 800a780:	4b2b      	ldrne	r3, [pc, #172]	; (800a830 <__ieee754_pow+0x3d0>)
 800a782:	4604      	mov	r4, r0
 800a784:	460d      	mov	r5, r1
 800a786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a78a:	e9cd 2300 	strd	r2, r3, [sp]
 800a78e:	4632      	mov	r2, r6
 800a790:	463b      	mov	r3, r7
 800a792:	f7f5 fce1 	bl	8000158 <__aeabi_dsub>
 800a796:	4652      	mov	r2, sl
 800a798:	465b      	mov	r3, fp
 800a79a:	f7f5 fe95 	bl	80004c8 <__aeabi_dmul>
 800a79e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	4689      	mov	r9, r1
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7f5 fe8d 	bl	80004c8 <__aeabi_dmul>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	f7f5 fcd1 	bl	800015c <__adddf3>
 800a7ba:	4632      	mov	r2, r6
 800a7bc:	463b      	mov	r3, r7
 800a7be:	4680      	mov	r8, r0
 800a7c0:	4689      	mov	r9, r1
 800a7c2:	4650      	mov	r0, sl
 800a7c4:	4659      	mov	r1, fp
 800a7c6:	f7f5 fe7f 	bl	80004c8 <__aeabi_dmul>
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	4640      	mov	r0, r8
 800a7d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a7da:	f7f5 fcbf 	bl	800015c <__adddf3>
 800a7de:	4b18      	ldr	r3, [pc, #96]	; (800a840 <__ieee754_pow+0x3e0>)
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	4299      	cmp	r1, r3
 800a7e4:	460f      	mov	r7, r1
 800a7e6:	460e      	mov	r6, r1
 800a7e8:	f340 82e5 	ble.w	800adb6 <__ieee754_pow+0x956>
 800a7ec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a7f0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a7f4:	4303      	orrs	r3, r0
 800a7f6:	f000 81df 	beq.w	800abb8 <__ieee754_pow+0x758>
 800a7fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7fe:	2200      	movs	r2, #0
 800a800:	2300      	movs	r3, #0
 800a802:	f7f6 f8d3 	bl	80009ac <__aeabi_dcmplt>
 800a806:	3800      	subs	r0, #0
 800a808:	bf18      	it	ne
 800a80a:	2001      	movne	r0, #1
 800a80c:	e72e      	b.n	800a66c <__ieee754_pow+0x20c>
 800a80e:	bf00      	nop
 800a810:	60000000 	.word	0x60000000
 800a814:	3ff71547 	.word	0x3ff71547
 800a818:	f85ddf44 	.word	0xf85ddf44
 800a81c:	3e54ae0b 	.word	0x3e54ae0b
 800a820:	55555555 	.word	0x55555555
 800a824:	3fd55555 	.word	0x3fd55555
 800a828:	652b82fe 	.word	0x652b82fe
 800a82c:	3ff71547 	.word	0x3ff71547
 800a830:	3ff00000 	.word	0x3ff00000
 800a834:	3fd00000 	.word	0x3fd00000
 800a838:	3fe00000 	.word	0x3fe00000
 800a83c:	bff00000 	.word	0xbff00000
 800a840:	408fffff 	.word	0x408fffff
 800a844:	4bd2      	ldr	r3, [pc, #840]	; (800ab90 <__ieee754_pow+0x730>)
 800a846:	2200      	movs	r2, #0
 800a848:	402b      	ands	r3, r5
 800a84a:	b943      	cbnz	r3, 800a85e <__ieee754_pow+0x3fe>
 800a84c:	4658      	mov	r0, fp
 800a84e:	4661      	mov	r1, ip
 800a850:	4bd0      	ldr	r3, [pc, #832]	; (800ab94 <__ieee754_pow+0x734>)
 800a852:	f7f5 fe39 	bl	80004c8 <__aeabi_dmul>
 800a856:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a85a:	4683      	mov	fp, r0
 800a85c:	460c      	mov	r4, r1
 800a85e:	1523      	asrs	r3, r4, #20
 800a860:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a864:	4413      	add	r3, r2
 800a866:	930b      	str	r3, [sp, #44]	; 0x2c
 800a868:	4bcb      	ldr	r3, [pc, #812]	; (800ab98 <__ieee754_pow+0x738>)
 800a86a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a86e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a872:	429c      	cmp	r4, r3
 800a874:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a878:	dd08      	ble.n	800a88c <__ieee754_pow+0x42c>
 800a87a:	4bc8      	ldr	r3, [pc, #800]	; (800ab9c <__ieee754_pow+0x73c>)
 800a87c:	429c      	cmp	r4, r3
 800a87e:	f340 8199 	ble.w	800abb4 <__ieee754_pow+0x754>
 800a882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a884:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a888:	3301      	adds	r3, #1
 800a88a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a88c:	2600      	movs	r6, #0
 800a88e:	00f3      	lsls	r3, r6, #3
 800a890:	930d      	str	r3, [sp, #52]	; 0x34
 800a892:	4bc3      	ldr	r3, [pc, #780]	; (800aba0 <__ieee754_pow+0x740>)
 800a894:	4658      	mov	r0, fp
 800a896:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a89a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a89e:	4629      	mov	r1, r5
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a8a6:	4623      	mov	r3, r4
 800a8a8:	f7f5 fc56 	bl	8000158 <__aeabi_dsub>
 800a8ac:	46da      	mov	sl, fp
 800a8ae:	462b      	mov	r3, r5
 800a8b0:	4652      	mov	r2, sl
 800a8b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a8b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a8ba:	f7f5 fc4f 	bl	800015c <__adddf3>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	49b7      	ldr	r1, [pc, #732]	; (800aba4 <__ieee754_pow+0x744>)
 800a8c6:	f7f5 ff29 	bl	800071c <__aeabi_ddiv>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a8d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a8d6:	f7f5 fdf7 	bl	80004c8 <__aeabi_dmul>
 800a8da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8de:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a8e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	46ab      	mov	fp, r5
 800a8ec:	106d      	asrs	r5, r5, #1
 800a8ee:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a8f2:	9304      	str	r3, [sp, #16]
 800a8f4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a8f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a8fc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a900:	4640      	mov	r0, r8
 800a902:	4649      	mov	r1, r9
 800a904:	4614      	mov	r4, r2
 800a906:	461d      	mov	r5, r3
 800a908:	f7f5 fdde 	bl	80004c8 <__aeabi_dmul>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a914:	f7f5 fc20 	bl	8000158 <__aeabi_dsub>
 800a918:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a91c:	4606      	mov	r6, r0
 800a91e:	460f      	mov	r7, r1
 800a920:	4620      	mov	r0, r4
 800a922:	4629      	mov	r1, r5
 800a924:	f7f5 fc18 	bl	8000158 <__aeabi_dsub>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4650      	mov	r0, sl
 800a92e:	4659      	mov	r1, fp
 800a930:	f7f5 fc12 	bl	8000158 <__aeabi_dsub>
 800a934:	4642      	mov	r2, r8
 800a936:	464b      	mov	r3, r9
 800a938:	f7f5 fdc6 	bl	80004c8 <__aeabi_dmul>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4630      	mov	r0, r6
 800a942:	4639      	mov	r1, r7
 800a944:	f7f5 fc08 	bl	8000158 <__aeabi_dsub>
 800a948:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a94c:	f7f5 fdbc 	bl	80004c8 <__aeabi_dmul>
 800a950:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a954:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a958:	4610      	mov	r0, r2
 800a95a:	4619      	mov	r1, r3
 800a95c:	f7f5 fdb4 	bl	80004c8 <__aeabi_dmul>
 800a960:	a379      	add	r3, pc, #484	; (adr r3, 800ab48 <__ieee754_pow+0x6e8>)
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	4604      	mov	r4, r0
 800a968:	460d      	mov	r5, r1
 800a96a:	f7f5 fdad 	bl	80004c8 <__aeabi_dmul>
 800a96e:	a378      	add	r3, pc, #480	; (adr r3, 800ab50 <__ieee754_pow+0x6f0>)
 800a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a974:	f7f5 fbf2 	bl	800015c <__adddf3>
 800a978:	4622      	mov	r2, r4
 800a97a:	462b      	mov	r3, r5
 800a97c:	f7f5 fda4 	bl	80004c8 <__aeabi_dmul>
 800a980:	a375      	add	r3, pc, #468	; (adr r3, 800ab58 <__ieee754_pow+0x6f8>)
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f7f5 fbe9 	bl	800015c <__adddf3>
 800a98a:	4622      	mov	r2, r4
 800a98c:	462b      	mov	r3, r5
 800a98e:	f7f5 fd9b 	bl	80004c8 <__aeabi_dmul>
 800a992:	a373      	add	r3, pc, #460	; (adr r3, 800ab60 <__ieee754_pow+0x700>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f7f5 fbe0 	bl	800015c <__adddf3>
 800a99c:	4622      	mov	r2, r4
 800a99e:	462b      	mov	r3, r5
 800a9a0:	f7f5 fd92 	bl	80004c8 <__aeabi_dmul>
 800a9a4:	a370      	add	r3, pc, #448	; (adr r3, 800ab68 <__ieee754_pow+0x708>)
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	f7f5 fbd7 	bl	800015c <__adddf3>
 800a9ae:	4622      	mov	r2, r4
 800a9b0:	462b      	mov	r3, r5
 800a9b2:	f7f5 fd89 	bl	80004c8 <__aeabi_dmul>
 800a9b6:	a36e      	add	r3, pc, #440	; (adr r3, 800ab70 <__ieee754_pow+0x710>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	f7f5 fbce 	bl	800015c <__adddf3>
 800a9c0:	4622      	mov	r2, r4
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	460f      	mov	r7, r1
 800a9c6:	462b      	mov	r3, r5
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7f5 fd7c 	bl	80004c8 <__aeabi_dmul>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	f7f5 fd76 	bl	80004c8 <__aeabi_dmul>
 800a9dc:	4604      	mov	r4, r0
 800a9de:	460d      	mov	r5, r1
 800a9e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9e4:	4642      	mov	r2, r8
 800a9e6:	464b      	mov	r3, r9
 800a9e8:	f7f5 fbb8 	bl	800015c <__adddf3>
 800a9ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a9f0:	f7f5 fd6a 	bl	80004c8 <__aeabi_dmul>
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	462b      	mov	r3, r5
 800a9f8:	f7f5 fbb0 	bl	800015c <__adddf3>
 800a9fc:	4642      	mov	r2, r8
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460f      	mov	r7, r1
 800aa02:	464b      	mov	r3, r9
 800aa04:	4640      	mov	r0, r8
 800aa06:	4649      	mov	r1, r9
 800aa08:	f7f5 fd5e 	bl	80004c8 <__aeabi_dmul>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4b66      	ldr	r3, [pc, #408]	; (800aba8 <__ieee754_pow+0x748>)
 800aa10:	4682      	mov	sl, r0
 800aa12:	468b      	mov	fp, r1
 800aa14:	f7f5 fba2 	bl	800015c <__adddf3>
 800aa18:	4632      	mov	r2, r6
 800aa1a:	463b      	mov	r3, r7
 800aa1c:	f7f5 fb9e 	bl	800015c <__adddf3>
 800aa20:	2400      	movs	r4, #0
 800aa22:	460d      	mov	r5, r1
 800aa24:	4622      	mov	r2, r4
 800aa26:	460b      	mov	r3, r1
 800aa28:	4640      	mov	r0, r8
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	f7f5 fd4c 	bl	80004c8 <__aeabi_dmul>
 800aa30:	2200      	movs	r2, #0
 800aa32:	4680      	mov	r8, r0
 800aa34:	4689      	mov	r9, r1
 800aa36:	4620      	mov	r0, r4
 800aa38:	4629      	mov	r1, r5
 800aa3a:	4b5b      	ldr	r3, [pc, #364]	; (800aba8 <__ieee754_pow+0x748>)
 800aa3c:	f7f5 fb8c 	bl	8000158 <__aeabi_dsub>
 800aa40:	4652      	mov	r2, sl
 800aa42:	465b      	mov	r3, fp
 800aa44:	f7f5 fb88 	bl	8000158 <__aeabi_dsub>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	4639      	mov	r1, r7
 800aa50:	f7f5 fb82 	bl	8000158 <__aeabi_dsub>
 800aa54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa58:	f7f5 fd36 	bl	80004c8 <__aeabi_dmul>
 800aa5c:	4622      	mov	r2, r4
 800aa5e:	4606      	mov	r6, r0
 800aa60:	460f      	mov	r7, r1
 800aa62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa66:	462b      	mov	r3, r5
 800aa68:	f7f5 fd2e 	bl	80004c8 <__aeabi_dmul>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4630      	mov	r0, r6
 800aa72:	4639      	mov	r1, r7
 800aa74:	f7f5 fb72 	bl	800015c <__adddf3>
 800aa78:	2400      	movs	r4, #0
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4640      	mov	r0, r8
 800aa84:	4649      	mov	r1, r9
 800aa86:	f7f5 fb69 	bl	800015c <__adddf3>
 800aa8a:	a33b      	add	r3, pc, #236	; (adr r3, 800ab78 <__ieee754_pow+0x718>)
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	4620      	mov	r0, r4
 800aa92:	460d      	mov	r5, r1
 800aa94:	f7f5 fd18 	bl	80004c8 <__aeabi_dmul>
 800aa98:	4642      	mov	r2, r8
 800aa9a:	464b      	mov	r3, r9
 800aa9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f7f5 fb58 	bl	8000158 <__aeabi_dsub>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4630      	mov	r0, r6
 800aaae:	4639      	mov	r1, r7
 800aab0:	f7f5 fb52 	bl	8000158 <__aeabi_dsub>
 800aab4:	a332      	add	r3, pc, #200	; (adr r3, 800ab80 <__ieee754_pow+0x720>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	f7f5 fd05 	bl	80004c8 <__aeabi_dmul>
 800aabe:	a332      	add	r3, pc, #200	; (adr r3, 800ab88 <__ieee754_pow+0x728>)
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	4606      	mov	r6, r0
 800aac6:	460f      	mov	r7, r1
 800aac8:	4620      	mov	r0, r4
 800aaca:	4629      	mov	r1, r5
 800aacc:	f7f5 fcfc 	bl	80004c8 <__aeabi_dmul>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	4630      	mov	r0, r6
 800aad6:	4639      	mov	r1, r7
 800aad8:	f7f5 fb40 	bl	800015c <__adddf3>
 800aadc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aade:	4b33      	ldr	r3, [pc, #204]	; (800abac <__ieee754_pow+0x74c>)
 800aae0:	f04f 0a00 	mov.w	sl, #0
 800aae4:	4413      	add	r3, r2
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f7f5 fb37 	bl	800015c <__adddf3>
 800aaee:	4680      	mov	r8, r0
 800aaf0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aaf2:	4689      	mov	r9, r1
 800aaf4:	f7f5 fc7e 	bl	80003f4 <__aeabi_i2d>
 800aaf8:	4604      	mov	r4, r0
 800aafa:	460d      	mov	r5, r1
 800aafc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aafe:	4b2c      	ldr	r3, [pc, #176]	; (800abb0 <__ieee754_pow+0x750>)
 800ab00:	4413      	add	r3, r2
 800ab02:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ab06:	4642      	mov	r2, r8
 800ab08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab0c:	464b      	mov	r3, r9
 800ab0e:	f7f5 fb25 	bl	800015c <__adddf3>
 800ab12:	4632      	mov	r2, r6
 800ab14:	463b      	mov	r3, r7
 800ab16:	f7f5 fb21 	bl	800015c <__adddf3>
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	f7f5 fb1d 	bl	800015c <__adddf3>
 800ab22:	4622      	mov	r2, r4
 800ab24:	462b      	mov	r3, r5
 800ab26:	4650      	mov	r0, sl
 800ab28:	468b      	mov	fp, r1
 800ab2a:	f7f5 fb15 	bl	8000158 <__aeabi_dsub>
 800ab2e:	4632      	mov	r2, r6
 800ab30:	463b      	mov	r3, r7
 800ab32:	f7f5 fb11 	bl	8000158 <__aeabi_dsub>
 800ab36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab3a:	f7f5 fb0d 	bl	8000158 <__aeabi_dsub>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4640      	mov	r0, r8
 800ab44:	4649      	mov	r1, r9
 800ab46:	e60d      	b.n	800a764 <__ieee754_pow+0x304>
 800ab48:	4a454eef 	.word	0x4a454eef
 800ab4c:	3fca7e28 	.word	0x3fca7e28
 800ab50:	93c9db65 	.word	0x93c9db65
 800ab54:	3fcd864a 	.word	0x3fcd864a
 800ab58:	a91d4101 	.word	0xa91d4101
 800ab5c:	3fd17460 	.word	0x3fd17460
 800ab60:	518f264d 	.word	0x518f264d
 800ab64:	3fd55555 	.word	0x3fd55555
 800ab68:	db6fabff 	.word	0xdb6fabff
 800ab6c:	3fdb6db6 	.word	0x3fdb6db6
 800ab70:	33333303 	.word	0x33333303
 800ab74:	3fe33333 	.word	0x3fe33333
 800ab78:	e0000000 	.word	0xe0000000
 800ab7c:	3feec709 	.word	0x3feec709
 800ab80:	dc3a03fd 	.word	0xdc3a03fd
 800ab84:	3feec709 	.word	0x3feec709
 800ab88:	145b01f5 	.word	0x145b01f5
 800ab8c:	be3e2fe0 	.word	0xbe3e2fe0
 800ab90:	7ff00000 	.word	0x7ff00000
 800ab94:	43400000 	.word	0x43400000
 800ab98:	0003988e 	.word	0x0003988e
 800ab9c:	000bb679 	.word	0x000bb679
 800aba0:	0800b910 	.word	0x0800b910
 800aba4:	3ff00000 	.word	0x3ff00000
 800aba8:	40080000 	.word	0x40080000
 800abac:	0800b930 	.word	0x0800b930
 800abb0:	0800b920 	.word	0x0800b920
 800abb4:	2601      	movs	r6, #1
 800abb6:	e66a      	b.n	800a88e <__ieee754_pow+0x42e>
 800abb8:	a39d      	add	r3, pc, #628	; (adr r3, 800ae30 <__ieee754_pow+0x9d0>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	4640      	mov	r0, r8
 800abc0:	4649      	mov	r1, r9
 800abc2:	f7f5 facb 	bl	800015c <__adddf3>
 800abc6:	4622      	mov	r2, r4
 800abc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abcc:	462b      	mov	r3, r5
 800abce:	4650      	mov	r0, sl
 800abd0:	4639      	mov	r1, r7
 800abd2:	f7f5 fac1 	bl	8000158 <__aeabi_dsub>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abde:	f7f5 ff03 	bl	80009e8 <__aeabi_dcmpgt>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	f47f ae09 	bne.w	800a7fa <__ieee754_pow+0x39a>
 800abe8:	4aa3      	ldr	r2, [pc, #652]	; (800ae78 <__ieee754_pow+0xa18>)
 800abea:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800abee:	4293      	cmp	r3, r2
 800abf0:	f340 8101 	ble.w	800adf6 <__ieee754_pow+0x996>
 800abf4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800abf8:	2000      	movs	r0, #0
 800abfa:	151b      	asrs	r3, r3, #20
 800abfc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ac00:	fa4a f303 	asr.w	r3, sl, r3
 800ac04:	4433      	add	r3, r6
 800ac06:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ac0a:	4f9c      	ldr	r7, [pc, #624]	; (800ae7c <__ieee754_pow+0xa1c>)
 800ac0c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ac10:	4117      	asrs	r7, r2
 800ac12:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ac16:	ea23 0107 	bic.w	r1, r3, r7
 800ac1a:	f1c2 0214 	rsb	r2, r2, #20
 800ac1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ac22:	460b      	mov	r3, r1
 800ac24:	fa4a fa02 	asr.w	sl, sl, r2
 800ac28:	2e00      	cmp	r6, #0
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	4620      	mov	r0, r4
 800ac30:	bfb8      	it	lt
 800ac32:	f1ca 0a00 	rsblt	sl, sl, #0
 800ac36:	f7f5 fa8f 	bl	8000158 <__aeabi_dsub>
 800ac3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac42:	2400      	movs	r4, #0
 800ac44:	4642      	mov	r2, r8
 800ac46:	464b      	mov	r3, r9
 800ac48:	f7f5 fa88 	bl	800015c <__adddf3>
 800ac4c:	a37a      	add	r3, pc, #488	; (adr r3, 800ae38 <__ieee754_pow+0x9d8>)
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	4620      	mov	r0, r4
 800ac54:	460d      	mov	r5, r1
 800ac56:	f7f5 fc37 	bl	80004c8 <__aeabi_dmul>
 800ac5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac5e:	4606      	mov	r6, r0
 800ac60:	460f      	mov	r7, r1
 800ac62:	4620      	mov	r0, r4
 800ac64:	4629      	mov	r1, r5
 800ac66:	f7f5 fa77 	bl	8000158 <__aeabi_dsub>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4640      	mov	r0, r8
 800ac70:	4649      	mov	r1, r9
 800ac72:	f7f5 fa71 	bl	8000158 <__aeabi_dsub>
 800ac76:	a372      	add	r3, pc, #456	; (adr r3, 800ae40 <__ieee754_pow+0x9e0>)
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	f7f5 fc24 	bl	80004c8 <__aeabi_dmul>
 800ac80:	a371      	add	r3, pc, #452	; (adr r3, 800ae48 <__ieee754_pow+0x9e8>)
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	4680      	mov	r8, r0
 800ac88:	4689      	mov	r9, r1
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	f7f5 fc1b 	bl	80004c8 <__aeabi_dmul>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4640      	mov	r0, r8
 800ac98:	4649      	mov	r1, r9
 800ac9a:	f7f5 fa5f 	bl	800015c <__adddf3>
 800ac9e:	4604      	mov	r4, r0
 800aca0:	460d      	mov	r5, r1
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	4630      	mov	r0, r6
 800aca8:	4639      	mov	r1, r7
 800acaa:	f7f5 fa57 	bl	800015c <__adddf3>
 800acae:	4632      	mov	r2, r6
 800acb0:	463b      	mov	r3, r7
 800acb2:	4680      	mov	r8, r0
 800acb4:	4689      	mov	r9, r1
 800acb6:	f7f5 fa4f 	bl	8000158 <__aeabi_dsub>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7f5 fa49 	bl	8000158 <__aeabi_dsub>
 800acc6:	4642      	mov	r2, r8
 800acc8:	4606      	mov	r6, r0
 800acca:	460f      	mov	r7, r1
 800accc:	464b      	mov	r3, r9
 800acce:	4640      	mov	r0, r8
 800acd0:	4649      	mov	r1, r9
 800acd2:	f7f5 fbf9 	bl	80004c8 <__aeabi_dmul>
 800acd6:	a35e      	add	r3, pc, #376	; (adr r3, 800ae50 <__ieee754_pow+0x9f0>)
 800acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acdc:	4604      	mov	r4, r0
 800acde:	460d      	mov	r5, r1
 800ace0:	f7f5 fbf2 	bl	80004c8 <__aeabi_dmul>
 800ace4:	a35c      	add	r3, pc, #368	; (adr r3, 800ae58 <__ieee754_pow+0x9f8>)
 800ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acea:	f7f5 fa35 	bl	8000158 <__aeabi_dsub>
 800acee:	4622      	mov	r2, r4
 800acf0:	462b      	mov	r3, r5
 800acf2:	f7f5 fbe9 	bl	80004c8 <__aeabi_dmul>
 800acf6:	a35a      	add	r3, pc, #360	; (adr r3, 800ae60 <__ieee754_pow+0xa00>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	f7f5 fa2e 	bl	800015c <__adddf3>
 800ad00:	4622      	mov	r2, r4
 800ad02:	462b      	mov	r3, r5
 800ad04:	f7f5 fbe0 	bl	80004c8 <__aeabi_dmul>
 800ad08:	a357      	add	r3, pc, #348	; (adr r3, 800ae68 <__ieee754_pow+0xa08>)
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	f7f5 fa23 	bl	8000158 <__aeabi_dsub>
 800ad12:	4622      	mov	r2, r4
 800ad14:	462b      	mov	r3, r5
 800ad16:	f7f5 fbd7 	bl	80004c8 <__aeabi_dmul>
 800ad1a:	a355      	add	r3, pc, #340	; (adr r3, 800ae70 <__ieee754_pow+0xa10>)
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	f7f5 fa1c 	bl	800015c <__adddf3>
 800ad24:	4622      	mov	r2, r4
 800ad26:	462b      	mov	r3, r5
 800ad28:	f7f5 fbce 	bl	80004c8 <__aeabi_dmul>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4640      	mov	r0, r8
 800ad32:	4649      	mov	r1, r9
 800ad34:	f7f5 fa10 	bl	8000158 <__aeabi_dsub>
 800ad38:	4604      	mov	r4, r0
 800ad3a:	460d      	mov	r5, r1
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4640      	mov	r0, r8
 800ad42:	4649      	mov	r1, r9
 800ad44:	f7f5 fbc0 	bl	80004c8 <__aeabi_dmul>
 800ad48:	2200      	movs	r2, #0
 800ad4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad52:	4620      	mov	r0, r4
 800ad54:	4629      	mov	r1, r5
 800ad56:	f7f5 f9ff 	bl	8000158 <__aeabi_dsub>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad62:	f7f5 fcdb 	bl	800071c <__aeabi_ddiv>
 800ad66:	4632      	mov	r2, r6
 800ad68:	4604      	mov	r4, r0
 800ad6a:	460d      	mov	r5, r1
 800ad6c:	463b      	mov	r3, r7
 800ad6e:	4640      	mov	r0, r8
 800ad70:	4649      	mov	r1, r9
 800ad72:	f7f5 fba9 	bl	80004c8 <__aeabi_dmul>
 800ad76:	4632      	mov	r2, r6
 800ad78:	463b      	mov	r3, r7
 800ad7a:	f7f5 f9ef 	bl	800015c <__adddf3>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4620      	mov	r0, r4
 800ad84:	4629      	mov	r1, r5
 800ad86:	f7f5 f9e7 	bl	8000158 <__aeabi_dsub>
 800ad8a:	4642      	mov	r2, r8
 800ad8c:	464b      	mov	r3, r9
 800ad8e:	f7f5 f9e3 	bl	8000158 <__aeabi_dsub>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	2000      	movs	r0, #0
 800ad98:	4939      	ldr	r1, [pc, #228]	; (800ae80 <__ieee754_pow+0xa20>)
 800ad9a:	f7f5 f9dd 	bl	8000158 <__aeabi_dsub>
 800ad9e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ada2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ada6:	da29      	bge.n	800adfc <__ieee754_pow+0x99c>
 800ada8:	4652      	mov	r2, sl
 800adaa:	f000 fb71 	bl	800b490 <scalbn>
 800adae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adb2:	f7ff bbfe 	b.w	800a5b2 <__ieee754_pow+0x152>
 800adb6:	4b33      	ldr	r3, [pc, #204]	; (800ae84 <__ieee754_pow+0xa24>)
 800adb8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800adbc:	429f      	cmp	r7, r3
 800adbe:	f77f af13 	ble.w	800abe8 <__ieee754_pow+0x788>
 800adc2:	4b31      	ldr	r3, [pc, #196]	; (800ae88 <__ieee754_pow+0xa28>)
 800adc4:	440b      	add	r3, r1
 800adc6:	4303      	orrs	r3, r0
 800adc8:	d009      	beq.n	800adde <__ieee754_pow+0x97e>
 800adca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adce:	2200      	movs	r2, #0
 800add0:	2300      	movs	r3, #0
 800add2:	f7f5 fdeb 	bl	80009ac <__aeabi_dcmplt>
 800add6:	3800      	subs	r0, #0
 800add8:	bf18      	it	ne
 800adda:	2001      	movne	r0, #1
 800addc:	e453      	b.n	800a686 <__ieee754_pow+0x226>
 800adde:	4622      	mov	r2, r4
 800ade0:	462b      	mov	r3, r5
 800ade2:	f7f5 f9b9 	bl	8000158 <__aeabi_dsub>
 800ade6:	4642      	mov	r2, r8
 800ade8:	464b      	mov	r3, r9
 800adea:	f7f5 fdf3 	bl	80009d4 <__aeabi_dcmpge>
 800adee:	2800      	cmp	r0, #0
 800adf0:	f43f aefa 	beq.w	800abe8 <__ieee754_pow+0x788>
 800adf4:	e7e9      	b.n	800adca <__ieee754_pow+0x96a>
 800adf6:	f04f 0a00 	mov.w	sl, #0
 800adfa:	e720      	b.n	800ac3e <__ieee754_pow+0x7de>
 800adfc:	4621      	mov	r1, r4
 800adfe:	e7d6      	b.n	800adae <__ieee754_pow+0x94e>
 800ae00:	f04f 0b00 	mov.w	fp, #0
 800ae04:	f8df c078 	ldr.w	ip, [pc, #120]	; 800ae80 <__ieee754_pow+0xa20>
 800ae08:	f7ff bbba 	b.w	800a580 <__ieee754_pow+0x120>
 800ae0c:	f04f 0b00 	mov.w	fp, #0
 800ae10:	f04f 0c00 	mov.w	ip, #0
 800ae14:	f7ff bbb4 	b.w	800a580 <__ieee754_pow+0x120>
 800ae18:	4640      	mov	r0, r8
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	f7ff bb3d 	b.w	800a49a <__ieee754_pow+0x3a>
 800ae20:	9200      	str	r2, [sp, #0]
 800ae22:	f7ff bb89 	b.w	800a538 <__ieee754_pow+0xd8>
 800ae26:	2300      	movs	r3, #0
 800ae28:	f7ff bb73 	b.w	800a512 <__ieee754_pow+0xb2>
 800ae2c:	f3af 8000 	nop.w
 800ae30:	652b82fe 	.word	0x652b82fe
 800ae34:	3c971547 	.word	0x3c971547
 800ae38:	00000000 	.word	0x00000000
 800ae3c:	3fe62e43 	.word	0x3fe62e43
 800ae40:	fefa39ef 	.word	0xfefa39ef
 800ae44:	3fe62e42 	.word	0x3fe62e42
 800ae48:	0ca86c39 	.word	0x0ca86c39
 800ae4c:	be205c61 	.word	0xbe205c61
 800ae50:	72bea4d0 	.word	0x72bea4d0
 800ae54:	3e663769 	.word	0x3e663769
 800ae58:	c5d26bf1 	.word	0xc5d26bf1
 800ae5c:	3ebbbd41 	.word	0x3ebbbd41
 800ae60:	af25de2c 	.word	0xaf25de2c
 800ae64:	3f11566a 	.word	0x3f11566a
 800ae68:	16bebd93 	.word	0x16bebd93
 800ae6c:	3f66c16c 	.word	0x3f66c16c
 800ae70:	5555553e 	.word	0x5555553e
 800ae74:	3fc55555 	.word	0x3fc55555
 800ae78:	3fe00000 	.word	0x3fe00000
 800ae7c:	000fffff 	.word	0x000fffff
 800ae80:	3ff00000 	.word	0x3ff00000
 800ae84:	4090cbff 	.word	0x4090cbff
 800ae88:	3f6f3400 	.word	0x3f6f3400

0800ae8c <__ieee754_sqrt>:
 800ae8c:	f8df c158 	ldr.w	ip, [pc, #344]	; 800afe8 <__ieee754_sqrt+0x15c>
 800ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae94:	ea3c 0c01 	bics.w	ip, ip, r1
 800ae98:	4606      	mov	r6, r0
 800ae9a:	460d      	mov	r5, r1
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	460a      	mov	r2, r1
 800aea0:	4607      	mov	r7, r0
 800aea2:	4603      	mov	r3, r0
 800aea4:	d10f      	bne.n	800aec6 <__ieee754_sqrt+0x3a>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	f7f5 fb0d 	bl	80004c8 <__aeabi_dmul>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	f7f5 f951 	bl	800015c <__adddf3>
 800aeba:	4606      	mov	r6, r0
 800aebc:	460d      	mov	r5, r1
 800aebe:	4630      	mov	r0, r6
 800aec0:	4629      	mov	r1, r5
 800aec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec6:	2900      	cmp	r1, #0
 800aec8:	dc0e      	bgt.n	800aee8 <__ieee754_sqrt+0x5c>
 800aeca:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800aece:	ea5c 0707 	orrs.w	r7, ip, r7
 800aed2:	d0f4      	beq.n	800aebe <__ieee754_sqrt+0x32>
 800aed4:	b141      	cbz	r1, 800aee8 <__ieee754_sqrt+0x5c>
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	f7f5 f93d 	bl	8000158 <__aeabi_dsub>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	f7f5 fc1b 	bl	800071c <__aeabi_ddiv>
 800aee6:	e7e8      	b.n	800aeba <__ieee754_sqrt+0x2e>
 800aee8:	1521      	asrs	r1, r4, #20
 800aeea:	d075      	beq.n	800afd8 <__ieee754_sqrt+0x14c>
 800aeec:	07cc      	lsls	r4, r1, #31
 800aeee:	f04f 0400 	mov.w	r4, #0
 800aef2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800aef6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800aefa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aefe:	bf5e      	ittt	pl
 800af00:	0fd9      	lsrpl	r1, r3, #31
 800af02:	005b      	lslpl	r3, r3, #1
 800af04:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800af08:	0fd9      	lsrs	r1, r3, #31
 800af0a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800af0e:	2516      	movs	r5, #22
 800af10:	4620      	mov	r0, r4
 800af12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af16:	107f      	asrs	r7, r7, #1
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	1846      	adds	r6, r0, r1
 800af1c:	4296      	cmp	r6, r2
 800af1e:	bfde      	ittt	le
 800af20:	1b92      	suble	r2, r2, r6
 800af22:	1870      	addle	r0, r6, r1
 800af24:	1864      	addle	r4, r4, r1
 800af26:	0052      	lsls	r2, r2, #1
 800af28:	3d01      	subs	r5, #1
 800af2a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800af2e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800af32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af36:	d1f0      	bne.n	800af1a <__ieee754_sqrt+0x8e>
 800af38:	4629      	mov	r1, r5
 800af3a:	f04f 0e20 	mov.w	lr, #32
 800af3e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800af42:	4282      	cmp	r2, r0
 800af44:	eb06 0c05 	add.w	ip, r6, r5
 800af48:	dc02      	bgt.n	800af50 <__ieee754_sqrt+0xc4>
 800af4a:	d113      	bne.n	800af74 <__ieee754_sqrt+0xe8>
 800af4c:	459c      	cmp	ip, r3
 800af4e:	d811      	bhi.n	800af74 <__ieee754_sqrt+0xe8>
 800af50:	f1bc 0f00 	cmp.w	ip, #0
 800af54:	eb0c 0506 	add.w	r5, ip, r6
 800af58:	da43      	bge.n	800afe2 <__ieee754_sqrt+0x156>
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	db41      	blt.n	800afe2 <__ieee754_sqrt+0x156>
 800af5e:	f100 0801 	add.w	r8, r0, #1
 800af62:	1a12      	subs	r2, r2, r0
 800af64:	4640      	mov	r0, r8
 800af66:	459c      	cmp	ip, r3
 800af68:	bf88      	it	hi
 800af6a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800af6e:	eba3 030c 	sub.w	r3, r3, ip
 800af72:	4431      	add	r1, r6
 800af74:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800af78:	f1be 0e01 	subs.w	lr, lr, #1
 800af7c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800af80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af84:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800af88:	d1db      	bne.n	800af42 <__ieee754_sqrt+0xb6>
 800af8a:	4313      	orrs	r3, r2
 800af8c:	d006      	beq.n	800af9c <__ieee754_sqrt+0x110>
 800af8e:	1c48      	adds	r0, r1, #1
 800af90:	bf0b      	itete	eq
 800af92:	4671      	moveq	r1, lr
 800af94:	3101      	addne	r1, #1
 800af96:	3401      	addeq	r4, #1
 800af98:	f021 0101 	bicne.w	r1, r1, #1
 800af9c:	1063      	asrs	r3, r4, #1
 800af9e:	0849      	lsrs	r1, r1, #1
 800afa0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800afa4:	07e2      	lsls	r2, r4, #31
 800afa6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800afaa:	bf48      	it	mi
 800afac:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800afb0:	460e      	mov	r6, r1
 800afb2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800afb6:	e782      	b.n	800aebe <__ieee754_sqrt+0x32>
 800afb8:	0ada      	lsrs	r2, r3, #11
 800afba:	3815      	subs	r0, #21
 800afbc:	055b      	lsls	r3, r3, #21
 800afbe:	2a00      	cmp	r2, #0
 800afc0:	d0fa      	beq.n	800afb8 <__ieee754_sqrt+0x12c>
 800afc2:	02d5      	lsls	r5, r2, #11
 800afc4:	d50a      	bpl.n	800afdc <__ieee754_sqrt+0x150>
 800afc6:	f1c1 0420 	rsb	r4, r1, #32
 800afca:	fa23 f404 	lsr.w	r4, r3, r4
 800afce:	1e4d      	subs	r5, r1, #1
 800afd0:	408b      	lsls	r3, r1
 800afd2:	4322      	orrs	r2, r4
 800afd4:	1b41      	subs	r1, r0, r5
 800afd6:	e789      	b.n	800aeec <__ieee754_sqrt+0x60>
 800afd8:	4608      	mov	r0, r1
 800afda:	e7f0      	b.n	800afbe <__ieee754_sqrt+0x132>
 800afdc:	0052      	lsls	r2, r2, #1
 800afde:	3101      	adds	r1, #1
 800afe0:	e7ef      	b.n	800afc2 <__ieee754_sqrt+0x136>
 800afe2:	4680      	mov	r8, r0
 800afe4:	e7bd      	b.n	800af62 <__ieee754_sqrt+0xd6>
 800afe6:	bf00      	nop
 800afe8:	7ff00000 	.word	0x7ff00000

0800afec <__ieee754_asinf>:
 800afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800aff4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800aff8:	4604      	mov	r4, r0
 800affa:	4605      	mov	r5, r0
 800affc:	d10c      	bne.n	800b018 <__ieee754_asinf+0x2c>
 800affe:	498d      	ldr	r1, [pc, #564]	; (800b234 <__ieee754_asinf+0x248>)
 800b000:	f7f5 fe90 	bl	8000d24 <__aeabi_fmul>
 800b004:	498c      	ldr	r1, [pc, #560]	; (800b238 <__ieee754_asinf+0x24c>)
 800b006:	4605      	mov	r5, r0
 800b008:	4620      	mov	r0, r4
 800b00a:	f7f5 fe8b 	bl	8000d24 <__aeabi_fmul>
 800b00e:	4601      	mov	r1, r0
 800b010:	4628      	mov	r0, r5
 800b012:	f7f5 fd7f 	bl	8000b14 <__addsf3>
 800b016:	e006      	b.n	800b026 <__ieee754_asinf+0x3a>
 800b018:	dd07      	ble.n	800b02a <__ieee754_asinf+0x3e>
 800b01a:	4601      	mov	r1, r0
 800b01c:	f7f5 fd78 	bl	8000b10 <__aeabi_fsub>
 800b020:	4601      	mov	r1, r0
 800b022:	f7f5 ff33 	bl	8000e8c <__aeabi_fdiv>
 800b026:	4604      	mov	r4, r0
 800b028:	e00e      	b.n	800b048 <__ieee754_asinf+0x5c>
 800b02a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800b02e:	da58      	bge.n	800b0e2 <__ieee754_asinf+0xf6>
 800b030:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800b034:	da0b      	bge.n	800b04e <__ieee754_asinf+0x62>
 800b036:	4981      	ldr	r1, [pc, #516]	; (800b23c <__ieee754_asinf+0x250>)
 800b038:	f7f5 fd6c 	bl	8000b14 <__addsf3>
 800b03c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b040:	f7f6 f82c 	bl	800109c <__aeabi_fcmpgt>
 800b044:	2800      	cmp	r0, #0
 800b046:	d04c      	beq.n	800b0e2 <__ieee754_asinf+0xf6>
 800b048:	4620      	mov	r0, r4
 800b04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04e:	4601      	mov	r1, r0
 800b050:	f7f5 fe68 	bl	8000d24 <__aeabi_fmul>
 800b054:	4605      	mov	r5, r0
 800b056:	497a      	ldr	r1, [pc, #488]	; (800b240 <__ieee754_asinf+0x254>)
 800b058:	f7f5 fe64 	bl	8000d24 <__aeabi_fmul>
 800b05c:	4979      	ldr	r1, [pc, #484]	; (800b244 <__ieee754_asinf+0x258>)
 800b05e:	f7f5 fd59 	bl	8000b14 <__addsf3>
 800b062:	4629      	mov	r1, r5
 800b064:	f7f5 fe5e 	bl	8000d24 <__aeabi_fmul>
 800b068:	4977      	ldr	r1, [pc, #476]	; (800b248 <__ieee754_asinf+0x25c>)
 800b06a:	f7f5 fd51 	bl	8000b10 <__aeabi_fsub>
 800b06e:	4629      	mov	r1, r5
 800b070:	f7f5 fe58 	bl	8000d24 <__aeabi_fmul>
 800b074:	4975      	ldr	r1, [pc, #468]	; (800b24c <__ieee754_asinf+0x260>)
 800b076:	f7f5 fd4d 	bl	8000b14 <__addsf3>
 800b07a:	4629      	mov	r1, r5
 800b07c:	f7f5 fe52 	bl	8000d24 <__aeabi_fmul>
 800b080:	4973      	ldr	r1, [pc, #460]	; (800b250 <__ieee754_asinf+0x264>)
 800b082:	f7f5 fd45 	bl	8000b10 <__aeabi_fsub>
 800b086:	4629      	mov	r1, r5
 800b088:	f7f5 fe4c 	bl	8000d24 <__aeabi_fmul>
 800b08c:	4971      	ldr	r1, [pc, #452]	; (800b254 <__ieee754_asinf+0x268>)
 800b08e:	f7f5 fd41 	bl	8000b14 <__addsf3>
 800b092:	4629      	mov	r1, r5
 800b094:	f7f5 fe46 	bl	8000d24 <__aeabi_fmul>
 800b098:	496f      	ldr	r1, [pc, #444]	; (800b258 <__ieee754_asinf+0x26c>)
 800b09a:	4606      	mov	r6, r0
 800b09c:	4628      	mov	r0, r5
 800b09e:	f7f5 fe41 	bl	8000d24 <__aeabi_fmul>
 800b0a2:	496e      	ldr	r1, [pc, #440]	; (800b25c <__ieee754_asinf+0x270>)
 800b0a4:	f7f5 fd34 	bl	8000b10 <__aeabi_fsub>
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	f7f5 fe3b 	bl	8000d24 <__aeabi_fmul>
 800b0ae:	496c      	ldr	r1, [pc, #432]	; (800b260 <__ieee754_asinf+0x274>)
 800b0b0:	f7f5 fd30 	bl	8000b14 <__addsf3>
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	f7f5 fe35 	bl	8000d24 <__aeabi_fmul>
 800b0ba:	496a      	ldr	r1, [pc, #424]	; (800b264 <__ieee754_asinf+0x278>)
 800b0bc:	f7f5 fd28 	bl	8000b10 <__aeabi_fsub>
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	f7f5 fe2f 	bl	8000d24 <__aeabi_fmul>
 800b0c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b0ca:	f7f5 fd23 	bl	8000b14 <__addsf3>
 800b0ce:	4601      	mov	r1, r0
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f7f5 fedb 	bl	8000e8c <__aeabi_fdiv>
 800b0d6:	4621      	mov	r1, r4
 800b0d8:	f7f5 fe24 	bl	8000d24 <__aeabi_fmul>
 800b0dc:	4601      	mov	r1, r0
 800b0de:	4620      	mov	r0, r4
 800b0e0:	e797      	b.n	800b012 <__ieee754_asinf+0x26>
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 fb5e 	bl	800b7a4 <fabsf>
 800b0e8:	4601      	mov	r1, r0
 800b0ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b0ee:	f7f5 fd0f 	bl	8000b10 <__aeabi_fsub>
 800b0f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b0f6:	f7f5 fe15 	bl	8000d24 <__aeabi_fmul>
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	4950      	ldr	r1, [pc, #320]	; (800b240 <__ieee754_asinf+0x254>)
 800b0fe:	f7f5 fe11 	bl	8000d24 <__aeabi_fmul>
 800b102:	4950      	ldr	r1, [pc, #320]	; (800b244 <__ieee754_asinf+0x258>)
 800b104:	f7f5 fd06 	bl	8000b14 <__addsf3>
 800b108:	4631      	mov	r1, r6
 800b10a:	f7f5 fe0b 	bl	8000d24 <__aeabi_fmul>
 800b10e:	494e      	ldr	r1, [pc, #312]	; (800b248 <__ieee754_asinf+0x25c>)
 800b110:	f7f5 fcfe 	bl	8000b10 <__aeabi_fsub>
 800b114:	4631      	mov	r1, r6
 800b116:	f7f5 fe05 	bl	8000d24 <__aeabi_fmul>
 800b11a:	494c      	ldr	r1, [pc, #304]	; (800b24c <__ieee754_asinf+0x260>)
 800b11c:	f7f5 fcfa 	bl	8000b14 <__addsf3>
 800b120:	4631      	mov	r1, r6
 800b122:	f7f5 fdff 	bl	8000d24 <__aeabi_fmul>
 800b126:	494a      	ldr	r1, [pc, #296]	; (800b250 <__ieee754_asinf+0x264>)
 800b128:	f7f5 fcf2 	bl	8000b10 <__aeabi_fsub>
 800b12c:	4631      	mov	r1, r6
 800b12e:	f7f5 fdf9 	bl	8000d24 <__aeabi_fmul>
 800b132:	4948      	ldr	r1, [pc, #288]	; (800b254 <__ieee754_asinf+0x268>)
 800b134:	f7f5 fcee 	bl	8000b14 <__addsf3>
 800b138:	4631      	mov	r1, r6
 800b13a:	f7f5 fdf3 	bl	8000d24 <__aeabi_fmul>
 800b13e:	4946      	ldr	r1, [pc, #280]	; (800b258 <__ieee754_asinf+0x26c>)
 800b140:	4681      	mov	r9, r0
 800b142:	4630      	mov	r0, r6
 800b144:	f7f5 fdee 	bl	8000d24 <__aeabi_fmul>
 800b148:	4944      	ldr	r1, [pc, #272]	; (800b25c <__ieee754_asinf+0x270>)
 800b14a:	f7f5 fce1 	bl	8000b10 <__aeabi_fsub>
 800b14e:	4631      	mov	r1, r6
 800b150:	f7f5 fde8 	bl	8000d24 <__aeabi_fmul>
 800b154:	4942      	ldr	r1, [pc, #264]	; (800b260 <__ieee754_asinf+0x274>)
 800b156:	f7f5 fcdd 	bl	8000b14 <__addsf3>
 800b15a:	4631      	mov	r1, r6
 800b15c:	f7f5 fde2 	bl	8000d24 <__aeabi_fmul>
 800b160:	4940      	ldr	r1, [pc, #256]	; (800b264 <__ieee754_asinf+0x278>)
 800b162:	f7f5 fcd5 	bl	8000b10 <__aeabi_fsub>
 800b166:	4631      	mov	r1, r6
 800b168:	f7f5 fddc 	bl	8000d24 <__aeabi_fmul>
 800b16c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b170:	f7f5 fcd0 	bl	8000b14 <__addsf3>
 800b174:	4682      	mov	sl, r0
 800b176:	4630      	mov	r0, r6
 800b178:	f000 f902 	bl	800b380 <__ieee754_sqrtf>
 800b17c:	4b3a      	ldr	r3, [pc, #232]	; (800b268 <__ieee754_asinf+0x27c>)
 800b17e:	4607      	mov	r7, r0
 800b180:	4598      	cmp	r8, r3
 800b182:	dd1a      	ble.n	800b1ba <__ieee754_asinf+0x1ce>
 800b184:	4651      	mov	r1, sl
 800b186:	4648      	mov	r0, r9
 800b188:	f7f5 fe80 	bl	8000e8c <__aeabi_fdiv>
 800b18c:	4639      	mov	r1, r7
 800b18e:	f7f5 fdc9 	bl	8000d24 <__aeabi_fmul>
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 fcbe 	bl	8000b14 <__addsf3>
 800b198:	4601      	mov	r1, r0
 800b19a:	f7f5 fcbb 	bl	8000b14 <__addsf3>
 800b19e:	4933      	ldr	r1, [pc, #204]	; (800b26c <__ieee754_asinf+0x280>)
 800b1a0:	f7f5 fcb8 	bl	8000b14 <__addsf3>
 800b1a4:	4601      	mov	r1, r0
 800b1a6:	4823      	ldr	r0, [pc, #140]	; (800b234 <__ieee754_asinf+0x248>)
 800b1a8:	f7f5 fcb2 	bl	8000b10 <__aeabi_fsub>
 800b1ac:	2d00      	cmp	r5, #0
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	f73f af4a 	bgt.w	800b048 <__ieee754_asinf+0x5c>
 800b1b4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b1b8:	e735      	b.n	800b026 <__ieee754_asinf+0x3a>
 800b1ba:	4601      	mov	r1, r0
 800b1bc:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800b1c0:	f7f5 fca8 	bl	8000b14 <__addsf3>
 800b1c4:	4651      	mov	r1, sl
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4648      	mov	r0, r9
 800b1ca:	f7f5 fe5f 	bl	8000e8c <__aeabi_fdiv>
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f7f5 fda7 	bl	8000d24 <__aeabi_fmul>
 800b1d6:	f028 080f 	bic.w	r8, r8, #15
 800b1da:	4681      	mov	r9, r0
 800b1dc:	4641      	mov	r1, r8
 800b1de:	4640      	mov	r0, r8
 800b1e0:	f7f5 fda0 	bl	8000d24 <__aeabi_fmul>
 800b1e4:	4601      	mov	r1, r0
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f7f5 fc92 	bl	8000b10 <__aeabi_fsub>
 800b1ec:	4641      	mov	r1, r8
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	4638      	mov	r0, r7
 800b1f2:	f7f5 fc8f 	bl	8000b14 <__addsf3>
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f7f5 fe47 	bl	8000e8c <__aeabi_fdiv>
 800b1fe:	4601      	mov	r1, r0
 800b200:	f7f5 fc88 	bl	8000b14 <__addsf3>
 800b204:	4601      	mov	r1, r0
 800b206:	480c      	ldr	r0, [pc, #48]	; (800b238 <__ieee754_asinf+0x24c>)
 800b208:	f7f5 fc82 	bl	8000b10 <__aeabi_fsub>
 800b20c:	4601      	mov	r1, r0
 800b20e:	4648      	mov	r0, r9
 800b210:	f7f5 fc7e 	bl	8000b10 <__aeabi_fsub>
 800b214:	4641      	mov	r1, r8
 800b216:	4604      	mov	r4, r0
 800b218:	4640      	mov	r0, r8
 800b21a:	f7f5 fc7b 	bl	8000b14 <__addsf3>
 800b21e:	4601      	mov	r1, r0
 800b220:	4813      	ldr	r0, [pc, #76]	; (800b270 <__ieee754_asinf+0x284>)
 800b222:	f7f5 fc75 	bl	8000b10 <__aeabi_fsub>
 800b226:	4601      	mov	r1, r0
 800b228:	4620      	mov	r0, r4
 800b22a:	f7f5 fc71 	bl	8000b10 <__aeabi_fsub>
 800b22e:	4601      	mov	r1, r0
 800b230:	480f      	ldr	r0, [pc, #60]	; (800b270 <__ieee754_asinf+0x284>)
 800b232:	e7b9      	b.n	800b1a8 <__ieee754_asinf+0x1bc>
 800b234:	3fc90fdb 	.word	0x3fc90fdb
 800b238:	b33bbd2e 	.word	0xb33bbd2e
 800b23c:	7149f2ca 	.word	0x7149f2ca
 800b240:	3811ef08 	.word	0x3811ef08
 800b244:	3a4f7f04 	.word	0x3a4f7f04
 800b248:	3d241146 	.word	0x3d241146
 800b24c:	3e4e0aa8 	.word	0x3e4e0aa8
 800b250:	3ea6b090 	.word	0x3ea6b090
 800b254:	3e2aaaab 	.word	0x3e2aaaab
 800b258:	3d9dc62e 	.word	0x3d9dc62e
 800b25c:	3f303361 	.word	0x3f303361
 800b260:	4001572d 	.word	0x4001572d
 800b264:	4019d139 	.word	0x4019d139
 800b268:	3f799999 	.word	0x3f799999
 800b26c:	333bbd2e 	.word	0x333bbd2e
 800b270:	3f490fdb 	.word	0x3f490fdb

0800b274 <__ieee754_atan2f>:
 800b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b276:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b27a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b27e:	4603      	mov	r3, r0
 800b280:	dc05      	bgt.n	800b28e <__ieee754_atan2f+0x1a>
 800b282:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b286:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b28a:	4607      	mov	r7, r0
 800b28c:	dd04      	ble.n	800b298 <__ieee754_atan2f+0x24>
 800b28e:	4618      	mov	r0, r3
 800b290:	f7f5 fc40 	bl	8000b14 <__addsf3>
 800b294:	4603      	mov	r3, r0
 800b296:	e011      	b.n	800b2bc <__ieee754_atan2f+0x48>
 800b298:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b29c:	d103      	bne.n	800b2a6 <__ieee754_atan2f+0x32>
 800b29e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b2a2:	f000 b973 	b.w	800b58c <atanf>
 800b2a6:	178c      	asrs	r4, r1, #30
 800b2a8:	f004 0402 	and.w	r4, r4, #2
 800b2ac:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b2b0:	b932      	cbnz	r2, 800b2c0 <__ieee754_atan2f+0x4c>
 800b2b2:	2c02      	cmp	r4, #2
 800b2b4:	d04c      	beq.n	800b350 <__ieee754_atan2f+0xdc>
 800b2b6:	2c03      	cmp	r4, #3
 800b2b8:	d100      	bne.n	800b2bc <__ieee754_atan2f+0x48>
 800b2ba:	4b29      	ldr	r3, [pc, #164]	; (800b360 <__ieee754_atan2f+0xec>)
 800b2bc:	4618      	mov	r0, r3
 800b2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2c0:	b91e      	cbnz	r6, 800b2ca <__ieee754_atan2f+0x56>
 800b2c2:	2f00      	cmp	r7, #0
 800b2c4:	da4a      	bge.n	800b35c <__ieee754_atan2f+0xe8>
 800b2c6:	4b27      	ldr	r3, [pc, #156]	; (800b364 <__ieee754_atan2f+0xf0>)
 800b2c8:	e7f8      	b.n	800b2bc <__ieee754_atan2f+0x48>
 800b2ca:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b2ce:	d10e      	bne.n	800b2ee <__ieee754_atan2f+0x7a>
 800b2d0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b2d4:	f104 34ff 	add.w	r4, r4, #4294967295
 800b2d8:	d105      	bne.n	800b2e6 <__ieee754_atan2f+0x72>
 800b2da:	2c02      	cmp	r4, #2
 800b2dc:	d83a      	bhi.n	800b354 <__ieee754_atan2f+0xe0>
 800b2de:	4b22      	ldr	r3, [pc, #136]	; (800b368 <__ieee754_atan2f+0xf4>)
 800b2e0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b2e4:	e7ea      	b.n	800b2bc <__ieee754_atan2f+0x48>
 800b2e6:	2c02      	cmp	r4, #2
 800b2e8:	d836      	bhi.n	800b358 <__ieee754_atan2f+0xe4>
 800b2ea:	4b20      	ldr	r3, [pc, #128]	; (800b36c <__ieee754_atan2f+0xf8>)
 800b2ec:	e7f8      	b.n	800b2e0 <__ieee754_atan2f+0x6c>
 800b2ee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b2f2:	d0e6      	beq.n	800b2c2 <__ieee754_atan2f+0x4e>
 800b2f4:	1b92      	subs	r2, r2, r6
 800b2f6:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800b2fa:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800b2fe:	da17      	bge.n	800b330 <__ieee754_atan2f+0xbc>
 800b300:	2900      	cmp	r1, #0
 800b302:	da01      	bge.n	800b308 <__ieee754_atan2f+0x94>
 800b304:	303c      	adds	r0, #60	; 0x3c
 800b306:	db15      	blt.n	800b334 <__ieee754_atan2f+0xc0>
 800b308:	4618      	mov	r0, r3
 800b30a:	f7f5 fdbf 	bl	8000e8c <__aeabi_fdiv>
 800b30e:	f000 fa49 	bl	800b7a4 <fabsf>
 800b312:	f000 f93b 	bl	800b58c <atanf>
 800b316:	4603      	mov	r3, r0
 800b318:	2c01      	cmp	r4, #1
 800b31a:	d00d      	beq.n	800b338 <__ieee754_atan2f+0xc4>
 800b31c:	2c02      	cmp	r4, #2
 800b31e:	d00e      	beq.n	800b33e <__ieee754_atan2f+0xca>
 800b320:	2c00      	cmp	r4, #0
 800b322:	d0cb      	beq.n	800b2bc <__ieee754_atan2f+0x48>
 800b324:	4912      	ldr	r1, [pc, #72]	; (800b370 <__ieee754_atan2f+0xfc>)
 800b326:	4618      	mov	r0, r3
 800b328:	f7f5 fbf4 	bl	8000b14 <__addsf3>
 800b32c:	4911      	ldr	r1, [pc, #68]	; (800b374 <__ieee754_atan2f+0x100>)
 800b32e:	e00c      	b.n	800b34a <__ieee754_atan2f+0xd6>
 800b330:	4b11      	ldr	r3, [pc, #68]	; (800b378 <__ieee754_atan2f+0x104>)
 800b332:	e7f1      	b.n	800b318 <__ieee754_atan2f+0xa4>
 800b334:	2300      	movs	r3, #0
 800b336:	e7ef      	b.n	800b318 <__ieee754_atan2f+0xa4>
 800b338:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b33c:	e7be      	b.n	800b2bc <__ieee754_atan2f+0x48>
 800b33e:	490c      	ldr	r1, [pc, #48]	; (800b370 <__ieee754_atan2f+0xfc>)
 800b340:	4618      	mov	r0, r3
 800b342:	f7f5 fbe7 	bl	8000b14 <__addsf3>
 800b346:	4601      	mov	r1, r0
 800b348:	480a      	ldr	r0, [pc, #40]	; (800b374 <__ieee754_atan2f+0x100>)
 800b34a:	f7f5 fbe1 	bl	8000b10 <__aeabi_fsub>
 800b34e:	e7a1      	b.n	800b294 <__ieee754_atan2f+0x20>
 800b350:	4b08      	ldr	r3, [pc, #32]	; (800b374 <__ieee754_atan2f+0x100>)
 800b352:	e7b3      	b.n	800b2bc <__ieee754_atan2f+0x48>
 800b354:	4b09      	ldr	r3, [pc, #36]	; (800b37c <__ieee754_atan2f+0x108>)
 800b356:	e7b1      	b.n	800b2bc <__ieee754_atan2f+0x48>
 800b358:	2300      	movs	r3, #0
 800b35a:	e7af      	b.n	800b2bc <__ieee754_atan2f+0x48>
 800b35c:	4b06      	ldr	r3, [pc, #24]	; (800b378 <__ieee754_atan2f+0x104>)
 800b35e:	e7ad      	b.n	800b2bc <__ieee754_atan2f+0x48>
 800b360:	c0490fdb 	.word	0xc0490fdb
 800b364:	bfc90fdb 	.word	0xbfc90fdb
 800b368:	0800b940 	.word	0x0800b940
 800b36c:	0800b94c 	.word	0x0800b94c
 800b370:	33bbbd2e 	.word	0x33bbbd2e
 800b374:	40490fdb 	.word	0x40490fdb
 800b378:	3fc90fdb 	.word	0x3fc90fdb
 800b37c:	3f490fdb 	.word	0x3f490fdb

0800b380 <__ieee754_sqrtf>:
 800b380:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b384:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	4603      	mov	r3, r0
 800b38c:	4604      	mov	r4, r0
 800b38e:	d309      	bcc.n	800b3a4 <__ieee754_sqrtf+0x24>
 800b390:	4601      	mov	r1, r0
 800b392:	f7f5 fcc7 	bl	8000d24 <__aeabi_fmul>
 800b396:	4601      	mov	r1, r0
 800b398:	4620      	mov	r0, r4
 800b39a:	f7f5 fbbb 	bl	8000b14 <__addsf3>
 800b39e:	4604      	mov	r4, r0
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	bd70      	pop	{r4, r5, r6, pc}
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	d0fb      	beq.n	800b3a0 <__ieee754_sqrtf+0x20>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	da06      	bge.n	800b3ba <__ieee754_sqrtf+0x3a>
 800b3ac:	4601      	mov	r1, r0
 800b3ae:	f7f5 fbaf 	bl	8000b10 <__aeabi_fsub>
 800b3b2:	4601      	mov	r1, r0
 800b3b4:	f7f5 fd6a 	bl	8000e8c <__aeabi_fdiv>
 800b3b8:	e7f1      	b.n	800b39e <__ieee754_sqrtf+0x1e>
 800b3ba:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800b3be:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800b3c2:	d029      	beq.n	800b418 <__ieee754_sqrtf+0x98>
 800b3c4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800b3c8:	07cb      	lsls	r3, r1, #31
 800b3ca:	f04f 0300 	mov.w	r3, #0
 800b3ce:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800b3d2:	f04f 0419 	mov.w	r4, #25
 800b3d6:	461e      	mov	r6, r3
 800b3d8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800b3dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b3e0:	bf58      	it	pl
 800b3e2:	0052      	lslpl	r2, r2, #1
 800b3e4:	1040      	asrs	r0, r0, #1
 800b3e6:	0052      	lsls	r2, r2, #1
 800b3e8:	1875      	adds	r5, r6, r1
 800b3ea:	4295      	cmp	r5, r2
 800b3ec:	bfde      	ittt	le
 800b3ee:	186e      	addle	r6, r5, r1
 800b3f0:	1b52      	suble	r2, r2, r5
 800b3f2:	185b      	addle	r3, r3, r1
 800b3f4:	3c01      	subs	r4, #1
 800b3f6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b3fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b3fe:	d1f3      	bne.n	800b3e8 <__ieee754_sqrtf+0x68>
 800b400:	b112      	cbz	r2, 800b408 <__ieee754_sqrtf+0x88>
 800b402:	3301      	adds	r3, #1
 800b404:	f023 0301 	bic.w	r3, r3, #1
 800b408:	105c      	asrs	r4, r3, #1
 800b40a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b40e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800b412:	e7c5      	b.n	800b3a0 <__ieee754_sqrtf+0x20>
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	3201      	adds	r2, #1
 800b418:	0218      	lsls	r0, r3, #8
 800b41a:	d5fb      	bpl.n	800b414 <__ieee754_sqrtf+0x94>
 800b41c:	3a01      	subs	r2, #1
 800b41e:	1a89      	subs	r1, r1, r2
 800b420:	e7d0      	b.n	800b3c4 <__ieee754_sqrtf+0x44>

0800b422 <with_errno>:
 800b422:	b570      	push	{r4, r5, r6, lr}
 800b424:	4604      	mov	r4, r0
 800b426:	460d      	mov	r5, r1
 800b428:	4616      	mov	r6, r2
 800b42a:	f7fd ff37 	bl	800929c <__errno>
 800b42e:	4629      	mov	r1, r5
 800b430:	6006      	str	r6, [r0, #0]
 800b432:	4620      	mov	r0, r4
 800b434:	bd70      	pop	{r4, r5, r6, pc}

0800b436 <xflow>:
 800b436:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b438:	4615      	mov	r5, r2
 800b43a:	461c      	mov	r4, r3
 800b43c:	b180      	cbz	r0, 800b460 <xflow+0x2a>
 800b43e:	4610      	mov	r0, r2
 800b440:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b444:	e9cd 0100 	strd	r0, r1, [sp]
 800b448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b44c:	4628      	mov	r0, r5
 800b44e:	4621      	mov	r1, r4
 800b450:	f7f5 f83a 	bl	80004c8 <__aeabi_dmul>
 800b454:	2222      	movs	r2, #34	; 0x22
 800b456:	b003      	add	sp, #12
 800b458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b45c:	f7ff bfe1 	b.w	800b422 <with_errno>
 800b460:	4610      	mov	r0, r2
 800b462:	4619      	mov	r1, r3
 800b464:	e7ee      	b.n	800b444 <xflow+0xe>

0800b466 <__math_uflow>:
 800b466:	2200      	movs	r2, #0
 800b468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b46c:	f7ff bfe3 	b.w	800b436 <xflow>

0800b470 <__math_oflow>:
 800b470:	2200      	movs	r2, #0
 800b472:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b476:	f7ff bfde 	b.w	800b436 <xflow>

0800b47a <fabs>:
 800b47a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b47e:	4770      	bx	lr

0800b480 <finite>:
 800b480:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b484:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b488:	0fc0      	lsrs	r0, r0, #31
 800b48a:	4770      	bx	lr
 800b48c:	0000      	movs	r0, r0
	...

0800b490 <scalbn>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b496:	4604      	mov	r4, r0
 800b498:	460d      	mov	r5, r1
 800b49a:	4617      	mov	r7, r2
 800b49c:	460b      	mov	r3, r1
 800b49e:	b996      	cbnz	r6, 800b4c6 <scalbn+0x36>
 800b4a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b4a4:	4303      	orrs	r3, r0
 800b4a6:	d039      	beq.n	800b51c <scalbn+0x8c>
 800b4a8:	4b33      	ldr	r3, [pc, #204]	; (800b578 <scalbn+0xe8>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f7f5 f80c 	bl	80004c8 <__aeabi_dmul>
 800b4b0:	4b32      	ldr	r3, [pc, #200]	; (800b57c <scalbn+0xec>)
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	429f      	cmp	r7, r3
 800b4b6:	460d      	mov	r5, r1
 800b4b8:	da0f      	bge.n	800b4da <scalbn+0x4a>
 800b4ba:	a32b      	add	r3, pc, #172	; (adr r3, 800b568 <scalbn+0xd8>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f5 f802 	bl	80004c8 <__aeabi_dmul>
 800b4c4:	e006      	b.n	800b4d4 <scalbn+0x44>
 800b4c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b4ca:	4296      	cmp	r6, r2
 800b4cc:	d10a      	bne.n	800b4e4 <scalbn+0x54>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	f7f4 fe44 	bl	800015c <__adddf3>
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	460d      	mov	r5, r1
 800b4d8:	e020      	b.n	800b51c <scalbn+0x8c>
 800b4da:	460b      	mov	r3, r1
 800b4dc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b4e0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b4e4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b4e8:	19b9      	adds	r1, r7, r6
 800b4ea:	4291      	cmp	r1, r2
 800b4ec:	dd0e      	ble.n	800b50c <scalbn+0x7c>
 800b4ee:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b4f2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b4f6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b4fa:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b4fe:	4820      	ldr	r0, [pc, #128]	; (800b580 <scalbn+0xf0>)
 800b500:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b504:	a31a      	add	r3, pc, #104	; (adr r3, 800b570 <scalbn+0xe0>)
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	e7d9      	b.n	800b4c0 <scalbn+0x30>
 800b50c:	2900      	cmp	r1, #0
 800b50e:	dd08      	ble.n	800b522 <scalbn+0x92>
 800b510:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b514:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b518:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b51c:	4620      	mov	r0, r4
 800b51e:	4629      	mov	r1, r5
 800b520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b522:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b526:	da12      	bge.n	800b54e <scalbn+0xbe>
 800b528:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b52c:	429f      	cmp	r7, r3
 800b52e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b532:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800b536:	dcdc      	bgt.n	800b4f2 <scalbn+0x62>
 800b538:	a30b      	add	r3, pc, #44	; (adr r3, 800b568 <scalbn+0xd8>)
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b542:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b546:	480f      	ldr	r0, [pc, #60]	; (800b584 <scalbn+0xf4>)
 800b548:	f041 011f 	orr.w	r1, r1, #31
 800b54c:	e7b8      	b.n	800b4c0 <scalbn+0x30>
 800b54e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b552:	3136      	adds	r1, #54	; 0x36
 800b554:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b558:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b55c:	4620      	mov	r0, r4
 800b55e:	4629      	mov	r1, r5
 800b560:	2200      	movs	r2, #0
 800b562:	4b09      	ldr	r3, [pc, #36]	; (800b588 <scalbn+0xf8>)
 800b564:	e7ac      	b.n	800b4c0 <scalbn+0x30>
 800b566:	bf00      	nop
 800b568:	c2f8f359 	.word	0xc2f8f359
 800b56c:	01a56e1f 	.word	0x01a56e1f
 800b570:	8800759c 	.word	0x8800759c
 800b574:	7e37e43c 	.word	0x7e37e43c
 800b578:	43500000 	.word	0x43500000
 800b57c:	ffff3cb0 	.word	0xffff3cb0
 800b580:	8800759c 	.word	0x8800759c
 800b584:	c2f8f359 	.word	0xc2f8f359
 800b588:	3c900000 	.word	0x3c900000

0800b58c <atanf>:
 800b58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b590:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b594:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800b598:	4604      	mov	r4, r0
 800b59a:	4680      	mov	r8, r0
 800b59c:	db0e      	blt.n	800b5bc <atanf+0x30>
 800b59e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b5a2:	dd04      	ble.n	800b5ae <atanf+0x22>
 800b5a4:	4601      	mov	r1, r0
 800b5a6:	f7f5 fab5 	bl	8000b14 <__addsf3>
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	e003      	b.n	800b5b6 <atanf+0x2a>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	f300 80ce 	bgt.w	800b750 <atanf+0x1c4>
 800b5b4:	4c67      	ldr	r4, [pc, #412]	; (800b754 <atanf+0x1c8>)
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5bc:	4b66      	ldr	r3, [pc, #408]	; (800b758 <atanf+0x1cc>)
 800b5be:	429d      	cmp	r5, r3
 800b5c0:	dc0e      	bgt.n	800b5e0 <atanf+0x54>
 800b5c2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800b5c6:	da08      	bge.n	800b5da <atanf+0x4e>
 800b5c8:	4964      	ldr	r1, [pc, #400]	; (800b75c <atanf+0x1d0>)
 800b5ca:	f7f5 faa3 	bl	8000b14 <__addsf3>
 800b5ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b5d2:	f7f5 fd63 	bl	800109c <__aeabi_fcmpgt>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d1ed      	bne.n	800b5b6 <atanf+0x2a>
 800b5da:	f04f 36ff 	mov.w	r6, #4294967295
 800b5de:	e01c      	b.n	800b61a <atanf+0x8e>
 800b5e0:	f000 f8e0 	bl	800b7a4 <fabsf>
 800b5e4:	4b5e      	ldr	r3, [pc, #376]	; (800b760 <atanf+0x1d4>)
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	429d      	cmp	r5, r3
 800b5ea:	dc7c      	bgt.n	800b6e6 <atanf+0x15a>
 800b5ec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b5f0:	429d      	cmp	r5, r3
 800b5f2:	dc67      	bgt.n	800b6c4 <atanf+0x138>
 800b5f4:	4601      	mov	r1, r0
 800b5f6:	f7f5 fa8d 	bl	8000b14 <__addsf3>
 800b5fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b5fe:	f7f5 fa87 	bl	8000b10 <__aeabi_fsub>
 800b602:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b606:	4605      	mov	r5, r0
 800b608:	4620      	mov	r0, r4
 800b60a:	f7f5 fa83 	bl	8000b14 <__addsf3>
 800b60e:	4601      	mov	r1, r0
 800b610:	4628      	mov	r0, r5
 800b612:	f7f5 fc3b 	bl	8000e8c <__aeabi_fdiv>
 800b616:	2600      	movs	r6, #0
 800b618:	4604      	mov	r4, r0
 800b61a:	4621      	mov	r1, r4
 800b61c:	4620      	mov	r0, r4
 800b61e:	f7f5 fb81 	bl	8000d24 <__aeabi_fmul>
 800b622:	4601      	mov	r1, r0
 800b624:	4607      	mov	r7, r0
 800b626:	f7f5 fb7d 	bl	8000d24 <__aeabi_fmul>
 800b62a:	4605      	mov	r5, r0
 800b62c:	494d      	ldr	r1, [pc, #308]	; (800b764 <atanf+0x1d8>)
 800b62e:	f7f5 fb79 	bl	8000d24 <__aeabi_fmul>
 800b632:	494d      	ldr	r1, [pc, #308]	; (800b768 <atanf+0x1dc>)
 800b634:	f7f5 fa6e 	bl	8000b14 <__addsf3>
 800b638:	4629      	mov	r1, r5
 800b63a:	f7f5 fb73 	bl	8000d24 <__aeabi_fmul>
 800b63e:	494b      	ldr	r1, [pc, #300]	; (800b76c <atanf+0x1e0>)
 800b640:	f7f5 fa68 	bl	8000b14 <__addsf3>
 800b644:	4629      	mov	r1, r5
 800b646:	f7f5 fb6d 	bl	8000d24 <__aeabi_fmul>
 800b64a:	4949      	ldr	r1, [pc, #292]	; (800b770 <atanf+0x1e4>)
 800b64c:	f7f5 fa62 	bl	8000b14 <__addsf3>
 800b650:	4629      	mov	r1, r5
 800b652:	f7f5 fb67 	bl	8000d24 <__aeabi_fmul>
 800b656:	4947      	ldr	r1, [pc, #284]	; (800b774 <atanf+0x1e8>)
 800b658:	f7f5 fa5c 	bl	8000b14 <__addsf3>
 800b65c:	4629      	mov	r1, r5
 800b65e:	f7f5 fb61 	bl	8000d24 <__aeabi_fmul>
 800b662:	4945      	ldr	r1, [pc, #276]	; (800b778 <atanf+0x1ec>)
 800b664:	f7f5 fa56 	bl	8000b14 <__addsf3>
 800b668:	4639      	mov	r1, r7
 800b66a:	f7f5 fb5b 	bl	8000d24 <__aeabi_fmul>
 800b66e:	4943      	ldr	r1, [pc, #268]	; (800b77c <atanf+0x1f0>)
 800b670:	4607      	mov	r7, r0
 800b672:	4628      	mov	r0, r5
 800b674:	f7f5 fb56 	bl	8000d24 <__aeabi_fmul>
 800b678:	4941      	ldr	r1, [pc, #260]	; (800b780 <atanf+0x1f4>)
 800b67a:	f7f5 fa49 	bl	8000b10 <__aeabi_fsub>
 800b67e:	4629      	mov	r1, r5
 800b680:	f7f5 fb50 	bl	8000d24 <__aeabi_fmul>
 800b684:	493f      	ldr	r1, [pc, #252]	; (800b784 <atanf+0x1f8>)
 800b686:	f7f5 fa43 	bl	8000b10 <__aeabi_fsub>
 800b68a:	4629      	mov	r1, r5
 800b68c:	f7f5 fb4a 	bl	8000d24 <__aeabi_fmul>
 800b690:	493d      	ldr	r1, [pc, #244]	; (800b788 <atanf+0x1fc>)
 800b692:	f7f5 fa3d 	bl	8000b10 <__aeabi_fsub>
 800b696:	4629      	mov	r1, r5
 800b698:	f7f5 fb44 	bl	8000d24 <__aeabi_fmul>
 800b69c:	493b      	ldr	r1, [pc, #236]	; (800b78c <atanf+0x200>)
 800b69e:	f7f5 fa37 	bl	8000b10 <__aeabi_fsub>
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	f7f5 fb3e 	bl	8000d24 <__aeabi_fmul>
 800b6a8:	4601      	mov	r1, r0
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	f7f5 fa32 	bl	8000b14 <__addsf3>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	f7f5 fb37 	bl	8000d24 <__aeabi_fmul>
 800b6b6:	1c73      	adds	r3, r6, #1
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	d133      	bne.n	800b724 <atanf+0x198>
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f7f5 fa27 	bl	8000b10 <__aeabi_fsub>
 800b6c2:	e772      	b.n	800b5aa <atanf+0x1e>
 800b6c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b6c8:	f7f5 fa22 	bl	8000b10 <__aeabi_fsub>
 800b6cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f7f5 fa1e 	bl	8000b14 <__addsf3>
 800b6d8:	4601      	mov	r1, r0
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f7f5 fbd6 	bl	8000e8c <__aeabi_fdiv>
 800b6e0:	2601      	movs	r6, #1
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	e799      	b.n	800b61a <atanf+0x8e>
 800b6e6:	4b2a      	ldr	r3, [pc, #168]	; (800b790 <atanf+0x204>)
 800b6e8:	429d      	cmp	r5, r3
 800b6ea:	dc14      	bgt.n	800b716 <atanf+0x18a>
 800b6ec:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b6f0:	f7f5 fa0e 	bl	8000b10 <__aeabi_fsub>
 800b6f4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b6f8:	4605      	mov	r5, r0
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7f5 fb12 	bl	8000d24 <__aeabi_fmul>
 800b700:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b704:	f7f5 fa06 	bl	8000b14 <__addsf3>
 800b708:	4601      	mov	r1, r0
 800b70a:	4628      	mov	r0, r5
 800b70c:	f7f5 fbbe 	bl	8000e8c <__aeabi_fdiv>
 800b710:	2602      	movs	r6, #2
 800b712:	4604      	mov	r4, r0
 800b714:	e781      	b.n	800b61a <atanf+0x8e>
 800b716:	4601      	mov	r1, r0
 800b718:	481e      	ldr	r0, [pc, #120]	; (800b794 <atanf+0x208>)
 800b71a:	f7f5 fbb7 	bl	8000e8c <__aeabi_fdiv>
 800b71e:	2603      	movs	r6, #3
 800b720:	4604      	mov	r4, r0
 800b722:	e77a      	b.n	800b61a <atanf+0x8e>
 800b724:	4b1c      	ldr	r3, [pc, #112]	; (800b798 <atanf+0x20c>)
 800b726:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b72a:	f7f5 f9f1 	bl	8000b10 <__aeabi_fsub>
 800b72e:	4621      	mov	r1, r4
 800b730:	f7f5 f9ee 	bl	8000b10 <__aeabi_fsub>
 800b734:	4b19      	ldr	r3, [pc, #100]	; (800b79c <atanf+0x210>)
 800b736:	4601      	mov	r1, r0
 800b738:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b73c:	f7f5 f9e8 	bl	8000b10 <__aeabi_fsub>
 800b740:	f1b8 0f00 	cmp.w	r8, #0
 800b744:	4604      	mov	r4, r0
 800b746:	f6bf af36 	bge.w	800b5b6 <atanf+0x2a>
 800b74a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b74e:	e72c      	b.n	800b5aa <atanf+0x1e>
 800b750:	4c13      	ldr	r4, [pc, #76]	; (800b7a0 <atanf+0x214>)
 800b752:	e730      	b.n	800b5b6 <atanf+0x2a>
 800b754:	bfc90fdb 	.word	0xbfc90fdb
 800b758:	3edfffff 	.word	0x3edfffff
 800b75c:	7149f2ca 	.word	0x7149f2ca
 800b760:	3f97ffff 	.word	0x3f97ffff
 800b764:	3c8569d7 	.word	0x3c8569d7
 800b768:	3d4bda59 	.word	0x3d4bda59
 800b76c:	3d886b35 	.word	0x3d886b35
 800b770:	3dba2e6e 	.word	0x3dba2e6e
 800b774:	3e124925 	.word	0x3e124925
 800b778:	3eaaaaab 	.word	0x3eaaaaab
 800b77c:	bd15a221 	.word	0xbd15a221
 800b780:	3d6ef16b 	.word	0x3d6ef16b
 800b784:	3d9d8795 	.word	0x3d9d8795
 800b788:	3de38e38 	.word	0x3de38e38
 800b78c:	3e4ccccd 	.word	0x3e4ccccd
 800b790:	401bffff 	.word	0x401bffff
 800b794:	bf800000 	.word	0xbf800000
 800b798:	0800b968 	.word	0x0800b968
 800b79c:	0800b958 	.word	0x0800b958
 800b7a0:	3fc90fdb 	.word	0x3fc90fdb

0800b7a4 <fabsf>:
 800b7a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b7a8:	4770      	bx	lr
	...

0800b7ac <nanf>:
 800b7ac:	4800      	ldr	r0, [pc, #0]	; (800b7b0 <nanf+0x4>)
 800b7ae:	4770      	bx	lr
 800b7b0:	7fc00000 	.word	0x7fc00000

0800b7b4 <_init>:
 800b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b6:	bf00      	nop
 800b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ba:	bc08      	pop	{r3}
 800b7bc:	469e      	mov	lr, r3
 800b7be:	4770      	bx	lr

0800b7c0 <_fini>:
 800b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c2:	bf00      	nop
 800b7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c6:	bc08      	pop	{r3}
 800b7c8:	469e      	mov	lr, r3
 800b7ca:	4770      	bx	lr
