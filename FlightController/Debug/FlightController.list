
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800c5f0  0800c5f0  0001c5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8f8  0800c8f8  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800c8f8  0800c8f8  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c8f8  0800c8f8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8f8  0800c8f8  0001c8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8fc  0800c8fc  0001c8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800c900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000098  0800c998  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800c998  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015498  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c4e  00000000  00000000  00035559  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e8  00000000  00000000  000381a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  00039590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001949d  00000000  00000000  0003a868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff75  00000000  00000000  00053d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000919e7  00000000  00000000  00063c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de8  00000000  00000000  000f56dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c5d4 	.word	0x0800c5d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	0800c5d4 	.word	0x0800c5d4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	d1ed      	bne.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2iz>:
 80010dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30f      	bcc.n	8001106 <__aeabi_f2iz+0x2a>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d90d      	bls.n	800110c <__aeabi_f2iz+0x30>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	bf18      	it	ne
 8001102:	4240      	negne	r0, r0
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2iz+0x3a>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d105      	bne.n	8001122 <__aeabi_f2iz+0x46>
 8001116:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800111a:	bf08      	it	eq
 800111c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr

08001128 <__aeabi_f2uiz>:
 8001128:	0042      	lsls	r2, r0, #1
 800112a:	d20e      	bcs.n	800114a <__aeabi_f2uiz+0x22>
 800112c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001130:	d30b      	bcc.n	800114a <__aeabi_f2uiz+0x22>
 8001132:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001136:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800113a:	d409      	bmi.n	8001150 <__aeabi_f2uiz+0x28>
 800113c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	4770      	bx	lr
 800114a:	f04f 0000 	mov.w	r0, #0
 800114e:	4770      	bx	lr
 8001150:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001154:	d101      	bne.n	800115a <__aeabi_f2uiz+0x32>
 8001156:	0242      	lsls	r2, r0, #9
 8001158:	d102      	bne.n	8001160 <__aeabi_f2uiz+0x38>
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	4770      	bx	lr
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_Init+0x28>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_Init+0x28>)
 8001172:	f043 0310 	orr.w	r3, r3, #16
 8001176:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f945 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f008 ff04 	bl	8009f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f95d 	bl	8001472 <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f925 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000002c 	.word	0x2000002c
 80011ec:	20000004 	.word	0x20000004
 80011f0:	20000000 	.word	0x20000000

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <HAL_IncTick+0x20>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000004 	.word	0x20000004
 8001214:	20000134 	.word	0x20000134

08001218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000134 	.word	0x20000134

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff0 	bl	8001218 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_Delay+0x40>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffe0 	bl	8001218 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000004 	.word	0x20000004

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4906      	ldr	r1, [pc, #24]	; (8001308 <__NVIC_EnableIRQ+0x34>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	; (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	; (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f1c3 0307 	rsb	r3, r3, #7
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf28      	it	cs
 800137e:	2304      	movcs	r3, #4
 8001380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3304      	adds	r3, #4
 8001386:	2b06      	cmp	r3, #6
 8001388:	d902      	bls.n	8001390 <NVIC_EncodePriority+0x30>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b03      	subs	r3, #3
 800138e:	e000      	b.n	8001392 <NVIC_EncodePriority+0x32>
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	f04f 32ff 	mov.w	r2, #4294967295
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	4313      	orrs	r3, r2
         );
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	; 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff90 	bl	800130c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff2d 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff42 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff90 	bl	8001360 <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5f 	bl	800130c <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff35 	bl	80012d4 <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa2 	bl	80013c4 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e043      	b.n	800152a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <HAL_DMA_Init+0xa8>)
 80014aa:	4413      	add	r3, r2
 80014ac:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_DMA_Init+0xac>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	009a      	lsls	r2, r3, #2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_DMA_Init+0xb0>)
 80014be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2202      	movs	r2, #2
 80014c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	bffdfff8 	.word	0xbffdfff8
 8001538:	cccccccd 	.word	0xcccccccd
 800153c:	40020000 	.word	0x40020000

08001540 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_DMA_Start_IT+0x20>
 800155c:	2302      	movs	r3, #2
 800155e:	e04a      	b.n	80015f6 <HAL_DMA_Start_IT+0xb6>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800156e:	2b01      	cmp	r3, #1
 8001570:	d13a      	bne.n	80015e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2202      	movs	r2, #2
 8001576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 f9e8 	bl	800196c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 020e 	orr.w	r2, r2, #14
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	e00f      	b.n	80015d6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0204 	bic.w	r2, r2, #4
 80015c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 020a 	orr.w	r2, r2, #10
 80015d4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e005      	b.n	80015f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015f0:	2302      	movs	r3, #2
 80015f2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001610:	2b02      	cmp	r3, #2
 8001612:	d008      	beq.n	8001626 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2204      	movs	r2, #4
 8001618:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e020      	b.n	8001668 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 020e 	bic.w	r2, r2, #14
 8001634:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
	...

08001674 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001686:	2b02      	cmp	r3, #2
 8001688:	d005      	beq.n	8001696 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2204      	movs	r2, #4
 800168e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e051      	b.n	800173a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 020e 	bic.w	r2, r2, #14
 80016a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0201 	bic.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <HAL_DMA_Abort_IT+0xd0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d029      	beq.n	8001714 <HAL_DMA_Abort_IT+0xa0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a20      	ldr	r2, [pc, #128]	; (8001748 <HAL_DMA_Abort_IT+0xd4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d022      	beq.n	8001710 <HAL_DMA_Abort_IT+0x9c>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1f      	ldr	r2, [pc, #124]	; (800174c <HAL_DMA_Abort_IT+0xd8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d01a      	beq.n	800170a <HAL_DMA_Abort_IT+0x96>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <HAL_DMA_Abort_IT+0xdc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d012      	beq.n	8001704 <HAL_DMA_Abort_IT+0x90>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <HAL_DMA_Abort_IT+0xe0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00a      	beq.n	80016fe <HAL_DMA_Abort_IT+0x8a>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <HAL_DMA_Abort_IT+0xe4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d102      	bne.n	80016f8 <HAL_DMA_Abort_IT+0x84>
 80016f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016f6:	e00e      	b.n	8001716 <HAL_DMA_Abort_IT+0xa2>
 80016f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016fc:	e00b      	b.n	8001716 <HAL_DMA_Abort_IT+0xa2>
 80016fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001702:	e008      	b.n	8001716 <HAL_DMA_Abort_IT+0xa2>
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	e005      	b.n	8001716 <HAL_DMA_Abort_IT+0xa2>
 800170a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170e:	e002      	b.n	8001716 <HAL_DMA_Abort_IT+0xa2>
 8001710:	2310      	movs	r3, #16
 8001712:	e000      	b.n	8001716 <HAL_DMA_Abort_IT+0xa2>
 8001714:	2301      	movs	r3, #1
 8001716:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_DMA_Abort_IT+0xe8>)
 8001718:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	4798      	blx	r3
    } 
  }
  return status;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40020008 	.word	0x40020008
 8001748:	4002001c 	.word	0x4002001c
 800174c:	40020030 	.word	0x40020030
 8001750:	40020044 	.word	0x40020044
 8001754:	40020058 	.word	0x40020058
 8001758:	4002006c 	.word	0x4002006c
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	2204      	movs	r2, #4
 800177e:	409a      	lsls	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d04f      	beq.n	8001828 <HAL_DMA_IRQHandler+0xc8>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d04a      	beq.n	8001828 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0204 	bic.w	r2, r2, #4
 80017ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a66      	ldr	r2, [pc, #408]	; (8001950 <HAL_DMA_IRQHandler+0x1f0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d029      	beq.n	800180e <HAL_DMA_IRQHandler+0xae>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a65      	ldr	r2, [pc, #404]	; (8001954 <HAL_DMA_IRQHandler+0x1f4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d022      	beq.n	800180a <HAL_DMA_IRQHandler+0xaa>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a63      	ldr	r2, [pc, #396]	; (8001958 <HAL_DMA_IRQHandler+0x1f8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d01a      	beq.n	8001804 <HAL_DMA_IRQHandler+0xa4>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a62      	ldr	r2, [pc, #392]	; (800195c <HAL_DMA_IRQHandler+0x1fc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d012      	beq.n	80017fe <HAL_DMA_IRQHandler+0x9e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a60      	ldr	r2, [pc, #384]	; (8001960 <HAL_DMA_IRQHandler+0x200>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00a      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x98>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a5f      	ldr	r2, [pc, #380]	; (8001964 <HAL_DMA_IRQHandler+0x204>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d102      	bne.n	80017f2 <HAL_DMA_IRQHandler+0x92>
 80017ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f0:	e00e      	b.n	8001810 <HAL_DMA_IRQHandler+0xb0>
 80017f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017f6:	e00b      	b.n	8001810 <HAL_DMA_IRQHandler+0xb0>
 80017f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017fc:	e008      	b.n	8001810 <HAL_DMA_IRQHandler+0xb0>
 80017fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001802:	e005      	b.n	8001810 <HAL_DMA_IRQHandler+0xb0>
 8001804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001808:	e002      	b.n	8001810 <HAL_DMA_IRQHandler+0xb0>
 800180a:	2340      	movs	r3, #64	; 0x40
 800180c:	e000      	b.n	8001810 <HAL_DMA_IRQHandler+0xb0>
 800180e:	2304      	movs	r3, #4
 8001810:	4a55      	ldr	r2, [pc, #340]	; (8001968 <HAL_DMA_IRQHandler+0x208>)
 8001812:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8094 	beq.w	8001946 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001826:	e08e      	b.n	8001946 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	2202      	movs	r2, #2
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d056      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x186>
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d051      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10b      	bne.n	8001868 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 020a 	bic.w	r2, r2, #10
 800185e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a38      	ldr	r2, [pc, #224]	; (8001950 <HAL_DMA_IRQHandler+0x1f0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d029      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x166>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a37      	ldr	r2, [pc, #220]	; (8001954 <HAL_DMA_IRQHandler+0x1f4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d022      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x162>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a35      	ldr	r2, [pc, #212]	; (8001958 <HAL_DMA_IRQHandler+0x1f8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d01a      	beq.n	80018bc <HAL_DMA_IRQHandler+0x15c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a34      	ldr	r2, [pc, #208]	; (800195c <HAL_DMA_IRQHandler+0x1fc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d012      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x156>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a32      	ldr	r2, [pc, #200]	; (8001960 <HAL_DMA_IRQHandler+0x200>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00a      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x150>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a31      	ldr	r2, [pc, #196]	; (8001964 <HAL_DMA_IRQHandler+0x204>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d102      	bne.n	80018aa <HAL_DMA_IRQHandler+0x14a>
 80018a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018a8:	e00e      	b.n	80018c8 <HAL_DMA_IRQHandler+0x168>
 80018aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ae:	e00b      	b.n	80018c8 <HAL_DMA_IRQHandler+0x168>
 80018b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b4:	e008      	b.n	80018c8 <HAL_DMA_IRQHandler+0x168>
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ba:	e005      	b.n	80018c8 <HAL_DMA_IRQHandler+0x168>
 80018bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c0:	e002      	b.n	80018c8 <HAL_DMA_IRQHandler+0x168>
 80018c2:	2320      	movs	r3, #32
 80018c4:	e000      	b.n	80018c8 <HAL_DMA_IRQHandler+0x168>
 80018c6:	2302      	movs	r3, #2
 80018c8:	4a27      	ldr	r2, [pc, #156]	; (8001968 <HAL_DMA_IRQHandler+0x208>)
 80018ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d034      	beq.n	8001946 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018e4:	e02f      	b.n	8001946 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	2208      	movs	r2, #8
 80018ec:	409a      	lsls	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d028      	beq.n	8001948 <HAL_DMA_IRQHandler+0x1e8>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d023      	beq.n	8001948 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 020e 	bic.w	r2, r2, #14
 800190e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	2101      	movs	r1, #1
 800191a:	fa01 f202 	lsl.w	r2, r1, r2
 800191e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
    }
  }
  return;
 8001946:	bf00      	nop
 8001948:	bf00      	nop
}
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40020008 	.word	0x40020008
 8001954:	4002001c 	.word	0x4002001c
 8001958:	40020030 	.word	0x40020030
 800195c:	40020044 	.word	0x40020044
 8001960:	40020058 	.word	0x40020058
 8001964:	4002006c 	.word	0x4002006c
 8001968:	40020000 	.word	0x40020000

0800196c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	2101      	movs	r1, #1
 8001984:	fa01 f202 	lsl.w	r2, r1, r2
 8001988:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b10      	cmp	r3, #16
 8001998:	d108      	bne.n	80019ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019aa:	e007      	b.n	80019bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	60da      	str	r2, [r3, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b08b      	sub	sp, #44	; 0x2c
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019da:	e127      	b.n	8001c2c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019dc:	2201      	movs	r2, #1
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 8116 	bne.w	8001c26 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b12      	cmp	r3, #18
 8001a00:	d034      	beq.n	8001a6c <HAL_GPIO_Init+0xa4>
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d80d      	bhi.n	8001a22 <HAL_GPIO_Init+0x5a>
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d02b      	beq.n	8001a62 <HAL_GPIO_Init+0x9a>
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d804      	bhi.n	8001a18 <HAL_GPIO_Init+0x50>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d031      	beq.n	8001a76 <HAL_GPIO_Init+0xae>
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d01c      	beq.n	8001a50 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a16:	e048      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d043      	beq.n	8001aa4 <HAL_GPIO_Init+0xdc>
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	d01b      	beq.n	8001a58 <HAL_GPIO_Init+0x90>
          break;
 8001a20:	e043      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a22:	4a89      	ldr	r2, [pc, #548]	; (8001c48 <HAL_GPIO_Init+0x280>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d026      	beq.n	8001a76 <HAL_GPIO_Init+0xae>
 8001a28:	4a87      	ldr	r2, [pc, #540]	; (8001c48 <HAL_GPIO_Init+0x280>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d806      	bhi.n	8001a3c <HAL_GPIO_Init+0x74>
 8001a2e:	4a87      	ldr	r2, [pc, #540]	; (8001c4c <HAL_GPIO_Init+0x284>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d020      	beq.n	8001a76 <HAL_GPIO_Init+0xae>
 8001a34:	4a86      	ldr	r2, [pc, #536]	; (8001c50 <HAL_GPIO_Init+0x288>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01d      	beq.n	8001a76 <HAL_GPIO_Init+0xae>
          break;
 8001a3a:	e036      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a3c:	4a85      	ldr	r2, [pc, #532]	; (8001c54 <HAL_GPIO_Init+0x28c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d019      	beq.n	8001a76 <HAL_GPIO_Init+0xae>
 8001a42:	4a85      	ldr	r2, [pc, #532]	; (8001c58 <HAL_GPIO_Init+0x290>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d016      	beq.n	8001a76 <HAL_GPIO_Init+0xae>
 8001a48:	4a84      	ldr	r2, [pc, #528]	; (8001c5c <HAL_GPIO_Init+0x294>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0xae>
          break;
 8001a4e:	e02c      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e028      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e023      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	3308      	adds	r3, #8
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e01e      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	330c      	adds	r3, #12
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e019      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e012      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	611a      	str	r2, [r3, #16]
          break;
 8001a96:	e008      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	615a      	str	r2, [r3, #20]
          break;
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
          break;
 8001aa8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2bff      	cmp	r3, #255	; 0xff
 8001aae:	d801      	bhi.n	8001ab4 <HAL_GPIO_Init+0xec>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	e001      	b.n	8001ab8 <HAL_GPIO_Init+0xf0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2bff      	cmp	r3, #255	; 0xff
 8001abe:	d802      	bhi.n	8001ac6 <HAL_GPIO_Init+0xfe>
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x104>
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	3b08      	subs	r3, #8
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	401a      	ands	r2, r3
 8001ade:	6a39      	ldr	r1, [r7, #32]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8096 	beq.w	8001c26 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001afa:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_GPIO_Init+0x298>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_GPIO_Init+0x298>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6193      	str	r3, [r2, #24]
 8001b06:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <HAL_GPIO_Init+0x298>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b12:	4a54      	ldr	r2, [pc, #336]	; (8001c64 <HAL_GPIO_Init+0x29c>)
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <HAL_GPIO_Init+0x2a0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x19e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4a      	ldr	r2, [pc, #296]	; (8001c6c <HAL_GPIO_Init+0x2a4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x19a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a49      	ldr	r2, [pc, #292]	; (8001c70 <HAL_GPIO_Init+0x2a8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x196>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <HAL_GPIO_Init+0x2ac>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x192>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x1a0>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	e004      	b.n	8001b68 <HAL_GPIO_Init+0x1a0>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_Init+0x1a0>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x1a0>
 8001b66:	2300      	movs	r3, #0
 8001b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6a:	f002 0203 	and.w	r2, r2, #3
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4093      	lsls	r3, r2
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b78:	493a      	ldr	r1, [pc, #232]	; (8001c64 <HAL_GPIO_Init+0x29c>)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d006      	beq.n	8001ba0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b92:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4938      	ldr	r1, [pc, #224]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
 8001b9e:	e006      	b.n	8001bae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	4933      	ldr	r1, [pc, #204]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	492e      	ldr	r1, [pc, #184]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
 8001bc6:	e006      	b.n	8001bd6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	4929      	ldr	r1, [pc, #164]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d006      	beq.n	8001bf0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	4924      	ldr	r1, [pc, #144]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
 8001bee:	e006      	b.n	8001bfe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	491f      	ldr	r1, [pc, #124]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	491a      	ldr	r1, [pc, #104]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60cb      	str	r3, [r1, #12]
 8001c16:	e006      	b.n	8001c26 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	4915      	ldr	r1, [pc, #84]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	3301      	adds	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f47f aed0 	bne.w	80019dc <HAL_GPIO_Init+0x14>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	372c      	adds	r7, #44	; 0x2c
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	10210000 	.word	0x10210000
 8001c4c:	10110000 	.word	0x10110000
 8001c50:	10120000 	.word	0x10120000
 8001c54:	10310000 	.word	0x10310000
 8001c58:	10320000 	.word	0x10320000
 8001c5c:	10220000 	.word	0x10220000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40011400 	.word	0x40011400
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	041a      	lsls	r2, r3, #16
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	43d9      	mvns	r1, r3
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	400b      	ands	r3, r1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	611a      	str	r2, [r3, #16]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e11f      	b.n	8001f32 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f008 f974 	bl	8009ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2224      	movs	r2, #36	; 0x24
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d44:	f001 fb90 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8001d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a7b      	ldr	r2, [pc, #492]	; (8001f3c <HAL_I2C_Init+0x25c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d807      	bhi.n	8001d64 <HAL_I2C_Init+0x84>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a7a      	ldr	r2, [pc, #488]	; (8001f40 <HAL_I2C_Init+0x260>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	bf94      	ite	ls
 8001d5c:	2301      	movls	r3, #1
 8001d5e:	2300      	movhi	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e006      	b.n	8001d72 <HAL_I2C_Init+0x92>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a77      	ldr	r2, [pc, #476]	; (8001f44 <HAL_I2C_Init+0x264>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	bf94      	ite	ls
 8001d6c:	2301      	movls	r3, #1
 8001d6e:	2300      	movhi	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0db      	b.n	8001f32 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4a72      	ldr	r2, [pc, #456]	; (8001f48 <HAL_I2C_Init+0x268>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9b      	lsrs	r3, r3, #18
 8001d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4a64      	ldr	r2, [pc, #400]	; (8001f3c <HAL_I2C_Init+0x25c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d802      	bhi.n	8001db4 <HAL_I2C_Init+0xd4>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3301      	adds	r3, #1
 8001db2:	e009      	b.n	8001dc8 <HAL_I2C_Init+0xe8>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	4a63      	ldr	r2, [pc, #396]	; (8001f4c <HAL_I2C_Init+0x26c>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	099b      	lsrs	r3, r3, #6
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4956      	ldr	r1, [pc, #344]	; (8001f3c <HAL_I2C_Init+0x25c>)
 8001de4:	428b      	cmp	r3, r1
 8001de6:	d80d      	bhi.n	8001e04 <HAL_I2C_Init+0x124>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e59      	subs	r1, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	bf38      	it	cc
 8001e00:	2304      	movcc	r3, #4
 8001e02:	e04f      	b.n	8001ea4 <HAL_I2C_Init+0x1c4>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d111      	bne.n	8001e30 <HAL_I2C_Init+0x150>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e58      	subs	r0, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	440b      	add	r3, r1
 8001e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e012      	b.n	8001e56 <HAL_I2C_Init+0x176>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e58      	subs	r0, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	0099      	lsls	r1, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_I2C_Init+0x17e>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e022      	b.n	8001ea4 <HAL_I2C_Init+0x1c4>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10e      	bne.n	8001e84 <HAL_I2C_Init+0x1a4>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1e58      	subs	r0, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	440b      	add	r3, r1
 8001e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e82:	e00f      	b.n	8001ea4 <HAL_I2C_Init+0x1c4>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e58      	subs	r0, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	0099      	lsls	r1, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	6809      	ldr	r1, [r1, #0]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6911      	ldr	r1, [r2, #16]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68d2      	ldr	r2, [r2, #12]
 8001ede:	4311      	orrs	r1, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	000186a0 	.word	0x000186a0
 8001f40:	001e847f 	.word	0x001e847f
 8001f44:	003d08ff 	.word	0x003d08ff
 8001f48:	431bde83 	.word	0x431bde83
 8001f4c:	10624dd3 	.word	0x10624dd3

08001f50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	4608      	mov	r0, r1
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	817b      	strh	r3, [r7, #10]
 8001f62:	460b      	mov	r3, r1
 8001f64:	813b      	strh	r3, [r7, #8]
 8001f66:	4613      	mov	r3, r2
 8001f68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f6a:	f7ff f955 	bl	8001218 <HAL_GetTick>
 8001f6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	f040 80d9 	bne.w	8002130 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2319      	movs	r3, #25
 8001f84:	2201      	movs	r2, #1
 8001f86:	496d      	ldr	r1, [pc, #436]	; (800213c <HAL_I2C_Mem_Write+0x1ec>)
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fcbb 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
 8001f96:	e0cc      	b.n	8002132 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_Mem_Write+0x56>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e0c5      	b.n	8002132 <HAL_I2C_Mem_Write+0x1e2>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d007      	beq.n	8001fcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2221      	movs	r2, #33	; 0x21
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2240      	movs	r2, #64	; 0x40
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a3a      	ldr	r2, [r7, #32]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a4d      	ldr	r2, [pc, #308]	; (8002140 <HAL_I2C_Mem_Write+0x1f0>)
 800200c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800200e:	88f8      	ldrh	r0, [r7, #6]
 8002010:	893a      	ldrh	r2, [r7, #8]
 8002012:	8979      	ldrh	r1, [r7, #10]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4603      	mov	r3, r0
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 faf2 	bl	8002608 <I2C_RequestMemoryWrite>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d052      	beq.n	80020d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e081      	b.n	8002132 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fd3c 	bl	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2b04      	cmp	r3, #4
 8002044:	d107      	bne.n	8002056 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002054:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e06b      	b.n	8002132 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b04      	cmp	r3, #4
 8002096:	d11b      	bne.n	80020d0 <HAL_I2C_Mem_Write+0x180>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1aa      	bne.n	800202e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 fd28 	bl	8002b32 <I2C_WaitOnBTFFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00d      	beq.n	8002104 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d107      	bne.n	8002100 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e016      	b.n	8002132 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e000      	b.n	8002132 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002130:	2302      	movs	r3, #2
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	00100002 	.word	0x00100002
 8002140:	ffff0000 	.word	0xffff0000

08002144 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08c      	sub	sp, #48	; 0x30
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	817b      	strh	r3, [r7, #10]
 8002156:	460b      	mov	r3, r1
 8002158:	813b      	strh	r3, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002162:	f7ff f859 	bl	8001218 <HAL_GetTick>
 8002166:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b20      	cmp	r3, #32
 8002172:	f040 823d 	bne.w	80025f0 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2319      	movs	r3, #25
 800217c:	2201      	movs	r2, #1
 800217e:	4981      	ldr	r1, [pc, #516]	; (8002384 <HAL_I2C_Mem_Read+0x240>)
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fbbf 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
 800218e:	e230      	b.n	80025f2 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_I2C_Mem_Read+0x5a>
 800219a:	2302      	movs	r3, #2
 800219c:	e229      	b.n	80025f2 <HAL_I2C_Mem_Read+0x4ae>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d007      	beq.n	80021c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2222      	movs	r2, #34	; 0x22
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2240      	movs	r2, #64	; 0x40
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4a61      	ldr	r2, [pc, #388]	; (8002388 <HAL_I2C_Mem_Read+0x244>)
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002206:	88f8      	ldrh	r0, [r7, #6]
 8002208:	893a      	ldrh	r2, [r7, #8]
 800220a:	8979      	ldrh	r1, [r7, #10]
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	4603      	mov	r3, r0
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fa8c 	bl	8002734 <I2C_RequestMemoryRead>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1e5      	b.n	80025f2 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	2b00      	cmp	r3, #0
 800222c:	d113      	bne.n	8002256 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e1b9      	b.n	80025ca <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	2b01      	cmp	r3, #1
 800225c:	d11d      	bne.n	800229a <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800226e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002270:	2300      	movs	r3, #0
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002294:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002296:	b662      	cpsie	i
 8002298:	e197      	b.n	80025ca <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d11d      	bne.n	80022de <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022b2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022da:	b662      	cpsie	i
 80022dc:	e175      	b.n	80025ca <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022ec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002304:	e161      	b.n	80025ca <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	2b03      	cmp	r3, #3
 800230c:	f200 811a 	bhi.w	8002544 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	2b01      	cmp	r3, #1
 8002316:	d123      	bne.n	8002360 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fc49 	bl	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e162      	b.n	80025f2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800235e:	e134      	b.n	80025ca <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	2b02      	cmp	r3, #2
 8002366:	d150      	bne.n	800240a <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236e:	2200      	movs	r2, #0
 8002370:	4906      	ldr	r1, [pc, #24]	; (800238c <HAL_I2C_Mem_Read+0x248>)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 fac6 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e137      	b.n	80025f2 <HAL_I2C_Mem_Read+0x4ae>
 8002382:	bf00      	nop
 8002384:	00100002 	.word	0x00100002
 8002388:	ffff0000 	.word	0xffff0000
 800238c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002390:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023d4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002408:	e0df      	b.n	80025ca <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	2200      	movs	r2, #0
 8002412:	497a      	ldr	r1, [pc, #488]	; (80025fc <HAL_I2C_Mem_Read+0x4b8>)
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fa75 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0e6      	b.n	80025f2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002432:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002434:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002468:	4b65      	ldr	r3, [pc, #404]	; (8002600 <HAL_I2C_Mem_Read+0x4bc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_I2C_Mem_Read+0x4c0>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	0a1a      	lsrs	r2, r3, #8
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00da      	lsls	r2, r3, #3
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	3b01      	subs	r3, #1
 8002486:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d117      	bne.n	80024be <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f043 0220 	orr.w	r2, r3, #32
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80024b0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e099      	b.n	80025f2 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d1da      	bne.n	8002482 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800250e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002542:	e042      	b.n	80025ca <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002546:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fb33 	bl	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e04c      	b.n	80025f2 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b04      	cmp	r3, #4
 8002596:	d118      	bne.n	80025ca <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f47f ae99 	bne.w	8002306 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3728      	adds	r7, #40	; 0x28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	00010004 	.word	0x00010004
 8002600:	2000002c 	.word	0x2000002c
 8002604:	14f8b589 	.word	0x14f8b589

08002608 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	461a      	mov	r2, r3
 8002616:	4603      	mov	r3, r0
 8002618:	817b      	strh	r3, [r7, #10]
 800261a:	460b      	mov	r3, r1
 800261c:	813b      	strh	r3, [r7, #8]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	2200      	movs	r2, #0
 800263a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f960 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00d      	beq.n	8002666 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002658:	d103      	bne.n	8002662 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e05f      	b.n	8002726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	492d      	ldr	r1, [pc, #180]	; (8002730 <I2C_RequestMemoryWrite+0x128>)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f998 	bl	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e04c      	b.n	8002726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	6a39      	ldr	r1, [r7, #32]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fa02 	bl	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d107      	bne.n	80026ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e02b      	b.n	8002726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d4:	893b      	ldrh	r3, [r7, #8]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	611a      	str	r2, [r3, #16]
 80026de:	e021      	b.n	8002724 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026e0:	893b      	ldrh	r3, [r7, #8]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f0:	6a39      	ldr	r1, [r7, #32]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f9dc 	bl	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00d      	beq.n	800271a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	2b04      	cmp	r3, #4
 8002704:	d107      	bne.n	8002716 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e005      	b.n	8002726 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800271a:	893b      	ldrh	r3, [r7, #8]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	00010002 	.word	0x00010002

08002734 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	461a      	mov	r2, r3
 8002742:	4603      	mov	r3, r0
 8002744:	817b      	strh	r3, [r7, #10]
 8002746:	460b      	mov	r3, r1
 8002748:	813b      	strh	r3, [r7, #8]
 800274a:	4613      	mov	r3, r2
 800274c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800275c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2200      	movs	r2, #0
 8002776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f8c2 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002794:	d103      	bne.n	800279e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0aa      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	4952      	ldr	r1, [pc, #328]	; (8002900 <I2C_RequestMemoryRead+0x1cc>)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f8fa 	bl	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e097      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f964 	bl	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d107      	bne.n	8002806 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e076      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002810:	893b      	ldrh	r3, [r7, #8]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	611a      	str	r2, [r3, #16]
 800281a:	e021      	b.n	8002860 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800281c:	893b      	ldrh	r3, [r7, #8]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	b29b      	uxth	r3, r3
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800282a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282c:	6a39      	ldr	r1, [r7, #32]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f93e 	bl	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b04      	cmp	r3, #4
 8002840:	d107      	bne.n	8002852 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e050      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002856:	893b      	ldrh	r3, [r7, #8]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	6a39      	ldr	r1, [r7, #32]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f923 	bl	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00d      	beq.n	800288c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	2b04      	cmp	r3, #4
 8002876:	d107      	bne.n	8002888 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002886:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e035      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f82b 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00d      	beq.n	80028d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c2:	d103      	bne.n	80028cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e013      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028d0:	897b      	ldrh	r3, [r7, #10]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	6a3a      	ldr	r2, [r7, #32]
 80028e4:	4906      	ldr	r1, [pc, #24]	; (8002900 <I2C_RequestMemoryRead+0x1cc>)
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f863 	bl	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	00010002 	.word	0x00010002

08002904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002914:	e025      	b.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d021      	beq.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291e:	f7fe fc7b 	bl	8001218 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d302      	bcc.n	8002934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d116      	bne.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f043 0220 	orr.w	r2, r3, #32
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e023      	b.n	80029aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d10d      	bne.n	8002988 <I2C_WaitOnFlagUntilTimeout+0x84>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4013      	ands	r3, r2
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2300      	movne	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	e00c      	b.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4013      	ands	r3, r2
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf0c      	ite	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	2300      	movne	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d0b6      	beq.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029c0:	e051      	b.n	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d0:	d123      	bne.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0204 	orr.w	r2, r3, #4
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e046      	b.n	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d021      	beq.n	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7fe fbf9 	bl	8001218 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d116      	bne.n	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f043 0220 	orr.w	r2, r3, #32
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e020      	b.n	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10c      	bne.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	43da      	mvns	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e00b      	b.n	8002aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	43da      	mvns	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4013      	ands	r3, r2
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d18d      	bne.n	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002abc:	e02d      	b.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f8ce 	bl	8002c60 <I2C_IsAcknowledgeFailed>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e02d      	b.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d021      	beq.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7fe fb9f 	bl	8001218 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d116      	bne.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e007      	b.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d1ca      	bne.n	8002abe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b3e:	e02d      	b.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f88d 	bl	8002c60 <I2C_IsAcknowledgeFailed>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e02d      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d021      	beq.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b58:	f7fe fb5e 	bl	8001218 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d302      	bcc.n	8002b6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e007      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d1ca      	bne.n	8002b40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bc0:	e042      	b.n	8002c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d119      	bne.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0210 	mvn.w	r2, #16
 8002bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e029      	b.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c04:	f7fe fb08 	bl	8001218 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d116      	bne.n	8002c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e007      	b.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d1b5      	bne.n	8002bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	d11b      	bne.n	8002cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e26c      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8087 	beq.w	8002dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cdc:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d00c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ce8:	4b8f      	ldr	r3, [pc, #572]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d112      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5e>
 8002cf4:	4b8c      	ldr	r3, [pc, #560]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d10b      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d02:	4b89      	ldr	r3, [pc, #548]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d06c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x12c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d168      	bne.n	8002de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e246      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x76>
 8002d24:	4b80      	ldr	r3, [pc, #512]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7f      	ldr	r2, [pc, #508]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e02e      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b7b      	ldr	r3, [pc, #492]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7a      	ldr	r2, [pc, #488]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b78      	ldr	r3, [pc, #480]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a77      	ldr	r2, [pc, #476]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e01d      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0xbc>
 8002d5e:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a71      	ldr	r2, [pc, #452]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6e      	ldr	r2, [pc, #440]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d78:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b68      	ldr	r3, [pc, #416]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a67      	ldr	r2, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe fa3e 	bl	8001218 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fe fa3a 	bl	8001218 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1fa      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe4>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fa2a 	bl	8001218 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fa26 	bl	8001218 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1e6      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x10c>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002df6:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e02:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x18c>
 8002e0e:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1ba      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4939      	ldr	r1, [pc, #228]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	e03a      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d020      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7fe f9df 	bl	8001218 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7fe f9db 	bl	8001218 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e19b      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4927      	ldr	r1, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	e015      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe f9be 	bl	8001218 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe f9ba 	bl	8001218 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e17a      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03a      	beq.n	8002f40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d019      	beq.n	8002f06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7fe f99e 	bl	8001218 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7fe f99a 	bl	8001218 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e15a      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f000 fada 	bl	80034b8 <RCC_Delay>
 8002f04:	e01c      	b.n	8002f40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0c:	f7fe f984 	bl	8001218 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f12:	e00f      	b.n	8002f34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe f980 	bl	8001218 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d908      	bls.n	8002f34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e140      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	42420000 	.word	0x42420000
 8002f30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	4b9e      	ldr	r3, [pc, #632]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e9      	bne.n	8002f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a6 	beq.w	800309a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b97      	ldr	r3, [pc, #604]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	4b94      	ldr	r3, [pc, #592]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a93      	ldr	r2, [pc, #588]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]
 8002f6a:	4b91      	ldr	r3, [pc, #580]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b8e      	ldr	r3, [pc, #568]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d118      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a8a      	ldr	r2, [pc, #552]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe f941 	bl	8001218 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7fe f93d 	bl	8001218 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0fd      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b81      	ldr	r3, [pc, #516]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x312>
 8002fc0:	4b7b      	ldr	r3, [pc, #492]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a7a      	ldr	r2, [pc, #488]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6213      	str	r3, [r2, #32]
 8002fcc:	e02d      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8002fd6:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a75      	ldr	r2, [pc, #468]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	e01c      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x356>
 8002ff8:	4b6d      	ldr	r3, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a6c      	ldr	r2, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	e00b      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8003012:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a66      	ldr	r2, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	4b64      	ldr	r3, [pc, #400]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a63      	ldr	r2, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d015      	beq.n	800305e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fe f8f1 	bl	8001218 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fe f8ed 	bl	8001218 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0ab      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	4b57      	ldr	r3, [pc, #348]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ee      	beq.n	800303a <HAL_RCC_OscConfig+0x37e>
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fe f8db 	bl	8001218 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe f8d7 	bl	8001218 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e095      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ee      	bne.n	8003066 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a47      	ldr	r2, [pc, #284]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8081 	beq.w	80031a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a4:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d061      	beq.n	8003174 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d146      	bne.n	8003146 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b8:	4b3f      	ldr	r3, [pc, #252]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fe f8ab 	bl	8001218 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fe f8a7 	bl	8001218 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e067      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d108      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	492d      	ldr	r1, [pc, #180]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a19      	ldr	r1, [r3, #32]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	430b      	orrs	r3, r1
 8003112:	4927      	ldr	r1, [pc, #156]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fe f87b 	bl	8001218 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003126:	f7fe f877 	bl	8001218 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e037      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x46a>
 8003144:	e02f      	b.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe f864 	bl	8001218 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe f860 	bl	8001218 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e020      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x498>
 8003172:	e018      	b.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e013      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
 80031b8:	42420060 	.word	0x42420060

080031bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0d0      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d910      	bls.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b67      	ldr	r3, [pc, #412]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 0207 	bic.w	r2, r3, #7
 80031e6:	4965      	ldr	r1, [pc, #404]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b63      	ldr	r3, [pc, #396]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0b8      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003218:	4b59      	ldr	r3, [pc, #356]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a58      	ldr	r2, [pc, #352]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a52      	ldr	r2, [pc, #328]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800323a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323c:	4b50      	ldr	r3, [pc, #320]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	494d      	ldr	r1, [pc, #308]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d040      	beq.n	80032dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d115      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e07f      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e073      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06b      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4936      	ldr	r1, [pc, #216]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ac:	f7fd ffb4 	bl	8001218 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b4:	f7fd ffb0 	bl	8001218 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e053      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 020c 	and.w	r2, r3, #12
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1eb      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b27      	ldr	r3, [pc, #156]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d210      	bcs.n	800330c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	4922      	ldr	r1, [pc, #136]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b20      	ldr	r3, [pc, #128]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e032      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4916      	ldr	r1, [pc, #88]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	490e      	ldr	r1, [pc, #56]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800334a:	f000 f821 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800334e:	4601      	mov	r1, r0
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	5cd3      	ldrb	r3, [r2, r3]
 800335e:	fa21 f303 	lsr.w	r3, r1, r3
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <HAL_RCC_ClockConfig+0x1cc>)
 8003364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_ClockConfig+0x1d0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd ff12 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40022000 	.word	0x40022000
 8003380:	40021000 	.word	0x40021000
 8003384:	0800c838 	.word	0x0800c838
 8003388:	2000002c 	.word	0x2000002c
 800338c:	20000000 	.word	0x20000000

08003390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	b490      	push	{r4, r7}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003396:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003398:	1d3c      	adds	r4, r7, #4
 800339a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800339c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ba:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x40>
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x46>
 80033ce:	e02d      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033d0:	4b1e      	ldr	r3, [pc, #120]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033d2:	623b      	str	r3, [r7, #32]
      break;
 80033d4:	e02d      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	0c9b      	lsrs	r3, r3, #18
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033e2:	4413      	add	r3, r2
 80033e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0c5b      	lsrs	r3, r3, #17
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003402:	4413      	add	r3, r2
 8003404:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003408:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a0f      	ldr	r2, [pc, #60]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
 800340e:	fb02 f203 	mul.w	r2, r2, r3
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	e004      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	623b      	str	r3, [r7, #32]
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
 800342e:	623b      	str	r3, [r7, #32]
      break;
 8003430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003432:	6a3b      	ldr	r3, [r7, #32]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3728      	adds	r7, #40	; 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc90      	pop	{r4, r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	0800c5f0 	.word	0x0800c5f0
 8003444:	0800c600 	.word	0x0800c600
 8003448:	40021000 	.word	0x40021000
 800344c:	007a1200 	.word	0x007a1200
 8003450:	003d0900 	.word	0x003d0900

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <HAL_RCC_GetHCLKFreq+0x10>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	2000002c 	.word	0x2000002c

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff2 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003470:	4601      	mov	r1, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4a03      	ldr	r2, [pc, #12]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	0800c848 	.word	0x0800c848

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffde 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003498:	4601      	mov	r1, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0adb      	lsrs	r3, r3, #11
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4a03      	ldr	r2, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	0800c848 	.word	0x0800c848

080034b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <RCC_Delay+0x34>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <RCC_Delay+0x38>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0a5b      	lsrs	r3, r3, #9
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034d4:	bf00      	nop
  }
  while (Delay --);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e5a      	subs	r2, r3, #1
 80034da:	60fa      	str	r2, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f9      	bne.n	80034d4 <RCC_Delay+0x1c>
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	2000002c 	.word	0x2000002c
 80034f0:	10624dd3 	.word	0x10624dd3

080034f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e076      	b.n	80035f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d108      	bne.n	8003520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003516:	d009      	beq.n	800352c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
 800351e:	e005      	b.n	800352c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f006 fd92 	bl	800a070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003562:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	ea42 0103 	orr.w	r1, r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	0c1a      	lsrs	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f002 0204 	and.w	r2, r2, #4
 80035d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800360a:	2301      	movs	r3, #1
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_SPI_TransmitReceive+0x26>
 800361e:	2302      	movs	r3, #2
 8003620:	e18a      	b.n	8003938 <HAL_SPI_TransmitReceive+0x33c>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800362a:	f7fd fdf5 	bl	8001218 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003640:	887b      	ldrh	r3, [r7, #2]
 8003642:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003648:	2b01      	cmp	r3, #1
 800364a:	d00f      	beq.n	800366c <HAL_SPI_TransmitReceive+0x70>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003652:	d107      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d103      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x68>
 800365c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003660:	2b04      	cmp	r3, #4
 8003662:	d003      	beq.n	800366c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003664:	2302      	movs	r3, #2
 8003666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800366a:	e15b      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_SPI_TransmitReceive+0x82>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_SPI_TransmitReceive+0x82>
 8003678:	887b      	ldrh	r3, [r7, #2]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003684:	e14e      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b04      	cmp	r3, #4
 8003690:	d003      	beq.n	800369a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2205      	movs	r2, #5
 8003696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	887a      	ldrh	r2, [r7, #2]
 80036aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	887a      	ldrh	r2, [r7, #2]
 80036c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d007      	beq.n	80036ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f6:	d178      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x10a>
 8003700:	8b7b      	ldrh	r3, [r7, #26]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d166      	bne.n	80037d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	1c9a      	adds	r2, r3, #2
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800372a:	e053      	b.n	80037d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d11b      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x176>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d016      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x176>
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d113      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	881a      	ldrh	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d119      	bne.n	80037b4 <HAL_SPI_TransmitReceive+0x1b8>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d014      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	b292      	uxth	r2, r2
 8003796:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037b0:	2301      	movs	r3, #1
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037b4:	f7fd fd30 	bl	8001218 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d807      	bhi.n	80037d4 <HAL_SPI_TransmitReceive+0x1d8>
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d003      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037d2:	e0a7      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1a6      	bne.n	800372c <HAL_SPI_TransmitReceive+0x130>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1a1      	bne.n	800372c <HAL_SPI_TransmitReceive+0x130>
 80037e8:	e07c      	b.n	80038e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x1fc>
 80037f2:	8b7b      	ldrh	r3, [r7, #26]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d16b      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	7812      	ldrb	r2, [r2, #0]
 8003804:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800381e:	e057      	b.n	80038d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d11c      	bne.n	8003868 <HAL_SPI_TransmitReceive+0x26c>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d017      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x26c>
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d114      	bne.n	8003868 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d119      	bne.n	80038aa <HAL_SPI_TransmitReceive+0x2ae>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d014      	beq.n	80038aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038a6:	2301      	movs	r3, #1
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038aa:	f7fd fcb5 	bl	8001218 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d803      	bhi.n	80038c2 <HAL_SPI_TransmitReceive+0x2c6>
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d102      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x2cc>
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d103      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038ce:	e029      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1a2      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x224>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d19d      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f8b1 	bl	8003a50 <SPI_EndRxTxTransaction>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003900:	e010      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	e000      	b.n	8003924 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003922:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003934:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003938:	4618      	mov	r0, r3
 800393a:	3730      	adds	r7, #48	; 0x30
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003950:	f7fd fc62 	bl	8001218 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	4413      	add	r3, r2
 800395e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003960:	f7fd fc5a 	bl	8001218 <HAL_GetTick>
 8003964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003966:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	015b      	lsls	r3, r3, #5
 800396c:	0d1b      	lsrs	r3, r3, #20
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003976:	e054      	b.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d050      	beq.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003980:	f7fd fc4a 	bl	8001218 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	429a      	cmp	r2, r3
 800398e:	d902      	bls.n	8003996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d13d      	bne.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ae:	d111      	bne.n	80039d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b8:	d004      	beq.n	80039c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c2:	d107      	bne.n	80039d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039dc:	d10f      	bne.n	80039fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e017      	b.n	8003a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d19b      	bne.n	8003978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	2000002c 	.word	0x2000002c

08003a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2200      	movs	r2, #0
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff ff6a 	bl	8003940 <SPI_WaitFlagStateUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e000      	b.n	8003a84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e041      	b.n	8003b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f006 fb46 	bl	800a144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	f000 fc14 	bl	80042f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d001      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e03a      	b.n	8003bba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <HAL_TIM_Base_Start_IT+0x98>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00e      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x58>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d009      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x58>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x58>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <HAL_TIM_Base_Start_IT+0xa0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d111      	bne.n	8003ba8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b06      	cmp	r3, #6
 8003b94:	d010      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	e007      	b.n	8003bb8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800

08003bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e041      	b.n	8003c66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f006 fa86 	bl	800a108 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f000 fb72 	bl	80042f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <HAL_TIM_PWM_Start+0x24>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e022      	b.n	8003cda <HAL_TIM_PWM_Start+0x6a>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d109      	bne.n	8003cae <HAL_TIM_PWM_Start+0x3e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	bf14      	ite	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	2300      	moveq	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	e015      	b.n	8003cda <HAL_TIM_PWM_Start+0x6a>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d109      	bne.n	8003cc8 <HAL_TIM_PWM_Start+0x58>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e008      	b.n	8003cda <HAL_TIM_PWM_Start+0x6a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	bf14      	ite	ne
 8003cd4:	2301      	movne	r3, #1
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e05e      	b.n	8003da0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0x82>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf0:	e013      	b.n	8003d1a <HAL_TIM_PWM_Start+0xaa>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d104      	bne.n	8003d02 <HAL_TIM_PWM_Start+0x92>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d00:	e00b      	b.n	8003d1a <HAL_TIM_PWM_Start+0xaa>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_PWM_Start+0xa2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d10:	e003      	b.n	8003d1a <HAL_TIM_PWM_Start+0xaa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	6839      	ldr	r1, [r7, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fd68 	bl	80047f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_TIM_PWM_Start+0x138>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d107      	bne.n	8003d42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <HAL_TIM_PWM_Start+0x138>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_TIM_PWM_Start+0xfa>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d009      	beq.n	8003d6a <HAL_TIM_PWM_Start+0xfa>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a14      	ldr	r2, [pc, #80]	; (8003dac <HAL_TIM_PWM_Start+0x13c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_TIM_PWM_Start+0xfa>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <HAL_TIM_PWM_Start+0x140>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d111      	bne.n	8003d8e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b06      	cmp	r3, #6
 8003d7a:	d010      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8c:	e007      	b.n	8003d9e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40012c00 	.word	0x40012c00
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800

08003db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0202 	mvn.w	r2, #2
 8003de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa62 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa55 	bl	80042ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fa64 	bl	80042d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0204 	mvn.w	r2, #4
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa38 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fa2b 	bl	80042ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fa3a 	bl	80042d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0208 	mvn.w	r2, #8
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa0e 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa01 	bl	80042ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fa10 	bl	80042d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d122      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d11b      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0210 	mvn.w	r2, #16
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9e4 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f9d7 	bl	80042ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f9e6 	bl	80042d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d10e      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d107      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0201 	mvn.w	r2, #1
 8003f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f001 feca 	bl	8005ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d10e      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b80      	cmp	r3, #128	; 0x80
 8003f52:	d107      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fcd5 	bl	800490e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b40      	cmp	r3, #64	; 0x40
 8003f70:	d10e      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d107      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f9aa 	bl	80042e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d10e      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d107      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0220 	mvn.w	r2, #32
 8003fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fca0 	bl	80048fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e0ac      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b0c      	cmp	r3, #12
 8003fea:	f200 809f 	bhi.w	800412c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	0800412d 	.word	0x0800412d
 8003ffc:	0800412d 	.word	0x0800412d
 8004000:	0800412d 	.word	0x0800412d
 8004004:	08004069 	.word	0x08004069
 8004008:	0800412d 	.word	0x0800412d
 800400c:	0800412d 	.word	0x0800412d
 8004010:	0800412d 	.word	0x0800412d
 8004014:	080040ab 	.word	0x080040ab
 8004018:	0800412d 	.word	0x0800412d
 800401c:	0800412d 	.word	0x0800412d
 8004020:	0800412d 	.word	0x0800412d
 8004024:	080040eb 	.word	0x080040eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f9c4 	bl	80043bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0208 	orr.w	r2, r2, #8
 8004042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0204 	bic.w	r2, r2, #4
 8004052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6999      	ldr	r1, [r3, #24]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	619a      	str	r2, [r3, #24]
      break;
 8004066:	e062      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fa0a 	bl	8004488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6999      	ldr	r1, [r3, #24]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	021a      	lsls	r2, r3, #8
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	619a      	str	r2, [r3, #24]
      break;
 80040a8:	e041      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fa53 	bl	800455c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0208 	orr.w	r2, r2, #8
 80040c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0204 	bic.w	r2, r2, #4
 80040d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69d9      	ldr	r1, [r3, #28]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	61da      	str	r2, [r3, #28]
      break;
 80040e8:	e021      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fa9d 	bl	8004630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69d9      	ldr	r1, [r3, #28]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	021a      	lsls	r2, r3, #8
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	61da      	str	r2, [r3, #28]
      break;
 800412a:	e000      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800412c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIM_ConfigClockSource+0x18>
 8004154:	2302      	movs	r3, #2
 8004156:	e0a6      	b.n	80042a6 <HAL_TIM_ConfigClockSource+0x166>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800417e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d067      	beq.n	8004260 <HAL_TIM_ConfigClockSource+0x120>
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d80b      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x6c>
 8004194:	2b10      	cmp	r3, #16
 8004196:	d073      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0x140>
 8004198:	2b10      	cmp	r3, #16
 800419a:	d802      	bhi.n	80041a2 <HAL_TIM_ConfigClockSource+0x62>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d06f      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041a0:	e078      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d06c      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0x140>
 80041a6:	2b30      	cmp	r3, #48	; 0x30
 80041a8:	d06a      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80041aa:	e073      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041ac:	2b70      	cmp	r3, #112	; 0x70
 80041ae:	d00d      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x8c>
 80041b0:	2b70      	cmp	r3, #112	; 0x70
 80041b2:	d804      	bhi.n	80041be <HAL_TIM_ConfigClockSource+0x7e>
 80041b4:	2b50      	cmp	r3, #80	; 0x50
 80041b6:	d033      	beq.n	8004220 <HAL_TIM_ConfigClockSource+0xe0>
 80041b8:	2b60      	cmp	r3, #96	; 0x60
 80041ba:	d041      	beq.n	8004240 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80041bc:	e06a      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	d066      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0x152>
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c8:	d017      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80041ca:	e063      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6899      	ldr	r1, [r3, #8]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f000 faed 	bl	80047ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]
      break;
 80041f8:	e04c      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6899      	ldr	r1, [r3, #8]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f000 fad6 	bl	80047ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800421c:	609a      	str	r2, [r3, #8]
      break;
 800421e:	e039      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	461a      	mov	r2, r3
 800422e:	f000 fa4d 	bl	80046cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2150      	movs	r1, #80	; 0x50
 8004238:	4618      	mov	r0, r3
 800423a:	f000 faa4 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 800423e:	e029      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6859      	ldr	r1, [r3, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	461a      	mov	r2, r3
 800424e:	f000 fa6b 	bl	8004728 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2160      	movs	r1, #96	; 0x60
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fa94 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 800425e:	e019      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	6859      	ldr	r1, [r3, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	461a      	mov	r2, r3
 800426e:	f000 fa2d 	bl	80046cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2140      	movs	r1, #64	; 0x40
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fa84 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 800427e:	e009      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f000 fa7b 	bl	8004786 <TIM_ITRx_SetConfig>
        break;
 8004290:	e000      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr
	...

080042f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <TIM_Base_SetConfig+0xb8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00b      	beq.n	8004328 <TIM_Base_SetConfig+0x30>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004316:	d007      	beq.n	8004328 <TIM_Base_SetConfig+0x30>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a26      	ldr	r2, [pc, #152]	; (80043b4 <TIM_Base_SetConfig+0xbc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0x30>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a25      	ldr	r2, [pc, #148]	; (80043b8 <TIM_Base_SetConfig+0xc0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d108      	bne.n	800433a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <TIM_Base_SetConfig+0xb8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00b      	beq.n	800435a <TIM_Base_SetConfig+0x62>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d007      	beq.n	800435a <TIM_Base_SetConfig+0x62>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <TIM_Base_SetConfig+0xbc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d003      	beq.n	800435a <TIM_Base_SetConfig+0x62>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <TIM_Base_SetConfig+0xc0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d108      	bne.n	800436c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <TIM_Base_SetConfig+0xb8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d103      	bne.n	80043a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	615a      	str	r2, [r3, #20]
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	40012c00 	.word	0x40012c00
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800

080043bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0303 	bic.w	r3, r3, #3
 80043f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f023 0302 	bic.w	r3, r3, #2
 8004404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <TIM_OC1_SetConfig+0xc8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d10c      	bne.n	8004432 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0308 	bic.w	r3, r3, #8
 800441e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f023 0304 	bic.w	r3, r3, #4
 8004430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a13      	ldr	r2, [pc, #76]	; (8004484 <TIM_OC1_SetConfig+0xc8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d111      	bne.n	800445e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40012c00 	.word	0x40012c00

08004488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f023 0210 	bic.w	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f023 0320 	bic.w	r3, r3, #32
 80044d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <TIM_OC2_SetConfig+0xd0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10d      	bne.n	8004504 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a14      	ldr	r2, [pc, #80]	; (8004558 <TIM_OC2_SetConfig+0xd0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d113      	bne.n	8004534 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800451a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	40012c00 	.word	0x40012c00

0800455c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <TIM_OC3_SetConfig+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d10d      	bne.n	80045d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a14      	ldr	r2, [pc, #80]	; (800462c <TIM_OC3_SetConfig+0xd0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d113      	bne.n	8004606 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	621a      	str	r2, [r3, #32]
}
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40012c00 	.word	0x40012c00

08004630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a0f      	ldr	r2, [pc, #60]	; (80046c8 <TIM_OC4_SetConfig+0x98>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d109      	bne.n	80046a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	019b      	lsls	r3, r3, #6
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr
 80046c8:	40012c00 	.word	0x40012c00

080046cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f023 0201 	bic.w	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f023 030a 	bic.w	r3, r3, #10
 8004708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f023 0210 	bic.w	r2, r3, #16
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004752:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	031b      	lsls	r3, r3, #12
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	621a      	str	r2, [r3, #32]
}
 800477c:	bf00      	nop
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f043 0307 	orr.w	r3, r3, #7
 80047a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b087      	sub	sp, #28
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	021a      	lsls	r2, r3, #8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	431a      	orrs	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	609a      	str	r2, [r3, #8]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2201      	movs	r2, #1
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1a      	ldr	r2, [r3, #32]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	43db      	mvns	r3, r3
 800481a:	401a      	ands	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	fa01 f303 	lsl.w	r3, r1, r3
 8004830:	431a      	orrs	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e046      	b.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a4:	d009      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d10c      	bne.n	80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800

080048fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr

08004920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e03f      	b.n	80049b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f005 fc6e 	bl	800a228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2224      	movs	r2, #36	; 0x24
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fd9d 	bl	80054a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b08a      	sub	sp, #40	; 0x28
 80049be:	af02      	add	r7, sp, #8
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d17c      	bne.n	8004ad4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_UART_Transmit+0x2c>
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e075      	b.n	8004ad6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_UART_Transmit+0x3e>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e06e      	b.n	8004ad6 <HAL_UART_Transmit+0x11c>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2221      	movs	r2, #33	; 0x21
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a0e:	f7fc fc03 	bl	8001218 <HAL_GetTick>
 8004a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a28:	d108      	bne.n	8004a3c <HAL_UART_Transmit+0x82>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d104      	bne.n	8004a3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	e003      	b.n	8004a44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a4c:	e02a      	b.n	8004aa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2200      	movs	r2, #0
 8004a56:	2180      	movs	r1, #128	; 0x80
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fb0f 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e036      	b.n	8004ad6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10b      	bne.n	8004a86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	3302      	adds	r3, #2
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	e007      	b.n	8004a96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	3301      	adds	r3, #1
 8004a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1cf      	bne.n	8004a4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2140      	movs	r1, #64	; 0x40
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fadf 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e006      	b.n	8004ad6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b086      	sub	sp, #24
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d13c      	bne.n	8004b72 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e035      	b.n	8004b74 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e02e      	b.n	8004b74 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	461a      	mov	r2, r3
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 faf0 	bl	8005110 <UART_Start_Receive_DMA>
 8004b30:	4603      	mov	r3, r0
 8004b32:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d119      	bne.n	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d113      	bne.n	8004b6a <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0210 	orr.w	r2, r2, #16
 8004b66:	60da      	str	r2, [r3, #12]
 8004b68:	e001      	b.n	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
 8004b70:	e000      	b.n	8004b74 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_UART_IRQHandler+0x52>
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fbc2 	bl	8005350 <UART_Receive_IT>
      return;
 8004bcc:	e17c      	b.n	8004ec8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80b1 	beq.w	8004d38 <HAL_UART_IRQHandler+0x1bc>
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <HAL_UART_IRQHandler+0x70>
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 80a6 	beq.w	8004d38 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_UART_IRQHandler+0x90>
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f043 0201 	orr.w	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_UART_IRQHandler+0xb0>
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	f043 0202 	orr.w	r2, r3, #2
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_UART_IRQHandler+0xd0>
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	f043 0204 	orr.w	r2, r3, #4
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00f      	beq.n	8004c76 <HAL_UART_IRQHandler+0xfa>
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <HAL_UART_IRQHandler+0xee>
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f043 0208 	orr.w	r2, r3, #8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 811f 	beq.w	8004ebe <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <HAL_UART_IRQHandler+0x11e>
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fb5b 	bl	8005350 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf14      	ite	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	2300      	moveq	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x146>
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d031      	beq.n	8004d26 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fa9d 	bl	8005202 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d023      	beq.n	8004d1e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d013      	beq.n	8004d16 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	4a77      	ldr	r2, [pc, #476]	; (8004ed0 <HAL_UART_IRQHandler+0x354>)
 8004cf4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fc fcba 	bl	8001674 <HAL_DMA_Abort_IT>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d016      	beq.n	8004d34 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d10:	4610      	mov	r0, r2
 8004d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d14:	e00e      	b.n	8004d34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8f7 	bl	8004f0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1c:	e00a      	b.n	8004d34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8f3 	bl	8004f0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d24:	e006      	b.n	8004d34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8ef 	bl	8004f0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d32:	e0c4      	b.n	8004ebe <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	bf00      	nop
    return;
 8004d36:	e0c2      	b.n	8004ebe <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	f040 80a1 	bne.w	8004e84 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 809b 	beq.w	8004e84 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8095 	beq.w	8004e84 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d04e      	beq.n	8004e1c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d88:	8a3b      	ldrh	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8099 	beq.w	8004ec2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d94:	8a3a      	ldrh	r2, [r7, #16]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	f080 8093 	bcs.w	8004ec2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8a3a      	ldrh	r2, [r7, #16]
 8004da0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d02b      	beq.n	8004e04 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0201 	bic.w	r2, r2, #1
 8004dca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dda:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0210 	bic.w	r2, r2, #16
 8004df8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fc fbfd 	bl	80015fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fff5 	bl	8005e04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e1a:	e052      	b.n	8004ec2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d048      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004e34:	8a7b      	ldrh	r3, [r7, #18]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d045      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e48:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
 8004e58:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0210 	bic.w	r2, r2, #16
 8004e76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e78:	8a7b      	ldrh	r3, [r7, #18]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 ffc1 	bl	8005e04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e82:	e020      	b.n	8004ec6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x324>
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f9f2 	bl	8005282 <UART_Transmit_IT>
    return;
 8004e9e:	e013      	b.n	8004ec8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x34c>
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d009      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fa33 	bl	8005320 <UART_EndTransmit_IT>
    return;
 8004eba:	bf00      	nop
 8004ebc:	e004      	b.n	8004ec8 <HAL_UART_IRQHandler+0x34c>
    return;
 8004ebe:	bf00      	nop
 8004ec0:	e002      	b.n	8004ec8 <HAL_UART_IRQHandler+0x34c>
      return;
 8004ec2:	bf00      	nop
 8004ec4:	e000      	b.n	8004ec8 <HAL_UART_IRQHandler+0x34c>
      return;
 8004ec6:	bf00      	nop
  }
}
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	0800525b 	.word	0x0800525b

08004ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr

08004f0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d12a      	bne.n	8004f8e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f6c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d107      	bne.n	8004f8e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0210 	bic.w	r2, r2, #16
 8004f8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d106      	bne.n	8004fa4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 ff31 	bl	8005e04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fa2:	e002      	b.n	8004faa <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff ff9e 	bl	8004ee6 <HAL_UART_RxCpltCallback>
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d108      	bne.n	8004fda <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 ff16 	bl	8005e04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fd8:	e002      	b.n	8004fe0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff ff8c 	bl	8004ef8 <HAL_UART_RxHalfCpltCallback>
}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b00      	cmp	r3, #0
 8005006:	bf14      	ite	ne
 8005008:	2301      	movne	r3, #1
 800500a:	2300      	moveq	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b21      	cmp	r3, #33	; 0x21
 800501a:	d108      	bne.n	800502e <UART_DMAError+0x46>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2200      	movs	r2, #0
 8005026:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005028:	68b8      	ldr	r0, [r7, #8]
 800502a:	f000 f8d5 	bl	80051d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b22      	cmp	r3, #34	; 0x22
 800504e:	d108      	bne.n	8005062 <UART_DMAError+0x7a>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800505c:	68b8      	ldr	r0, [r7, #8]
 800505e:	f000 f8d0 	bl	8005202 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	f043 0210 	orr.w	r2, r3, #16
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800506e:	68b8      	ldr	r0, [r7, #8]
 8005070:	f7ff ff4b 	bl	8004f0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508c:	e02c      	b.n	80050e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d028      	beq.n	80050e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x30>
 800509c:	f7fc f8bc 	bl	8001218 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d21d      	bcs.n	80050e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e00f      	b.n	8005108 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4013      	ands	r3, r2
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	bf0c      	ite	eq
 80050f8:	2301      	moveq	r3, #1
 80050fa:	2300      	movne	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	429a      	cmp	r2, r3
 8005104:	d0c3      	beq.n	800508e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2222      	movs	r2, #34	; 0x22
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	4a23      	ldr	r2, [pc, #140]	; (80051cc <UART_Start_Receive_DMA+0xbc>)
 800513e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <UART_Start_Receive_DMA+0xc0>)
 8005146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	4a21      	ldr	r2, [pc, #132]	; (80051d4 <UART_Start_Receive_DMA+0xc4>)
 800514e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	2200      	movs	r2, #0
 8005156:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005158:	f107 0308 	add.w	r3, r7, #8
 800515c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3304      	adds	r3, #4
 8005168:	4619      	mov	r1, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	f7fc f9e6 	bl	8001540 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005174:	2300      	movs	r3, #0
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0201 	orr.w	r2, r2, #1
 80051b0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695a      	ldr	r2, [r3, #20]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	08004f1d 	.word	0x08004f1d
 80051d0:	08004fb3 	.word	0x08004fb3
 80051d4:	08004fe9 	.word	0x08004fe9

080051d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80051ee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005218:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0210 	bic.w	r2, r2, #16
 8005240:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	bc80      	pop	{r7}
 8005258:	4770      	bx	lr

0800525a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7ff fe48 	bl	8004f0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b21      	cmp	r3, #33	; 0x21
 8005294:	d13e      	bne.n	8005314 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529e:	d114      	bne.n	80052ca <UART_Transmit_IT+0x48>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d110      	bne.n	80052ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	1c9a      	adds	r2, r3, #2
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	621a      	str	r2, [r3, #32]
 80052c8:	e008      	b.n	80052dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	1c59      	adds	r1, r3, #1
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6211      	str	r1, [r2, #32]
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4619      	mov	r1, r3
 80052ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800530e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	e000      	b.n	8005316 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005314:	2302      	movs	r3, #2
  }
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005336:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff fdc7 	bl	8004ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b22      	cmp	r3, #34	; 0x22
 8005362:	f040 8099 	bne.w	8005498 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536e:	d117      	bne.n	80053a0 <UART_Receive_IT+0x50>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d113      	bne.n	80053a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	b29a      	uxth	r2, r3
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	1c9a      	adds	r2, r3, #2
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	629a      	str	r2, [r3, #40]	; 0x28
 800539e:	e026      	b.n	80053ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	d007      	beq.n	80053c4 <UART_Receive_IT+0x74>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <UART_Receive_IT+0x82>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d106      	bne.n	80053d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	e008      	b.n	80053e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	4619      	mov	r1, r3
 80053fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d148      	bne.n	8005494 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0220 	bic.w	r2, r2, #32
 8005410:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005420:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	2b01      	cmp	r3, #1
 8005440:	d123      	bne.n	800548a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0210 	bic.w	r2, r2, #16
 8005456:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b10      	cmp	r3, #16
 8005464:	d10a      	bne.n	800547c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fcbe 	bl	8005e04 <HAL_UARTEx_RxEventCallback>
 8005488:	e002      	b.n	8005490 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fd2b 	bl	8004ee6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e002      	b.n	800549a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	e000      	b.n	800549a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054de:	f023 030c 	bic.w	r3, r3, #12
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6812      	ldr	r2, [r2, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	430b      	orrs	r3, r1
 80054ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a2c      	ldr	r2, [pc, #176]	; (80055b8 <UART_SetConfig+0x114>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d103      	bne.n	8005514 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800550c:	f7fd ffc0 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	e002      	b.n	800551a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005514:	f7fd ffa8 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8005518:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	009a      	lsls	r2, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	4a22      	ldr	r2, [pc, #136]	; (80055bc <UART_SetConfig+0x118>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	0119      	lsls	r1, r3, #4
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009a      	lsls	r2, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005550:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <UART_SetConfig+0x118>)
 8005552:	fba3 0302 	umull	r0, r3, r3, r2
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2064      	movs	r0, #100	; 0x64
 800555a:	fb00 f303 	mul.w	r3, r0, r3
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	3332      	adds	r3, #50	; 0x32
 8005564:	4a15      	ldr	r2, [pc, #84]	; (80055bc <UART_SetConfig+0x118>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005570:	4419      	add	r1, r3
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009a      	lsls	r2, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	fbb2 f2f3 	udiv	r2, r2, r3
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <UART_SetConfig+0x118>)
 800558a:	fba3 0302 	umull	r0, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2064      	movs	r0, #100	; 0x64
 8005592:	fb00 f303 	mul.w	r3, r0, r3
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	3332      	adds	r3, #50	; 0x32
 800559c:	4a07      	ldr	r2, [pc, #28]	; (80055bc <UART_SetConfig+0x118>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	440a      	add	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40013800 	.word	0x40013800
 80055bc:	51eb851f 	.word	0x51eb851f

080055c0 <crc16_floating>:
        crc = (crc << 8) ^ crc16tab[(((crc >> 8) ^ (*((uint8_t *)(buf++)))) & 0x00FF)];
    return crc;
}

uint16_t crc16_floating(uint8_t next, uint16_t seed)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	460a      	mov	r2, r1
 80055ca:	71fb      	strb	r3, [r7, #7]
 80055cc:	4613      	mov	r3, r2
 80055ce:	80bb      	strh	r3, [r7, #4]
    return (seed << 8) ^ crc16tab[((seed >> 8) ^ next) & 0x00FF];
 80055d0:	88bb      	ldrh	r3, [r7, #4]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	b21a      	sxth	r2, r3
 80055d6:	88bb      	ldrh	r3, [r7, #4]
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	b29b      	uxth	r3, r3
 80055dc:	4619      	mov	r1, r3
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	404b      	eors	r3, r1
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	4905      	ldr	r1, [pc, #20]	; (80055fc <crc16_floating+0x3c>)
 80055e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80055ea:	b21b      	sxth	r3, r3
 80055ec:	4053      	eors	r3, r2
 80055ee:	b21b      	sxth	r3, r3
 80055f0:	b29b      	uxth	r3, r3
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr
 80055fc:	0800c624 	.word	0x0800c624

08005600 <SendFrameData>:

#include "frame_uart.h"
#include "crc.h"

void SendFrameData(uint8_t *pu8Src, uint16_t u16Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	460b      	mov	r3, r1
 800560e:	817b      	strh	r3, [r7, #10]
    const uint8_t *pu8Src_end = pu8Src + u16Src_len;
 8005610:	897b      	ldrh	r3, [r7, #10]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
    const uint8_t *pu8Dest_start = pu8Dest;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	83fb      	strh	r3, [r7, #30]

    *(pu8Dest++) = START_BYTE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	2245      	movs	r2, #69	; 0x45
 8005628:	701a      	strb	r2, [r3, #0]
    while (pu8Src < pu8Src_end)
 800562a:	e029      	b.n	8005680 <SendFrameData+0x80>
    {
        if (*pu8Src == START_BYTE || *pu8Src == CHECK_BYTE || *pu8Src == STOP_BYTE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b45      	cmp	r3, #69	; 0x45
 8005632:	d007      	beq.n	8005644 <SendFrameData+0x44>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b60      	cmp	r3, #96	; 0x60
 800563a:	d003      	beq.n	8005644 <SendFrameData+0x44>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2bc4      	cmp	r3, #196	; 0xc4
 8005642:	d10b      	bne.n	800565c <SendFrameData+0x5c>
        {
            *(pu8Dest++) = CHECK_BYTE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	607a      	str	r2, [r7, #4]
 800564a:	2260      	movs	r2, #96	; 0x60
 800564c:	701a      	strb	r2, [r3, #0]
            *(pu8Dest++) = *pu8Src;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	7812      	ldrb	r2, [r2, #0]
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e005      	b.n	8005668 <SendFrameData+0x68>
        }
        else
        {
            *(pu8Dest++) = *pu8Src;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	701a      	strb	r2, [r3, #0]
        }
        crc = crc16_floating(*pu8Src, crc);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	8bfa      	ldrh	r2, [r7, #30]
 800566e:	4611      	mov	r1, r2
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff ffa5 	bl	80055c0 <crc16_floating>
 8005676:	4603      	mov	r3, r0
 8005678:	83fb      	strh	r3, [r7, #30]
        pu8Src++;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3301      	adds	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
    while (pu8Src < pu8Src_end)
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	429a      	cmp	r2, r3
 8005686:	d3d1      	bcc.n	800562c <SendFrameData+0x2c>
    }
    *(pu8Dest) = (char)(crc >> 8);
 8005688:	8bfb      	ldrh	r3, [r7, #30]
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	b29b      	uxth	r3, r3
 800568e:	b2da      	uxtb	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3301      	adds	r3, #1
 8005698:	607b      	str	r3, [r7, #4]
    *(pu8Dest) = (char)crc;
 800569a:	8bfb      	ldrh	r3, [r7, #30]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3301      	adds	r3, #1
 80056a6:	607b      	str	r3, [r7, #4]
    *(pu8Dest++) = STOP_BYTE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	22c4      	movs	r2, #196	; 0xc4
 80056b0:	701a      	strb	r2, [r3, #0]
    *(pu16Dest_len) = pu8Dest - pu8Dest_start;
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	801a      	strh	r2, [r3, #0]
}
 80056be:	bf00      	nop
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <receive_value>:
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
  return len;
}

void receive_value(uint8_t *data_dest, uint8_t *data, uint8_t length)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b087      	sub	sp, #28
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	4613      	mov	r3, r2
 80056d2:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < length; i++)
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e00a      	b.n	80056f0 <receive_value+0x2a>
    *data++ = *data_dest++;
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	1c53      	adds	r3, r2, #1
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	1c59      	adds	r1, r3, #1
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	7812      	ldrb	r2, [r2, #0]
 80056e8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	3301      	adds	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	dbf0      	blt.n	80056da <receive_value+0x14>
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr
	...

08005704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005708:	f7fb fd2e 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800570c:	f000 f878 	bl	8005800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005710:	f000 fa6c 	bl	8005bec <MX_GPIO_Init>
  MX_DMA_Init();
 8005714:	f000 fa44 	bl	8005ba0 <MX_DMA_Init>
  MX_I2C1_Init();
 8005718:	f000 f8b8 	bl	800588c <MX_I2C1_Init>
  MX_SPI2_Init();
 800571c:	f000 f8e4 	bl	80058e8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8005720:	f000 f918 	bl	8005954 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8005724:	f000 f9e8 	bl	8005af8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005728:	f000 fa10 	bl	8005b4c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800572c:	f000 f996 	bl	8005a5c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005730:	2100      	movs	r1, #0
 8005732:	4829      	ldr	r0, [pc, #164]	; (80057d8 <main+0xd4>)
 8005734:	f7fe fa9c 	bl	8003c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005738:	2104      	movs	r1, #4
 800573a:	4827      	ldr	r0, [pc, #156]	; (80057d8 <main+0xd4>)
 800573c:	f7fe fa98 	bl	8003c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8005740:	2108      	movs	r1, #8
 8005742:	4825      	ldr	r0, [pc, #148]	; (80057d8 <main+0xd4>)
 8005744:	f7fe fa94 	bl	8003c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8005748:	210c      	movs	r1, #12
 800574a:	4823      	ldr	r0, [pc, #140]	; (80057d8 <main+0xd4>)
 800574c:	f7fe fa90 	bl	8003c70 <HAL_TIM_PWM_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei, FRAME_DATA_RX_HANDLE);
 8005750:	2224      	movs	r2, #36	; 0x24
 8005752:	4922      	ldr	r1, [pc, #136]	; (80057dc <main+0xd8>)
 8005754:	4822      	ldr	r0, [pc, #136]	; (80057e0 <main+0xdc>)
 8005756:	f7ff f9c2 	bl	8004ade <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800575a:	4b22      	ldr	r3, [pc, #136]	; (80057e4 <main+0xe0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	4b20      	ldr	r3, [pc, #128]	; (80057e4 <main+0xe0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0204 	bic.w	r2, r2, #4
 8005768:	601a      	str	r2, [r3, #0]

  runRadio();
 800576a:	f004 fbbf 	bl	8009eec <runRadio>

  while (MPU9255_Init(&hi2c1) == 1)
 800576e:	e006      	b.n	800577e <main+0x7a>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8005770:	2110      	movs	r1, #16
 8005772:	481d      	ldr	r0, [pc, #116]	; (80057e8 <main+0xe4>)
 8005774:	f7fc fa9a 	bl	8001cac <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8005778:	2064      	movs	r0, #100	; 0x64
 800577a:	f7fb fd57 	bl	800122c <HAL_Delay>
  while (MPU9255_Init(&hi2c1) == 1)
 800577e:	481b      	ldr	r0, [pc, #108]	; (80057ec <main+0xe8>)
 8005780:	f000 fc9e 	bl	80060c0 <MPU9255_Init>
 8005784:	4603      	mov	r3, r0
 8005786:	2b01      	cmp	r3, #1
 8005788:	d0f2      	beq.n	8005770 <main+0x6c>
  }

  HAL_Delay(3000);
 800578a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800578e:	f7fb fd4d 	bl	800122c <HAL_Delay>
  while (payload_packet.throttle > 1050)
 8005792:	e004      	b.n	800579e <main+0x9a>
  {
    // Read again
    RX_data();
 8005794:	f004 fbe2 	bl	8009f5c <RX_data>
    HAL_Delay(20);
 8005798:	2014      	movs	r0, #20
 800579a:	f7fb fd47 	bl	800122c <HAL_Delay>
  while (payload_packet.throttle > 1050)
 800579e:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <main+0xec>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f240 421a 	movw	r2, #1050	; 0x41a
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d8f4      	bhi.n	8005794 <main+0x90>
  }

  start_time = HAL_GetTick();
 80057aa:	f7fb fd35 	bl	8001218 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <main+0xf0>)
 80057b2:	601a      	str	r2, [r3, #0]
  while ((HAL_GetTick() - start_time) < 4000)
 80057b4:	e003      	b.n	80057be <main+0xba>
  {
    readAll(&hi2c1, &MPU9255);
 80057b6:	4910      	ldr	r1, [pc, #64]	; (80057f8 <main+0xf4>)
 80057b8:	480c      	ldr	r0, [pc, #48]	; (80057ec <main+0xe8>)
 80057ba:	f000 fce5 	bl	8006188 <readAll>
  while ((HAL_GetTick() - start_time) < 4000)
 80057be:	f7fb fd2b 	bl	8001218 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <main+0xf0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80057ce:	d3f2      	bcc.n	80057b6 <main+0xb2>
  }

  //  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei, FRAME_DATA_RX_HANDLE);
  //  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  HAL_TIM_Base_Start_IT(&htim4);
 80057d0:	480a      	ldr	r0, [pc, #40]	; (80057fc <main+0xf8>)
 80057d2:	f7fe f9ab 	bl	8003b2c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80057d6:	e7fe      	b.n	80057d6 <main+0xd2>
 80057d8:	200002cc 	.word	0x200002cc
 80057dc:	200003f4 	.word	0x200003f4
 80057e0:	200003a8 	.word	0x200003a8
 80057e4:	20000138 	.word	0x20000138
 80057e8:	40010c00 	.word	0x40010c00
 80057ec:	20000278 	.word	0x20000278
 80057f0:	20000560 	.word	0x20000560
 80057f4:	200000b4 	.word	0x200000b4
 80057f8:	2000017c 	.word	0x2000017c
 80057fc:	20000210 	.word	0x20000210

08005800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b090      	sub	sp, #64	; 0x40
 8005804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005806:	f107 0318 	add.w	r3, r7, #24
 800580a:	2228      	movs	r2, #40	; 0x28
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f004 fed0 	bl	800a5b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	609a      	str	r2, [r3, #8]
 800581e:	60da      	str	r2, [r3, #12]
 8005820:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005822:	2301      	movs	r3, #1
 8005824:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800582a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800582c:	2300      	movs	r3, #0
 800582e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005830:	2301      	movs	r3, #1
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005834:	2302      	movs	r3, #2
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800583e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005844:	f107 0318 	add.w	r3, r7, #24
 8005848:	4618      	mov	r0, r3
 800584a:	f7fd fa37 	bl	8002cbc <HAL_RCC_OscConfig>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005854:	f000 fb32 	bl	8005ebc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005858:	230f      	movs	r3, #15
 800585a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800585c:	2302      	movs	r3, #2
 800585e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800586e:	1d3b      	adds	r3, r7, #4
 8005870:	2102      	movs	r1, #2
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd fca2 	bl	80031bc <HAL_RCC_ClockConfig>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800587e:	f000 fb1d 	bl	8005ebc <Error_Handler>
  }
}
 8005882:	bf00      	nop
 8005884:	3740      	adds	r7, #64	; 0x40
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005890:	4b12      	ldr	r3, [pc, #72]	; (80058dc <MX_I2C1_Init+0x50>)
 8005892:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <MX_I2C1_Init+0x54>)
 8005894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005896:	4b11      	ldr	r3, [pc, #68]	; (80058dc <MX_I2C1_Init+0x50>)
 8005898:	4a12      	ldr	r2, [pc, #72]	; (80058e4 <MX_I2C1_Init+0x58>)
 800589a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <MX_I2C1_Init+0x50>)
 800589e:	2200      	movs	r2, #0
 80058a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80058a2:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <MX_I2C1_Init+0x50>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <MX_I2C1_Init+0x50>)
 80058aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80058b0:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <MX_I2C1_Init+0x50>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80058b6:	4b09      	ldr	r3, [pc, #36]	; (80058dc <MX_I2C1_Init+0x50>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058bc:	4b07      	ldr	r3, [pc, #28]	; (80058dc <MX_I2C1_Init+0x50>)
 80058be:	2200      	movs	r2, #0
 80058c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058c2:	4b06      	ldr	r3, [pc, #24]	; (80058dc <MX_I2C1_Init+0x50>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80058c8:	4804      	ldr	r0, [pc, #16]	; (80058dc <MX_I2C1_Init+0x50>)
 80058ca:	f7fc fa09 	bl	8001ce0 <HAL_I2C_Init>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80058d4:	f000 faf2 	bl	8005ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80058d8:	bf00      	nop
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000278 	.word	0x20000278
 80058e0:	40005400 	.word	0x40005400
 80058e4:	000186a0 	.word	0x000186a0

080058e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80058ec:	4b17      	ldr	r3, [pc, #92]	; (800594c <MX_SPI2_Init+0x64>)
 80058ee:	4a18      	ldr	r2, [pc, #96]	; (8005950 <MX_SPI2_Init+0x68>)
 80058f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80058f2:	4b16      	ldr	r3, [pc, #88]	; (800594c <MX_SPI2_Init+0x64>)
 80058f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80058f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80058fa:	4b14      	ldr	r3, [pc, #80]	; (800594c <MX_SPI2_Init+0x64>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <MX_SPI2_Init+0x64>)
 8005902:	2200      	movs	r2, #0
 8005904:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005906:	4b11      	ldr	r3, [pc, #68]	; (800594c <MX_SPI2_Init+0x64>)
 8005908:	2200      	movs	r2, #0
 800590a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <MX_SPI2_Init+0x64>)
 800590e:	2200      	movs	r2, #0
 8005910:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005912:	4b0e      	ldr	r3, [pc, #56]	; (800594c <MX_SPI2_Init+0x64>)
 8005914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005918:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <MX_SPI2_Init+0x64>)
 800591c:	2200      	movs	r2, #0
 800591e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <MX_SPI2_Init+0x64>)
 8005922:	2200      	movs	r2, #0
 8005924:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <MX_SPI2_Init+0x64>)
 8005928:	2200      	movs	r2, #0
 800592a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800592c:	4b07      	ldr	r3, [pc, #28]	; (800594c <MX_SPI2_Init+0x64>)
 800592e:	2200      	movs	r2, #0
 8005930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <MX_SPI2_Init+0x64>)
 8005934:	220a      	movs	r2, #10
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005938:	4804      	ldr	r0, [pc, #16]	; (800594c <MX_SPI2_Init+0x64>)
 800593a:	f7fd fddb 	bl	80034f4 <HAL_SPI_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005944:	f000 faba 	bl	8005ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005948:	bf00      	nop
 800594a:	bd80      	pop	{r7, pc}
 800594c:	200001ac 	.word	0x200001ac
 8005950:	40003800 	.word	0x40003800

08005954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08a      	sub	sp, #40	; 0x28
 8005958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800595a:	f107 0320 	add.w	r3, r7, #32
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005964:	1d3b      	adds	r3, r7, #4
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	609a      	str	r2, [r3, #8]
 800596e:	60da      	str	r2, [r3, #12]
 8005970:	611a      	str	r2, [r3, #16]
 8005972:	615a      	str	r2, [r3, #20]
 8005974:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005976:	4b37      	ldr	r3, [pc, #220]	; (8005a54 <MX_TIM3_Init+0x100>)
 8005978:	4a37      	ldr	r2, [pc, #220]	; (8005a58 <MX_TIM3_Init+0x104>)
 800597a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800597c:	4b35      	ldr	r3, [pc, #212]	; (8005a54 <MX_TIM3_Init+0x100>)
 800597e:	2247      	movs	r2, #71	; 0x47
 8005980:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005982:	4b34      	ldr	r3, [pc, #208]	; (8005a54 <MX_TIM3_Init+0x100>)
 8005984:	2200      	movs	r2, #0
 8005986:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8005988:	4b32      	ldr	r3, [pc, #200]	; (8005a54 <MX_TIM3_Init+0x100>)
 800598a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800598e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005990:	4b30      	ldr	r3, [pc, #192]	; (8005a54 <MX_TIM3_Init+0x100>)
 8005992:	2200      	movs	r2, #0
 8005994:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005996:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <MX_TIM3_Init+0x100>)
 8005998:	2200      	movs	r2, #0
 800599a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800599c:	482d      	ldr	r0, [pc, #180]	; (8005a54 <MX_TIM3_Init+0x100>)
 800599e:	f7fe f917 	bl	8003bd0 <HAL_TIM_PWM_Init>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80059a8:	f000 fa88 	bl	8005ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059ac:	2300      	movs	r3, #0
 80059ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80059b4:	f107 0320 	add.w	r3, r7, #32
 80059b8:	4619      	mov	r1, r3
 80059ba:	4826      	ldr	r0, [pc, #152]	; (8005a54 <MX_TIM3_Init+0x100>)
 80059bc:	f7fe ff40 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80059c6:	f000 fa79 	bl	8005ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059ca:	2360      	movs	r3, #96	; 0x60
 80059cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1450;
 80059ce:	f240 53aa 	movw	r3, #1450	; 0x5aa
 80059d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059dc:	1d3b      	adds	r3, r7, #4
 80059de:	2200      	movs	r2, #0
 80059e0:	4619      	mov	r1, r3
 80059e2:	481c      	ldr	r0, [pc, #112]	; (8005a54 <MX_TIM3_Init+0x100>)
 80059e4:	f7fe faee 	bl	8003fc4 <HAL_TIM_PWM_ConfigChannel>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80059ee:	f000 fa65 	bl	8005ebc <Error_Handler>
  }
  sConfigOC.Pulse = 1500;
 80059f2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80059f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80059f8:	1d3b      	adds	r3, r7, #4
 80059fa:	2204      	movs	r2, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4815      	ldr	r0, [pc, #84]	; (8005a54 <MX_TIM3_Init+0x100>)
 8005a00:	f7fe fae0 	bl	8003fc4 <HAL_TIM_PWM_ConfigChannel>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8005a0a:	f000 fa57 	bl	8005ebc <Error_Handler>
  }
  sConfigOC.Pulse = 900;
 8005a0e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8005a12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a14:	1d3b      	adds	r3, r7, #4
 8005a16:	2208      	movs	r2, #8
 8005a18:	4619      	mov	r1, r3
 8005a1a:	480e      	ldr	r0, [pc, #56]	; (8005a54 <MX_TIM3_Init+0x100>)
 8005a1c:	f7fe fad2 	bl	8003fc4 <HAL_TIM_PWM_ConfigChannel>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005a26:	f000 fa49 	bl	8005ebc <Error_Handler>
  }
  sConfigOC.Pulse = 980;
 8005a2a:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8005a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005a30:	1d3b      	adds	r3, r7, #4
 8005a32:	220c      	movs	r2, #12
 8005a34:	4619      	mov	r1, r3
 8005a36:	4807      	ldr	r0, [pc, #28]	; (8005a54 <MX_TIM3_Init+0x100>)
 8005a38:	f7fe fac4 	bl	8003fc4 <HAL_TIM_PWM_ConfigChannel>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8005a42:	f000 fa3b 	bl	8005ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005a46:	4803      	ldr	r0, [pc, #12]	; (8005a54 <MX_TIM3_Init+0x100>)
 8005a48:	f004 fba2 	bl	800a190 <HAL_TIM_MspPostInit>

}
 8005a4c:	bf00      	nop
 8005a4e:	3728      	adds	r7, #40	; 0x28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	200002cc 	.word	0x200002cc
 8005a58:	40000400 	.word	0x40000400

08005a5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
 8005a6c:	609a      	str	r2, [r3, #8]
 8005a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a70:	463b      	mov	r3, r7
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005a78:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <MX_TIM4_Init+0x94>)
 8005a7a:	4a1e      	ldr	r2, [pc, #120]	; (8005af4 <MX_TIM4_Init+0x98>)
 8005a7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8005a7e:	4b1c      	ldr	r3, [pc, #112]	; (8005af0 <MX_TIM4_Init+0x94>)
 8005a80:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005a84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a86:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <MX_TIM4_Init+0x94>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005a8c:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <MX_TIM4_Init+0x94>)
 8005a8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a94:	4b16      	ldr	r3, [pc, #88]	; (8005af0 <MX_TIM4_Init+0x94>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a9a:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <MX_TIM4_Init+0x94>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005aa0:	4813      	ldr	r0, [pc, #76]	; (8005af0 <MX_TIM4_Init+0x94>)
 8005aa2:	f7fd fff3 	bl	8003a8c <HAL_TIM_Base_Init>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005aac:	f000 fa06 	bl	8005ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005ab6:	f107 0308 	add.w	r3, r7, #8
 8005aba:	4619      	mov	r1, r3
 8005abc:	480c      	ldr	r0, [pc, #48]	; (8005af0 <MX_TIM4_Init+0x94>)
 8005abe:	f7fe fb3f 	bl	8004140 <HAL_TIM_ConfigClockSource>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005ac8:	f000 f9f8 	bl	8005ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005acc:	2300      	movs	r3, #0
 8005ace:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4805      	ldr	r0, [pc, #20]	; (8005af0 <MX_TIM4_Init+0x94>)
 8005ada:	f7fe feb1 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005ae4:	f000 f9ea 	bl	8005ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005ae8:	bf00      	nop
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20000210 	.word	0x20000210
 8005af4:	40000800 	.word	0x40000800

08005af8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005afc:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <MX_USART1_UART_Init+0x4c>)
 8005afe:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <MX_USART1_UART_Init+0x50>)
 8005b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005b02:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <MX_USART1_UART_Init+0x4c>)
 8005b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005b0a:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <MX_USART1_UART_Init+0x4c>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b10:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <MX_USART1_UART_Init+0x4c>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <MX_USART1_UART_Init+0x4c>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <MX_USART1_UART_Init+0x4c>)
 8005b1e:	220c      	movs	r2, #12
 8005b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b22:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <MX_USART1_UART_Init+0x4c>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b28:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <MX_USART1_UART_Init+0x4c>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005b2e:	4805      	ldr	r0, [pc, #20]	; (8005b44 <MX_USART1_UART_Init+0x4c>)
 8005b30:	f7fe fef6 	bl	8004920 <HAL_UART_Init>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005b3a:	f000 f9bf 	bl	8005ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005b3e:	bf00      	nop
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	2000035c 	.word	0x2000035c
 8005b48:	40013800 	.word	0x40013800

08005b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b50:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <MX_USART2_UART_Init+0x4c>)
 8005b52:	4a12      	ldr	r2, [pc, #72]	; (8005b9c <MX_USART2_UART_Init+0x50>)
 8005b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <MX_USART2_UART_Init+0x4c>)
 8005b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <MX_USART2_UART_Init+0x4c>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b64:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <MX_USART2_UART_Init+0x4c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <MX_USART2_UART_Init+0x4c>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b70:	4b09      	ldr	r3, [pc, #36]	; (8005b98 <MX_USART2_UART_Init+0x4c>)
 8005b72:	220c      	movs	r2, #12
 8005b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b76:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <MX_USART2_UART_Init+0x4c>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <MX_USART2_UART_Init+0x4c>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b82:	4805      	ldr	r0, [pc, #20]	; (8005b98 <MX_USART2_UART_Init+0x4c>)
 8005b84:	f7fe fecc 	bl	8004920 <HAL_UART_Init>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005b8e:	f000 f995 	bl	8005ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b92:	bf00      	nop
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200003a8 	.word	0x200003a8
 8005b9c:	40004400 	.word	0x40004400

08005ba0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005ba6:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <MX_DMA_Init+0x48>)
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	4a0f      	ldr	r2, [pc, #60]	; (8005be8 <MX_DMA_Init+0x48>)
 8005bac:	f043 0301 	orr.w	r3, r3, #1
 8005bb0:	6153      	str	r3, [r2, #20]
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <MX_DMA_Init+0x48>)
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	200f      	movs	r0, #15
 8005bc4:	f7fb fc2b 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005bc8:	200f      	movs	r0, #15
 8005bca:	f7fb fc44 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	2010      	movs	r0, #16
 8005bd4:	f7fb fc23 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005bd8:	2010      	movs	r0, #16
 8005bda:	f7fb fc3c 	bl	8001456 <HAL_NVIC_EnableIRQ>

}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40021000 	.word	0x40021000

08005bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf2:	f107 0310 	add.w	r3, r7, #16
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
 8005bfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c00:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <MX_GPIO_Init+0xd4>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	4a2e      	ldr	r2, [pc, #184]	; (8005cc0 <MX_GPIO_Init+0xd4>)
 8005c06:	f043 0320 	orr.w	r3, r3, #32
 8005c0a:	6193      	str	r3, [r2, #24]
 8005c0c:	4b2c      	ldr	r3, [pc, #176]	; (8005cc0 <MX_GPIO_Init+0xd4>)
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c18:	4b29      	ldr	r3, [pc, #164]	; (8005cc0 <MX_GPIO_Init+0xd4>)
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	4a28      	ldr	r2, [pc, #160]	; (8005cc0 <MX_GPIO_Init+0xd4>)
 8005c1e:	f043 0304 	orr.w	r3, r3, #4
 8005c22:	6193      	str	r3, [r2, #24]
 8005c24:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <MX_GPIO_Init+0xd4>)
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c30:	4b23      	ldr	r3, [pc, #140]	; (8005cc0 <MX_GPIO_Init+0xd4>)
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <MX_GPIO_Init+0xd4>)
 8005c36:	f043 0308 	orr.w	r3, r3, #8
 8005c3a:	6193      	str	r3, [r2, #24]
 8005c3c:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <MX_GPIO_Init+0xd4>)
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CSN_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f241 0130 	movw	r1, #4144	; 0x1030
 8005c4e:	481d      	ldr	r0, [pc, #116]	; (8005cc4 <MX_GPIO_Init+0xd8>)
 8005c50:	f7fc f814 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8005c54:	2200      	movs	r2, #0
 8005c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c5a:	481b      	ldr	r0, [pc, #108]	; (8005cc8 <MX_GPIO_Init+0xdc>)
 8005c5c:	f7fc f80e 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CSN_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|LED2_Pin|LED1_Pin;
 8005c60:	f241 0330 	movw	r3, #4144	; 0x1030
 8005c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c66:	2301      	movs	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c72:	f107 0310 	add.w	r3, r7, #16
 8005c76:	4619      	mov	r1, r3
 8005c78:	4812      	ldr	r0, [pc, #72]	; (8005cc4 <MX_GPIO_Init+0xd8>)
 8005c7a:	f7fb fea5 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8005c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c84:	2301      	movs	r3, #1
 8005c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8005c90:	f107 0310 	add.w	r3, r7, #16
 8005c94:	4619      	mov	r1, r3
 8005c96:	480c      	ldr	r0, [pc, #48]	; (8005cc8 <MX_GPIO_Init+0xdc>)
 8005c98:	f7fb fe96 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 8005c9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005caa:	f107 0310 	add.w	r3, r7, #16
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4804      	ldr	r0, [pc, #16]	; (8005cc4 <MX_GPIO_Init+0xd8>)
 8005cb2:	f7fb fe89 	bl	80019c8 <HAL_GPIO_Init>

}
 8005cb6:	bf00      	nop
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40010c00 	.word	0x40010c00
 8005cc8:	40010800 	.word	0x40010800

08005ccc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b089      	sub	sp, #36	; 0x24
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t start = HAL_GetTick();
 8005cd4:	f7fb faa0 	bl	8001218 <HAL_GetTick>
 8005cd8:	6178      	str	r0, [r7, #20]

  if (htim->Instance == htim4.Instance)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b37      	ldr	r3, [pc, #220]	; (8005dbc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d15f      	bne.n	8005da6 <HAL_TIM_PeriodElapsedCallback+0xda>
  {
    RX_data();
 8005ce6:	f004 f939 	bl	8009f5c <RX_data>
    start = HAL_GetTick();
 8005cea:	f7fb fa95 	bl	8001218 <HAL_GetTick>
 8005cee:	6178      	str	r0, [r7, #20]
    readAll(&hi2c1, &MPU9255);
 8005cf0:	4933      	ldr	r1, [pc, #204]	; (8005dc0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005cf2:	4834      	ldr	r0, [pc, #208]	; (8005dc4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8005cf4:	f000 fa48 	bl	8006188 <readAll>
    uint32_t time = HAL_GetTick() - start;
 8005cf8:	f7fb fa8e 	bl	8001218 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	613b      	str	r3, [r7, #16]

    pid_roll(payload_packet.roll, MPU9255.roll, MPU9255.GyroX, &pid);
 8005d04:	4b30      	ldr	r3, [pc, #192]	; (8005dc8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	b298      	uxth	r0, r3
 8005d0a:	4b2d      	ldr	r3, [pc, #180]	; (8005dc0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005d0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005d0e:	4b2c      	ldr	r3, [pc, #176]	; (8005dc0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	4b2e      	ldr	r3, [pc, #184]	; (8005dcc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005d14:	f004 f808 	bl	8009d28 <pid_roll>
    //pid_pitch(payload_packet.pitch, MPU9255.pitch, MPU9255.GyroY, &pid);
  //  pid_yaw(payload_packet.yaw, MPU9255.GyroZ, &pid);

    // value PWM
    calculate_motor_output(&esc_right, &esc_left, &servo_right, &servo_left, payload_packet.throttle, &pid);
 8005d18:	4b2b      	ldr	r3, [pc, #172]	; (8005dc8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	4a2b      	ldr	r2, [pc, #172]	; (8005dcc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005d20:	9201      	str	r2, [sp, #4]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	4b2a      	ldr	r3, [pc, #168]	; (8005dd0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8005d26:	4a2b      	ldr	r2, [pc, #172]	; (8005dd4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005d28:	492b      	ldr	r1, [pc, #172]	; (8005dd8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8005d2a:	482c      	ldr	r0, [pc, #176]	; (8005ddc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8005d2c:	f000 f8f6 	bl	8005f1c <calculate_motor_output>

//     htim3.Instance->CCR1 = servo_right; //vang
//     htim3.Instance->CCR2 = servo_left; //trang
     htim3.Instance->CCR4 = esc_right; // trang
 8005d30:	4b2a      	ldr	r3, [pc, #168]	; (8005ddc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8005d32:	881a      	ldrh	r2, [r3, #0]
 8005d34:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
     htim3.Instance->CCR3 = esc_left;  // vang
 8005d3a:	4b27      	ldr	r3, [pc, #156]	; (8005dd8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8005d3c:	881a      	ldrh	r2, [r3, #0]
 8005d3e:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	63da      	str	r2, [r3, #60]	; 0x3c

    // send to GUI
   // q_Roll_angle = MPU9255.roll + 2000;
      q_Roll_angle = MPU9255.GyroX+ 2000;
 8005d44:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	4926      	ldr	r1, [pc, #152]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fa fee2 	bl	8000b14 <__addsf3>
 8005d50:	4603      	mov	r3, r0
 8005d52:	461a      	mov	r2, r3
 8005d54:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005d56:	601a      	str	r2, [r3, #0]

    sprintf((char *)f_trans, "%d%d", (uint16_t)(2000+set_point), (uint16_t)q_Roll_angle);
 8005d58:	4b24      	ldr	r3, [pc, #144]	; (8005dec <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4921      	ldr	r1, [pc, #132]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fa fed8 	bl	8000b14 <__addsf3>
 8005d64:	4603      	mov	r3, r0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fb f9de 	bl	8001128 <__aeabi_f2uiz>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	461c      	mov	r4, r3
 8005d72:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fb f9d6 	bl	8001128 <__aeabi_f2uiz>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	4622      	mov	r2, r4
 8005d82:	491b      	ldr	r1, [pc, #108]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8005d84:	481b      	ldr	r0, [pc, #108]	; (8005df4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005d86:	f004 fc1d 	bl	800a5c4 <siprintf>
    SendFrameData(f_trans, FRAME_DATA_TX, f_dest_trans, &f_dest_len_t);
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005d8e:	2108      	movs	r1, #8
 8005d90:	4818      	ldr	r0, [pc, #96]	; (8005df4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005d92:	f7ff fc35 	bl	8005600 <SendFrameData>
    HAL_UART_Transmit(&huart2, f_dest_trans, f_dest_len_t, 1000);
 8005d96:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005d98:	881a      	ldrh	r2, [r3, #0]
 8005d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d9e:	4917      	ldr	r1, [pc, #92]	; (8005dfc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005da0:	4817      	ldr	r0, [pc, #92]	; (8005e00 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005da2:	f7fe fe0a 	bl	80049ba <HAL_UART_Transmit>
  }
  uint32_t time = HAL_GetTick() - start;
 8005da6:	f7fb fa37 	bl	8001218 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	60fb      	str	r3, [r7, #12]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd90      	pop	{r4, r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000210 	.word	0x20000210
 8005dc0:	2000017c 	.word	0x2000017c
 8005dc4:	20000278 	.word	0x20000278
 8005dc8:	20000560 	.word	0x20000560
 8005dcc:	20000204 	.word	0x20000204
 8005dd0:	20000314 	.word	0x20000314
 8005dd4:	200003a2 	.word	0x200003a2
 8005dd8:	200003a0 	.word	0x200003a0
 8005ddc:	200003a6 	.word	0x200003a6
 8005de0:	200002cc 	.word	0x200002cc
 8005de4:	44fa0000 	.word	0x44fa0000
 8005de8:	200000d8 	.word	0x200000d8
 8005dec:	200000d0 	.word	0x200000d0
 8005df0:	0800c604 	.word	0x0800c604
 8005df4:	200003ec 	.word	0x200003ec
 8005df8:	200000d4 	.word	0x200000d4
 8005dfc:	20000258 	.word	0x20000258
 8005e00:	200003a8 	.word	0x200003a8

08005e04 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	807b      	strh	r3, [r7, #2]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei, FRAME_DATA_RX_HANDLE);
 8005e10:	2224      	movs	r2, #36	; 0x24
 8005e12:	491d      	ldr	r1, [pc, #116]	; (8005e88 <HAL_UARTEx_RxEventCallback+0x84>)
 8005e14:	481d      	ldr	r0, [pc, #116]	; (8005e8c <HAL_UARTEx_RxEventCallback+0x88>)
 8005e16:	f7fe fe62 	bl	8004ade <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x8c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <HAL_UARTEx_RxEventCallback+0x8c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0204 	bic.w	r2, r2, #4
 8005e28:	601a      	str	r2, [r3, #0]
  receive_value(f_recei, (uint8_t *)&pid_para, Size);
 8005e2a:	887b      	ldrh	r3, [r7, #2]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4918      	ldr	r1, [pc, #96]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e32:	4815      	ldr	r0, [pc, #84]	; (8005e88 <HAL_UARTEx_RxEventCallback+0x84>)
 8005e34:	f7ff fc47 	bl	80056c6 <receive_value>

  Kp_rate_roll = pid_para.Kp_p;
 8005e38:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4a16      	ldr	r2, [pc, #88]	; (8005e98 <HAL_UARTEx_RxEventCallback+0x94>)
 8005e3e:	6013      	str	r3, [r2, #0]
  Ki_rate_roll = pid_para.Ki_p;
 8005e40:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	4a15      	ldr	r2, [pc, #84]	; (8005e9c <HAL_UARTEx_RxEventCallback+0x98>)
 8005e46:	6013      	str	r3, [r2, #0]
  Kd_rate_roll = pid_para.Kd_p;
 8005e48:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	4a14      	ldr	r2, [pc, #80]	; (8005ea0 <HAL_UARTEx_RxEventCallback+0x9c>)
 8005e4e:	6013      	str	r3, [r2, #0]

  Kp_angle_roll = pid_para.Kp_r;
 8005e50:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a13      	ldr	r2, [pc, #76]	; (8005ea4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8005e56:	6013      	str	r3, [r2, #0]
  Ki_angle_roll = pid_para.Ki_r;
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	4a12      	ldr	r2, [pc, #72]	; (8005ea8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8005e5e:	6013      	str	r3, [r2, #0]
  Kd_angle_roll = pid_para.Kd_r;
 8005e60:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	4a11      	ldr	r2, [pc, #68]	; (8005eac <HAL_UARTEx_RxEventCallback+0xa8>)
 8005e66:	6013      	str	r3, [r2, #0]

  MOTOR_LEFT_OFFSET = pid_para.off_motor_l;
 8005e68:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	4a10      	ldr	r2, [pc, #64]	; (8005eb0 <HAL_UARTEx_RxEventCallback+0xac>)
 8005e6e:	6013      	str	r3, [r2, #0]
  MOTOR_RIGHT_OFFSET = pid_para.off_motor_r;
 8005e70:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	4a0f      	ldr	r2, [pc, #60]	; (8005eb4 <HAL_UARTEx_RxEventCallback+0xb0>)
 8005e76:	6013      	str	r3, [r2, #0]
  set_point =  pid_para.setpoint;
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <HAL_UARTEx_RxEventCallback+0x90>)
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	4a0e      	ldr	r2, [pc, #56]	; (8005eb8 <HAL_UARTEx_RxEventCallback+0xb4>)
 8005e7e:	6013      	str	r3, [r2, #0]
  //  f_dest_len_r = Size;
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	200003f4 	.word	0x200003f4
 8005e8c:	200003a8 	.word	0x200003a8
 8005e90:	20000138 	.word	0x20000138
 8005e94:	20000418 	.word	0x20000418
 8005e98:	200000c4 	.word	0x200000c4
 8005e9c:	200000c8 	.word	0x200000c8
 8005ea0:	200000cc 	.word	0x200000cc
 8005ea4:	200000b8 	.word	0x200000b8
 8005ea8:	200000bc 	.word	0x200000bc
 8005eac:	200000c0 	.word	0x200000c0
 8005eb0:	2000000c 	.word	0x2000000c
 8005eb4:	20000008 	.word	0x20000008
 8005eb8:	200000d0 	.word	0x200000d0

08005ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005ec0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005ec2:	e7fe      	b.n	8005ec2 <Error_Handler+0x6>

08005ec4 <map>:
extern volatile float MOTOR_RIGHT_OFFSET ;
extern volatile float MOTOR_LEFT_OFFSET ;
#endif

static int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
 8005ec4:	b490      	push	{r4, r7}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	80fb      	strh	r3, [r7, #6]
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	80bb      	strh	r3, [r7, #4]
 8005eda:	460b      	mov	r3, r1
 8005edc:	807b      	strh	r3, [r7, #2]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005ee2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ee6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8005ef0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005ef4:	1a8a      	subs	r2, r1, r2
 8005ef6:	fb02 f203 	mul.w	r2, r2, r3
 8005efa:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005efe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f02:	1acb      	subs	r3, r1, r3
 8005f04:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	883b      	ldrh	r3, [r7, #0]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	b21b      	sxth	r3, r3
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc90      	pop	{r4, r7}
 8005f1a:	4770      	bx	lr

08005f1c <calculate_motor_output>:

void calculate_motor_output(uint16_t *esc_right, uint16_t *esc_left, uint16_t *servo_right, uint16_t *servo_left, uint16_t throttle_rc, PID_t *pid)
{
 8005f1c:	b5b0      	push	{r4, r5, r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]

    // value PWM
    *esc_right = throttle_rc - pid->PID_roll_out  ;
 8005f2a:	8c3b      	ldrh	r3, [r7, #32]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa fea5 	bl	8000c7c <__aeabi_i2f>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7fa fde8 	bl	8000b10 <__aeabi_fsub>
 8005f40:	4603      	mov	r3, r0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fb f8f0 	bl	8001128 <__aeabi_f2uiz>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	801a      	strh	r2, [r3, #0]
    *esc_left = throttle_rc + pid->PID_roll_out ;
 8005f50:	8c3b      	ldrh	r3, [r7, #32]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fa fe92 	bl	8000c7c <__aeabi_i2f>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4610      	mov	r0, r2
 8005f62:	f7fa fdd7 	bl	8000b14 <__addsf3>
 8005f66:	4603      	mov	r3, r0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fb f8dd 	bl	8001128 <__aeabi_f2uiz>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	801a      	strh	r2, [r3, #0]
    *servo_right = 1450 + pid->PID_pitch_out - pid->PID_yaw_out;
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	494c      	ldr	r1, [pc, #304]	; (80060ac <calculate_motor_output+0x190>)
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fa fdc9 	bl	8000b14 <__addsf3>
 8005f82:	4603      	mov	r3, r0
 8005f84:	461a      	mov	r2, r3
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fa fdbf 	bl	8000b10 <__aeabi_fsub>
 8005f92:	4603      	mov	r3, r0
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fb f8c7 	bl	8001128 <__aeabi_f2uiz>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	801a      	strh	r2, [r3, #0]
    *servo_left = 1500 - pid->PID_pitch_out - pid->PID_yaw_out;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4841      	ldr	r0, [pc, #260]	; (80060b0 <calculate_motor_output+0x194>)
 8005faa:	f7fa fdb1 	bl	8000b10 <__aeabi_fsub>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f7fa fda9 	bl	8000b10 <__aeabi_fsub>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fb f8b1 	bl	8001128 <__aeabi_f2uiz>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	801a      	strh	r2, [r3, #0]

    if (*esc_right < 1000)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fd6:	d203      	bcs.n	8005fe0 <calculate_motor_output+0xc4>
    {
        *esc_right = 1000;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fde:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_right > 2000)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005fe8:	d903      	bls.n	8005ff2 <calculate_motor_output+0xd6>
    {
        *esc_right = 2000;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005ff0:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left < 1000)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ffa:	d203      	bcs.n	8006004 <calculate_motor_output+0xe8>
    {
        *esc_left = 1000;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006002:	801a      	strh	r2, [r3, #0]
    }
    if (*esc_left > 2000)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800600c:	d903      	bls.n	8006016 <calculate_motor_output+0xfa>
    {
        *esc_left = 2000;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006014:	801a      	strh	r2, [r3, #0]
    }

    //Gioi han Servo

    *esc_right = map(*esc_right, 1000, 2000, MOTOR_RIGHT_OFFSET, MOTOR_RIGHT_OFFSET + 900); // limited rate of motors
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b21c      	sxth	r4, r3
 800601c:	4b25      	ldr	r3, [pc, #148]	; (80060b4 <calculate_motor_output+0x198>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f7fb f85b 	bl	80010dc <__aeabi_f2iz>
 8006026:	4603      	mov	r3, r0
 8006028:	b21d      	sxth	r5, r3
 800602a:	4b22      	ldr	r3, [pc, #136]	; (80060b4 <calculate_motor_output+0x198>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4922      	ldr	r1, [pc, #136]	; (80060b8 <calculate_motor_output+0x19c>)
 8006030:	4618      	mov	r0, r3
 8006032:	f7fa fd6f 	bl	8000b14 <__addsf3>
 8006036:	4603      	mov	r3, r0
 8006038:	4618      	mov	r0, r3
 800603a:	f7fb f84f 	bl	80010dc <__aeabi_f2iz>
 800603e:	4603      	mov	r3, r0
 8006040:	b21b      	sxth	r3, r3
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	462b      	mov	r3, r5
 8006046:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800604a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800604e:	4620      	mov	r0, r4
 8006050:	f7ff ff38 	bl	8005ec4 <map>
 8006054:	4603      	mov	r3, r0
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	801a      	strh	r2, [r3, #0]
    *esc_left = map(*esc_left, 1000, 2000, MOTOR_LEFT_OFFSET, MOTOR_LEFT_OFFSET + 900);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b21c      	sxth	r4, r3
 8006062:	4b16      	ldr	r3, [pc, #88]	; (80060bc <calculate_motor_output+0x1a0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7fb f838 	bl	80010dc <__aeabi_f2iz>
 800606c:	4603      	mov	r3, r0
 800606e:	b21d      	sxth	r5, r3
 8006070:	4b12      	ldr	r3, [pc, #72]	; (80060bc <calculate_motor_output+0x1a0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4910      	ldr	r1, [pc, #64]	; (80060b8 <calculate_motor_output+0x19c>)
 8006076:	4618      	mov	r0, r3
 8006078:	f7fa fd4c 	bl	8000b14 <__addsf3>
 800607c:	4603      	mov	r3, r0
 800607e:	4618      	mov	r0, r3
 8006080:	f7fb f82c 	bl	80010dc <__aeabi_f2iz>
 8006084:	4603      	mov	r3, r0
 8006086:	b21b      	sxth	r3, r3
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	462b      	mov	r3, r5
 800608c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006090:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006094:	4620      	mov	r0, r4
 8006096:	f7ff ff15 	bl	8005ec4 <map>
 800609a:	4603      	mov	r3, r0
 800609c:	b29a      	uxth	r2, r3
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	801a      	strh	r2, [r3, #0]
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bdb0      	pop	{r4, r5, r7, pc}
 80060aa:	bf00      	nop
 80060ac:	44b54000 	.word	0x44b54000
 80060b0:	44bb8000 	.word	0x44bb8000
 80060b4:	20000008 	.word	0x20000008
 80060b8:	44610000 	.word	0x44610000
 80060bc:	2000000c 	.word	0x2000000c

080060c0 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af04      	add	r7, sp, #16
 80060c6:	6078      	str	r0, [r7, #4]
	printf("**************************** \r\n");
	printf("MPU9250 STM32 Implementation \r\n");
	printf("**************************** \r\n");
	#endif
	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 80060c8:	2364      	movs	r3, #100	; 0x64
 80060ca:	9302      	str	r3, [sp, #8]
 80060cc:	2301      	movs	r3, #1
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	f107 030f 	add.w	r3, r7, #15
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	2301      	movs	r3, #1
 80060d8:	2275      	movs	r2, #117	; 0x75
 80060da:	21d0      	movs	r1, #208	; 0xd0
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fc f831 	bl	8002144 <HAL_I2C_Mem_Read>

#if DEBUG_MPU
		printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);
#endif

	if (readData == 113) {
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	2b71      	cmp	r3, #113	; 0x71
 80060e6:	d13e      	bne.n	8006166 <MPU9255_Init+0xa6>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 80060e8:	4921      	ldr	r1, [pc, #132]	; (8006170 <MPU9255_Init+0xb0>)
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 fca4 	bl	8007a38 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 80060f0:	4a20      	ldr	r2, [pc, #128]	; (8006174 <MPU9255_Init+0xb4>)
 80060f2:	4921      	ldr	r1, [pc, #132]	; (8006178 <MPU9255_Init+0xb8>)
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 f869 	bl	80071cc <calibrateMPU9250>
		HAL_Delay(1000);
 80060fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060fe:	f7fb f895 	bl	800122c <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 ff80 	bl	8007008 <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 8006108:	2322      	movs	r3, #34	; 0x22
 800610a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 800610c:	2364      	movs	r3, #100	; 0x64
 800610e:	9302      	str	r3, [sp, #8]
 8006110:	2301      	movs	r3, #1
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	f107 030e 	add.w	r3, r7, #14
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	2301      	movs	r3, #1
 800611c:	2237      	movs	r2, #55	; 0x37
 800611e:	21d0      	movs	r1, #208	; 0xd0
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7fb ff15 	bl	8001f50 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 8006126:	2364      	movs	r3, #100	; 0x64
 8006128:	9302      	str	r3, [sp, #8]
 800612a:	2301      	movs	r3, #1
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	f107 030f 	add.w	r3, r7, #15
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	2301      	movs	r3, #1
 8006136:	2200      	movs	r2, #0
 8006138:	2118      	movs	r1, #24
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fc f802 	bl	8002144 <HAL_I2C_Mem_Read>
#if (DEBUG_MPU)
		printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);
#endif
		HAL_Delay(1000);
 8006140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006144:	f7fb f872 	bl	800122c <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 8006148:	490c      	ldr	r1, [pc, #48]	; (800617c <MPU9255_Init+0xbc>)
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fd14 	bl	8006b78 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 8006150:	4a0b      	ldr	r2, [pc, #44]	; (8006180 <MPU9255_Init+0xc0>)
 8006152:	490c      	ldr	r1, [pc, #48]	; (8006184 <MPU9255_Init+0xc4>)
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fde5 	bl	8006d24 <calibrateMag>

		HAL_Delay(1000);
 800615a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800615e:	f7fb f865 	bl	800122c <HAL_Delay>
		return 0;
 8006162:	2300      	movs	r3, #0
 8006164:	e000      	b.n	8006168 <MPU9255_Init+0xa8>
	}
	return 1; // Loop forever if communication doesn't happen
 8006166:	2301      	movs	r3, #1
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	2000045c 	.word	0x2000045c
 8006174:	200000f4 	.word	0x200000f4
 8006178:	200000e8 	.word	0x200000e8
 800617c:	200000dc 	.word	0x200000dc
 8006180:	2000010c 	.word	0x2000010c
 8006184:	20000100 	.word	0x20000100

08006188 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 8006188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800618c:	b08b      	sub	sp, #44	; 0x2c
 800618e:	af06      	add	r7, sp, #24
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8006194:	2364      	movs	r3, #100	; 0x64
 8006196:	9302      	str	r3, [sp, #8]
 8006198:	2301      	movs	r3, #1
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	f107 030f 	add.w	r3, r7, #15
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	2301      	movs	r3, #1
 80061a4:	223a      	movs	r2, #58	; 0x3a
 80061a6:	21d0      	movs	r1, #208	; 0xd0
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fb ffcb 	bl	8002144 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 8123 	beq.w	8006400 <readAll+0x278>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 80061ba:	4997      	ldr	r1, [pc, #604]	; (8006418 <readAll+0x290>)
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fc29 	bl	8006a14 <readAccelData>
		getAres();
 80061c2:	f000 fbf9 	bl	80069b8 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 80061c6:	4b94      	ldr	r3, [pc, #592]	; (8006418 <readAll+0x290>)
 80061c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fa fd55 	bl	8000c7c <__aeabi_i2f>
 80061d2:	4602      	mov	r2, r0
 80061d4:	4b91      	ldr	r3, [pc, #580]	; (800641c <readAll+0x294>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f7fa fda2 	bl	8000d24 <__aeabi_fmul>
 80061e0:	4603      	mov	r3, r0
 80061e2:	461a      	mov	r2, r3
 80061e4:	4b8e      	ldr	r3, [pc, #568]	; (8006420 <readAll+0x298>)
 80061e6:	601a      	str	r2, [r3, #0]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 80061e8:	4b8b      	ldr	r3, [pc, #556]	; (8006418 <readAll+0x290>)
 80061ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fa fd44 	bl	8000c7c <__aeabi_i2f>
 80061f4:	4602      	mov	r2, r0
 80061f6:	4b89      	ldr	r3, [pc, #548]	; (800641c <readAll+0x294>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fa fd91 	bl	8000d24 <__aeabi_fmul>
 8006202:	4603      	mov	r3, r0
 8006204:	461a      	mov	r2, r3
 8006206:	4b87      	ldr	r3, [pc, #540]	; (8006424 <readAll+0x29c>)
 8006208:	601a      	str	r2, [r3, #0]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 800620a:	4b83      	ldr	r3, [pc, #524]	; (8006418 <readAll+0x290>)
 800620c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006210:	4618      	mov	r0, r3
 8006212:	f7fa fd33 	bl	8000c7c <__aeabi_i2f>
 8006216:	4602      	mov	r2, r0
 8006218:	4b80      	ldr	r3, [pc, #512]	; (800641c <readAll+0x294>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f7fa fd80 	bl	8000d24 <__aeabi_fmul>
 8006224:	4603      	mov	r3, r0
 8006226:	461a      	mov	r2, r3
 8006228:	4b7f      	ldr	r3, [pc, #508]	; (8006428 <readAll+0x2a0>)
 800622a:	601a      	str	r2, [r3, #0]

		DataStruct->AccelX = ax;
 800622c:	4b7c      	ldr	r3, [pc, #496]	; (8006420 <readAll+0x298>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8006234:	4b7b      	ldr	r3, [pc, #492]	; (8006424 <readAll+0x29c>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 800623c:	4b7a      	ldr	r3, [pc, #488]	; (8006428 <readAll+0x2a0>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 8006244:	4979      	ldr	r1, [pc, #484]	; (800642c <readAll+0x2a4>)
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fc17 	bl	8006a7a <readGyroData>
		getGres();
 800624c:	f000 fb82 	bl	8006954 <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8006250:	4b76      	ldr	r3, [pc, #472]	; (800642c <readAll+0x2a4>)
 8006252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006256:	4618      	mov	r0, r3
 8006258:	f7fa fd10 	bl	8000c7c <__aeabi_i2f>
 800625c:	4602      	mov	r2, r0
 800625e:	4b74      	ldr	r3, [pc, #464]	; (8006430 <readAll+0x2a8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4619      	mov	r1, r3
 8006264:	4610      	mov	r0, r2
 8006266:	f7fa fd5d 	bl	8000d24 <__aeabi_fmul>
 800626a:	4603      	mov	r3, r0
 800626c:	461a      	mov	r2, r3
 800626e:	4b71      	ldr	r3, [pc, #452]	; (8006434 <readAll+0x2ac>)
 8006270:	601a      	str	r2, [r3, #0]
		gy = (float)gyroCount[1]*gRes;
 8006272:	4b6e      	ldr	r3, [pc, #440]	; (800642c <readAll+0x2a4>)
 8006274:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006278:	4618      	mov	r0, r3
 800627a:	f7fa fcff 	bl	8000c7c <__aeabi_i2f>
 800627e:	4602      	mov	r2, r0
 8006280:	4b6b      	ldr	r3, [pc, #428]	; (8006430 <readAll+0x2a8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f7fa fd4c 	bl	8000d24 <__aeabi_fmul>
 800628c:	4603      	mov	r3, r0
 800628e:	461a      	mov	r2, r3
 8006290:	4b69      	ldr	r3, [pc, #420]	; (8006438 <readAll+0x2b0>)
 8006292:	601a      	str	r2, [r3, #0]
		gz = (float)gyroCount[2]*gRes;
 8006294:	4b65      	ldr	r3, [pc, #404]	; (800642c <readAll+0x2a4>)
 8006296:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800629a:	4618      	mov	r0, r3
 800629c:	f7fa fcee 	bl	8000c7c <__aeabi_i2f>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4b63      	ldr	r3, [pc, #396]	; (8006430 <readAll+0x2a8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f7fa fd3b 	bl	8000d24 <__aeabi_fmul>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b62      	ldr	r3, [pc, #392]	; (800643c <readAll+0x2b4>)
 80062b4:	601a      	str	r2, [r3, #0]

		DataStruct->GyroX = gx;
 80062b6:	4b5f      	ldr	r3, [pc, #380]	; (8006434 <readAll+0x2ac>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 80062be:	4b5e      	ldr	r3, [pc, #376]	; (8006438 <readAll+0x2b0>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 80062c6:	4b5d      	ldr	r3, [pc, #372]	; (800643c <readAll+0x2b4>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 80062ce:	495c      	ldr	r1, [pc, #368]	; (8006440 <readAll+0x2b8>)
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fc05 	bl	8006ae0 <readMagData>
		getMres();
 80062d6:	f000 fb1f 	bl	8006918 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 80062da:	4b59      	ldr	r3, [pc, #356]	; (8006440 <readAll+0x2b8>)
 80062dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fa fccb 	bl	8000c7c <__aeabi_i2f>
 80062e6:	4602      	mov	r2, r0
 80062e8:	4b56      	ldr	r3, [pc, #344]	; (8006444 <readAll+0x2bc>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f7fa fd18 	bl	8000d24 <__aeabi_fmul>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	4b53      	ldr	r3, [pc, #332]	; (8006448 <readAll+0x2c0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7fa fd10 	bl	8000d24 <__aeabi_fmul>
 8006304:	4603      	mov	r3, r0
 8006306:	461a      	mov	r2, r3
 8006308:	4b50      	ldr	r3, [pc, #320]	; (800644c <readAll+0x2c4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4619      	mov	r1, r3
 800630e:	4610      	mov	r0, r2
 8006310:	f7fa fbfe 	bl	8000b10 <__aeabi_fsub>
 8006314:	4603      	mov	r3, r0
 8006316:	461a      	mov	r2, r3
 8006318:	4b4d      	ldr	r3, [pc, #308]	; (8006450 <readAll+0x2c8>)
 800631a:	601a      	str	r2, [r3, #0]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 800631c:	4b48      	ldr	r3, [pc, #288]	; (8006440 <readAll+0x2b8>)
 800631e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006322:	4618      	mov	r0, r3
 8006324:	f7fa fcaa 	bl	8000c7c <__aeabi_i2f>
 8006328:	4602      	mov	r2, r0
 800632a:	4b46      	ldr	r3, [pc, #280]	; (8006444 <readAll+0x2bc>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f7fa fcf7 	bl	8000d24 <__aeabi_fmul>
 8006336:	4603      	mov	r3, r0
 8006338:	461a      	mov	r2, r3
 800633a:	4b43      	ldr	r3, [pc, #268]	; (8006448 <readAll+0x2c0>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f7fa fcef 	bl	8000d24 <__aeabi_fmul>
 8006346:	4603      	mov	r3, r0
 8006348:	461a      	mov	r2, r3
 800634a:	4b40      	ldr	r3, [pc, #256]	; (800644c <readAll+0x2c4>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f7fa fbdd 	bl	8000b10 <__aeabi_fsub>
 8006356:	4603      	mov	r3, r0
 8006358:	461a      	mov	r2, r3
 800635a:	4b3e      	ldr	r3, [pc, #248]	; (8006454 <readAll+0x2cc>)
 800635c:	601a      	str	r2, [r3, #0]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 800635e:	4b38      	ldr	r3, [pc, #224]	; (8006440 <readAll+0x2b8>)
 8006360:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006364:	4618      	mov	r0, r3
 8006366:	f7fa fc89 	bl	8000c7c <__aeabi_i2f>
 800636a:	4602      	mov	r2, r0
 800636c:	4b35      	ldr	r3, [pc, #212]	; (8006444 <readAll+0x2bc>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fa fcd6 	bl	8000d24 <__aeabi_fmul>
 8006378:	4603      	mov	r3, r0
 800637a:	461a      	mov	r2, r3
 800637c:	4b32      	ldr	r3, [pc, #200]	; (8006448 <readAll+0x2c0>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f7fa fcce 	bl	8000d24 <__aeabi_fmul>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	4b2f      	ldr	r3, [pc, #188]	; (800644c <readAll+0x2c4>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f7fa fbbc 	bl	8000b10 <__aeabi_fsub>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	4b2e      	ldr	r3, [pc, #184]	; (8006458 <readAll+0x2d0>)
 800639e:	601a      	str	r2, [r3, #0]
		mx *= magScale[0];
 80063a0:	4b2e      	ldr	r3, [pc, #184]	; (800645c <readAll+0x2d4>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	4b2a      	ldr	r3, [pc, #168]	; (8006450 <readAll+0x2c8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7fa fcba 	bl	8000d24 <__aeabi_fmul>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	4b26      	ldr	r3, [pc, #152]	; (8006450 <readAll+0x2c8>)
 80063b6:	601a      	str	r2, [r3, #0]
		my *= magScale[1];
 80063b8:	4b28      	ldr	r3, [pc, #160]	; (800645c <readAll+0x2d4>)
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	4b25      	ldr	r3, [pc, #148]	; (8006454 <readAll+0x2cc>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f7fa fcae 	bl	8000d24 <__aeabi_fmul>
 80063c8:	4603      	mov	r3, r0
 80063ca:	461a      	mov	r2, r3
 80063cc:	4b21      	ldr	r3, [pc, #132]	; (8006454 <readAll+0x2cc>)
 80063ce:	601a      	str	r2, [r3, #0]
		mz *= magScale[2];
 80063d0:	4b22      	ldr	r3, [pc, #136]	; (800645c <readAll+0x2d4>)
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	4b20      	ldr	r3, [pc, #128]	; (8006458 <readAll+0x2d0>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f7fa fca2 	bl	8000d24 <__aeabi_fmul>
 80063e0:	4603      	mov	r3, r0
 80063e2:	461a      	mov	r2, r3
 80063e4:	4b1c      	ldr	r3, [pc, #112]	; (8006458 <readAll+0x2d0>)
 80063e6:	601a      	str	r2, [r3, #0]

		DataStruct->MagX = mx;
 80063e8:	4b19      	ldr	r3, [pc, #100]	; (8006450 <readAll+0x2c8>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 80063f0:	4b18      	ldr	r3, [pc, #96]	; (8006454 <readAll+0x2cc>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 80063f8:	4b17      	ldr	r3, [pc, #92]	; (8006458 <readAll+0x2d0>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8006400:	f7fa ff0a 	bl	8001218 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	4b16      	ldr	r3, [pc, #88]	; (8006460 <readAll+0x2d8>)
 8006408:	601a      	str	r2, [r3, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 800640a:	4b15      	ldr	r3, [pc, #84]	; (8006460 <readAll+0x2d8>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4b15      	ldr	r3, [pc, #84]	; (8006464 <readAll+0x2dc>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	4618      	mov	r0, r3
 8006416:	e027      	b.n	8006468 <readAll+0x2e0>
 8006418:	20000454 	.word	0x20000454
 800641c:	20000490 	.word	0x20000490
 8006420:	2000048c 	.word	0x2000048c
 8006424:	200004d4 	.word	0x200004d4
 8006428:	20000478 	.word	0x20000478
 800642c:	2000047c 	.word	0x2000047c
 8006430:	200004ac 	.word	0x200004ac
 8006434:	200004d0 	.word	0x200004d0
 8006438:	20000474 	.word	0x20000474
 800643c:	200004a4 	.word	0x200004a4
 8006440:	200004bc 	.word	0x200004bc
 8006444:	200004cc 	.word	0x200004cc
 8006448:	200000dc 	.word	0x200000dc
 800644c:	20000100 	.word	0x20000100
 8006450:	200004d8 	.word	0x200004d8
 8006454:	20000484 	.word	0x20000484
 8006458:	200004b0 	.word	0x200004b0
 800645c:	2000010c 	.word	0x2000010c
 8006460:	20000124 	.word	0x20000124
 8006464:	20000120 	.word	0x20000120
 8006468:	f7fa fc04 	bl	8000c74 <__aeabi_ui2f>
 800646c:	4603      	mov	r3, r0
 800646e:	499c      	ldr	r1, [pc, #624]	; (80066e0 <readAll+0x558>)
 8006470:	4618      	mov	r0, r3
 8006472:	f7fa fd0b 	bl	8000e8c <__aeabi_fdiv>
 8006476:	4603      	mov	r3, r0
 8006478:	461a      	mov	r2, r3
 800647a:	4b9a      	ldr	r3, [pc, #616]	; (80066e4 <readAll+0x55c>)
 800647c:	601a      	str	r2, [r3, #0]
	lastUpdate = Now;
 800647e:	4b9a      	ldr	r3, [pc, #616]	; (80066e8 <readAll+0x560>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a9a      	ldr	r2, [pc, #616]	; (80066ec <readAll+0x564>)
 8006484:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 8006486:	4b9a      	ldr	r3, [pc, #616]	; (80066f0 <readAll+0x568>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b96      	ldr	r3, [pc, #600]	; (80066e4 <readAll+0x55c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f7fa fb3f 	bl	8000b14 <__addsf3>
 8006496:	4603      	mov	r3, r0
 8006498:	461a      	mov	r2, r3
 800649a:	4b95      	ldr	r3, [pc, #596]	; (80066f0 <readAll+0x568>)
 800649c:	601a      	str	r2, [r3, #0]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 800649e:	4b95      	ldr	r3, [pc, #596]	; (80066f4 <readAll+0x56c>)
 80064a0:	681c      	ldr	r4, [r3, #0]
 80064a2:	4b95      	ldr	r3, [pc, #596]	; (80066f8 <readAll+0x570>)
 80064a4:	681d      	ldr	r5, [r3, #0]
 80064a6:	4b95      	ldr	r3, [pc, #596]	; (80066fc <readAll+0x574>)
 80064a8:	681e      	ldr	r6, [r3, #0]
 80064aa:	4b95      	ldr	r3, [pc, #596]	; (8006700 <readAll+0x578>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7f9 ffb2 	bl	8000418 <__aeabi_f2d>
 80064b4:	a388      	add	r3, pc, #544	; (adr r3, 80066d8 <readAll+0x550>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f7fa f805 	bl	80004c8 <__aeabi_dmul>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4610      	mov	r0, r2
 80064c4:	4619      	mov	r1, r3
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	4b8e      	ldr	r3, [pc, #568]	; (8006704 <readAll+0x57c>)
 80064cc:	f7fa f926 	bl	800071c <__aeabi_ddiv>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4610      	mov	r0, r2
 80064d6:	4619      	mov	r1, r3
 80064d8:	f7fa fac6 	bl	8000a68 <__aeabi_d2f>
 80064dc:	4681      	mov	r9, r0
 80064de:	4b8a      	ldr	r3, [pc, #552]	; (8006708 <readAll+0x580>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7f9 ff98 	bl	8000418 <__aeabi_f2d>
 80064e8:	a37b      	add	r3, pc, #492	; (adr r3, 80066d8 <readAll+0x550>)
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f7f9 ffeb 	bl	80004c8 <__aeabi_dmul>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4610      	mov	r0, r2
 80064f8:	4619      	mov	r1, r3
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	4b81      	ldr	r3, [pc, #516]	; (8006704 <readAll+0x57c>)
 8006500:	f7fa f90c 	bl	800071c <__aeabi_ddiv>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4610      	mov	r0, r2
 800650a:	4619      	mov	r1, r3
 800650c:	f7fa faac 	bl	8000a68 <__aeabi_d2f>
 8006510:	4680      	mov	r8, r0
 8006512:	4b7e      	ldr	r3, [pc, #504]	; (800670c <readAll+0x584>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f7f9 ff7e 	bl	8000418 <__aeabi_f2d>
 800651c:	a36e      	add	r3, pc, #440	; (adr r3, 80066d8 <readAll+0x550>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f7f9 ffd1 	bl	80004c8 <__aeabi_dmul>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4610      	mov	r0, r2
 800652c:	4619      	mov	r1, r3
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	4b74      	ldr	r3, [pc, #464]	; (8006704 <readAll+0x57c>)
 8006534:	f7fa f8f2 	bl	800071c <__aeabi_ddiv>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4610      	mov	r0, r2
 800653e:	4619      	mov	r1, r3
 8006540:	f7fa fa92 	bl	8000a68 <__aeabi_d2f>
 8006544:	4b72      	ldr	r3, [pc, #456]	; (8006710 <readAll+0x588>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a72      	ldr	r2, [pc, #456]	; (8006714 <readAll+0x58c>)
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	4972      	ldr	r1, [pc, #456]	; (8006718 <readAll+0x590>)
 800654e:	6809      	ldr	r1, [r1, #0]
 8006550:	9104      	str	r1, [sp, #16]
 8006552:	9203      	str	r2, [sp, #12]
 8006554:	9302      	str	r3, [sp, #8]
 8006556:	9001      	str	r0, [sp, #4]
 8006558:	f8cd 8000 	str.w	r8, [sp]
 800655c:	464b      	mov	r3, r9
 800655e:	4632      	mov	r2, r6
 8006560:	4629      	mov	r1, r5
 8006562:	4620      	mov	r0, r4
 8006564:	f001 ff44 	bl	80083f0 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8006568:	4b6c      	ldr	r3, [pc, #432]	; (800671c <readAll+0x594>)
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	4b6b      	ldr	r3, [pc, #428]	; (800671c <readAll+0x594>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	4619      	mov	r1, r3
 8006572:	4610      	mov	r0, r2
 8006574:	f7fa fbd6 	bl	8000d24 <__aeabi_fmul>
 8006578:	4603      	mov	r3, r0
 800657a:	461c      	mov	r4, r3
 800657c:	4b67      	ldr	r3, [pc, #412]	; (800671c <readAll+0x594>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b66      	ldr	r3, [pc, #408]	; (800671c <readAll+0x594>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7fa fbcc 	bl	8000d24 <__aeabi_fmul>
 800658c:	4603      	mov	r3, r0
 800658e:	4619      	mov	r1, r3
 8006590:	4620      	mov	r0, r4
 8006592:	f7fa fabf 	bl	8000b14 <__addsf3>
 8006596:	4603      	mov	r3, r0
 8006598:	4619      	mov	r1, r3
 800659a:	4618      	mov	r0, r3
 800659c:	f7fa faba 	bl	8000b14 <__addsf3>
 80065a0:	4603      	mov	r3, r0
 80065a2:	461a      	mov	r2, r3
 80065a4:	4b5e      	ldr	r3, [pc, #376]	; (8006720 <readAll+0x598>)
 80065a6:	601a      	str	r2, [r3, #0]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 80065a8:	4b5c      	ldr	r3, [pc, #368]	; (800671c <readAll+0x594>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	4b5b      	ldr	r3, [pc, #364]	; (800671c <readAll+0x594>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4619      	mov	r1, r3
 80065b2:	4610      	mov	r0, r2
 80065b4:	f7fa fbb6 	bl	8000d24 <__aeabi_fmul>
 80065b8:	4603      	mov	r3, r0
 80065ba:	461c      	mov	r4, r3
 80065bc:	4b57      	ldr	r3, [pc, #348]	; (800671c <readAll+0x594>)
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	4b56      	ldr	r3, [pc, #344]	; (800671c <readAll+0x594>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f7fa fbac 	bl	8000d24 <__aeabi_fmul>
 80065cc:	4603      	mov	r3, r0
 80065ce:	4619      	mov	r1, r3
 80065d0:	4620      	mov	r0, r4
 80065d2:	f7fa fa9f 	bl	8000b14 <__addsf3>
 80065d6:	4603      	mov	r3, r0
 80065d8:	461c      	mov	r4, r3
 80065da:	4b50      	ldr	r3, [pc, #320]	; (800671c <readAll+0x594>)
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	4b4f      	ldr	r3, [pc, #316]	; (800671c <readAll+0x594>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	4619      	mov	r1, r3
 80065e4:	4610      	mov	r0, r2
 80065e6:	f7fa fb9d 	bl	8000d24 <__aeabi_fmul>
 80065ea:	4603      	mov	r3, r0
 80065ec:	4619      	mov	r1, r3
 80065ee:	4620      	mov	r0, r4
 80065f0:	f7fa fa8e 	bl	8000b10 <__aeabi_fsub>
 80065f4:	4603      	mov	r3, r0
 80065f6:	461c      	mov	r4, r3
 80065f8:	4b48      	ldr	r3, [pc, #288]	; (800671c <readAll+0x594>)
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	4b47      	ldr	r3, [pc, #284]	; (800671c <readAll+0x594>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	4619      	mov	r1, r3
 8006602:	4610      	mov	r0, r2
 8006604:	f7fa fb8e 	bl	8000d24 <__aeabi_fmul>
 8006608:	4603      	mov	r3, r0
 800660a:	4619      	mov	r1, r3
 800660c:	4620      	mov	r0, r4
 800660e:	f7fa fa7f 	bl	8000b10 <__aeabi_fsub>
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	4b43      	ldr	r3, [pc, #268]	; (8006724 <readAll+0x59c>)
 8006618:	601a      	str	r2, [r3, #0]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 800661a:	4b40      	ldr	r3, [pc, #256]	; (800671c <readAll+0x594>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b3f      	ldr	r3, [pc, #252]	; (800671c <readAll+0x594>)
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f7fa fb7d 	bl	8000d24 <__aeabi_fmul>
 800662a:	4603      	mov	r3, r0
 800662c:	461c      	mov	r4, r3
 800662e:	4b3b      	ldr	r3, [pc, #236]	; (800671c <readAll+0x594>)
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	4b3a      	ldr	r3, [pc, #232]	; (800671c <readAll+0x594>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f7fa fb73 	bl	8000d24 <__aeabi_fmul>
 800663e:	4603      	mov	r3, r0
 8006640:	4619      	mov	r1, r3
 8006642:	4620      	mov	r0, r4
 8006644:	f7fa fa66 	bl	8000b14 <__addsf3>
 8006648:	4603      	mov	r3, r0
 800664a:	4619      	mov	r1, r3
 800664c:	4618      	mov	r0, r3
 800664e:	f7fa fa61 	bl	8000b14 <__addsf3>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	4b34      	ldr	r3, [pc, #208]	; (8006728 <readAll+0x5a0>)
 8006658:	601a      	str	r2, [r3, #0]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 800665a:	4b30      	ldr	r3, [pc, #192]	; (800671c <readAll+0x594>)
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	4b2f      	ldr	r3, [pc, #188]	; (800671c <readAll+0x594>)
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	4619      	mov	r1, r3
 8006664:	4610      	mov	r0, r2
 8006666:	f7fa fb5d 	bl	8000d24 <__aeabi_fmul>
 800666a:	4603      	mov	r3, r0
 800666c:	461c      	mov	r4, r3
 800666e:	4b2b      	ldr	r3, [pc, #172]	; (800671c <readAll+0x594>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b2a      	ldr	r3, [pc, #168]	; (800671c <readAll+0x594>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7fa fb53 	bl	8000d24 <__aeabi_fmul>
 800667e:	4603      	mov	r3, r0
 8006680:	4619      	mov	r1, r3
 8006682:	4620      	mov	r0, r4
 8006684:	f7fa fa44 	bl	8000b10 <__aeabi_fsub>
 8006688:	4603      	mov	r3, r0
 800668a:	4619      	mov	r1, r3
 800668c:	4618      	mov	r0, r3
 800668e:	f7fa fa41 	bl	8000b14 <__addsf3>
 8006692:	4603      	mov	r3, r0
 8006694:	461a      	mov	r2, r3
 8006696:	4b25      	ldr	r3, [pc, #148]	; (800672c <readAll+0x5a4>)
 8006698:	601a      	str	r2, [r3, #0]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 800669a:	4b20      	ldr	r3, [pc, #128]	; (800671c <readAll+0x594>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b1f      	ldr	r3, [pc, #124]	; (800671c <readAll+0x594>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f7fa fb3d 	bl	8000d24 <__aeabi_fmul>
 80066aa:	4603      	mov	r3, r0
 80066ac:	461c      	mov	r4, r3
 80066ae:	4b1b      	ldr	r3, [pc, #108]	; (800671c <readAll+0x594>)
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	4b1a      	ldr	r3, [pc, #104]	; (800671c <readAll+0x594>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f7fa fb33 	bl	8000d24 <__aeabi_fmul>
 80066be:	4603      	mov	r3, r0
 80066c0:	4619      	mov	r1, r3
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7fa fa24 	bl	8000b10 <__aeabi_fsub>
 80066c8:	4603      	mov	r3, r0
 80066ca:	461c      	mov	r4, r3
 80066cc:	4b13      	ldr	r3, [pc, #76]	; (800671c <readAll+0x594>)
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	4b12      	ldr	r3, [pc, #72]	; (800671c <readAll+0x594>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	e02c      	b.n	8006730 <readAll+0x5a8>
 80066d6:	bf00      	nop
 80066d8:	35f80991 	.word	0x35f80991
 80066dc:	40092492 	.word	0x40092492
 80066e0:	447a0000 	.word	0x447a0000
 80066e4:	20000118 	.word	0x20000118
 80066e8:	20000124 	.word	0x20000124
 80066ec:	20000120 	.word	0x20000120
 80066f0:	2000011c 	.word	0x2000011c
 80066f4:	2000048c 	.word	0x2000048c
 80066f8:	200004d4 	.word	0x200004d4
 80066fc:	20000478 	.word	0x20000478
 8006700:	200004d0 	.word	0x200004d0
 8006704:	40668000 	.word	0x40668000
 8006708:	20000474 	.word	0x20000474
 800670c:	200004a4 	.word	0x200004a4
 8006710:	20000484 	.word	0x20000484
 8006714:	200004d8 	.word	0x200004d8
 8006718:	200004b0 	.word	0x200004b0
 800671c:	20000018 	.word	0x20000018
 8006720:	20000494 	.word	0x20000494
 8006724:	20000498 	.word	0x20000498
 8006728:	2000049c 	.word	0x2000049c
 800672c:	200004a0 	.word	0x200004a0
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f7fa faf6 	bl	8000d24 <__aeabi_fmul>
 8006738:	4603      	mov	r3, r0
 800673a:	4619      	mov	r1, r3
 800673c:	4620      	mov	r0, r4
 800673e:	f7fa f9e7 	bl	8000b10 <__aeabi_fsub>
 8006742:	4603      	mov	r3, r0
 8006744:	461c      	mov	r4, r3
 8006746:	4b62      	ldr	r3, [pc, #392]	; (80068d0 <readAll+0x748>)
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	4b61      	ldr	r3, [pc, #388]	; (80068d0 <readAll+0x748>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f7fa fae7 	bl	8000d24 <__aeabi_fmul>
 8006756:	4603      	mov	r3, r0
 8006758:	4619      	mov	r1, r3
 800675a:	4620      	mov	r0, r4
 800675c:	f7fa f9da 	bl	8000b14 <__addsf3>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	4b5b      	ldr	r3, [pc, #364]	; (80068d4 <readAll+0x74c>)
 8006766:	601a      	str	r2, [r3, #0]

	pitch = -asinf(a32);
 8006768:	4b5b      	ldr	r3, [pc, #364]	; (80068d8 <readAll+0x750>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f004 fc97 	bl	800b0a0 <asinf>
 8006772:	4603      	mov	r3, r0
 8006774:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006778:	4a58      	ldr	r2, [pc, #352]	; (80068dc <readAll+0x754>)
 800677a:	6013      	str	r3, [r2, #0]
	roll  = atan2f(a31, a33);
 800677c:	4b58      	ldr	r3, [pc, #352]	; (80068e0 <readAll+0x758>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4b54      	ldr	r3, [pc, #336]	; (80068d4 <readAll+0x74c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f004 fcd8 	bl	800b13c <atan2f>
 800678c:	4602      	mov	r2, r0
 800678e:	4b55      	ldr	r3, [pc, #340]	; (80068e4 <readAll+0x75c>)
 8006790:	601a      	str	r2, [r3, #0]
	yaw   = atan2f(a12, a22);
 8006792:	4b55      	ldr	r3, [pc, #340]	; (80068e8 <readAll+0x760>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4b55      	ldr	r3, [pc, #340]	; (80068ec <readAll+0x764>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f004 fccd 	bl	800b13c <atan2f>
 80067a2:	4602      	mov	r2, r0
 80067a4:	4b52      	ldr	r3, [pc, #328]	; (80068f0 <readAll+0x768>)
 80067a6:	601a      	str	r2, [r3, #0]
	pitch *= 180.0f / PI;
 80067a8:	4b4c      	ldr	r3, [pc, #304]	; (80068dc <readAll+0x754>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7f9 fe33 	bl	8000418 <__aeabi_f2d>
 80067b2:	a345      	add	r3, pc, #276	; (adr r3, 80068c8 <readAll+0x740>)
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f7f9 fe86 	bl	80004c8 <__aeabi_dmul>
 80067bc:	4603      	mov	r3, r0
 80067be:	460c      	mov	r4, r1
 80067c0:	4618      	mov	r0, r3
 80067c2:	4621      	mov	r1, r4
 80067c4:	f7fa f950 	bl	8000a68 <__aeabi_d2f>
 80067c8:	4602      	mov	r2, r0
 80067ca:	4b44      	ldr	r3, [pc, #272]	; (80068dc <readAll+0x754>)
 80067cc:	601a      	str	r2, [r3, #0]
	yaw   *= 180.0f / PI;
 80067ce:	4b48      	ldr	r3, [pc, #288]	; (80068f0 <readAll+0x768>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7f9 fe20 	bl	8000418 <__aeabi_f2d>
 80067d8:	a33b      	add	r3, pc, #236	; (adr r3, 80068c8 <readAll+0x740>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f7f9 fe73 	bl	80004c8 <__aeabi_dmul>
 80067e2:	4603      	mov	r3, r0
 80067e4:	460c      	mov	r4, r1
 80067e6:	4618      	mov	r0, r3
 80067e8:	4621      	mov	r1, r4
 80067ea:	f7fa f93d 	bl	8000a68 <__aeabi_d2f>
 80067ee:	4602      	mov	r2, r0
 80067f0:	4b3f      	ldr	r3, [pc, #252]	; (80068f0 <readAll+0x768>)
 80067f2:	601a      	str	r2, [r3, #0]
	yaw   += 5.53f; // Declination
 80067f4:	4b3e      	ldr	r3, [pc, #248]	; (80068f0 <readAll+0x768>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	493e      	ldr	r1, [pc, #248]	; (80068f4 <readAll+0x76c>)
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fa f98a 	bl	8000b14 <__addsf3>
 8006800:	4603      	mov	r3, r0
 8006802:	461a      	mov	r2, r3
 8006804:	4b3a      	ldr	r3, [pc, #232]	; (80068f0 <readAll+0x768>)
 8006806:	601a      	str	r2, [r3, #0]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 8006808:	4b39      	ldr	r3, [pc, #228]	; (80068f0 <readAll+0x768>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f04f 0100 	mov.w	r1, #0
 8006810:	4618      	mov	r0, r3
 8006812:	f7fa fc25 	bl	8001060 <__aeabi_fcmplt>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d009      	beq.n	8006830 <readAll+0x6a8>
 800681c:	4b34      	ldr	r3, [pc, #208]	; (80068f0 <readAll+0x768>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4935      	ldr	r1, [pc, #212]	; (80068f8 <readAll+0x770>)
 8006822:	4618      	mov	r0, r3
 8006824:	f7fa f976 	bl	8000b14 <__addsf3>
 8006828:	4603      	mov	r3, r0
 800682a:	461a      	mov	r2, r3
 800682c:	4b30      	ldr	r3, [pc, #192]	; (80068f0 <readAll+0x768>)
 800682e:	601a      	str	r2, [r3, #0]
	roll  *= 180.0f / PI;
 8006830:	4b2c      	ldr	r3, [pc, #176]	; (80068e4 <readAll+0x75c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f7f9 fdef 	bl	8000418 <__aeabi_f2d>
 800683a:	a323      	add	r3, pc, #140	; (adr r3, 80068c8 <readAll+0x740>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 fe42 	bl	80004c8 <__aeabi_dmul>
 8006844:	4603      	mov	r3, r0
 8006846:	460c      	mov	r4, r1
 8006848:	4618      	mov	r0, r3
 800684a:	4621      	mov	r1, r4
 800684c:	f7fa f90c 	bl	8000a68 <__aeabi_d2f>
 8006850:	4602      	mov	r2, r0
 8006852:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <readAll+0x75c>)
 8006854:	601a      	str	r2, [r3, #0]
	lin_ax = ax + a31;
 8006856:	4b29      	ldr	r3, [pc, #164]	; (80068fc <readAll+0x774>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b21      	ldr	r3, [pc, #132]	; (80068e0 <readAll+0x758>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4619      	mov	r1, r3
 8006860:	4610      	mov	r0, r2
 8006862:	f7fa f957 	bl	8000b14 <__addsf3>
 8006866:	4603      	mov	r3, r0
 8006868:	461a      	mov	r2, r3
 800686a:	4b25      	ldr	r3, [pc, #148]	; (8006900 <readAll+0x778>)
 800686c:	601a      	str	r2, [r3, #0]
	lin_ay = ay + a32;
 800686e:	4b25      	ldr	r3, [pc, #148]	; (8006904 <readAll+0x77c>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b19      	ldr	r3, [pc, #100]	; (80068d8 <readAll+0x750>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f7fa f94b 	bl	8000b14 <__addsf3>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	4b21      	ldr	r3, [pc, #132]	; (8006908 <readAll+0x780>)
 8006884:	601a      	str	r2, [r3, #0]
	lin_az = az - a33;
 8006886:	4b21      	ldr	r3, [pc, #132]	; (800690c <readAll+0x784>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <readAll+0x74c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f7fa f93d 	bl	8000b10 <__aeabi_fsub>
 8006896:	4603      	mov	r3, r0
 8006898:	461a      	mov	r2, r3
 800689a:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <readAll+0x788>)
 800689c:	601a      	str	r2, [r3, #0]


	DataStruct->yaw = yaw;
 800689e:	4b14      	ldr	r3, [pc, #80]	; (80068f0 <readAll+0x768>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 80068a6:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <readAll+0x754>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 80068ae:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <readAll+0x75c>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	629a      	str	r2, [r3, #40]	; 0x28
#if DEBUG_MPU
//	printf("Roll: %f		Pitch: %f		Yaz: %f\n",roll,pitch,yaw);
#endif
	sum = 0;
 80068b6:	4b17      	ldr	r3, [pc, #92]	; (8006914 <readAll+0x78c>)
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
	}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068c8:	d0051a32 	.word	0xd0051a32
 80068cc:	404ca2e8 	.word	0x404ca2e8
 80068d0:	20000018 	.word	0x20000018
 80068d4:	20000450 	.word	0x20000450
 80068d8:	200004a0 	.word	0x200004a0
 80068dc:	200004c4 	.word	0x200004c4
 80068e0:	2000049c 	.word	0x2000049c
 80068e4:	200004c8 	.word	0x200004c8
 80068e8:	20000494 	.word	0x20000494
 80068ec:	20000498 	.word	0x20000498
 80068f0:	200004b8 	.word	0x200004b8
 80068f4:	40b0f5c3 	.word	0x40b0f5c3
 80068f8:	43b40000 	.word	0x43b40000
 80068fc:	2000048c 	.word	0x2000048c
 8006900:	200004a8 	.word	0x200004a8
 8006904:	200004d4 	.word	0x200004d4
 8006908:	20000488 	.word	0x20000488
 800690c:	20000478 	.word	0x20000478
 8006910:	200004b4 	.word	0x200004b4
 8006914:	2000011c 	.word	0x2000011c

08006918 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  switch (Mscale)
 800691c:	4b09      	ldr	r3, [pc, #36]	; (8006944 <getMres+0x2c>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <getMres+0x12>
 8006924:	2b01      	cmp	r3, #1
 8006926:	d004      	beq.n	8006932 <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8006928:	e007      	b.n	800693a <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 800692a:	4b07      	ldr	r3, [pc, #28]	; (8006948 <getMres+0x30>)
 800692c:	4a07      	ldr	r2, [pc, #28]	; (800694c <getMres+0x34>)
 800692e:	601a      	str	r2, [r3, #0]
          break;
 8006930:	e003      	b.n	800693a <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <getMres+0x30>)
 8006934:	4a06      	ldr	r2, [pc, #24]	; (8006950 <getMres+0x38>)
 8006936:	601a      	str	r2, [r3, #0]
          break;
 8006938:	bf00      	nop
}
 800693a:	bf00      	nop
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20000012 	.word	0x20000012
 8006948:	200004cc 	.word	0x200004cc
 800694c:	40bfebff 	.word	0x40bfebff
 8006950:	3fbfebff 	.word	0x3fbfebff

08006954 <getGres>:

void getGres() {
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  switch (Gscale)
 8006958:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <getGres+0x4c>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b03      	cmp	r3, #3
 800695e:	d81b      	bhi.n	8006998 <getGres+0x44>
 8006960:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <getGres+0x14>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	08006979 	.word	0x08006979
 800696c:	08006981 	.word	0x08006981
 8006970:	08006989 	.word	0x08006989
 8006974:	08006991 	.word	0x08006991
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <getGres+0x50>)
 800697a:	4a0b      	ldr	r2, [pc, #44]	; (80069a8 <getGres+0x54>)
 800697c:	601a      	str	r2, [r3, #0]
          break;
 800697e:	e00b      	b.n	8006998 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 8006980:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <getGres+0x50>)
 8006982:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <getGres+0x58>)
 8006984:	601a      	str	r2, [r3, #0]
          break;
 8006986:	e007      	b.n	8006998 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <getGres+0x50>)
 800698a:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <getGres+0x5c>)
 800698c:	601a      	str	r2, [r3, #0]
          break;
 800698e:	e003      	b.n	8006998 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 8006990:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <getGres+0x50>)
 8006992:	4a08      	ldr	r2, [pc, #32]	; (80069b4 <getGres+0x60>)
 8006994:	601a      	str	r2, [r3, #0]
          break;
 8006996:	bf00      	nop
  }
}
 8006998:	bf00      	nop
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr
 80069a0:	20000010 	.word	0x20000010
 80069a4:	200004ac 	.word	0x200004ac
 80069a8:	3bfa0000 	.word	0x3bfa0000
 80069ac:	3c7a0000 	.word	0x3c7a0000
 80069b0:	3cfa0000 	.word	0x3cfa0000
 80069b4:	3d7a0000 	.word	0x3d7a0000

080069b8 <getAres>:

void getAres() {
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  switch (Ascale)
 80069bc:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <getAres+0x54>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d81f      	bhi.n	8006a04 <getAres+0x4c>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <getAres+0x14>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	080069e7 	.word	0x080069e7
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	080069fb 	.word	0x080069fb
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 80069dc:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <getAres+0x58>)
 80069de:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80069e2:	601a      	str	r2, [r3, #0]
          break;
 80069e4:	e00e      	b.n	8006a04 <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <getAres+0x58>)
 80069e8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80069ec:	601a      	str	r2, [r3, #0]
          break;
 80069ee:	e009      	b.n	8006a04 <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <getAres+0x58>)
 80069f2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80069f6:	601a      	str	r2, [r3, #0]
          break;
 80069f8:	e004      	b.n	8006a04 <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <getAres+0x58>)
 80069fc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8006a00:	601a      	str	r2, [r3, #0]
          break;
 8006a02:	bf00      	nop
  }
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr
 8006a0c:	20000011 	.word	0x20000011
 8006a10:	20000490 	.word	0x20000490

08006a14 <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af04      	add	r7, sp, #16
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8006a1e:	2364      	movs	r3, #100	; 0x64
 8006a20:	9302      	str	r3, [sp, #8]
 8006a22:	2306      	movs	r3, #6
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	f107 0308 	add.w	r3, r7, #8
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	223b      	movs	r2, #59	; 0x3b
 8006a30:	21d0      	movs	r1, #208	; 0xd0
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fb fb86 	bl	8002144 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8006a38:	7a3b      	ldrb	r3, [r7, #8]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	b21a      	sxth	r2, r3
 8006a3e:	7a7b      	ldrb	r3, [r7, #9]
 8006a40:	b21b      	sxth	r3, r3
 8006a42:	4313      	orrs	r3, r2
 8006a44:	b21a      	sxth	r2, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8006a4a:	7abb      	ldrb	r3, [r7, #10]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	b219      	sxth	r1, r3
 8006a50:	7afb      	ldrb	r3, [r7, #11]
 8006a52:	b21a      	sxth	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	3302      	adds	r3, #2
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	b212      	sxth	r2, r2
 8006a5c:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8006a5e:	7b3b      	ldrb	r3, [r7, #12]
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	b219      	sxth	r1, r3
 8006a64:	7b7b      	ldrb	r3, [r7, #13]
 8006a66:	b21a      	sxth	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	b212      	sxth	r2, r2
 8006a70:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b088      	sub	sp, #32
 8006a7e:	af04      	add	r7, sp, #16
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 8006a84:	2364      	movs	r3, #100	; 0x64
 8006a86:	9302      	str	r3, [sp, #8]
 8006a88:	2306      	movs	r3, #6
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	f107 0308 	add.w	r3, r7, #8
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	2301      	movs	r3, #1
 8006a94:	2243      	movs	r2, #67	; 0x43
 8006a96:	21d0      	movs	r1, #208	; 0xd0
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7fb fb53 	bl	8002144 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8006a9e:	7a3b      	ldrb	r3, [r7, #8]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	b21a      	sxth	r2, r3
 8006aa4:	7a7b      	ldrb	r3, [r7, #9]
 8006aa6:	b21b      	sxth	r3, r3
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	b21a      	sxth	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8006ab0:	7abb      	ldrb	r3, [r7, #10]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	b219      	sxth	r1, r3
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	b21a      	sxth	r2, r3
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	3302      	adds	r3, #2
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	b212      	sxth	r2, r2
 8006ac2:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 8006ac4:	7b3b      	ldrb	r3, [r7, #12]
 8006ac6:	021b      	lsls	r3, r3, #8
 8006ac8:	b219      	sxth	r1, r3
 8006aca:	7b7b      	ldrb	r3, [r7, #13]
 8006acc:	b21a      	sxth	r2, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	b212      	sxth	r2, r2
 8006ad6:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08a      	sub	sp, #40	; 0x28
 8006ae4:	af04      	add	r7, sp, #16
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 8006aea:	2364      	movs	r3, #100	; 0x64
 8006aec:	9302      	str	r3, [sp, #8]
 8006aee:	2301      	movs	r3, #1
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	f107 0316 	add.w	r3, r7, #22
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	2301      	movs	r3, #1
 8006afa:	2202      	movs	r2, #2
 8006afc:	2118      	movs	r1, #24
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fb fb20 	bl	8002144 <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 8006b04:	7dbb      	ldrb	r3, [r7, #22]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d030      	beq.n	8006b70 <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 8006b0e:	2364      	movs	r3, #100	; 0x64
 8006b10:	9302      	str	r3, [sp, #8]
 8006b12:	2307      	movs	r3, #7
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	f107 030c 	add.w	r3, r7, #12
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	2203      	movs	r2, #3
 8006b20:	2118      	movs	r1, #24
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb fb0e 	bl	8002144 <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 8006b28:	7cbb      	ldrb	r3, [r7, #18]
 8006b2a:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d11c      	bne.n	8006b70 <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 8006b36:	7b7b      	ldrb	r3, [r7, #13]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	b21a      	sxth	r2, r3
 8006b3c:	7b3b      	ldrb	r3, [r7, #12]
 8006b3e:	b21b      	sxth	r3, r3
 8006b40:	4313      	orrs	r3, r2
 8006b42:	b21a      	sxth	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	b219      	sxth	r1, r3
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	b21a      	sxth	r2, r3
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	3302      	adds	r3, #2
 8006b56:	430a      	orrs	r2, r1
 8006b58:	b212      	sxth	r2, r2
 8006b5a:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 8006b5c:	7c7b      	ldrb	r3, [r7, #17]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	b219      	sxth	r1, r3
 8006b62:	7c3b      	ldrb	r3, [r7, #16]
 8006b64:	b21a      	sxth	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	b212      	sxth	r2, r2
 8006b6e:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 8006b70:	bf00      	nop
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 8006b78:	b590      	push	{r4, r7, lr}
 8006b7a:	b089      	sub	sp, #36	; 0x24
 8006b7c:	af04      	add	r7, sp, #16
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 8006b86:	2364      	movs	r3, #100	; 0x64
 8006b88:	9302      	str	r3, [sp, #8]
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	f107 030f 	add.w	r3, r7, #15
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	2301      	movs	r3, #1
 8006b96:	220a      	movs	r2, #10
 8006b98:	2118      	movs	r1, #24
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fb f9d8 	bl	8001f50 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8006ba0:	2064      	movs	r0, #100	; 0x64
 8006ba2:	f7fa fb43 	bl	800122c <HAL_Delay>

  writeData = 0x0F;
 8006ba6:	230f      	movs	r3, #15
 8006ba8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 8006baa:	2364      	movs	r3, #100	; 0x64
 8006bac:	9302      	str	r3, [sp, #8]
 8006bae:	2301      	movs	r3, #1
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	f107 030f 	add.w	r3, r7, #15
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2301      	movs	r3, #1
 8006bba:	220a      	movs	r2, #10
 8006bbc:	2118      	movs	r1, #24
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb f9c6 	bl	8001f50 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8006bc4:	2064      	movs	r0, #100	; 0x64
 8006bc6:	f7fa fb31 	bl	800122c <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 8006bca:	2364      	movs	r3, #100	; 0x64
 8006bcc:	9302      	str	r3, [sp, #8]
 8006bce:	2303      	movs	r3, #3
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	f107 030c 	add.w	r3, r7, #12
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	2301      	movs	r3, #1
 8006bda:	2210      	movs	r2, #16
 8006bdc:	2118      	movs	r1, #24
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fb fab0 	bl	8002144 <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8006be4:	7b3b      	ldrb	r3, [r7, #12]
 8006be6:	3b80      	subs	r3, #128	; 0x80
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fa f847 	bl	8000c7c <__aeabi_i2f>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7f9 fc11 	bl	8000418 <__aeabi_f2d>
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	4b46      	ldr	r3, [pc, #280]	; (8006d14 <initAK8963+0x19c>)
 8006bfc:	f7f9 fd8e 	bl	800071c <__aeabi_ddiv>
 8006c00:	4603      	mov	r3, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	4618      	mov	r0, r3
 8006c06:	4621      	mov	r1, r4
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	4b42      	ldr	r3, [pc, #264]	; (8006d18 <initAK8963+0x1a0>)
 8006c0e:	f7f9 faa5 	bl	800015c <__adddf3>
 8006c12:	4603      	mov	r3, r0
 8006c14:	460c      	mov	r4, r1
 8006c16:	4618      	mov	r0, r3
 8006c18:	4621      	mov	r1, r4
 8006c1a:	f7f9 ff25 	bl	8000a68 <__aeabi_d2f>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 8006c24:	7b7b      	ldrb	r3, [r7, #13]
 8006c26:	3b80      	subs	r3, #128	; 0x80
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fa f827 	bl	8000c7c <__aeabi_i2f>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7f9 fbf1 	bl	8000418 <__aeabi_f2d>
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	4b36      	ldr	r3, [pc, #216]	; (8006d14 <initAK8963+0x19c>)
 8006c3c:	f7f9 fd6e 	bl	800071c <__aeabi_ddiv>
 8006c40:	4603      	mov	r3, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	4618      	mov	r0, r3
 8006c46:	4621      	mov	r1, r4
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	4b32      	ldr	r3, [pc, #200]	; (8006d18 <initAK8963+0x1a0>)
 8006c4e:	f7f9 fa85 	bl	800015c <__adddf3>
 8006c52:	4603      	mov	r3, r0
 8006c54:	460c      	mov	r4, r1
 8006c56:	4619      	mov	r1, r3
 8006c58:	4622      	mov	r2, r4
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	1d1c      	adds	r4, r3, #4
 8006c5e:	4608      	mov	r0, r1
 8006c60:	4611      	mov	r1, r2
 8006c62:	f7f9 ff01 	bl	8000a68 <__aeabi_d2f>
 8006c66:	4603      	mov	r3, r0
 8006c68:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	3b80      	subs	r3, #128	; 0x80
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fa f804 	bl	8000c7c <__aeabi_i2f>
 8006c74:	4603      	mov	r3, r0
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7f9 fbce 	bl	8000418 <__aeabi_f2d>
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	4b24      	ldr	r3, [pc, #144]	; (8006d14 <initAK8963+0x19c>)
 8006c82:	f7f9 fd4b 	bl	800071c <__aeabi_ddiv>
 8006c86:	4603      	mov	r3, r0
 8006c88:	460c      	mov	r4, r1
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	4b21      	ldr	r3, [pc, #132]	; (8006d18 <initAK8963+0x1a0>)
 8006c94:	f7f9 fa62 	bl	800015c <__adddf3>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	f103 0408 	add.w	r4, r3, #8
 8006ca6:	4608      	mov	r0, r1
 8006ca8:	4611      	mov	r1, r2
 8006caa:	f7f9 fedd 	bl	8000a68 <__aeabi_d2f>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	6023      	str	r3, [r4, #0]
	printf("Mag cal off Y: %f\r\n", destination[1]);
	printf("Mag cal off Z: %f\r\n", destination[2]);
	printf("-------------------------\r\n");
#endif

  writeData = 0x00;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 8006cb6:	2364      	movs	r3, #100	; 0x64
 8006cb8:	9302      	str	r3, [sp, #8]
 8006cba:	2301      	movs	r3, #1
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	f107 030f 	add.w	r3, r7, #15
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	220a      	movs	r2, #10
 8006cc8:	2118      	movs	r1, #24
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fb f940 	bl	8001f50 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8006cd0:	2064      	movs	r0, #100	; 0x64
 8006cd2:	f7fa faab 	bl	800122c <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 8006cd6:	4b11      	ldr	r3, [pc, #68]	; (8006d1c <initAK8963+0x1a4>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	b25a      	sxtb	r2, r3
 8006cde:	4b10      	ldr	r3, [pc, #64]	; (8006d20 <initAK8963+0x1a8>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b25b      	sxtb	r3, r3
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	b25b      	sxtb	r3, r3
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 8006cec:	2364      	movs	r3, #100	; 0x64
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	f107 030f 	add.w	r3, r7, #15
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	220a      	movs	r2, #10
 8006cfe:	2118      	movs	r1, #24
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fb f925 	bl	8001f50 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 8006d06:	200a      	movs	r0, #10
 8006d08:	f7fa fa90 	bl	800122c <HAL_Delay>

#if(DEBUG_MPU)
  printf("MAG Init Succesful! \r\n");
#endif
}
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd90      	pop	{r4, r7, pc}
 8006d14:	40700000 	.word	0x40700000
 8006d18:	3ff00000 	.word	0x3ff00000
 8006d1c:	20000012 	.word	0x20000012
 8006d20:	20000013 	.word	0x20000013

08006d24 <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8006d24:	b590      	push	{r4, r7, lr}
 8006d26:	b095      	sub	sp, #84	; 0x54
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d40:	2300      	movs	r3, #0
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d44:	2300      	movs	r3, #0
 8006d46:	643b      	str	r3, [r7, #64]	; 0x40
 8006d48:	2300      	movs	r3, #0
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d50:	2300      	movs	r3, #0
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8006d54:	4aa6      	ldr	r2, [pc, #664]	; (8006ff0 <calibrateMag+0x2cc>)
 8006d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d5e:	6018      	str	r0, [r3, #0]
 8006d60:	3304      	adds	r3, #4
 8006d62:	8019      	strh	r1, [r3, #0]
 8006d64:	4aa3      	ldr	r2, [pc, #652]	; (8006ff4 <calibrateMag+0x2d0>)
 8006d66:	f107 031c 	add.w	r3, r7, #28
 8006d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d6e:	6018      	str	r0, [r3, #0]
 8006d70:	3304      	adds	r3, #4
 8006d72:	8019      	strh	r1, [r3, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	82bb      	strh	r3, [r7, #20]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	82fb      	strh	r3, [r7, #22]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	833b      	strh	r3, [r7, #24]

#if (DEBUG_MPU)
  printf("Mag Calibration: Wave device in a figure eight until done!\r\n");
#endif
  HAL_Delay(4000);
 8006d80:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006d84:	f7fa fa52 	bl	800122c <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8006d88:	4b9b      	ldr	r3, [pc, #620]	; (8006ff8 <calibrateMag+0x2d4>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d102      	bne.n	8006d96 <calibrateMag+0x72>
 8006d90:	2380      	movs	r3, #128	; 0x80
 8006d92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 8006d96:	4b98      	ldr	r3, [pc, #608]	; (8006ff8 <calibrateMag+0x2d4>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b06      	cmp	r3, #6
 8006d9c:	d103      	bne.n	8006da6 <calibrateMag+0x82>
 8006d9e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8006da2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 8006da6:	2300      	movs	r3, #0
 8006da8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006dac:	e05d      	b.n	8006e6a <calibrateMag+0x146>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 8006dae:	f107 0314 	add.w	r3, r7, #20
 8006db2:	4619      	mov	r1, r3
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff fe93 	bl	8006ae0 <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 8006dba:	2300      	movs	r3, #0
 8006dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dbe:	e03e      	b.n	8006e3e <calibrateMag+0x11a>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8006dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006dc8:	4413      	add	r3, r2
 8006dca:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006dd6:	440b      	add	r3, r1
 8006dd8:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	dd0d      	ble.n	8006dfc <calibrateMag+0xd8>
 8006de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006de8:	4413      	add	r3, r2
 8006dea:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006df6:	440b      	add	r3, r1
 8006df8:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8006dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e04:	4413      	add	r3, r2
 8006e06:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006e12:	440b      	add	r3, r1
 8006e14:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	da0d      	bge.n	8006e38 <calibrateMag+0x114>
 8006e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e24:	4413      	add	r3, r2
 8006e26:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8006e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006e32:	440b      	add	r3, r1
 8006e34:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 8006e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	ddbd      	ble.n	8006dc0 <calibrateMag+0x9c>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8006e44:	4b6c      	ldr	r3, [pc, #432]	; (8006ff8 <calibrateMag+0x2d4>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d102      	bne.n	8006e52 <calibrateMag+0x12e>
 8006e4c:	2087      	movs	r0, #135	; 0x87
 8006e4e:	f7fa f9ed 	bl	800122c <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 8006e52:	4b69      	ldr	r3, [pc, #420]	; (8006ff8 <calibrateMag+0x2d4>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b06      	cmp	r3, #6
 8006e58:	d102      	bne.n	8006e60 <calibrateMag+0x13c>
 8006e5a:	200c      	movs	r0, #12
 8006e5c:	f7fa f9e6 	bl	800122c <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 8006e60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e64:	3301      	adds	r3, #1
 8006e66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006e6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d39b      	bcc.n	8006dae <calibrateMag+0x8a>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8006e76:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	0fda      	lsrs	r2, r3, #31
 8006e84:	4413      	add	r3, r2
 8006e86:	105b      	asrs	r3, r3, #1
 8006e88:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8006e8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006e94:	4413      	add	r3, r2
 8006e96:	0fda      	lsrs	r2, r3, #31
 8006e98:	4413      	add	r3, r2
 8006e9a:	105b      	asrs	r3, r3, #1
 8006e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8006e9e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	0fda      	lsrs	r2, r3, #31
 8006eac:	4413      	add	r3, r2
 8006eae:	105b      	asrs	r3, r3, #1
 8006eb0:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7f9 fee1 	bl	8000c7c <__aeabi_i2f>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	4b4f      	ldr	r3, [pc, #316]	; (8006ffc <calibrateMag+0x2d8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	f7f9 ff2e 	bl	8000d24 <__aeabi_fmul>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	461a      	mov	r2, r3
 8006ecc:	4b4c      	ldr	r3, [pc, #304]	; (8007000 <calibrateMag+0x2dc>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7f9 ff26 	bl	8000d24 <__aeabi_fmul>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8006ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7f9 feca 	bl	8000c7c <__aeabi_i2f>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4b44      	ldr	r3, [pc, #272]	; (8006ffc <calibrateMag+0x2d8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7f9 ff17 	bl	8000d24 <__aeabi_fmul>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4618      	mov	r0, r3
 8006efa:	4b41      	ldr	r3, [pc, #260]	; (8007000 <calibrateMag+0x2dc>)
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	1d1c      	adds	r4, r3, #4
 8006f02:	4611      	mov	r1, r2
 8006f04:	f7f9 ff0e 	bl	8000d24 <__aeabi_fmul>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8006f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7f9 feb4 	bl	8000c7c <__aeabi_i2f>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <calibrateMag+0x2d8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	f7f9 ff01 	bl	8000d24 <__aeabi_fmul>
 8006f22:	4603      	mov	r3, r0
 8006f24:	4618      	mov	r0, r3
 8006f26:	4b36      	ldr	r3, [pc, #216]	; (8007000 <calibrateMag+0x2dc>)
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f103 0408 	add.w	r4, r3, #8
 8006f30:	4611      	mov	r1, r2
 8006f32:	f7f9 fef7 	bl	8000d24 <__aeabi_fmul>
 8006f36:	4603      	mov	r3, r0
 8006f38:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8006f3a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	0fda      	lsrs	r2, r3, #31
 8006f48:	4413      	add	r3, r2
 8006f4a:	105b      	asrs	r3, r3, #1
 8006f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8006f4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006f52:	461a      	mov	r2, r3
 8006f54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	0fda      	lsrs	r2, r3, #31
 8006f5c:	4413      	add	r3, r2
 8006f5e:	105b      	asrs	r3, r3, #1
 8006f60:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8006f62:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006f66:	461a      	mov	r2, r3
 8006f68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	0fda      	lsrs	r2, r3, #31
 8006f70:	4413      	add	r3, r2
 8006f72:	105b      	asrs	r3, r3, #1
 8006f74:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8006f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	441a      	add	r2, r3
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7e:	4413      	add	r3, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7f9 fe7b 	bl	8000c7c <__aeabi_i2f>
 8006f86:	4603      	mov	r3, r0
 8006f88:	647b      	str	r3, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 8006f8a:	491e      	ldr	r1, [pc, #120]	; (8007004 <calibrateMag+0x2e0>)
 8006f8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006f8e:	f7f9 ff7d 	bl	8000e8c <__aeabi_fdiv>
 8006f92:	4603      	mov	r3, r0
 8006f94:	647b      	str	r3, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7f9 fe6f 	bl	8000c7c <__aeabi_i2f>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006fa4:	f7f9 ff72 	bl	8000e8c <__aeabi_fdiv>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7f9 fe62 	bl	8000c7c <__aeabi_i2f>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	1d1c      	adds	r4, r3, #4
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006fc2:	f7f9 ff63 	bl	8000e8c <__aeabi_fdiv>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8006fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7f9 fe55 	bl	8000c7c <__aeabi_i2f>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f103 0408 	add.w	r4, r3, #8
 8006fda:	4611      	mov	r1, r2
 8006fdc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006fde:	f7f9 ff55 	bl	8000e8c <__aeabi_fdiv>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	6023      	str	r3, [r4, #0]

#if (DEBUG_MPU)
    printf("Mag Calibration done!\r\n");
#endif
}
 8006fe6:	bf00      	nop
 8006fe8:	3754      	adds	r7, #84	; 0x54
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd90      	pop	{r4, r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	0800c60c 	.word	0x0800c60c
 8006ff4:	0800c614 	.word	0x0800c614
 8006ff8:	20000013 	.word	0x20000013
 8006ffc:	200004cc 	.word	0x200004cc
 8007000:	200000dc 	.word	0x200000dc
 8007004:	40400000 	.word	0x40400000

08007008 <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af04      	add	r7, sp, #16
 800700e:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8007010:	2300      	movs	r3, #0
 8007012:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8007014:	2364      	movs	r3, #100	; 0x64
 8007016:	9302      	str	r3, [sp, #8]
 8007018:	2301      	movs	r3, #1
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	f107 030e 	add.w	r3, r7, #14
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	2301      	movs	r3, #1
 8007024:	226b      	movs	r2, #107	; 0x6b
 8007026:	21d0      	movs	r1, #208	; 0xd0
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7fa ff91 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800702e:	2064      	movs	r0, #100	; 0x64
 8007030:	f7fa f8fc 	bl	800122c <HAL_Delay>

	writeData = 0x01;
 8007034:	2301      	movs	r3, #1
 8007036:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8007038:	2364      	movs	r3, #100	; 0x64
 800703a:	9302      	str	r3, [sp, #8]
 800703c:	2301      	movs	r3, #1
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	f107 030e 	add.w	r3, r7, #14
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	2301      	movs	r3, #1
 8007048:	226b      	movs	r2, #107	; 0x6b
 800704a:	21d0      	movs	r1, #208	; 0xd0
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7fa ff7f 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8007052:	2064      	movs	r0, #100	; 0x64
 8007054:	f7fa f8ea 	bl	800122c <HAL_Delay>

	writeData = 0x03;
 8007058:	2303      	movs	r3, #3
 800705a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 800705c:	2364      	movs	r3, #100	; 0x64
 800705e:	9302      	str	r3, [sp, #8]
 8007060:	2301      	movs	r3, #1
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	f107 030e 	add.w	r3, r7, #14
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2301      	movs	r3, #1
 800706c:	221a      	movs	r2, #26
 800706e:	21d0      	movs	r1, #208	; 0xd0
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fa ff6d 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8007076:	2064      	movs	r0, #100	; 0x64
 8007078:	f7fa f8d8 	bl	800122c <HAL_Delay>

	writeData = 0x04;
 800707c:	2304      	movs	r3, #4
 800707e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8007080:	2364      	movs	r3, #100	; 0x64
 8007082:	9302      	str	r3, [sp, #8]
 8007084:	2301      	movs	r3, #1
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	f107 030e 	add.w	r3, r7, #14
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	2301      	movs	r3, #1
 8007090:	2219      	movs	r2, #25
 8007092:	21d0      	movs	r1, #208	; 0xd0
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7fa ff5b 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800709a:	2064      	movs	r0, #100	; 0x64
 800709c:	f7fa f8c6 	bl	800122c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 80070a0:	2364      	movs	r3, #100	; 0x64
 80070a2:	9302      	str	r3, [sp, #8]
 80070a4:	2301      	movs	r3, #1
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	f107 030f 	add.w	r3, r7, #15
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2301      	movs	r3, #1
 80070b0:	221b      	movs	r2, #27
 80070b2:	21d0      	movs	r1, #208	; 0xd0
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fb f845 	bl	8002144 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	f023 0303 	bic.w	r3, r3, #3
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	f023 0318 	bic.w	r3, r3, #24
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 80070ce:	4b3d      	ldr	r3, [pc, #244]	; (80071c4 <initMPU9250+0x1bc>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	b25a      	sxtb	r2, r3
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	b25b      	sxtb	r3, r3
 80070da:	4313      	orrs	r3, r2
 80070dc:	b25b      	sxtb	r3, r3
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 80070e2:	2064      	movs	r0, #100	; 0x64
 80070e4:	f7fa f8a2 	bl	800122c <HAL_Delay>

	writeData = readData;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80070ec:	2364      	movs	r3, #100	; 0x64
 80070ee:	9302      	str	r3, [sp, #8]
 80070f0:	2301      	movs	r3, #1
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	f107 030e 	add.w	r3, r7, #14
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	2301      	movs	r3, #1
 80070fc:	221b      	movs	r2, #27
 80070fe:	21d0      	movs	r1, #208	; 0xd0
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7fa ff25 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8007106:	2064      	movs	r0, #100	; 0x64
 8007108:	f7fa f890 	bl	800122c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 800710c:	2364      	movs	r3, #100	; 0x64
 800710e:	9302      	str	r3, [sp, #8]
 8007110:	2301      	movs	r3, #1
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	f107 030f 	add.w	r3, r7, #15
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	2301      	movs	r3, #1
 800711c:	221c      	movs	r2, #28
 800711e:	21d0      	movs	r1, #208	; 0xd0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7fb f80f 	bl	8002144 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	f023 0318 	bic.w	r3, r3, #24
 800712c:	b2db      	uxtb	r3, r3
 800712e:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8007130:	4b25      	ldr	r3, [pc, #148]	; (80071c8 <initMPU9250+0x1c0>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	b25a      	sxtb	r2, r3
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	b25b      	sxtb	r3, r3
 800713c:	4313      	orrs	r3, r2
 800713e:	b25b      	sxtb	r3, r3
 8007140:	b2db      	uxtb	r3, r3
 8007142:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8007148:	2364      	movs	r3, #100	; 0x64
 800714a:	9302      	str	r3, [sp, #8]
 800714c:	2301      	movs	r3, #1
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	f107 030e 	add.w	r3, r7, #14
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	2301      	movs	r3, #1
 8007158:	221c      	movs	r2, #28
 800715a:	21d0      	movs	r1, #208	; 0xd0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7fa fef7 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8007162:	2064      	movs	r0, #100	; 0x64
 8007164:	f7fa f862 	bl	800122c <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8007168:	2364      	movs	r3, #100	; 0x64
 800716a:	9302      	str	r3, [sp, #8]
 800716c:	2301      	movs	r3, #1
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	f107 030f 	add.w	r3, r7, #15
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	2301      	movs	r3, #1
 8007178:	221d      	movs	r2, #29
 800717a:	21d0      	movs	r1, #208	; 0xd0
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7fa ffe1 	bl	8002144 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	f023 030f 	bic.w	r3, r3, #15
 8007188:	b2db      	uxtb	r3, r3
 800718a:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	f043 0303 	orr.w	r3, r3, #3
 8007192:	b2db      	uxtb	r3, r3
 8007194:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 800719a:	2364      	movs	r3, #100	; 0x64
 800719c:	9302      	str	r3, [sp, #8]
 800719e:	2301      	movs	r3, #1
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	f107 030e 	add.w	r3, r7, #14
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2301      	movs	r3, #1
 80071aa:	221d      	movs	r2, #29
 80071ac:	21d0      	movs	r1, #208	; 0xd0
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fa fece 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80071b4:	2064      	movs	r0, #100	; 0x64
 80071b6:	f7fa f839 	bl	800122c <HAL_Delay>

#if(DEBUG_MPU)
	printf("MPU Init Succesful! \r\n");
#endif
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000010 	.word	0x20000010
 80071c8:	20000011 	.word	0x20000011

080071cc <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 80071cc:	b5b0      	push	{r4, r5, r7, lr}
 80071ce:	b09e      	sub	sp, #120	; 0x78
 80071d0:	af04      	add	r7, sp, #16
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80071d8:	2300      	movs	r3, #0
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071dc:	2300      	movs	r3, #0
 80071de:	643b      	str	r3, [r7, #64]	; 0x40
 80071e0:	2300      	movs	r3, #0
 80071e2:	647b      	str	r3, [r7, #68]	; 0x44
 80071e4:	2300      	movs	r3, #0
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30
 80071e8:	2300      	movs	r3, #0
 80071ea:	637b      	str	r3, [r7, #52]	; 0x34
 80071ec:	2300      	movs	r3, #0
 80071ee:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 80071f0:	2380      	movs	r3, #128	; 0x80
 80071f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 80071f6:	2364      	movs	r3, #100	; 0x64
 80071f8:	9302      	str	r3, [sp, #8]
 80071fa:	2301      	movs	r3, #1
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	2301      	movs	r3, #1
 8007206:	226b      	movs	r2, #107	; 0x6b
 8007208:	21d0      	movs	r1, #208	; 0xd0
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f7fa fea0 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8007210:	2064      	movs	r0, #100	; 0x64
 8007212:	f7fa f80b 	bl	800122c <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8007216:	2301      	movs	r3, #1
 8007218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 800721c:	2364      	movs	r3, #100	; 0x64
 800721e:	9302      	str	r3, [sp, #8]
 8007220:	2301      	movs	r3, #1
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	2301      	movs	r3, #1
 800722c:	226b      	movs	r2, #107	; 0x6b
 800722e:	21d0      	movs	r1, #208	; 0xd0
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7fa fe8d 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007236:	2300      	movs	r3, #0
 8007238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 800723c:	2364      	movs	r3, #100	; 0x64
 800723e:	9302      	str	r3, [sp, #8]
 8007240:	2301      	movs	r3, #1
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	2301      	movs	r3, #1
 800724c:	226c      	movs	r2, #108	; 0x6c
 800724e:	21d0      	movs	r1, #208	; 0xd0
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f7fa fe7d 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8007256:	20c8      	movs	r0, #200	; 0xc8
 8007258:	f7f9 ffe8 	bl	800122c <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8007262:	2364      	movs	r3, #100	; 0x64
 8007264:	9302      	str	r3, [sp, #8]
 8007266:	2301      	movs	r3, #1
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	2301      	movs	r3, #1
 8007272:	2238      	movs	r2, #56	; 0x38
 8007274:	21d0      	movs	r1, #208	; 0xd0
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7fa fe6a 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800727c:	2300      	movs	r3, #0
 800727e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8007282:	2364      	movs	r3, #100	; 0x64
 8007284:	9302      	str	r3, [sp, #8]
 8007286:	2301      	movs	r3, #1
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	2301      	movs	r3, #1
 8007292:	2223      	movs	r2, #35	; 0x23
 8007294:	21d0      	movs	r1, #208	; 0xd0
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7fa fe5a 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800729c:	2300      	movs	r3, #0
 800729e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 80072a2:	2364      	movs	r3, #100	; 0x64
 80072a4:	9302      	str	r3, [sp, #8]
 80072a6:	2301      	movs	r3, #1
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	2301      	movs	r3, #1
 80072b2:	226b      	movs	r2, #107	; 0x6b
 80072b4:	21d0      	movs	r1, #208	; 0xd0
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7fa fe4a 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80072bc:	2300      	movs	r3, #0
 80072be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 80072c2:	2364      	movs	r3, #100	; 0x64
 80072c4:	9302      	str	r3, [sp, #8]
 80072c6:	2301      	movs	r3, #1
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	2301      	movs	r3, #1
 80072d2:	2224      	movs	r2, #36	; 0x24
 80072d4:	21d0      	movs	r1, #208	; 0xd0
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7fa fe3a 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 80072e2:	2364      	movs	r3, #100	; 0x64
 80072e4:	9302      	str	r3, [sp, #8]
 80072e6:	2301      	movs	r3, #1
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	2301      	movs	r3, #1
 80072f2:	226a      	movs	r2, #106	; 0x6a
 80072f4:	21d0      	movs	r1, #208	; 0xd0
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7fa fe2a 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 80072fc:	230c      	movs	r3, #12
 80072fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8007302:	2364      	movs	r3, #100	; 0x64
 8007304:	9302      	str	r3, [sp, #8]
 8007306:	2301      	movs	r3, #1
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	2301      	movs	r3, #1
 8007312:	226a      	movs	r2, #106	; 0x6a
 8007314:	21d0      	movs	r1, #208	; 0xd0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7fa fe1a 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 800731c:	200f      	movs	r0, #15
 800731e:	f7f9 ff85 	bl	800122c <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8007328:	2364      	movs	r3, #100	; 0x64
 800732a:	9302      	str	r3, [sp, #8]
 800732c:	2301      	movs	r3, #1
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	2301      	movs	r3, #1
 8007338:	221a      	movs	r2, #26
 800733a:	21d0      	movs	r1, #208	; 0xd0
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7fa fe07 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007342:	2300      	movs	r3, #0
 8007344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8007348:	2364      	movs	r3, #100	; 0x64
 800734a:	9302      	str	r3, [sp, #8]
 800734c:	2301      	movs	r3, #1
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	2301      	movs	r3, #1
 8007358:	2219      	movs	r2, #25
 800735a:	21d0      	movs	r1, #208	; 0xd0
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f7fa fdf7 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007362:	2300      	movs	r3, #0
 8007364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8007368:	2364      	movs	r3, #100	; 0x64
 800736a:	9302      	str	r3, [sp, #8]
 800736c:	2301      	movs	r3, #1
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	2301      	movs	r3, #1
 8007378:	221b      	movs	r2, #27
 800737a:	21d0      	movs	r1, #208	; 0xd0
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7fa fde7 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007382:	2300      	movs	r3, #0
 8007384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8007388:	2364      	movs	r3, #100	; 0x64
 800738a:	9302      	str	r3, [sp, #8]
 800738c:	2301      	movs	r3, #1
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	2301      	movs	r3, #1
 8007398:	221c      	movs	r2, #28
 800739a:	21d0      	movs	r1, #208	; 0xd0
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7fa fdd7 	bl	8001f50 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 80073a2:	2383      	movs	r3, #131	; 0x83
 80073a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 80073a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 80073b0:	2340      	movs	r3, #64	; 0x40
 80073b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 80073b6:	2364      	movs	r3, #100	; 0x64
 80073b8:	9302      	str	r3, [sp, #8]
 80073ba:	2301      	movs	r3, #1
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	2301      	movs	r3, #1
 80073c6:	226a      	movs	r2, #106	; 0x6a
 80073c8:	21d0      	movs	r1, #208	; 0xd0
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7fa fdc0 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 80073d0:	2378      	movs	r3, #120	; 0x78
 80073d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 80073d6:	2364      	movs	r3, #100	; 0x64
 80073d8:	9302      	str	r3, [sp, #8]
 80073da:	2301      	movs	r3, #1
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	2301      	movs	r3, #1
 80073e6:	2223      	movs	r2, #35	; 0x23
 80073e8:	21d0      	movs	r1, #208	; 0xd0
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f7fa fdb0 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 80073f0:	2028      	movs	r0, #40	; 0x28
 80073f2:	f7f9 ff1b 	bl	800122c <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 80073fc:	2364      	movs	r3, #100	; 0x64
 80073fe:	9302      	str	r3, [sp, #8]
 8007400:	2301      	movs	r3, #1
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	2301      	movs	r3, #1
 800740c:	2223      	movs	r2, #35	; 0x23
 800740e:	21d0      	movs	r1, #208	; 0xd0
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7fa fd9d 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8007416:	2364      	movs	r3, #100	; 0x64
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	2302      	movs	r3, #2
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	2301      	movs	r3, #1
 8007426:	2272      	movs	r2, #114	; 0x72
 8007428:	21d0      	movs	r1, #208	; 0xd0
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7fa fe8a 	bl	8002144 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8007430:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	b21a      	sxth	r2, r3
 8007438:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800743c:	b21b      	sxth	r3, r3
 800743e:	4313      	orrs	r3, r2
 8007440:	b21b      	sxth	r3, r3
 8007442:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8007446:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800744a:	4a5a      	ldr	r2, [pc, #360]	; (80075b4 <calibrateMPU9250+0x3e8>)
 800744c:	fba2 2303 	umull	r2, r3, r2, r3
 8007450:	08db      	lsrs	r3, r3, #3
 8007452:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8007456:	2300      	movs	r3, #0
 8007458:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800745c:	e077      	b.n	800754e <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 800745e:	2300      	movs	r3, #0
 8007460:	833b      	strh	r3, [r7, #24]
 8007462:	2300      	movs	r3, #0
 8007464:	837b      	strh	r3, [r7, #26]
 8007466:	2300      	movs	r3, #0
 8007468:	83bb      	strh	r3, [r7, #28]
 800746a:	2300      	movs	r3, #0
 800746c:	823b      	strh	r3, [r7, #16]
 800746e:	2300      	movs	r3, #0
 8007470:	827b      	strh	r3, [r7, #18]
 8007472:	2300      	movs	r3, #0
 8007474:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8007476:	2364      	movs	r3, #100	; 0x64
 8007478:	9302      	str	r3, [sp, #8]
 800747a:	230c      	movs	r3, #12
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	2301      	movs	r3, #1
 8007486:	2274      	movs	r2, #116	; 0x74
 8007488:	21d0      	movs	r1, #208	; 0xd0
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7fa fe5a 	bl	8002144 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8007490:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	b21a      	sxth	r2, r3
 8007498:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800749c:	b21b      	sxth	r3, r3
 800749e:	4313      	orrs	r3, r2
 80074a0:	b21b      	sxth	r3, r3
 80074a2:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 80074a4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80074a8:	021b      	lsls	r3, r3, #8
 80074aa:	b21a      	sxth	r2, r3
 80074ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80074b0:	b21b      	sxth	r3, r3
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b21b      	sxth	r3, r3
 80074b6:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 80074b8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	b21a      	sxth	r2, r3
 80074c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80074c4:	b21b      	sxth	r3, r3
 80074c6:	4313      	orrs	r3, r2
 80074c8:	b21b      	sxth	r3, r3
 80074ca:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 80074cc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	b21a      	sxth	r2, r3
 80074d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80074d8:	b21b      	sxth	r3, r3
 80074da:	4313      	orrs	r3, r2
 80074dc:	b21b      	sxth	r3, r3
 80074de:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 80074e0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	b21a      	sxth	r2, r3
 80074e8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80074ec:	b21b      	sxth	r3, r3
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b21b      	sxth	r3, r3
 80074f2:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 80074f4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	b21a      	sxth	r2, r3
 80074fc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007500:	b21b      	sxth	r3, r3
 8007502:	4313      	orrs	r3, r2
 8007504:	b21b      	sxth	r3, r3
 8007506:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800750e:	4413      	add	r3, r2
 8007510:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8007518:	4413      	add	r3, r2
 800751a:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8007526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007528:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800752c:	4413      	add	r3, r2
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8007530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007532:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007536:	4413      	add	r3, r2
 8007538:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 800753a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800753c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007540:	4413      	add	r3, r2
 8007542:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8007544:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007548:	3301      	adds	r3, #1
 800754a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800754e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8007552:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007556:	429a      	cmp	r2, r3
 8007558:	d381      	bcc.n	800745e <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 800755a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800755c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007560:	fb92 f3f3 	sdiv	r3, r2, r3
 8007564:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8007566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007568:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800756c:	fb92 f3f3 	sdiv	r3, r2, r3
 8007570:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8007572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007574:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007578:	fb92 f3f3 	sdiv	r3, r2, r3
 800757c:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 800757e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007580:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007584:	fb92 f3f3 	sdiv	r3, r2, r3
 8007588:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 800758a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800758c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007590:	fb92 f3f3 	sdiv	r3, r2, r3
 8007594:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8007596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007598:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800759c:	fb92 f3f3 	sdiv	r3, r2, r3
 80075a0:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dd07      	ble.n	80075b8 <calibrateMPU9250+0x3ec>
 80075a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b2:	e006      	b.n	80075c2 <calibrateMPU9250+0x3f6>
 80075b4:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 80075b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075be:	4413      	add	r3, r2
 80075c0:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80075c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c4:	425b      	negs	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da00      	bge.n	80075cc <calibrateMPU9250+0x400>
 80075ca:	3303      	adds	r3, #3
 80075cc:	109b      	asrs	r3, r3, #2
 80075ce:	121b      	asrs	r3, r3, #8
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80075d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d8:	425b      	negs	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	da00      	bge.n	80075e0 <calibrateMPU9250+0x414>
 80075de:	3303      	adds	r3, #3
 80075e0:	109b      	asrs	r3, r3, #2
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80075e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ea:	425b      	negs	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	da00      	bge.n	80075f2 <calibrateMPU9250+0x426>
 80075f0:	3303      	adds	r3, #3
 80075f2:	109b      	asrs	r3, r3, #2
 80075f4:	121b      	asrs	r3, r3, #8
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 80075fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fe:	425b      	negs	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	da00      	bge.n	8007606 <calibrateMPU9250+0x43a>
 8007604:	3303      	adds	r3, #3
 8007606:	109b      	asrs	r3, r3, #2
 8007608:	b2db      	uxtb	r3, r3
 800760a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800760e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007610:	425b      	negs	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	da00      	bge.n	8007618 <calibrateMPU9250+0x44c>
 8007616:	3303      	adds	r3, #3
 8007618:	109b      	asrs	r3, r3, #2
 800761a:	121b      	asrs	r3, r3, #8
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8007622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007624:	425b      	negs	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	da00      	bge.n	800762c <calibrateMPU9250+0x460>
 800762a:	3303      	adds	r3, #3
 800762c:	109b      	asrs	r3, r3, #2
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8007634:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800763c:	2364      	movs	r3, #100	; 0x64
 800763e:	9302      	str	r3, [sp, #8]
 8007640:	2301      	movs	r3, #1
 8007642:	9301      	str	r3, [sp, #4]
 8007644:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	2301      	movs	r3, #1
 800764c:	2213      	movs	r2, #19
 800764e:	21d0      	movs	r1, #208	; 0xd0
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7fa fc7d 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8007656:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800765a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800765e:	2364      	movs	r3, #100	; 0x64
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	2301      	movs	r3, #1
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2301      	movs	r3, #1
 800766e:	2214      	movs	r2, #20
 8007670:	21d0      	movs	r1, #208	; 0xd0
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f7fa fc6c 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8007678:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800767c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8007680:	2364      	movs	r3, #100	; 0x64
 8007682:	9302      	str	r3, [sp, #8]
 8007684:	2301      	movs	r3, #1
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	2301      	movs	r3, #1
 8007690:	2215      	movs	r2, #21
 8007692:	21d0      	movs	r1, #208	; 0xd0
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7fa fc5b 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 800769a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800769e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80076a2:	2364      	movs	r3, #100	; 0x64
 80076a4:	9302      	str	r3, [sp, #8]
 80076a6:	2301      	movs	r3, #1
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	2301      	movs	r3, #1
 80076b2:	2216      	movs	r2, #22
 80076b4:	21d0      	movs	r1, #208	; 0xd0
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7fa fc4a 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 80076bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80076c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80076c4:	2364      	movs	r3, #100	; 0x64
 80076c6:	9302      	str	r3, [sp, #8]
 80076c8:	2301      	movs	r3, #1
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	2301      	movs	r3, #1
 80076d4:	2217      	movs	r2, #23
 80076d6:	21d0      	movs	r1, #208	; 0xd0
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7fa fc39 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 80076de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80076e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80076e6:	2364      	movs	r3, #100	; 0x64
 80076e8:	9302      	str	r3, [sp, #8]
 80076ea:	2301      	movs	r3, #1
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	2301      	movs	r3, #1
 80076f6:	2218      	movs	r2, #24
 80076f8:	21d0      	movs	r1, #208	; 0xd0
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f7fa fc28 	bl	8001f50 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8007700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007702:	4618      	mov	r0, r3
 8007704:	f7f9 faba 	bl	8000c7c <__aeabi_i2f>
 8007708:	4604      	mov	r4, r0
 800770a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800770e:	4618      	mov	r0, r3
 8007710:	f7f9 fab0 	bl	8000c74 <__aeabi_ui2f>
 8007714:	4603      	mov	r3, r0
 8007716:	4619      	mov	r1, r3
 8007718:	4620      	mov	r0, r4
 800771a:	f7f9 fbb7 	bl	8000e8c <__aeabi_fdiv>
 800771e:	4603      	mov	r3, r0
 8007720:	461a      	mov	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8007726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007728:	4618      	mov	r0, r3
 800772a:	f7f9 faa7 	bl	8000c7c <__aeabi_i2f>
 800772e:	4605      	mov	r5, r0
 8007730:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007734:	4618      	mov	r0, r3
 8007736:	f7f9 fa9d 	bl	8000c74 <__aeabi_ui2f>
 800773a:	4602      	mov	r2, r0
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	1d1c      	adds	r4, r3, #4
 8007740:	4611      	mov	r1, r2
 8007742:	4628      	mov	r0, r5
 8007744:	f7f9 fba2 	bl	8000e8c <__aeabi_fdiv>
 8007748:	4603      	mov	r3, r0
 800774a:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 800774c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774e:	4618      	mov	r0, r3
 8007750:	f7f9 fa94 	bl	8000c7c <__aeabi_i2f>
 8007754:	4605      	mov	r5, r0
 8007756:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800775a:	4618      	mov	r0, r3
 800775c:	f7f9 fa8a 	bl	8000c74 <__aeabi_ui2f>
 8007760:	4602      	mov	r2, r0
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f103 0408 	add.w	r4, r3, #8
 8007768:	4611      	mov	r1, r2
 800776a:	4628      	mov	r0, r5
 800776c:	f7f9 fb8e 	bl	8000e8c <__aeabi_fdiv>
 8007770:	4603      	mov	r3, r0
 8007772:	6023      	str	r3, [r4, #0]

		printf("-------------------------\r\n");
#endif

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8007774:	2300      	movs	r3, #0
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
 8007778:	2300      	movs	r3, #0
 800777a:	62bb      	str	r3, [r7, #40]	; 0x28
 800777c:	2300      	movs	r3, #0
 800777e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8007780:	2364      	movs	r3, #100	; 0x64
 8007782:	9302      	str	r3, [sp, #8]
 8007784:	2302      	movs	r3, #2
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	2301      	movs	r3, #1
 8007790:	2277      	movs	r2, #119	; 0x77
 8007792:	21d0      	movs	r1, #208	; 0xd0
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7fa fcd5 	bl	8002144 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800779a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80077a4:	4313      	orrs	r3, r2
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 80077a8:	2364      	movs	r3, #100	; 0x64
 80077aa:	9302      	str	r3, [sp, #8]
 80077ac:	2302      	movs	r3, #2
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	2301      	movs	r3, #1
 80077b8:	227a      	movs	r2, #122	; 0x7a
 80077ba:	21d0      	movs	r1, #208	; 0xd0
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7fa fcc1 	bl	8002144 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80077c2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80077cc:	4313      	orrs	r3, r2
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 80077d0:	2364      	movs	r3, #100	; 0x64
 80077d2:	9302      	str	r3, [sp, #8]
 80077d4:	2302      	movs	r3, #2
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	2301      	movs	r3, #1
 80077e0:	227d      	movs	r2, #125	; 0x7d
 80077e2:	21d0      	movs	r1, #208	; 0xd0
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7fa fcad 	bl	8002144 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80077ea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80077f4:	4313      	orrs	r3, r2
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 80077f8:	2301      	movs	r3, #1
 80077fa:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 80077fc:	2300      	movs	r3, #0
 80077fe:	f887 3020 	strb.w	r3, [r7, #32]
 8007802:	2300      	movs	r3, #0
 8007804:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for(ii = 0; ii < 3; ii++) {
 800780e:	2300      	movs	r3, #0
 8007810:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007814:	e019      	b.n	800784a <calibrateMPU9250+0x67e>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8007816:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007820:	4413      	add	r3, r2
 8007822:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007826:	461a      	mov	r2, r3
 8007828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <calibrateMPU9250+0x674>
 8007830:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007834:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007838:	4413      	add	r3, r2
 800783a:	2201      	movs	r2, #1
 800783c:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 8007840:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007844:	3301      	adds	r3, #1
 8007846:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800784a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800784e:	2b02      	cmp	r3, #2
 8007850:	d9e1      	bls.n	8007816 <calibrateMPU9250+0x64a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8007852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	2b00      	cmp	r3, #0
 8007858:	da00      	bge.n	800785c <calibrateMPU9250+0x690>
 800785a:	3307      	adds	r3, #7
 800785c:	10db      	asrs	r3, r3, #3
 800785e:	425b      	negs	r3, r3
 8007860:	4413      	add	r3, r2
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8007864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	2b00      	cmp	r3, #0
 800786a:	da00      	bge.n	800786e <calibrateMPU9250+0x6a2>
 800786c:	3307      	adds	r3, #7
 800786e:	10db      	asrs	r3, r3, #3
 8007870:	425b      	negs	r3, r3
 8007872:	4413      	add	r3, r2
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8007876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	2b00      	cmp	r3, #0
 800787c:	da00      	bge.n	8007880 <calibrateMPU9250+0x6b4>
 800787e:	3307      	adds	r3, #7
 8007880:	10db      	asrs	r3, r3, #3
 8007882:	425b      	negs	r3, r3
 8007884:	4413      	add	r3, r2
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	121b      	asrs	r3, r3, #8
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	b2db      	uxtb	r3, r3
 8007896:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800789a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800789e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	121b      	asrs	r3, r3, #8
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80078bc:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80078c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80078c4:	4313      	orrs	r3, r2
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	121b      	asrs	r3, r3, #8
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 80078d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80078de:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80078e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80078e6:	4313      	orrs	r3, r2
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 80078ee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80078f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80078f6:	2364      	movs	r3, #100	; 0x64
 80078f8:	9302      	str	r3, [sp, #8]
 80078fa:	2301      	movs	r3, #1
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	2301      	movs	r3, #1
 8007906:	2277      	movs	r2, #119	; 0x77
 8007908:	21d0      	movs	r1, #208	; 0xd0
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f7fa fb20 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8007910:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8007914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8007918:	2364      	movs	r3, #100	; 0x64
 800791a:	9302      	str	r3, [sp, #8]
 800791c:	2301      	movs	r3, #1
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	2301      	movs	r3, #1
 8007928:	2278      	movs	r2, #120	; 0x78
 800792a:	21d0      	movs	r1, #208	; 0xd0
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f7fa fb0f 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8007932:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007936:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800793a:	2364      	movs	r3, #100	; 0x64
 800793c:	9302      	str	r3, [sp, #8]
 800793e:	2301      	movs	r3, #1
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	2301      	movs	r3, #1
 800794a:	227a      	movs	r2, #122	; 0x7a
 800794c:	21d0      	movs	r1, #208	; 0xd0
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7fa fafe 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8007954:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007958:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800795c:	2364      	movs	r3, #100	; 0x64
 800795e:	9302      	str	r3, [sp, #8]
 8007960:	2301      	movs	r3, #1
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	2301      	movs	r3, #1
 800796c:	227b      	movs	r2, #123	; 0x7b
 800796e:	21d0      	movs	r1, #208	; 0xd0
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7fa faed 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8007976:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800797a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800797e:	2364      	movs	r3, #100	; 0x64
 8007980:	9302      	str	r3, [sp, #8]
 8007982:	2301      	movs	r3, #1
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	2301      	movs	r3, #1
 800798e:	227d      	movs	r2, #125	; 0x7d
 8007990:	21d0      	movs	r1, #208	; 0xd0
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f7fa fadc 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8007998:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800799c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80079a0:	2364      	movs	r3, #100	; 0x64
 80079a2:	9302      	str	r3, [sp, #8]
 80079a4:	2301      	movs	r3, #1
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	2301      	movs	r3, #1
 80079b0:	227e      	movs	r2, #126	; 0x7e
 80079b2:	21d0      	movs	r1, #208	; 0xd0
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7fa facb 	bl	8001f50 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	4618      	mov	r0, r3
 80079be:	f7f9 f95d 	bl	8000c7c <__aeabi_i2f>
 80079c2:	4604      	mov	r4, r0
 80079c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7f9 f953 	bl	8000c74 <__aeabi_ui2f>
 80079ce:	4603      	mov	r3, r0
 80079d0:	4619      	mov	r1, r3
 80079d2:	4620      	mov	r0, r4
 80079d4:	f7f9 fa5a 	bl	8000e8c <__aeabi_fdiv>
 80079d8:	4603      	mov	r3, r0
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	601a      	str	r2, [r3, #0]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 80079e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7f9 f94a 	bl	8000c7c <__aeabi_i2f>
 80079e8:	4605      	mov	r5, r0
 80079ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7f9 f940 	bl	8000c74 <__aeabi_ui2f>
 80079f4:	4602      	mov	r2, r0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	1d1c      	adds	r4, r3, #4
 80079fa:	4611      	mov	r1, r2
 80079fc:	4628      	mov	r0, r5
 80079fe:	f7f9 fa45 	bl	8000e8c <__aeabi_fdiv>
 8007a02:	4603      	mov	r3, r0
 8007a04:	6023      	str	r3, [r4, #0]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7f9 f937 	bl	8000c7c <__aeabi_i2f>
 8007a0e:	4605      	mov	r5, r0
 8007a10:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7f9 f92d 	bl	8000c74 <__aeabi_ui2f>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f103 0408 	add.w	r4, r3, #8
 8007a22:	4611      	mov	r1, r2
 8007a24:	4628      	mov	r0, r5
 8007a26:	f7f9 fa31 	bl	8000e8c <__aeabi_fdiv>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	6023      	str	r3, [r4, #0]
		printf("Accel bias Y: %f\r\n", accelBiasY);
		printf("Accel bias Z: %f\r\n", accelBiasZ);

		printf("-------------------------\r\n");
#endif
}
 8007a2e:	bf00      	nop
 8007a30:	3768      	adds	r7, #104	; 0x68
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bdb0      	pop	{r4, r5, r7, pc}
 8007a36:	bf00      	nop

08007a38 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 8007a38:	b5b0      	push	{r4, r5, r7, lr}
 8007a3a:	b0a8      	sub	sp, #160	; 0xa0
 8007a3c:	af04      	add	r7, sp, #16
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 8007a42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8007a4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	605a      	str	r2, [r3, #4]
 8007a56:	609a      	str	r2, [r3, #8]
 8007a58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	605a      	str	r2, [r3, #4]
 8007a62:	609a      	str	r2, [r3, #8]
 8007a64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	605a      	str	r2, [r3, #4]
 8007a6e:	609a      	str	r2, [r3, #8]
 8007a70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	605a      	str	r2, [r3, #4]
 8007a7a:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 8007a82:	2300      	movs	r3, #0
 8007a84:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 8007a88:	2364      	movs	r3, #100	; 0x64
 8007a8a:	9302      	str	r3, [sp, #8]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	2301      	movs	r3, #1
 8007a98:	2219      	movs	r2, #25
 8007a9a:	21d0      	movs	r1, #208	; 0xd0
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fa fa57 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8007aa8:	2364      	movs	r3, #100	; 0x64
 8007aaa:	9302      	str	r3, [sp, #8]
 8007aac:	2301      	movs	r3, #1
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	221a      	movs	r2, #26
 8007aba:	21d0      	movs	r1, #208	; 0xd0
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fa fa47 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8007ac2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8007ace:	2364      	movs	r3, #100	; 0x64
 8007ad0:	9302      	str	r3, [sp, #8]
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	2301      	movs	r3, #1
 8007ade:	221b      	movs	r2, #27
 8007ae0:	21d0      	movs	r1, #208	; 0xd0
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fa fa34 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8007aee:	2364      	movs	r3, #100	; 0x64
 8007af0:	9302      	str	r3, [sp, #8]
 8007af2:	2301      	movs	r3, #1
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2301      	movs	r3, #1
 8007afe:	221d      	movs	r2, #29
 8007b00:	21d0      	movs	r1, #208	; 0xd0
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7fa fa24 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8007b08:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 8007b14:	2364      	movs	r3, #100	; 0x64
 8007b16:	9302      	str	r3, [sp, #8]
 8007b18:	2301      	movs	r3, #1
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	2301      	movs	r3, #1
 8007b24:	221c      	movs	r2, #28
 8007b26:	21d0      	movs	r1, #208	; 0xd0
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7fa fa11 	bl	8001f50 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b34:	e066      	b.n	8007c04 <MPU9250SelfTest+0x1cc>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8007b36:	2364      	movs	r3, #100	; 0x64
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	2306      	movs	r3, #6
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	2301      	movs	r3, #1
 8007b46:	223b      	movs	r2, #59	; 0x3b
 8007b48:	21d0      	movs	r1, #208	; 0xd0
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fa fafa 	bl	8002144 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b52:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007b56:	0212      	lsls	r2, r2, #8
 8007b58:	b211      	sxth	r1, r2
 8007b5a:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007b5e:	b212      	sxth	r2, r2
 8007b60:	430a      	orrs	r2, r1
 8007b62:	b212      	sxth	r2, r2
 8007b64:	4413      	add	r3, r2
 8007b66:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b6a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007b6e:	0212      	lsls	r2, r2, #8
 8007b70:	b211      	sxth	r1, r2
 8007b72:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007b76:	b212      	sxth	r2, r2
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	b212      	sxth	r2, r2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b82:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007b86:	0212      	lsls	r2, r2, #8
 8007b88:	b211      	sxth	r1, r2
 8007b8a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007b8e:	b212      	sxth	r2, r2
 8007b90:	430a      	orrs	r2, r1
 8007b92:	b212      	sxth	r2, r2
 8007b94:	4413      	add	r3, r2
 8007b96:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8007b98:	2364      	movs	r3, #100	; 0x64
 8007b9a:	9302      	str	r3, [sp, #8]
 8007b9c:	2306      	movs	r3, #6
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	2243      	movs	r2, #67	; 0x43
 8007baa:	21d0      	movs	r1, #208	; 0xd0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7fa fac9 	bl	8002144 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bb4:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007bb8:	0212      	lsls	r2, r2, #8
 8007bba:	b211      	sxth	r1, r2
 8007bbc:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007bc0:	b212      	sxth	r2, r2
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	b212      	sxth	r2, r2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bcc:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007bd0:	0212      	lsls	r2, r2, #8
 8007bd2:	b211      	sxth	r1, r2
 8007bd4:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007bd8:	b212      	sxth	r2, r2
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	b212      	sxth	r2, r2
 8007bde:	4413      	add	r3, r2
 8007be0:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007be4:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007be8:	0212      	lsls	r2, r2, #8
 8007bea:	b211      	sxth	r1, r2
 8007bec:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007bf0:	b212      	sxth	r2, r2
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	b212      	sxth	r2, r2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 8007bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bfe:	3301      	adds	r3, #1
 8007c00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c08:	2bc7      	cmp	r3, #199	; 0xc7
 8007c0a:	dd94      	ble.n	8007b36 <MPU9250SelfTest+0xfe>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c12:	e030      	b.n	8007c76 <MPU9250SelfTest+0x23e>
		aAvg[ii] /= 200;
 8007c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007c1e:	4413      	add	r3, r2
 8007c20:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8007c24:	4a61      	ldr	r2, [pc, #388]	; (8007dac <MPU9250SelfTest+0x374>)
 8007c26:	fb82 1203 	smull	r1, r2, r2, r3
 8007c2a:	1192      	asrs	r2, r2, #6
 8007c2c:	17db      	asrs	r3, r3, #31
 8007c2e:	1ad2      	subs	r2, r2, r3
 8007c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8007c3a:	440b      	add	r3, r1
 8007c3c:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 8007c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8007c50:	4a56      	ldr	r2, [pc, #344]	; (8007dac <MPU9250SelfTest+0x374>)
 8007c52:	fb82 1203 	smull	r1, r2, r2, r3
 8007c56:	1192      	asrs	r2, r2, #6
 8007c58:	17db      	asrs	r3, r3, #31
 8007c5a:	1ad2      	subs	r2, r2, r3
 8007c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8007c66:	440b      	add	r3, r1
 8007c68:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 8007c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c70:	3301      	adds	r3, #1
 8007c72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	ddca      	ble.n	8007c14 <MPU9250SelfTest+0x1dc>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 8007c7e:	23e0      	movs	r3, #224	; 0xe0
 8007c80:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8007c84:	2364      	movs	r3, #100	; 0x64
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	2301      	movs	r3, #1
 8007c94:	221c      	movs	r2, #28
 8007c96:	21d0      	movs	r1, #208	; 0xd0
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7fa f959 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 8007c9e:	23e0      	movs	r3, #224	; 0xe0
 8007ca0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8007ca4:	2364      	movs	r3, #100	; 0x64
 8007ca6:	9302      	str	r3, [sp, #8]
 8007ca8:	2301      	movs	r3, #1
 8007caa:	9301      	str	r3, [sp, #4]
 8007cac:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	221b      	movs	r2, #27
 8007cb6:	21d0      	movs	r1, #208	; 0xd0
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7fa f949 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8007cbe:	2019      	movs	r0, #25
 8007cc0:	f7f9 fab4 	bl	800122c <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cca:	e066      	b.n	8007d9a <MPU9250SelfTest+0x362>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8007ccc:	2364      	movs	r3, #100	; 0x64
 8007cce:	9302      	str	r3, [sp, #8]
 8007cd0:	2306      	movs	r3, #6
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	2301      	movs	r3, #1
 8007cdc:	223b      	movs	r2, #59	; 0x3b
 8007cde:	21d0      	movs	r1, #208	; 0xd0
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7fa fa2f 	bl	8002144 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007cec:	0212      	lsls	r2, r2, #8
 8007cee:	b211      	sxth	r1, r2
 8007cf0:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007cf4:	b212      	sxth	r2, r2
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	b212      	sxth	r2, r2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d00:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007d04:	0212      	lsls	r2, r2, #8
 8007d06:	b211      	sxth	r1, r2
 8007d08:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007d0c:	b212      	sxth	r2, r2
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	b212      	sxth	r2, r2
 8007d12:	4413      	add	r3, r2
 8007d14:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d18:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007d1c:	0212      	lsls	r2, r2, #8
 8007d1e:	b211      	sxth	r1, r2
 8007d20:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007d24:	b212      	sxth	r2, r2
 8007d26:	430a      	orrs	r2, r1
 8007d28:	b212      	sxth	r2, r2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8007d2e:	2364      	movs	r3, #100	; 0x64
 8007d30:	9302      	str	r3, [sp, #8]
 8007d32:	2306      	movs	r3, #6
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	2243      	movs	r2, #67	; 0x43
 8007d40:	21d0      	movs	r1, #208	; 0xd0
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fa f9fe 	bl	8002144 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8007d4e:	0212      	lsls	r2, r2, #8
 8007d50:	b211      	sxth	r1, r2
 8007d52:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8007d56:	b212      	sxth	r2, r2
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	b212      	sxth	r2, r2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8007d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d62:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8007d66:	0212      	lsls	r2, r2, #8
 8007d68:	b211      	sxth	r1, r2
 8007d6a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8007d6e:	b212      	sxth	r2, r2
 8007d70:	430a      	orrs	r2, r1
 8007d72:	b212      	sxth	r2, r2
 8007d74:	4413      	add	r3, r2
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8007d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8007d7e:	0212      	lsls	r2, r2, #8
 8007d80:	b211      	sxth	r1, r2
 8007d82:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8007d86:	b212      	sxth	r2, r2
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	b212      	sxth	r2, r2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 8007d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d94:	3301      	adds	r3, #1
 8007d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d9e:	2bc7      	cmp	r3, #199	; 0xc7
 8007da0:	dd94      	ble.n	8007ccc <MPU9250SelfTest+0x294>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 8007da2:	2300      	movs	r3, #0
 8007da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007da8:	e033      	b.n	8007e12 <MPU9250SelfTest+0x3da>
 8007daa:	bf00      	nop
 8007dac:	51eb851f 	.word	0x51eb851f
		aSTAvg[ii] /= 200;
 8007db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007dba:	4413      	add	r3, r2
 8007dbc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007dc0:	4ad7      	ldr	r2, [pc, #860]	; (8008120 <MPU9250SelfTest+0x6e8>)
 8007dc2:	fb82 1203 	smull	r1, r2, r2, r3
 8007dc6:	1192      	asrs	r2, r2, #6
 8007dc8:	17db      	asrs	r3, r3, #31
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8007dd6:	440b      	add	r3, r1
 8007dd8:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 8007ddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007de6:	4413      	add	r3, r2
 8007de8:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8007dec:	4acc      	ldr	r2, [pc, #816]	; (8008120 <MPU9250SelfTest+0x6e8>)
 8007dee:	fb82 1203 	smull	r1, r2, r2, r3
 8007df2:	1192      	asrs	r2, r2, #6
 8007df4:	17db      	asrs	r3, r3, #31
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8007e02:	440b      	add	r3, r1
 8007e04:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 8007e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	ddca      	ble.n	8007db0 <MPU9250SelfTest+0x378>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8007e20:	2364      	movs	r3, #100	; 0x64
 8007e22:	9302      	str	r3, [sp, #8]
 8007e24:	2301      	movs	r3, #1
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	2301      	movs	r3, #1
 8007e30:	221c      	movs	r2, #28
 8007e32:	21d0      	movs	r1, #208	; 0xd0
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fa f88b 	bl	8001f50 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8007e40:	2364      	movs	r3, #100	; 0x64
 8007e42:	9302      	str	r3, [sp, #8]
 8007e44:	2301      	movs	r3, #1
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2301      	movs	r3, #1
 8007e50:	221b      	movs	r2, #27
 8007e52:	21d0      	movs	r1, #208	; 0xd0
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fa f87b 	bl	8001f50 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8007e5a:	2019      	movs	r0, #25
 8007e5c:	f7f9 f9e6 	bl	800122c <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 8007e60:	2364      	movs	r3, #100	; 0x64
 8007e62:	9302      	str	r3, [sp, #8]
 8007e64:	2301      	movs	r3, #1
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	2301      	movs	r3, #1
 8007e70:	220d      	movs	r2, #13
 8007e72:	21d0      	movs	r1, #208	; 0xd0
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7fa f965 	bl	8002144 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 8007e7a:	2364      	movs	r3, #100	; 0x64
 8007e7c:	9302      	str	r3, [sp, #8]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e86:	3301      	adds	r3, #1
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	220e      	movs	r2, #14
 8007e8e:	21d0      	movs	r1, #208	; 0xd0
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7fa f957 	bl	8002144 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 8007e96:	2364      	movs	r3, #100	; 0x64
 8007e98:	9302      	str	r3, [sp, #8]
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ea2:	3302      	adds	r3, #2
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	220f      	movs	r2, #15
 8007eaa:	21d0      	movs	r1, #208	; 0xd0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7fa f949 	bl	8002144 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 8007eb2:	2364      	movs	r3, #100	; 0x64
 8007eb4:	9302      	str	r3, [sp, #8]
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ebe:	3303      	adds	r3, #3
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	21d0      	movs	r1, #208	; 0xd0
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7fa f93b 	bl	8002144 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8007ece:	2364      	movs	r3, #100	; 0x64
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007eda:	3304      	adds	r3, #4
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	2301      	movs	r3, #1
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	21d0      	movs	r1, #208	; 0xd0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fa f92d 	bl	8002144 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8007eea:	2364      	movs	r3, #100	; 0x64
 8007eec:	9302      	str	r3, [sp, #8]
 8007eee:	2301      	movs	r3, #1
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ef6:	3305      	adds	r3, #5
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	2301      	movs	r3, #1
 8007efc:	2202      	movs	r2, #2
 8007efe:	21d0      	movs	r1, #208	; 0xd0
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7fa f91f 	bl	8002144 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8007f06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007f0a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7f8 feb2 	bl	8000c7c <__aeabi_i2f>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7f8 fa7c 	bl	8000418 <__aeabi_f2d>
 8007f20:	4604      	mov	r4, r0
 8007f22:	460d      	mov	r5, r1
 8007f24:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7f8 fea3 	bl	8000c74 <__aeabi_ui2f>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7f8 fa71 	bl	8000418 <__aeabi_f2d>
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	4b7a      	ldr	r3, [pc, #488]	; (8008124 <MPU9250SelfTest+0x6ec>)
 8007f3c:	f7f8 f90c 	bl	8000158 <__aeabi_dsub>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	a174      	add	r1, pc, #464	; (adr r1, 8008118 <MPU9250SelfTest+0x6e0>)
 8007f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f4a:	f002 ff4d 	bl	800ade8 <pow>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	f7f8 fab7 	bl	80004c8 <__aeabi_dmul>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	4618      	mov	r0, r3
 8007f60:	4621      	mov	r1, r4
 8007f62:	f7f8 fd81 	bl	8000a68 <__aeabi_d2f>
 8007f66:	4603      	mov	r3, r0
 8007f68:	623b      	str	r3, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8007f6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007f6e:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007f72:	fa02 f303 	lsl.w	r3, r2, r3
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7f8 fe80 	bl	8000c7c <__aeabi_i2f>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7f8 fa4a 	bl	8000418 <__aeabi_f2d>
 8007f84:	4604      	mov	r4, r0
 8007f86:	460d      	mov	r5, r1
 8007f88:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7f8 fe71 	bl	8000c74 <__aeabi_ui2f>
 8007f92:	4603      	mov	r3, r0
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7f8 fa3f 	bl	8000418 <__aeabi_f2d>
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	4b61      	ldr	r3, [pc, #388]	; (8008124 <MPU9250SelfTest+0x6ec>)
 8007fa0:	f7f8 f8da 	bl	8000158 <__aeabi_dsub>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	a15b      	add	r1, pc, #364	; (adr r1, 8008118 <MPU9250SelfTest+0x6e0>)
 8007faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fae:	f002 ff1b 	bl	800ade8 <pow>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	4629      	mov	r1, r5
 8007fba:	f7f8 fa85 	bl	80004c8 <__aeabi_dmul>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	f7f8 fd4f 	bl	8000a68 <__aeabi_d2f>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8007fce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007fd2:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7f8 fe4e 	bl	8000c7c <__aeabi_i2f>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7f8 fa18 	bl	8000418 <__aeabi_f2d>
 8007fe8:	4604      	mov	r4, r0
 8007fea:	460d      	mov	r5, r1
 8007fec:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7f8 fe3f 	bl	8000c74 <__aeabi_ui2f>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7f8 fa0d 	bl	8000418 <__aeabi_f2d>
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	4b48      	ldr	r3, [pc, #288]	; (8008124 <MPU9250SelfTest+0x6ec>)
 8008004:	f7f8 f8a8 	bl	8000158 <__aeabi_dsub>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	a142      	add	r1, pc, #264	; (adr r1, 8008118 <MPU9250SelfTest+0x6e0>)
 800800e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008012:	f002 fee9 	bl	800ade8 <pow>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4620      	mov	r0, r4
 800801c:	4629      	mov	r1, r5
 800801e:	f7f8 fa53 	bl	80004c8 <__aeabi_dmul>
 8008022:	4603      	mov	r3, r0
 8008024:	460c      	mov	r4, r1
 8008026:	4618      	mov	r0, r3
 8008028:	4621      	mov	r1, r4
 800802a:	f7f8 fd1d 	bl	8000a68 <__aeabi_d2f>
 800802e:	4603      	mov	r3, r0
 8008030:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8008032:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008036:	f640 223c 	movw	r2, #2620	; 0xa3c
 800803a:	fa02 f303 	lsl.w	r3, r2, r3
 800803e:	4618      	mov	r0, r3
 8008040:	f7f8 fe1c 	bl	8000c7c <__aeabi_i2f>
 8008044:	4603      	mov	r3, r0
 8008046:	4618      	mov	r0, r3
 8008048:	f7f8 f9e6 	bl	8000418 <__aeabi_f2d>
 800804c:	4604      	mov	r4, r0
 800804e:	460d      	mov	r5, r1
 8008050:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8008054:	4618      	mov	r0, r3
 8008056:	f7f8 fe0d 	bl	8000c74 <__aeabi_ui2f>
 800805a:	4603      	mov	r3, r0
 800805c:	4618      	mov	r0, r3
 800805e:	f7f8 f9db 	bl	8000418 <__aeabi_f2d>
 8008062:	f04f 0200 	mov.w	r2, #0
 8008066:	4b2f      	ldr	r3, [pc, #188]	; (8008124 <MPU9250SelfTest+0x6ec>)
 8008068:	f7f8 f876 	bl	8000158 <__aeabi_dsub>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	a129      	add	r1, pc, #164	; (adr r1, 8008118 <MPU9250SelfTest+0x6e0>)
 8008072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008076:	f002 feb7 	bl	800ade8 <pow>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4620      	mov	r0, r4
 8008080:	4629      	mov	r1, r5
 8008082:	f7f8 fa21 	bl	80004c8 <__aeabi_dmul>
 8008086:	4603      	mov	r3, r0
 8008088:	460c      	mov	r4, r1
 800808a:	4618      	mov	r0, r3
 800808c:	4621      	mov	r1, r4
 800808e:	f7f8 fceb 	bl	8000a68 <__aeabi_d2f>
 8008092:	4603      	mov	r3, r0
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8008096:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800809a:	f640 223c 	movw	r2, #2620	; 0xa3c
 800809e:	fa02 f303 	lsl.w	r3, r2, r3
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7f8 fdea 	bl	8000c7c <__aeabi_i2f>
 80080a8:	4603      	mov	r3, r0
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7f8 f9b4 	bl	8000418 <__aeabi_f2d>
 80080b0:	4604      	mov	r4, r0
 80080b2:	460d      	mov	r5, r1
 80080b4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7f8 fddb 	bl	8000c74 <__aeabi_ui2f>
 80080be:	4603      	mov	r3, r0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7f8 f9a9 	bl	8000418 <__aeabi_f2d>
 80080c6:	f04f 0200 	mov.w	r2, #0
 80080ca:	4b16      	ldr	r3, [pc, #88]	; (8008124 <MPU9250SelfTest+0x6ec>)
 80080cc:	f7f8 f844 	bl	8000158 <__aeabi_dsub>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	a110      	add	r1, pc, #64	; (adr r1, 8008118 <MPU9250SelfTest+0x6e0>)
 80080d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080da:	f002 fe85 	bl	800ade8 <pow>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4620      	mov	r0, r4
 80080e4:	4629      	mov	r1, r5
 80080e6:	f7f8 f9ef 	bl	80004c8 <__aeabi_dmul>
 80080ea:	4603      	mov	r3, r0
 80080ec:	460c      	mov	r4, r1
 80080ee:	4618      	mov	r0, r3
 80080f0:	4621      	mov	r1, r4
 80080f2:	f7f8 fcb9 	bl	8000a68 <__aeabi_d2f>
 80080f6:	4603      	mov	r3, r0
 80080f8:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 80080fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080fe:	f640 223c 	movw	r2, #2620	; 0xa3c
 8008102:	fa02 f303 	lsl.w	r3, r2, r3
 8008106:	4618      	mov	r0, r3
 8008108:	f7f8 fdb8 	bl	8000c7c <__aeabi_i2f>
 800810c:	4603      	mov	r3, r0
 800810e:	4618      	mov	r0, r3
 8008110:	e00a      	b.n	8008128 <MPU9250SelfTest+0x6f0>
 8008112:	bf00      	nop
 8008114:	f3af 8000 	nop.w
 8008118:	c28f5c29 	.word	0xc28f5c29
 800811c:	3ff028f5 	.word	0x3ff028f5
 8008120:	51eb851f 	.word	0x51eb851f
 8008124:	3ff00000 	.word	0x3ff00000
 8008128:	f7f8 f976 	bl	8000418 <__aeabi_f2d>
 800812c:	4604      	mov	r4, r0
 800812e:	460d      	mov	r5, r1
 8008130:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8008134:	4618      	mov	r0, r3
 8008136:	f7f8 fd9d 	bl	8000c74 <__aeabi_ui2f>
 800813a:	4603      	mov	r3, r0
 800813c:	4618      	mov	r0, r3
 800813e:	f7f8 f96b 	bl	8000418 <__aeabi_f2d>
 8008142:	f04f 0200 	mov.w	r2, #0
 8008146:	4ba8      	ldr	r3, [pc, #672]	; (80083e8 <MPU9250SelfTest+0x9b0>)
 8008148:	f7f8 f806 	bl	8000158 <__aeabi_dsub>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	a1a3      	add	r1, pc, #652	; (adr r1, 80083e0 <MPU9250SelfTest+0x9a8>)
 8008152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008156:	f002 fe47 	bl	800ade8 <pow>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f8 f9b1 	bl	80004c8 <__aeabi_dmul>
 8008166:	4603      	mov	r3, r0
 8008168:	460c      	mov	r4, r1
 800816a:	4618      	mov	r0, r3
 800816c:	4621      	mov	r1, r4
 800816e:	f7f8 fc7b 	bl	8000a68 <__aeabi_d2f>
 8008172:	4603      	mov	r3, r0
 8008174:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8008176:	2300      	movs	r3, #0
 8008178:	67fb      	str	r3, [r7, #124]	; 0x7c
 800817a:	e092      	b.n	80082a2 <MPU9250SelfTest+0x86a>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 800817c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008184:	4413      	add	r3, r2
 8008186:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800818a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8008192:	440b      	add	r3, r1
 8008194:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	4618      	mov	r0, r3
 800819c:	f7f8 fd6e 	bl	8000c7c <__aeabi_i2f>
 80081a0:	4603      	mov	r3, r0
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7f8 f938 	bl	8000418 <__aeabi_f2d>
 80081a8:	f04f 0200 	mov.w	r2, #0
 80081ac:	4b8f      	ldr	r3, [pc, #572]	; (80083ec <MPU9250SelfTest+0x9b4>)
 80081ae:	f7f8 f98b 	bl	80004c8 <__aeabi_dmul>
 80081b2:	4603      	mov	r3, r0
 80081b4:	460c      	mov	r4, r1
 80081b6:	4625      	mov	r5, r4
 80081b8:	461c      	mov	r4, r3
 80081ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80081c2:	4413      	add	r3, r2
 80081c4:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7f8 f925 	bl	8000418 <__aeabi_f2d>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4620      	mov	r0, r4
 80081d4:	4629      	mov	r1, r5
 80081d6:	f7f8 faa1 	bl	800071c <__aeabi_ddiv>
 80081da:	4603      	mov	r3, r0
 80081dc:	460c      	mov	r4, r1
 80081de:	4618      	mov	r0, r3
 80081e0:	4621      	mov	r1, r4
 80081e2:	f04f 0200 	mov.w	r2, #0
 80081e6:	4b81      	ldr	r3, [pc, #516]	; (80083ec <MPU9250SelfTest+0x9b4>)
 80081e8:	f7f7 ffb6 	bl	8000158 <__aeabi_dsub>
 80081ec:	4603      	mov	r3, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	4618      	mov	r0, r3
 80081f2:	4621      	mov	r1, r4
 80081f4:	f7f8 fc18 	bl	8000a28 <__aeabi_d2uiz>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8008202:	440b      	add	r3, r1
 8008204:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8008208:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008210:	4413      	add	r3, r2
 8008212:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8008216:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800821e:	440b      	add	r3, r1
 8008220:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	4618      	mov	r0, r3
 8008228:	f7f8 fd28 	bl	8000c7c <__aeabi_i2f>
 800822c:	4603      	mov	r3, r0
 800822e:	4618      	mov	r0, r3
 8008230:	f7f8 f8f2 	bl	8000418 <__aeabi_f2d>
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	4b6c      	ldr	r3, [pc, #432]	; (80083ec <MPU9250SelfTest+0x9b4>)
 800823a:	f7f8 f945 	bl	80004c8 <__aeabi_dmul>
 800823e:	4603      	mov	r3, r0
 8008240:	460c      	mov	r4, r1
 8008242:	4625      	mov	r5, r4
 8008244:	461c      	mov	r4, r3
 8008246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008248:	3303      	adds	r3, #3
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008250:	4413      	add	r3, r2
 8008252:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8008256:	4618      	mov	r0, r3
 8008258:	f7f8 f8de 	bl	8000418 <__aeabi_f2d>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7f8 fa5a 	bl	800071c <__aeabi_ddiv>
 8008268:	4603      	mov	r3, r0
 800826a:	460c      	mov	r4, r1
 800826c:	4618      	mov	r0, r3
 800826e:	4621      	mov	r1, r4
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	4b5d      	ldr	r3, [pc, #372]	; (80083ec <MPU9250SelfTest+0x9b4>)
 8008276:	f7f7 ff6f 	bl	8000158 <__aeabi_dsub>
 800827a:	4603      	mov	r3, r0
 800827c:	460c      	mov	r4, r1
 800827e:	4619      	mov	r1, r3
 8008280:	4622      	mov	r2, r4
 8008282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008284:	1cdc      	adds	r4, r3, #3
 8008286:	4608      	mov	r0, r1
 8008288:	4611      	mov	r1, r2
 800828a:	f7f8 fbcd 	bl	8000a28 <__aeabi_d2uiz>
 800828e:	4602      	mov	r2, r0
 8008290:	00a3      	lsls	r3, r4, #2
 8008292:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8008296:	440b      	add	r3, r1
 8008298:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 800829c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800829e:	3301      	adds	r3, #1
 80082a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	f77f af69 	ble.w	800817c <MPU9250SelfTest+0x744>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");
#endif

   for (int i = 0; i < 3; i++) {
 80082aa:	2300      	movs	r3, #0
 80082ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80082ae:	e08c      	b.n	80083ca <MPU9250SelfTest+0x992>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 80082b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80082b8:	4413      	add	r3, r2
 80082ba:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80082be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80082c6:	440b      	add	r3, r1
 80082c8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f8 fcd4 	bl	8000c7c <__aeabi_i2f>
 80082d4:	4603      	mov	r3, r0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7f8 f89e 	bl	8000418 <__aeabi_f2d>
 80082dc:	f04f 0200 	mov.w	r2, #0
 80082e0:	4b42      	ldr	r3, [pc, #264]	; (80083ec <MPU9250SelfTest+0x9b4>)
 80082e2:	f7f8 f8f1 	bl	80004c8 <__aeabi_dmul>
 80082e6:	4603      	mov	r3, r0
 80082e8:	460c      	mov	r4, r1
 80082ea:	4625      	mov	r5, r4
 80082ec:	461c      	mov	r4, r3
 80082ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80082f6:	4413      	add	r3, r2
 80082f8:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7f8 f88b 	bl	8000418 <__aeabi_f2d>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4620      	mov	r0, r4
 8008308:	4629      	mov	r1, r5
 800830a:	f7f8 fa07 	bl	800071c <__aeabi_ddiv>
 800830e:	4603      	mov	r3, r0
 8008310:	460c      	mov	r4, r1
 8008312:	4618      	mov	r0, r3
 8008314:	4621      	mov	r1, r4
 8008316:	f04f 0200 	mov.w	r2, #0
 800831a:	4b34      	ldr	r3, [pc, #208]	; (80083ec <MPU9250SelfTest+0x9b4>)
 800831c:	f7f7 ff1c 	bl	8000158 <__aeabi_dsub>
 8008320:	4603      	mov	r3, r0
 8008322:	460c      	mov	r4, r1
 8008324:	4618      	mov	r0, r3
 8008326:	4621      	mov	r1, r4
 8008328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	18d4      	adds	r4, r2, r3
 8008330:	f7f8 fb9a 	bl	8000a68 <__aeabi_d2f>
 8008334:	4603      	mov	r3, r0
 8008336:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8008338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008340:	4413      	add	r3, r2
 8008342:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8008346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800834e:	440b      	add	r3, r1
 8008350:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	4618      	mov	r0, r3
 8008358:	f7f8 fc90 	bl	8000c7c <__aeabi_i2f>
 800835c:	4603      	mov	r3, r0
 800835e:	4618      	mov	r0, r3
 8008360:	f7f8 f85a 	bl	8000418 <__aeabi_f2d>
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	4b20      	ldr	r3, [pc, #128]	; (80083ec <MPU9250SelfTest+0x9b4>)
 800836a:	f7f8 f8ad 	bl	80004c8 <__aeabi_dmul>
 800836e:	4603      	mov	r3, r0
 8008370:	460c      	mov	r4, r1
 8008372:	4625      	mov	r5, r4
 8008374:	461c      	mov	r4, r3
 8008376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008378:	3303      	adds	r3, #3
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008380:	4413      	add	r3, r2
 8008382:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8008386:	4618      	mov	r0, r3
 8008388:	f7f8 f846 	bl	8000418 <__aeabi_f2d>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4620      	mov	r0, r4
 8008392:	4629      	mov	r1, r5
 8008394:	f7f8 f9c2 	bl	800071c <__aeabi_ddiv>
 8008398:	4603      	mov	r3, r0
 800839a:	460c      	mov	r4, r1
 800839c:	4618      	mov	r0, r3
 800839e:	4621      	mov	r1, r4
 80083a0:	f04f 0200 	mov.w	r2, #0
 80083a4:	4b11      	ldr	r3, [pc, #68]	; (80083ec <MPU9250SelfTest+0x9b4>)
 80083a6:	f7f7 fed7 	bl	8000158 <__aeabi_dsub>
 80083aa:	4603      	mov	r3, r0
 80083ac:	460c      	mov	r4, r1
 80083ae:	4618      	mov	r0, r3
 80083b0:	4621      	mov	r1, r4
 80083b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083b4:	3303      	adds	r3, #3
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	18d4      	adds	r4, r2, r3
 80083bc:	f7f8 fb54 	bl	8000a68 <__aeabi_d2f>
 80083c0:	4603      	mov	r3, r0
 80083c2:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 80083c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083c6:	3301      	adds	r3, #1
 80083c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80083ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	f77f af6f 	ble.w	80082b0 <MPU9250SelfTest+0x878>
   }
}
 80083d2:	bf00      	nop
 80083d4:	3790      	adds	r7, #144	; 0x90
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bdb0      	pop	{r4, r5, r7, pc}
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	c28f5c29 	.word	0xc28f5c29
 80083e4:	3ff028f5 	.word	0x3ff028f5
 80083e8:	3ff00000 	.word	0x3ff00000
 80083ec:	40590000 	.word	0x40590000

080083f0 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 80083f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083f2:	b0ad      	sub	sp, #180	; 0xb4
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 80083fe:	4b8a      	ldr	r3, [pc, #552]	; (8008628 <QuaternionUpdate+0x238>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008406:	4b88      	ldr	r3, [pc, #544]	; (8008628 <QuaternionUpdate+0x238>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800840e:	4b86      	ldr	r3, [pc, #536]	; (8008628 <QuaternionUpdate+0x238>)
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008416:	4b84      	ldr	r3, [pc, #528]	; (8008628 <QuaternionUpdate+0x238>)
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 800841e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008422:	4619      	mov	r1, r3
 8008424:	4618      	mov	r0, r3
 8008426:	f7f8 fb75 	bl	8000b14 <__addsf3>
 800842a:	4603      	mov	r3, r0
 800842c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float _2q2 = 2.0f * q2;
 8008430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008434:	4619      	mov	r1, r3
 8008436:	4618      	mov	r0, r3
 8008438:	f7f8 fb6c 	bl	8000b14 <__addsf3>
 800843c:	4603      	mov	r3, r0
 800843e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float _2q3 = 2.0f * q3;
 8008442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008446:	4619      	mov	r1, r3
 8008448:	4618      	mov	r0, r3
 800844a:	f7f8 fb63 	bl	8000b14 <__addsf3>
 800844e:	4603      	mov	r3, r0
 8008450:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float _2q4 = 2.0f * q4;
 8008454:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008458:	4619      	mov	r1, r3
 800845a:	4618      	mov	r0, r3
 800845c:	f7f8 fb5a 	bl	8000b14 <__addsf3>
 8008460:	4603      	mov	r3, r0
 8008462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float _2q1q3 = 2.0f * q1 * q3;
 8008466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800846a:	4619      	mov	r1, r3
 800846c:	4618      	mov	r0, r3
 800846e:	f7f8 fb51 	bl	8000b14 <__addsf3>
 8008472:	4603      	mov	r3, r0
 8008474:	4619      	mov	r1, r3
 8008476:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800847a:	f7f8 fc53 	bl	8000d24 <__aeabi_fmul>
 800847e:	4603      	mov	r3, r0
 8008480:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float _2q3q4 = 2.0f * q3 * q4;
 8008484:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008488:	4619      	mov	r1, r3
 800848a:	4618      	mov	r0, r3
 800848c:	f7f8 fb42 	bl	8000b14 <__addsf3>
 8008490:	4603      	mov	r3, r0
 8008492:	4619      	mov	r1, r3
 8008494:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008498:	f7f8 fc44 	bl	8000d24 <__aeabi_fmul>
 800849c:	4603      	mov	r3, r0
 800849e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 80084a2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80084a6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80084aa:	f7f8 fc3b 	bl	8000d24 <__aeabi_fmul>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 80084b4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80084b8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80084bc:	f7f8 fc32 	bl	8000d24 <__aeabi_fmul>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 80084c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084ca:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80084ce:	f7f8 fc29 	bl	8000d24 <__aeabi_fmul>
 80084d2:	4603      	mov	r3, r0
 80084d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1q4 = q1 * q4;
 80084d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80084da:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80084de:	f7f8 fc21 	bl	8000d24 <__aeabi_fmul>
 80084e2:	4603      	mov	r3, r0
 80084e4:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2q2 = q2 * q2;
 80084e6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80084ea:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80084ee:	f7f8 fc19 	bl	8000d24 <__aeabi_fmul>
 80084f2:	4603      	mov	r3, r0
 80084f4:	677b      	str	r3, [r7, #116]	; 0x74
    float q2q3 = q2 * q3;
 80084f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084fa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80084fe:	f7f8 fc11 	bl	8000d24 <__aeabi_fmul>
 8008502:	4603      	mov	r3, r0
 8008504:	673b      	str	r3, [r7, #112]	; 0x70
    float q2q4 = q2 * q4;
 8008506:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800850a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800850e:	f7f8 fc09 	bl	8000d24 <__aeabi_fmul>
 8008512:	4603      	mov	r3, r0
 8008514:	66fb      	str	r3, [r7, #108]	; 0x6c
    float q3q3 = q3 * q3;
 8008516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800851a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800851e:	f7f8 fc01 	bl	8000d24 <__aeabi_fmul>
 8008522:	4603      	mov	r3, r0
 8008524:	66bb      	str	r3, [r7, #104]	; 0x68
    float q3q4 = q3 * q4;
 8008526:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800852a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800852e:	f7f8 fbf9 	bl	8000d24 <__aeabi_fmul>
 8008532:	4603      	mov	r3, r0
 8008534:	667b      	str	r3, [r7, #100]	; 0x64
    float q4q4 = q4 * q4;
 8008536:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800853a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800853e:	f7f8 fbf1 	bl	8000d24 <__aeabi_fmul>
 8008542:	4603      	mov	r3, r0
 8008544:	663b      	str	r3, [r7, #96]	; 0x60

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 8008546:	68f9      	ldr	r1, [r7, #12]
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f7f8 fbeb 	bl	8000d24 <__aeabi_fmul>
 800854e:	4603      	mov	r3, r0
 8008550:	461c      	mov	r4, r3
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	68b8      	ldr	r0, [r7, #8]
 8008556:	f7f8 fbe5 	bl	8000d24 <__aeabi_fmul>
 800855a:	4603      	mov	r3, r0
 800855c:	4619      	mov	r1, r3
 800855e:	4620      	mov	r0, r4
 8008560:	f7f8 fad8 	bl	8000b14 <__addsf3>
 8008564:	4603      	mov	r3, r0
 8008566:	461c      	mov	r4, r3
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7f8 fbda 	bl	8000d24 <__aeabi_fmul>
 8008570:	4603      	mov	r3, r0
 8008572:	4619      	mov	r1, r3
 8008574:	4620      	mov	r0, r4
 8008576:	f7f8 facd 	bl	8000b14 <__addsf3>
 800857a:	4603      	mov	r3, r0
 800857c:	4618      	mov	r0, r3
 800857e:	f002 fddf 	bl	800b140 <sqrtf>
 8008582:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 8008584:	f04f 0100 	mov.w	r1, #0
 8008588:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800858a:	f7f8 fd5f 	bl	800104c <__aeabi_fcmpeq>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	f040 87e3 	bne.w	800955c <QuaternionUpdate+0x116c>
    norm = 1.0f/norm;
 8008596:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008598:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800859c:	f7f8 fc76 	bl	8000e8c <__aeabi_fdiv>
 80085a0:	4603      	mov	r3, r0
 80085a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    ax *= norm;
 80085a4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7f8 fbbc 	bl	8000d24 <__aeabi_fmul>
 80085ac:	4603      	mov	r3, r0
 80085ae:	60fb      	str	r3, [r7, #12]
    ay *= norm;
 80085b0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80085b2:	68b8      	ldr	r0, [r7, #8]
 80085b4:	f7f8 fbb6 	bl	8000d24 <__aeabi_fmul>
 80085b8:	4603      	mov	r3, r0
 80085ba:	60bb      	str	r3, [r7, #8]
    az *= norm;
 80085bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7f8 fbb0 	bl	8000d24 <__aeabi_fmul>
 80085c4:	4603      	mov	r3, r0
 80085c6:	607b      	str	r3, [r7, #4]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 80085c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80085cc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80085d0:	f7f8 fba8 	bl	8000d24 <__aeabi_fmul>
 80085d4:	4603      	mov	r3, r0
 80085d6:	461c      	mov	r4, r3
 80085d8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80085dc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80085e0:	f7f8 fba0 	bl	8000d24 <__aeabi_fmul>
 80085e4:	4603      	mov	r3, r0
 80085e6:	4619      	mov	r1, r3
 80085e8:	4620      	mov	r0, r4
 80085ea:	f7f8 fa93 	bl	8000b14 <__addsf3>
 80085ee:	4603      	mov	r3, r0
 80085f0:	461c      	mov	r4, r3
 80085f2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80085f6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80085fa:	f7f8 fb93 	bl	8000d24 <__aeabi_fmul>
 80085fe:	4603      	mov	r3, r0
 8008600:	4619      	mov	r1, r3
 8008602:	4620      	mov	r0, r4
 8008604:	f7f8 fa86 	bl	8000b14 <__addsf3>
 8008608:	4603      	mov	r3, r0
 800860a:	4618      	mov	r0, r3
 800860c:	f002 fd98 	bl	800b140 <sqrtf>
 8008610:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (norm == 0.0f) return; // handle NaN
 8008612:	f04f 0100 	mov.w	r1, #0
 8008616:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008618:	f7f8 fd18 	bl	800104c <__aeabi_fcmpeq>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	f040 879e 	bne.w	8009560 <QuaternionUpdate+0x1170>
 8008624:	e002      	b.n	800862c <QuaternionUpdate+0x23c>
 8008626:	bf00      	nop
 8008628:	20000018 	.word	0x20000018
    norm = 1.0f/norm;
 800862c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800862e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008632:	f7f8 fc2b 	bl	8000e8c <__aeabi_fdiv>
 8008636:	4603      	mov	r3, r0
 8008638:	65fb      	str	r3, [r7, #92]	; 0x5c
    mx *= norm;
 800863a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800863c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008640:	f7f8 fb70 	bl	8000d24 <__aeabi_fmul>
 8008644:	4603      	mov	r3, r0
 8008646:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    my *= norm;
 800864a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800864c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8008650:	f7f8 fb68 	bl	8000d24 <__aeabi_fmul>
 8008654:	4603      	mov	r3, r0
 8008656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mz *= norm;
 800865a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800865c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008660:	f7f8 fb60 	bl	8000d24 <__aeabi_fmul>
 8008664:	4603      	mov	r3, r0
 8008666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 800866a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800866e:	4619      	mov	r1, r3
 8008670:	4618      	mov	r0, r3
 8008672:	f7f8 fa4f 	bl	8000b14 <__addsf3>
 8008676:	4603      	mov	r3, r0
 8008678:	4619      	mov	r1, r3
 800867a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800867e:	f7f8 fb51 	bl	8000d24 <__aeabi_fmul>
 8008682:	4603      	mov	r3, r0
 8008684:	65bb      	str	r3, [r7, #88]	; 0x58
    _2q1my = 2.0f * q1 * my;
 8008686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800868a:	4619      	mov	r1, r3
 800868c:	4618      	mov	r0, r3
 800868e:	f7f8 fa41 	bl	8000b14 <__addsf3>
 8008692:	4603      	mov	r3, r0
 8008694:	4619      	mov	r1, r3
 8008696:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800869a:	f7f8 fb43 	bl	8000d24 <__aeabi_fmul>
 800869e:	4603      	mov	r3, r0
 80086a0:	657b      	str	r3, [r7, #84]	; 0x54
    _2q1mz = 2.0f * q1 * mz;
 80086a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086a6:	4619      	mov	r1, r3
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7f8 fa33 	bl	8000b14 <__addsf3>
 80086ae:	4603      	mov	r3, r0
 80086b0:	4619      	mov	r1, r3
 80086b2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80086b6:	f7f8 fb35 	bl	8000d24 <__aeabi_fmul>
 80086ba:	4603      	mov	r3, r0
 80086bc:	653b      	str	r3, [r7, #80]	; 0x50
    _2q2mx = 2.0f * q2 * mx;
 80086be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086c2:	4619      	mov	r1, r3
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7f8 fa25 	bl	8000b14 <__addsf3>
 80086ca:	4603      	mov	r3, r0
 80086cc:	4619      	mov	r1, r3
 80086ce:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80086d2:	f7f8 fb27 	bl	8000d24 <__aeabi_fmul>
 80086d6:	4603      	mov	r3, r0
 80086d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 80086da:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80086de:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80086e2:	f7f8 fb1f 	bl	8000d24 <__aeabi_fmul>
 80086e6:	4603      	mov	r3, r0
 80086e8:	461c      	mov	r4, r3
 80086ea:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80086ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80086f0:	f7f8 fb18 	bl	8000d24 <__aeabi_fmul>
 80086f4:	4603      	mov	r3, r0
 80086f6:	4619      	mov	r1, r3
 80086f8:	4620      	mov	r0, r4
 80086fa:	f7f8 fa09 	bl	8000b10 <__aeabi_fsub>
 80086fe:	4603      	mov	r3, r0
 8008700:	461c      	mov	r4, r3
 8008702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008706:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008708:	f7f8 fb0c 	bl	8000d24 <__aeabi_fmul>
 800870c:	4603      	mov	r3, r0
 800870e:	4619      	mov	r1, r3
 8008710:	4620      	mov	r0, r4
 8008712:	f7f8 f9ff 	bl	8000b14 <__addsf3>
 8008716:	4603      	mov	r3, r0
 8008718:	461c      	mov	r4, r3
 800871a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800871c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008720:	f7f8 fb00 	bl	8000d24 <__aeabi_fmul>
 8008724:	4603      	mov	r3, r0
 8008726:	4619      	mov	r1, r3
 8008728:	4620      	mov	r0, r4
 800872a:	f7f8 f9f3 	bl	8000b14 <__addsf3>
 800872e:	4603      	mov	r3, r0
 8008730:	461c      	mov	r4, r3
 8008732:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008736:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800873a:	f7f8 faf3 	bl	8000d24 <__aeabi_fmul>
 800873e:	4603      	mov	r3, r0
 8008740:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008744:	4618      	mov	r0, r3
 8008746:	f7f8 faed 	bl	8000d24 <__aeabi_fmul>
 800874a:	4603      	mov	r3, r0
 800874c:	4619      	mov	r1, r3
 800874e:	4620      	mov	r0, r4
 8008750:	f7f8 f9e0 	bl	8000b14 <__addsf3>
 8008754:	4603      	mov	r3, r0
 8008756:	461c      	mov	r4, r3
 8008758:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800875c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008760:	f7f8 fae0 	bl	8000d24 <__aeabi_fmul>
 8008764:	4603      	mov	r3, r0
 8008766:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800876a:	4618      	mov	r0, r3
 800876c:	f7f8 fada 	bl	8000d24 <__aeabi_fmul>
 8008770:	4603      	mov	r3, r0
 8008772:	4619      	mov	r1, r3
 8008774:	4620      	mov	r0, r4
 8008776:	f7f8 f9cd 	bl	8000b14 <__addsf3>
 800877a:	4603      	mov	r3, r0
 800877c:	461c      	mov	r4, r3
 800877e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008780:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008784:	f7f8 face 	bl	8000d24 <__aeabi_fmul>
 8008788:	4603      	mov	r3, r0
 800878a:	4619      	mov	r1, r3
 800878c:	4620      	mov	r0, r4
 800878e:	f7f8 f9bf 	bl	8000b10 <__aeabi_fsub>
 8008792:	4603      	mov	r3, r0
 8008794:	461c      	mov	r4, r3
 8008796:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008798:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800879c:	f7f8 fac2 	bl	8000d24 <__aeabi_fmul>
 80087a0:	4603      	mov	r3, r0
 80087a2:	4619      	mov	r1, r3
 80087a4:	4620      	mov	r0, r4
 80087a6:	f7f8 f9b3 	bl	8000b10 <__aeabi_fsub>
 80087aa:	4603      	mov	r3, r0
 80087ac:	64bb      	str	r3, [r7, #72]	; 0x48
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80087ae:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80087b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80087b4:	f7f8 fab6 	bl	8000d24 <__aeabi_fmul>
 80087b8:	4603      	mov	r3, r0
 80087ba:	461c      	mov	r4, r3
 80087bc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80087c0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80087c4:	f7f8 faae 	bl	8000d24 <__aeabi_fmul>
 80087c8:	4603      	mov	r3, r0
 80087ca:	4619      	mov	r1, r3
 80087cc:	4620      	mov	r0, r4
 80087ce:	f7f8 f9a1 	bl	8000b14 <__addsf3>
 80087d2:	4603      	mov	r3, r0
 80087d4:	461c      	mov	r4, r3
 80087d6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80087da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80087dc:	f7f8 faa2 	bl	8000d24 <__aeabi_fmul>
 80087e0:	4603      	mov	r3, r0
 80087e2:	4619      	mov	r1, r3
 80087e4:	4620      	mov	r0, r4
 80087e6:	f7f8 f993 	bl	8000b10 <__aeabi_fsub>
 80087ea:	4603      	mov	r3, r0
 80087ec:	461c      	mov	r4, r3
 80087ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80087f4:	f7f8 fa96 	bl	8000d24 <__aeabi_fmul>
 80087f8:	4603      	mov	r3, r0
 80087fa:	4619      	mov	r1, r3
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7f8 f989 	bl	8000b14 <__addsf3>
 8008802:	4603      	mov	r3, r0
 8008804:	461c      	mov	r4, r3
 8008806:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008808:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800880c:	f7f8 fa8a 	bl	8000d24 <__aeabi_fmul>
 8008810:	4603      	mov	r3, r0
 8008812:	4619      	mov	r1, r3
 8008814:	4620      	mov	r0, r4
 8008816:	f7f8 f97b 	bl	8000b10 <__aeabi_fsub>
 800881a:	4603      	mov	r3, r0
 800881c:	461c      	mov	r4, r3
 800881e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008820:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8008824:	f7f8 fa7e 	bl	8000d24 <__aeabi_fmul>
 8008828:	4603      	mov	r3, r0
 800882a:	4619      	mov	r1, r3
 800882c:	4620      	mov	r0, r4
 800882e:	f7f8 f971 	bl	8000b14 <__addsf3>
 8008832:	4603      	mov	r3, r0
 8008834:	461c      	mov	r4, r3
 8008836:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800883a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800883e:	f7f8 fa71 	bl	8000d24 <__aeabi_fmul>
 8008842:	4603      	mov	r3, r0
 8008844:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008848:	4618      	mov	r0, r3
 800884a:	f7f8 fa6b 	bl	8000d24 <__aeabi_fmul>
 800884e:	4603      	mov	r3, r0
 8008850:	4619      	mov	r1, r3
 8008852:	4620      	mov	r0, r4
 8008854:	f7f8 f95e 	bl	8000b14 <__addsf3>
 8008858:	4603      	mov	r3, r0
 800885a:	461c      	mov	r4, r3
 800885c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800885e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8008862:	f7f8 fa5f 	bl	8000d24 <__aeabi_fmul>
 8008866:	4603      	mov	r3, r0
 8008868:	4619      	mov	r1, r3
 800886a:	4620      	mov	r0, r4
 800886c:	f7f8 f950 	bl	8000b10 <__aeabi_fsub>
 8008870:	4603      	mov	r3, r0
 8008872:	647b      	str	r3, [r7, #68]	; 0x44
    _2bx = sqrtf(hx * hx + hy * hy);
 8008874:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008876:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008878:	f7f8 fa54 	bl	8000d24 <__aeabi_fmul>
 800887c:	4603      	mov	r3, r0
 800887e:	461c      	mov	r4, r3
 8008880:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008882:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008884:	f7f8 fa4e 	bl	8000d24 <__aeabi_fmul>
 8008888:	4603      	mov	r3, r0
 800888a:	4619      	mov	r1, r3
 800888c:	4620      	mov	r0, r4
 800888e:	f7f8 f941 	bl	8000b14 <__addsf3>
 8008892:	4603      	mov	r3, r0
 8008894:	4618      	mov	r0, r3
 8008896:	f002 fc53 	bl	800b140 <sqrtf>
 800889a:	6438      	str	r0, [r7, #64]	; 0x40
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 800889c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800889e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80088a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f8 fa3c 	bl	8000d24 <__aeabi_fmul>
 80088ac:	4603      	mov	r3, r0
 80088ae:	461c      	mov	r4, r3
 80088b0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80088b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80088b6:	f7f8 fa35 	bl	8000d24 <__aeabi_fmul>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4619      	mov	r1, r3
 80088be:	4620      	mov	r0, r4
 80088c0:	f7f8 f928 	bl	8000b14 <__addsf3>
 80088c4:	4603      	mov	r3, r0
 80088c6:	461c      	mov	r4, r3
 80088c8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80088cc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80088d0:	f7f8 fa28 	bl	8000d24 <__aeabi_fmul>
 80088d4:	4603      	mov	r3, r0
 80088d6:	4619      	mov	r1, r3
 80088d8:	4620      	mov	r0, r4
 80088da:	f7f8 f91b 	bl	8000b14 <__addsf3>
 80088de:	4603      	mov	r3, r0
 80088e0:	461c      	mov	r4, r3
 80088e2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80088e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80088e8:	f7f8 fa1c 	bl	8000d24 <__aeabi_fmul>
 80088ec:	4603      	mov	r3, r0
 80088ee:	4619      	mov	r1, r3
 80088f0:	4620      	mov	r0, r4
 80088f2:	f7f8 f90f 	bl	8000b14 <__addsf3>
 80088f6:	4603      	mov	r3, r0
 80088f8:	461c      	mov	r4, r3
 80088fa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80088fc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008900:	f7f8 fa10 	bl	8000d24 <__aeabi_fmul>
 8008904:	4603      	mov	r3, r0
 8008906:	4619      	mov	r1, r3
 8008908:	4620      	mov	r0, r4
 800890a:	f7f8 f901 	bl	8000b10 <__aeabi_fsub>
 800890e:	4603      	mov	r3, r0
 8008910:	461c      	mov	r4, r3
 8008912:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008916:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800891a:	f7f8 fa03 	bl	8000d24 <__aeabi_fmul>
 800891e:	4603      	mov	r3, r0
 8008920:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008924:	4618      	mov	r0, r3
 8008926:	f7f8 f9fd 	bl	8000d24 <__aeabi_fmul>
 800892a:	4603      	mov	r3, r0
 800892c:	4619      	mov	r1, r3
 800892e:	4620      	mov	r0, r4
 8008930:	f7f8 f8f0 	bl	8000b14 <__addsf3>
 8008934:	4603      	mov	r3, r0
 8008936:	461c      	mov	r4, r3
 8008938:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800893a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800893e:	f7f8 f9f1 	bl	8000d24 <__aeabi_fmul>
 8008942:	4603      	mov	r3, r0
 8008944:	4619      	mov	r1, r3
 8008946:	4620      	mov	r0, r4
 8008948:	f7f8 f8e2 	bl	8000b10 <__aeabi_fsub>
 800894c:	4603      	mov	r3, r0
 800894e:	461c      	mov	r4, r3
 8008950:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008952:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8008956:	f7f8 f9e5 	bl	8000d24 <__aeabi_fmul>
 800895a:	4603      	mov	r3, r0
 800895c:	4619      	mov	r1, r3
 800895e:	4620      	mov	r0, r4
 8008960:	f7f8 f8d8 	bl	8000b14 <__addsf3>
 8008964:	4603      	mov	r3, r0
 8008966:	63fb      	str	r3, [r7, #60]	; 0x3c
    _4bx = 2.0f * _2bx;
 8008968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800896a:	4619      	mov	r1, r3
 800896c:	4618      	mov	r0, r3
 800896e:	f7f8 f8d1 	bl	8000b14 <__addsf3>
 8008972:	4603      	mov	r3, r0
 8008974:	63bb      	str	r3, [r7, #56]	; 0x38
    _4bz = 2.0f * _2bz;
 8008976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008978:	4619      	mov	r1, r3
 800897a:	4618      	mov	r0, r3
 800897c:	f7f8 f8ca 	bl	8000b14 <__addsf3>
 8008980:	4603      	mov	r3, r0
 8008982:	637b      	str	r3, [r7, #52]	; 0x34

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8008984:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008988:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800898c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800898e:	4619      	mov	r1, r3
 8008990:	4618      	mov	r0, r3
 8008992:	f7f8 f8bf 	bl	8000b14 <__addsf3>
 8008996:	4603      	mov	r3, r0
 8008998:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800899c:	4618      	mov	r0, r3
 800899e:	f7f8 f8b7 	bl	8000b10 <__aeabi_fsub>
 80089a2:	4603      	mov	r3, r0
 80089a4:	68f9      	ldr	r1, [r7, #12]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7f8 f8b2 	bl	8000b10 <__aeabi_fsub>
 80089ac:	4603      	mov	r3, r0
 80089ae:	4619      	mov	r1, r3
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7f8 f9b7 	bl	8000d24 <__aeabi_fmul>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461c      	mov	r4, r3
 80089ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089be:	4619      	mov	r1, r3
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7f8 f8a7 	bl	8000b14 <__addsf3>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7f8 f8a1 	bl	8000b14 <__addsf3>
 80089d2:	4603      	mov	r3, r0
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f8 f89a 	bl	8000b10 <__aeabi_fsub>
 80089dc:	4603      	mov	r3, r0
 80089de:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7f8 f99e 	bl	8000d24 <__aeabi_fmul>
 80089e8:	4603      	mov	r3, r0
 80089ea:	4619      	mov	r1, r3
 80089ec:	4620      	mov	r0, r4
 80089ee:	f7f8 f891 	bl	8000b14 <__addsf3>
 80089f2:	4603      	mov	r3, r0
 80089f4:	461c      	mov	r4, r3
 80089f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80089fc:	f7f8 f992 	bl	8000d24 <__aeabi_fmul>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461d      	mov	r5, r3
 8008a04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a06:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008a0a:	f7f8 f881 	bl	8000b10 <__aeabi_fsub>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f8 f87c 	bl	8000b10 <__aeabi_fsub>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7f8 f981 	bl	8000d24 <__aeabi_fmul>
 8008a22:	4603      	mov	r3, r0
 8008a24:	461e      	mov	r6, r3
 8008a26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008a2a:	f7f8 f871 	bl	8000b10 <__aeabi_fsub>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7f8 f976 	bl	8000d24 <__aeabi_fmul>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7f8 f869 	bl	8000b14 <__addsf3>
 8008a42:	4603      	mov	r3, r0
 8008a44:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7f8 f861 	bl	8000b10 <__aeabi_fsub>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4619      	mov	r1, r3
 8008a52:	4628      	mov	r0, r5
 8008a54:	f7f8 f966 	bl	8000d24 <__aeabi_fmul>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f7f8 f857 	bl	8000b10 <__aeabi_fsub>
 8008a62:	4603      	mov	r3, r0
 8008a64:	461c      	mov	r4, r3
 8008a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008a6c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7f8 f957 	bl	8000d24 <__aeabi_fmul>
 8008a76:	4603      	mov	r3, r0
 8008a78:	461d      	mov	r5, r3
 8008a7a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008a7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008a80:	f7f8 f950 	bl	8000d24 <__aeabi_fmul>
 8008a84:	4603      	mov	r3, r0
 8008a86:	4619      	mov	r1, r3
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f7f8 f843 	bl	8000b14 <__addsf3>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	461d      	mov	r5, r3
 8008a92:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008a94:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008a96:	f7f8 f83b 	bl	8000b10 <__aeabi_fsub>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7f8 f940 	bl	8000d24 <__aeabi_fmul>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	461e      	mov	r6, r3
 8008aa8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008aaa:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008aae:	f7f8 f831 	bl	8000b14 <__addsf3>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7f8 f934 	bl	8000d24 <__aeabi_fmul>
 8008abc:	4603      	mov	r3, r0
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7f8 f827 	bl	8000b14 <__addsf3>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7f8 f81f 	bl	8000b10 <__aeabi_fsub>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f7f8 f924 	bl	8000d24 <__aeabi_fmul>
 8008adc:	4603      	mov	r3, r0
 8008ade:	4619      	mov	r1, r3
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f7f8 f817 	bl	8000b14 <__addsf3>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	461c      	mov	r4, r3
 8008aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008aee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008af0:	f7f8 f918 	bl	8000d24 <__aeabi_fmul>
 8008af4:	4603      	mov	r3, r0
 8008af6:	461d      	mov	r5, r3
 8008af8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008afa:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008afc:	f7f8 f80a 	bl	8000b14 <__addsf3>
 8008b00:	4603      	mov	r3, r0
 8008b02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7f8 f90d 	bl	8000d24 <__aeabi_fmul>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	461e      	mov	r6, r3
 8008b0e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008b10:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008b14:	f7f7 fffc 	bl	8000b10 <__aeabi_fsub>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7f7 fff7 	bl	8000b10 <__aeabi_fsub>
 8008b22:	4603      	mov	r3, r0
 8008b24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7f8 f8fc 	bl	8000d24 <__aeabi_fmul>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7f7 ffef 	bl	8000b14 <__addsf3>
 8008b36:	4603      	mov	r3, r0
 8008b38:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7f7 ffe7 	bl	8000b10 <__aeabi_fsub>
 8008b42:	4603      	mov	r3, r0
 8008b44:	4619      	mov	r1, r3
 8008b46:	4628      	mov	r0, r5
 8008b48:	f7f8 f8ec 	bl	8000d24 <__aeabi_fmul>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4620      	mov	r0, r4
 8008b52:	f7f7 ffdf 	bl	8000b14 <__addsf3>
 8008b56:	4603      	mov	r3, r0
 8008b58:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8008b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7f7 ffd8 	bl	8000b14 <__addsf3>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7f7 ffd0 	bl	8000b10 <__aeabi_fsub>
 8008b70:	4603      	mov	r3, r0
 8008b72:	68f9      	ldr	r1, [r7, #12]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7f7 ffcb 	bl	8000b10 <__aeabi_fsub>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7f8 f8cf 	bl	8000d24 <__aeabi_fmul>
 8008b86:	4603      	mov	r3, r0
 8008b88:	461c      	mov	r4, r3
 8008b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7f7 ffbf 	bl	8000b14 <__addsf3>
 8008b96:	4603      	mov	r3, r0
 8008b98:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7f7 ffb9 	bl	8000b14 <__addsf3>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	68b9      	ldr	r1, [r7, #8]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7f7 ffb2 	bl	8000b10 <__aeabi_fsub>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7f8 f8b6 	bl	8000d24 <__aeabi_fmul>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f7f7 ffa9 	bl	8000b14 <__addsf3>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	461c      	mov	r4, r3
 8008bc6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8008bca:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8008bce:	f7f8 f8a9 	bl	8000d24 <__aeabi_fmul>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	461d      	mov	r5, r3
 8008bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7f7 ff9a 	bl	8000b14 <__addsf3>
 8008be0:	4603      	mov	r3, r0
 8008be2:	4619      	mov	r1, r3
 8008be4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008be8:	f7f7 ff92 	bl	8000b10 <__aeabi_fsub>
 8008bec:	4603      	mov	r3, r0
 8008bee:	461e      	mov	r6, r3
 8008bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7f7 ff8d 	bl	8000b14 <__addsf3>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f7f7 ff86 	bl	8000b10 <__aeabi_fsub>
 8008c04:	4603      	mov	r3, r0
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7f7 ff81 	bl	8000b10 <__aeabi_fsub>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	4619      	mov	r1, r3
 8008c12:	4628      	mov	r0, r5
 8008c14:	f7f8 f886 	bl	8000d24 <__aeabi_fmul>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f7f7 ff77 	bl	8000b10 <__aeabi_fsub>
 8008c22:	4603      	mov	r3, r0
 8008c24:	461c      	mov	r4, r3
 8008c26:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008c2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008c2c:	f7f8 f87a 	bl	8000d24 <__aeabi_fmul>
 8008c30:	4603      	mov	r3, r0
 8008c32:	461d      	mov	r5, r3
 8008c34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c36:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008c3a:	f7f7 ff69 	bl	8000b10 <__aeabi_fsub>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f7 ff64 	bl	8000b10 <__aeabi_fsub>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7f8 f869 	bl	8000d24 <__aeabi_fmul>
 8008c52:	4603      	mov	r3, r0
 8008c54:	461e      	mov	r6, r3
 8008c56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c5a:	f7f7 ff59 	bl	8000b10 <__aeabi_fsub>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7f8 f85e 	bl	8000d24 <__aeabi_fmul>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7f7 ff51 	bl	8000b14 <__addsf3>
 8008c72:	4603      	mov	r3, r0
 8008c74:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7f7 ff49 	bl	8000b10 <__aeabi_fsub>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4619      	mov	r1, r3
 8008c82:	4628      	mov	r0, r5
 8008c84:	f7f8 f84e 	bl	8000d24 <__aeabi_fmul>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f7f7 ff41 	bl	8000b14 <__addsf3>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461c      	mov	r4, r3
 8008c96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c9a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008c9c:	f7f8 f842 	bl	8000d24 <__aeabi_fmul>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	461d      	mov	r5, r3
 8008ca4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008ca8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008caa:	f7f8 f83b 	bl	8000d24 <__aeabi_fmul>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f7f7 ff2e 	bl	8000b14 <__addsf3>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	461d      	mov	r5, r3
 8008cbc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008cbe:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008cc0:	f7f7 ff26 	bl	8000b10 <__aeabi_fsub>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7f8 f82b 	bl	8000d24 <__aeabi_fmul>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	461e      	mov	r6, r3
 8008cd2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008cd4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008cd8:	f7f7 ff1c 	bl	8000b14 <__addsf3>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7f8 f81f 	bl	8000d24 <__aeabi_fmul>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4630      	mov	r0, r6
 8008cec:	f7f7 ff12 	bl	8000b14 <__addsf3>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7f7 ff0a 	bl	8000b10 <__aeabi_fsub>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	4619      	mov	r1, r3
 8008d00:	4628      	mov	r0, r5
 8008d02:	f7f8 f80f 	bl	8000d24 <__aeabi_fmul>
 8008d06:	4603      	mov	r3, r0
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f7f7 ff02 	bl	8000b14 <__addsf3>
 8008d10:	4603      	mov	r3, r0
 8008d12:	461c      	mov	r4, r3
 8008d14:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008d18:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008d1a:	f7f8 f803 	bl	8000d24 <__aeabi_fmul>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	461d      	mov	r5, r3
 8008d22:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008d26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008d28:	f7f7 fffc 	bl	8000d24 <__aeabi_fmul>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4628      	mov	r0, r5
 8008d32:	f7f7 feed 	bl	8000b10 <__aeabi_fsub>
 8008d36:	4603      	mov	r3, r0
 8008d38:	461d      	mov	r5, r3
 8008d3a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d3c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008d3e:	f7f7 fee9 	bl	8000b14 <__addsf3>
 8008d42:	4603      	mov	r3, r0
 8008d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7f7 ffec 	bl	8000d24 <__aeabi_fmul>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	461e      	mov	r6, r3
 8008d50:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008d52:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008d56:	f7f7 fedb 	bl	8000b10 <__aeabi_fsub>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7f7 fed6 	bl	8000b10 <__aeabi_fsub>
 8008d64:	4603      	mov	r3, r0
 8008d66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7f7 ffdb 	bl	8000d24 <__aeabi_fmul>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	4619      	mov	r1, r3
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7f7 fece 	bl	8000b14 <__addsf3>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7f7 fec6 	bl	8000b10 <__aeabi_fsub>
 8008d84:	4603      	mov	r3, r0
 8008d86:	4619      	mov	r1, r3
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f7f7 ffcb 	bl	8000d24 <__aeabi_fmul>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4619      	mov	r1, r3
 8008d92:	4620      	mov	r0, r4
 8008d94:	f7f7 febe 	bl	8000b14 <__addsf3>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8008d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008da0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8008da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008da6:	4619      	mov	r1, r3
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f7 feb3 	bl	8000b14 <__addsf3>
 8008dae:	4603      	mov	r3, r0
 8008db0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7f7 feab 	bl	8000b10 <__aeabi_fsub>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	68f9      	ldr	r1, [r7, #12]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7f7 fea6 	bl	8000b10 <__aeabi_fsub>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f7f7 ffab 	bl	8000d24 <__aeabi_fmul>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	461c      	mov	r4, r3
 8008dd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7f7 fe9b 	bl	8000b14 <__addsf3>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7f7 fe95 	bl	8000b14 <__addsf3>
 8008dea:	4603      	mov	r3, r0
 8008dec:	68b9      	ldr	r1, [r7, #8]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7f7 fe8e 	bl	8000b10 <__aeabi_fsub>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7f7 ff92 	bl	8000d24 <__aeabi_fmul>
 8008e00:	4603      	mov	r3, r0
 8008e02:	4619      	mov	r1, r3
 8008e04:	4620      	mov	r0, r4
 8008e06:	f7f7 fe85 	bl	8000b14 <__addsf3>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	461c      	mov	r4, r3
 8008e0e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8008e12:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008e16:	f7f7 ff85 	bl	8000d24 <__aeabi_fmul>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	461d      	mov	r5, r3
 8008e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e20:	4619      	mov	r1, r3
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f7 fe76 	bl	8000b14 <__addsf3>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008e30:	f7f7 fe6e 	bl	8000b10 <__aeabi_fsub>
 8008e34:	4603      	mov	r3, r0
 8008e36:	461e      	mov	r6, r3
 8008e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7f7 fe69 	bl	8000b14 <__addsf3>
 8008e42:	4603      	mov	r3, r0
 8008e44:	4619      	mov	r1, r3
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7f7 fe62 	bl	8000b10 <__aeabi_fsub>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7f7 fe5d 	bl	8000b10 <__aeabi_fsub>
 8008e56:	4603      	mov	r3, r0
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f7f7 ff62 	bl	8000d24 <__aeabi_fmul>
 8008e60:	4603      	mov	r3, r0
 8008e62:	4619      	mov	r1, r3
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7f7 fe53 	bl	8000b10 <__aeabi_fsub>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	461c      	mov	r4, r3
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008e74:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7f7 ff53 	bl	8000d24 <__aeabi_fmul>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	461d      	mov	r5, r3
 8008e82:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008e86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e88:	f7f7 ff4c 	bl	8000d24 <__aeabi_fmul>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4628      	mov	r0, r5
 8008e92:	f7f7 fe3d 	bl	8000b10 <__aeabi_fsub>
 8008e96:	4603      	mov	r3, r0
 8008e98:	461d      	mov	r5, r3
 8008e9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e9c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008ea0:	f7f7 fe36 	bl	8000b10 <__aeabi_fsub>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7f7 fe31 	bl	8000b10 <__aeabi_fsub>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7f7 ff36 	bl	8000d24 <__aeabi_fmul>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461e      	mov	r6, r3
 8008ebc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ebe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ec0:	f7f7 fe26 	bl	8000b10 <__aeabi_fsub>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7f7 ff2b 	bl	8000d24 <__aeabi_fmul>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7f7 fe1e 	bl	8000b14 <__addsf3>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7f7 fe16 	bl	8000b10 <__aeabi_fsub>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f7f7 ff1b 	bl	8000d24 <__aeabi_fmul>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f7f7 fe0e 	bl	8000b14 <__addsf3>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	461c      	mov	r4, r3
 8008efc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8008f00:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f02:	f7f7 ff0f 	bl	8000d24 <__aeabi_fmul>
 8008f06:	4603      	mov	r3, r0
 8008f08:	461d      	mov	r5, r3
 8008f0a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008f0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f10:	f7f7 ff08 	bl	8000d24 <__aeabi_fmul>
 8008f14:	4603      	mov	r3, r0
 8008f16:	4619      	mov	r1, r3
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f7f7 fdfb 	bl	8000b14 <__addsf3>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	461d      	mov	r5, r3
 8008f22:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008f24:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008f26:	f7f7 fdf3 	bl	8000b10 <__aeabi_fsub>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7f7 fef8 	bl	8000d24 <__aeabi_fmul>
 8008f34:	4603      	mov	r3, r0
 8008f36:	461e      	mov	r6, r3
 8008f38:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008f3a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008f3e:	f7f7 fde9 	bl	8000b14 <__addsf3>
 8008f42:	4603      	mov	r3, r0
 8008f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f7 feec 	bl	8000d24 <__aeabi_fmul>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4630      	mov	r0, r6
 8008f52:	f7f7 fddf 	bl	8000b14 <__addsf3>
 8008f56:	4603      	mov	r3, r0
 8008f58:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7f7 fdd7 	bl	8000b10 <__aeabi_fsub>
 8008f62:	4603      	mov	r3, r0
 8008f64:	4619      	mov	r1, r3
 8008f66:	4628      	mov	r0, r5
 8008f68:	f7f7 fedc 	bl	8000d24 <__aeabi_fmul>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4620      	mov	r0, r4
 8008f72:	f7f7 fdcf 	bl	8000b14 <__addsf3>
 8008f76:	4603      	mov	r3, r0
 8008f78:	461c      	mov	r4, r3
 8008f7a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008f7e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f80:	f7f7 fed0 	bl	8000d24 <__aeabi_fmul>
 8008f84:	4603      	mov	r3, r0
 8008f86:	461d      	mov	r5, r3
 8008f88:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008f8e:	f7f7 fec9 	bl	8000d24 <__aeabi_fmul>
 8008f92:	4603      	mov	r3, r0
 8008f94:	4619      	mov	r1, r3
 8008f96:	4628      	mov	r0, r5
 8008f98:	f7f7 fdba 	bl	8000b10 <__aeabi_fsub>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461d      	mov	r5, r3
 8008fa0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fa2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008fa4:	f7f7 fdb6 	bl	8000b14 <__addsf3>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7f7 feb9 	bl	8000d24 <__aeabi_fmul>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	461e      	mov	r6, r3
 8008fb6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008fb8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008fbc:	f7f7 fda8 	bl	8000b10 <__aeabi_fsub>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7f7 fda3 	bl	8000b10 <__aeabi_fsub>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f7 fea8 	bl	8000d24 <__aeabi_fmul>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7f7 fd9b 	bl	8000b14 <__addsf3>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7f7 fd93 	bl	8000b10 <__aeabi_fsub>
 8008fea:	4603      	mov	r3, r0
 8008fec:	4619      	mov	r1, r3
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f7f7 fe98 	bl	8000d24 <__aeabi_fmul>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f7f7 fd8b 	bl	8000b14 <__addsf3>
 8008ffe:	4603      	mov	r3, r0
 8009000:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8009002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009004:	4619      	mov	r1, r3
 8009006:	4618      	mov	r0, r3
 8009008:	f7f7 fd84 	bl	8000b14 <__addsf3>
 800900c:	4603      	mov	r3, r0
 800900e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009012:	4618      	mov	r0, r3
 8009014:	f7f7 fd7c 	bl	8000b10 <__aeabi_fsub>
 8009018:	4603      	mov	r3, r0
 800901a:	68f9      	ldr	r1, [r7, #12]
 800901c:	4618      	mov	r0, r3
 800901e:	f7f7 fd77 	bl	8000b10 <__aeabi_fsub>
 8009022:	4603      	mov	r3, r0
 8009024:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8009028:	4618      	mov	r0, r3
 800902a:	f7f7 fe7b 	bl	8000d24 <__aeabi_fmul>
 800902e:	4603      	mov	r3, r0
 8009030:	461c      	mov	r4, r3
 8009032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009036:	4619      	mov	r1, r3
 8009038:	4618      	mov	r0, r3
 800903a:	f7f7 fd6b 	bl	8000b14 <__addsf3>
 800903e:	4603      	mov	r3, r0
 8009040:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009044:	4618      	mov	r0, r3
 8009046:	f7f7 fd65 	bl	8000b14 <__addsf3>
 800904a:	4603      	mov	r3, r0
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	4618      	mov	r0, r3
 8009050:	f7f7 fd5e 	bl	8000b10 <__aeabi_fsub>
 8009054:	4603      	mov	r3, r0
 8009056:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800905a:	4618      	mov	r0, r3
 800905c:	f7f7 fe62 	bl	8000d24 <__aeabi_fmul>
 8009060:	4603      	mov	r3, r0
 8009062:	4619      	mov	r1, r3
 8009064:	4620      	mov	r0, r4
 8009066:	f7f7 fd55 	bl	8000b14 <__addsf3>
 800906a:	4603      	mov	r3, r0
 800906c:	461c      	mov	r4, r3
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009074:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009078:	4618      	mov	r0, r3
 800907a:	f7f7 fe53 	bl	8000d24 <__aeabi_fmul>
 800907e:	4603      	mov	r3, r0
 8009080:	461d      	mov	r5, r3
 8009082:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8009086:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009088:	f7f7 fe4c 	bl	8000d24 <__aeabi_fmul>
 800908c:	4603      	mov	r3, r0
 800908e:	4619      	mov	r1, r3
 8009090:	4628      	mov	r0, r5
 8009092:	f7f7 fd3f 	bl	8000b14 <__addsf3>
 8009096:	4603      	mov	r3, r0
 8009098:	461d      	mov	r5, r3
 800909a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800909c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80090a0:	f7f7 fd36 	bl	8000b10 <__aeabi_fsub>
 80090a4:	4603      	mov	r3, r0
 80090a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f7 fd31 	bl	8000b10 <__aeabi_fsub>
 80090ae:	4603      	mov	r3, r0
 80090b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f7 fe36 	bl	8000d24 <__aeabi_fmul>
 80090b8:	4603      	mov	r3, r0
 80090ba:	461e      	mov	r6, r3
 80090bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80090c0:	f7f7 fd26 	bl	8000b10 <__aeabi_fsub>
 80090c4:	4603      	mov	r3, r0
 80090c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7f7 fe2b 	bl	8000d24 <__aeabi_fmul>
 80090ce:	4603      	mov	r3, r0
 80090d0:	4619      	mov	r1, r3
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7f7 fd1e 	bl	8000b14 <__addsf3>
 80090d8:	4603      	mov	r3, r0
 80090da:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80090de:	4618      	mov	r0, r3
 80090e0:	f7f7 fd16 	bl	8000b10 <__aeabi_fsub>
 80090e4:	4603      	mov	r3, r0
 80090e6:	4619      	mov	r1, r3
 80090e8:	4628      	mov	r0, r5
 80090ea:	f7f7 fe1b 	bl	8000d24 <__aeabi_fmul>
 80090ee:	4603      	mov	r3, r0
 80090f0:	4619      	mov	r1, r3
 80090f2:	4620      	mov	r0, r4
 80090f4:	f7f7 fd0e 	bl	8000b14 <__addsf3>
 80090f8:	4603      	mov	r3, r0
 80090fa:	461c      	mov	r4, r3
 80090fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009102:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009106:	4618      	mov	r0, r3
 8009108:	f7f7 fe0c 	bl	8000d24 <__aeabi_fmul>
 800910c:	4603      	mov	r3, r0
 800910e:	461d      	mov	r5, r3
 8009110:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009114:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009116:	f7f7 fe05 	bl	8000d24 <__aeabi_fmul>
 800911a:	4603      	mov	r3, r0
 800911c:	4619      	mov	r1, r3
 800911e:	4628      	mov	r0, r5
 8009120:	f7f7 fcf8 	bl	8000b14 <__addsf3>
 8009124:	4603      	mov	r3, r0
 8009126:	461d      	mov	r5, r3
 8009128:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800912a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800912c:	f7f7 fcf0 	bl	8000b10 <__aeabi_fsub>
 8009130:	4603      	mov	r3, r0
 8009132:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009134:	4618      	mov	r0, r3
 8009136:	f7f7 fdf5 	bl	8000d24 <__aeabi_fmul>
 800913a:	4603      	mov	r3, r0
 800913c:	461e      	mov	r6, r3
 800913e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009140:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8009144:	f7f7 fce6 	bl	8000b14 <__addsf3>
 8009148:	4603      	mov	r3, r0
 800914a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800914c:	4618      	mov	r0, r3
 800914e:	f7f7 fde9 	bl	8000d24 <__aeabi_fmul>
 8009152:	4603      	mov	r3, r0
 8009154:	4619      	mov	r1, r3
 8009156:	4630      	mov	r0, r6
 8009158:	f7f7 fcdc 	bl	8000b14 <__addsf3>
 800915c:	4603      	mov	r3, r0
 800915e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8009162:	4618      	mov	r0, r3
 8009164:	f7f7 fcd4 	bl	8000b10 <__aeabi_fsub>
 8009168:	4603      	mov	r3, r0
 800916a:	4619      	mov	r1, r3
 800916c:	4628      	mov	r0, r5
 800916e:	f7f7 fdd9 	bl	8000d24 <__aeabi_fmul>
 8009172:	4603      	mov	r3, r0
 8009174:	4619      	mov	r1, r3
 8009176:	4620      	mov	r0, r4
 8009178:	f7f7 fccc 	bl	8000b14 <__addsf3>
 800917c:	4603      	mov	r3, r0
 800917e:	461c      	mov	r4, r3
 8009180:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8009184:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009186:	f7f7 fdcd 	bl	8000d24 <__aeabi_fmul>
 800918a:	4603      	mov	r3, r0
 800918c:	461d      	mov	r5, r3
 800918e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009190:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8009192:	f7f7 fcbf 	bl	8000b14 <__addsf3>
 8009196:	4603      	mov	r3, r0
 8009198:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800919a:	4618      	mov	r0, r3
 800919c:	f7f7 fdc2 	bl	8000d24 <__aeabi_fmul>
 80091a0:	4603      	mov	r3, r0
 80091a2:	461e      	mov	r6, r3
 80091a4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80091a6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80091aa:	f7f7 fcb1 	bl	8000b10 <__aeabi_fsub>
 80091ae:	4603      	mov	r3, r0
 80091b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f7 fcac 	bl	8000b10 <__aeabi_fsub>
 80091b8:	4603      	mov	r3, r0
 80091ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091bc:	4618      	mov	r0, r3
 80091be:	f7f7 fdb1 	bl	8000d24 <__aeabi_fmul>
 80091c2:	4603      	mov	r3, r0
 80091c4:	4619      	mov	r1, r3
 80091c6:	4630      	mov	r0, r6
 80091c8:	f7f7 fca4 	bl	8000b14 <__addsf3>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7f7 fc9c 	bl	8000b10 <__aeabi_fsub>
 80091d8:	4603      	mov	r3, r0
 80091da:	4619      	mov	r1, r3
 80091dc:	4628      	mov	r0, r5
 80091de:	f7f7 fda1 	bl	8000d24 <__aeabi_fmul>
 80091e2:	4603      	mov	r3, r0
 80091e4:	4619      	mov	r1, r3
 80091e6:	4620      	mov	r0, r4
 80091e8:	f7f7 fc94 	bl	8000b14 <__addsf3>
 80091ec:	4603      	mov	r3, r0
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 80091f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091f4:	f7f7 fd96 	bl	8000d24 <__aeabi_fmul>
 80091f8:	4603      	mov	r3, r0
 80091fa:	461c      	mov	r4, r3
 80091fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009200:	f7f7 fd90 	bl	8000d24 <__aeabi_fmul>
 8009204:	4603      	mov	r3, r0
 8009206:	4619      	mov	r1, r3
 8009208:	4620      	mov	r0, r4
 800920a:	f7f7 fc83 	bl	8000b14 <__addsf3>
 800920e:	4603      	mov	r3, r0
 8009210:	461c      	mov	r4, r3
 8009212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009216:	f7f7 fd85 	bl	8000d24 <__aeabi_fmul>
 800921a:	4603      	mov	r3, r0
 800921c:	4619      	mov	r1, r3
 800921e:	4620      	mov	r0, r4
 8009220:	f7f7 fc78 	bl	8000b14 <__addsf3>
 8009224:	4603      	mov	r3, r0
 8009226:	461c      	mov	r4, r3
 8009228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800922a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800922c:	f7f7 fd7a 	bl	8000d24 <__aeabi_fmul>
 8009230:	4603      	mov	r3, r0
 8009232:	4619      	mov	r1, r3
 8009234:	4620      	mov	r0, r4
 8009236:	f7f7 fc6d 	bl	8000b14 <__addsf3>
 800923a:	4603      	mov	r3, r0
 800923c:	4618      	mov	r0, r3
 800923e:	f001 ff7f 	bl	800b140 <sqrtf>
 8009242:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 8009244:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009246:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800924a:	f7f7 fe1f 	bl	8000e8c <__aeabi_fdiv>
 800924e:	4603      	mov	r3, r0
 8009250:	65fb      	str	r3, [r7, #92]	; 0x5c
    s1 *= norm;
 8009252:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009256:	f7f7 fd65 	bl	8000d24 <__aeabi_fmul>
 800925a:	4603      	mov	r3, r0
 800925c:	633b      	str	r3, [r7, #48]	; 0x30
    s2 *= norm;
 800925e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009262:	f7f7 fd5f 	bl	8000d24 <__aeabi_fmul>
 8009266:	4603      	mov	r3, r0
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 *= norm;
 800926a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800926c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926e:	f7f7 fd59 	bl	8000d24 <__aeabi_fmul>
 8009272:	4603      	mov	r3, r0
 8009274:	62bb      	str	r3, [r7, #40]	; 0x28
    s4 *= norm;
 8009276:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800927a:	f7f7 fd53 	bl	8000d24 <__aeabi_fmul>
 800927e:	4603      	mov	r3, r0
 8009280:	627b      	str	r3, [r7, #36]	; 0x24

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8009282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009286:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	4618      	mov	r0, r3
 800928e:	f7f7 fd49 	bl	8000d24 <__aeabi_fmul>
 8009292:	4603      	mov	r3, r0
 8009294:	461c      	mov	r4, r3
 8009296:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800929a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800929e:	f7f7 fd41 	bl	8000d24 <__aeabi_fmul>
 80092a2:	4603      	mov	r3, r0
 80092a4:	4619      	mov	r1, r3
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7f7 fc32 	bl	8000b10 <__aeabi_fsub>
 80092ac:	4603      	mov	r3, r0
 80092ae:	461c      	mov	r4, r3
 80092b0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80092b4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80092b8:	f7f7 fd34 	bl	8000d24 <__aeabi_fmul>
 80092bc:	4603      	mov	r3, r0
 80092be:	4619      	mov	r1, r3
 80092c0:	4620      	mov	r0, r4
 80092c2:	f7f7 fc25 	bl	8000b10 <__aeabi_fsub>
 80092c6:	4603      	mov	r3, r0
 80092c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7f7 fd29 	bl	8000d24 <__aeabi_fmul>
 80092d2:	4603      	mov	r3, r0
 80092d4:	461c      	mov	r4, r3
 80092d6:	4ba4      	ldr	r3, [pc, #656]	; (8009568 <QuaternionUpdate+0x1178>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f7 fd21 	bl	8000d24 <__aeabi_fmul>
 80092e2:	4603      	mov	r3, r0
 80092e4:	4619      	mov	r1, r3
 80092e6:	4620      	mov	r0, r4
 80092e8:	f7f7 fc12 	bl	8000b10 <__aeabi_fsub>
 80092ec:	4603      	mov	r3, r0
 80092ee:	623b      	str	r3, [r7, #32]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80092f6:	f7f7 fd15 	bl	8000d24 <__aeabi_fmul>
 80092fa:	4603      	mov	r3, r0
 80092fc:	461c      	mov	r4, r3
 80092fe:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8009302:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009306:	f7f7 fd0d 	bl	8000d24 <__aeabi_fmul>
 800930a:	4603      	mov	r3, r0
 800930c:	4619      	mov	r1, r3
 800930e:	4620      	mov	r0, r4
 8009310:	f7f7 fc00 	bl	8000b14 <__addsf3>
 8009314:	4603      	mov	r3, r0
 8009316:	461c      	mov	r4, r3
 8009318:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800931c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009320:	f7f7 fd00 	bl	8000d24 <__aeabi_fmul>
 8009324:	4603      	mov	r3, r0
 8009326:	4619      	mov	r1, r3
 8009328:	4620      	mov	r0, r4
 800932a:	f7f7 fbf1 	bl	8000b10 <__aeabi_fsub>
 800932e:	4603      	mov	r3, r0
 8009330:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009334:	4618      	mov	r0, r3
 8009336:	f7f7 fcf5 	bl	8000d24 <__aeabi_fmul>
 800933a:	4603      	mov	r3, r0
 800933c:	461c      	mov	r4, r3
 800933e:	4b8a      	ldr	r3, [pc, #552]	; (8009568 <QuaternionUpdate+0x1178>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009344:	4618      	mov	r0, r3
 8009346:	f7f7 fced 	bl	8000d24 <__aeabi_fmul>
 800934a:	4603      	mov	r3, r0
 800934c:	4619      	mov	r1, r3
 800934e:	4620      	mov	r0, r4
 8009350:	f7f7 fbde 	bl	8000b10 <__aeabi_fsub>
 8009354:	4603      	mov	r3, r0
 8009356:	61fb      	str	r3, [r7, #28]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8009358:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800935c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009360:	f7f7 fce0 	bl	8000d24 <__aeabi_fmul>
 8009364:	4603      	mov	r3, r0
 8009366:	461c      	mov	r4, r3
 8009368:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800936c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009370:	f7f7 fcd8 	bl	8000d24 <__aeabi_fmul>
 8009374:	4603      	mov	r3, r0
 8009376:	4619      	mov	r1, r3
 8009378:	4620      	mov	r0, r4
 800937a:	f7f7 fbc9 	bl	8000b10 <__aeabi_fsub>
 800937e:	4603      	mov	r3, r0
 8009380:	461c      	mov	r4, r3
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009388:	f7f7 fccc 	bl	8000d24 <__aeabi_fmul>
 800938c:	4603      	mov	r3, r0
 800938e:	4619      	mov	r1, r3
 8009390:	4620      	mov	r0, r4
 8009392:	f7f7 fbbf 	bl	8000b14 <__addsf3>
 8009396:	4603      	mov	r3, r0
 8009398:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800939c:	4618      	mov	r0, r3
 800939e:	f7f7 fcc1 	bl	8000d24 <__aeabi_fmul>
 80093a2:	4603      	mov	r3, r0
 80093a4:	461c      	mov	r4, r3
 80093a6:	4b70      	ldr	r3, [pc, #448]	; (8009568 <QuaternionUpdate+0x1178>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7f7 fcb9 	bl	8000d24 <__aeabi_fmul>
 80093b2:	4603      	mov	r3, r0
 80093b4:	4619      	mov	r1, r3
 80093b6:	4620      	mov	r0, r4
 80093b8:	f7f7 fbaa 	bl	8000b10 <__aeabi_fsub>
 80093bc:	4603      	mov	r3, r0
 80093be:	61bb      	str	r3, [r7, #24]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 80093c0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80093c4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80093c8:	f7f7 fcac 	bl	8000d24 <__aeabi_fmul>
 80093cc:	4603      	mov	r3, r0
 80093ce:	461c      	mov	r4, r3
 80093d0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80093d4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80093d8:	f7f7 fca4 	bl	8000d24 <__aeabi_fmul>
 80093dc:	4603      	mov	r3, r0
 80093de:	4619      	mov	r1, r3
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7f7 fb97 	bl	8000b14 <__addsf3>
 80093e6:	4603      	mov	r3, r0
 80093e8:	461c      	mov	r4, r3
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80093f0:	f7f7 fc98 	bl	8000d24 <__aeabi_fmul>
 80093f4:	4603      	mov	r3, r0
 80093f6:	4619      	mov	r1, r3
 80093f8:	4620      	mov	r0, r4
 80093fa:	f7f7 fb89 	bl	8000b10 <__aeabi_fsub>
 80093fe:	4603      	mov	r3, r0
 8009400:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009404:	4618      	mov	r0, r3
 8009406:	f7f7 fc8d 	bl	8000d24 <__aeabi_fmul>
 800940a:	4603      	mov	r3, r0
 800940c:	461c      	mov	r4, r3
 800940e:	4b56      	ldr	r3, [pc, #344]	; (8009568 <QuaternionUpdate+0x1178>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009414:	4618      	mov	r0, r3
 8009416:	f7f7 fc85 	bl	8000d24 <__aeabi_fmul>
 800941a:	4603      	mov	r3, r0
 800941c:	4619      	mov	r1, r3
 800941e:	4620      	mov	r0, r4
 8009420:	f7f7 fb76 	bl	8000b10 <__aeabi_fsub>
 8009424:	4603      	mov	r3, r0
 8009426:	617b      	str	r3, [r7, #20]

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8009428:	4b50      	ldr	r3, [pc, #320]	; (800956c <QuaternionUpdate+0x117c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6a39      	ldr	r1, [r7, #32]
 800942e:	4618      	mov	r0, r3
 8009430:	f7f7 fc78 	bl	8000d24 <__aeabi_fmul>
 8009434:	4603      	mov	r3, r0
 8009436:	4619      	mov	r1, r3
 8009438:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800943c:	f7f7 fb6a 	bl	8000b14 <__addsf3>
 8009440:	4603      	mov	r3, r0
 8009442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q2 += qDot2 * deltat;
 8009446:	4b49      	ldr	r3, [pc, #292]	; (800956c <QuaternionUpdate+0x117c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69f9      	ldr	r1, [r7, #28]
 800944c:	4618      	mov	r0, r3
 800944e:	f7f7 fc69 	bl	8000d24 <__aeabi_fmul>
 8009452:	4603      	mov	r3, r0
 8009454:	4619      	mov	r1, r3
 8009456:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800945a:	f7f7 fb5b 	bl	8000b14 <__addsf3>
 800945e:	4603      	mov	r3, r0
 8009460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q3 += qDot3 * deltat;
 8009464:	4b41      	ldr	r3, [pc, #260]	; (800956c <QuaternionUpdate+0x117c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69b9      	ldr	r1, [r7, #24]
 800946a:	4618      	mov	r0, r3
 800946c:	f7f7 fc5a 	bl	8000d24 <__aeabi_fmul>
 8009470:	4603      	mov	r3, r0
 8009472:	4619      	mov	r1, r3
 8009474:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009478:	f7f7 fb4c 	bl	8000b14 <__addsf3>
 800947c:	4603      	mov	r3, r0
 800947e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q4 += qDot4 * deltat;
 8009482:	4b3a      	ldr	r3, [pc, #232]	; (800956c <QuaternionUpdate+0x117c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6979      	ldr	r1, [r7, #20]
 8009488:	4618      	mov	r0, r3
 800948a:	f7f7 fc4b 	bl	8000d24 <__aeabi_fmul>
 800948e:	4603      	mov	r3, r0
 8009490:	4619      	mov	r1, r3
 8009492:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009496:	f7f7 fb3d 	bl	8000b14 <__addsf3>
 800949a:	4603      	mov	r3, r0
 800949c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80094a0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80094a4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80094a8:	f7f7 fc3c 	bl	8000d24 <__aeabi_fmul>
 80094ac:	4603      	mov	r3, r0
 80094ae:	461c      	mov	r4, r3
 80094b0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80094b4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80094b8:	f7f7 fc34 	bl	8000d24 <__aeabi_fmul>
 80094bc:	4603      	mov	r3, r0
 80094be:	4619      	mov	r1, r3
 80094c0:	4620      	mov	r0, r4
 80094c2:	f7f7 fb27 	bl	8000b14 <__addsf3>
 80094c6:	4603      	mov	r3, r0
 80094c8:	461c      	mov	r4, r3
 80094ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094ce:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80094d2:	f7f7 fc27 	bl	8000d24 <__aeabi_fmul>
 80094d6:	4603      	mov	r3, r0
 80094d8:	4619      	mov	r1, r3
 80094da:	4620      	mov	r0, r4
 80094dc:	f7f7 fb1a 	bl	8000b14 <__addsf3>
 80094e0:	4603      	mov	r3, r0
 80094e2:	461c      	mov	r4, r3
 80094e4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80094e8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80094ec:	f7f7 fc1a 	bl	8000d24 <__aeabi_fmul>
 80094f0:	4603      	mov	r3, r0
 80094f2:	4619      	mov	r1, r3
 80094f4:	4620      	mov	r0, r4
 80094f6:	f7f7 fb0d 	bl	8000b14 <__addsf3>
 80094fa:	4603      	mov	r3, r0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f001 fe1f 	bl	800b140 <sqrtf>
 8009502:	65f8      	str	r0, [r7, #92]	; 0x5c
    norm = 1.0f/norm;
 8009504:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009506:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800950a:	f7f7 fcbf 	bl	8000e8c <__aeabi_fdiv>
 800950e:	4603      	mov	r3, r0
 8009510:	65fb      	str	r3, [r7, #92]	; 0x5c
    q[0] = q1 * norm;
 8009512:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009514:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009518:	f7f7 fc04 	bl	8000d24 <__aeabi_fmul>
 800951c:	4603      	mov	r3, r0
 800951e:	461a      	mov	r2, r3
 8009520:	4b13      	ldr	r3, [pc, #76]	; (8009570 <QuaternionUpdate+0x1180>)
 8009522:	601a      	str	r2, [r3, #0]
    q[1] = q2 * norm;
 8009524:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009526:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800952a:	f7f7 fbfb 	bl	8000d24 <__aeabi_fmul>
 800952e:	4603      	mov	r3, r0
 8009530:	461a      	mov	r2, r3
 8009532:	4b0f      	ldr	r3, [pc, #60]	; (8009570 <QuaternionUpdate+0x1180>)
 8009534:	605a      	str	r2, [r3, #4]
    q[2] = q3 * norm;
 8009536:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009538:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800953c:	f7f7 fbf2 	bl	8000d24 <__aeabi_fmul>
 8009540:	4603      	mov	r3, r0
 8009542:	461a      	mov	r2, r3
 8009544:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <QuaternionUpdate+0x1180>)
 8009546:	609a      	str	r2, [r3, #8]
    q[3] = q4 * norm;
 8009548:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800954a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800954e:	f7f7 fbe9 	bl	8000d24 <__aeabi_fmul>
 8009552:	4603      	mov	r3, r0
 8009554:	461a      	mov	r2, r3
 8009556:	4b06      	ldr	r3, [pc, #24]	; (8009570 <QuaternionUpdate+0x1180>)
 8009558:	60da      	str	r2, [r3, #12]
 800955a:	e002      	b.n	8009562 <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 800955c:	bf00      	nop
 800955e:	e000      	b.n	8009562 <QuaternionUpdate+0x1172>
    if (norm == 0.0f) return; // handle NaN
 8009560:	bf00      	nop

}
 8009562:	37b4      	adds	r7, #180	; 0xb4
 8009564:	46bd      	mov	sp, r7
 8009566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009568:	20000014 	.word	0x20000014
 800956c:	20000118 	.word	0x20000118
 8009570:	20000018 	.word	0x20000018

08009574 <nRF24_CSN_L>:
{
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L()
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8009578:	2200      	movs	r2, #0
 800957a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800957e:	4802      	ldr	r0, [pc, #8]	; (8009588 <nRF24_CSN_L+0x14>)
 8009580:	f7f8 fb7c 	bl	8001c7c <HAL_GPIO_WritePin>
}
 8009584:	bf00      	nop
 8009586:	bd80      	pop	{r7, pc}
 8009588:	40010c00 	.word	0x40010c00

0800958c <nRF24_CSN_H>:

static inline void nRF24_CSN_H()
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8009590:	2201      	movs	r2, #1
 8009592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009596:	4802      	ldr	r0, [pc, #8]	; (80095a0 <nRF24_CSN_H+0x14>)
 8009598:	f7f8 fb70 	bl	8001c7c <HAL_GPIO_WritePin>
}
 800959c:	bf00      	nop
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	40010c00 	.word	0x40010c00

080095a4 <nRF24_LL_RW>:

static inline uint8_t nRF24_LL_RW(uint8_t data)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	4603      	mov	r3, r0
 80095ac:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if (HAL_SPI_TransmitReceive(&hspi2, &data, &result, 1, 2000) != HAL_OK)
 80095ae:	f107 020f 	add.w	r2, r7, #15
 80095b2:	1df9      	adds	r1, r7, #7
 80095b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	2301      	movs	r3, #1
 80095bc:	4806      	ldr	r0, [pc, #24]	; (80095d8 <nRF24_LL_RW+0x34>)
 80095be:	f7fa f81d 	bl	80035fc <HAL_SPI_TransmitReceive>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <nRF24_LL_RW+0x28>
    {
        Error_Handler();
 80095c8:	f7fc fc78 	bl	8005ebc <Error_Handler>
    };
    return result;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	200001ac 	.word	0x200001ac

080095dc <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80095e6:	f7ff ffc5 	bl	8009574 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80095ea:	79fb      	ldrb	r3, [r7, #7]
 80095ec:	f003 031f 	and.w	r3, r3, #31
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff ffd6 	bl	80095a4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80095f8:	20ff      	movs	r0, #255	; 0xff
 80095fa:	f7ff ffd3 	bl	80095a4 <nRF24_LL_RW>
 80095fe:	4603      	mov	r3, r0
 8009600:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8009602:	f7ff ffc3 	bl	800958c <nRF24_CSN_H>

	return value;
 8009606:	7bfb      	ldrb	r3, [r7, #15]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	460a      	mov	r2, r1
 800961a:	71fb      	strb	r3, [r7, #7]
 800961c:	4613      	mov	r3, r2
 800961e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8009620:	f7ff ffa8 	bl	8009574 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 8009624:	79fb      	ldrb	r3, [r7, #7]
 8009626:	2b1f      	cmp	r3, #31
 8009628:	d810      	bhi.n	800964c <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800962a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800962e:	f003 031f 	and.w	r3, r3, #31
 8009632:	b25b      	sxtb	r3, r3
 8009634:	f043 0320 	orr.w	r3, r3, #32
 8009638:	b25b      	sxtb	r3, r3
 800963a:	b2db      	uxtb	r3, r3
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff ffb1 	bl	80095a4 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8009642:	79bb      	ldrb	r3, [r7, #6]
 8009644:	4618      	mov	r0, r3
 8009646:	f7ff ffad 	bl	80095a4 <nRF24_LL_RW>
 800964a:	e013      	b.n	8009674 <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff ffa8 	bl	80095a4 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 8009654:	79fb      	ldrb	r3, [r7, #7]
 8009656:	2be1      	cmp	r3, #225	; 0xe1
 8009658:	d00c      	beq.n	8009674 <nRF24_WriteReg+0x64>
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	2be2      	cmp	r3, #226	; 0xe2
 800965e:	d009      	beq.n	8009674 <nRF24_WriteReg+0x64>
 8009660:	79fb      	ldrb	r3, [r7, #7]
 8009662:	2be3      	cmp	r3, #227	; 0xe3
 8009664:	d006      	beq.n	8009674 <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	2bff      	cmp	r3, #255	; 0xff
 800966a:	d003      	beq.n	8009674 <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 800966c:	79bb      	ldrb	r3, [r7, #6]
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff ff98 	bl	80095a4 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8009674:	f7ff ff8a 	bl	800958c <nRF24_CSN_H>
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8009680:	b590      	push	{r4, r7, lr}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	6039      	str	r1, [r7, #0]
 800968a:	71fb      	strb	r3, [r7, #7]
 800968c:	4613      	mov	r3, r2
 800968e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8009690:	f7ff ff70 	bl	8009574 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	4618      	mov	r0, r3
 8009698:	f7ff ff84 	bl	80095a4 <nRF24_LL_RW>
	while (count--)
 800969c:	e007      	b.n	80096ae <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800969e:	683c      	ldr	r4, [r7, #0]
 80096a0:	1c63      	adds	r3, r4, #1
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	20ff      	movs	r0, #255	; 0xff
 80096a6:	f7ff ff7d 	bl	80095a4 <nRF24_LL_RW>
 80096aa:	4603      	mov	r3, r0
 80096ac:	7023      	strb	r3, [r4, #0]
	while (count--)
 80096ae:	79bb      	ldrb	r3, [r7, #6]
 80096b0:	1e5a      	subs	r2, r3, #1
 80096b2:	71ba      	strb	r2, [r7, #6]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1f2      	bne.n	800969e <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80096b8:	f7ff ff68 	bl	800958c <nRF24_CSN_H>
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd90      	pop	{r4, r7, pc}

080096c4 <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	6039      	str	r1, [r7, #0]
 80096ce:	71fb      	strb	r3, [r7, #7]
 80096d0:	4613      	mov	r3, r2
 80096d2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80096d4:	f7ff ff4e 	bl	8009574 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff ff62 	bl	80095a4 <nRF24_LL_RW>
	while (count--)
 80096e0:	e006      	b.n	80096f0 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	603a      	str	r2, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7ff ff5a 	bl	80095a4 <nRF24_LL_RW>
	while (count--)
 80096f0:	79bb      	ldrb	r3, [r7, #6]
 80096f2:	1e5a      	subs	r2, r3, #1
 80096f4:	71ba      	strb	r2, [r7, #6]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1f3      	bne.n	80096e2 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80096fa:	f7ff ff47 	bl	800958c <nRF24_CSN_H>
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 800970a:	2108      	movs	r1, #8
 800970c:	2000      	movs	r0, #0
 800970e:	f7ff ff7f 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 8009712:	213f      	movs	r1, #63	; 0x3f
 8009714:	2001      	movs	r0, #1
 8009716:	f7ff ff7b 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 800971a:	2103      	movs	r1, #3
 800971c:	2002      	movs	r0, #2
 800971e:	f7ff ff77 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 8009722:	2103      	movs	r1, #3
 8009724:	2003      	movs	r0, #3
 8009726:	f7ff ff73 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 800972a:	2103      	movs	r1, #3
 800972c:	2004      	movs	r0, #4
 800972e:	f7ff ff6f 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 8009732:	2102      	movs	r1, #2
 8009734:	2005      	movs	r0, #5
 8009736:	f7ff ff6b 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 800973a:	210e      	movs	r1, #14
 800973c:	2006      	movs	r0, #6
 800973e:	f7ff ff67 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8009742:	2100      	movs	r1, #0
 8009744:	2007      	movs	r0, #7
 8009746:	f7ff ff63 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800974a:	2100      	movs	r1, #0
 800974c:	2011      	movs	r0, #17
 800974e:	f7ff ff5f 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8009752:	2100      	movs	r1, #0
 8009754:	2012      	movs	r0, #18
 8009756:	f7ff ff5b 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 800975a:	2100      	movs	r1, #0
 800975c:	2013      	movs	r0, #19
 800975e:	f7ff ff57 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8009762:	2100      	movs	r1, #0
 8009764:	2014      	movs	r0, #20
 8009766:	f7ff ff53 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 800976a:	2100      	movs	r1, #0
 800976c:	2015      	movs	r0, #21
 800976e:	f7ff ff4f 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8009772:	2100      	movs	r1, #0
 8009774:	2016      	movs	r0, #22
 8009776:	f7ff ff4b 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800977a:	2100      	movs	r1, #0
 800977c:	201c      	movs	r0, #28
 800977e:	f7ff ff47 	bl	8009610 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8009782:	2100      	movs	r1, #0
 8009784:	201d      	movs	r0, #29
 8009786:	f7ff ff43 	bl	8009610 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 800978a:	f000 f9a4 	bl	8009ad6 <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 800978e:	f000 f99a 	bl	8009ac6 <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 8009792:	f000 f9a8 	bl	8009ae6 <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 8009796:	f7ff fef9 	bl	800958c <nRF24_CSN_H>
}
 800979a:	bf00      	nop
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80097a6:	4b14      	ldr	r3, [pc, #80]	; (80097f8 <nRF24_Check+0x58>)
 80097a8:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80097aa:	2205      	movs	r2, #5
 80097ac:	68b9      	ldr	r1, [r7, #8]
 80097ae:	2030      	movs	r0, #48	; 0x30
 80097b0:	f7ff ff88 	bl	80096c4 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80097b4:	463b      	mov	r3, r7
 80097b6:	2205      	movs	r2, #5
 80097b8:	4619      	mov	r1, r3
 80097ba:	2010      	movs	r0, #16
 80097bc:	f7ff ff60 	bl	8009680 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 80097c0:	2300      	movs	r3, #0
 80097c2:	73fb      	strb	r3, [r7, #15]
 80097c4:	e010      	b.n	80097e8 <nRF24_Check+0x48>
	{
		if (rxbuf[i] != *ptr++)
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	f107 0210 	add.w	r2, r7, #16
 80097cc:	4413      	add	r3, r2
 80097ce:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	1c59      	adds	r1, r3, #1
 80097d6:	60b9      	str	r1, [r7, #8]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d001      	beq.n	80097e2 <nRF24_Check+0x42>
			return 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	e006      	b.n	80097f0 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++)
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	3301      	adds	r3, #1
 80097e6:	73fb      	strb	r3, [r7, #15]
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d9eb      	bls.n	80097c6 <nRF24_Check+0x26>
	}

	return 1;
 80097ee:	2301      	movs	r3, #1
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	0800c61c 	.word	0x0800c61c

080097fc <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8009806:	2000      	movs	r0, #0
 8009808:	f7ff fee8 	bl	80095dc <nRF24_ReadReg>
 800980c:	4603      	mov	r3, r0
 800980e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	2b02      	cmp	r3, #2
 8009814:	d104      	bne.n	8009820 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	f043 0302 	orr.w	r3, r3, #2
 800981c:	73fb      	strb	r3, [r7, #15]
 800981e:	e003      	b.n	8009828 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	f023 0302 	bic.w	r3, r3, #2
 8009826:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	4619      	mov	r1, r3
 800982c:	2000      	movs	r0, #0
 800982e:	f7ff feef 	bl	8009610 <nRF24_WriteReg>
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b084      	sub	sp, #16
 800983e:	af00      	add	r7, sp, #0
 8009840:	4603      	mov	r3, r0
 8009842:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8009844:	2000      	movs	r0, #0
 8009846:	f7ff fec9 	bl	80095dc <nRF24_ReadReg>
 800984a:	4603      	mov	r3, r0
 800984c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	f023 0301 	bic.w	r3, r3, #1
 8009854:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8009856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	b25a      	sxtb	r2, r3
 8009860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009864:	4313      	orrs	r3, r2
 8009866:	b25b      	sxtb	r3, r3
 8009868:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	4619      	mov	r1, r3
 800986e:	2000      	movs	r0, #0
 8009870:	f7ff fece 	bl	8009610 <nRF24_WriteReg>
}
 8009874:	bf00      	nop
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8009886:	2000      	movs	r0, #0
 8009888:	f7ff fea8 	bl	80095dc <nRF24_ReadReg>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	f023 030c 	bic.w	r3, r3, #12
 8009896:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8009898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800989c:	f003 030c 	and.w	r3, r3, #12
 80098a0:	b25a      	sxtb	r2, r3
 80098a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	b25b      	sxtb	r3, r3
 80098aa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	4619      	mov	r1, r3
 80098b0:	2000      	movs	r0, #0
 80098b2:	f7ff fead 	bl	8009610 <nRF24_WriteReg>
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	4603      	mov	r3, r0
 80098c6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	4619      	mov	r1, r3
 80098cc:	2005      	movs	r0, #5
 80098ce:	f7ff fe9f 	bl	8009610 <nRF24_WriteReg>
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	4603      	mov	r3, r0
 80098e2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	3b02      	subs	r3, #2
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	4619      	mov	r1, r3
 80098ec:	2003      	movs	r0, #3
 80098ee:	f7ff fe8f 	bl	8009610 <nRF24_WriteReg>
}
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	4603      	mov	r3, r0
 8009904:	6039      	str	r1, [r7, #0]
 8009906:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 8009908:	79fb      	ldrb	r3, [r7, #7]
 800990a:	2b06      	cmp	r3, #6
 800990c:	d83e      	bhi.n	800998c <nRF24_SetAddr+0x90>
 800990e:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <nRF24_SetAddr+0x18>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	08009931 	.word	0x08009931
 8009918:	08009931 	.word	0x08009931
 800991c:	08009979 	.word	0x08009979
 8009920:	08009979 	.word	0x08009979
 8009924:	08009979 	.word	0x08009979
 8009928:	08009979 	.word	0x08009979
 800992c:	08009931 	.word	0x08009931
	{
	case nRF24_PIPETX:
	case nRF24_PIPE0:
	case nRF24_PIPE1:
		// Lấy độ dài address
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8009930:	2003      	movs	r0, #3
 8009932:	f7ff fe53 	bl	80095dc <nRF24_ReadReg>
 8009936:	4603      	mov	r3, r0
 8009938:	3301      	adds	r3, #1
 800993a:	73fb      	strb	r3, [r7, #15]

		addr += addr_width;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	4413      	add	r3, r2
 8009942:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 8009944:	f7ff fe16 	bl	8009574 <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	4a13      	ldr	r2, [pc, #76]	; (8009998 <nRF24_SetAddr+0x9c>)
 800994c:	5cd3      	ldrb	r3, [r2, r3]
 800994e:	f043 0320 	orr.w	r3, r3, #32
 8009952:	b2db      	uxtb	r3, r3
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff fe25 	bl	80095a4 <nRF24_LL_RW>
		do
		{
			nRF24_LL_RW(*addr--);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	1e5a      	subs	r2, r3, #1
 800995e:	603a      	str	r2, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	4618      	mov	r0, r3
 8009964:	f7ff fe1e 	bl	80095a4 <nRF24_LL_RW>
		} while (addr_width--);
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	1e5a      	subs	r2, r3, #1
 800996c:	73fa      	strb	r2, [r7, #15]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1f3      	bne.n	800995a <nRF24_SetAddr+0x5e>
		nRF24_CSN_H();
 8009972:	f7ff fe0b 	bl	800958c <nRF24_CSN_H>
		break;
 8009976:	e00a      	b.n	800998e <nRF24_SetAddr+0x92>
	case nRF24_PIPE2:
	case nRF24_PIPE3:
	case nRF24_PIPE4:
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	4a07      	ldr	r2, [pc, #28]	; (8009998 <nRF24_SetAddr+0x9c>)
 800997c:	5cd2      	ldrb	r2, [r2, r3]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f7ff fe43 	bl	8009610 <nRF24_WriteReg>
		break;
 800998a:	e000      	b.n	800998e <nRF24_SetAddr+0x92>
	default:
		break;
 800998c:	bf00      	nop
	}
}
 800998e:	bf00      	nop
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	0800c82c 	.word	0x0800c82c

0800999c <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80099a6:	2006      	movs	r0, #6
 80099a8:	f7ff fe18 	bl	80095dc <nRF24_ReadReg>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
 80099b2:	f023 0306 	bic.w	r3, r3, #6
 80099b6:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80099b8:	7bfa      	ldrb	r2, [r7, #15]
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	4313      	orrs	r3, r2
 80099be:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	4619      	mov	r1, r3
 80099c4:	2006      	movs	r0, #6
 80099c6:	f7ff fe23 	bl	8009610 <nRF24_WriteReg>
}
 80099ca:	bf00      	nop
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	4603      	mov	r3, r0
 80099da:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80099dc:	2006      	movs	r0, #6
 80099de:	f7ff fdfd 	bl	80095dc <nRF24_ReadReg>
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80099ec:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80099ee:	7bfa      	ldrb	r2, [r7, #15]
 80099f0:	79fb      	ldrb	r3, [r7, #7]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	4619      	mov	r1, r3
 80099fa:	2006      	movs	r0, #6
 80099fc:	f7ff fe08 	bl	8009610 <nRF24_WriteReg>
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <nRF24_SetRXPipe>:
 * @param pipe Pipe cần cấu hình
 * @param aa_state Bật phản hồi ACK hay không (nRF24_AA_ON or nRF24_AA_OFF)
 * @param payload_len độ dài của payload
 */
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	71fb      	strb	r3, [r7, #7]
 8009a12:	460b      	mov	r3, r1
 8009a14:	71bb      	strb	r3, [r7, #6]
 8009a16:	4613      	mov	r3, r2
 8009a18:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8009a1a:	2002      	movs	r0, #2
 8009a1c:	f7ff fdde 	bl	80095dc <nRF24_ReadReg>
 8009a20:	4603      	mov	r3, r0
 8009a22:	b25a      	sxtb	r2, r3
 8009a24:	79fb      	ldrb	r3, [r7, #7]
 8009a26:	2101      	movs	r1, #1
 8009a28:	fa01 f303 	lsl.w	r3, r1, r3
 8009a2c:	b25b      	sxtb	r3, r3
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	b25b      	sxtb	r3, r3
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a38:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	2002      	movs	r0, #2
 8009a40:	f7ff fde6 	bl	8009610 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	4a19      	ldr	r2, [pc, #100]	; (8009aac <nRF24_SetRXPipe+0xa4>)
 8009a48:	5cd2      	ldrb	r2, [r2, r3]
 8009a4a:	797b      	ldrb	r3, [r7, #5]
 8009a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	4619      	mov	r1, r3
 8009a54:	4610      	mov	r0, r2
 8009a56:	f7ff fddb 	bl	8009610 <nRF24_WriteReg>

	// Set auto acknowledgment
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	f7ff fdbe 	bl	80095dc <nRF24_ReadReg>
 8009a60:	4603      	mov	r3, r0
 8009a62:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON)
 8009a64:	79bb      	ldrb	r3, [r7, #6]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d10a      	bne.n	8009a80 <nRF24_SetRXPipe+0x78>
	{
		reg |= (1 << pipe);
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a72:	b25a      	sxtb	r2, r3
 8009a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	b25b      	sxtb	r3, r3
 8009a7c:	73fb      	strb	r3, [r7, #15]
 8009a7e:	e00b      	b.n	8009a98 <nRF24_SetRXPipe+0x90>
	}
	else
	{
		reg &= ~(1 << pipe);
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	2201      	movs	r2, #1
 8009a84:	fa02 f303 	lsl.w	r3, r2, r3
 8009a88:	b25b      	sxtb	r3, r3
 8009a8a:	43db      	mvns	r3, r3
 8009a8c:	b25a      	sxtb	r2, r3
 8009a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a92:	4013      	ands	r3, r2
 8009a94:	b25b      	sxtb	r3, r3
 8009a96:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	2001      	movs	r0, #1
 8009a9e:	f7ff fdb7 	bl	8009610 <nRF24_WriteReg>
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	0800c824 	.word	0x0800c824

08009ab0 <nRF24_GetStatus_RXFIFO>:
 * @brief Lấy tastus RX FIFO
 *
 * @return uint8_t one of the nRF24_STATUS_RXFIFO_xx values
 */
uint8_t nRF24_GetStatus_RXFIFO(void)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8009ab4:	2017      	movs	r0, #23
 8009ab6:	f7ff fd91 	bl	80095dc <nRF24_ReadReg>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f003 0303 	and.w	r3, r3, #3
 8009ac0:	b2db      	uxtb	r3, r3
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8009aca:	21ff      	movs	r1, #255	; 0xff
 8009acc:	20e1      	movs	r0, #225	; 0xe1
 8009ace:	f7ff fd9f 	bl	8009610 <nRF24_WriteReg>
}
 8009ad2:	bf00      	nop
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8009ada:	21ff      	movs	r1, #255	; 0xff
 8009adc:	20e2      	movs	r0, #226	; 0xe2
 8009ade:	f7ff fd97 	bl	8009610 <nRF24_WriteReg>
}
 8009ae2:	bf00      	nop
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8009aec:	2007      	movs	r0, #7
 8009aee:	f7ff fd75 	bl	80095dc <nRF24_ReadReg>
 8009af2:	4603      	mov	r3, r0
 8009af4:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009afc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	4619      	mov	r1, r3
 8009b02:	2007      	movs	r0, #7
 8009b04:	f7ff fd84 	bl	8009610 <nRF24_WriteReg>
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <nRF24_GetRxDplPayloadWidth>:
 * @brief đọc chiều dài của RX payload
 *
 * @return uint8_t độ dài
 */
static uint8_t nRF24_GetRxDplPayloadWidth()
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8009b16:	f7ff fd2d 	bl	8009574 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8009b1a:	2060      	movs	r0, #96	; 0x60
 8009b1c:	f7ff fd42 	bl	80095a4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8009b20:	20ff      	movs	r0, #255	; 0xff
 8009b22:	f7ff fd3f 	bl	80095a4 <nRF24_LL_RW>
 8009b26:	4603      	mov	r3, r0
 8009b28:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8009b2a:	f7ff fd2f 	bl	800958c <nRF24_CSN_H>

	return value;
 8009b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8009b46:	2007      	movs	r0, #7
 8009b48:	f7ff fd48 	bl	80095dc <nRF24_ReadReg>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	105b      	asrs	r3, r3, #1
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	f003 0307 	and.w	r3, r3, #7
 8009b56:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6)
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
 8009b5a:	2b05      	cmp	r3, #5
 8009b5c:	d829      	bhi.n	8009bb2 <nRF24_ReadPayloadGeneric+0x7a>
	{
		// Get payload length
		if (dpl)
 8009b5e:	79fb      	ldrb	r3, [r7, #7]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00f      	beq.n	8009b84 <nRF24_ReadPayloadGeneric+0x4c>
		{
			*length = nRF24_GetRxDplPayloadWidth();
 8009b64:	f7ff ffd4 	bl	8009b10 <nRF24_GetRxDplPayloadWidth>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	701a      	strb	r2, [r3, #0]
			if (*length > 32)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b20      	cmp	r3, #32
 8009b76:	d90f      	bls.n	8009b98 <nRF24_ReadPayloadGeneric+0x60>
			{ // broken packet
				*length = 0;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8009b7e:	f7ff ffaa 	bl	8009ad6 <nRF24_FlushRX>
 8009b82:	e009      	b.n	8009b98 <nRF24_ReadPayloadGeneric+0x60>
			}
		}
		else
		{
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]); // đọc payload của pipe x
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	4a0f      	ldr	r2, [pc, #60]	; (8009bc4 <nRF24_ReadPayloadGeneric+0x8c>)
 8009b88:	5cd3      	ldrb	r3, [r2, r3]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff fd26 	bl	80095dc <nRF24_ReadReg>
 8009b90:	4603      	mov	r3, r0
 8009b92:	461a      	mov	r2, r3
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	701a      	strb	r2, [r3, #0]
		}

		// đọc payload từ RX FIFO
		if (*length)
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d006      	beq.n	8009bae <nRF24_ReadPayloadGeneric+0x76>
		{
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	68f9      	ldr	r1, [r7, #12]
 8009ba8:	2061      	movs	r0, #97	; 0x61
 8009baa:	f7ff fd69 	bl	8009680 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	e003      	b.n	8009bba <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8009bb8:	23ff      	movs	r3, #255	; 0xff
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3718      	adds	r7, #24
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	0800c824 	.word	0x0800c824

08009bc8 <nRF24_ReadPayload>:
 * @return   nRF24_RX_PIPEX - đã nhận được dữ liệu từ pipe x
 * @return	 nRF24_RX_EMPTY - the RX FIFO đéo có cc gì
 *
 */
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length, 0);
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7ff ffae 	bl	8009b38 <nRF24_ReadPayloadGeneric>
 8009bdc:	4603      	mov	r3, r0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <math_constrain>:
extern volatile float Kd_rate_yaw;

#endif

static float math_constrain(float value, float min, float max)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	607a      	str	r2, [r7, #4]
    if (value > max)
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f7f7 fa51 	bl	800109c <__aeabi_fcmpgt>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <math_constrain+0x20>
        value = max;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e008      	b.n	8009c18 <math_constrain+0x32>
    else if (value < min)
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7f7 fa29 	bl	8001060 <__aeabi_fcmplt>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <math_constrain+0x32>
        value = min;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	60fb      	str	r3, [r7, #12]
    return value;
 8009c18:	68fb      	ldr	r3, [r7, #12]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	0000      	movs	r0, r0
 8009c24:	0000      	movs	r0, r0
	...

08009c28 <pid_calculate>:

void pid_calculate(float Error, float P, float I, float D, float PrevError, float PrevIterm)
{
 8009c28:	b5b0      	push	{r4, r5, r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
    float Pterm = P * Error;
 8009c36:	68f9      	ldr	r1, [r7, #12]
 8009c38:	68b8      	ldr	r0, [r7, #8]
 8009c3a:	f7f7 f873 	bl	8000d24 <__aeabi_fmul>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	61fb      	str	r3, [r7, #28]
    float Iterm = PrevIterm + I * (Error + PrevError) * dt / 2;
 8009c42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c44:	f7f6 fbe8 	bl	8000418 <__aeabi_f2d>
 8009c48:	4604      	mov	r4, r0
 8009c4a:	460d      	mov	r5, r1
 8009c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7f6 ff60 	bl	8000b14 <__addsf3>
 8009c54:	4603      	mov	r3, r0
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7f7 f863 	bl	8000d24 <__aeabi_fmul>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7f6 fbd9 	bl	8000418 <__aeabi_f2d>
 8009c66:	a32a      	add	r3, pc, #168	; (adr r3, 8009d10 <pid_calculate+0xe8>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f7f6 fc2c 	bl	80004c8 <__aeabi_dmul>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4610      	mov	r0, r2
 8009c76:	4619      	mov	r1, r3
 8009c78:	f04f 0200 	mov.w	r2, #0
 8009c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c80:	f7f6 fd4c 	bl	800071c <__aeabi_ddiv>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4620      	mov	r0, r4
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f7f6 fa66 	bl	800015c <__adddf3>
 8009c90:	4603      	mov	r3, r0
 8009c92:	460c      	mov	r4, r1
 8009c94:	4618      	mov	r0, r3
 8009c96:	4621      	mov	r1, r4
 8009c98:	f7f6 fee6 	bl	8000a68 <__aeabi_d2f>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	61bb      	str	r3, [r7, #24]
    math_constrain(Iterm, -200, 200);
 8009ca0:	4a1d      	ldr	r2, [pc, #116]	; (8009d18 <pid_calculate+0xf0>)
 8009ca2:	491e      	ldr	r1, [pc, #120]	; (8009d1c <pid_calculate+0xf4>)
 8009ca4:	69b8      	ldr	r0, [r7, #24]
 8009ca6:	f7ff ff9e 	bl	8009be6 <math_constrain>
    float Dterm = D * (Error - PrevError) / dt;
 8009caa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7f6 ff2f 	bl	8000b10 <__aeabi_fsub>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7f7 f834 	bl	8000d24 <__aeabi_fmul>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f6 fbaa 	bl	8000418 <__aeabi_f2d>
 8009cc4:	a312      	add	r3, pc, #72	; (adr r3, 8009d10 <pid_calculate+0xe8>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 fd27 	bl	800071c <__aeabi_ddiv>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	f7f6 fec7 	bl	8000a68 <__aeabi_d2f>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	617b      	str	r3, [r7, #20]
    float PIDOutput = Pterm + Iterm + Dterm;
 8009cde:	69b9      	ldr	r1, [r7, #24]
 8009ce0:	69f8      	ldr	r0, [r7, #28]
 8009ce2:	f7f6 ff17 	bl	8000b14 <__addsf3>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6978      	ldr	r0, [r7, #20]
 8009cec:	f7f6 ff12 	bl	8000b14 <__addsf3>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	613b      	str	r3, [r7, #16]


    PIDReturn[0] = PIDOutput;
 8009cf4:	4a0a      	ldr	r2, [pc, #40]	; (8009d20 <pid_calculate+0xf8>)
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	6013      	str	r3, [r2, #0]
    PIDReturn[1] = Error;
 8009cfa:	4a09      	ldr	r2, [pc, #36]	; (8009d20 <pid_calculate+0xf8>)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6053      	str	r3, [r2, #4]
    PIDReturn[2] = Iterm;
 8009d00:	4a07      	ldr	r2, [pc, #28]	; (8009d20 <pid_calculate+0xf8>)
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	6093      	str	r3, [r2, #8]
}
 8009d06:	bf00      	nop
 8009d08:	3720      	adds	r7, #32
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	47ae147b 	.word	0x47ae147b
 8009d14:	3f847ae1 	.word	0x3f847ae1
 8009d18:	43480000 	.word	0x43480000
 8009d1c:	c3480000 	.word	0xc3480000
 8009d20:	20000540 	.word	0x20000540
 8009d24:	00000000 	.word	0x00000000

08009d28 <pid_roll>:

void pid_roll(uint16_t roll_rc, float roll_angle, float roll_rate, PID_t *PID_out)
{
 8009d28:	b5b0      	push	{r4, r5, r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af02      	add	r7, sp, #8
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	607a      	str	r2, [r7, #4]
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	4603      	mov	r3, r0
 8009d36:	81fb      	strh	r3, [r7, #14]
    if (roll_rc > 1500 || roll_rc < 1440)
 8009d38:	89fb      	ldrh	r3, [r7, #14]
 8009d3a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d807      	bhi.n	8009d52 <pid_roll+0x2a>
 8009d42:	89fb      	ldrh	r3, [r7, #14]
 8009d44:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8009d48:	d303      	bcc.n	8009d52 <pid_roll+0x2a>
    {
        roll_rc = roll_rc;
    }
    else
    {
        roll_rc = 1500;
 8009d4a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009d4e:	81fb      	strh	r3, [r7, #14]
 8009d50:	e000      	b.n	8009d54 <pid_roll+0x2c>
        roll_rc = roll_rc;
 8009d52:	bf00      	nop
    }

    error = 0.08 * (roll_rc - 1500) - roll_angle;
 8009d54:	89fb      	ldrh	r3, [r7, #14]
 8009d56:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7f6 fb4a 	bl	80003f4 <__aeabi_i2d>
 8009d60:	a339      	add	r3, pc, #228	; (adr r3, 8009e48 <pid_roll+0x120>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f7f6 fbaf 	bl	80004c8 <__aeabi_dmul>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	4625      	mov	r5, r4
 8009d70:	461c      	mov	r4, r3
 8009d72:	68b8      	ldr	r0, [r7, #8]
 8009d74:	f7f6 fb50 	bl	8000418 <__aeabi_f2d>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	4629      	mov	r1, r5
 8009d80:	f7f6 f9ea 	bl	8000158 <__aeabi_dsub>
 8009d84:	4603      	mov	r3, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	4618      	mov	r0, r3
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	f7f6 fe6c 	bl	8000a68 <__aeabi_d2f>
 8009d90:	4602      	mov	r2, r0
 8009d92:	4b2f      	ldr	r3, [pc, #188]	; (8009e50 <pid_roll+0x128>)
 8009d94:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_angle_roll, Ki_angle_roll, Kd_angle_roll, last_error_angle[0], last_Iterm_angle[0]);
 8009d96:	4b2e      	ldr	r3, [pc, #184]	; (8009e50 <pid_roll+0x128>)
 8009d98:	6818      	ldr	r0, [r3, #0]
 8009d9a:	4b2e      	ldr	r3, [pc, #184]	; (8009e54 <pid_roll+0x12c>)
 8009d9c:	6819      	ldr	r1, [r3, #0]
 8009d9e:	4b2e      	ldr	r3, [pc, #184]	; (8009e58 <pid_roll+0x130>)
 8009da0:	681c      	ldr	r4, [r3, #0]
 8009da2:	4b2e      	ldr	r3, [pc, #184]	; (8009e5c <pid_roll+0x134>)
 8009da4:	681d      	ldr	r5, [r3, #0]
 8009da6:	4b2e      	ldr	r3, [pc, #184]	; (8009e60 <pid_roll+0x138>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a2e      	ldr	r2, [pc, #184]	; (8009e64 <pid_roll+0x13c>)
 8009dac:	6812      	ldr	r2, [r2, #0]
 8009dae:	9201      	str	r2, [sp, #4]
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	462b      	mov	r3, r5
 8009db4:	4622      	mov	r2, r4
 8009db6:	f7ff ff37 	bl	8009c28 <pid_calculate>
    setpoint_rate_roll = PIDReturn[0];
 8009dba:	4b2b      	ldr	r3, [pc, #172]	; (8009e68 <pid_roll+0x140>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a2b      	ldr	r2, [pc, #172]	; (8009e6c <pid_roll+0x144>)
 8009dc0:	6013      	str	r3, [r2, #0]
    last_error_angle[0] = PIDReturn[1];
 8009dc2:	4b29      	ldr	r3, [pc, #164]	; (8009e68 <pid_roll+0x140>)
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	4a26      	ldr	r2, [pc, #152]	; (8009e60 <pid_roll+0x138>)
 8009dc8:	6013      	str	r3, [r2, #0]
    last_Iterm_angle[0] = PIDReturn[2];
 8009dca:	4b27      	ldr	r3, [pc, #156]	; (8009e68 <pid_roll+0x140>)
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	4a25      	ldr	r2, [pc, #148]	; (8009e64 <pid_roll+0x13c>)
 8009dd0:	6013      	str	r3, [r2, #0]

	setpoint_rate_roll = set_point;
 8009dd2:	4b27      	ldr	r3, [pc, #156]	; (8009e70 <pid_roll+0x148>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a25      	ldr	r2, [pc, #148]	; (8009e6c <pid_roll+0x144>)
 8009dd8:	6013      	str	r3, [r2, #0]

    setpoint_rate_roll = math_constrain(setpoint_rate_roll, -50, 50);
 8009dda:	4b24      	ldr	r3, [pc, #144]	; (8009e6c <pid_roll+0x144>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a25      	ldr	r2, [pc, #148]	; (8009e74 <pid_roll+0x14c>)
 8009de0:	4925      	ldr	r1, [pc, #148]	; (8009e78 <pid_roll+0x150>)
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff feff 	bl	8009be6 <math_constrain>
 8009de8:	4602      	mov	r2, r0
 8009dea:	4b20      	ldr	r3, [pc, #128]	; (8009e6c <pid_roll+0x144>)
 8009dec:	601a      	str	r2, [r3, #0]

    error = setpoint_rate_roll - roll_rate;
 8009dee:	4b1f      	ldr	r3, [pc, #124]	; (8009e6c <pid_roll+0x144>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6879      	ldr	r1, [r7, #4]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7f6 fe8b 	bl	8000b10 <__aeabi_fsub>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	4b14      	ldr	r3, [pc, #80]	; (8009e50 <pid_roll+0x128>)
 8009e00:	601a      	str	r2, [r3, #0]

    pid_calculate(error, Kp_rate_roll, Ki_rate_roll, Kd_rate_roll, last_error_rate[0], last_Iterm_rate[0]);
 8009e02:	4b13      	ldr	r3, [pc, #76]	; (8009e50 <pid_roll+0x128>)
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	4b1d      	ldr	r3, [pc, #116]	; (8009e7c <pid_roll+0x154>)
 8009e08:	6819      	ldr	r1, [r3, #0]
 8009e0a:	4b1d      	ldr	r3, [pc, #116]	; (8009e80 <pid_roll+0x158>)
 8009e0c:	681c      	ldr	r4, [r3, #0]
 8009e0e:	4b1d      	ldr	r3, [pc, #116]	; (8009e84 <pid_roll+0x15c>)
 8009e10:	681d      	ldr	r5, [r3, #0]
 8009e12:	4b1d      	ldr	r3, [pc, #116]	; (8009e88 <pid_roll+0x160>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a1d      	ldr	r2, [pc, #116]	; (8009e8c <pid_roll+0x164>)
 8009e18:	6812      	ldr	r2, [r2, #0]
 8009e1a:	9201      	str	r2, [sp, #4]
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	462b      	mov	r3, r5
 8009e20:	4622      	mov	r2, r4
 8009e22:	f7ff ff01 	bl	8009c28 <pid_calculate>
    PID_out->PID_roll_out = PIDReturn[0];
 8009e26:	4b10      	ldr	r3, [pc, #64]	; (8009e68 <pid_roll+0x140>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	601a      	str	r2, [r3, #0]
    last_error_rate[0] = PIDReturn[1];
 8009e2e:	4b0e      	ldr	r3, [pc, #56]	; (8009e68 <pid_roll+0x140>)
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	4a15      	ldr	r2, [pc, #84]	; (8009e88 <pid_roll+0x160>)
 8009e34:	6013      	str	r3, [r2, #0]
    last_Iterm_rate[0] = PIDReturn[2];
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <pid_roll+0x140>)
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	4a14      	ldr	r2, [pc, #80]	; (8009e8c <pid_roll+0x164>)
 8009e3c:	6013      	str	r3, [r2, #0]

    // Gioi han PWM
}
 8009e3e:	bf00      	nop
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bdb0      	pop	{r4, r5, r7, pc}
 8009e46:	bf00      	nop
 8009e48:	47ae147b 	.word	0x47ae147b
 8009e4c:	3fb47ae1 	.word	0x3fb47ae1
 8009e50:	20000534 	.word	0x20000534
 8009e54:	200000b8 	.word	0x200000b8
 8009e58:	200000bc 	.word	0x200000bc
 8009e5c:	200000c0 	.word	0x200000c0
 8009e60:	200004e0 	.word	0x200004e0
 8009e64:	20000504 	.word	0x20000504
 8009e68:	20000540 	.word	0x20000540
 8009e6c:	20000500 	.word	0x20000500
 8009e70:	200000d0 	.word	0x200000d0
 8009e74:	42480000 	.word	0x42480000
 8009e78:	c2480000 	.word	0xc2480000
 8009e7c:	200000c4 	.word	0x200000c4
 8009e80:	200000c8 	.word	0x200000c8
 8009e84:	200000cc 	.word	0x200000cc
 8009e88:	200004f0 	.word	0x200004f0
 8009e8c:	2000054c 	.word	0x2000054c

08009e90 <nRF24_CE_L>:
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8009e94:	2200      	movs	r2, #0
 8009e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e9a:	4802      	ldr	r0, [pc, #8]	; (8009ea4 <nRF24_CE_L+0x14>)
 8009e9c:	f7f7 feee 	bl	8001c7c <HAL_GPIO_WritePin>
}
 8009ea0:	bf00      	nop
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	40010800 	.word	0x40010800

08009ea8 <nRF24_CE_H>:
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8009eac:	2201      	movs	r2, #1
 8009eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009eb2:	4802      	ldr	r0, [pc, #8]	; (8009ebc <nRF24_CE_H+0x14>)
 8009eb4:	f7f7 fee2 	bl	8001c7c <HAL_GPIO_WritePin>
}
 8009eb8:	bf00      	nop
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	40010800 	.word	0x40010800

08009ec0 <Delay_ms>:

static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7f7 f9af 	bl	800122c <HAL_Delay>
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <Toggle_LED>:

extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009edc:	2120      	movs	r1, #32
 8009ede:	4802      	ldr	r0, [pc, #8]	; (8009ee8 <Toggle_LED+0x10>)
 8009ee0:	f7f7 fee4 	bl	8001cac <HAL_GPIO_TogglePin>
}
 8009ee4:	bf00      	nop
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	40010c00 	.word	0x40010c00

08009eec <runRadio>:
}

#endif // DEMO_TX_

int runRadio(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
#if (DEBUG_RX)
    printf("\r\nSTM32 is online.\r\n");
#endif // debug
    nRF24_CE_L();
 8009ef0:	f7ff ffce 	bl	8009e90 <nRF24_CE_L>
#if (DEBUG_RX)
    printf("nRF24L01+ check: ");
#endif
    while (!nRF24_Check())
 8009ef4:	e004      	b.n	8009f00 <runRadio+0x14>
    {
            Toggle_LED();
 8009ef6:	f7ff ffef 	bl	8009ed8 <Toggle_LED>
            Delay_ms(50);
 8009efa:	2032      	movs	r0, #50	; 0x32
 8009efc:	f7ff ffe0 	bl	8009ec0 <Delay_ms>
    while (!nRF24_Check())
 8009f00:	f7ff fc4e 	bl	80097a0 <nRF24_Check>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d0f5      	beq.n	8009ef6 <runRadio+0xa>
    }
    nRF24_Init();
 8009f0a:	f7ff fbfc 	bl	8009706 <nRF24_Init>
    // nRF24_CE_L();

/***************************************************************************/
#if (RX_SINGLE)

    nRF24_SetRFChannel(40);
 8009f0e:	2028      	movs	r0, #40	; 0x28
 8009f10:	f7ff fcd5 	bl	80098be <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8009f14:	2008      	movs	r0, #8
 8009f16:	f7ff fd5c 	bl	80099d2 <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8009f1a:	200c      	movs	r0, #12
 8009f1c:	f7ff fcae 	bl	800987c <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 8009f20:	2003      	movs	r0, #3
 8009f22:	f7ff fcda 	bl	80098da <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR);
 8009f26:	490c      	ldr	r1, [pc, #48]	; (8009f58 <runRadio+0x6c>)
 8009f28:	2001      	movs	r0, #1
 8009f2a:	f7ff fce7 	bl	80098fc <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 24);
 8009f2e:	2218      	movs	r2, #24
 8009f30:	2101      	movs	r1, #1
 8009f32:	2001      	movs	r0, #1
 8009f34:	f7ff fd68 	bl	8009a08 <nRF24_SetRXPipe>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8009f38:	2006      	movs	r0, #6
 8009f3a:	f7ff fd2f 	bl	800999c <nRF24_SetTXPower>
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8009f3e:	2001      	movs	r0, #1
 8009f40:	f7ff fc7b 	bl	800983a <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 8009f44:	f7ff fdcf 	bl	8009ae6 <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8009f48:	2002      	movs	r0, #2
 8009f4a:	f7ff fc57 	bl	80097fc <nRF24_SetPowerMode>
    nRF24_CE_H();
 8009f4e:	f7ff ffab 	bl	8009ea8 <nRF24_CE_H>
        Toggle_LED();
        Delay_ms(100);
    }

#endif // TX_SINGLE
}
 8009f52:	bf00      	nop
 8009f54:	4618      	mov	r0, r3
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	0800c834 	.word	0x0800c834

08009f5c <RX_data>:

void RX_data(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0

    if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8009f62:	f7ff fda5 	bl	8009ab0 <nRF24_GetStatus_RXFIFO>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d009      	beq.n	8009f80 <RX_data+0x24>
    {
        nRF24_RXResult pipe = nRF24_ReadPayload((uint8_t *)&payload_packet, &payload_length);
 8009f6c:	4906      	ldr	r1, [pc, #24]	; (8009f88 <RX_data+0x2c>)
 8009f6e:	4807      	ldr	r0, [pc, #28]	; (8009f8c <RX_data+0x30>)
 8009f70:	f7ff fe2a 	bl	8009bc8 <nRF24_ReadPayload>
 8009f74:	4603      	mov	r3, r0
 8009f76:	71fb      	strb	r3, [r7, #7]
        // Clear all pending IRQ flags
        nRF24_ClearIRQFlags();
 8009f78:	f7ff fdb5 	bl	8009ae6 <nRF24_ClearIRQFlags>
        Toggle_LED();
 8009f7c:	f7ff ffac 	bl	8009ed8 <Toggle_LED>
    }
    else
    {
        // todo:
    }
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20000028 	.word	0x20000028
 8009f8c:	20000560 	.word	0x20000560

08009f90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009f96:	4b15      	ldr	r3, [pc, #84]	; (8009fec <HAL_MspInit+0x5c>)
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	4a14      	ldr	r2, [pc, #80]	; (8009fec <HAL_MspInit+0x5c>)
 8009f9c:	f043 0301 	orr.w	r3, r3, #1
 8009fa0:	6193      	str	r3, [r2, #24]
 8009fa2:	4b12      	ldr	r3, [pc, #72]	; (8009fec <HAL_MspInit+0x5c>)
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	60bb      	str	r3, [r7, #8]
 8009fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009fae:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <HAL_MspInit+0x5c>)
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	4a0e      	ldr	r2, [pc, #56]	; (8009fec <HAL_MspInit+0x5c>)
 8009fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fb8:	61d3      	str	r3, [r2, #28]
 8009fba:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <HAL_MspInit+0x5c>)
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fc2:	607b      	str	r3, [r7, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009fc6:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <HAL_MspInit+0x60>)
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	4a04      	ldr	r2, [pc, #16]	; (8009ff0 <HAL_MspInit+0x60>)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009fe2:	bf00      	nop
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bc80      	pop	{r7}
 8009fea:	4770      	bx	lr
 8009fec:	40021000 	.word	0x40021000
 8009ff0:	40010000 	.word	0x40010000

08009ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ffc:	f107 0310 	add.w	r3, r7, #16
 800a000:	2200      	movs	r2, #0
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	605a      	str	r2, [r3, #4]
 800a006:	609a      	str	r2, [r3, #8]
 800a008:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a15      	ldr	r2, [pc, #84]	; (800a064 <HAL_I2C_MspInit+0x70>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d123      	bne.n	800a05c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a014:	4b14      	ldr	r3, [pc, #80]	; (800a068 <HAL_I2C_MspInit+0x74>)
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	4a13      	ldr	r2, [pc, #76]	; (800a068 <HAL_I2C_MspInit+0x74>)
 800a01a:	f043 0308 	orr.w	r3, r3, #8
 800a01e:	6193      	str	r3, [r2, #24]
 800a020:	4b11      	ldr	r3, [pc, #68]	; (800a068 <HAL_I2C_MspInit+0x74>)
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	f003 0308 	and.w	r3, r3, #8
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a02c:	23c0      	movs	r3, #192	; 0xc0
 800a02e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a030:	2312      	movs	r3, #18
 800a032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a034:	2303      	movs	r3, #3
 800a036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a038:	f107 0310 	add.w	r3, r7, #16
 800a03c:	4619      	mov	r1, r3
 800a03e:	480b      	ldr	r0, [pc, #44]	; (800a06c <HAL_I2C_MspInit+0x78>)
 800a040:	f7f7 fcc2 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a044:	4b08      	ldr	r3, [pc, #32]	; (800a068 <HAL_I2C_MspInit+0x74>)
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	4a07      	ldr	r2, [pc, #28]	; (800a068 <HAL_I2C_MspInit+0x74>)
 800a04a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a04e:	61d3      	str	r3, [r2, #28]
 800a050:	4b05      	ldr	r3, [pc, #20]	; (800a068 <HAL_I2C_MspInit+0x74>)
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a058:	60bb      	str	r3, [r7, #8]
 800a05a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a05c:	bf00      	nop
 800a05e:	3720      	adds	r7, #32
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	40005400 	.word	0x40005400
 800a068:	40021000 	.word	0x40021000
 800a06c:	40010c00 	.word	0x40010c00

0800a070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a078:	f107 0310 	add.w	r3, r7, #16
 800a07c:	2200      	movs	r2, #0
 800a07e:	601a      	str	r2, [r3, #0]
 800a080:	605a      	str	r2, [r3, #4]
 800a082:	609a      	str	r2, [r3, #8]
 800a084:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a1c      	ldr	r2, [pc, #112]	; (800a0fc <HAL_SPI_MspInit+0x8c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d131      	bne.n	800a0f4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a090:	4b1b      	ldr	r3, [pc, #108]	; (800a100 <HAL_SPI_MspInit+0x90>)
 800a092:	69db      	ldr	r3, [r3, #28]
 800a094:	4a1a      	ldr	r2, [pc, #104]	; (800a100 <HAL_SPI_MspInit+0x90>)
 800a096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a09a:	61d3      	str	r3, [r2, #28]
 800a09c:	4b18      	ldr	r3, [pc, #96]	; (800a100 <HAL_SPI_MspInit+0x90>)
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0a4:	60fb      	str	r3, [r7, #12]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0a8:	4b15      	ldr	r3, [pc, #84]	; (800a100 <HAL_SPI_MspInit+0x90>)
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	4a14      	ldr	r2, [pc, #80]	; (800a100 <HAL_SPI_MspInit+0x90>)
 800a0ae:	f043 0308 	orr.w	r3, r3, #8
 800a0b2:	6193      	str	r3, [r2, #24]
 800a0b4:	4b12      	ldr	r3, [pc, #72]	; (800a100 <HAL_SPI_MspInit+0x90>)
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	f003 0308 	and.w	r3, r3, #8
 800a0bc:	60bb      	str	r3, [r7, #8]
 800a0be:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 800a0c0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800a0c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0ce:	f107 0310 	add.w	r3, r7, #16
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	480b      	ldr	r0, [pc, #44]	; (800a104 <HAL_SPI_MspInit+0x94>)
 800a0d6:	f7f7 fc77 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 800a0da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 800a0e8:	f107 0310 	add.w	r3, r7, #16
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4805      	ldr	r0, [pc, #20]	; (800a104 <HAL_SPI_MspInit+0x94>)
 800a0f0:	f7f7 fc6a 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a0f4:	bf00      	nop
 800a0f6:	3720      	adds	r7, #32
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	40003800 	.word	0x40003800
 800a100:	40021000 	.word	0x40021000
 800a104:	40010c00 	.word	0x40010c00

0800a108 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a09      	ldr	r2, [pc, #36]	; (800a13c <HAL_TIM_PWM_MspInit+0x34>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d10b      	bne.n	800a132 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a11a:	4b09      	ldr	r3, [pc, #36]	; (800a140 <HAL_TIM_PWM_MspInit+0x38>)
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	4a08      	ldr	r2, [pc, #32]	; (800a140 <HAL_TIM_PWM_MspInit+0x38>)
 800a120:	f043 0302 	orr.w	r3, r3, #2
 800a124:	61d3      	str	r3, [r2, #28]
 800a126:	4b06      	ldr	r3, [pc, #24]	; (800a140 <HAL_TIM_PWM_MspInit+0x38>)
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	f003 0302 	and.w	r3, r3, #2
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800a132:	bf00      	nop
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	bc80      	pop	{r7}
 800a13a:	4770      	bx	lr
 800a13c:	40000400 	.word	0x40000400
 800a140:	40021000 	.word	0x40021000

0800a144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a0d      	ldr	r2, [pc, #52]	; (800a188 <HAL_TIM_Base_MspInit+0x44>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d113      	bne.n	800a17e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a156:	4b0d      	ldr	r3, [pc, #52]	; (800a18c <HAL_TIM_Base_MspInit+0x48>)
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	4a0c      	ldr	r2, [pc, #48]	; (800a18c <HAL_TIM_Base_MspInit+0x48>)
 800a15c:	f043 0304 	orr.w	r3, r3, #4
 800a160:	61d3      	str	r3, [r2, #28]
 800a162:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <HAL_TIM_Base_MspInit+0x48>)
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	f003 0304 	and.w	r3, r3, #4
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800a16e:	2200      	movs	r2, #0
 800a170:	2102      	movs	r1, #2
 800a172:	201e      	movs	r0, #30
 800a174:	f7f7 f953 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a178:	201e      	movs	r0, #30
 800a17a:	f7f7 f96c 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800a17e:	bf00      	nop
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	40000800 	.word	0x40000800
 800a18c:	40021000 	.word	0x40021000

0800a190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b088      	sub	sp, #32
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a198:	f107 0310 	add.w	r3, r7, #16
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	605a      	str	r2, [r3, #4]
 800a1a2:	609a      	str	r2, [r3, #8]
 800a1a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a1b      	ldr	r2, [pc, #108]	; (800a218 <HAL_TIM_MspPostInit+0x88>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d12f      	bne.n	800a210 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1b0:	4b1a      	ldr	r3, [pc, #104]	; (800a21c <HAL_TIM_MspPostInit+0x8c>)
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	4a19      	ldr	r2, [pc, #100]	; (800a21c <HAL_TIM_MspPostInit+0x8c>)
 800a1b6:	f043 0304 	orr.w	r3, r3, #4
 800a1ba:	6193      	str	r3, [r2, #24]
 800a1bc:	4b17      	ldr	r3, [pc, #92]	; (800a21c <HAL_TIM_MspPostInit+0x8c>)
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	60fb      	str	r3, [r7, #12]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1c8:	4b14      	ldr	r3, [pc, #80]	; (800a21c <HAL_TIM_MspPostInit+0x8c>)
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	4a13      	ldr	r2, [pc, #76]	; (800a21c <HAL_TIM_MspPostInit+0x8c>)
 800a1ce:	f043 0308 	orr.w	r3, r3, #8
 800a1d2:	6193      	str	r3, [r2, #24]
 800a1d4:	4b11      	ldr	r3, [pc, #68]	; (800a21c <HAL_TIM_MspPostInit+0x8c>)
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	f003 0308 	and.w	r3, r3, #8
 800a1dc:	60bb      	str	r3, [r7, #8]
 800a1de:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 800a1e0:	23c0      	movs	r3, #192	; 0xc0
 800a1e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1ec:	f107 0310 	add.w	r3, r7, #16
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	480b      	ldr	r0, [pc, #44]	; (800a220 <HAL_TIM_MspPostInit+0x90>)
 800a1f4:	f7f7 fbe8 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a200:	2302      	movs	r3, #2
 800a202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a204:	f107 0310 	add.w	r3, r7, #16
 800a208:	4619      	mov	r1, r3
 800a20a:	4806      	ldr	r0, [pc, #24]	; (800a224 <HAL_TIM_MspPostInit+0x94>)
 800a20c:	f7f7 fbdc 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800a210:	bf00      	nop
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	40000400 	.word	0x40000400
 800a21c:	40021000 	.word	0x40021000
 800a220:	40010800 	.word	0x40010800
 800a224:	40010c00 	.word	0x40010c00

0800a228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08a      	sub	sp, #40	; 0x28
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a230:	f107 0318 	add.w	r3, r7, #24
 800a234:	2200      	movs	r2, #0
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	605a      	str	r2, [r3, #4]
 800a23a:	609a      	str	r2, [r3, #8]
 800a23c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a65      	ldr	r2, [pc, #404]	; (800a3d8 <HAL_UART_MspInit+0x1b0>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d160      	bne.n	800a30a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a248:	4b64      	ldr	r3, [pc, #400]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	4a63      	ldr	r2, [pc, #396]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a24e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a252:	6193      	str	r3, [r2, #24]
 800a254:	4b61      	ldr	r3, [pc, #388]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a260:	4b5e      	ldr	r3, [pc, #376]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	4a5d      	ldr	r2, [pc, #372]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a266:	f043 0304 	orr.w	r3, r3, #4
 800a26a:	6193      	str	r3, [r2, #24]
 800a26c:	4b5b      	ldr	r3, [pc, #364]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	f003 0304 	and.w	r3, r3, #4
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a27c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a27e:	2302      	movs	r3, #2
 800a280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a282:	2303      	movs	r3, #3
 800a284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a286:	f107 0318 	add.w	r3, r7, #24
 800a28a:	4619      	mov	r1, r3
 800a28c:	4854      	ldr	r0, [pc, #336]	; (800a3e0 <HAL_UART_MspInit+0x1b8>)
 800a28e:	f7f7 fb9b 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a298:	2300      	movs	r3, #0
 800a29a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a29c:	2300      	movs	r3, #0
 800a29e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2a0:	f107 0318 	add.w	r3, r7, #24
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	484e      	ldr	r0, [pc, #312]	; (800a3e0 <HAL_UART_MspInit+0x1b8>)
 800a2a8:	f7f7 fb8e 	bl	80019c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800a2ac:	4b4d      	ldr	r3, [pc, #308]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2ae:	4a4e      	ldr	r2, [pc, #312]	; (800a3e8 <HAL_UART_MspInit+0x1c0>)
 800a2b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a2b2:	4b4c      	ldr	r3, [pc, #304]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a2b8:	4b4a      	ldr	r3, [pc, #296]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a2be:	4b49      	ldr	r3, [pc, #292]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2c0:	2280      	movs	r2, #128	; 0x80
 800a2c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a2c4:	4b47      	ldr	r3, [pc, #284]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a2ca:	4b46      	ldr	r3, [pc, #280]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a2d0:	4b44      	ldr	r3, [pc, #272]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a2d6:	4b43      	ldr	r3, [pc, #268]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a2dc:	4841      	ldr	r0, [pc, #260]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2de:	f7f7 f8d5 	bl	800148c <HAL_DMA_Init>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800a2e8:	f7fb fde8 	bl	8005ebc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a3d      	ldr	r2, [pc, #244]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2f0:	639a      	str	r2, [r3, #56]	; 0x38
 800a2f2:	4a3c      	ldr	r2, [pc, #240]	; (800a3e4 <HAL_UART_MspInit+0x1bc>)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	2025      	movs	r0, #37	; 0x25
 800a2fe:	f7f7 f88e 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a302:	2025      	movs	r0, #37	; 0x25
 800a304:	f7f7 f8a7 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a308:	e062      	b.n	800a3d0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a37      	ldr	r2, [pc, #220]	; (800a3ec <HAL_UART_MspInit+0x1c4>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d15d      	bne.n	800a3d0 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a314:	4b31      	ldr	r3, [pc, #196]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	4a30      	ldr	r2, [pc, #192]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a31a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a31e:	61d3      	str	r3, [r2, #28]
 800a320:	4b2e      	ldr	r3, [pc, #184]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a322:	69db      	ldr	r3, [r3, #28]
 800a324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a32c:	4b2b      	ldr	r3, [pc, #172]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	4a2a      	ldr	r2, [pc, #168]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a332:	f043 0304 	orr.w	r3, r3, #4
 800a336:	6193      	str	r3, [r2, #24]
 800a338:	4b28      	ldr	r3, [pc, #160]	; (800a3dc <HAL_UART_MspInit+0x1b4>)
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	60bb      	str	r3, [r7, #8]
 800a342:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a344:	2304      	movs	r3, #4
 800a346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a348:	2302      	movs	r3, #2
 800a34a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a34c:	2303      	movs	r3, #3
 800a34e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a350:	f107 0318 	add.w	r3, r7, #24
 800a354:	4619      	mov	r1, r3
 800a356:	4822      	ldr	r0, [pc, #136]	; (800a3e0 <HAL_UART_MspInit+0x1b8>)
 800a358:	f7f7 fb36 	bl	80019c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a35c:	2308      	movs	r3, #8
 800a35e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a360:	2300      	movs	r3, #0
 800a362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a364:	2300      	movs	r3, #0
 800a366:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a368:	f107 0318 	add.w	r3, r7, #24
 800a36c:	4619      	mov	r1, r3
 800a36e:	481c      	ldr	r0, [pc, #112]	; (800a3e0 <HAL_UART_MspInit+0x1b8>)
 800a370:	f7f7 fb2a 	bl	80019c8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800a374:	4b1e      	ldr	r3, [pc, #120]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a376:	4a1f      	ldr	r2, [pc, #124]	; (800a3f4 <HAL_UART_MspInit+0x1cc>)
 800a378:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a37a:	4b1d      	ldr	r3, [pc, #116]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a380:	4b1b      	ldr	r3, [pc, #108]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a382:	2200      	movs	r2, #0
 800a384:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a386:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a388:	2280      	movs	r2, #128	; 0x80
 800a38a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a38c:	4b18      	ldr	r3, [pc, #96]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a38e:	2200      	movs	r2, #0
 800a390:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a392:	4b17      	ldr	r3, [pc, #92]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a394:	2200      	movs	r2, #0
 800a396:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a398:	4b15      	ldr	r3, [pc, #84]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a39e:	4b14      	ldr	r3, [pc, #80]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a3a4:	4812      	ldr	r0, [pc, #72]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a3a6:	f7f7 f871 	bl	800148c <HAL_DMA_Init>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 800a3b0:	f7fb fd84 	bl	8005ebc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a0e      	ldr	r2, [pc, #56]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a3b8:	639a      	str	r2, [r3, #56]	; 0x38
 800a3ba:	4a0d      	ldr	r2, [pc, #52]	; (800a3f0 <HAL_UART_MspInit+0x1c8>)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	2026      	movs	r0, #38	; 0x26
 800a3c6:	f7f7 f82a 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a3ca:	2026      	movs	r0, #38	; 0x26
 800a3cc:	f7f7 f843 	bl	8001456 <HAL_NVIC_EnableIRQ>
}
 800a3d0:	bf00      	nop
 800a3d2:	3728      	adds	r7, #40	; 0x28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	40013800 	.word	0x40013800
 800a3dc:	40021000 	.word	0x40021000
 800a3e0:	40010800 	.word	0x40010800
 800a3e4:	20000318 	.word	0x20000318
 800a3e8:	40020058 	.word	0x40020058
 800a3ec:	40004400 	.word	0x40004400
 800a3f0:	20000138 	.word	0x20000138
 800a3f4:	4002006c 	.word	0x4002006c

0800a3f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a3fc:	bf00      	nop
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bc80      	pop	{r7}
 800a402:	4770      	bx	lr

0800a404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a404:	b480      	push	{r7}
 800a406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a408:	e7fe      	b.n	800a408 <HardFault_Handler+0x4>

0800a40a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a40a:	b480      	push	{r7}
 800a40c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a40e:	e7fe      	b.n	800a40e <MemManage_Handler+0x4>

0800a410 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a410:	b480      	push	{r7}
 800a412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a414:	e7fe      	b.n	800a414 <BusFault_Handler+0x4>

0800a416 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a416:	b480      	push	{r7}
 800a418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a41a:	e7fe      	b.n	800a41a <UsageFault_Handler+0x4>

0800a41c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a41c:	b480      	push	{r7}
 800a41e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a420:	bf00      	nop
 800a422:	46bd      	mov	sp, r7
 800a424:	bc80      	pop	{r7}
 800a426:	4770      	bx	lr

0800a428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a428:	b480      	push	{r7}
 800a42a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a42c:	bf00      	nop
 800a42e:	46bd      	mov	sp, r7
 800a430:	bc80      	pop	{r7}
 800a432:	4770      	bx	lr

0800a434 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a434:	b480      	push	{r7}
 800a436:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a438:	bf00      	nop
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr

0800a440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a444:	f7f6 fed6 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a448:	bf00      	nop
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a450:	4802      	ldr	r0, [pc, #8]	; (800a45c <DMA1_Channel5_IRQHandler+0x10>)
 800a452:	f7f7 f985 	bl	8001760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a456:	bf00      	nop
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20000318 	.word	0x20000318

0800a460 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800a464:	4802      	ldr	r0, [pc, #8]	; (800a470 <DMA1_Channel6_IRQHandler+0x10>)
 800a466:	f7f7 f97b 	bl	8001760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800a46a:	bf00      	nop
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20000138 	.word	0x20000138

0800a474 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a478:	4802      	ldr	r0, [pc, #8]	; (800a484 <TIM4_IRQHandler+0x10>)
 800a47a:	f7f9 fc9b 	bl	8003db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a47e:	bf00      	nop
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20000210 	.word	0x20000210

0800a488 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a48c:	4802      	ldr	r0, [pc, #8]	; (800a498 <USART1_IRQHandler+0x10>)
 800a48e:	f7fa fb75 	bl	8004b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a492:	bf00      	nop
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	2000035c 	.word	0x2000035c

0800a49c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a4a0:	4802      	ldr	r0, [pc, #8]	; (800a4ac <USART2_IRQHandler+0x10>)
 800a4a2:	f7fa fb6b 	bl	8004b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a4a6:	bf00      	nop
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	200003a8 	.word	0x200003a8

0800a4b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a4b8:	4b11      	ldr	r3, [pc, #68]	; (800a500 <_sbrk+0x50>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d102      	bne.n	800a4c6 <_sbrk+0x16>
		heap_end = &end;
 800a4c0:	4b0f      	ldr	r3, [pc, #60]	; (800a500 <_sbrk+0x50>)
 800a4c2:	4a10      	ldr	r2, [pc, #64]	; (800a504 <_sbrk+0x54>)
 800a4c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a4c6:	4b0e      	ldr	r3, [pc, #56]	; (800a500 <_sbrk+0x50>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <_sbrk+0x50>)
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	466a      	mov	r2, sp
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d907      	bls.n	800a4ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a4da:	f000 f841 	bl	800a560 <__errno>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	230c      	movs	r3, #12
 800a4e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e8:	e006      	b.n	800a4f8 <_sbrk+0x48>
	}

	heap_end += incr;
 800a4ea:	4b05      	ldr	r3, [pc, #20]	; (800a500 <_sbrk+0x50>)
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	4a03      	ldr	r2, [pc, #12]	; (800a500 <_sbrk+0x50>)
 800a4f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	20000128 	.word	0x20000128
 800a504:	20000580 	.word	0x20000580

0800a508 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a508:	b480      	push	{r7}
 800a50a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a50c:	bf00      	nop
 800a50e:	46bd      	mov	sp, r7
 800a510:	bc80      	pop	{r7}
 800a512:	4770      	bx	lr

0800a514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a514:	480c      	ldr	r0, [pc, #48]	; (800a548 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a516:	490d      	ldr	r1, [pc, #52]	; (800a54c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a518:	4a0d      	ldr	r2, [pc, #52]	; (800a550 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a51a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a51c:	e002      	b.n	800a524 <LoopCopyDataInit>

0800a51e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a51e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a522:	3304      	adds	r3, #4

0800a524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a528:	d3f9      	bcc.n	800a51e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a52a:	4a0a      	ldr	r2, [pc, #40]	; (800a554 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a52c:	4c0a      	ldr	r4, [pc, #40]	; (800a558 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a52e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a530:	e001      	b.n	800a536 <LoopFillZerobss>

0800a532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a534:	3204      	adds	r2, #4

0800a536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a538:	d3fb      	bcc.n	800a532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a53a:	f7ff ffe5 	bl	800a508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a53e:	f000 f815 	bl	800a56c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a542:	f7fb f8df 	bl	8005704 <main>
  bx lr
 800a546:	4770      	bx	lr
  ldr r0, =_sdata
 800a548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a54c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800a550:	0800c900 	.word	0x0800c900
  ldr r2, =_sbss
 800a554:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800a558:	2000057c 	.word	0x2000057c

0800a55c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a55c:	e7fe      	b.n	800a55c <ADC1_2_IRQHandler>
	...

0800a560 <__errno>:
 800a560:	4b01      	ldr	r3, [pc, #4]	; (800a568 <__errno+0x8>)
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	20000030 	.word	0x20000030

0800a56c <__libc_init_array>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	2500      	movs	r5, #0
 800a570:	4e0c      	ldr	r6, [pc, #48]	; (800a5a4 <__libc_init_array+0x38>)
 800a572:	4c0d      	ldr	r4, [pc, #52]	; (800a5a8 <__libc_init_array+0x3c>)
 800a574:	1ba4      	subs	r4, r4, r6
 800a576:	10a4      	asrs	r4, r4, #2
 800a578:	42a5      	cmp	r5, r4
 800a57a:	d109      	bne.n	800a590 <__libc_init_array+0x24>
 800a57c:	f002 f82a 	bl	800c5d4 <_init>
 800a580:	2500      	movs	r5, #0
 800a582:	4e0a      	ldr	r6, [pc, #40]	; (800a5ac <__libc_init_array+0x40>)
 800a584:	4c0a      	ldr	r4, [pc, #40]	; (800a5b0 <__libc_init_array+0x44>)
 800a586:	1ba4      	subs	r4, r4, r6
 800a588:	10a4      	asrs	r4, r4, #2
 800a58a:	42a5      	cmp	r5, r4
 800a58c:	d105      	bne.n	800a59a <__libc_init_array+0x2e>
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a594:	4798      	blx	r3
 800a596:	3501      	adds	r5, #1
 800a598:	e7ee      	b.n	800a578 <__libc_init_array+0xc>
 800a59a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a59e:	4798      	blx	r3
 800a5a0:	3501      	adds	r5, #1
 800a5a2:	e7f2      	b.n	800a58a <__libc_init_array+0x1e>
 800a5a4:	0800c8f8 	.word	0x0800c8f8
 800a5a8:	0800c8f8 	.word	0x0800c8f8
 800a5ac:	0800c8f8 	.word	0x0800c8f8
 800a5b0:	0800c8fc 	.word	0x0800c8fc

0800a5b4 <memset>:
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	4402      	add	r2, r0
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d100      	bne.n	800a5be <memset+0xa>
 800a5bc:	4770      	bx	lr
 800a5be:	f803 1b01 	strb.w	r1, [r3], #1
 800a5c2:	e7f9      	b.n	800a5b8 <memset+0x4>

0800a5c4 <siprintf>:
 800a5c4:	b40e      	push	{r1, r2, r3}
 800a5c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5ca:	b500      	push	{lr}
 800a5cc:	b09c      	sub	sp, #112	; 0x70
 800a5ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a5d0:	9002      	str	r0, [sp, #8]
 800a5d2:	9006      	str	r0, [sp, #24]
 800a5d4:	9107      	str	r1, [sp, #28]
 800a5d6:	9104      	str	r1, [sp, #16]
 800a5d8:	4808      	ldr	r0, [pc, #32]	; (800a5fc <siprintf+0x38>)
 800a5da:	4909      	ldr	r1, [pc, #36]	; (800a600 <siprintf+0x3c>)
 800a5dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e0:	9105      	str	r1, [sp, #20]
 800a5e2:	6800      	ldr	r0, [r0, #0]
 800a5e4:	a902      	add	r1, sp, #8
 800a5e6:	9301      	str	r3, [sp, #4]
 800a5e8:	f000 f866 	bl	800a6b8 <_svfiprintf_r>
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	9b02      	ldr	r3, [sp, #8]
 800a5f0:	701a      	strb	r2, [r3, #0]
 800a5f2:	b01c      	add	sp, #112	; 0x70
 800a5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5f8:	b003      	add	sp, #12
 800a5fa:	4770      	bx	lr
 800a5fc:	20000030 	.word	0x20000030
 800a600:	ffff0208 	.word	0xffff0208

0800a604 <__ssputs_r>:
 800a604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a608:	688e      	ldr	r6, [r1, #8]
 800a60a:	4682      	mov	sl, r0
 800a60c:	429e      	cmp	r6, r3
 800a60e:	460c      	mov	r4, r1
 800a610:	4690      	mov	r8, r2
 800a612:	4699      	mov	r9, r3
 800a614:	d837      	bhi.n	800a686 <__ssputs_r+0x82>
 800a616:	898a      	ldrh	r2, [r1, #12]
 800a618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a61c:	d031      	beq.n	800a682 <__ssputs_r+0x7e>
 800a61e:	2302      	movs	r3, #2
 800a620:	6825      	ldr	r5, [r4, #0]
 800a622:	6909      	ldr	r1, [r1, #16]
 800a624:	1a6f      	subs	r7, r5, r1
 800a626:	6965      	ldr	r5, [r4, #20]
 800a628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a62c:	fb95 f5f3 	sdiv	r5, r5, r3
 800a630:	f109 0301 	add.w	r3, r9, #1
 800a634:	443b      	add	r3, r7
 800a636:	429d      	cmp	r5, r3
 800a638:	bf38      	it	cc
 800a63a:	461d      	movcc	r5, r3
 800a63c:	0553      	lsls	r3, r2, #21
 800a63e:	d530      	bpl.n	800a6a2 <__ssputs_r+0x9e>
 800a640:	4629      	mov	r1, r5
 800a642:	f000 fb37 	bl	800acb4 <_malloc_r>
 800a646:	4606      	mov	r6, r0
 800a648:	b950      	cbnz	r0, 800a660 <__ssputs_r+0x5c>
 800a64a:	230c      	movs	r3, #12
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295
 800a650:	f8ca 3000 	str.w	r3, [sl]
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a65a:	81a3      	strh	r3, [r4, #12]
 800a65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a660:	463a      	mov	r2, r7
 800a662:	6921      	ldr	r1, [r4, #16]
 800a664:	f000 fab6 	bl	800abd4 <memcpy>
 800a668:	89a3      	ldrh	r3, [r4, #12]
 800a66a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a66e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a672:	81a3      	strh	r3, [r4, #12]
 800a674:	6126      	str	r6, [r4, #16]
 800a676:	443e      	add	r6, r7
 800a678:	6026      	str	r6, [r4, #0]
 800a67a:	464e      	mov	r6, r9
 800a67c:	6165      	str	r5, [r4, #20]
 800a67e:	1bed      	subs	r5, r5, r7
 800a680:	60a5      	str	r5, [r4, #8]
 800a682:	454e      	cmp	r6, r9
 800a684:	d900      	bls.n	800a688 <__ssputs_r+0x84>
 800a686:	464e      	mov	r6, r9
 800a688:	4632      	mov	r2, r6
 800a68a:	4641      	mov	r1, r8
 800a68c:	6820      	ldr	r0, [r4, #0]
 800a68e:	f000 faac 	bl	800abea <memmove>
 800a692:	68a3      	ldr	r3, [r4, #8]
 800a694:	2000      	movs	r0, #0
 800a696:	1b9b      	subs	r3, r3, r6
 800a698:	60a3      	str	r3, [r4, #8]
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	441e      	add	r6, r3
 800a69e:	6026      	str	r6, [r4, #0]
 800a6a0:	e7dc      	b.n	800a65c <__ssputs_r+0x58>
 800a6a2:	462a      	mov	r2, r5
 800a6a4:	f000 fb60 	bl	800ad68 <_realloc_r>
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d1e2      	bne.n	800a674 <__ssputs_r+0x70>
 800a6ae:	6921      	ldr	r1, [r4, #16]
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	f000 fab3 	bl	800ac1c <_free_r>
 800a6b6:	e7c8      	b.n	800a64a <__ssputs_r+0x46>

0800a6b8 <_svfiprintf_r>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	461d      	mov	r5, r3
 800a6be:	898b      	ldrh	r3, [r1, #12]
 800a6c0:	b09d      	sub	sp, #116	; 0x74
 800a6c2:	061f      	lsls	r7, r3, #24
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	4616      	mov	r6, r2
 800a6ca:	d50f      	bpl.n	800a6ec <_svfiprintf_r+0x34>
 800a6cc:	690b      	ldr	r3, [r1, #16]
 800a6ce:	b96b      	cbnz	r3, 800a6ec <_svfiprintf_r+0x34>
 800a6d0:	2140      	movs	r1, #64	; 0x40
 800a6d2:	f000 faef 	bl	800acb4 <_malloc_r>
 800a6d6:	6020      	str	r0, [r4, #0]
 800a6d8:	6120      	str	r0, [r4, #16]
 800a6da:	b928      	cbnz	r0, 800a6e8 <_svfiprintf_r+0x30>
 800a6dc:	230c      	movs	r3, #12
 800a6de:	f8c8 3000 	str.w	r3, [r8]
 800a6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e6:	e0c8      	b.n	800a87a <_svfiprintf_r+0x1c2>
 800a6e8:	2340      	movs	r3, #64	; 0x40
 800a6ea:	6163      	str	r3, [r4, #20]
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f0:	2320      	movs	r3, #32
 800a6f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6f6:	2330      	movs	r3, #48	; 0x30
 800a6f8:	f04f 0b01 	mov.w	fp, #1
 800a6fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a700:	9503      	str	r5, [sp, #12]
 800a702:	4637      	mov	r7, r6
 800a704:	463d      	mov	r5, r7
 800a706:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a70a:	b10b      	cbz	r3, 800a710 <_svfiprintf_r+0x58>
 800a70c:	2b25      	cmp	r3, #37	; 0x25
 800a70e:	d13e      	bne.n	800a78e <_svfiprintf_r+0xd6>
 800a710:	ebb7 0a06 	subs.w	sl, r7, r6
 800a714:	d00b      	beq.n	800a72e <_svfiprintf_r+0x76>
 800a716:	4653      	mov	r3, sl
 800a718:	4632      	mov	r2, r6
 800a71a:	4621      	mov	r1, r4
 800a71c:	4640      	mov	r0, r8
 800a71e:	f7ff ff71 	bl	800a604 <__ssputs_r>
 800a722:	3001      	adds	r0, #1
 800a724:	f000 80a4 	beq.w	800a870 <_svfiprintf_r+0x1b8>
 800a728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72a:	4453      	add	r3, sl
 800a72c:	9309      	str	r3, [sp, #36]	; 0x24
 800a72e:	783b      	ldrb	r3, [r7, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 809d 	beq.w	800a870 <_svfiprintf_r+0x1b8>
 800a736:	2300      	movs	r3, #0
 800a738:	f04f 32ff 	mov.w	r2, #4294967295
 800a73c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a740:	9304      	str	r3, [sp, #16]
 800a742:	9307      	str	r3, [sp, #28]
 800a744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a748:	931a      	str	r3, [sp, #104]	; 0x68
 800a74a:	462f      	mov	r7, r5
 800a74c:	2205      	movs	r2, #5
 800a74e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a752:	4850      	ldr	r0, [pc, #320]	; (800a894 <_svfiprintf_r+0x1dc>)
 800a754:	f000 fa30 	bl	800abb8 <memchr>
 800a758:	9b04      	ldr	r3, [sp, #16]
 800a75a:	b9d0      	cbnz	r0, 800a792 <_svfiprintf_r+0xda>
 800a75c:	06d9      	lsls	r1, r3, #27
 800a75e:	bf44      	itt	mi
 800a760:	2220      	movmi	r2, #32
 800a762:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a766:	071a      	lsls	r2, r3, #28
 800a768:	bf44      	itt	mi
 800a76a:	222b      	movmi	r2, #43	; 0x2b
 800a76c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a770:	782a      	ldrb	r2, [r5, #0]
 800a772:	2a2a      	cmp	r2, #42	; 0x2a
 800a774:	d015      	beq.n	800a7a2 <_svfiprintf_r+0xea>
 800a776:	462f      	mov	r7, r5
 800a778:	2000      	movs	r0, #0
 800a77a:	250a      	movs	r5, #10
 800a77c:	9a07      	ldr	r2, [sp, #28]
 800a77e:	4639      	mov	r1, r7
 800a780:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a784:	3b30      	subs	r3, #48	; 0x30
 800a786:	2b09      	cmp	r3, #9
 800a788:	d94d      	bls.n	800a826 <_svfiprintf_r+0x16e>
 800a78a:	b1b8      	cbz	r0, 800a7bc <_svfiprintf_r+0x104>
 800a78c:	e00f      	b.n	800a7ae <_svfiprintf_r+0xf6>
 800a78e:	462f      	mov	r7, r5
 800a790:	e7b8      	b.n	800a704 <_svfiprintf_r+0x4c>
 800a792:	4a40      	ldr	r2, [pc, #256]	; (800a894 <_svfiprintf_r+0x1dc>)
 800a794:	463d      	mov	r5, r7
 800a796:	1a80      	subs	r0, r0, r2
 800a798:	fa0b f000 	lsl.w	r0, fp, r0
 800a79c:	4318      	orrs	r0, r3
 800a79e:	9004      	str	r0, [sp, #16]
 800a7a0:	e7d3      	b.n	800a74a <_svfiprintf_r+0x92>
 800a7a2:	9a03      	ldr	r2, [sp, #12]
 800a7a4:	1d11      	adds	r1, r2, #4
 800a7a6:	6812      	ldr	r2, [r2, #0]
 800a7a8:	9103      	str	r1, [sp, #12]
 800a7aa:	2a00      	cmp	r2, #0
 800a7ac:	db01      	blt.n	800a7b2 <_svfiprintf_r+0xfa>
 800a7ae:	9207      	str	r2, [sp, #28]
 800a7b0:	e004      	b.n	800a7bc <_svfiprintf_r+0x104>
 800a7b2:	4252      	negs	r2, r2
 800a7b4:	f043 0302 	orr.w	r3, r3, #2
 800a7b8:	9207      	str	r2, [sp, #28]
 800a7ba:	9304      	str	r3, [sp, #16]
 800a7bc:	783b      	ldrb	r3, [r7, #0]
 800a7be:	2b2e      	cmp	r3, #46	; 0x2e
 800a7c0:	d10c      	bne.n	800a7dc <_svfiprintf_r+0x124>
 800a7c2:	787b      	ldrb	r3, [r7, #1]
 800a7c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c6:	d133      	bne.n	800a830 <_svfiprintf_r+0x178>
 800a7c8:	9b03      	ldr	r3, [sp, #12]
 800a7ca:	3702      	adds	r7, #2
 800a7cc:	1d1a      	adds	r2, r3, #4
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	9203      	str	r2, [sp, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	bfb8      	it	lt
 800a7d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7da:	9305      	str	r3, [sp, #20]
 800a7dc:	4d2e      	ldr	r5, [pc, #184]	; (800a898 <_svfiprintf_r+0x1e0>)
 800a7de:	2203      	movs	r2, #3
 800a7e0:	7839      	ldrb	r1, [r7, #0]
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f000 f9e8 	bl	800abb8 <memchr>
 800a7e8:	b138      	cbz	r0, 800a7fa <_svfiprintf_r+0x142>
 800a7ea:	2340      	movs	r3, #64	; 0x40
 800a7ec:	1b40      	subs	r0, r0, r5
 800a7ee:	fa03 f000 	lsl.w	r0, r3, r0
 800a7f2:	9b04      	ldr	r3, [sp, #16]
 800a7f4:	3701      	adds	r7, #1
 800a7f6:	4303      	orrs	r3, r0
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	7839      	ldrb	r1, [r7, #0]
 800a7fc:	2206      	movs	r2, #6
 800a7fe:	4827      	ldr	r0, [pc, #156]	; (800a89c <_svfiprintf_r+0x1e4>)
 800a800:	1c7e      	adds	r6, r7, #1
 800a802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a806:	f000 f9d7 	bl	800abb8 <memchr>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d038      	beq.n	800a880 <_svfiprintf_r+0x1c8>
 800a80e:	4b24      	ldr	r3, [pc, #144]	; (800a8a0 <_svfiprintf_r+0x1e8>)
 800a810:	bb13      	cbnz	r3, 800a858 <_svfiprintf_r+0x1a0>
 800a812:	9b03      	ldr	r3, [sp, #12]
 800a814:	3307      	adds	r3, #7
 800a816:	f023 0307 	bic.w	r3, r3, #7
 800a81a:	3308      	adds	r3, #8
 800a81c:	9303      	str	r3, [sp, #12]
 800a81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a820:	444b      	add	r3, r9
 800a822:	9309      	str	r3, [sp, #36]	; 0x24
 800a824:	e76d      	b.n	800a702 <_svfiprintf_r+0x4a>
 800a826:	fb05 3202 	mla	r2, r5, r2, r3
 800a82a:	2001      	movs	r0, #1
 800a82c:	460f      	mov	r7, r1
 800a82e:	e7a6      	b.n	800a77e <_svfiprintf_r+0xc6>
 800a830:	2300      	movs	r3, #0
 800a832:	250a      	movs	r5, #10
 800a834:	4619      	mov	r1, r3
 800a836:	3701      	adds	r7, #1
 800a838:	9305      	str	r3, [sp, #20]
 800a83a:	4638      	mov	r0, r7
 800a83c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a840:	3a30      	subs	r2, #48	; 0x30
 800a842:	2a09      	cmp	r2, #9
 800a844:	d903      	bls.n	800a84e <_svfiprintf_r+0x196>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0c8      	beq.n	800a7dc <_svfiprintf_r+0x124>
 800a84a:	9105      	str	r1, [sp, #20]
 800a84c:	e7c6      	b.n	800a7dc <_svfiprintf_r+0x124>
 800a84e:	fb05 2101 	mla	r1, r5, r1, r2
 800a852:	2301      	movs	r3, #1
 800a854:	4607      	mov	r7, r0
 800a856:	e7f0      	b.n	800a83a <_svfiprintf_r+0x182>
 800a858:	ab03      	add	r3, sp, #12
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	4622      	mov	r2, r4
 800a85e:	4b11      	ldr	r3, [pc, #68]	; (800a8a4 <_svfiprintf_r+0x1ec>)
 800a860:	a904      	add	r1, sp, #16
 800a862:	4640      	mov	r0, r8
 800a864:	f3af 8000 	nop.w
 800a868:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a86c:	4681      	mov	r9, r0
 800a86e:	d1d6      	bne.n	800a81e <_svfiprintf_r+0x166>
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	065b      	lsls	r3, r3, #25
 800a874:	f53f af35 	bmi.w	800a6e2 <_svfiprintf_r+0x2a>
 800a878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a87a:	b01d      	add	sp, #116	; 0x74
 800a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a880:	ab03      	add	r3, sp, #12
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	4622      	mov	r2, r4
 800a886:	4b07      	ldr	r3, [pc, #28]	; (800a8a4 <_svfiprintf_r+0x1ec>)
 800a888:	a904      	add	r1, sp, #16
 800a88a:	4640      	mov	r0, r8
 800a88c:	f000 f882 	bl	800a994 <_printf_i>
 800a890:	e7ea      	b.n	800a868 <_svfiprintf_r+0x1b0>
 800a892:	bf00      	nop
 800a894:	0800c850 	.word	0x0800c850
 800a898:	0800c856 	.word	0x0800c856
 800a89c:	0800c85a 	.word	0x0800c85a
 800a8a0:	00000000 	.word	0x00000000
 800a8a4:	0800a605 	.word	0x0800a605

0800a8a8 <_printf_common>:
 800a8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ac:	4691      	mov	r9, r2
 800a8ae:	461f      	mov	r7, r3
 800a8b0:	688a      	ldr	r2, [r1, #8]
 800a8b2:	690b      	ldr	r3, [r1, #16]
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	bfb8      	it	lt
 800a8ba:	4613      	movlt	r3, r2
 800a8bc:	f8c9 3000 	str.w	r3, [r9]
 800a8c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8ca:	b112      	cbz	r2, 800a8d2 <_printf_common+0x2a>
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	f8c9 3000 	str.w	r3, [r9]
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	0699      	lsls	r1, r3, #26
 800a8d6:	bf42      	ittt	mi
 800a8d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a8dc:	3302      	addmi	r3, #2
 800a8de:	f8c9 3000 	strmi.w	r3, [r9]
 800a8e2:	6825      	ldr	r5, [r4, #0]
 800a8e4:	f015 0506 	ands.w	r5, r5, #6
 800a8e8:	d107      	bne.n	800a8fa <_printf_common+0x52>
 800a8ea:	f104 0a19 	add.w	sl, r4, #25
 800a8ee:	68e3      	ldr	r3, [r4, #12]
 800a8f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a8f4:	1a9b      	subs	r3, r3, r2
 800a8f6:	42ab      	cmp	r3, r5
 800a8f8:	dc29      	bgt.n	800a94e <_printf_common+0xa6>
 800a8fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a8fe:	6822      	ldr	r2, [r4, #0]
 800a900:	3300      	adds	r3, #0
 800a902:	bf18      	it	ne
 800a904:	2301      	movne	r3, #1
 800a906:	0692      	lsls	r2, r2, #26
 800a908:	d42e      	bmi.n	800a968 <_printf_common+0xc0>
 800a90a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a90e:	4639      	mov	r1, r7
 800a910:	4630      	mov	r0, r6
 800a912:	47c0      	blx	r8
 800a914:	3001      	adds	r0, #1
 800a916:	d021      	beq.n	800a95c <_printf_common+0xb4>
 800a918:	6823      	ldr	r3, [r4, #0]
 800a91a:	68e5      	ldr	r5, [r4, #12]
 800a91c:	f003 0306 	and.w	r3, r3, #6
 800a920:	2b04      	cmp	r3, #4
 800a922:	bf18      	it	ne
 800a924:	2500      	movne	r5, #0
 800a926:	f8d9 2000 	ldr.w	r2, [r9]
 800a92a:	f04f 0900 	mov.w	r9, #0
 800a92e:	bf08      	it	eq
 800a930:	1aad      	subeq	r5, r5, r2
 800a932:	68a3      	ldr	r3, [r4, #8]
 800a934:	6922      	ldr	r2, [r4, #16]
 800a936:	bf08      	it	eq
 800a938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a93c:	4293      	cmp	r3, r2
 800a93e:	bfc4      	itt	gt
 800a940:	1a9b      	subgt	r3, r3, r2
 800a942:	18ed      	addgt	r5, r5, r3
 800a944:	341a      	adds	r4, #26
 800a946:	454d      	cmp	r5, r9
 800a948:	d11a      	bne.n	800a980 <_printf_common+0xd8>
 800a94a:	2000      	movs	r0, #0
 800a94c:	e008      	b.n	800a960 <_printf_common+0xb8>
 800a94e:	2301      	movs	r3, #1
 800a950:	4652      	mov	r2, sl
 800a952:	4639      	mov	r1, r7
 800a954:	4630      	mov	r0, r6
 800a956:	47c0      	blx	r8
 800a958:	3001      	adds	r0, #1
 800a95a:	d103      	bne.n	800a964 <_printf_common+0xbc>
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295
 800a960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a964:	3501      	adds	r5, #1
 800a966:	e7c2      	b.n	800a8ee <_printf_common+0x46>
 800a968:	2030      	movs	r0, #48	; 0x30
 800a96a:	18e1      	adds	r1, r4, r3
 800a96c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a976:	4422      	add	r2, r4
 800a978:	3302      	adds	r3, #2
 800a97a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a97e:	e7c4      	b.n	800a90a <_printf_common+0x62>
 800a980:	2301      	movs	r3, #1
 800a982:	4622      	mov	r2, r4
 800a984:	4639      	mov	r1, r7
 800a986:	4630      	mov	r0, r6
 800a988:	47c0      	blx	r8
 800a98a:	3001      	adds	r0, #1
 800a98c:	d0e6      	beq.n	800a95c <_printf_common+0xb4>
 800a98e:	f109 0901 	add.w	r9, r9, #1
 800a992:	e7d8      	b.n	800a946 <_printf_common+0x9e>

0800a994 <_printf_i>:
 800a994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a998:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a99c:	460c      	mov	r4, r1
 800a99e:	7e09      	ldrb	r1, [r1, #24]
 800a9a0:	b085      	sub	sp, #20
 800a9a2:	296e      	cmp	r1, #110	; 0x6e
 800a9a4:	4617      	mov	r7, r2
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	4698      	mov	r8, r3
 800a9aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9ac:	f000 80b3 	beq.w	800ab16 <_printf_i+0x182>
 800a9b0:	d822      	bhi.n	800a9f8 <_printf_i+0x64>
 800a9b2:	2963      	cmp	r1, #99	; 0x63
 800a9b4:	d036      	beq.n	800aa24 <_printf_i+0x90>
 800a9b6:	d80a      	bhi.n	800a9ce <_printf_i+0x3a>
 800a9b8:	2900      	cmp	r1, #0
 800a9ba:	f000 80b9 	beq.w	800ab30 <_printf_i+0x19c>
 800a9be:	2958      	cmp	r1, #88	; 0x58
 800a9c0:	f000 8083 	beq.w	800aaca <_printf_i+0x136>
 800a9c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a9cc:	e032      	b.n	800aa34 <_printf_i+0xa0>
 800a9ce:	2964      	cmp	r1, #100	; 0x64
 800a9d0:	d001      	beq.n	800a9d6 <_printf_i+0x42>
 800a9d2:	2969      	cmp	r1, #105	; 0x69
 800a9d4:	d1f6      	bne.n	800a9c4 <_printf_i+0x30>
 800a9d6:	6820      	ldr	r0, [r4, #0]
 800a9d8:	6813      	ldr	r3, [r2, #0]
 800a9da:	0605      	lsls	r5, r0, #24
 800a9dc:	f103 0104 	add.w	r1, r3, #4
 800a9e0:	d52a      	bpl.n	800aa38 <_printf_i+0xa4>
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6011      	str	r1, [r2, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da03      	bge.n	800a9f2 <_printf_i+0x5e>
 800a9ea:	222d      	movs	r2, #45	; 0x2d
 800a9ec:	425b      	negs	r3, r3
 800a9ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a9f2:	486f      	ldr	r0, [pc, #444]	; (800abb0 <_printf_i+0x21c>)
 800a9f4:	220a      	movs	r2, #10
 800a9f6:	e039      	b.n	800aa6c <_printf_i+0xd8>
 800a9f8:	2973      	cmp	r1, #115	; 0x73
 800a9fa:	f000 809d 	beq.w	800ab38 <_printf_i+0x1a4>
 800a9fe:	d808      	bhi.n	800aa12 <_printf_i+0x7e>
 800aa00:	296f      	cmp	r1, #111	; 0x6f
 800aa02:	d020      	beq.n	800aa46 <_printf_i+0xb2>
 800aa04:	2970      	cmp	r1, #112	; 0x70
 800aa06:	d1dd      	bne.n	800a9c4 <_printf_i+0x30>
 800aa08:	6823      	ldr	r3, [r4, #0]
 800aa0a:	f043 0320 	orr.w	r3, r3, #32
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	e003      	b.n	800aa1a <_printf_i+0x86>
 800aa12:	2975      	cmp	r1, #117	; 0x75
 800aa14:	d017      	beq.n	800aa46 <_printf_i+0xb2>
 800aa16:	2978      	cmp	r1, #120	; 0x78
 800aa18:	d1d4      	bne.n	800a9c4 <_printf_i+0x30>
 800aa1a:	2378      	movs	r3, #120	; 0x78
 800aa1c:	4865      	ldr	r0, [pc, #404]	; (800abb4 <_printf_i+0x220>)
 800aa1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa22:	e055      	b.n	800aad0 <_printf_i+0x13c>
 800aa24:	6813      	ldr	r3, [r2, #0]
 800aa26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa2a:	1d19      	adds	r1, r3, #4
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	6011      	str	r1, [r2, #0]
 800aa30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa34:	2301      	movs	r3, #1
 800aa36:	e08c      	b.n	800ab52 <_printf_i+0x1be>
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa3e:	6011      	str	r1, [r2, #0]
 800aa40:	bf18      	it	ne
 800aa42:	b21b      	sxthne	r3, r3
 800aa44:	e7cf      	b.n	800a9e6 <_printf_i+0x52>
 800aa46:	6813      	ldr	r3, [r2, #0]
 800aa48:	6825      	ldr	r5, [r4, #0]
 800aa4a:	1d18      	adds	r0, r3, #4
 800aa4c:	6010      	str	r0, [r2, #0]
 800aa4e:	0628      	lsls	r0, r5, #24
 800aa50:	d501      	bpl.n	800aa56 <_printf_i+0xc2>
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	e002      	b.n	800aa5c <_printf_i+0xc8>
 800aa56:	0668      	lsls	r0, r5, #25
 800aa58:	d5fb      	bpl.n	800aa52 <_printf_i+0xbe>
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	296f      	cmp	r1, #111	; 0x6f
 800aa5e:	bf14      	ite	ne
 800aa60:	220a      	movne	r2, #10
 800aa62:	2208      	moveq	r2, #8
 800aa64:	4852      	ldr	r0, [pc, #328]	; (800abb0 <_printf_i+0x21c>)
 800aa66:	2100      	movs	r1, #0
 800aa68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa6c:	6865      	ldr	r5, [r4, #4]
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	60a5      	str	r5, [r4, #8]
 800aa72:	f2c0 8095 	blt.w	800aba0 <_printf_i+0x20c>
 800aa76:	6821      	ldr	r1, [r4, #0]
 800aa78:	f021 0104 	bic.w	r1, r1, #4
 800aa7c:	6021      	str	r1, [r4, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d13d      	bne.n	800aafe <_printf_i+0x16a>
 800aa82:	2d00      	cmp	r5, #0
 800aa84:	f040 808e 	bne.w	800aba4 <_printf_i+0x210>
 800aa88:	4665      	mov	r5, ip
 800aa8a:	2a08      	cmp	r2, #8
 800aa8c:	d10b      	bne.n	800aaa6 <_printf_i+0x112>
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	07db      	lsls	r3, r3, #31
 800aa92:	d508      	bpl.n	800aaa6 <_printf_i+0x112>
 800aa94:	6923      	ldr	r3, [r4, #16]
 800aa96:	6862      	ldr	r2, [r4, #4]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	bfde      	ittt	le
 800aa9c:	2330      	movle	r3, #48	; 0x30
 800aa9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aaa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aaa6:	ebac 0305 	sub.w	r3, ip, r5
 800aaaa:	6123      	str	r3, [r4, #16]
 800aaac:	f8cd 8000 	str.w	r8, [sp]
 800aab0:	463b      	mov	r3, r7
 800aab2:	aa03      	add	r2, sp, #12
 800aab4:	4621      	mov	r1, r4
 800aab6:	4630      	mov	r0, r6
 800aab8:	f7ff fef6 	bl	800a8a8 <_printf_common>
 800aabc:	3001      	adds	r0, #1
 800aabe:	d14d      	bne.n	800ab5c <_printf_i+0x1c8>
 800aac0:	f04f 30ff 	mov.w	r0, #4294967295
 800aac4:	b005      	add	sp, #20
 800aac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaca:	4839      	ldr	r0, [pc, #228]	; (800abb0 <_printf_i+0x21c>)
 800aacc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aad0:	6813      	ldr	r3, [r2, #0]
 800aad2:	6821      	ldr	r1, [r4, #0]
 800aad4:	1d1d      	adds	r5, r3, #4
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6015      	str	r5, [r2, #0]
 800aada:	060a      	lsls	r2, r1, #24
 800aadc:	d50b      	bpl.n	800aaf6 <_printf_i+0x162>
 800aade:	07ca      	lsls	r2, r1, #31
 800aae0:	bf44      	itt	mi
 800aae2:	f041 0120 	orrmi.w	r1, r1, #32
 800aae6:	6021      	strmi	r1, [r4, #0]
 800aae8:	b91b      	cbnz	r3, 800aaf2 <_printf_i+0x15e>
 800aaea:	6822      	ldr	r2, [r4, #0]
 800aaec:	f022 0220 	bic.w	r2, r2, #32
 800aaf0:	6022      	str	r2, [r4, #0]
 800aaf2:	2210      	movs	r2, #16
 800aaf4:	e7b7      	b.n	800aa66 <_printf_i+0xd2>
 800aaf6:	064d      	lsls	r5, r1, #25
 800aaf8:	bf48      	it	mi
 800aafa:	b29b      	uxthmi	r3, r3
 800aafc:	e7ef      	b.n	800aade <_printf_i+0x14a>
 800aafe:	4665      	mov	r5, ip
 800ab00:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab04:	fb02 3311 	mls	r3, r2, r1, r3
 800ab08:	5cc3      	ldrb	r3, [r0, r3]
 800ab0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ab0e:	460b      	mov	r3, r1
 800ab10:	2900      	cmp	r1, #0
 800ab12:	d1f5      	bne.n	800ab00 <_printf_i+0x16c>
 800ab14:	e7b9      	b.n	800aa8a <_printf_i+0xf6>
 800ab16:	6813      	ldr	r3, [r2, #0]
 800ab18:	6825      	ldr	r5, [r4, #0]
 800ab1a:	1d18      	adds	r0, r3, #4
 800ab1c:	6961      	ldr	r1, [r4, #20]
 800ab1e:	6010      	str	r0, [r2, #0]
 800ab20:	0628      	lsls	r0, r5, #24
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	d501      	bpl.n	800ab2a <_printf_i+0x196>
 800ab26:	6019      	str	r1, [r3, #0]
 800ab28:	e002      	b.n	800ab30 <_printf_i+0x19c>
 800ab2a:	066a      	lsls	r2, r5, #25
 800ab2c:	d5fb      	bpl.n	800ab26 <_printf_i+0x192>
 800ab2e:	8019      	strh	r1, [r3, #0]
 800ab30:	2300      	movs	r3, #0
 800ab32:	4665      	mov	r5, ip
 800ab34:	6123      	str	r3, [r4, #16]
 800ab36:	e7b9      	b.n	800aaac <_printf_i+0x118>
 800ab38:	6813      	ldr	r3, [r2, #0]
 800ab3a:	1d19      	adds	r1, r3, #4
 800ab3c:	6011      	str	r1, [r2, #0]
 800ab3e:	681d      	ldr	r5, [r3, #0]
 800ab40:	6862      	ldr	r2, [r4, #4]
 800ab42:	2100      	movs	r1, #0
 800ab44:	4628      	mov	r0, r5
 800ab46:	f000 f837 	bl	800abb8 <memchr>
 800ab4a:	b108      	cbz	r0, 800ab50 <_printf_i+0x1bc>
 800ab4c:	1b40      	subs	r0, r0, r5
 800ab4e:	6060      	str	r0, [r4, #4]
 800ab50:	6863      	ldr	r3, [r4, #4]
 800ab52:	6123      	str	r3, [r4, #16]
 800ab54:	2300      	movs	r3, #0
 800ab56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab5a:	e7a7      	b.n	800aaac <_printf_i+0x118>
 800ab5c:	6923      	ldr	r3, [r4, #16]
 800ab5e:	462a      	mov	r2, r5
 800ab60:	4639      	mov	r1, r7
 800ab62:	4630      	mov	r0, r6
 800ab64:	47c0      	blx	r8
 800ab66:	3001      	adds	r0, #1
 800ab68:	d0aa      	beq.n	800aac0 <_printf_i+0x12c>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	079b      	lsls	r3, r3, #30
 800ab6e:	d413      	bmi.n	800ab98 <_printf_i+0x204>
 800ab70:	68e0      	ldr	r0, [r4, #12]
 800ab72:	9b03      	ldr	r3, [sp, #12]
 800ab74:	4298      	cmp	r0, r3
 800ab76:	bfb8      	it	lt
 800ab78:	4618      	movlt	r0, r3
 800ab7a:	e7a3      	b.n	800aac4 <_printf_i+0x130>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	464a      	mov	r2, r9
 800ab80:	4639      	mov	r1, r7
 800ab82:	4630      	mov	r0, r6
 800ab84:	47c0      	blx	r8
 800ab86:	3001      	adds	r0, #1
 800ab88:	d09a      	beq.n	800aac0 <_printf_i+0x12c>
 800ab8a:	3501      	adds	r5, #1
 800ab8c:	68e3      	ldr	r3, [r4, #12]
 800ab8e:	9a03      	ldr	r2, [sp, #12]
 800ab90:	1a9b      	subs	r3, r3, r2
 800ab92:	42ab      	cmp	r3, r5
 800ab94:	dcf2      	bgt.n	800ab7c <_printf_i+0x1e8>
 800ab96:	e7eb      	b.n	800ab70 <_printf_i+0x1dc>
 800ab98:	2500      	movs	r5, #0
 800ab9a:	f104 0919 	add.w	r9, r4, #25
 800ab9e:	e7f5      	b.n	800ab8c <_printf_i+0x1f8>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1ac      	bne.n	800aafe <_printf_i+0x16a>
 800aba4:	7803      	ldrb	r3, [r0, #0]
 800aba6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abae:	e76c      	b.n	800aa8a <_printf_i+0xf6>
 800abb0:	0800c861 	.word	0x0800c861
 800abb4:	0800c872 	.word	0x0800c872

0800abb8 <memchr>:
 800abb8:	b510      	push	{r4, lr}
 800abba:	b2c9      	uxtb	r1, r1
 800abbc:	4402      	add	r2, r0
 800abbe:	4290      	cmp	r0, r2
 800abc0:	4603      	mov	r3, r0
 800abc2:	d101      	bne.n	800abc8 <memchr+0x10>
 800abc4:	2300      	movs	r3, #0
 800abc6:	e003      	b.n	800abd0 <memchr+0x18>
 800abc8:	781c      	ldrb	r4, [r3, #0]
 800abca:	3001      	adds	r0, #1
 800abcc:	428c      	cmp	r4, r1
 800abce:	d1f6      	bne.n	800abbe <memchr+0x6>
 800abd0:	4618      	mov	r0, r3
 800abd2:	bd10      	pop	{r4, pc}

0800abd4 <memcpy>:
 800abd4:	b510      	push	{r4, lr}
 800abd6:	1e43      	subs	r3, r0, #1
 800abd8:	440a      	add	r2, r1
 800abda:	4291      	cmp	r1, r2
 800abdc:	d100      	bne.n	800abe0 <memcpy+0xc>
 800abde:	bd10      	pop	{r4, pc}
 800abe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abe8:	e7f7      	b.n	800abda <memcpy+0x6>

0800abea <memmove>:
 800abea:	4288      	cmp	r0, r1
 800abec:	b510      	push	{r4, lr}
 800abee:	eb01 0302 	add.w	r3, r1, r2
 800abf2:	d807      	bhi.n	800ac04 <memmove+0x1a>
 800abf4:	1e42      	subs	r2, r0, #1
 800abf6:	4299      	cmp	r1, r3
 800abf8:	d00a      	beq.n	800ac10 <memmove+0x26>
 800abfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abfe:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ac02:	e7f8      	b.n	800abf6 <memmove+0xc>
 800ac04:	4283      	cmp	r3, r0
 800ac06:	d9f5      	bls.n	800abf4 <memmove+0xa>
 800ac08:	1881      	adds	r1, r0, r2
 800ac0a:	1ad2      	subs	r2, r2, r3
 800ac0c:	42d3      	cmn	r3, r2
 800ac0e:	d100      	bne.n	800ac12 <memmove+0x28>
 800ac10:	bd10      	pop	{r4, pc}
 800ac12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac16:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ac1a:	e7f7      	b.n	800ac0c <memmove+0x22>

0800ac1c <_free_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4605      	mov	r5, r0
 800ac20:	2900      	cmp	r1, #0
 800ac22:	d043      	beq.n	800acac <_free_r+0x90>
 800ac24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac28:	1f0c      	subs	r4, r1, #4
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfb8      	it	lt
 800ac2e:	18e4      	addlt	r4, r4, r3
 800ac30:	f000 f8d0 	bl	800add4 <__malloc_lock>
 800ac34:	4a1e      	ldr	r2, [pc, #120]	; (800acb0 <_free_r+0x94>)
 800ac36:	6813      	ldr	r3, [r2, #0]
 800ac38:	4610      	mov	r0, r2
 800ac3a:	b933      	cbnz	r3, 800ac4a <_free_r+0x2e>
 800ac3c:	6063      	str	r3, [r4, #4]
 800ac3e:	6014      	str	r4, [r2, #0]
 800ac40:	4628      	mov	r0, r5
 800ac42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac46:	f000 b8c6 	b.w	800add6 <__malloc_unlock>
 800ac4a:	42a3      	cmp	r3, r4
 800ac4c:	d90b      	bls.n	800ac66 <_free_r+0x4a>
 800ac4e:	6821      	ldr	r1, [r4, #0]
 800ac50:	1862      	adds	r2, r4, r1
 800ac52:	4293      	cmp	r3, r2
 800ac54:	bf01      	itttt	eq
 800ac56:	681a      	ldreq	r2, [r3, #0]
 800ac58:	685b      	ldreq	r3, [r3, #4]
 800ac5a:	1852      	addeq	r2, r2, r1
 800ac5c:	6022      	streq	r2, [r4, #0]
 800ac5e:	6063      	str	r3, [r4, #4]
 800ac60:	6004      	str	r4, [r0, #0]
 800ac62:	e7ed      	b.n	800ac40 <_free_r+0x24>
 800ac64:	4613      	mov	r3, r2
 800ac66:	685a      	ldr	r2, [r3, #4]
 800ac68:	b10a      	cbz	r2, 800ac6e <_free_r+0x52>
 800ac6a:	42a2      	cmp	r2, r4
 800ac6c:	d9fa      	bls.n	800ac64 <_free_r+0x48>
 800ac6e:	6819      	ldr	r1, [r3, #0]
 800ac70:	1858      	adds	r0, r3, r1
 800ac72:	42a0      	cmp	r0, r4
 800ac74:	d10b      	bne.n	800ac8e <_free_r+0x72>
 800ac76:	6820      	ldr	r0, [r4, #0]
 800ac78:	4401      	add	r1, r0
 800ac7a:	1858      	adds	r0, r3, r1
 800ac7c:	4282      	cmp	r2, r0
 800ac7e:	6019      	str	r1, [r3, #0]
 800ac80:	d1de      	bne.n	800ac40 <_free_r+0x24>
 800ac82:	6810      	ldr	r0, [r2, #0]
 800ac84:	6852      	ldr	r2, [r2, #4]
 800ac86:	4401      	add	r1, r0
 800ac88:	6019      	str	r1, [r3, #0]
 800ac8a:	605a      	str	r2, [r3, #4]
 800ac8c:	e7d8      	b.n	800ac40 <_free_r+0x24>
 800ac8e:	d902      	bls.n	800ac96 <_free_r+0x7a>
 800ac90:	230c      	movs	r3, #12
 800ac92:	602b      	str	r3, [r5, #0]
 800ac94:	e7d4      	b.n	800ac40 <_free_r+0x24>
 800ac96:	6820      	ldr	r0, [r4, #0]
 800ac98:	1821      	adds	r1, r4, r0
 800ac9a:	428a      	cmp	r2, r1
 800ac9c:	bf01      	itttt	eq
 800ac9e:	6811      	ldreq	r1, [r2, #0]
 800aca0:	6852      	ldreq	r2, [r2, #4]
 800aca2:	1809      	addeq	r1, r1, r0
 800aca4:	6021      	streq	r1, [r4, #0]
 800aca6:	6062      	str	r2, [r4, #4]
 800aca8:	605c      	str	r4, [r3, #4]
 800acaa:	e7c9      	b.n	800ac40 <_free_r+0x24>
 800acac:	bd38      	pop	{r3, r4, r5, pc}
 800acae:	bf00      	nop
 800acb0:	2000012c 	.word	0x2000012c

0800acb4 <_malloc_r>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	1ccd      	adds	r5, r1, #3
 800acb8:	f025 0503 	bic.w	r5, r5, #3
 800acbc:	3508      	adds	r5, #8
 800acbe:	2d0c      	cmp	r5, #12
 800acc0:	bf38      	it	cc
 800acc2:	250c      	movcc	r5, #12
 800acc4:	2d00      	cmp	r5, #0
 800acc6:	4606      	mov	r6, r0
 800acc8:	db01      	blt.n	800acce <_malloc_r+0x1a>
 800acca:	42a9      	cmp	r1, r5
 800accc:	d903      	bls.n	800acd6 <_malloc_r+0x22>
 800acce:	230c      	movs	r3, #12
 800acd0:	6033      	str	r3, [r6, #0]
 800acd2:	2000      	movs	r0, #0
 800acd4:	bd70      	pop	{r4, r5, r6, pc}
 800acd6:	f000 f87d 	bl	800add4 <__malloc_lock>
 800acda:	4a21      	ldr	r2, [pc, #132]	; (800ad60 <_malloc_r+0xac>)
 800acdc:	6814      	ldr	r4, [r2, #0]
 800acde:	4621      	mov	r1, r4
 800ace0:	b991      	cbnz	r1, 800ad08 <_malloc_r+0x54>
 800ace2:	4c20      	ldr	r4, [pc, #128]	; (800ad64 <_malloc_r+0xb0>)
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	b91b      	cbnz	r3, 800acf0 <_malloc_r+0x3c>
 800ace8:	4630      	mov	r0, r6
 800acea:	f000 f863 	bl	800adb4 <_sbrk_r>
 800acee:	6020      	str	r0, [r4, #0]
 800acf0:	4629      	mov	r1, r5
 800acf2:	4630      	mov	r0, r6
 800acf4:	f000 f85e 	bl	800adb4 <_sbrk_r>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d124      	bne.n	800ad46 <_malloc_r+0x92>
 800acfc:	230c      	movs	r3, #12
 800acfe:	4630      	mov	r0, r6
 800ad00:	6033      	str	r3, [r6, #0]
 800ad02:	f000 f868 	bl	800add6 <__malloc_unlock>
 800ad06:	e7e4      	b.n	800acd2 <_malloc_r+0x1e>
 800ad08:	680b      	ldr	r3, [r1, #0]
 800ad0a:	1b5b      	subs	r3, r3, r5
 800ad0c:	d418      	bmi.n	800ad40 <_malloc_r+0x8c>
 800ad0e:	2b0b      	cmp	r3, #11
 800ad10:	d90f      	bls.n	800ad32 <_malloc_r+0x7e>
 800ad12:	600b      	str	r3, [r1, #0]
 800ad14:	18cc      	adds	r4, r1, r3
 800ad16:	50cd      	str	r5, [r1, r3]
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f000 f85c 	bl	800add6 <__malloc_unlock>
 800ad1e:	f104 000b 	add.w	r0, r4, #11
 800ad22:	1d23      	adds	r3, r4, #4
 800ad24:	f020 0007 	bic.w	r0, r0, #7
 800ad28:	1ac3      	subs	r3, r0, r3
 800ad2a:	d0d3      	beq.n	800acd4 <_malloc_r+0x20>
 800ad2c:	425a      	negs	r2, r3
 800ad2e:	50e2      	str	r2, [r4, r3]
 800ad30:	e7d0      	b.n	800acd4 <_malloc_r+0x20>
 800ad32:	684b      	ldr	r3, [r1, #4]
 800ad34:	428c      	cmp	r4, r1
 800ad36:	bf16      	itet	ne
 800ad38:	6063      	strne	r3, [r4, #4]
 800ad3a:	6013      	streq	r3, [r2, #0]
 800ad3c:	460c      	movne	r4, r1
 800ad3e:	e7eb      	b.n	800ad18 <_malloc_r+0x64>
 800ad40:	460c      	mov	r4, r1
 800ad42:	6849      	ldr	r1, [r1, #4]
 800ad44:	e7cc      	b.n	800ace0 <_malloc_r+0x2c>
 800ad46:	1cc4      	adds	r4, r0, #3
 800ad48:	f024 0403 	bic.w	r4, r4, #3
 800ad4c:	42a0      	cmp	r0, r4
 800ad4e:	d005      	beq.n	800ad5c <_malloc_r+0xa8>
 800ad50:	1a21      	subs	r1, r4, r0
 800ad52:	4630      	mov	r0, r6
 800ad54:	f000 f82e 	bl	800adb4 <_sbrk_r>
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d0cf      	beq.n	800acfc <_malloc_r+0x48>
 800ad5c:	6025      	str	r5, [r4, #0]
 800ad5e:	e7db      	b.n	800ad18 <_malloc_r+0x64>
 800ad60:	2000012c 	.word	0x2000012c
 800ad64:	20000130 	.word	0x20000130

0800ad68 <_realloc_r>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	4607      	mov	r7, r0
 800ad6c:	4614      	mov	r4, r2
 800ad6e:	460e      	mov	r6, r1
 800ad70:	b921      	cbnz	r1, 800ad7c <_realloc_r+0x14>
 800ad72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad76:	4611      	mov	r1, r2
 800ad78:	f7ff bf9c 	b.w	800acb4 <_malloc_r>
 800ad7c:	b922      	cbnz	r2, 800ad88 <_realloc_r+0x20>
 800ad7e:	f7ff ff4d 	bl	800ac1c <_free_r>
 800ad82:	4625      	mov	r5, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad88:	f000 f826 	bl	800add8 <_malloc_usable_size_r>
 800ad8c:	42a0      	cmp	r0, r4
 800ad8e:	d20f      	bcs.n	800adb0 <_realloc_r+0x48>
 800ad90:	4621      	mov	r1, r4
 800ad92:	4638      	mov	r0, r7
 800ad94:	f7ff ff8e 	bl	800acb4 <_malloc_r>
 800ad98:	4605      	mov	r5, r0
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d0f2      	beq.n	800ad84 <_realloc_r+0x1c>
 800ad9e:	4631      	mov	r1, r6
 800ada0:	4622      	mov	r2, r4
 800ada2:	f7ff ff17 	bl	800abd4 <memcpy>
 800ada6:	4631      	mov	r1, r6
 800ada8:	4638      	mov	r0, r7
 800adaa:	f7ff ff37 	bl	800ac1c <_free_r>
 800adae:	e7e9      	b.n	800ad84 <_realloc_r+0x1c>
 800adb0:	4635      	mov	r5, r6
 800adb2:	e7e7      	b.n	800ad84 <_realloc_r+0x1c>

0800adb4 <_sbrk_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	2300      	movs	r3, #0
 800adb8:	4c05      	ldr	r4, [pc, #20]	; (800add0 <_sbrk_r+0x1c>)
 800adba:	4605      	mov	r5, r0
 800adbc:	4608      	mov	r0, r1
 800adbe:	6023      	str	r3, [r4, #0]
 800adc0:	f7ff fb76 	bl	800a4b0 <_sbrk>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_sbrk_r+0x1a>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	b103      	cbz	r3, 800adce <_sbrk_r+0x1a>
 800adcc:	602b      	str	r3, [r5, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20000578 	.word	0x20000578

0800add4 <__malloc_lock>:
 800add4:	4770      	bx	lr

0800add6 <__malloc_unlock>:
 800add6:	4770      	bx	lr

0800add8 <_malloc_usable_size_r>:
 800add8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800addc:	1f18      	subs	r0, r3, #4
 800adde:	2b00      	cmp	r3, #0
 800ade0:	bfbc      	itt	lt
 800ade2:	580b      	ldrlt	r3, [r1, r0]
 800ade4:	18c0      	addlt	r0, r0, r3
 800ade6:	4770      	bx	lr

0800ade8 <pow>:
 800ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adec:	b08f      	sub	sp, #60	; 0x3c
 800adee:	461d      	mov	r5, r3
 800adf0:	4680      	mov	r8, r0
 800adf2:	4689      	mov	r9, r1
 800adf4:	4614      	mov	r4, r2
 800adf6:	f000 f9ef 	bl	800b1d8 <__ieee754_pow>
 800adfa:	4fa1      	ldr	r7, [pc, #644]	; (800b080 <pow+0x298>)
 800adfc:	e9cd 0100 	strd	r0, r1, [sp]
 800ae00:	f997 3000 	ldrsb.w	r3, [r7]
 800ae04:	463e      	mov	r6, r7
 800ae06:	9302      	str	r3, [sp, #8]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	d05f      	beq.n	800aecc <pow+0xe4>
 800ae0c:	4622      	mov	r2, r4
 800ae0e:	462b      	mov	r3, r5
 800ae10:	4620      	mov	r0, r4
 800ae12:	4629      	mov	r1, r5
 800ae14:	f7f5 fdf2 	bl	80009fc <__aeabi_dcmpun>
 800ae18:	4682      	mov	sl, r0
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d156      	bne.n	800aecc <pow+0xe4>
 800ae1e:	4642      	mov	r2, r8
 800ae20:	464b      	mov	r3, r9
 800ae22:	4640      	mov	r0, r8
 800ae24:	4649      	mov	r1, r9
 800ae26:	f7f5 fde9 	bl	80009fc <__aeabi_dcmpun>
 800ae2a:	9003      	str	r0, [sp, #12]
 800ae2c:	b1e8      	cbz	r0, 800ae6a <pow+0x82>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7f5 fdaf 	bl	8000998 <__aeabi_dcmpeq>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d046      	beq.n	800aecc <pow+0xe4>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	2200      	movs	r2, #0
 800ae42:	9304      	str	r3, [sp, #16]
 800ae44:	4b8f      	ldr	r3, [pc, #572]	; (800b084 <pow+0x29c>)
 800ae46:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800ae4a:	9305      	str	r3, [sp, #20]
 800ae4c:	4b8e      	ldr	r3, [pc, #568]	; (800b088 <pow+0x2a0>)
 800ae4e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ae52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ae56:	9b02      	ldr	r3, [sp, #8]
 800ae58:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d031      	beq.n	800aec4 <pow+0xdc>
 800ae60:	a804      	add	r0, sp, #16
 800ae62:	f001 f99e 	bl	800c1a2 <matherr>
 800ae66:	bb38      	cbnz	r0, 800aeb8 <pow+0xd0>
 800ae68:	e058      	b.n	800af1c <pow+0x134>
 800ae6a:	f04f 0a00 	mov.w	sl, #0
 800ae6e:	f04f 0b00 	mov.w	fp, #0
 800ae72:	4652      	mov	r2, sl
 800ae74:	465b      	mov	r3, fp
 800ae76:	4640      	mov	r0, r8
 800ae78:	4649      	mov	r1, r9
 800ae7a:	f7f5 fd8d 	bl	8000998 <__aeabi_dcmpeq>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d051      	beq.n	800af26 <pow+0x13e>
 800ae82:	4652      	mov	r2, sl
 800ae84:	465b      	mov	r3, fp
 800ae86:	4620      	mov	r0, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7f5 fd85 	bl	8000998 <__aeabi_dcmpeq>
 800ae8e:	4606      	mov	r6, r0
 800ae90:	b308      	cbz	r0, 800aed6 <pow+0xee>
 800ae92:	2301      	movs	r3, #1
 800ae94:	9304      	str	r3, [sp, #16]
 800ae96:	4b7b      	ldr	r3, [pc, #492]	; (800b084 <pow+0x29c>)
 800ae98:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ae9c:	9305      	str	r3, [sp, #20]
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800aea4:	930c      	str	r3, [sp, #48]	; 0x30
 800aea6:	9b02      	ldr	r3, [sp, #8]
 800aea8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d0d7      	beq.n	800ae60 <pow+0x78>
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	4b75      	ldr	r3, [pc, #468]	; (800b088 <pow+0x2a0>)
 800aeb4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aeb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeba:	b11b      	cbz	r3, 800aec4 <pow+0xdc>
 800aebc:	f7ff fb50 	bl	800a560 <__errno>
 800aec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aec2:	6003      	str	r3, [r0, #0]
 800aec4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800aec8:	e9cd 3400 	strd	r3, r4, [sp]
 800aecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aed0:	b00f      	add	sp, #60	; 0x3c
 800aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	f001 f95c 	bl	800c196 <finite>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d0f4      	beq.n	800aecc <pow+0xe4>
 800aee2:	4652      	mov	r2, sl
 800aee4:	465b      	mov	r3, fp
 800aee6:	4620      	mov	r0, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 fd5f 	bl	80009ac <__aeabi_dcmplt>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d0ec      	beq.n	800aecc <pow+0xe4>
 800aef2:	2301      	movs	r3, #1
 800aef4:	9304      	str	r3, [sp, #16]
 800aef6:	4b63      	ldr	r3, [pc, #396]	; (800b084 <pow+0x29c>)
 800aef8:	960c      	str	r6, [sp, #48]	; 0x30
 800aefa:	9305      	str	r3, [sp, #20]
 800aefc:	f997 3000 	ldrsb.w	r3, [r7]
 800af00:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800af04:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800af08:	b913      	cbnz	r3, 800af10 <pow+0x128>
 800af0a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800af0e:	e7a7      	b.n	800ae60 <pow+0x78>
 800af10:	2000      	movs	r0, #0
 800af12:	495e      	ldr	r1, [pc, #376]	; (800b08c <pow+0x2a4>)
 800af14:	2b02      	cmp	r3, #2
 800af16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af1a:	d1a1      	bne.n	800ae60 <pow+0x78>
 800af1c:	f7ff fb20 	bl	800a560 <__errno>
 800af20:	2321      	movs	r3, #33	; 0x21
 800af22:	6003      	str	r3, [r0, #0]
 800af24:	e7c8      	b.n	800aeb8 <pow+0xd0>
 800af26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af2a:	f001 f934 	bl	800c196 <finite>
 800af2e:	9002      	str	r0, [sp, #8]
 800af30:	2800      	cmp	r0, #0
 800af32:	d177      	bne.n	800b024 <pow+0x23c>
 800af34:	4640      	mov	r0, r8
 800af36:	4649      	mov	r1, r9
 800af38:	f001 f92d 	bl	800c196 <finite>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d071      	beq.n	800b024 <pow+0x23c>
 800af40:	4620      	mov	r0, r4
 800af42:	4629      	mov	r1, r5
 800af44:	f001 f927 	bl	800c196 <finite>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d06b      	beq.n	800b024 <pow+0x23c>
 800af4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af50:	4619      	mov	r1, r3
 800af52:	4610      	mov	r0, r2
 800af54:	f7f5 fd52 	bl	80009fc <__aeabi_dcmpun>
 800af58:	f997 7000 	ldrsb.w	r7, [r7]
 800af5c:	4b49      	ldr	r3, [pc, #292]	; (800b084 <pow+0x29c>)
 800af5e:	b1a0      	cbz	r0, 800af8a <pow+0x1a2>
 800af60:	2201      	movs	r2, #1
 800af62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af66:	9b02      	ldr	r3, [sp, #8]
 800af68:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800af6c:	930c      	str	r3, [sp, #48]	; 0x30
 800af6e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800af72:	2f00      	cmp	r7, #0
 800af74:	d0c9      	beq.n	800af0a <pow+0x122>
 800af76:	4652      	mov	r2, sl
 800af78:	465b      	mov	r3, fp
 800af7a:	4650      	mov	r0, sl
 800af7c:	4659      	mov	r1, fp
 800af7e:	f7f5 fbcd 	bl	800071c <__aeabi_ddiv>
 800af82:	2f02      	cmp	r7, #2
 800af84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af88:	e7c7      	b.n	800af1a <pow+0x132>
 800af8a:	2203      	movs	r2, #3
 800af8c:	900c      	str	r0, [sp, #48]	; 0x30
 800af8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af92:	4620      	mov	r0, r4
 800af94:	4629      	mov	r1, r5
 800af96:	2200      	movs	r2, #0
 800af98:	4b3d      	ldr	r3, [pc, #244]	; (800b090 <pow+0x2a8>)
 800af9a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800af9e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800afa2:	f7f5 fa91 	bl	80004c8 <__aeabi_dmul>
 800afa6:	4604      	mov	r4, r0
 800afa8:	460d      	mov	r5, r1
 800afaa:	bb17      	cbnz	r7, 800aff2 <pow+0x20a>
 800afac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800afb0:	4b38      	ldr	r3, [pc, #224]	; (800b094 <pow+0x2ac>)
 800afb2:	4640      	mov	r0, r8
 800afb4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800afb8:	4649      	mov	r1, r9
 800afba:	4652      	mov	r2, sl
 800afbc:	465b      	mov	r3, fp
 800afbe:	f7f5 fcf5 	bl	80009ac <__aeabi_dcmplt>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d054      	beq.n	800b070 <pow+0x288>
 800afc6:	4620      	mov	r0, r4
 800afc8:	4629      	mov	r1, r5
 800afca:	f001 f8f3 	bl	800c1b4 <rint>
 800afce:	4622      	mov	r2, r4
 800afd0:	462b      	mov	r3, r5
 800afd2:	f7f5 fce1 	bl	8000998 <__aeabi_dcmpeq>
 800afd6:	b920      	cbnz	r0, 800afe2 <pow+0x1fa>
 800afd8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800afdc:	4b2e      	ldr	r3, [pc, #184]	; (800b098 <pow+0x2b0>)
 800afde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800afe2:	f996 3000 	ldrsb.w	r3, [r6]
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d142      	bne.n	800b070 <pow+0x288>
 800afea:	f7ff fab9 	bl	800a560 <__errno>
 800afee:	2322      	movs	r3, #34	; 0x22
 800aff0:	e797      	b.n	800af22 <pow+0x13a>
 800aff2:	2200      	movs	r2, #0
 800aff4:	4b29      	ldr	r3, [pc, #164]	; (800b09c <pow+0x2b4>)
 800aff6:	4640      	mov	r0, r8
 800aff8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800affc:	4649      	mov	r1, r9
 800affe:	4652      	mov	r2, sl
 800b000:	465b      	mov	r3, fp
 800b002:	f7f5 fcd3 	bl	80009ac <__aeabi_dcmplt>
 800b006:	2800      	cmp	r0, #0
 800b008:	d0eb      	beq.n	800afe2 <pow+0x1fa>
 800b00a:	4620      	mov	r0, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	f001 f8d1 	bl	800c1b4 <rint>
 800b012:	4622      	mov	r2, r4
 800b014:	462b      	mov	r3, r5
 800b016:	f7f5 fcbf 	bl	8000998 <__aeabi_dcmpeq>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d1e1      	bne.n	800afe2 <pow+0x1fa>
 800b01e:	2200      	movs	r2, #0
 800b020:	4b1a      	ldr	r3, [pc, #104]	; (800b08c <pow+0x2a4>)
 800b022:	e7dc      	b.n	800afde <pow+0x1f6>
 800b024:	2200      	movs	r2, #0
 800b026:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b02a:	2300      	movs	r3, #0
 800b02c:	f7f5 fcb4 	bl	8000998 <__aeabi_dcmpeq>
 800b030:	2800      	cmp	r0, #0
 800b032:	f43f af4b 	beq.w	800aecc <pow+0xe4>
 800b036:	4640      	mov	r0, r8
 800b038:	4649      	mov	r1, r9
 800b03a:	f001 f8ac 	bl	800c196 <finite>
 800b03e:	2800      	cmp	r0, #0
 800b040:	f43f af44 	beq.w	800aecc <pow+0xe4>
 800b044:	4620      	mov	r0, r4
 800b046:	4629      	mov	r1, r5
 800b048:	f001 f8a5 	bl	800c196 <finite>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	f43f af3d 	beq.w	800aecc <pow+0xe4>
 800b052:	2304      	movs	r3, #4
 800b054:	9304      	str	r3, [sp, #16]
 800b056:	4b0b      	ldr	r3, [pc, #44]	; (800b084 <pow+0x29c>)
 800b058:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	2300      	movs	r3, #0
 800b060:	2400      	movs	r4, #0
 800b062:	930c      	str	r3, [sp, #48]	; 0x30
 800b064:	2300      	movs	r3, #0
 800b066:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b06a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800b06e:	e7b8      	b.n	800afe2 <pow+0x1fa>
 800b070:	a804      	add	r0, sp, #16
 800b072:	f001 f896 	bl	800c1a2 <matherr>
 800b076:	2800      	cmp	r0, #0
 800b078:	f47f af1e 	bne.w	800aeb8 <pow+0xd0>
 800b07c:	e7b5      	b.n	800afea <pow+0x202>
 800b07e:	bf00      	nop
 800b080:	20000094 	.word	0x20000094
 800b084:	0800c883 	.word	0x0800c883
 800b088:	3ff00000 	.word	0x3ff00000
 800b08c:	fff00000 	.word	0xfff00000
 800b090:	3fe00000 	.word	0x3fe00000
 800b094:	47efffff 	.word	0x47efffff
 800b098:	c7efffff 	.word	0xc7efffff
 800b09c:	7ff00000 	.word	0x7ff00000

0800b0a0 <asinf>:
 800b0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0a2:	b08b      	sub	sp, #44	; 0x2c
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	f000 fe4d 	bl	800bd44 <__ieee754_asinf>
 800b0aa:	4e21      	ldr	r6, [pc, #132]	; (800b130 <asinf+0x90>)
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	f996 3000 	ldrsb.w	r3, [r6]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	d038      	beq.n	800b128 <asinf+0x88>
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f7f5 fff9 	bl	80010b0 <__aeabi_fcmpun>
 800b0be:	4607      	mov	r7, r0
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d131      	bne.n	800b128 <asinf+0x88>
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f001 fa79 	bl	800c5bc <fabsf>
 800b0ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b0ce:	f7f5 ffe5 	bl	800109c <__aeabi_fcmpgt>
 800b0d2:	b348      	cbz	r0, 800b128 <asinf+0x88>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	4b16      	ldr	r3, [pc, #88]	; (800b134 <asinf+0x94>)
 800b0da:	4620      	mov	r0, r4
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	9708      	str	r7, [sp, #32]
 800b0e0:	f7f5 f99a 	bl	8000418 <__aeabi_f2d>
 800b0e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ec:	4812      	ldr	r0, [pc, #72]	; (800b138 <asinf+0x98>)
 800b0ee:	f001 f85b 	bl	800c1a8 <nan>
 800b0f2:	f996 3000 	ldrsb.w	r3, [r6]
 800b0f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	d104      	bne.n	800b108 <asinf+0x68>
 800b0fe:	f7ff fa2f 	bl	800a560 <__errno>
 800b102:	2321      	movs	r3, #33	; 0x21
 800b104:	6003      	str	r3, [r0, #0]
 800b106:	e004      	b.n	800b112 <asinf+0x72>
 800b108:	4668      	mov	r0, sp
 800b10a:	f001 f84a 	bl	800c1a2 <matherr>
 800b10e:	2800      	cmp	r0, #0
 800b110:	d0f5      	beq.n	800b0fe <asinf+0x5e>
 800b112:	9b08      	ldr	r3, [sp, #32]
 800b114:	b11b      	cbz	r3, 800b11e <asinf+0x7e>
 800b116:	f7ff fa23 	bl	800a560 <__errno>
 800b11a:	9b08      	ldr	r3, [sp, #32]
 800b11c:	6003      	str	r3, [r0, #0]
 800b11e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b122:	f7f5 fca1 	bl	8000a68 <__aeabi_d2f>
 800b126:	4605      	mov	r5, r0
 800b128:	4628      	mov	r0, r5
 800b12a:	b00b      	add	sp, #44	; 0x2c
 800b12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b12e:	bf00      	nop
 800b130:	20000094 	.word	0x20000094
 800b134:	0800c887 	.word	0x0800c887
 800b138:	0800c855 	.word	0x0800c855

0800b13c <atan2f>:
 800b13c:	f000 bf44 	b.w	800bfc8 <__ieee754_atan2f>

0800b140 <sqrtf>:
 800b140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b142:	b08b      	sub	sp, #44	; 0x2c
 800b144:	4604      	mov	r4, r0
 800b146:	f000 ffcf 	bl	800c0e8 <__ieee754_sqrtf>
 800b14a:	4b20      	ldr	r3, [pc, #128]	; (800b1cc <sqrtf+0x8c>)
 800b14c:	4606      	mov	r6, r0
 800b14e:	f993 5000 	ldrsb.w	r5, [r3]
 800b152:	1c6b      	adds	r3, r5, #1
 800b154:	d02a      	beq.n	800b1ac <sqrtf+0x6c>
 800b156:	4621      	mov	r1, r4
 800b158:	4620      	mov	r0, r4
 800b15a:	f7f5 ffa9 	bl	80010b0 <__aeabi_fcmpun>
 800b15e:	4607      	mov	r7, r0
 800b160:	bb20      	cbnz	r0, 800b1ac <sqrtf+0x6c>
 800b162:	2100      	movs	r1, #0
 800b164:	4620      	mov	r0, r4
 800b166:	f7f5 ff7b 	bl	8001060 <__aeabi_fcmplt>
 800b16a:	b1f8      	cbz	r0, 800b1ac <sqrtf+0x6c>
 800b16c:	2301      	movs	r3, #1
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	4b17      	ldr	r3, [pc, #92]	; (800b1d0 <sqrtf+0x90>)
 800b172:	4620      	mov	r0, r4
 800b174:	9301      	str	r3, [sp, #4]
 800b176:	9708      	str	r7, [sp, #32]
 800b178:	f7f5 f94e 	bl	8000418 <__aeabi_f2d>
 800b17c:	2200      	movs	r2, #0
 800b17e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b186:	2300      	movs	r3, #0
 800b188:	b99d      	cbnz	r5, 800b1b2 <sqrtf+0x72>
 800b18a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b18e:	4668      	mov	r0, sp
 800b190:	f001 f807 	bl	800c1a2 <matherr>
 800b194:	b1a8      	cbz	r0, 800b1c2 <sqrtf+0x82>
 800b196:	9b08      	ldr	r3, [sp, #32]
 800b198:	b11b      	cbz	r3, 800b1a2 <sqrtf+0x62>
 800b19a:	f7ff f9e1 	bl	800a560 <__errno>
 800b19e:	9b08      	ldr	r3, [sp, #32]
 800b1a0:	6003      	str	r3, [r0, #0]
 800b1a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1a6:	f7f5 fc5f 	bl	8000a68 <__aeabi_d2f>
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	b00b      	add	sp, #44	; 0x2c
 800b1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	f7f5 fab1 	bl	800071c <__aeabi_ddiv>
 800b1ba:	2d02      	cmp	r5, #2
 800b1bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b1c0:	d1e5      	bne.n	800b18e <sqrtf+0x4e>
 800b1c2:	f7ff f9cd 	bl	800a560 <__errno>
 800b1c6:	2321      	movs	r3, #33	; 0x21
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	e7e4      	b.n	800b196 <sqrtf+0x56>
 800b1cc:	20000094 	.word	0x20000094
 800b1d0:	0800c88d 	.word	0x0800c88d
 800b1d4:	00000000 	.word	0x00000000

0800b1d8 <__ieee754_pow>:
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	b091      	sub	sp, #68	; 0x44
 800b1de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1e2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800b1e6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b1ea:	ea55 0302 	orrs.w	r3, r5, r2
 800b1ee:	4607      	mov	r7, r0
 800b1f0:	4688      	mov	r8, r1
 800b1f2:	f000 84b7 	beq.w	800bb64 <__ieee754_pow+0x98c>
 800b1f6:	4b80      	ldr	r3, [pc, #512]	; (800b3f8 <__ieee754_pow+0x220>)
 800b1f8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	4689      	mov	r9, r1
 800b200:	4682      	mov	sl, r0
 800b202:	dc09      	bgt.n	800b218 <__ieee754_pow+0x40>
 800b204:	d103      	bne.n	800b20e <__ieee754_pow+0x36>
 800b206:	b938      	cbnz	r0, 800b218 <__ieee754_pow+0x40>
 800b208:	42a5      	cmp	r5, r4
 800b20a:	dc0d      	bgt.n	800b228 <__ieee754_pow+0x50>
 800b20c:	e001      	b.n	800b212 <__ieee754_pow+0x3a>
 800b20e:	429d      	cmp	r5, r3
 800b210:	dc02      	bgt.n	800b218 <__ieee754_pow+0x40>
 800b212:	429d      	cmp	r5, r3
 800b214:	d10e      	bne.n	800b234 <__ieee754_pow+0x5c>
 800b216:	b16a      	cbz	r2, 800b234 <__ieee754_pow+0x5c>
 800b218:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b21c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b220:	ea54 030a 	orrs.w	r3, r4, sl
 800b224:	f000 849e 	beq.w	800bb64 <__ieee754_pow+0x98c>
 800b228:	4874      	ldr	r0, [pc, #464]	; (800b3fc <__ieee754_pow+0x224>)
 800b22a:	b011      	add	sp, #68	; 0x44
 800b22c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	f000 bfba 	b.w	800c1a8 <nan>
 800b234:	f1b9 0f00 	cmp.w	r9, #0
 800b238:	da53      	bge.n	800b2e2 <__ieee754_pow+0x10a>
 800b23a:	4b71      	ldr	r3, [pc, #452]	; (800b400 <__ieee754_pow+0x228>)
 800b23c:	429d      	cmp	r5, r3
 800b23e:	dc4e      	bgt.n	800b2de <__ieee754_pow+0x106>
 800b240:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b244:	429d      	cmp	r5, r3
 800b246:	dd4c      	ble.n	800b2e2 <__ieee754_pow+0x10a>
 800b248:	152b      	asrs	r3, r5, #20
 800b24a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b24e:	2b14      	cmp	r3, #20
 800b250:	dd28      	ble.n	800b2a4 <__ieee754_pow+0xcc>
 800b252:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b256:	fa22 f103 	lsr.w	r1, r2, r3
 800b25a:	fa01 f303 	lsl.w	r3, r1, r3
 800b25e:	4293      	cmp	r3, r2
 800b260:	d13f      	bne.n	800b2e2 <__ieee754_pow+0x10a>
 800b262:	f001 0101 	and.w	r1, r1, #1
 800b266:	f1c1 0302 	rsb	r3, r1, #2
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	2a00      	cmp	r2, #0
 800b26e:	d15c      	bne.n	800b32a <__ieee754_pow+0x152>
 800b270:	4b61      	ldr	r3, [pc, #388]	; (800b3f8 <__ieee754_pow+0x220>)
 800b272:	429d      	cmp	r5, r3
 800b274:	d126      	bne.n	800b2c4 <__ieee754_pow+0xec>
 800b276:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b27a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b27e:	ea53 030a 	orrs.w	r3, r3, sl
 800b282:	f000 846f 	beq.w	800bb64 <__ieee754_pow+0x98c>
 800b286:	4b5f      	ldr	r3, [pc, #380]	; (800b404 <__ieee754_pow+0x22c>)
 800b288:	429c      	cmp	r4, r3
 800b28a:	dd2c      	ble.n	800b2e6 <__ieee754_pow+0x10e>
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	f280 846f 	bge.w	800bb70 <__ieee754_pow+0x998>
 800b292:	f04f 0b00 	mov.w	fp, #0
 800b296:	f04f 0c00 	mov.w	ip, #0
 800b29a:	4658      	mov	r0, fp
 800b29c:	4661      	mov	r1, ip
 800b29e:	b011      	add	sp, #68	; 0x44
 800b2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a4:	2a00      	cmp	r2, #0
 800b2a6:	d13e      	bne.n	800b326 <__ieee754_pow+0x14e>
 800b2a8:	f1c3 0314 	rsb	r3, r3, #20
 800b2ac:	fa45 f103 	asr.w	r1, r5, r3
 800b2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b4:	42ab      	cmp	r3, r5
 800b2b6:	f040 8463 	bne.w	800bb80 <__ieee754_pow+0x9a8>
 800b2ba:	f001 0101 	and.w	r1, r1, #1
 800b2be:	f1c1 0302 	rsb	r3, r1, #2
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	4b50      	ldr	r3, [pc, #320]	; (800b408 <__ieee754_pow+0x230>)
 800b2c6:	429d      	cmp	r5, r3
 800b2c8:	d114      	bne.n	800b2f4 <__ieee754_pow+0x11c>
 800b2ca:	2e00      	cmp	r6, #0
 800b2cc:	f280 8454 	bge.w	800bb78 <__ieee754_pow+0x9a0>
 800b2d0:	463a      	mov	r2, r7
 800b2d2:	4643      	mov	r3, r8
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	494c      	ldr	r1, [pc, #304]	; (800b408 <__ieee754_pow+0x230>)
 800b2d8:	f7f5 fa20 	bl	800071c <__aeabi_ddiv>
 800b2dc:	e013      	b.n	800b306 <__ieee754_pow+0x12e>
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e7c3      	b.n	800b26a <__ieee754_pow+0x92>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	e7c1      	b.n	800b26a <__ieee754_pow+0x92>
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	dad3      	bge.n	800b292 <__ieee754_pow+0xba>
 800b2ea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b2ee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b2f2:	e7d2      	b.n	800b29a <__ieee754_pow+0xc2>
 800b2f4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800b2f8:	d108      	bne.n	800b30c <__ieee754_pow+0x134>
 800b2fa:	463a      	mov	r2, r7
 800b2fc:	4643      	mov	r3, r8
 800b2fe:	4638      	mov	r0, r7
 800b300:	4641      	mov	r1, r8
 800b302:	f7f5 f8e1 	bl	80004c8 <__aeabi_dmul>
 800b306:	4683      	mov	fp, r0
 800b308:	468c      	mov	ip, r1
 800b30a:	e7c6      	b.n	800b29a <__ieee754_pow+0xc2>
 800b30c:	4b3f      	ldr	r3, [pc, #252]	; (800b40c <__ieee754_pow+0x234>)
 800b30e:	429e      	cmp	r6, r3
 800b310:	d10b      	bne.n	800b32a <__ieee754_pow+0x152>
 800b312:	f1b9 0f00 	cmp.w	r9, #0
 800b316:	db08      	blt.n	800b32a <__ieee754_pow+0x152>
 800b318:	4638      	mov	r0, r7
 800b31a:	4641      	mov	r1, r8
 800b31c:	b011      	add	sp, #68	; 0x44
 800b31e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b322:	f000 bc63 	b.w	800bbec <__ieee754_sqrt>
 800b326:	2300      	movs	r3, #0
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	4638      	mov	r0, r7
 800b32c:	4641      	mov	r1, r8
 800b32e:	f000 ff2e 	bl	800c18e <fabs>
 800b332:	4683      	mov	fp, r0
 800b334:	468c      	mov	ip, r1
 800b336:	f1ba 0f00 	cmp.w	sl, #0
 800b33a:	d12b      	bne.n	800b394 <__ieee754_pow+0x1bc>
 800b33c:	b124      	cbz	r4, 800b348 <__ieee754_pow+0x170>
 800b33e:	4b32      	ldr	r3, [pc, #200]	; (800b408 <__ieee754_pow+0x230>)
 800b340:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800b344:	429a      	cmp	r2, r3
 800b346:	d125      	bne.n	800b394 <__ieee754_pow+0x1bc>
 800b348:	2e00      	cmp	r6, #0
 800b34a:	da07      	bge.n	800b35c <__ieee754_pow+0x184>
 800b34c:	465a      	mov	r2, fp
 800b34e:	4663      	mov	r3, ip
 800b350:	2000      	movs	r0, #0
 800b352:	492d      	ldr	r1, [pc, #180]	; (800b408 <__ieee754_pow+0x230>)
 800b354:	f7f5 f9e2 	bl	800071c <__aeabi_ddiv>
 800b358:	4683      	mov	fp, r0
 800b35a:	468c      	mov	ip, r1
 800b35c:	f1b9 0f00 	cmp.w	r9, #0
 800b360:	da9b      	bge.n	800b29a <__ieee754_pow+0xc2>
 800b362:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b366:	9b00      	ldr	r3, [sp, #0]
 800b368:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b36c:	4323      	orrs	r3, r4
 800b36e:	d108      	bne.n	800b382 <__ieee754_pow+0x1aa>
 800b370:	465a      	mov	r2, fp
 800b372:	4663      	mov	r3, ip
 800b374:	4658      	mov	r0, fp
 800b376:	4661      	mov	r1, ip
 800b378:	f7f4 feee 	bl	8000158 <__aeabi_dsub>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	e7aa      	b.n	800b2d8 <__ieee754_pow+0x100>
 800b382:	9b00      	ldr	r3, [sp, #0]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d188      	bne.n	800b29a <__ieee754_pow+0xc2>
 800b388:	4658      	mov	r0, fp
 800b38a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b38e:	4683      	mov	fp, r0
 800b390:	469c      	mov	ip, r3
 800b392:	e782      	b.n	800b29a <__ieee754_pow+0xc2>
 800b394:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800b398:	f109 33ff 	add.w	r3, r9, #4294967295
 800b39c:	930d      	str	r3, [sp, #52]	; 0x34
 800b39e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3a0:	9b00      	ldr	r3, [sp, #0]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	d104      	bne.n	800b3b0 <__ieee754_pow+0x1d8>
 800b3a6:	463a      	mov	r2, r7
 800b3a8:	4643      	mov	r3, r8
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	4641      	mov	r1, r8
 800b3ae:	e7e3      	b.n	800b378 <__ieee754_pow+0x1a0>
 800b3b0:	4b17      	ldr	r3, [pc, #92]	; (800b410 <__ieee754_pow+0x238>)
 800b3b2:	429d      	cmp	r5, r3
 800b3b4:	f340 80fe 	ble.w	800b5b4 <__ieee754_pow+0x3dc>
 800b3b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b3bc:	429d      	cmp	r5, r3
 800b3be:	dd0b      	ble.n	800b3d8 <__ieee754_pow+0x200>
 800b3c0:	4b10      	ldr	r3, [pc, #64]	; (800b404 <__ieee754_pow+0x22c>)
 800b3c2:	429c      	cmp	r4, r3
 800b3c4:	dc0e      	bgt.n	800b3e4 <__ieee754_pow+0x20c>
 800b3c6:	2e00      	cmp	r6, #0
 800b3c8:	f6bf af63 	bge.w	800b292 <__ieee754_pow+0xba>
 800b3cc:	a308      	add	r3, pc, #32	; (adr r3, 800b3f0 <__ieee754_pow+0x218>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	e794      	b.n	800b302 <__ieee754_pow+0x12a>
 800b3d8:	4b0e      	ldr	r3, [pc, #56]	; (800b414 <__ieee754_pow+0x23c>)
 800b3da:	429c      	cmp	r4, r3
 800b3dc:	ddf3      	ble.n	800b3c6 <__ieee754_pow+0x1ee>
 800b3de:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <__ieee754_pow+0x230>)
 800b3e0:	429c      	cmp	r4, r3
 800b3e2:	dd19      	ble.n	800b418 <__ieee754_pow+0x240>
 800b3e4:	2e00      	cmp	r6, #0
 800b3e6:	dcf1      	bgt.n	800b3cc <__ieee754_pow+0x1f4>
 800b3e8:	e753      	b.n	800b292 <__ieee754_pow+0xba>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	8800759c 	.word	0x8800759c
 800b3f4:	7e37e43c 	.word	0x7e37e43c
 800b3f8:	7ff00000 	.word	0x7ff00000
 800b3fc:	0800c855 	.word	0x0800c855
 800b400:	433fffff 	.word	0x433fffff
 800b404:	3fefffff 	.word	0x3fefffff
 800b408:	3ff00000 	.word	0x3ff00000
 800b40c:	3fe00000 	.word	0x3fe00000
 800b410:	41e00000 	.word	0x41e00000
 800b414:	3feffffe 	.word	0x3feffffe
 800b418:	4661      	mov	r1, ip
 800b41a:	2200      	movs	r2, #0
 800b41c:	4b60      	ldr	r3, [pc, #384]	; (800b5a0 <__ieee754_pow+0x3c8>)
 800b41e:	4658      	mov	r0, fp
 800b420:	f7f4 fe9a 	bl	8000158 <__aeabi_dsub>
 800b424:	a354      	add	r3, pc, #336	; (adr r3, 800b578 <__ieee754_pow+0x3a0>)
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	4604      	mov	r4, r0
 800b42c:	460d      	mov	r5, r1
 800b42e:	f7f5 f84b 	bl	80004c8 <__aeabi_dmul>
 800b432:	a353      	add	r3, pc, #332	; (adr r3, 800b580 <__ieee754_pow+0x3a8>)
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	4606      	mov	r6, r0
 800b43a:	460f      	mov	r7, r1
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f7f5 f842 	bl	80004c8 <__aeabi_dmul>
 800b444:	2200      	movs	r2, #0
 800b446:	4682      	mov	sl, r0
 800b448:	468b      	mov	fp, r1
 800b44a:	4b56      	ldr	r3, [pc, #344]	; (800b5a4 <__ieee754_pow+0x3cc>)
 800b44c:	4620      	mov	r0, r4
 800b44e:	4629      	mov	r1, r5
 800b450:	f7f5 f83a 	bl	80004c8 <__aeabi_dmul>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	a14b      	add	r1, pc, #300	; (adr r1, 800b588 <__ieee754_pow+0x3b0>)
 800b45a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b45e:	f7f4 fe7b 	bl	8000158 <__aeabi_dsub>
 800b462:	4622      	mov	r2, r4
 800b464:	462b      	mov	r3, r5
 800b466:	f7f5 f82f 	bl	80004c8 <__aeabi_dmul>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	2000      	movs	r0, #0
 800b470:	494d      	ldr	r1, [pc, #308]	; (800b5a8 <__ieee754_pow+0x3d0>)
 800b472:	f7f4 fe71 	bl	8000158 <__aeabi_dsub>
 800b476:	4622      	mov	r2, r4
 800b478:	462b      	mov	r3, r5
 800b47a:	4680      	mov	r8, r0
 800b47c:	4689      	mov	r9, r1
 800b47e:	4620      	mov	r0, r4
 800b480:	4629      	mov	r1, r5
 800b482:	f7f5 f821 	bl	80004c8 <__aeabi_dmul>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	4640      	mov	r0, r8
 800b48c:	4649      	mov	r1, r9
 800b48e:	f7f5 f81b 	bl	80004c8 <__aeabi_dmul>
 800b492:	a33f      	add	r3, pc, #252	; (adr r3, 800b590 <__ieee754_pow+0x3b8>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f7f5 f816 	bl	80004c8 <__aeabi_dmul>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4650      	mov	r0, sl
 800b4a2:	4659      	mov	r1, fp
 800b4a4:	f7f4 fe58 	bl	8000158 <__aeabi_dsub>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	f7f4 fe52 	bl	800015c <__adddf3>
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	468b      	mov	fp, r1
 800b4bc:	4682      	mov	sl, r0
 800b4be:	4632      	mov	r2, r6
 800b4c0:	463b      	mov	r3, r7
 800b4c2:	f7f4 fe49 	bl	8000158 <__aeabi_dsub>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	f7f4 fe43 	bl	8000158 <__aeabi_dsub>
 800b4d2:	9b00      	ldr	r3, [sp, #0]
 800b4d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	f04f 0300 	mov.w	r3, #0
 800b4de:	bf0c      	ite	eq
 800b4e0:	4c32      	ldreq	r4, [pc, #200]	; (800b5ac <__ieee754_pow+0x3d4>)
 800b4e2:	4c2f      	ldrne	r4, [pc, #188]	; (800b5a0 <__ieee754_pow+0x3c8>)
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	e9cd 3400 	strd	r3, r4, [sp]
 800b4ea:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4ee:	2400      	movs	r4, #0
 800b4f0:	460f      	mov	r7, r1
 800b4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	462b      	mov	r3, r5
 800b4fa:	f7f4 fe2d 	bl	8000158 <__aeabi_dsub>
 800b4fe:	4652      	mov	r2, sl
 800b500:	465b      	mov	r3, fp
 800b502:	f7f4 ffe1 	bl	80004c8 <__aeabi_dmul>
 800b506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b50a:	4680      	mov	r8, r0
 800b50c:	4689      	mov	r9, r1
 800b50e:	4630      	mov	r0, r6
 800b510:	4639      	mov	r1, r7
 800b512:	f7f4 ffd9 	bl	80004c8 <__aeabi_dmul>
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	4640      	mov	r0, r8
 800b51c:	4649      	mov	r1, r9
 800b51e:	f7f4 fe1d 	bl	800015c <__adddf3>
 800b522:	4622      	mov	r2, r4
 800b524:	462b      	mov	r3, r5
 800b526:	4680      	mov	r8, r0
 800b528:	4689      	mov	r9, r1
 800b52a:	4650      	mov	r0, sl
 800b52c:	4659      	mov	r1, fp
 800b52e:	f7f4 ffcb 	bl	80004c8 <__aeabi_dmul>
 800b532:	4604      	mov	r4, r0
 800b534:	460d      	mov	r5, r1
 800b536:	460b      	mov	r3, r1
 800b538:	4602      	mov	r2, r0
 800b53a:	4649      	mov	r1, r9
 800b53c:	4640      	mov	r0, r8
 800b53e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b542:	f7f4 fe0b 	bl	800015c <__adddf3>
 800b546:	4b1a      	ldr	r3, [pc, #104]	; (800b5b0 <__ieee754_pow+0x3d8>)
 800b548:	4682      	mov	sl, r0
 800b54a:	4299      	cmp	r1, r3
 800b54c:	460f      	mov	r7, r1
 800b54e:	460e      	mov	r6, r1
 800b550:	f340 82e1 	ble.w	800bb16 <__ieee754_pow+0x93e>
 800b554:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b558:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b55c:	4303      	orrs	r3, r0
 800b55e:	f000 81db 	beq.w	800b918 <__ieee754_pow+0x740>
 800b562:	a30d      	add	r3, pc, #52	; (adr r3, 800b598 <__ieee754_pow+0x3c0>)
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b56c:	f7f4 ffac 	bl	80004c8 <__aeabi_dmul>
 800b570:	a309      	add	r3, pc, #36	; (adr r3, 800b598 <__ieee754_pow+0x3c0>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	e6c4      	b.n	800b302 <__ieee754_pow+0x12a>
 800b578:	60000000 	.word	0x60000000
 800b57c:	3ff71547 	.word	0x3ff71547
 800b580:	f85ddf44 	.word	0xf85ddf44
 800b584:	3e54ae0b 	.word	0x3e54ae0b
 800b588:	55555555 	.word	0x55555555
 800b58c:	3fd55555 	.word	0x3fd55555
 800b590:	652b82fe 	.word	0x652b82fe
 800b594:	3ff71547 	.word	0x3ff71547
 800b598:	8800759c 	.word	0x8800759c
 800b59c:	7e37e43c 	.word	0x7e37e43c
 800b5a0:	3ff00000 	.word	0x3ff00000
 800b5a4:	3fd00000 	.word	0x3fd00000
 800b5a8:	3fe00000 	.word	0x3fe00000
 800b5ac:	bff00000 	.word	0xbff00000
 800b5b0:	408fffff 	.word	0x408fffff
 800b5b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b5b8:	f04f 0200 	mov.w	r2, #0
 800b5bc:	da08      	bge.n	800b5d0 <__ieee754_pow+0x3f8>
 800b5be:	4658      	mov	r0, fp
 800b5c0:	4bcd      	ldr	r3, [pc, #820]	; (800b8f8 <__ieee754_pow+0x720>)
 800b5c2:	4661      	mov	r1, ip
 800b5c4:	f7f4 ff80 	bl	80004c8 <__aeabi_dmul>
 800b5c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b5cc:	4683      	mov	fp, r0
 800b5ce:	460c      	mov	r4, r1
 800b5d0:	1523      	asrs	r3, r4, #20
 800b5d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5d6:	4413      	add	r3, r2
 800b5d8:	930c      	str	r3, [sp, #48]	; 0x30
 800b5da:	4bc8      	ldr	r3, [pc, #800]	; (800b8fc <__ieee754_pow+0x724>)
 800b5dc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b5e0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b5e4:	429c      	cmp	r4, r3
 800b5e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b5ea:	dd08      	ble.n	800b5fe <__ieee754_pow+0x426>
 800b5ec:	4bc4      	ldr	r3, [pc, #784]	; (800b900 <__ieee754_pow+0x728>)
 800b5ee:	429c      	cmp	r4, r3
 800b5f0:	f340 815b 	ble.w	800b8aa <__ieee754_pow+0x6d2>
 800b5f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	930c      	str	r3, [sp, #48]	; 0x30
 800b5fe:	f04f 0800 	mov.w	r8, #0
 800b602:	4658      	mov	r0, fp
 800b604:	4629      	mov	r1, r5
 800b606:	4bbf      	ldr	r3, [pc, #764]	; (800b904 <__ieee754_pow+0x72c>)
 800b608:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800b60c:	444b      	add	r3, r9
 800b60e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b612:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b616:	461a      	mov	r2, r3
 800b618:	4623      	mov	r3, r4
 800b61a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b61e:	f7f4 fd9b 	bl	8000158 <__aeabi_dsub>
 800b622:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b626:	4606      	mov	r6, r0
 800b628:	460f      	mov	r7, r1
 800b62a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b62e:	f7f4 fd95 	bl	800015c <__adddf3>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	2000      	movs	r0, #0
 800b638:	49b3      	ldr	r1, [pc, #716]	; (800b908 <__ieee754_pow+0x730>)
 800b63a:	f7f5 f86f 	bl	800071c <__aeabi_ddiv>
 800b63e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	4630      	mov	r0, r6
 800b648:	4639      	mov	r1, r7
 800b64a:	f7f4 ff3d 	bl	80004c8 <__aeabi_dmul>
 800b64e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b652:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b656:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b65a:	2300      	movs	r3, #0
 800b65c:	2200      	movs	r2, #0
 800b65e:	106d      	asrs	r5, r5, #1
 800b660:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b664:	9304      	str	r3, [sp, #16]
 800b666:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b66a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b66e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800b672:	4650      	mov	r0, sl
 800b674:	4659      	mov	r1, fp
 800b676:	4614      	mov	r4, r2
 800b678:	461d      	mov	r5, r3
 800b67a:	f7f4 ff25 	bl	80004c8 <__aeabi_dmul>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	f7f4 fd67 	bl	8000158 <__aeabi_dsub>
 800b68a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b68e:	4606      	mov	r6, r0
 800b690:	460f      	mov	r7, r1
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 fd5f 	bl	8000158 <__aeabi_dsub>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b6a2:	f7f4 fd59 	bl	8000158 <__aeabi_dsub>
 800b6a6:	4652      	mov	r2, sl
 800b6a8:	465b      	mov	r3, fp
 800b6aa:	f7f4 ff0d 	bl	80004c8 <__aeabi_dmul>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	f7f4 fd4f 	bl	8000158 <__aeabi_dsub>
 800b6ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b6be:	f7f4 ff03 	bl	80004c8 <__aeabi_dmul>
 800b6c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f7f4 fefb 	bl	80004c8 <__aeabi_dmul>
 800b6d2:	a377      	add	r3, pc, #476	; (adr r3, 800b8b0 <__ieee754_pow+0x6d8>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	4604      	mov	r4, r0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	f7f4 fef4 	bl	80004c8 <__aeabi_dmul>
 800b6e0:	a375      	add	r3, pc, #468	; (adr r3, 800b8b8 <__ieee754_pow+0x6e0>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fd39 	bl	800015c <__adddf3>
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	f7f4 feeb 	bl	80004c8 <__aeabi_dmul>
 800b6f2:	a373      	add	r3, pc, #460	; (adr r3, 800b8c0 <__ieee754_pow+0x6e8>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f7f4 fd30 	bl	800015c <__adddf3>
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	462b      	mov	r3, r5
 800b700:	f7f4 fee2 	bl	80004c8 <__aeabi_dmul>
 800b704:	a370      	add	r3, pc, #448	; (adr r3, 800b8c8 <__ieee754_pow+0x6f0>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	f7f4 fd27 	bl	800015c <__adddf3>
 800b70e:	4622      	mov	r2, r4
 800b710:	462b      	mov	r3, r5
 800b712:	f7f4 fed9 	bl	80004c8 <__aeabi_dmul>
 800b716:	a36e      	add	r3, pc, #440	; (adr r3, 800b8d0 <__ieee754_pow+0x6f8>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f7f4 fd1e 	bl	800015c <__adddf3>
 800b720:	4622      	mov	r2, r4
 800b722:	462b      	mov	r3, r5
 800b724:	f7f4 fed0 	bl	80004c8 <__aeabi_dmul>
 800b728:	a36b      	add	r3, pc, #428	; (adr r3, 800b8d8 <__ieee754_pow+0x700>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 fd15 	bl	800015c <__adddf3>
 800b732:	4622      	mov	r2, r4
 800b734:	4606      	mov	r6, r0
 800b736:	460f      	mov	r7, r1
 800b738:	462b      	mov	r3, r5
 800b73a:	4620      	mov	r0, r4
 800b73c:	4629      	mov	r1, r5
 800b73e:	f7f4 fec3 	bl	80004c8 <__aeabi_dmul>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	f7f4 febd 	bl	80004c8 <__aeabi_dmul>
 800b74e:	4604      	mov	r4, r0
 800b750:	460d      	mov	r5, r1
 800b752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b756:	4652      	mov	r2, sl
 800b758:	465b      	mov	r3, fp
 800b75a:	f7f4 fcff 	bl	800015c <__adddf3>
 800b75e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b762:	f7f4 feb1 	bl	80004c8 <__aeabi_dmul>
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	f7f4 fcf7 	bl	800015c <__adddf3>
 800b76e:	4652      	mov	r2, sl
 800b770:	4606      	mov	r6, r0
 800b772:	460f      	mov	r7, r1
 800b774:	465b      	mov	r3, fp
 800b776:	4650      	mov	r0, sl
 800b778:	4659      	mov	r1, fp
 800b77a:	f7f4 fea5 	bl	80004c8 <__aeabi_dmul>
 800b77e:	2200      	movs	r2, #0
 800b780:	4b62      	ldr	r3, [pc, #392]	; (800b90c <__ieee754_pow+0x734>)
 800b782:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b786:	f7f4 fce9 	bl	800015c <__adddf3>
 800b78a:	4632      	mov	r2, r6
 800b78c:	463b      	mov	r3, r7
 800b78e:	f7f4 fce5 	bl	800015c <__adddf3>
 800b792:	9804      	ldr	r0, [sp, #16]
 800b794:	460d      	mov	r5, r1
 800b796:	4604      	mov	r4, r0
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4650      	mov	r0, sl
 800b79e:	4659      	mov	r1, fp
 800b7a0:	f7f4 fe92 	bl	80004c8 <__aeabi_dmul>
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4682      	mov	sl, r0
 800b7a8:	468b      	mov	fp, r1
 800b7aa:	4b58      	ldr	r3, [pc, #352]	; (800b90c <__ieee754_pow+0x734>)
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	f7f4 fcd2 	bl	8000158 <__aeabi_dsub>
 800b7b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b7b8:	f7f4 fcce 	bl	8000158 <__aeabi_dsub>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	f7f4 fcc8 	bl	8000158 <__aeabi_dsub>
 800b7c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7cc:	f7f4 fe7c 	bl	80004c8 <__aeabi_dmul>
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	460f      	mov	r7, r1
 800b7d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7da:	462b      	mov	r3, r5
 800b7dc:	f7f4 fe74 	bl	80004c8 <__aeabi_dmul>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	f7f4 fcb8 	bl	800015c <__adddf3>
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4650      	mov	r0, sl
 800b7f6:	4659      	mov	r1, fp
 800b7f8:	f7f4 fcb0 	bl	800015c <__adddf3>
 800b7fc:	a338      	add	r3, pc, #224	; (adr r3, 800b8e0 <__ieee754_pow+0x708>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	9804      	ldr	r0, [sp, #16]
 800b804:	460d      	mov	r5, r1
 800b806:	4604      	mov	r4, r0
 800b808:	f7f4 fe5e 	bl	80004c8 <__aeabi_dmul>
 800b80c:	4652      	mov	r2, sl
 800b80e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b812:	465b      	mov	r3, fp
 800b814:	4620      	mov	r0, r4
 800b816:	4629      	mov	r1, r5
 800b818:	f7f4 fc9e 	bl	8000158 <__aeabi_dsub>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	f7f4 fc98 	bl	8000158 <__aeabi_dsub>
 800b828:	a32f      	add	r3, pc, #188	; (adr r3, 800b8e8 <__ieee754_pow+0x710>)
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	f7f4 fe4b 	bl	80004c8 <__aeabi_dmul>
 800b832:	a32f      	add	r3, pc, #188	; (adr r3, 800b8f0 <__ieee754_pow+0x718>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	4606      	mov	r6, r0
 800b83a:	460f      	mov	r7, r1
 800b83c:	4620      	mov	r0, r4
 800b83e:	4629      	mov	r1, r5
 800b840:	f7f4 fe42 	bl	80004c8 <__aeabi_dmul>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4630      	mov	r0, r6
 800b84a:	4639      	mov	r1, r7
 800b84c:	f7f4 fc86 	bl	800015c <__adddf3>
 800b850:	4b2f      	ldr	r3, [pc, #188]	; (800b910 <__ieee754_pow+0x738>)
 800b852:	444b      	add	r3, r9
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f7f4 fc80 	bl	800015c <__adddf3>
 800b85c:	4604      	mov	r4, r0
 800b85e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b860:	460d      	mov	r5, r1
 800b862:	f7f4 fdc7 	bl	80003f4 <__aeabi_i2d>
 800b866:	4606      	mov	r6, r0
 800b868:	460f      	mov	r7, r1
 800b86a:	4b2a      	ldr	r3, [pc, #168]	; (800b914 <__ieee754_pow+0x73c>)
 800b86c:	4622      	mov	r2, r4
 800b86e:	444b      	add	r3, r9
 800b870:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b874:	462b      	mov	r3, r5
 800b876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b87a:	f7f4 fc6f 	bl	800015c <__adddf3>
 800b87e:	4642      	mov	r2, r8
 800b880:	464b      	mov	r3, r9
 800b882:	f7f4 fc6b 	bl	800015c <__adddf3>
 800b886:	4632      	mov	r2, r6
 800b888:	463b      	mov	r3, r7
 800b88a:	f7f4 fc67 	bl	800015c <__adddf3>
 800b88e:	9804      	ldr	r0, [sp, #16]
 800b890:	4632      	mov	r2, r6
 800b892:	463b      	mov	r3, r7
 800b894:	4682      	mov	sl, r0
 800b896:	468b      	mov	fp, r1
 800b898:	f7f4 fc5e 	bl	8000158 <__aeabi_dsub>
 800b89c:	4642      	mov	r2, r8
 800b89e:	464b      	mov	r3, r9
 800b8a0:	f7f4 fc5a 	bl	8000158 <__aeabi_dsub>
 800b8a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8a8:	e60b      	b.n	800b4c2 <__ieee754_pow+0x2ea>
 800b8aa:	f04f 0801 	mov.w	r8, #1
 800b8ae:	e6a8      	b.n	800b602 <__ieee754_pow+0x42a>
 800b8b0:	4a454eef 	.word	0x4a454eef
 800b8b4:	3fca7e28 	.word	0x3fca7e28
 800b8b8:	93c9db65 	.word	0x93c9db65
 800b8bc:	3fcd864a 	.word	0x3fcd864a
 800b8c0:	a91d4101 	.word	0xa91d4101
 800b8c4:	3fd17460 	.word	0x3fd17460
 800b8c8:	518f264d 	.word	0x518f264d
 800b8cc:	3fd55555 	.word	0x3fd55555
 800b8d0:	db6fabff 	.word	0xdb6fabff
 800b8d4:	3fdb6db6 	.word	0x3fdb6db6
 800b8d8:	33333303 	.word	0x33333303
 800b8dc:	3fe33333 	.word	0x3fe33333
 800b8e0:	e0000000 	.word	0xe0000000
 800b8e4:	3feec709 	.word	0x3feec709
 800b8e8:	dc3a03fd 	.word	0xdc3a03fd
 800b8ec:	3feec709 	.word	0x3feec709
 800b8f0:	145b01f5 	.word	0x145b01f5
 800b8f4:	be3e2fe0 	.word	0xbe3e2fe0
 800b8f8:	43400000 	.word	0x43400000
 800b8fc:	0003988e 	.word	0x0003988e
 800b900:	000bb679 	.word	0x000bb679
 800b904:	0800c898 	.word	0x0800c898
 800b908:	3ff00000 	.word	0x3ff00000
 800b90c:	40080000 	.word	0x40080000
 800b910:	0800c8b8 	.word	0x0800c8b8
 800b914:	0800c8a8 	.word	0x0800c8a8
 800b918:	a39b      	add	r3, pc, #620	; (adr r3, 800bb88 <__ieee754_pow+0x9b0>)
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	4640      	mov	r0, r8
 800b920:	4649      	mov	r1, r9
 800b922:	f7f4 fc1b 	bl	800015c <__adddf3>
 800b926:	4622      	mov	r2, r4
 800b928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b92c:	462b      	mov	r3, r5
 800b92e:	4650      	mov	r0, sl
 800b930:	4639      	mov	r1, r7
 800b932:	f7f4 fc11 	bl	8000158 <__aeabi_dsub>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b93e:	f7f5 f853 	bl	80009e8 <__aeabi_dcmpgt>
 800b942:	2800      	cmp	r0, #0
 800b944:	f47f ae0d 	bne.w	800b562 <__ieee754_pow+0x38a>
 800b948:	4aa3      	ldr	r2, [pc, #652]	; (800bbd8 <__ieee754_pow+0xa00>)
 800b94a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b94e:	4293      	cmp	r3, r2
 800b950:	f340 8103 	ble.w	800bb5a <__ieee754_pow+0x982>
 800b954:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b958:	2000      	movs	r0, #0
 800b95a:	151b      	asrs	r3, r3, #20
 800b95c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b960:	fa4a f303 	asr.w	r3, sl, r3
 800b964:	4433      	add	r3, r6
 800b966:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b96a:	4f9c      	ldr	r7, [pc, #624]	; (800bbdc <__ieee754_pow+0xa04>)
 800b96c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b970:	4117      	asrs	r7, r2
 800b972:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b976:	ea23 0107 	bic.w	r1, r3, r7
 800b97a:	f1c2 0214 	rsb	r2, r2, #20
 800b97e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b982:	fa4a fa02 	asr.w	sl, sl, r2
 800b986:	2e00      	cmp	r6, #0
 800b988:	4602      	mov	r2, r0
 800b98a:	460b      	mov	r3, r1
 800b98c:	4620      	mov	r0, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	bfb8      	it	lt
 800b992:	f1ca 0a00 	rsblt	sl, sl, #0
 800b996:	f7f4 fbdf 	bl	8000158 <__aeabi_dsub>
 800b99a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9a2:	4642      	mov	r2, r8
 800b9a4:	464b      	mov	r3, r9
 800b9a6:	f7f4 fbd9 	bl	800015c <__adddf3>
 800b9aa:	a379      	add	r3, pc, #484	; (adr r3, 800bb90 <__ieee754_pow+0x9b8>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	460d      	mov	r5, r1
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	f7f4 fd87 	bl	80004c8 <__aeabi_dmul>
 800b9ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9be:	4606      	mov	r6, r0
 800b9c0:	460f      	mov	r7, r1
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	f7f4 fbc7 	bl	8000158 <__aeabi_dsub>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	f7f4 fbc1 	bl	8000158 <__aeabi_dsub>
 800b9d6:	a370      	add	r3, pc, #448	; (adr r3, 800bb98 <__ieee754_pow+0x9c0>)
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	f7f4 fd74 	bl	80004c8 <__aeabi_dmul>
 800b9e0:	a36f      	add	r3, pc, #444	; (adr r3, 800bba0 <__ieee754_pow+0x9c8>)
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	4689      	mov	r9, r1
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	f7f4 fd6b 	bl	80004c8 <__aeabi_dmul>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4640      	mov	r0, r8
 800b9f8:	4649      	mov	r1, r9
 800b9fa:	f7f4 fbaf 	bl	800015c <__adddf3>
 800b9fe:	4604      	mov	r4, r0
 800ba00:	460d      	mov	r5, r1
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	4630      	mov	r0, r6
 800ba08:	4639      	mov	r1, r7
 800ba0a:	f7f4 fba7 	bl	800015c <__adddf3>
 800ba0e:	4632      	mov	r2, r6
 800ba10:	463b      	mov	r3, r7
 800ba12:	4680      	mov	r8, r0
 800ba14:	4689      	mov	r9, r1
 800ba16:	f7f4 fb9f 	bl	8000158 <__aeabi_dsub>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	4620      	mov	r0, r4
 800ba20:	4629      	mov	r1, r5
 800ba22:	f7f4 fb99 	bl	8000158 <__aeabi_dsub>
 800ba26:	4642      	mov	r2, r8
 800ba28:	4606      	mov	r6, r0
 800ba2a:	460f      	mov	r7, r1
 800ba2c:	464b      	mov	r3, r9
 800ba2e:	4640      	mov	r0, r8
 800ba30:	4649      	mov	r1, r9
 800ba32:	f7f4 fd49 	bl	80004c8 <__aeabi_dmul>
 800ba36:	a35c      	add	r3, pc, #368	; (adr r3, 800bba8 <__ieee754_pow+0x9d0>)
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	460d      	mov	r5, r1
 800ba40:	f7f4 fd42 	bl	80004c8 <__aeabi_dmul>
 800ba44:	a35a      	add	r3, pc, #360	; (adr r3, 800bbb0 <__ieee754_pow+0x9d8>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	f7f4 fb85 	bl	8000158 <__aeabi_dsub>
 800ba4e:	4622      	mov	r2, r4
 800ba50:	462b      	mov	r3, r5
 800ba52:	f7f4 fd39 	bl	80004c8 <__aeabi_dmul>
 800ba56:	a358      	add	r3, pc, #352	; (adr r3, 800bbb8 <__ieee754_pow+0x9e0>)
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	f7f4 fb7e 	bl	800015c <__adddf3>
 800ba60:	4622      	mov	r2, r4
 800ba62:	462b      	mov	r3, r5
 800ba64:	f7f4 fd30 	bl	80004c8 <__aeabi_dmul>
 800ba68:	a355      	add	r3, pc, #340	; (adr r3, 800bbc0 <__ieee754_pow+0x9e8>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f7f4 fb73 	bl	8000158 <__aeabi_dsub>
 800ba72:	4622      	mov	r2, r4
 800ba74:	462b      	mov	r3, r5
 800ba76:	f7f4 fd27 	bl	80004c8 <__aeabi_dmul>
 800ba7a:	a353      	add	r3, pc, #332	; (adr r3, 800bbc8 <__ieee754_pow+0x9f0>)
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	f7f4 fb6c 	bl	800015c <__adddf3>
 800ba84:	4622      	mov	r2, r4
 800ba86:	462b      	mov	r3, r5
 800ba88:	f7f4 fd1e 	bl	80004c8 <__aeabi_dmul>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	460b      	mov	r3, r1
 800ba90:	4640      	mov	r0, r8
 800ba92:	4649      	mov	r1, r9
 800ba94:	f7f4 fb60 	bl	8000158 <__aeabi_dsub>
 800ba98:	4604      	mov	r4, r0
 800ba9a:	460d      	mov	r5, r1
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	4640      	mov	r0, r8
 800baa2:	4649      	mov	r1, r9
 800baa4:	f7f4 fd10 	bl	80004c8 <__aeabi_dmul>
 800baa8:	2200      	movs	r2, #0
 800baaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bab2:	4620      	mov	r0, r4
 800bab4:	4629      	mov	r1, r5
 800bab6:	f7f4 fb4f 	bl	8000158 <__aeabi_dsub>
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac2:	f7f4 fe2b 	bl	800071c <__aeabi_ddiv>
 800bac6:	4632      	mov	r2, r6
 800bac8:	4604      	mov	r4, r0
 800baca:	460d      	mov	r5, r1
 800bacc:	463b      	mov	r3, r7
 800bace:	4640      	mov	r0, r8
 800bad0:	4649      	mov	r1, r9
 800bad2:	f7f4 fcf9 	bl	80004c8 <__aeabi_dmul>
 800bad6:	4632      	mov	r2, r6
 800bad8:	463b      	mov	r3, r7
 800bada:	f7f4 fb3f 	bl	800015c <__adddf3>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	4620      	mov	r0, r4
 800bae4:	4629      	mov	r1, r5
 800bae6:	f7f4 fb37 	bl	8000158 <__aeabi_dsub>
 800baea:	4642      	mov	r2, r8
 800baec:	464b      	mov	r3, r9
 800baee:	f7f4 fb33 	bl	8000158 <__aeabi_dsub>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	2000      	movs	r0, #0
 800baf8:	4939      	ldr	r1, [pc, #228]	; (800bbe0 <__ieee754_pow+0xa08>)
 800bafa:	f7f4 fb2d 	bl	8000158 <__aeabi_dsub>
 800bafe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bb02:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bb06:	da2b      	bge.n	800bb60 <__ieee754_pow+0x988>
 800bb08:	4652      	mov	r2, sl
 800bb0a:	f000 fbdd 	bl	800c2c8 <scalbn>
 800bb0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb12:	f7ff bbf6 	b.w	800b302 <__ieee754_pow+0x12a>
 800bb16:	4b33      	ldr	r3, [pc, #204]	; (800bbe4 <__ieee754_pow+0xa0c>)
 800bb18:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bb1c:	429f      	cmp	r7, r3
 800bb1e:	f77f af13 	ble.w	800b948 <__ieee754_pow+0x770>
 800bb22:	4b31      	ldr	r3, [pc, #196]	; (800bbe8 <__ieee754_pow+0xa10>)
 800bb24:	440b      	add	r3, r1
 800bb26:	4303      	orrs	r3, r0
 800bb28:	d00b      	beq.n	800bb42 <__ieee754_pow+0x96a>
 800bb2a:	a329      	add	r3, pc, #164	; (adr r3, 800bbd0 <__ieee754_pow+0x9f8>)
 800bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb34:	f7f4 fcc8 	bl	80004c8 <__aeabi_dmul>
 800bb38:	a325      	add	r3, pc, #148	; (adr r3, 800bbd0 <__ieee754_pow+0x9f8>)
 800bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3e:	f7ff bbe0 	b.w	800b302 <__ieee754_pow+0x12a>
 800bb42:	4622      	mov	r2, r4
 800bb44:	462b      	mov	r3, r5
 800bb46:	f7f4 fb07 	bl	8000158 <__aeabi_dsub>
 800bb4a:	4642      	mov	r2, r8
 800bb4c:	464b      	mov	r3, r9
 800bb4e:	f7f4 ff41 	bl	80009d4 <__aeabi_dcmpge>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	f43f aef8 	beq.w	800b948 <__ieee754_pow+0x770>
 800bb58:	e7e7      	b.n	800bb2a <__ieee754_pow+0x952>
 800bb5a:	f04f 0a00 	mov.w	sl, #0
 800bb5e:	e71e      	b.n	800b99e <__ieee754_pow+0x7c6>
 800bb60:	4621      	mov	r1, r4
 800bb62:	e7d4      	b.n	800bb0e <__ieee754_pow+0x936>
 800bb64:	f04f 0b00 	mov.w	fp, #0
 800bb68:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bbe0 <__ieee754_pow+0xa08>
 800bb6c:	f7ff bb95 	b.w	800b29a <__ieee754_pow+0xc2>
 800bb70:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800bb74:	f7ff bb91 	b.w	800b29a <__ieee754_pow+0xc2>
 800bb78:	4638      	mov	r0, r7
 800bb7a:	4641      	mov	r1, r8
 800bb7c:	f7ff bbc3 	b.w	800b306 <__ieee754_pow+0x12e>
 800bb80:	9200      	str	r2, [sp, #0]
 800bb82:	f7ff bb9f 	b.w	800b2c4 <__ieee754_pow+0xec>
 800bb86:	bf00      	nop
 800bb88:	652b82fe 	.word	0x652b82fe
 800bb8c:	3c971547 	.word	0x3c971547
 800bb90:	00000000 	.word	0x00000000
 800bb94:	3fe62e43 	.word	0x3fe62e43
 800bb98:	fefa39ef 	.word	0xfefa39ef
 800bb9c:	3fe62e42 	.word	0x3fe62e42
 800bba0:	0ca86c39 	.word	0x0ca86c39
 800bba4:	be205c61 	.word	0xbe205c61
 800bba8:	72bea4d0 	.word	0x72bea4d0
 800bbac:	3e663769 	.word	0x3e663769
 800bbb0:	c5d26bf1 	.word	0xc5d26bf1
 800bbb4:	3ebbbd41 	.word	0x3ebbbd41
 800bbb8:	af25de2c 	.word	0xaf25de2c
 800bbbc:	3f11566a 	.word	0x3f11566a
 800bbc0:	16bebd93 	.word	0x16bebd93
 800bbc4:	3f66c16c 	.word	0x3f66c16c
 800bbc8:	5555553e 	.word	0x5555553e
 800bbcc:	3fc55555 	.word	0x3fc55555
 800bbd0:	c2f8f359 	.word	0xc2f8f359
 800bbd4:	01a56e1f 	.word	0x01a56e1f
 800bbd8:	3fe00000 	.word	0x3fe00000
 800bbdc:	000fffff 	.word	0x000fffff
 800bbe0:	3ff00000 	.word	0x3ff00000
 800bbe4:	4090cbff 	.word	0x4090cbff
 800bbe8:	3f6f3400 	.word	0x3f6f3400

0800bbec <__ieee754_sqrt>:
 800bbec:	4b54      	ldr	r3, [pc, #336]	; (800bd40 <__ieee754_sqrt+0x154>)
 800bbee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf2:	438b      	bics	r3, r1
 800bbf4:	4606      	mov	r6, r0
 800bbf6:	460d      	mov	r5, r1
 800bbf8:	460a      	mov	r2, r1
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	d10f      	bne.n	800bc1e <__ieee754_sqrt+0x32>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	f7f4 fc61 	bl	80004c8 <__aeabi_dmul>
 800bc06:	4602      	mov	r2, r0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	f7f4 faa5 	bl	800015c <__adddf3>
 800bc12:	4606      	mov	r6, r0
 800bc14:	460d      	mov	r5, r1
 800bc16:	4630      	mov	r0, r6
 800bc18:	4629      	mov	r1, r5
 800bc1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc1e:	2900      	cmp	r1, #0
 800bc20:	4607      	mov	r7, r0
 800bc22:	4603      	mov	r3, r0
 800bc24:	dc0e      	bgt.n	800bc44 <__ieee754_sqrt+0x58>
 800bc26:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bc2a:	ea5c 0707 	orrs.w	r7, ip, r7
 800bc2e:	d0f2      	beq.n	800bc16 <__ieee754_sqrt+0x2a>
 800bc30:	b141      	cbz	r1, 800bc44 <__ieee754_sqrt+0x58>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	f7f4 fa8f 	bl	8000158 <__aeabi_dsub>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	f7f4 fd6d 	bl	800071c <__aeabi_ddiv>
 800bc42:	e7e6      	b.n	800bc12 <__ieee754_sqrt+0x26>
 800bc44:	1512      	asrs	r2, r2, #20
 800bc46:	d074      	beq.n	800bd32 <__ieee754_sqrt+0x146>
 800bc48:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bc4c:	07d5      	lsls	r5, r2, #31
 800bc4e:	f04f 0500 	mov.w	r5, #0
 800bc52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc56:	bf48      	it	mi
 800bc58:	0fd9      	lsrmi	r1, r3, #31
 800bc5a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800bc5e:	bf44      	itt	mi
 800bc60:	005b      	lslmi	r3, r3, #1
 800bc62:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800bc66:	1051      	asrs	r1, r2, #1
 800bc68:	0fda      	lsrs	r2, r3, #31
 800bc6a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800bc6e:	4628      	mov	r0, r5
 800bc70:	2216      	movs	r2, #22
 800bc72:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bc76:	005b      	lsls	r3, r3, #1
 800bc78:	1987      	adds	r7, r0, r6
 800bc7a:	42a7      	cmp	r7, r4
 800bc7c:	bfde      	ittt	le
 800bc7e:	19b8      	addle	r0, r7, r6
 800bc80:	1be4      	suble	r4, r4, r7
 800bc82:	19ad      	addle	r5, r5, r6
 800bc84:	0fdf      	lsrs	r7, r3, #31
 800bc86:	3a01      	subs	r2, #1
 800bc88:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800bc8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc94:	d1f0      	bne.n	800bc78 <__ieee754_sqrt+0x8c>
 800bc96:	f04f 0c20 	mov.w	ip, #32
 800bc9a:	4696      	mov	lr, r2
 800bc9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bca0:	4284      	cmp	r4, r0
 800bca2:	eb06 070e 	add.w	r7, r6, lr
 800bca6:	dc02      	bgt.n	800bcae <__ieee754_sqrt+0xc2>
 800bca8:	d112      	bne.n	800bcd0 <__ieee754_sqrt+0xe4>
 800bcaa:	429f      	cmp	r7, r3
 800bcac:	d810      	bhi.n	800bcd0 <__ieee754_sqrt+0xe4>
 800bcae:	2f00      	cmp	r7, #0
 800bcb0:	eb07 0e06 	add.w	lr, r7, r6
 800bcb4:	da42      	bge.n	800bd3c <__ieee754_sqrt+0x150>
 800bcb6:	f1be 0f00 	cmp.w	lr, #0
 800bcba:	db3f      	blt.n	800bd3c <__ieee754_sqrt+0x150>
 800bcbc:	f100 0801 	add.w	r8, r0, #1
 800bcc0:	1a24      	subs	r4, r4, r0
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	429f      	cmp	r7, r3
 800bcc6:	bf88      	it	hi
 800bcc8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800bccc:	1bdb      	subs	r3, r3, r7
 800bcce:	4432      	add	r2, r6
 800bcd0:	0064      	lsls	r4, r4, #1
 800bcd2:	f1bc 0c01 	subs.w	ip, ip, #1
 800bcd6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800bcda:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bcde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bce2:	d1dd      	bne.n	800bca0 <__ieee754_sqrt+0xb4>
 800bce4:	4323      	orrs	r3, r4
 800bce6:	d006      	beq.n	800bcf6 <__ieee754_sqrt+0x10a>
 800bce8:	1c54      	adds	r4, r2, #1
 800bcea:	bf0b      	itete	eq
 800bcec:	4662      	moveq	r2, ip
 800bcee:	3201      	addne	r2, #1
 800bcf0:	3501      	addeq	r5, #1
 800bcf2:	f022 0201 	bicne.w	r2, r2, #1
 800bcf6:	106b      	asrs	r3, r5, #1
 800bcf8:	0852      	lsrs	r2, r2, #1
 800bcfa:	07e8      	lsls	r0, r5, #31
 800bcfc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bd00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bd04:	bf48      	it	mi
 800bd06:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bd0a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800bd0e:	4616      	mov	r6, r2
 800bd10:	e781      	b.n	800bc16 <__ieee754_sqrt+0x2a>
 800bd12:	0adc      	lsrs	r4, r3, #11
 800bd14:	3915      	subs	r1, #21
 800bd16:	055b      	lsls	r3, r3, #21
 800bd18:	2c00      	cmp	r4, #0
 800bd1a:	d0fa      	beq.n	800bd12 <__ieee754_sqrt+0x126>
 800bd1c:	02e6      	lsls	r6, r4, #11
 800bd1e:	d50a      	bpl.n	800bd36 <__ieee754_sqrt+0x14a>
 800bd20:	f1c2 0020 	rsb	r0, r2, #32
 800bd24:	fa23 f000 	lsr.w	r0, r3, r0
 800bd28:	1e55      	subs	r5, r2, #1
 800bd2a:	4093      	lsls	r3, r2
 800bd2c:	4304      	orrs	r4, r0
 800bd2e:	1b4a      	subs	r2, r1, r5
 800bd30:	e78a      	b.n	800bc48 <__ieee754_sqrt+0x5c>
 800bd32:	4611      	mov	r1, r2
 800bd34:	e7f0      	b.n	800bd18 <__ieee754_sqrt+0x12c>
 800bd36:	0064      	lsls	r4, r4, #1
 800bd38:	3201      	adds	r2, #1
 800bd3a:	e7ef      	b.n	800bd1c <__ieee754_sqrt+0x130>
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	e7bf      	b.n	800bcc0 <__ieee754_sqrt+0xd4>
 800bd40:	7ff00000 	.word	0x7ff00000

0800bd44 <__ieee754_asinf>:
 800bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd48:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800bd4c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800bd50:	4604      	mov	r4, r0
 800bd52:	4607      	mov	r7, r0
 800bd54:	d10c      	bne.n	800bd70 <__ieee754_asinf+0x2c>
 800bd56:	498c      	ldr	r1, [pc, #560]	; (800bf88 <__ieee754_asinf+0x244>)
 800bd58:	f7f4 ffe4 	bl	8000d24 <__aeabi_fmul>
 800bd5c:	498b      	ldr	r1, [pc, #556]	; (800bf8c <__ieee754_asinf+0x248>)
 800bd5e:	4605      	mov	r5, r0
 800bd60:	4620      	mov	r0, r4
 800bd62:	f7f4 ffdf 	bl	8000d24 <__aeabi_fmul>
 800bd66:	4601      	mov	r1, r0
 800bd68:	4628      	mov	r0, r5
 800bd6a:	f7f4 fed3 	bl	8000b14 <__addsf3>
 800bd6e:	e006      	b.n	800bd7e <__ieee754_asinf+0x3a>
 800bd70:	dd09      	ble.n	800bd86 <__ieee754_asinf+0x42>
 800bd72:	4601      	mov	r1, r0
 800bd74:	f7f4 fecc 	bl	8000b10 <__aeabi_fsub>
 800bd78:	4601      	mov	r1, r0
 800bd7a:	f7f5 f887 	bl	8000e8c <__aeabi_fdiv>
 800bd7e:	4604      	mov	r4, r0
 800bd80:	4620      	mov	r0, r4
 800bd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd86:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800bd8a:	da0b      	bge.n	800bda4 <__ieee754_asinf+0x60>
 800bd8c:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800bd90:	da73      	bge.n	800be7a <__ieee754_asinf+0x136>
 800bd92:	497f      	ldr	r1, [pc, #508]	; (800bf90 <__ieee754_asinf+0x24c>)
 800bd94:	f7f4 febe 	bl	8000b14 <__addsf3>
 800bd98:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bd9c:	f7f5 f97e 	bl	800109c <__aeabi_fcmpgt>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d1ed      	bne.n	800bd80 <__ieee754_asinf+0x3c>
 800bda4:	4620      	mov	r0, r4
 800bda6:	f000 fc09 	bl	800c5bc <fabsf>
 800bdaa:	4601      	mov	r1, r0
 800bdac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bdb0:	f7f4 feae 	bl	8000b10 <__aeabi_fsub>
 800bdb4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bdb8:	f7f4 ffb4 	bl	8000d24 <__aeabi_fmul>
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	4975      	ldr	r1, [pc, #468]	; (800bf94 <__ieee754_asinf+0x250>)
 800bdc0:	f7f4 ffb0 	bl	8000d24 <__aeabi_fmul>
 800bdc4:	4974      	ldr	r1, [pc, #464]	; (800bf98 <__ieee754_asinf+0x254>)
 800bdc6:	f7f4 fea5 	bl	8000b14 <__addsf3>
 800bdca:	4621      	mov	r1, r4
 800bdcc:	f7f4 ffaa 	bl	8000d24 <__aeabi_fmul>
 800bdd0:	4972      	ldr	r1, [pc, #456]	; (800bf9c <__ieee754_asinf+0x258>)
 800bdd2:	f7f4 fe9d 	bl	8000b10 <__aeabi_fsub>
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	f7f4 ffa4 	bl	8000d24 <__aeabi_fmul>
 800bddc:	4970      	ldr	r1, [pc, #448]	; (800bfa0 <__ieee754_asinf+0x25c>)
 800bdde:	f7f4 fe99 	bl	8000b14 <__addsf3>
 800bde2:	4621      	mov	r1, r4
 800bde4:	f7f4 ff9e 	bl	8000d24 <__aeabi_fmul>
 800bde8:	496e      	ldr	r1, [pc, #440]	; (800bfa4 <__ieee754_asinf+0x260>)
 800bdea:	f7f4 fe91 	bl	8000b10 <__aeabi_fsub>
 800bdee:	4621      	mov	r1, r4
 800bdf0:	f7f4 ff98 	bl	8000d24 <__aeabi_fmul>
 800bdf4:	496c      	ldr	r1, [pc, #432]	; (800bfa8 <__ieee754_asinf+0x264>)
 800bdf6:	f7f4 fe8d 	bl	8000b14 <__addsf3>
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	f7f4 ff92 	bl	8000d24 <__aeabi_fmul>
 800be00:	496a      	ldr	r1, [pc, #424]	; (800bfac <__ieee754_asinf+0x268>)
 800be02:	4680      	mov	r8, r0
 800be04:	4620      	mov	r0, r4
 800be06:	f7f4 ff8d 	bl	8000d24 <__aeabi_fmul>
 800be0a:	4969      	ldr	r1, [pc, #420]	; (800bfb0 <__ieee754_asinf+0x26c>)
 800be0c:	f7f4 fe80 	bl	8000b10 <__aeabi_fsub>
 800be10:	4621      	mov	r1, r4
 800be12:	f7f4 ff87 	bl	8000d24 <__aeabi_fmul>
 800be16:	4967      	ldr	r1, [pc, #412]	; (800bfb4 <__ieee754_asinf+0x270>)
 800be18:	f7f4 fe7c 	bl	8000b14 <__addsf3>
 800be1c:	4621      	mov	r1, r4
 800be1e:	f7f4 ff81 	bl	8000d24 <__aeabi_fmul>
 800be22:	4965      	ldr	r1, [pc, #404]	; (800bfb8 <__ieee754_asinf+0x274>)
 800be24:	f7f4 fe74 	bl	8000b10 <__aeabi_fsub>
 800be28:	4621      	mov	r1, r4
 800be2a:	f7f4 ff7b 	bl	8000d24 <__aeabi_fmul>
 800be2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800be32:	f7f4 fe6f 	bl	8000b14 <__addsf3>
 800be36:	4681      	mov	r9, r0
 800be38:	4620      	mov	r0, r4
 800be3a:	f000 f955 	bl	800c0e8 <__ieee754_sqrtf>
 800be3e:	4b5f      	ldr	r3, [pc, #380]	; (800bfbc <__ieee754_asinf+0x278>)
 800be40:	4606      	mov	r6, r0
 800be42:	429d      	cmp	r5, r3
 800be44:	dd63      	ble.n	800bf0e <__ieee754_asinf+0x1ca>
 800be46:	4649      	mov	r1, r9
 800be48:	4640      	mov	r0, r8
 800be4a:	f7f5 f81f 	bl	8000e8c <__aeabi_fdiv>
 800be4e:	4631      	mov	r1, r6
 800be50:	f7f4 ff68 	bl	8000d24 <__aeabi_fmul>
 800be54:	4631      	mov	r1, r6
 800be56:	f7f4 fe5d 	bl	8000b14 <__addsf3>
 800be5a:	4601      	mov	r1, r0
 800be5c:	f7f4 fe5a 	bl	8000b14 <__addsf3>
 800be60:	4957      	ldr	r1, [pc, #348]	; (800bfc0 <__ieee754_asinf+0x27c>)
 800be62:	f7f4 fe57 	bl	8000b14 <__addsf3>
 800be66:	4601      	mov	r1, r0
 800be68:	4847      	ldr	r0, [pc, #284]	; (800bf88 <__ieee754_asinf+0x244>)
 800be6a:	f7f4 fe51 	bl	8000b10 <__aeabi_fsub>
 800be6e:	2f00      	cmp	r7, #0
 800be70:	4604      	mov	r4, r0
 800be72:	bfd8      	it	le
 800be74:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800be78:	e782      	b.n	800bd80 <__ieee754_asinf+0x3c>
 800be7a:	4601      	mov	r1, r0
 800be7c:	f7f4 ff52 	bl	8000d24 <__aeabi_fmul>
 800be80:	4605      	mov	r5, r0
 800be82:	4944      	ldr	r1, [pc, #272]	; (800bf94 <__ieee754_asinf+0x250>)
 800be84:	f7f4 ff4e 	bl	8000d24 <__aeabi_fmul>
 800be88:	4943      	ldr	r1, [pc, #268]	; (800bf98 <__ieee754_asinf+0x254>)
 800be8a:	f7f4 fe43 	bl	8000b14 <__addsf3>
 800be8e:	4629      	mov	r1, r5
 800be90:	f7f4 ff48 	bl	8000d24 <__aeabi_fmul>
 800be94:	4941      	ldr	r1, [pc, #260]	; (800bf9c <__ieee754_asinf+0x258>)
 800be96:	f7f4 fe3b 	bl	8000b10 <__aeabi_fsub>
 800be9a:	4629      	mov	r1, r5
 800be9c:	f7f4 ff42 	bl	8000d24 <__aeabi_fmul>
 800bea0:	493f      	ldr	r1, [pc, #252]	; (800bfa0 <__ieee754_asinf+0x25c>)
 800bea2:	f7f4 fe37 	bl	8000b14 <__addsf3>
 800bea6:	4629      	mov	r1, r5
 800bea8:	f7f4 ff3c 	bl	8000d24 <__aeabi_fmul>
 800beac:	493d      	ldr	r1, [pc, #244]	; (800bfa4 <__ieee754_asinf+0x260>)
 800beae:	f7f4 fe2f 	bl	8000b10 <__aeabi_fsub>
 800beb2:	4629      	mov	r1, r5
 800beb4:	f7f4 ff36 	bl	8000d24 <__aeabi_fmul>
 800beb8:	493b      	ldr	r1, [pc, #236]	; (800bfa8 <__ieee754_asinf+0x264>)
 800beba:	f7f4 fe2b 	bl	8000b14 <__addsf3>
 800bebe:	4629      	mov	r1, r5
 800bec0:	f7f4 ff30 	bl	8000d24 <__aeabi_fmul>
 800bec4:	4939      	ldr	r1, [pc, #228]	; (800bfac <__ieee754_asinf+0x268>)
 800bec6:	4606      	mov	r6, r0
 800bec8:	4628      	mov	r0, r5
 800beca:	f7f4 ff2b 	bl	8000d24 <__aeabi_fmul>
 800bece:	4938      	ldr	r1, [pc, #224]	; (800bfb0 <__ieee754_asinf+0x26c>)
 800bed0:	f7f4 fe1e 	bl	8000b10 <__aeabi_fsub>
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7f4 ff25 	bl	8000d24 <__aeabi_fmul>
 800beda:	4936      	ldr	r1, [pc, #216]	; (800bfb4 <__ieee754_asinf+0x270>)
 800bedc:	f7f4 fe1a 	bl	8000b14 <__addsf3>
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 ff1f 	bl	8000d24 <__aeabi_fmul>
 800bee6:	4934      	ldr	r1, [pc, #208]	; (800bfb8 <__ieee754_asinf+0x274>)
 800bee8:	f7f4 fe12 	bl	8000b10 <__aeabi_fsub>
 800beec:	4629      	mov	r1, r5
 800beee:	f7f4 ff19 	bl	8000d24 <__aeabi_fmul>
 800bef2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bef6:	f7f4 fe0d 	bl	8000b14 <__addsf3>
 800befa:	4601      	mov	r1, r0
 800befc:	4630      	mov	r0, r6
 800befe:	f7f4 ffc5 	bl	8000e8c <__aeabi_fdiv>
 800bf02:	4621      	mov	r1, r4
 800bf04:	f7f4 ff0e 	bl	8000d24 <__aeabi_fmul>
 800bf08:	4601      	mov	r1, r0
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	e72d      	b.n	800bd6a <__ieee754_asinf+0x26>
 800bf0e:	4601      	mov	r1, r0
 800bf10:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800bf14:	f7f4 fdfe 	bl	8000b14 <__addsf3>
 800bf18:	4649      	mov	r1, r9
 800bf1a:	4682      	mov	sl, r0
 800bf1c:	4640      	mov	r0, r8
 800bf1e:	f7f4 ffb5 	bl	8000e8c <__aeabi_fdiv>
 800bf22:	4601      	mov	r1, r0
 800bf24:	4650      	mov	r0, sl
 800bf26:	f7f4 fefd 	bl	8000d24 <__aeabi_fmul>
 800bf2a:	f025 050f 	bic.w	r5, r5, #15
 800bf2e:	4680      	mov	r8, r0
 800bf30:	4629      	mov	r1, r5
 800bf32:	4628      	mov	r0, r5
 800bf34:	f7f4 fef6 	bl	8000d24 <__aeabi_fmul>
 800bf38:	4601      	mov	r1, r0
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f7f4 fde8 	bl	8000b10 <__aeabi_fsub>
 800bf40:	4631      	mov	r1, r6
 800bf42:	4604      	mov	r4, r0
 800bf44:	4628      	mov	r0, r5
 800bf46:	f7f4 fde5 	bl	8000b14 <__addsf3>
 800bf4a:	4601      	mov	r1, r0
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f7f4 ff9d 	bl	8000e8c <__aeabi_fdiv>
 800bf52:	4601      	mov	r1, r0
 800bf54:	f7f4 fdde 	bl	8000b14 <__addsf3>
 800bf58:	4601      	mov	r1, r0
 800bf5a:	480c      	ldr	r0, [pc, #48]	; (800bf8c <__ieee754_asinf+0x248>)
 800bf5c:	f7f4 fdd8 	bl	8000b10 <__aeabi_fsub>
 800bf60:	4601      	mov	r1, r0
 800bf62:	4640      	mov	r0, r8
 800bf64:	f7f4 fdd4 	bl	8000b10 <__aeabi_fsub>
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	f7f4 fdd1 	bl	8000b14 <__addsf3>
 800bf72:	4601      	mov	r1, r0
 800bf74:	4813      	ldr	r0, [pc, #76]	; (800bfc4 <__ieee754_asinf+0x280>)
 800bf76:	f7f4 fdcb 	bl	8000b10 <__aeabi_fsub>
 800bf7a:	4601      	mov	r1, r0
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f7f4 fdc7 	bl	8000b10 <__aeabi_fsub>
 800bf82:	4601      	mov	r1, r0
 800bf84:	480f      	ldr	r0, [pc, #60]	; (800bfc4 <__ieee754_asinf+0x280>)
 800bf86:	e770      	b.n	800be6a <__ieee754_asinf+0x126>
 800bf88:	3fc90fdb 	.word	0x3fc90fdb
 800bf8c:	b33bbd2e 	.word	0xb33bbd2e
 800bf90:	7149f2ca 	.word	0x7149f2ca
 800bf94:	3811ef08 	.word	0x3811ef08
 800bf98:	3a4f7f04 	.word	0x3a4f7f04
 800bf9c:	3d241146 	.word	0x3d241146
 800bfa0:	3e4e0aa8 	.word	0x3e4e0aa8
 800bfa4:	3ea6b090 	.word	0x3ea6b090
 800bfa8:	3e2aaaab 	.word	0x3e2aaaab
 800bfac:	3d9dc62e 	.word	0x3d9dc62e
 800bfb0:	3f303361 	.word	0x3f303361
 800bfb4:	4001572d 	.word	0x4001572d
 800bfb8:	4019d139 	.word	0x4019d139
 800bfbc:	3f799999 	.word	0x3f799999
 800bfc0:	333bbd2e 	.word	0x333bbd2e
 800bfc4:	3f490fdb 	.word	0x3f490fdb

0800bfc8 <__ieee754_atan2f>:
 800bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bfce:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	dc05      	bgt.n	800bfe2 <__ieee754_atan2f+0x1a>
 800bfd6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800bfda:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bfde:	4607      	mov	r7, r0
 800bfe0:	dd04      	ble.n	800bfec <__ieee754_atan2f+0x24>
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7f4 fd96 	bl	8000b14 <__addsf3>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	e024      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800bfec:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800bff0:	d103      	bne.n	800bffa <__ieee754_atan2f+0x32>
 800bff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bff6:	f000 b9d5 	b.w	800c3a4 <atanf>
 800bffa:	178c      	asrs	r4, r1, #30
 800bffc:	f004 0402 	and.w	r4, r4, #2
 800c000:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c004:	b92a      	cbnz	r2, 800c012 <__ieee754_atan2f+0x4a>
 800c006:	2c02      	cmp	r4, #2
 800c008:	d057      	beq.n	800c0ba <__ieee754_atan2f+0xf2>
 800c00a:	2c03      	cmp	r4, #3
 800c00c:	d113      	bne.n	800c036 <__ieee754_atan2f+0x6e>
 800c00e:	4b2d      	ldr	r3, [pc, #180]	; (800c0c4 <__ieee754_atan2f+0xfc>)
 800c010:	e011      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800c012:	b91e      	cbnz	r6, 800c01c <__ieee754_atan2f+0x54>
 800c014:	2f00      	cmp	r7, #0
 800c016:	da52      	bge.n	800c0be <__ieee754_atan2f+0xf6>
 800c018:	4b2b      	ldr	r3, [pc, #172]	; (800c0c8 <__ieee754_atan2f+0x100>)
 800c01a:	e00c      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800c01c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c020:	d11a      	bne.n	800c058 <__ieee754_atan2f+0x90>
 800c022:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c026:	d10c      	bne.n	800c042 <__ieee754_atan2f+0x7a>
 800c028:	2c02      	cmp	r4, #2
 800c02a:	d006      	beq.n	800c03a <__ieee754_atan2f+0x72>
 800c02c:	2c03      	cmp	r4, #3
 800c02e:	d006      	beq.n	800c03e <__ieee754_atan2f+0x76>
 800c030:	2c01      	cmp	r4, #1
 800c032:	d140      	bne.n	800c0b6 <__ieee754_atan2f+0xee>
 800c034:	4b25      	ldr	r3, [pc, #148]	; (800c0cc <__ieee754_atan2f+0x104>)
 800c036:	4618      	mov	r0, r3
 800c038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c03a:	4b25      	ldr	r3, [pc, #148]	; (800c0d0 <__ieee754_atan2f+0x108>)
 800c03c:	e7fb      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800c03e:	4b25      	ldr	r3, [pc, #148]	; (800c0d4 <__ieee754_atan2f+0x10c>)
 800c040:	e7f9      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800c042:	2c02      	cmp	r4, #2
 800c044:	d039      	beq.n	800c0ba <__ieee754_atan2f+0xf2>
 800c046:	2c03      	cmp	r4, #3
 800c048:	d0e1      	beq.n	800c00e <__ieee754_atan2f+0x46>
 800c04a:	2c01      	cmp	r4, #1
 800c04c:	d102      	bne.n	800c054 <__ieee754_atan2f+0x8c>
 800c04e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c052:	e7f0      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800c054:	2300      	movs	r3, #0
 800c056:	e7ee      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800c058:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c05c:	d0da      	beq.n	800c014 <__ieee754_atan2f+0x4c>
 800c05e:	1b92      	subs	r2, r2, r6
 800c060:	15d2      	asrs	r2, r2, #23
 800c062:	2a3c      	cmp	r2, #60	; 0x3c
 800c064:	dc17      	bgt.n	800c096 <__ieee754_atan2f+0xce>
 800c066:	2900      	cmp	r1, #0
 800c068:	da01      	bge.n	800c06e <__ieee754_atan2f+0xa6>
 800c06a:	323c      	adds	r2, #60	; 0x3c
 800c06c:	db15      	blt.n	800c09a <__ieee754_atan2f+0xd2>
 800c06e:	4618      	mov	r0, r3
 800c070:	f7f4 ff0c 	bl	8000e8c <__aeabi_fdiv>
 800c074:	f000 faa2 	bl	800c5bc <fabsf>
 800c078:	f000 f994 	bl	800c3a4 <atanf>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2c01      	cmp	r4, #1
 800c080:	d00d      	beq.n	800c09e <__ieee754_atan2f+0xd6>
 800c082:	2c02      	cmp	r4, #2
 800c084:	d00e      	beq.n	800c0a4 <__ieee754_atan2f+0xdc>
 800c086:	2c00      	cmp	r4, #0
 800c088:	d0d5      	beq.n	800c036 <__ieee754_atan2f+0x6e>
 800c08a:	4913      	ldr	r1, [pc, #76]	; (800c0d8 <__ieee754_atan2f+0x110>)
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7f4 fd41 	bl	8000b14 <__addsf3>
 800c092:	4912      	ldr	r1, [pc, #72]	; (800c0dc <__ieee754_atan2f+0x114>)
 800c094:	e00c      	b.n	800c0b0 <__ieee754_atan2f+0xe8>
 800c096:	4b12      	ldr	r3, [pc, #72]	; (800c0e0 <__ieee754_atan2f+0x118>)
 800c098:	e7f1      	b.n	800c07e <__ieee754_atan2f+0xb6>
 800c09a:	2300      	movs	r3, #0
 800c09c:	e7ef      	b.n	800c07e <__ieee754_atan2f+0xb6>
 800c09e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c0a2:	e7c8      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800c0a4:	490c      	ldr	r1, [pc, #48]	; (800c0d8 <__ieee754_atan2f+0x110>)
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7f4 fd34 	bl	8000b14 <__addsf3>
 800c0ac:	4601      	mov	r1, r0
 800c0ae:	480b      	ldr	r0, [pc, #44]	; (800c0dc <__ieee754_atan2f+0x114>)
 800c0b0:	f7f4 fd2e 	bl	8000b10 <__aeabi_fsub>
 800c0b4:	e798      	b.n	800bfe8 <__ieee754_atan2f+0x20>
 800c0b6:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <__ieee754_atan2f+0x11c>)
 800c0b8:	e7bd      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800c0ba:	4b08      	ldr	r3, [pc, #32]	; (800c0dc <__ieee754_atan2f+0x114>)
 800c0bc:	e7bb      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800c0be:	4b08      	ldr	r3, [pc, #32]	; (800c0e0 <__ieee754_atan2f+0x118>)
 800c0c0:	e7b9      	b.n	800c036 <__ieee754_atan2f+0x6e>
 800c0c2:	bf00      	nop
 800c0c4:	c0490fdb 	.word	0xc0490fdb
 800c0c8:	bfc90fdb 	.word	0xbfc90fdb
 800c0cc:	bf490fdb 	.word	0xbf490fdb
 800c0d0:	4016cbe4 	.word	0x4016cbe4
 800c0d4:	c016cbe4 	.word	0xc016cbe4
 800c0d8:	33bbbd2e 	.word	0x33bbbd2e
 800c0dc:	40490fdb 	.word	0x40490fdb
 800c0e0:	3fc90fdb 	.word	0x3fc90fdb
 800c0e4:	3f490fdb 	.word	0x3f490fdb

0800c0e8 <__ieee754_sqrtf>:
 800c0e8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c0ec:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	d309      	bcc.n	800c10c <__ieee754_sqrtf+0x24>
 800c0f8:	4601      	mov	r1, r0
 800c0fa:	f7f4 fe13 	bl	8000d24 <__aeabi_fmul>
 800c0fe:	4601      	mov	r1, r0
 800c100:	4620      	mov	r0, r4
 800c102:	f7f4 fd07 	bl	8000b14 <__addsf3>
 800c106:	4604      	mov	r4, r0
 800c108:	4620      	mov	r0, r4
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	2a00      	cmp	r2, #0
 800c10e:	d0fb      	beq.n	800c108 <__ieee754_sqrtf+0x20>
 800c110:	2800      	cmp	r0, #0
 800c112:	da06      	bge.n	800c122 <__ieee754_sqrtf+0x3a>
 800c114:	4601      	mov	r1, r0
 800c116:	f7f4 fcfb 	bl	8000b10 <__aeabi_fsub>
 800c11a:	4601      	mov	r1, r0
 800c11c:	f7f4 feb6 	bl	8000e8c <__aeabi_fdiv>
 800c120:	e7f1      	b.n	800c106 <__ieee754_sqrtf+0x1e>
 800c122:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800c126:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800c12a:	d32e      	bcc.n	800c18a <__ieee754_sqrtf+0xa2>
 800c12c:	3c7f      	subs	r4, #127	; 0x7f
 800c12e:	07e2      	lsls	r2, r4, #31
 800c130:	f04f 0200 	mov.w	r2, #0
 800c134:	ea4f 0164 	mov.w	r1, r4, asr #1
 800c138:	4616      	mov	r6, r2
 800c13a:	f04f 0419 	mov.w	r4, #25
 800c13e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800c142:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c146:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c14a:	bf48      	it	mi
 800c14c:	005b      	lslmi	r3, r3, #1
 800c14e:	005b      	lsls	r3, r3, #1
 800c150:	1835      	adds	r5, r6, r0
 800c152:	429d      	cmp	r5, r3
 800c154:	bfde      	ittt	le
 800c156:	182e      	addle	r6, r5, r0
 800c158:	1b5b      	suble	r3, r3, r5
 800c15a:	1812      	addle	r2, r2, r0
 800c15c:	3c01      	subs	r4, #1
 800c15e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c162:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c166:	d1f3      	bne.n	800c150 <__ieee754_sqrtf+0x68>
 800c168:	b113      	cbz	r3, 800c170 <__ieee754_sqrtf+0x88>
 800c16a:	3201      	adds	r2, #1
 800c16c:	f022 0201 	bic.w	r2, r2, #1
 800c170:	1054      	asrs	r4, r2, #1
 800c172:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c176:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800c17a:	e7c5      	b.n	800c108 <__ieee754_sqrtf+0x20>
 800c17c:	005b      	lsls	r3, r3, #1
 800c17e:	3201      	adds	r2, #1
 800c180:	0219      	lsls	r1, r3, #8
 800c182:	d5fb      	bpl.n	800c17c <__ieee754_sqrtf+0x94>
 800c184:	3a01      	subs	r2, #1
 800c186:	1aa4      	subs	r4, r4, r2
 800c188:	e7d0      	b.n	800c12c <__ieee754_sqrtf+0x44>
 800c18a:	2200      	movs	r2, #0
 800c18c:	e7f8      	b.n	800c180 <__ieee754_sqrtf+0x98>

0800c18e <fabs>:
 800c18e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c192:	4619      	mov	r1, r3
 800c194:	4770      	bx	lr

0800c196 <finite>:
 800c196:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c19a:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800c19e:	0fc0      	lsrs	r0, r0, #31
 800c1a0:	4770      	bx	lr

0800c1a2 <matherr>:
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	4770      	bx	lr
	...

0800c1a8 <nan>:
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	4901      	ldr	r1, [pc, #4]	; (800c1b0 <nan+0x8>)
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	7ff80000 	.word	0x7ff80000

0800c1b4 <rint>:
 800c1b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1ba:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800c1be:	f1bc 0f13 	cmp.w	ip, #19
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	460d      	mov	r5, r1
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800c1ce:	dc5a      	bgt.n	800c286 <rint+0xd2>
 800c1d0:	f1bc 0f00 	cmp.w	ip, #0
 800c1d4:	da2b      	bge.n	800c22e <rint+0x7a>
 800c1d6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c1da:	4302      	orrs	r2, r0
 800c1dc:	d023      	beq.n	800c226 <rint+0x72>
 800c1de:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c1e2:	4302      	orrs	r2, r0
 800c1e4:	4256      	negs	r6, r2
 800c1e6:	4316      	orrs	r6, r2
 800c1e8:	0c4b      	lsrs	r3, r1, #17
 800c1ea:	0b36      	lsrs	r6, r6, #12
 800c1ec:	4934      	ldr	r1, [pc, #208]	; (800c2c0 <rint+0x10c>)
 800c1ee:	045b      	lsls	r3, r3, #17
 800c1f0:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800c1f4:	ea46 0503 	orr.w	r5, r6, r3
 800c1f8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	462b      	mov	r3, r5
 800c200:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c204:	4620      	mov	r0, r4
 800c206:	4629      	mov	r1, r5
 800c208:	f7f3 ffa8 	bl	800015c <__adddf3>
 800c20c:	e9cd 0100 	strd	r0, r1, [sp]
 800c210:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c214:	462b      	mov	r3, r5
 800c216:	4622      	mov	r2, r4
 800c218:	f7f3 ff9e 	bl	8000158 <__aeabi_dsub>
 800c21c:	4604      	mov	r4, r0
 800c21e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c222:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800c226:	4620      	mov	r0, r4
 800c228:	4629      	mov	r1, r5
 800c22a:	b003      	add	sp, #12
 800c22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c22e:	4a25      	ldr	r2, [pc, #148]	; (800c2c4 <rint+0x110>)
 800c230:	fa42 f20c 	asr.w	r2, r2, ip
 800c234:	4011      	ands	r1, r2
 800c236:	4301      	orrs	r1, r0
 800c238:	d0f5      	beq.n	800c226 <rint+0x72>
 800c23a:	0852      	lsrs	r2, r2, #1
 800c23c:	ea05 0102 	and.w	r1, r5, r2
 800c240:	ea50 0601 	orrs.w	r6, r0, r1
 800c244:	d00c      	beq.n	800c260 <rint+0xac>
 800c246:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c24a:	f1bc 0f13 	cmp.w	ip, #19
 800c24e:	bf0c      	ite	eq
 800c250:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800c254:	2600      	movne	r6, #0
 800c256:	ea25 0202 	bic.w	r2, r5, r2
 800c25a:	fa43 f30c 	asr.w	r3, r3, ip
 800c25e:	4313      	orrs	r3, r2
 800c260:	4917      	ldr	r1, [pc, #92]	; (800c2c0 <rint+0x10c>)
 800c262:	4632      	mov	r2, r6
 800c264:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800c268:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c26c:	4620      	mov	r0, r4
 800c26e:	4629      	mov	r1, r5
 800c270:	f7f3 ff74 	bl	800015c <__adddf3>
 800c274:	e9cd 0100 	strd	r0, r1, [sp]
 800c278:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c27c:	4622      	mov	r2, r4
 800c27e:	462b      	mov	r3, r5
 800c280:	f7f3 ff6a 	bl	8000158 <__aeabi_dsub>
 800c284:	e008      	b.n	800c298 <rint+0xe4>
 800c286:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800c28a:	dd08      	ble.n	800c29e <rint+0xea>
 800c28c:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800c290:	d1c9      	bne.n	800c226 <rint+0x72>
 800c292:	4602      	mov	r2, r0
 800c294:	f7f3 ff62 	bl	800015c <__adddf3>
 800c298:	4604      	mov	r4, r0
 800c29a:	460d      	mov	r5, r1
 800c29c:	e7c3      	b.n	800c226 <rint+0x72>
 800c29e:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800c2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a6:	40ca      	lsrs	r2, r1
 800c2a8:	4210      	tst	r0, r2
 800c2aa:	d0bc      	beq.n	800c226 <rint+0x72>
 800c2ac:	0852      	lsrs	r2, r2, #1
 800c2ae:	4210      	tst	r0, r2
 800c2b0:	bf1f      	itttt	ne
 800c2b2:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800c2b6:	ea20 0202 	bicne.w	r2, r0, r2
 800c2ba:	410e      	asrne	r6, r1
 800c2bc:	4316      	orrne	r6, r2
 800c2be:	e7cf      	b.n	800c260 <rint+0xac>
 800c2c0:	0800c8c8 	.word	0x0800c8c8
 800c2c4:	000fffff 	.word	0x000fffff

0800c2c8 <scalbn>:
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ca:	4616      	mov	r6, r2
 800c2cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	460d      	mov	r5, r1
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	b982      	cbnz	r2, 800c2fa <scalbn+0x32>
 800c2d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2dc:	4303      	orrs	r3, r0
 800c2de:	d034      	beq.n	800c34a <scalbn+0x82>
 800c2e0:	4b2d      	ldr	r3, [pc, #180]	; (800c398 <scalbn+0xd0>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f7f4 f8f0 	bl	80004c8 <__aeabi_dmul>
 800c2e8:	4b2c      	ldr	r3, [pc, #176]	; (800c39c <scalbn+0xd4>)
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	429e      	cmp	r6, r3
 800c2ee:	460d      	mov	r5, r1
 800c2f0:	da0d      	bge.n	800c30e <scalbn+0x46>
 800c2f2:	a325      	add	r3, pc, #148	; (adr r3, 800c388 <scalbn+0xc0>)
 800c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f8:	e01c      	b.n	800c334 <scalbn+0x6c>
 800c2fa:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c2fe:	42ba      	cmp	r2, r7
 800c300:	d109      	bne.n	800c316 <scalbn+0x4e>
 800c302:	4602      	mov	r2, r0
 800c304:	f7f3 ff2a 	bl	800015c <__adddf3>
 800c308:	4604      	mov	r4, r0
 800c30a:	460d      	mov	r5, r1
 800c30c:	e01d      	b.n	800c34a <scalbn+0x82>
 800c30e:	460b      	mov	r3, r1
 800c310:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c314:	3a36      	subs	r2, #54	; 0x36
 800c316:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c31a:	4432      	add	r2, r6
 800c31c:	428a      	cmp	r2, r1
 800c31e:	dd0c      	ble.n	800c33a <scalbn+0x72>
 800c320:	4622      	mov	r2, r4
 800c322:	462b      	mov	r3, r5
 800c324:	a11a      	add	r1, pc, #104	; (adr r1, 800c390 <scalbn+0xc8>)
 800c326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c32a:	f000 f94a 	bl	800c5c2 <copysign>
 800c32e:	a318      	add	r3, pc, #96	; (adr r3, 800c390 <scalbn+0xc8>)
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	f7f4 f8c8 	bl	80004c8 <__aeabi_dmul>
 800c338:	e7e6      	b.n	800c308 <scalbn+0x40>
 800c33a:	2a00      	cmp	r2, #0
 800c33c:	dd08      	ble.n	800c350 <scalbn+0x88>
 800c33e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c342:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c346:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c34a:	4620      	mov	r0, r4
 800c34c:	4629      	mov	r1, r5
 800c34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c350:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c354:	da0b      	bge.n	800c36e <scalbn+0xa6>
 800c356:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c35a:	429e      	cmp	r6, r3
 800c35c:	4622      	mov	r2, r4
 800c35e:	462b      	mov	r3, r5
 800c360:	dce0      	bgt.n	800c324 <scalbn+0x5c>
 800c362:	a109      	add	r1, pc, #36	; (adr r1, 800c388 <scalbn+0xc0>)
 800c364:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c368:	f000 f92b 	bl	800c5c2 <copysign>
 800c36c:	e7c1      	b.n	800c2f2 <scalbn+0x2a>
 800c36e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c372:	3236      	adds	r2, #54	; 0x36
 800c374:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c378:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	2200      	movs	r2, #0
 800c382:	4b07      	ldr	r3, [pc, #28]	; (800c3a0 <scalbn+0xd8>)
 800c384:	e7d6      	b.n	800c334 <scalbn+0x6c>
 800c386:	bf00      	nop
 800c388:	c2f8f359 	.word	0xc2f8f359
 800c38c:	01a56e1f 	.word	0x01a56e1f
 800c390:	8800759c 	.word	0x8800759c
 800c394:	7e37e43c 	.word	0x7e37e43c
 800c398:	43500000 	.word	0x43500000
 800c39c:	ffff3cb0 	.word	0xffff3cb0
 800c3a0:	3c900000 	.word	0x3c900000

0800c3a4 <atanf>:
 800c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c3ac:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	4607      	mov	r7, r0
 800c3b4:	db0e      	blt.n	800c3d4 <atanf+0x30>
 800c3b6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c3ba:	dd04      	ble.n	800c3c6 <atanf+0x22>
 800c3bc:	4601      	mov	r1, r0
 800c3be:	f7f4 fba9 	bl	8000b14 <__addsf3>
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	e003      	b.n	800c3ce <atanf+0x2a>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f340 80cd 	ble.w	800c566 <atanf+0x1c2>
 800c3cc:	4c67      	ldr	r4, [pc, #412]	; (800c56c <atanf+0x1c8>)
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d4:	4b66      	ldr	r3, [pc, #408]	; (800c570 <atanf+0x1cc>)
 800c3d6:	429d      	cmp	r5, r3
 800c3d8:	dc0e      	bgt.n	800c3f8 <atanf+0x54>
 800c3da:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c3de:	da08      	bge.n	800c3f2 <atanf+0x4e>
 800c3e0:	4964      	ldr	r1, [pc, #400]	; (800c574 <atanf+0x1d0>)
 800c3e2:	f7f4 fb97 	bl	8000b14 <__addsf3>
 800c3e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c3ea:	f7f4 fe57 	bl	800109c <__aeabi_fcmpgt>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d1ed      	bne.n	800c3ce <atanf+0x2a>
 800c3f2:	f04f 36ff 	mov.w	r6, #4294967295
 800c3f6:	e01c      	b.n	800c432 <atanf+0x8e>
 800c3f8:	f000 f8e0 	bl	800c5bc <fabsf>
 800c3fc:	4b5e      	ldr	r3, [pc, #376]	; (800c578 <atanf+0x1d4>)
 800c3fe:	4604      	mov	r4, r0
 800c400:	429d      	cmp	r5, r3
 800c402:	dc7c      	bgt.n	800c4fe <atanf+0x15a>
 800c404:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c408:	429d      	cmp	r5, r3
 800c40a:	dc67      	bgt.n	800c4dc <atanf+0x138>
 800c40c:	4601      	mov	r1, r0
 800c40e:	f7f4 fb81 	bl	8000b14 <__addsf3>
 800c412:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c416:	f7f4 fb7b 	bl	8000b10 <__aeabi_fsub>
 800c41a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c41e:	4605      	mov	r5, r0
 800c420:	4620      	mov	r0, r4
 800c422:	f7f4 fb77 	bl	8000b14 <__addsf3>
 800c426:	4601      	mov	r1, r0
 800c428:	4628      	mov	r0, r5
 800c42a:	f7f4 fd2f 	bl	8000e8c <__aeabi_fdiv>
 800c42e:	2600      	movs	r6, #0
 800c430:	4604      	mov	r4, r0
 800c432:	4621      	mov	r1, r4
 800c434:	4620      	mov	r0, r4
 800c436:	f7f4 fc75 	bl	8000d24 <__aeabi_fmul>
 800c43a:	4601      	mov	r1, r0
 800c43c:	4680      	mov	r8, r0
 800c43e:	f7f4 fc71 	bl	8000d24 <__aeabi_fmul>
 800c442:	4605      	mov	r5, r0
 800c444:	494d      	ldr	r1, [pc, #308]	; (800c57c <atanf+0x1d8>)
 800c446:	f7f4 fc6d 	bl	8000d24 <__aeabi_fmul>
 800c44a:	494d      	ldr	r1, [pc, #308]	; (800c580 <atanf+0x1dc>)
 800c44c:	f7f4 fb62 	bl	8000b14 <__addsf3>
 800c450:	4629      	mov	r1, r5
 800c452:	f7f4 fc67 	bl	8000d24 <__aeabi_fmul>
 800c456:	494b      	ldr	r1, [pc, #300]	; (800c584 <atanf+0x1e0>)
 800c458:	f7f4 fb5c 	bl	8000b14 <__addsf3>
 800c45c:	4629      	mov	r1, r5
 800c45e:	f7f4 fc61 	bl	8000d24 <__aeabi_fmul>
 800c462:	4949      	ldr	r1, [pc, #292]	; (800c588 <atanf+0x1e4>)
 800c464:	f7f4 fb56 	bl	8000b14 <__addsf3>
 800c468:	4629      	mov	r1, r5
 800c46a:	f7f4 fc5b 	bl	8000d24 <__aeabi_fmul>
 800c46e:	4947      	ldr	r1, [pc, #284]	; (800c58c <atanf+0x1e8>)
 800c470:	f7f4 fb50 	bl	8000b14 <__addsf3>
 800c474:	4629      	mov	r1, r5
 800c476:	f7f4 fc55 	bl	8000d24 <__aeabi_fmul>
 800c47a:	4945      	ldr	r1, [pc, #276]	; (800c590 <atanf+0x1ec>)
 800c47c:	f7f4 fb4a 	bl	8000b14 <__addsf3>
 800c480:	4641      	mov	r1, r8
 800c482:	f7f4 fc4f 	bl	8000d24 <__aeabi_fmul>
 800c486:	4943      	ldr	r1, [pc, #268]	; (800c594 <atanf+0x1f0>)
 800c488:	4680      	mov	r8, r0
 800c48a:	4628      	mov	r0, r5
 800c48c:	f7f4 fc4a 	bl	8000d24 <__aeabi_fmul>
 800c490:	4941      	ldr	r1, [pc, #260]	; (800c598 <atanf+0x1f4>)
 800c492:	f7f4 fb3d 	bl	8000b10 <__aeabi_fsub>
 800c496:	4629      	mov	r1, r5
 800c498:	f7f4 fc44 	bl	8000d24 <__aeabi_fmul>
 800c49c:	493f      	ldr	r1, [pc, #252]	; (800c59c <atanf+0x1f8>)
 800c49e:	f7f4 fb37 	bl	8000b10 <__aeabi_fsub>
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	f7f4 fc3e 	bl	8000d24 <__aeabi_fmul>
 800c4a8:	493d      	ldr	r1, [pc, #244]	; (800c5a0 <atanf+0x1fc>)
 800c4aa:	f7f4 fb31 	bl	8000b10 <__aeabi_fsub>
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	f7f4 fc38 	bl	8000d24 <__aeabi_fmul>
 800c4b4:	493b      	ldr	r1, [pc, #236]	; (800c5a4 <atanf+0x200>)
 800c4b6:	f7f4 fb2b 	bl	8000b10 <__aeabi_fsub>
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	f7f4 fc32 	bl	8000d24 <__aeabi_fmul>
 800c4c0:	4601      	mov	r1, r0
 800c4c2:	4640      	mov	r0, r8
 800c4c4:	f7f4 fb26 	bl	8000b14 <__addsf3>
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	f7f4 fc2b 	bl	8000d24 <__aeabi_fmul>
 800c4ce:	1c73      	adds	r3, r6, #1
 800c4d0:	4601      	mov	r1, r0
 800c4d2:	d133      	bne.n	800c53c <atanf+0x198>
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f7f4 fb1b 	bl	8000b10 <__aeabi_fsub>
 800c4da:	e772      	b.n	800c3c2 <atanf+0x1e>
 800c4dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c4e0:	f7f4 fb16 	bl	8000b10 <__aeabi_fsub>
 800c4e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f7f4 fb12 	bl	8000b14 <__addsf3>
 800c4f0:	4601      	mov	r1, r0
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	f7f4 fcca 	bl	8000e8c <__aeabi_fdiv>
 800c4f8:	2601      	movs	r6, #1
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	e799      	b.n	800c432 <atanf+0x8e>
 800c4fe:	4b2a      	ldr	r3, [pc, #168]	; (800c5a8 <atanf+0x204>)
 800c500:	429d      	cmp	r5, r3
 800c502:	dc14      	bgt.n	800c52e <atanf+0x18a>
 800c504:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c508:	f7f4 fb02 	bl	8000b10 <__aeabi_fsub>
 800c50c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c510:	4605      	mov	r5, r0
 800c512:	4620      	mov	r0, r4
 800c514:	f7f4 fc06 	bl	8000d24 <__aeabi_fmul>
 800c518:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c51c:	f7f4 fafa 	bl	8000b14 <__addsf3>
 800c520:	4601      	mov	r1, r0
 800c522:	4628      	mov	r0, r5
 800c524:	f7f4 fcb2 	bl	8000e8c <__aeabi_fdiv>
 800c528:	2602      	movs	r6, #2
 800c52a:	4604      	mov	r4, r0
 800c52c:	e781      	b.n	800c432 <atanf+0x8e>
 800c52e:	4601      	mov	r1, r0
 800c530:	481e      	ldr	r0, [pc, #120]	; (800c5ac <atanf+0x208>)
 800c532:	f7f4 fcab 	bl	8000e8c <__aeabi_fdiv>
 800c536:	2603      	movs	r6, #3
 800c538:	4604      	mov	r4, r0
 800c53a:	e77a      	b.n	800c432 <atanf+0x8e>
 800c53c:	4b1c      	ldr	r3, [pc, #112]	; (800c5b0 <atanf+0x20c>)
 800c53e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c542:	f7f4 fae5 	bl	8000b10 <__aeabi_fsub>
 800c546:	4621      	mov	r1, r4
 800c548:	f7f4 fae2 	bl	8000b10 <__aeabi_fsub>
 800c54c:	4b19      	ldr	r3, [pc, #100]	; (800c5b4 <atanf+0x210>)
 800c54e:	4601      	mov	r1, r0
 800c550:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c554:	f7f4 fadc 	bl	8000b10 <__aeabi_fsub>
 800c558:	2f00      	cmp	r7, #0
 800c55a:	4604      	mov	r4, r0
 800c55c:	f6bf af37 	bge.w	800c3ce <atanf+0x2a>
 800c560:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800c564:	e733      	b.n	800c3ce <atanf+0x2a>
 800c566:	4c14      	ldr	r4, [pc, #80]	; (800c5b8 <atanf+0x214>)
 800c568:	e731      	b.n	800c3ce <atanf+0x2a>
 800c56a:	bf00      	nop
 800c56c:	3fc90fdb 	.word	0x3fc90fdb
 800c570:	3edfffff 	.word	0x3edfffff
 800c574:	7149f2ca 	.word	0x7149f2ca
 800c578:	3f97ffff 	.word	0x3f97ffff
 800c57c:	3c8569d7 	.word	0x3c8569d7
 800c580:	3d4bda59 	.word	0x3d4bda59
 800c584:	3d886b35 	.word	0x3d886b35
 800c588:	3dba2e6e 	.word	0x3dba2e6e
 800c58c:	3e124925 	.word	0x3e124925
 800c590:	3eaaaaab 	.word	0x3eaaaaab
 800c594:	bd15a221 	.word	0xbd15a221
 800c598:	3d6ef16b 	.word	0x3d6ef16b
 800c59c:	3d9d8795 	.word	0x3d9d8795
 800c5a0:	3de38e38 	.word	0x3de38e38
 800c5a4:	3e4ccccd 	.word	0x3e4ccccd
 800c5a8:	401bffff 	.word	0x401bffff
 800c5ac:	bf800000 	.word	0xbf800000
 800c5b0:	0800c8e8 	.word	0x0800c8e8
 800c5b4:	0800c8d8 	.word	0x0800c8d8
 800c5b8:	bfc90fdb 	.word	0xbfc90fdb

0800c5bc <fabsf>:
 800c5bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c5c0:	4770      	bx	lr

0800c5c2 <copysign>:
 800c5c2:	b530      	push	{r4, r5, lr}
 800c5c4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c5c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5cc:	ea42 0503 	orr.w	r5, r2, r3
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	bd30      	pop	{r4, r5, pc}

0800c5d4 <_init>:
 800c5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d6:	bf00      	nop
 800c5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5da:	bc08      	pop	{r3}
 800c5dc:	469e      	mov	lr, r3
 800c5de:	4770      	bx	lr

0800c5e0 <_fini>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr
