
Test_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004890  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c84  08004c84  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004c84  08004c84  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c84  08004c84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000070  08004cfc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08004cfc  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da2d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025a6  00000000  00000000  0002dac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  00030070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  00030cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000197fe  00000000  00000000  00031868  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 17 .debug_line   0000ae2b  00000000  00000000  0004b066  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b2cd  00000000  00000000  00055e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e115e  2**0
=======
 17 .debug_line   00009fbf  00000000  00000000  00048df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b12d  00000000  00000000  00052db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddee5  2**0
>>>>>>> parent of d4df473 (optimizing PID)
                  CONTENTS, READONLY
 20 .debug_frame  000039c4  00000000  00000000  000e11dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004984 	.word	0x08004984

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004984 	.word	0x08004984

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fd11 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 f904 	bl	8003374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fd29 	bl	8000bee <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fcf1 	bl	8000b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800025c:	2300      	movs	r3, #0
 800025e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d101      	bne.n	8000276 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
 8000274:	e0be      	b.n	80003f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000280:	2b00      	cmp	r3, #0
 8000282:	d109      	bne.n	8000298 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f003 f8a0 	bl	80033d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 faff 	bl	800089c <ADC_ConversionStop_Disable>
 800029e:	4603      	mov	r3, r0
 80002a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002a6:	f003 0310 	and.w	r3, r3, #16
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8099 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	f040 8095 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c0:	f023 0302 	bic.w	r3, r3, #2
 80002c4:	f043 0202 	orr.w	r2, r3, #2
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	7b1b      	ldrb	r3, [r3, #12]
 80002da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ec:	d003      	beq.n	80002f6 <HAL_ADC_Init+0xa2>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d102      	bne.n	80002fc <HAL_ADC_Init+0xa8>
 80002f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fa:	e000      	b.n	80002fe <HAL_ADC_Init+0xaa>
 80002fc:	2300      	movs	r3, #0
 80002fe:	693a      	ldr	r2, [r7, #16]
 8000300:	4313      	orrs	r3, r2
 8000302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7d1b      	ldrb	r3, [r3, #20]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d119      	bne.n	8000340 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7b1b      	ldrb	r3, [r3, #12]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	3b01      	subs	r3, #1
 800031a:	035a      	lsls	r2, r3, #13
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	4313      	orrs	r3, r2
 8000320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	e00b      	b.n	8000340 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800032c:	f043 0220 	orr.w	r2, r3, #32
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000338:	f043 0201 	orr.w	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	430a      	orrs	r2, r1
 8000352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <HAL_ADC_Init+0x1a8>)
 800035c:	4013      	ands	r3, r2
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	6812      	ldr	r2, [r2, #0]
 8000362:	68b9      	ldr	r1, [r7, #8]
 8000364:	430b      	orrs	r3, r1
 8000366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000370:	d003      	beq.n	800037a <HAL_ADC_Init+0x126>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d104      	bne.n	8000384 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	3b01      	subs	r3, #1
 8000380:	051b      	lsls	r3, r3, #20
 8000382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	430a      	orrs	r2, r1
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <HAL_ADC_Init+0x1ac>)
 80003a0:	4013      	ands	r3, r2
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d10b      	bne.n	80003c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b2:	f023 0303 	bic.w	r3, r3, #3
 80003b6:	f043 0201 	orr.w	r2, r3, #1
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003be:	e018      	b.n	80003f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c4:	f023 0312 	bic.w	r3, r3, #18
 80003c8:	f043 0210 	orr.w	r2, r3, #16
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d4:	f043 0201 	orr.w	r2, r3, #1
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003dc:	2301      	movs	r3, #1
 80003de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e0:	e007      	b.n	80003f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e6:	f043 0210 	orr.w	r2, r3, #16
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003ee:	2301      	movs	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000400:	ff1f0efe 	.word	0xff1f0efe

08000404 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000410:	2300      	movs	r3, #0
 8000412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a64      	ldr	r2, [pc, #400]	; (80005ac <HAL_ADC_Start_DMA+0x1a8>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d004      	beq.n	8000428 <HAL_ADC_Start_DMA+0x24>
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a63      	ldr	r2, [pc, #396]	; (80005b0 <HAL_ADC_Start_DMA+0x1ac>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <HAL_ADC_Start_DMA+0x32>
 8000428:	4b60      	ldr	r3, [pc, #384]	; (80005ac <HAL_ADC_Start_DMA+0x1a8>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000430:	2b00      	cmp	r3, #0
 8000432:	f040 80b3 	bne.w	800059c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800043c:	2b01      	cmp	r3, #1
 800043e:	d101      	bne.n	8000444 <HAL_ADC_Start_DMA+0x40>
 8000440:	2302      	movs	r3, #2
 8000442:	e0ae      	b.n	80005a2 <HAL_ADC_Start_DMA+0x19e>
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	2201      	movs	r2, #1
 8000448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800044c:	68f8      	ldr	r0, [r7, #12]
 800044e:	f000 f9cb 	bl	80007e8 <ADC_Enable>
 8000452:	4603      	mov	r3, r0
 8000454:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000456:	7dfb      	ldrb	r3, [r7, #23]
 8000458:	2b00      	cmp	r3, #0
 800045a:	f040 809a 	bne.w	8000592 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000462:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000466:	f023 0301 	bic.w	r3, r3, #1
 800046a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a4e      	ldr	r2, [pc, #312]	; (80005b0 <HAL_ADC_Start_DMA+0x1ac>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d105      	bne.n	8000488 <HAL_ADC_Start_DMA+0x84>
 800047c:	4b4b      	ldr	r3, [pc, #300]	; (80005ac <HAL_ADC_Start_DMA+0x1a8>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d115      	bne.n	80004b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800048c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d026      	beq.n	80004f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004b2:	e01d      	b.n	80004f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a39      	ldr	r2, [pc, #228]	; (80005ac <HAL_ADC_Start_DMA+0x1a8>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d004      	beq.n	80004d4 <HAL_ADC_Start_DMA+0xd0>
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a38      	ldr	r2, [pc, #224]	; (80005b0 <HAL_ADC_Start_DMA+0x1ac>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d10d      	bne.n	80004f0 <HAL_ADC_Start_DMA+0xec>
 80004d4:	4b35      	ldr	r3, [pc, #212]	; (80005ac <HAL_ADC_Start_DMA+0x1a8>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d007      	beq.n	80004f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d006      	beq.n	800050a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000500:	f023 0206 	bic.w	r2, r3, #6
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	62da      	str	r2, [r3, #44]	; 0x2c
 8000508:	e002      	b.n	8000510 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2200      	movs	r2, #0
 800050e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	6a1b      	ldr	r3, [r3, #32]
 800051c:	4a25      	ldr	r2, [pc, #148]	; (80005b4 <HAL_ADC_Start_DMA+0x1b0>)
 800051e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	6a1b      	ldr	r3, [r3, #32]
 8000524:	4a24      	ldr	r2, [pc, #144]	; (80005b8 <HAL_ADC_Start_DMA+0x1b4>)
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	6a1b      	ldr	r3, [r3, #32]
 800052c:	4a23      	ldr	r2, [pc, #140]	; (80005bc <HAL_ADC_Start_DMA+0x1b8>)
 800052e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f06f 0202 	mvn.w	r2, #2
 8000538:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000548:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6a18      	ldr	r0, [r3, #32]
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	334c      	adds	r3, #76	; 0x4c
 8000554:	4619      	mov	r1, r3
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f000 fbaf 	bl	8000cbc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000568:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800056c:	d108      	bne.n	8000580 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	689a      	ldr	r2, [r3, #8]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800057c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800057e:	e00f      	b.n	80005a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800058e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000590:	e006      	b.n	80005a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2200      	movs	r2, #0
 8000596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800059a:	e001      	b.n	80005a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40012400 	.word	0x40012400
 80005b0:	40012800 	.word	0x40012800
 80005b4:	0800091f 	.word	0x0800091f
 80005b8:	0800099b 	.word	0x0800099b
 80005bc:	080009b7 	.word	0x080009b7

080005c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
	...

080005f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000610:	2b01      	cmp	r3, #1
 8000612:	d101      	bne.n	8000618 <HAL_ADC_ConfigChannel+0x20>
 8000614:	2302      	movs	r3, #2
 8000616:	e0dc      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x1da>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2201      	movs	r2, #1
 800061c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b06      	cmp	r3, #6
 8000626:	d81c      	bhi.n	8000662 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	4613      	mov	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	3b05      	subs	r3, #5
 800063a:	221f      	movs	r2, #31
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	43db      	mvns	r3, r3
 8000642:	4019      	ands	r1, r3
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685a      	ldr	r2, [r3, #4]
 800064c:	4613      	mov	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	3b05      	subs	r3, #5
 8000654:	fa00 f203 	lsl.w	r2, r0, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	430a      	orrs	r2, r1
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
 8000660:	e03c      	b.n	80006dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	2b0c      	cmp	r3, #12
 8000668:	d81c      	bhi.n	80006a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	4613      	mov	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	4413      	add	r3, r2
 800067a:	3b23      	subs	r3, #35	; 0x23
 800067c:	221f      	movs	r2, #31
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	43db      	mvns	r3, r3
 8000684:	4019      	ands	r1, r3
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	3b23      	subs	r3, #35	; 0x23
 8000696:	fa00 f203 	lsl.w	r2, r0, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	430a      	orrs	r2, r1
 80006a0:	631a      	str	r2, [r3, #48]	; 0x30
 80006a2:	e01b      	b.n	80006dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	3b41      	subs	r3, #65	; 0x41
 80006b6:	221f      	movs	r2, #31
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	4019      	ands	r1, r3
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	685a      	ldr	r2, [r3, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	3b41      	subs	r3, #65	; 0x41
 80006d0:	fa00 f203 	lsl.w	r2, r0, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	430a      	orrs	r2, r1
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b09      	cmp	r3, #9
 80006e2:	d91c      	bls.n	800071e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	68d9      	ldr	r1, [r3, #12]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	3b1e      	subs	r3, #30
 80006f6:	2207      	movs	r2, #7
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	4019      	ands	r1, r3
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	6898      	ldr	r0, [r3, #8]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	3b1e      	subs	r3, #30
 8000710:	fa00 f203 	lsl.w	r2, r0, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	430a      	orrs	r2, r1
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	e019      	b.n	8000752 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6919      	ldr	r1, [r3, #16]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4613      	mov	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	2207      	movs	r2, #7
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	43db      	mvns	r3, r3
 8000736:	4019      	ands	r1, r3
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	6898      	ldr	r0, [r3, #8]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	fa00 f203 	lsl.w	r2, r0, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	430a      	orrs	r2, r1
 8000750:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b10      	cmp	r3, #16
 8000758:	d003      	beq.n	8000762 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800075e:	2b11      	cmp	r3, #17
 8000760:	d132      	bne.n	80007c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <HAL_ADC_ConfigChannel+0x1e4>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d125      	bne.n	80007b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d126      	bne.n	80007c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000788:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b10      	cmp	r3, #16
 8000790:	d11a      	bne.n	80007c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000798:	fba2 2303 	umull	r2, r3, r2, r3
 800079c:	0c9a      	lsrs	r2, r3, #18
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007a8:	e002      	b.n	80007b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f9      	bne.n	80007aa <HAL_ADC_ConfigChannel+0x1b2>
 80007b6:	e007      	b.n	80007c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007bc:	f043 0220 	orr.w	r2, r3, #32
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80007c4:	2301      	movs	r3, #1
 80007c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40012400 	.word	0x40012400
 80007e0:	20000008 	.word	0x20000008
 80007e4:	431bde83 	.word	0x431bde83

080007e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	2b01      	cmp	r3, #1
 8000804:	d040      	beq.n	8000888 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f042 0201 	orr.w	r2, r2, #1
 8000814:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <ADC_Enable+0xac>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <ADC_Enable+0xb0>)
 800081c:	fba2 2303 	umull	r2, r3, r2, r3
 8000820:	0c9b      	lsrs	r3, r3, #18
 8000822:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000824:	e002      	b.n	800082c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	3b01      	subs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f9      	bne.n	8000826 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000832:	f7ff fce3 	bl	80001fc <HAL_GetTick>
 8000836:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000838:	e01f      	b.n	800087a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800083a:	f7ff fcdf 	bl	80001fc <HAL_GetTick>
 800083e:	4602      	mov	r2, r0
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	2b02      	cmp	r3, #2
 8000846:	d918      	bls.n	800087a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b01      	cmp	r3, #1
 8000854:	d011      	beq.n	800087a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085a:	f043 0210 	orr.w	r2, r3, #16
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000866:	f043 0201 	orr.w	r2, r3, #1
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e007      	b.n	800088a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	2b01      	cmp	r3, #1
 8000886:	d1d8      	bne.n	800083a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000008 	.word	0x20000008
 8000898:	431bde83 	.word	0x431bde83

0800089c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d12e      	bne.n	8000914 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f022 0201 	bic.w	r2, r2, #1
 80008c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80008c6:	f7ff fc99 	bl	80001fc <HAL_GetTick>
 80008ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80008cc:	e01b      	b.n	8000906 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80008ce:	f7ff fc95 	bl	80001fc <HAL_GetTick>
 80008d2:	4602      	mov	r2, r0
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d914      	bls.n	8000906 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d10d      	bne.n	8000906 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ee:	f043 0210 	orr.w	r2, r3, #16
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fa:	f043 0201 	orr.w	r2, r3, #1
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e007      	b.n	8000916 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b01      	cmp	r3, #1
 8000912:	d0dc      	beq.n	80008ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b084      	sub	sp, #16
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000930:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000934:	2b00      	cmp	r3, #0
 8000936:	d127      	bne.n	8000988 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800094e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000952:	d115      	bne.n	8000980 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000958:	2b00      	cmp	r3, #0
 800095a:	d111      	bne.n	8000980 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d105      	bne.n	8000980 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000978:	f043 0201 	orr.w	r2, r3, #1
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff fe1d 	bl	80005c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000986:	e004      	b.n	8000992 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6a1b      	ldr	r3, [r3, #32]
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	4798      	blx	r3
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f7ff fe12 	bl	80005d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d4:	f043 0204 	orr.w	r2, r3, #4
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff fe01 	bl	80005e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	db0b      	blt.n	8000a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f003 021f 	and.w	r2, r3, #31
 8000a68:	4906      	ldr	r1, [pc, #24]	; (8000a84 <__NVIC_EnableIRQ+0x34>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	2001      	movs	r0, #1
 8000a72:	fa00 f202 	lsl.w	r2, r0, r2
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f7ff ff90 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff2d 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff42 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ff90 	bl	8000adc <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff5f 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff35 	bl	8000a50 <__NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffa2 	bl	8000b40 <SysTick_Config>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e043      	b.n	8000ca6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <HAL_DMA_Init+0xa8>)
 8000c26:	4413      	add	r3, r2
 8000c28:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <HAL_DMA_Init+0xac>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	009a      	lsls	r2, r3, #2
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <HAL_DMA_Init+0xb0>)
 8000c3a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2202      	movs	r2, #2
 8000c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c52:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	bffdfff8 	.word	0xbffdfff8
 8000cb4:	cccccccd 	.word	0xcccccccd
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d101      	bne.n	8000cdc <HAL_DMA_Start_IT+0x20>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e04a      	b.n	8000d72 <HAL_DMA_Start_IT+0xb6>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d13a      	bne.n	8000d64 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0201 	bic.w	r2, r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f000 f938 	bl	8000f88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 020e 	orr.w	r2, r2, #14
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e00f      	b.n	8000d52 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0204 	bic.w	r2, r2, #4
 8000d40:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f042 020a 	orr.w	r2, r2, #10
 8000d50:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 0201 	orr.w	r2, r2, #1
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e005      	b.n	8000d70 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	2204      	movs	r2, #4
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d04f      	beq.n	8000e44 <HAL_DMA_IRQHandler+0xc8>
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d04a      	beq.n	8000e44 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0320 	and.w	r3, r3, #32
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d107      	bne.n	8000dcc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0204 	bic.w	r2, r2, #4
 8000dca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a66      	ldr	r2, [pc, #408]	; (8000f6c <HAL_DMA_IRQHandler+0x1f0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d029      	beq.n	8000e2a <HAL_DMA_IRQHandler+0xae>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a65      	ldr	r2, [pc, #404]	; (8000f70 <HAL_DMA_IRQHandler+0x1f4>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d022      	beq.n	8000e26 <HAL_DMA_IRQHandler+0xaa>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a63      	ldr	r2, [pc, #396]	; (8000f74 <HAL_DMA_IRQHandler+0x1f8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01a      	beq.n	8000e20 <HAL_DMA_IRQHandler+0xa4>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a62      	ldr	r2, [pc, #392]	; (8000f78 <HAL_DMA_IRQHandler+0x1fc>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d012      	beq.n	8000e1a <HAL_DMA_IRQHandler+0x9e>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a60      	ldr	r2, [pc, #384]	; (8000f7c <HAL_DMA_IRQHandler+0x200>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d00a      	beq.n	8000e14 <HAL_DMA_IRQHandler+0x98>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a5f      	ldr	r2, [pc, #380]	; (8000f80 <HAL_DMA_IRQHandler+0x204>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d102      	bne.n	8000e0e <HAL_DMA_IRQHandler+0x92>
 8000e08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e0c:	e00e      	b.n	8000e2c <HAL_DMA_IRQHandler+0xb0>
 8000e0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e12:	e00b      	b.n	8000e2c <HAL_DMA_IRQHandler+0xb0>
 8000e14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e18:	e008      	b.n	8000e2c <HAL_DMA_IRQHandler+0xb0>
 8000e1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e1e:	e005      	b.n	8000e2c <HAL_DMA_IRQHandler+0xb0>
 8000e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e24:	e002      	b.n	8000e2c <HAL_DMA_IRQHandler+0xb0>
 8000e26:	2340      	movs	r3, #64	; 0x40
 8000e28:	e000      	b.n	8000e2c <HAL_DMA_IRQHandler+0xb0>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	4a55      	ldr	r2, [pc, #340]	; (8000f84 <HAL_DMA_IRQHandler+0x208>)
 8000e2e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 8094 	beq.w	8000f62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e42:	e08e      	b.n	8000f62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	2202      	movs	r2, #2
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d056      	beq.n	8000f02 <HAL_DMA_IRQHandler+0x186>
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d051      	beq.n	8000f02 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0320 	and.w	r3, r3, #32
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10b      	bne.n	8000e84 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 020a 	bic.w	r2, r2, #10
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a38      	ldr	r2, [pc, #224]	; (8000f6c <HAL_DMA_IRQHandler+0x1f0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d029      	beq.n	8000ee2 <HAL_DMA_IRQHandler+0x166>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a37      	ldr	r2, [pc, #220]	; (8000f70 <HAL_DMA_IRQHandler+0x1f4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d022      	beq.n	8000ede <HAL_DMA_IRQHandler+0x162>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a35      	ldr	r2, [pc, #212]	; (8000f74 <HAL_DMA_IRQHandler+0x1f8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d01a      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0x15c>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a34      	ldr	r2, [pc, #208]	; (8000f78 <HAL_DMA_IRQHandler+0x1fc>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d012      	beq.n	8000ed2 <HAL_DMA_IRQHandler+0x156>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <HAL_DMA_IRQHandler+0x200>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00a      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x150>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a31      	ldr	r2, [pc, #196]	; (8000f80 <HAL_DMA_IRQHandler+0x204>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d102      	bne.n	8000ec6 <HAL_DMA_IRQHandler+0x14a>
 8000ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ec4:	e00e      	b.n	8000ee4 <HAL_DMA_IRQHandler+0x168>
 8000ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eca:	e00b      	b.n	8000ee4 <HAL_DMA_IRQHandler+0x168>
 8000ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed0:	e008      	b.n	8000ee4 <HAL_DMA_IRQHandler+0x168>
 8000ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed6:	e005      	b.n	8000ee4 <HAL_DMA_IRQHandler+0x168>
 8000ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000edc:	e002      	b.n	8000ee4 <HAL_DMA_IRQHandler+0x168>
 8000ede:	2320      	movs	r3, #32
 8000ee0:	e000      	b.n	8000ee4 <HAL_DMA_IRQHandler+0x168>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	4a27      	ldr	r2, [pc, #156]	; (8000f84 <HAL_DMA_IRQHandler+0x208>)
 8000ee6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d034      	beq.n	8000f62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f00:	e02f      	b.n	8000f62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	2208      	movs	r2, #8
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d028      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x1e8>
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d023      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 020e 	bic.w	r2, r2, #14
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d004      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	4798      	blx	r3
    }
  }
  return;
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
}
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40020008 	.word	0x40020008
 8000f70:	4002001c 	.word	0x4002001c
 8000f74:	40020030 	.word	0x40020030
 8000f78:	40020044 	.word	0x40020044
 8000f7c:	40020058 	.word	0x40020058
 8000f80:	4002006c 	.word	0x4002006c
 8000f84:	40020000 	.word	0x40020000

08000f88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b10      	cmp	r3, #16
 8000fb4:	d108      	bne.n	8000fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fc6:	e007      	b.n	8000fd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	60da      	str	r2, [r3, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b08b      	sub	sp, #44	; 0x2c
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff6:	e127      	b.n	8001248 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 8116 	bne.w	8001242 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b12      	cmp	r3, #18
 800101c:	d034      	beq.n	8001088 <HAL_GPIO_Init+0xa4>
 800101e:	2b12      	cmp	r3, #18
 8001020:	d80d      	bhi.n	800103e <HAL_GPIO_Init+0x5a>
 8001022:	2b02      	cmp	r3, #2
 8001024:	d02b      	beq.n	800107e <HAL_GPIO_Init+0x9a>
 8001026:	2b02      	cmp	r3, #2
 8001028:	d804      	bhi.n	8001034 <HAL_GPIO_Init+0x50>
 800102a:	2b00      	cmp	r3, #0
 800102c:	d031      	beq.n	8001092 <HAL_GPIO_Init+0xae>
 800102e:	2b01      	cmp	r3, #1
 8001030:	d01c      	beq.n	800106c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001032:	e048      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001034:	2b03      	cmp	r3, #3
 8001036:	d043      	beq.n	80010c0 <HAL_GPIO_Init+0xdc>
 8001038:	2b11      	cmp	r3, #17
 800103a:	d01b      	beq.n	8001074 <HAL_GPIO_Init+0x90>
          break;
 800103c:	e043      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800103e:	4a89      	ldr	r2, [pc, #548]	; (8001264 <HAL_GPIO_Init+0x280>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d026      	beq.n	8001092 <HAL_GPIO_Init+0xae>
 8001044:	4a87      	ldr	r2, [pc, #540]	; (8001264 <HAL_GPIO_Init+0x280>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d806      	bhi.n	8001058 <HAL_GPIO_Init+0x74>
 800104a:	4a87      	ldr	r2, [pc, #540]	; (8001268 <HAL_GPIO_Init+0x284>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d020      	beq.n	8001092 <HAL_GPIO_Init+0xae>
 8001050:	4a86      	ldr	r2, [pc, #536]	; (800126c <HAL_GPIO_Init+0x288>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d01d      	beq.n	8001092 <HAL_GPIO_Init+0xae>
          break;
 8001056:	e036      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001058:	4a85      	ldr	r2, [pc, #532]	; (8001270 <HAL_GPIO_Init+0x28c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d019      	beq.n	8001092 <HAL_GPIO_Init+0xae>
 800105e:	4a85      	ldr	r2, [pc, #532]	; (8001274 <HAL_GPIO_Init+0x290>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d016      	beq.n	8001092 <HAL_GPIO_Init+0xae>
 8001064:	4a84      	ldr	r2, [pc, #528]	; (8001278 <HAL_GPIO_Init+0x294>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0xae>
          break;
 800106a:	e02c      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e028      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	3304      	adds	r3, #4
 800107a:	623b      	str	r3, [r7, #32]
          break;
 800107c:	e023      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	3308      	adds	r3, #8
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e01e      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	330c      	adds	r3, #12
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	e019      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800109a:	2304      	movs	r3, #4
 800109c:	623b      	str	r3, [r7, #32]
          break;
 800109e:	e012      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d105      	bne.n	80010b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2308      	movs	r3, #8
 80010aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	611a      	str	r2, [r3, #16]
          break;
 80010b2:	e008      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b4:	2308      	movs	r3, #8
 80010b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	615a      	str	r2, [r3, #20]
          break;
 80010be:	e002      	b.n	80010c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
          break;
 80010c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	2bff      	cmp	r3, #255	; 0xff
 80010ca:	d801      	bhi.n	80010d0 <HAL_GPIO_Init+0xec>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	e001      	b.n	80010d4 <HAL_GPIO_Init+0xf0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3304      	adds	r3, #4
 80010d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2bff      	cmp	r3, #255	; 0xff
 80010da:	d802      	bhi.n	80010e2 <HAL_GPIO_Init+0xfe>
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x104>
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	3b08      	subs	r3, #8
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	210f      	movs	r1, #15
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	401a      	ands	r2, r3
 80010fa:	6a39      	ldr	r1, [r7, #32]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	431a      	orrs	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 8096 	beq.w	8001242 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001116:	4b59      	ldr	r3, [pc, #356]	; (800127c <HAL_GPIO_Init+0x298>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	4a58      	ldr	r2, [pc, #352]	; (800127c <HAL_GPIO_Init+0x298>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6193      	str	r3, [r2, #24]
 8001122:	4b56      	ldr	r3, [pc, #344]	; (800127c <HAL_GPIO_Init+0x298>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800112e:	4a54      	ldr	r2, [pc, #336]	; (8001280 <HAL_GPIO_Init+0x29c>)
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4013      	ands	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <HAL_GPIO_Init+0x2a0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x19e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <HAL_GPIO_Init+0x2a4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x19a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a49      	ldr	r2, [pc, #292]	; (800128c <HAL_GPIO_Init+0x2a8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x196>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a48      	ldr	r2, [pc, #288]	; (8001290 <HAL_GPIO_Init+0x2ac>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x192>
 8001172:	2303      	movs	r3, #3
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x1a0>
 8001176:	2304      	movs	r3, #4
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x1a0>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x1a0>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x1a0>
 8001182:	2300      	movs	r3, #0
 8001184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001194:	493a      	ldr	r1, [pc, #232]	; (8001280 <HAL_GPIO_Init+0x29c>)
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011ae:	4b39      	ldr	r3, [pc, #228]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4938      	ldr	r1, [pc, #224]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011bc:	4b35      	ldr	r3, [pc, #212]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	4933      	ldr	r1, [pc, #204]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	492e      	ldr	r1, [pc, #184]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	604b      	str	r3, [r1, #4]
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	4929      	ldr	r1, [pc, #164]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	4924      	ldr	r1, [pc, #144]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	608b      	str	r3, [r1, #8]
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	43db      	mvns	r3, r3
 8001214:	491f      	ldr	r1, [pc, #124]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 8001216:	4013      	ands	r3, r2
 8001218:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	491a      	ldr	r1, [pc, #104]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	60cb      	str	r3, [r1, #12]
 8001232:	e006      	b.n	8001242 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	43db      	mvns	r3, r3
 800123c:	4915      	ldr	r1, [pc, #84]	; (8001294 <HAL_GPIO_Init+0x2b0>)
 800123e:	4013      	ands	r3, r2
 8001240:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	3301      	adds	r3, #1
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	fa22 f303 	lsr.w	r3, r2, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	f47f aed0 	bne.w	8000ff8 <HAL_GPIO_Init+0x14>
  }
}
 8001258:	bf00      	nop
 800125a:	372c      	adds	r7, #44	; 0x2c
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	10210000 	.word	0x10210000
 8001268:	10110000 	.word	0x10110000
 800126c:	10120000 	.word	0x10120000
 8001270:	10310000 	.word	0x10310000
 8001274:	10320000 	.word	0x10320000
 8001278:	10220000 	.word	0x10220000
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000
 8001284:	40010800 	.word	0x40010800
 8001288:	40010c00 	.word	0x40010c00
 800128c:	40011000 	.word	0x40011000
 8001290:	40011400 	.word	0x40011400
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	611a      	str	r2, [r3, #16]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43d9      	mvns	r1, r3
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	400b      	ands	r3, r1
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	611a      	str	r2, [r3, #16]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
	...

080012fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e26c      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8087 	beq.w	800142a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800131c:	4b92      	ldr	r3, [pc, #584]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b04      	cmp	r3, #4
 8001326:	d00c      	beq.n	8001342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001328:	4b8f      	ldr	r3, [pc, #572]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	2b08      	cmp	r3, #8
 8001332:	d112      	bne.n	800135a <HAL_RCC_OscConfig+0x5e>
 8001334:	4b8c      	ldr	r3, [pc, #560]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d10b      	bne.n	800135a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001342:	4b89      	ldr	r3, [pc, #548]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d06c      	beq.n	8001428 <HAL_RCC_OscConfig+0x12c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d168      	bne.n	8001428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e246      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x76>
 8001364:	4b80      	ldr	r3, [pc, #512]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a7f      	ldr	r2, [pc, #508]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800136a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e02e      	b.n	80013d0 <HAL_RCC_OscConfig+0xd4>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x98>
 800137a:	4b7b      	ldr	r3, [pc, #492]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7a      	ldr	r2, [pc, #488]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b78      	ldr	r3, [pc, #480]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a77      	ldr	r2, [pc, #476]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e01d      	b.n	80013d0 <HAL_RCC_OscConfig+0xd4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0xbc>
 800139e:	4b72      	ldr	r3, [pc, #456]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a71      	ldr	r2, [pc, #452]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b6f      	ldr	r3, [pc, #444]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6e      	ldr	r2, [pc, #440]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e00b      	b.n	80013d0 <HAL_RCC_OscConfig+0xd4>
 80013b8:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a6a      	ldr	r2, [pc, #424]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b68      	ldr	r3, [pc, #416]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a67      	ldr	r2, [pc, #412]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7fe ff10 	bl	80001fc <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7fe ff0c 	bl	80001fc <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e1fa      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0xe4>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7fe fefc 	bl	80001fc <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7fe fef8 	bl	80001fc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1e6      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	4b53      	ldr	r3, [pc, #332]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x10c>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d063      	beq.n	80014fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001436:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001442:	4b49      	ldr	r3, [pc, #292]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d11c      	bne.n	8001488 <HAL_RCC_OscConfig+0x18c>
 800144e:	4b46      	ldr	r3, [pc, #280]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d116      	bne.n	8001488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <HAL_RCC_OscConfig+0x176>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e1ba      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4939      	ldr	r1, [pc, #228]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	e03a      	b.n	80014fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d020      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <HAL_RCC_OscConfig+0x270>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7fe feb1 	bl	80001fc <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149e:	f7fe fead 	bl	80001fc <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e19b      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4927      	ldr	r1, [pc, #156]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_RCC_OscConfig+0x270>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7fe fe90 	bl	80001fc <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e0:	f7fe fe8c 	bl	80001fc <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e17a      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d03a      	beq.n	8001580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d019      	beq.n	8001546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_RCC_OscConfig+0x274>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7fe fe70 	bl	80001fc <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001520:	f7fe fe6c 	bl	80001fc <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e15a      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800153e:	2001      	movs	r0, #1
 8001540:	f000 fada 	bl	8001af8 <RCC_Delay>
 8001544:	e01c      	b.n	8001580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_RCC_OscConfig+0x274>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154c:	f7fe fe56 	bl	80001fc <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001552:	e00f      	b.n	8001574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001554:	f7fe fe52 	bl	80001fc <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d908      	bls.n	8001574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e140      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	42420000 	.word	0x42420000
 8001570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	4b9e      	ldr	r3, [pc, #632]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e9      	bne.n	8001554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a6 	beq.w	80016da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001592:	4b97      	ldr	r3, [pc, #604]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10d      	bne.n	80015ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b94      	ldr	r3, [pc, #592]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a93      	ldr	r2, [pc, #588]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b91      	ldr	r3, [pc, #580]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ba:	4b8e      	ldr	r3, [pc, #568]	; (80017f4 <HAL_RCC_OscConfig+0x4f8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c6:	4b8b      	ldr	r3, [pc, #556]	; (80017f4 <HAL_RCC_OscConfig+0x4f8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a8a      	ldr	r2, [pc, #552]	; (80017f4 <HAL_RCC_OscConfig+0x4f8>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d2:	f7fe fe13 	bl	80001fc <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015da:	f7fe fe0f 	bl	80001fc <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b64      	cmp	r3, #100	; 0x64
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e0fd      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <HAL_RCC_OscConfig+0x4f8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x312>
 8001600:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4a7a      	ldr	r2, [pc, #488]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6213      	str	r3, [r2, #32]
 800160c:	e02d      	b.n	800166a <HAL_RCC_OscConfig+0x36e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x334>
 8001616:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4a75      	ldr	r2, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6213      	str	r3, [r2, #32]
 8001622:	4b73      	ldr	r3, [pc, #460]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a72      	ldr	r2, [pc, #456]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001628:	f023 0304 	bic.w	r3, r3, #4
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	e01c      	b.n	800166a <HAL_RCC_OscConfig+0x36e>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b05      	cmp	r3, #5
 8001636:	d10c      	bne.n	8001652 <HAL_RCC_OscConfig+0x356>
 8001638:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a6c      	ldr	r2, [pc, #432]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a69      	ldr	r2, [pc, #420]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	e00b      	b.n	800166a <HAL_RCC_OscConfig+0x36e>
 8001652:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a66      	ldr	r2, [pc, #408]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a63      	ldr	r2, [pc, #396]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d015      	beq.n	800169e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7fe fdc3 	bl	80001fc <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7fe fdbf 	bl	80001fc <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0ab      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	4b57      	ldr	r3, [pc, #348]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ee      	beq.n	800167a <HAL_RCC_OscConfig+0x37e>
 800169c:	e014      	b.n	80016c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7fe fdad 	bl	80001fc <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7fe fda9 	bl	80001fc <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e095      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ee      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d105      	bne.n	80016da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ce:	4b48      	ldr	r3, [pc, #288]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a47      	ldr	r2, [pc, #284]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8081 	beq.w	80017e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e4:	4b42      	ldr	r3, [pc, #264]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d061      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d146      	bne.n	8001786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <HAL_RCC_OscConfig+0x4fc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7fe fd7d 	bl	80001fc <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001706:	f7fe fd79 	bl	80001fc <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e067      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d108      	bne.n	8001740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	492d      	ldr	r1, [pc, #180]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a19      	ldr	r1, [r3, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	430b      	orrs	r3, r1
 8001752:	4927      	ldr	r1, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_RCC_OscConfig+0x4fc>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7fe fd4d 	bl	80001fc <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7fe fd49 	bl	80001fc <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e037      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x46a>
 8001784:	e02f      	b.n	80017e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_RCC_OscConfig+0x4fc>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7fe fd36 	bl	80001fc <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7fe fd32 	bl	80001fc <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e020      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x498>
 80017b2:	e018      	b.n	80017e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e013      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40007000 	.word	0x40007000
 80017f8:	42420060 	.word	0x42420060

080017fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0d0      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001810:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d910      	bls.n	8001840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b67      	ldr	r3, [pc, #412]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 0207 	bic.w	r2, r3, #7
 8001826:	4965      	ldr	r1, [pc, #404]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0b8      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001858:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001862:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001870:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a52      	ldr	r2, [pc, #328]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800187a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	494d      	ldr	r1, [pc, #308]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d040      	beq.n	800191c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d115      	bne.n	80018da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e07f      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e073      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e06b      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018da:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f023 0203 	bic.w	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4936      	ldr	r1, [pc, #216]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ec:	f7fe fc86 	bl	80001fc <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	e00a      	b.n	800190a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f4:	f7fe fc82 	bl	80001fc <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e053      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 020c 	and.w	r2, r3, #12
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	429a      	cmp	r2, r3
 800191a:	d1eb      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800191c:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d210      	bcs.n	800194c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 0207 	bic.w	r2, r3, #7
 8001932:	4922      	ldr	r1, [pc, #136]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e032      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4916      	ldr	r1, [pc, #88]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	490e      	ldr	r1, [pc, #56]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800198a:	f000 f821 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 800198e:	4601      	mov	r1, r0
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_RCC_ClockConfig+0x1c8>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	fa21 f303 	lsr.w	r3, r1, r3
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1cc>)
 80019a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1d0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fbe4 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40022000 	.word	0x40022000
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08004bd4 	.word	0x08004bd4
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000000 	.word	0x20000000

080019d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d0:	b490      	push	{r4, r7}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019d6:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019d8:	1d3c      	adds	r4, r7, #4
 80019da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019e0:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x40>
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x46>
 8001a0e:	e02d      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a12:	623b      	str	r3, [r7, #32]
      break;
 8001a14:	e02d      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	0c9b      	lsrs	r3, r3, #18
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a22:	4413      	add	r3, r2
 8001a24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d013      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	0c5b      	lsrs	r3, r3, #17
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a42:	4413      	add	r3, r2
 8001a44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a4e:	fb02 f203 	mul.w	r2, r2, r3
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5a:	e004      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	623b      	str	r3, [r7, #32]
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a6e:	623b      	str	r3, [r7, #32]
      break;
 8001a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a72:	6a3b      	ldr	r3, [r7, #32]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc90      	pop	{r4, r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	0800499c 	.word	0x0800499c
 8001a84:	080049ac 	.word	0x080049ac
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	007a1200 	.word	0x007a1200
 8001a90:	003d0900 	.word	0x003d0900

08001a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a98:	4b02      	ldr	r3, [pc, #8]	; (8001aa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aac:	f7ff fff2 	bl	8001a94 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4601      	mov	r1, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4a03      	ldr	r2, [pc, #12]	; (8001acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	08004be4 	.word	0x08004be4

08001ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_RCC_GetHCLKFreq>
 8001ad8:	4601      	mov	r1, r0
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	0adb      	lsrs	r3, r3, #11
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	08004be4 	.word	0x08004be4

08001af8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <RCC_Delay+0x34>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <RCC_Delay+0x38>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0a5b      	lsrs	r3, r3, #9
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b14:	bf00      	nop
  }
  while (Delay --);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1e5a      	subs	r2, r3, #1
 8001b1a:	60fa      	str	r2, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f9      	bne.n	8001b14 <RCC_Delay+0x1c>
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	10624dd3 	.word	0x10624dd3

08001b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d07d      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10d      	bne.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b60:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	4a4b      	ldr	r2, [pc, #300]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	61d3      	str	r3, [r2, #28]
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b46      	ldr	r3, [pc, #280]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d118      	bne.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a42      	ldr	r2, [pc, #264]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b94:	f7fe fb32 	bl	80001fc <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	e008      	b.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9c:	f7fe fb2e 	bl	80001fc <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e06d      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bba:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d02e      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d027      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bee:	4a29      	ldr	r2, [pc, #164]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d014      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fafd 	bl	80001fc <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7fe faf9 	bl	80001fc <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e036      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ee      	beq.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4917      	ldr	r1, [pc, #92]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	490b      	ldr	r1, [pc, #44]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d008      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4904      	ldr	r1, [pc, #16]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40007000 	.word	0x40007000
 8001c9c:	42420440 	.word	0x42420440

08001ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e076      	b.n	8001da0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d108      	bne.n	8001ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cc2:	d009      	beq.n	8001cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
 8001cca:	e005      	b.n	8001cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f001 fbf0 	bl	80034d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5c:	ea42 0103 	orr.w	r1, r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	0c1a      	lsrs	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f002 0204 	and.w	r2, r2, #4
 8001d7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69da      	ldr	r2, [r3, #28]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001db6:	2301      	movs	r3, #1
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_SPI_TransmitReceive+0x26>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e18a      	b.n	80020e4 <HAL_SPI_TransmitReceive+0x33c>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dd6:	f7fe fa11 	bl	80001fc <HAL_GetTick>
 8001dda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d00f      	beq.n	8001e18 <HAL_SPI_TransmitReceive+0x70>
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dfe:	d107      	bne.n	8001e10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d103      	bne.n	8001e10 <HAL_SPI_TransmitReceive+0x68>
 8001e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d003      	beq.n	8001e18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e10:	2302      	movs	r3, #2
 8001e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e16:	e15b      	b.n	80020d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_SPI_TransmitReceive+0x82>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_SPI_TransmitReceive+0x82>
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e30:	e14e      	b.n	80020d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d003      	beq.n	8001e46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2205      	movs	r2, #5
 8001e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	887a      	ldrh	r2, [r7, #2]
 8001e56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	887a      	ldrh	r2, [r7, #2]
 8001e6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d007      	beq.n	8001e9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ea2:	d178      	bne.n	8001f96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_SPI_TransmitReceive+0x10a>
 8001eac:	8b7b      	ldrh	r3, [r7, #26]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d166      	bne.n	8001f80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	881a      	ldrh	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	1c9a      	adds	r2, r3, #2
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ed6:	e053      	b.n	8001f80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d11b      	bne.n	8001f1e <HAL_SPI_TransmitReceive+0x176>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d016      	beq.n	8001f1e <HAL_SPI_TransmitReceive+0x176>
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d113      	bne.n	8001f1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	881a      	ldrh	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	1c9a      	adds	r2, r3, #2
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d119      	bne.n	8001f60 <HAL_SPI_TransmitReceive+0x1b8>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d014      	beq.n	8001f60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	b292      	uxth	r2, r2
 8001f42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	1c9a      	adds	r2, r3, #2
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f60:	f7fe f94c 	bl	80001fc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d807      	bhi.n	8001f80 <HAL_SPI_TransmitReceive+0x1d8>
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d003      	beq.n	8001f80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f7e:	e0a7      	b.n	80020d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1a6      	bne.n	8001ed8 <HAL_SPI_TransmitReceive+0x130>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1a1      	bne.n	8001ed8 <HAL_SPI_TransmitReceive+0x130>
 8001f94:	e07c      	b.n	8002090 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_SPI_TransmitReceive+0x1fc>
 8001f9e:	8b7b      	ldrh	r3, [r7, #26]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d16b      	bne.n	800207c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	330c      	adds	r3, #12
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fca:	e057      	b.n	800207c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d11c      	bne.n	8002014 <HAL_SPI_TransmitReceive+0x26c>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d017      	beq.n	8002014 <HAL_SPI_TransmitReceive+0x26c>
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d114      	bne.n	8002014 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	d119      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x2ae>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d014      	beq.n	8002056 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002052:	2301      	movs	r3, #1
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002056:	f7fe f8d1 	bl	80001fc <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002062:	429a      	cmp	r2, r3
 8002064:	d803      	bhi.n	800206e <HAL_SPI_TransmitReceive+0x2c6>
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d102      	bne.n	8002074 <HAL_SPI_TransmitReceive+0x2cc>
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	2b00      	cmp	r3, #0
 8002072:	d103      	bne.n	800207c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800207a:	e029      	b.n	80020d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1a2      	bne.n	8001fcc <HAL_SPI_TransmitReceive+0x224>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d19d      	bne.n	8001fcc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f8b1 	bl	80021fc <SPI_EndRxTxTransaction>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2220      	movs	r2, #32
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80020ac:	e010      	b.n	80020d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10b      	bne.n	80020ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	e000      	b.n	80020d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80020ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3730      	adds	r7, #48	; 0x30
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020fc:	f7fe f87e 	bl	80001fc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	4413      	add	r3, r2
 800210a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800210c:	f7fe f876 	bl	80001fc <HAL_GetTick>
 8002110:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002112:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	015b      	lsls	r3, r3, #5
 8002118:	0d1b      	lsrs	r3, r3, #20
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002122:	e054      	b.n	80021ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212a:	d050      	beq.n	80021ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800212c:	f7fe f866 	bl	80001fc <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	429a      	cmp	r2, r3
 800213a:	d902      	bls.n	8002142 <SPI_WaitFlagStateUntilTimeout+0x56>
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d13d      	bne.n	80021be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002150:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215a:	d111      	bne.n	8002180 <SPI_WaitFlagStateUntilTimeout+0x94>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002164:	d004      	beq.n	8002170 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216e:	d107      	bne.n	8002180 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800217e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002188:	d10f      	bne.n	80021aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e017      	b.n	80021ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4013      	ands	r3, r2
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d19b      	bne.n	8002124 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008

080021fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2200      	movs	r2, #0
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff ff6a 	bl	80020ec <SPI_WaitFlagStateUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0220 	orr.w	r2, r3, #32
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e000      	b.n	8002230 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e03f      	b.n	80022ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f001 f986 	bl	8003570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2224      	movs	r2, #36	; 0x24
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800227a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f905 	bl	800248c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b08a      	sub	sp, #40	; 0x28
 80022d6:	af02      	add	r7, sp, #8
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	4613      	mov	r3, r2
 80022e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d17c      	bne.n	80023ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_UART_Transmit+0x2c>
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e075      	b.n	80023ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_UART_Transmit+0x3e>
 800230c:	2302      	movs	r3, #2
 800230e:	e06e      	b.n	80023ee <HAL_UART_Transmit+0x11c>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2221      	movs	r2, #33	; 0x21
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002326:	f7fd ff69 	bl	80001fc <HAL_GetTick>
 800232a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002340:	d108      	bne.n	8002354 <HAL_UART_Transmit+0x82>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d104      	bne.n	8002354 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	e003      	b.n	800235c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002364:	e02a      	b.n	80023bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2200      	movs	r2, #0
 800236e:	2180      	movs	r1, #128	; 0x80
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f840 	bl	80023f6 <UART_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e036      	b.n	80023ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10b      	bne.n	800239e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	3302      	adds	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	e007      	b.n	80023ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	3301      	adds	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1cf      	bne.n	8002366 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2140      	movs	r1, #64	; 0x40
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f810 	bl	80023f6 <UART_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e006      	b.n	80023ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002406:	e02c      	b.n	8002462 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240e:	d028      	beq.n	8002462 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <UART_WaitOnFlagUntilTimeout+0x30>
 8002416:	f7fd fef1 	bl	80001fc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	429a      	cmp	r2, r3
 8002424:	d21d      	bcs.n	8002462 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002434:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e00f      	b.n	8002482 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	429a      	cmp	r2, r3
 800247e:	d0c3      	beq.n	8002408 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024c6:	f023 030c 	bic.w	r3, r3, #12
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2c      	ldr	r2, [pc, #176]	; (80025a0 <UART_SetConfig+0x114>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d103      	bne.n	80024fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024f4:	f7ff faec 	bl	8001ad0 <HAL_RCC_GetPCLK2Freq>
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	e002      	b.n	8002502 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024fc:	f7ff fad4 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8002500:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009a      	lsls	r2, r3, #2
 800250c:	441a      	add	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fbb2 f3f3 	udiv	r3, r2, r3
 8002518:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <UART_SetConfig+0x118>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	0119      	lsls	r1, r3, #4
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	009a      	lsls	r2, r3, #2
 800252c:	441a      	add	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fbb2 f2f3 	udiv	r2, r2, r3
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <UART_SetConfig+0x118>)
 800253a:	fba3 0302 	umull	r0, r3, r3, r2
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2064      	movs	r0, #100	; 0x64
 8002542:	fb00 f303 	mul.w	r3, r0, r3
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	3332      	adds	r3, #50	; 0x32
 800254c:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <UART_SetConfig+0x118>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002558:	4419      	add	r1, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	009a      	lsls	r2, r3, #2
 8002564:	441a      	add	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <UART_SetConfig+0x118>)
 8002572:	fba3 0302 	umull	r0, r3, r3, r2
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2064      	movs	r0, #100	; 0x64
 800257a:	fb00 f303 	mul.w	r3, r0, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	3332      	adds	r3, #50	; 0x32
 8002584:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <UART_SetConfig+0x118>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	f003 020f 	and.w	r2, r3, #15
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	440a      	add	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40013800 	.word	0x40013800
 80025a4:	51eb851f 	.word	0x51eb851f

080025a8 <crc16_floating>:
        crc = (crc << 8) ^ crc16tab[(((crc >> 8) ^ (*((uint8_t *)(buf++)))) & 0x00FF)];
    return crc;
}

uint16_t crc16_floating(uint8_t next, uint16_t seed)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	460a      	mov	r2, r1
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	4613      	mov	r3, r2
 80025b6:	80bb      	strh	r3, [r7, #4]
    return (seed << 8) ^ crc16tab[((seed >> 8) ^ next) & 0x00FF];
 80025b8:	88bb      	ldrh	r3, [r7, #4]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	b21a      	sxth	r2, r3
 80025be:	88bb      	ldrh	r3, [r7, #4]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4619      	mov	r1, r3
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	404b      	eors	r3, r1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4905      	ldr	r1, [pc, #20]	; (80025e4 <crc16_floating+0x3c>)
 80025ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	4053      	eors	r3, r2
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	b29b      	uxth	r3, r3
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	080049c8 	.word	0x080049c8

080025e8 <SendFrameData>:
#include "frame_uart.h"
#include "crc.h"
#include "stdio.h"

void SendFrameData(uint8_t *pu8Src, uint16_t u16Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	460b      	mov	r3, r1
 80025f6:	817b      	strh	r3, [r7, #10]
    const uint8_t *pu8Src_end = pu8Src + u16Src_len;
 80025f8:	897b      	ldrh	r3, [r7, #10]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4413      	add	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
    const uint8_t *pu8Dest_start = pu8Dest;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	83fb      	strh	r3, [r7, #30]

    *(pu8Dest++) = START_BYTE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	2245      	movs	r2, #69	; 0x45
 8002610:	701a      	strb	r2, [r3, #0]
    while (pu8Src < pu8Src_end)
 8002612:	e029      	b.n	8002668 <SendFrameData+0x80>
    {
        if (*pu8Src == START_BYTE || *pu8Src == CHECK_BYTE || *pu8Src == STOP_BYTE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b45      	cmp	r3, #69	; 0x45
 800261a:	d007      	beq.n	800262c <SendFrameData+0x44>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b60      	cmp	r3, #96	; 0x60
 8002622:	d003      	beq.n	800262c <SendFrameData+0x44>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2bc4      	cmp	r3, #196	; 0xc4
 800262a:	d10b      	bne.n	8002644 <SendFrameData+0x5c>
        {
            *(pu8Dest++) = CHECK_BYTE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	2260      	movs	r2, #96	; 0x60
 8002634:	701a      	strb	r2, [r3, #0]
            *(pu8Dest++) = *pu8Src;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e005      	b.n	8002650 <SendFrameData+0x68>
        }
        else
        {
            *(pu8Dest++) = *pu8Src;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	701a      	strb	r2, [r3, #0]
        }
        crc = crc16_floating(*pu8Src, crc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	8bfa      	ldrh	r2, [r7, #30]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ffa5 	bl	80025a8 <crc16_floating>
 800265e:	4603      	mov	r3, r0
 8002660:	83fb      	strh	r3, [r7, #30]
        pu8Src++;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3301      	adds	r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
    while (pu8Src < pu8Src_end)
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	429a      	cmp	r2, r3
 800266e:	d3d1      	bcc.n	8002614 <SendFrameData+0x2c>
    }
    *(pu8Dest) = (char)(crc >> 8);
 8002670:	8bfb      	ldrh	r3, [r7, #30]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29b      	uxth	r3, r3
 8002676:	b2da      	uxtb	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3301      	adds	r3, #1
 8002680:	607b      	str	r3, [r7, #4]
    *(pu8Dest) = (char)crc;
 8002682:	8bfb      	ldrh	r3, [r7, #30]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	701a      	strb	r2, [r3, #0]
    pu8Dest++;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3301      	adds	r3, #1
 800268e:	607b      	str	r3, [r7, #4]
    *(pu8Dest++) = STOP_BYTE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	22c4      	movs	r2, #196	; 0xc4
 8002698:	701a      	strb	r2, [r3, #0]
    *(pu16Dest_len) = pu8Dest - pu8Dest_start;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	801a      	strh	r2, [r3, #0]
}
 80026a6:	bf00      	nop
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
<<<<<<< HEAD
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	4804      	ldr	r0, [pc, #16]	; (80026d8 <_write+0x28>)
 80026c8:	f7ff fe03 	bl	80022d2 <HAL_UART_Transmit>
  return len;
 80026cc:	687b      	ldr	r3, [r7, #4]
=======
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	4804      	ldr	r0, [pc, #16]	; (80025d0 <_write+0x28>)
 80025c0:	f7ff fe87 	bl	80022d2 <HAL_UART_Transmit>
	return len;
 80025c4:	687b      	ldr	r3, [r7, #4]
>>>>>>> parent of d4df473 (optimizing PID)
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000013c 	.word	0x2000013c

080026dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */
=======
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  
>>>>>>> parent of d4df473 (optimizing PID)

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026e0:	f7fd fd34 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026e4:	f000 f826 	bl	8002734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026e8:	f000 f978 	bl	80029dc <MX_GPIO_Init>
  MX_DMA_Init();
 80026ec:	f000 f958 	bl	80029a0 <MX_DMA_Init>
  MX_ADC1_Init();
 80026f0:	f000 f87c 	bl	80027ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80026f4:	f000 f92a 	bl	800294c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80026f8:	f000 f8f2 	bl	80028e0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)value, 5);
 80026fc:	2205      	movs	r2, #5
 80026fe:	4909      	ldr	r1, [pc, #36]	; (8002724 <main+0x48>)
 8002700:	4809      	ldr	r0, [pc, #36]	; (8002728 <main+0x4c>)
 8002702:	f7fd fe7f 	bl	8000404 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    runRadio();
 8002706:	f000 fd8b 	bl	8003220 <runRadio>
    printf("%d%d", (uint16_t)payload_packet.throttle, (uint16_t)payload_packet.roll);
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <main+0x50>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <main+0x50>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	4805      	ldr	r0, [pc, #20]	; (8002730 <main+0x54>)
 800271c:	f001 f880 	bl	8003820 <iprintf>
    runRadio();
 8002720:	e7f1      	b.n	8002706 <main+0x2a>
 8002722:	bf00      	nop
 8002724:	200001c4 	.word	0x200001c4
 8002728:	200000f4 	.word	0x200000f4
 800272c:	20000124 	.word	0x20000124
 8002730:	080049b0 	.word	0x080049b0

08002734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b094      	sub	sp, #80	; 0x50
 8002738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800273e:	2228      	movs	r2, #40	; 0x28
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f001 f864 	bl	8003810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002764:	2301      	movs	r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002772:	2301      	movs	r3, #1
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002776:	2302      	movs	r3, #2
 8002778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800277a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002780:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fdb6 	bl	80012fc <HAL_RCC_OscConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002796:	f000 f9a7 	bl	8002ae8 <Error_Handler>
  }
<<<<<<< HEAD
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800279a:	230f      	movs	r3, #15
 800279c:	617b      	str	r3, [r7, #20]
=======
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002672:	230f      	movs	r3, #15
 8002674:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
>>>>>>> parent of d4df473 (optimizing PID)
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	2102      	movs	r1, #2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f820 	bl	80017fc <HAL_RCC_ClockConfig>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80027c2:	f000 f991 	bl	8002ae8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80027c6:	2302      	movs	r3, #2
 80027c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80027ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff f9ae 	bl	8001b34 <HAL_RCCEx_PeriphCLKConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80027de:	f000 f983 	bl	8002ae8 <Error_Handler>
  }
}
 80027e2:	bf00      	nop
 80027e4:	3750      	adds	r7, #80	; 0x50
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

<<<<<<< HEAD
080027ec <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
=======
080026c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
>>>>>>> parent of d4df473 (optimizing PID)
static void MX_ADC1_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80027fc:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <MX_ADC1_Init+0xec>)
 80027fe:	4a37      	ldr	r2, [pc, #220]	; (80028dc <MX_ADC1_Init+0xf0>)
 8002800:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002802:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <MX_ADC1_Init+0xec>)
 8002804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002808:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800280a:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <MX_ADC1_Init+0xec>)
 800280c:	2201      	movs	r2, #1
 800280e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002810:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <MX_ADC1_Init+0xec>)
 8002812:	2200      	movs	r2, #0
 8002814:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002816:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <MX_ADC1_Init+0xec>)
 8002818:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800281c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800281e:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <MX_ADC1_Init+0xec>)
 8002820:	2200      	movs	r2, #0
 8002822:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8002824:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <MX_ADC1_Init+0xec>)
 8002826:	2205      	movs	r2, #5
 8002828:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800282a:	482b      	ldr	r0, [pc, #172]	; (80028d8 <MX_ADC1_Init+0xec>)
 800282c:	f7fd fd12 	bl	8000254 <HAL_ADC_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002836:	f000 f957 	bl	8002ae8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800283e:	2301      	movs	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4823      	ldr	r0, [pc, #140]	; (80028d8 <MX_ADC1_Init+0xec>)
 800284c:	f7fd fed4 	bl	80005f8 <HAL_ADC_ConfigChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002856:	f000 f947 	bl	8002ae8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800285a:	2301      	movs	r3, #1
 800285c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800285e:	2302      	movs	r3, #2
 8002860:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002862:	2307      	movs	r3, #7
 8002864:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	4619      	mov	r1, r3
 800286a:	481b      	ldr	r0, [pc, #108]	; (80028d8 <MX_ADC1_Init+0xec>)
 800286c:	f7fd fec4 	bl	80005f8 <HAL_ADC_ConfigChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002876:	f000 f937 	bl	8002ae8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800287a:	2305      	movs	r3, #5
 800287c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800287e:	2303      	movs	r3, #3
 8002880:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4814      	ldr	r0, [pc, #80]	; (80028d8 <MX_ADC1_Init+0xec>)
 8002888:	f7fd feb6 	bl	80005f8 <HAL_ADC_ConfigChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002892:	f000 f929 	bl	8002ae8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002896:	2306      	movs	r3, #6
 8002898:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800289a:	2304      	movs	r3, #4
 800289c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	480d      	ldr	r0, [pc, #52]	; (80028d8 <MX_ADC1_Init+0xec>)
 80028a4:	f7fd fea8 	bl	80005f8 <HAL_ADC_ConfigChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80028ae:	f000 f91b 	bl	8002ae8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80028b2:	2309      	movs	r3, #9
 80028b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80028b6:	2305      	movs	r3, #5
 80028b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <MX_ADC1_Init+0xec>)
 80028c0:	f7fd fe9a 	bl	80005f8 <HAL_ADC_ConfigChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80028ca:	f000 f90d 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200000f4 	.word	0x200000f4
 80028dc:	40012400 	.word	0x40012400

<<<<<<< HEAD
080028e0 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
=======
080027b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
>>>>>>> parent of d4df473 (optimizing PID)
static void MX_SPI2_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <MX_SPI2_Init+0x64>)
 80028e6:	4a18      	ldr	r2, [pc, #96]	; (8002948 <MX_SPI2_Init+0x68>)
 80028e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <MX_SPI2_Init+0x64>)
 80028ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_SPI2_Init+0x64>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <MX_SPI2_Init+0x64>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <MX_SPI2_Init+0x64>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <MX_SPI2_Init+0x64>)
 8002906:	2200      	movs	r2, #0
 8002908:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <MX_SPI2_Init+0x64>)
 800290c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002910:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <MX_SPI2_Init+0x64>)
 8002914:	2200      	movs	r2, #0
 8002916:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <MX_SPI2_Init+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <MX_SPI2_Init+0x64>)
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <MX_SPI2_Init+0x64>)
 8002926:	2200      	movs	r2, #0
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <MX_SPI2_Init+0x64>)
 800292c:	220a      	movs	r2, #10
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002930:	4804      	ldr	r0, [pc, #16]	; (8002944 <MX_SPI2_Init+0x64>)
 8002932:	f7ff f9b5 	bl	8001ca0 <HAL_SPI_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800293c:	f000 f8d4 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	2000009c 	.word	0x2000009c
 8002948:	40003800 	.word	0x40003800

<<<<<<< HEAD
0800294c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
=======
08002824 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
>>>>>>> parent of d4df473 (optimizing PID)
static void MX_USART1_UART_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <MX_USART1_UART_Init+0x50>)
 8002954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800295c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002972:	220c      	movs	r2, #12
 8002974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <MX_USART1_UART_Init+0x4c>)
 8002984:	f7ff fc58 	bl	8002238 <HAL_UART_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800298e:	f000 f8ab 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	2000013c 	.word	0x2000013c
 800299c:	40013800 	.word	0x40013800

080029a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <MX_DMA_Init+0x38>)
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <MX_DMA_Init+0x38>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6153      	str	r3, [r2, #20]
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <MX_DMA_Init+0x38>)
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	200b      	movs	r0, #11
 80029c4:	f7fe f8e9 	bl	8000b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
<<<<<<< HEAD
 80029c8:	200b      	movs	r0, #11
 80029ca:	f7fe f902 	bl	8000bd2 <HAL_NVIC_EnableIRQ>
=======
 80028a0:	200b      	movs	r0, #11
 80028a2:	f7fe f996 	bl	8000bd2 <HAL_NVIC_EnableIRQ>

>>>>>>> parent of d4df473 (optimizing PID)
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000

<<<<<<< HEAD
080029dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
=======
080028b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
>>>>>>> parent of d4df473 (optimizing PID)
static void MX_GPIO_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4a38      	ldr	r2, [pc, #224]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 80029f6:	f043 0310 	orr.w	r3, r3, #16
 80029fa:	6193      	str	r3, [r2, #24]
 80029fc:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a32      	ldr	r2, [pc, #200]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 8002a0e:	f043 0320 	orr.w	r3, r3, #32
 8002a12:	6193      	str	r3, [r2, #24]
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6193      	str	r3, [r2, #24]
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 8002a3e:	f043 0308 	orr.w	r3, r3, #8
 8002a42:	6193      	str	r3, [r2, #24]
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <MX_GPIO_Init+0xfc>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002a50:	2200      	movs	r2, #0
 8002a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a56:	4821      	ldr	r0, [pc, #132]	; (8002adc <MX_GPIO_Init+0x100>)
 8002a58:	f7fe fc1e 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a62:	481f      	ldr	r0, [pc, #124]	; (8002ae0 <MX_GPIO_Init+0x104>)
 8002a64:	f7fe fc18 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a6e:	481d      	ldr	r0, [pc, #116]	; (8002ae4 <MX_GPIO_Init+0x108>)
 8002a70:	f7fe fc12 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 0310 	add.w	r3, r7, #16
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4813      	ldr	r0, [pc, #76]	; (8002adc <MX_GPIO_Init+0x100>)
 8002a8e:	f7fe faa9 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8002a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	480d      	ldr	r0, [pc, #52]	; (8002ae0 <MX_GPIO_Init+0x104>)
 8002aac:	f7fe fa9a 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8002ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <MX_GPIO_Init+0x108>)
 8002aca:	f7fe fa8b 	bl	8000fe4 <HAL_GPIO_Init>
=======
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	4619      	mov	r1, r3
 80029a0:	4806      	ldr	r0, [pc, #24]	; (80029bc <MX_GPIO_Init+0x108>)
 80029a2:	f7fe fb1f 	bl	8000fe4 <HAL_GPIO_Init>

>>>>>>> parent of d4df473 (optimizing PID)
}
 8002ace:	bf00      	nop
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40011000 	.word	0x40011000
 8002ae0:	40010c00 	.word	0x40010c00
 8002ae4:	40010800 	.word	0x40010800

08002ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8002af8:	2200      	movs	r2, #0
 8002afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002afe:	4802      	ldr	r0, [pc, #8]	; (8002b08 <nRF24_CSN_L+0x14>)
 8002b00:	f7fe fbca 	bl	8001298 <HAL_GPIO_WritePin>
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40010c00 	.word	0x40010c00

08002b0c <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8002b10:	2201      	movs	r2, #1
 8002b12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b16:	4802      	ldr	r0, [pc, #8]	; (8002b20 <nRF24_CSN_H+0x14>)
 8002b18:	f7fe fbbe 	bl	8001298 <HAL_GPIO_WritePin>
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40010c00 	.word	0x40010c00

08002b24 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {
 8002b2e:	f107 020f 	add.w	r2, r7, #15
 8002b32:	1df9      	adds	r1, r7, #7
 8002b34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	4806      	ldr	r0, [pc, #24]	; (8002b58 <nRF24_LL_RW+0x34>)
 8002b3e:	f7ff f933 	bl	8001da8 <HAL_SPI_TransmitReceive>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <nRF24_LL_RW+0x28>
        Error_Handler();
 8002b48:	f7ff ffce 	bl	8002ae8 <Error_Handler>
    };
    return result;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000009c 	.word	0x2000009c

08002b5c <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8002b66:	f7ff ffc5 	bl	8002af4 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffd6 	bl	8002b24 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8002b78:	20ff      	movs	r0, #255	; 0xff
 8002b7a:	f7ff ffd3 	bl	8002b24 <nRF24_LL_RW>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8002b82:	f7ff ffc3 	bl	8002b0c <nRF24_CSN_H>

	return value;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	460a      	mov	r2, r1
 8002b9a:	71fb      	strb	r3, [r7, #7]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002ba0:	f7ff ffa8 	bl	8002af4 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	2b1f      	cmp	r3, #31
 8002ba8:	d810      	bhi.n	8002bcc <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	b25b      	sxtb	r3, r3
 8002bb4:	f043 0320 	orr.w	r3, r3, #32
 8002bb8:	b25b      	sxtb	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ffb1 	bl	8002b24 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8002bc2:	79bb      	ldrb	r3, [r7, #6]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ffad 	bl	8002b24 <nRF24_LL_RW>
 8002bca:	e013      	b.n	8002bf4 <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ffa8 	bl	8002b24 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	2be1      	cmp	r3, #225	; 0xe1
 8002bd8:	d00c      	beq.n	8002bf4 <nRF24_WriteReg+0x64>
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	2be2      	cmp	r3, #226	; 0xe2
 8002bde:	d009      	beq.n	8002bf4 <nRF24_WriteReg+0x64>
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2be3      	cmp	r3, #227	; 0xe3
 8002be4:	d006      	beq.n	8002bf4 <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2bff      	cmp	r3, #255	; 0xff
 8002bea:	d003      	beq.n	8002bf4 <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 8002bec:	79bb      	ldrb	r3, [r7, #6]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ff98 	bl	8002b24 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8002bf4:	f7ff ff8a 	bl	8002b0c <nRF24_CSN_H>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	71fb      	strb	r3, [r7, #7]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002c10:	f7ff ff70 	bl	8002af4 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff84 	bl	8002b24 <nRF24_LL_RW>
	while (count--)
 8002c1c:	e007      	b.n	8002c2e <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8002c1e:	683c      	ldr	r4, [r7, #0]
 8002c20:	1c63      	adds	r3, r4, #1
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	20ff      	movs	r0, #255	; 0xff
 8002c26:	f7ff ff7d 	bl	8002b24 <nRF24_LL_RW>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	7023      	strb	r3, [r4, #0]
	while (count--)
 8002c2e:	79bb      	ldrb	r3, [r7, #6]
 8002c30:	1e5a      	subs	r2, r3, #1
 8002c32:	71ba      	strb	r2, [r7, #6]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f2      	bne.n	8002c1e <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8002c38:	f7ff ff68 	bl	8002b0c <nRF24_CSN_H>
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd90      	pop	{r4, r7, pc}

08002c44 <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002c54:	f7ff ff4e 	bl	8002af4 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff62 	bl	8002b24 <nRF24_LL_RW>
	while (count--)
 8002c60:	e006      	b.n	8002c70 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	603a      	str	r2, [r7, #0]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff ff5a 	bl	8002b24 <nRF24_LL_RW>
	while (count--)
 8002c70:	79bb      	ldrb	r3, [r7, #6]
 8002c72:	1e5a      	subs	r2, r3, #1
 8002c74:	71ba      	strb	r2, [r7, #6]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f3      	bne.n	8002c62 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8002c7a:	f7ff ff47 	bl	8002b0c <nRF24_CSN_H>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 8002c8a:	2108      	movs	r1, #8
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7ff ff7f 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 8002c92:	213f      	movs	r1, #63	; 0x3f
 8002c94:	2001      	movs	r0, #1
 8002c96:	f7ff ff7b 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 8002c9a:	2103      	movs	r1, #3
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f7ff ff77 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 8002ca2:	2103      	movs	r1, #3
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	f7ff ff73 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 8002caa:	2103      	movs	r1, #3
 8002cac:	2004      	movs	r0, #4
 8002cae:	f7ff ff6f 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	2005      	movs	r0, #5
 8002cb6:	f7ff ff6b 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 8002cba:	210e      	movs	r1, #14
 8002cbc:	2006      	movs	r0, #6
 8002cbe:	f7ff ff67 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2007      	movs	r0, #7
 8002cc6:	f7ff ff63 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	2011      	movs	r0, #17
 8002cce:	f7ff ff5f 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2012      	movs	r0, #18
 8002cd6:	f7ff ff5b 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2013      	movs	r0, #19
 8002cde:	f7ff ff57 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	2014      	movs	r0, #20
 8002ce6:	f7ff ff53 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002cea:	2100      	movs	r1, #0
 8002cec:	2015      	movs	r0, #21
 8002cee:	f7ff ff4f 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2016      	movs	r0, #22
 8002cf6:	f7ff ff4b 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	201c      	movs	r0, #28
 8002cfe:	f7ff ff47 	bl	8002b90 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8002d02:	2100      	movs	r1, #0
 8002d04:	201d      	movs	r0, #29
 8002d06:	f7ff ff43 	bl	8002b90 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 8002d0a:	f000 f995 	bl	8003038 <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 8002d0e:	f000 f98b 	bl	8003028 <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 8002d12:	f000 f999 	bl	8003048 <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 8002d16:	f7ff fef9 	bl	8002b0c <nRF24_CSN_H>
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8002d26:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <nRF24_Check+0x58>)
 8002d28:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	2030      	movs	r0, #48	; 0x30
 8002d30:	f7ff ff88 	bl	8002c44 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8002d34:	463b      	mov	r3, r7
 8002d36:	2205      	movs	r2, #5
 8002d38:	4619      	mov	r1, r3
 8002d3a:	2010      	movs	r0, #16
 8002d3c:	f7ff ff60 	bl	8002c00 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	e010      	b.n	8002d68 <nRF24_Check+0x48>
	{
		if (rxbuf[i] != *ptr++)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	f107 0210 	add.w	r2, r7, #16
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1c59      	adds	r1, r3, #1
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <nRF24_Check+0x42>
			return 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e006      	b.n	8002d70 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	3301      	adds	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d9eb      	bls.n	8002d46 <nRF24_Check+0x26>
	}

	return 1;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	080049b8 	.word	0x080049b8

08002d7c <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7ff fee8 	bl	8002b5c <nRF24_ReadReg>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d104      	bne.n	8002da0 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e003      	b.n	8002da8 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	f023 0302 	bic.w	r3, r3, #2
 8002da6:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	4619      	mov	r1, r3
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7ff feef 	bl	8002b90 <nRF24_WriteReg>
}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7ff fec9 	bl	8002b5c <nRF24_ReadReg>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	b25a      	sxtb	r2, r3
 8002de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	4619      	mov	r1, r3
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7ff fece 	bl	8002b90 <nRF24_WriteReg>
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7ff fea8 	bl	8002b5c <nRF24_ReadReg>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	f023 030c 	bic.w	r3, r3, #12
 8002e16:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	b25a      	sxtb	r2, r3
 8002e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b25b      	sxtb	r3, r3
 8002e2a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7ff fead 	bl	8002b90 <nRF24_WriteReg>
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	2005      	movs	r0, #5
 8002e4e:	f7ff fe9f 	bl	8002b90 <nRF24_WriteReg>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <nRF24_SetAutoRetr>:
// input:
//   ard -Thời gian giữa những lần truyền lại
//   arc - Số lần truyện lại (tối đa 15)
// note: 0x00 có nghĩa là tắt chức năng truyền lại
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	460a      	mov	r2, r1
 8002e64:	71fb      	strb	r3, [r7, #7]
 8002e66:	4613      	mov	r3, r2
 8002e68:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	b25a      	sxtb	r2, r3
 8002e70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4619      	mov	r1, r3
 8002e82:	2004      	movs	r0, #4
 8002e84:	f7ff fe84 	bl	8002b90 <nRF24_WriteReg>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	3b02      	subs	r3, #2
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	2003      	movs	r0, #3
 8002ea4:	f7ff fe74 	bl	8002b90 <nRF24_WriteReg>
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d83e      	bhi.n	8002f40 <nRF24_SetAddr+0x90>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <nRF24_SetAddr+0x18>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002ee5 	.word	0x08002ee5
 8002ecc:	08002ee5 	.word	0x08002ee5
 8002ed0:	08002f2d 	.word	0x08002f2d
 8002ed4:	08002f2d 	.word	0x08002f2d
 8002ed8:	08002f2d 	.word	0x08002f2d
 8002edc:	08002f2d 	.word	0x08002f2d
 8002ee0:	08002ee5 	.word	0x08002ee5
	{
	case nRF24_PIPETX:
	case nRF24_PIPE0:
	case nRF24_PIPE1:
		// Lấy độ dài address
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8002ee4:	2003      	movs	r0, #3
 8002ee6:	f7ff fe39 	bl	8002b5c <nRF24_ReadReg>
 8002eea:	4603      	mov	r3, r0
 8002eec:	3301      	adds	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]

		addr += addr_width;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 8002ef8:	f7ff fdfc 	bl	8002af4 <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <nRF24_SetAddr+0x9c>)
 8002f00:	5cd3      	ldrb	r3, [r2, r3]
 8002f02:	f043 0320 	orr.w	r3, r3, #32
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fe0b 	bl	8002b24 <nRF24_LL_RW>
		do
		{
			nRF24_LL_RW(*addr--);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	603a      	str	r2, [r7, #0]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fe04 	bl	8002b24 <nRF24_LL_RW>
		} while (addr_width--);
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	1e5a      	subs	r2, r3, #1
 8002f20:	73fa      	strb	r2, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f3      	bne.n	8002f0e <nRF24_SetAddr+0x5e>
		nRF24_CSN_H();
 8002f26:	f7ff fdf1 	bl	8002b0c <nRF24_CSN_H>
		break;
 8002f2a:	e00a      	b.n	8002f42 <nRF24_SetAddr+0x92>
	case nRF24_PIPE2:
	case nRF24_PIPE3:
	case nRF24_PIPE4:
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <nRF24_SetAddr+0x9c>)
 8002f30:	5cd2      	ldrb	r2, [r2, r3]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f7ff fe29 	bl	8002b90 <nRF24_WriteReg>
		break;
 8002f3e:	e000      	b.n	8002f42 <nRF24_SetAddr+0x92>
	default:
		break;
 8002f40:	bf00      	nop
	}
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	08004bc8 	.word	0x08004bc8

08002f50 <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002f5a:	2006      	movs	r0, #6
 8002f5c:	f7ff fdfe 	bl	8002b5c <nRF24_ReadReg>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	f023 0306 	bic.w	r3, r3, #6
 8002f6a:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	4619      	mov	r1, r3
 8002f78:	2006      	movs	r0, #6
 8002f7a:	f7ff fe09 	bl	8002b90 <nRF24_WriteReg>
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002f90:	2006      	movs	r0, #6
 8002f92:	f7ff fde3 	bl	8002b5c <nRF24_ReadReg>
 8002f96:	4603      	mov	r3, r0
 8002f98:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002fa0:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	4619      	mov	r1, r3
 8002fae:	2006      	movs	r0, #6
 8002fb0:	f7ff fdee 	bl	8002b90 <nRF24_WriteReg>
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <nRF24_EnableAA>:
 * @brief CHo phép auto retransmit cho từng pipe
 *
 * @param pipe pipe cần cấu hình
 */
void nRF24_EnableAA(uint8_t pipe)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f7ff fdc8 	bl	8002b5c <nRF24_ReadReg>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	b25a      	sxtb	r2, r3
 8002fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	b25b      	sxtb	r3, r3
 8002fe2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7ff fdd1 	bl	8002b90 <nRF24_WriteReg>
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <nRF24_GetStatus>:
 * @brief lấy giá trị STATUS register
 *
 * @return uint8_t Giá trị của STATUS
 */
uint8_t nRF24_GetStatus(void)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8002ffa:	2007      	movs	r0, #7
 8002ffc:	f7ff fdae 	bl	8002b5c <nRF24_ReadReg>
 8003000:	4603      	mov	r3, r0
}
 8003002:	4618      	mov	r0, r3
 8003004:	bd80      	pop	{r7, pc}

08003006 <nRF24_ResetPLOS>:
/**
 * @brief Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
 *
 */
void nRF24_ResetPLOS(void)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 800300c:	2005      	movs	r0, #5
 800300e:	f7ff fda5 	bl	8002b5c <nRF24_ReadReg>
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	4619      	mov	r1, r3
 800301a:	2005      	movs	r0, #5
 800301c:	f7ff fdb8 	bl	8002b90 <nRF24_WriteReg>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800302c:	21ff      	movs	r1, #255	; 0xff
 800302e:	20e1      	movs	r0, #225	; 0xe1
 8003030:	f7ff fdae 	bl	8002b90 <nRF24_WriteReg>
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800303c:	21ff      	movs	r1, #255	; 0xff
 800303e:	20e2      	movs	r0, #226	; 0xe2
 8003040:	f7ff fda6 	bl	8002b90 <nRF24_WriteReg>
}
 8003044:	bf00      	nop
 8003046:	bd80      	pop	{r7, pc}

08003048 <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 800304e:	2007      	movs	r0, #7
 8003050:	f7ff fd84 	bl	8002b5c <nRF24_ReadReg>
 8003054:	4603      	mov	r3, r0
 8003056:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800305e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	4619      	mov	r1, r3
 8003064:	2007      	movs	r0, #7
 8003066:	f7ff fd93 	bl	8002b90 <nRF24_WriteReg>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <nRF24_WritePayload>:
 *
 * @param pBuf con trỏ , trỏ tới buffer chứa paylaod
 * @param length độ dài của paylaod
 */
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	461a      	mov	r2, r3
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	20a0      	movs	r0, #160	; 0xa0
 8003086:	f7ff fddd 	bl	8002c44 <nRF24_WriteMBReg>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8003098:	2200      	movs	r2, #0
 800309a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800309e:	4802      	ldr	r0, [pc, #8]	; (80030a8 <nRF24_CE_L+0x14>)
 80030a0:	f7fe f8fa 	bl	8001298 <HAL_GPIO_WritePin>
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40010800 	.word	0x40010800

080030ac <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80030b0:	2201      	movs	r2, #1
 80030b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030b6:	4802      	ldr	r0, [pc, #8]	; (80030c0 <nRF24_CE_H+0x14>)
 80030b8:	f7fe f8ee 	bl	8001298 <HAL_GPIO_WritePin>
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40010800 	.word	0x40010800

080030c4 <Delay_ms>:


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7fd f89f 	bl	8000210 <HAL_Delay>
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <Toggle_LED>:
uint16_t len;
extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80030e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <Toggle_LED+0x14>)
 80030e6:	f7fe f8ef 	bl	80012c8 <HAL_GPIO_TogglePin>
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40011000 	.word	0x40011000

080030f4 <convert_to_us>:

NRF_Packet payload_packet;
uint8_t payload_length = sizeof(payload_packet);

uint32_t convert_to_us(uint32_t val, uint32_t min, uint32_t middle, uint32_t max)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
    if (val > max)
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d901      	bls.n	800310e <convert_to_us+0x1a>
        val = max;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	60fb      	str	r3, [r7, #12]
    if (val < min)
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	d201      	bcs.n	800311a <convert_to_us+0x26>
        val = min;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	60fb      	str	r3, [r7, #12]
    if (val < middle)
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	429a      	cmp	r2, r3
 8003120:	d20e      	bcs.n	8003140 <convert_to_us+0x4c>
        return (val - min) * (1500 - 1000) / (middle - min) + 1000;
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800312c:	fb02 f203 	mul.w	r2, r2, r3
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	1acb      	subs	r3, r1, r3
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800313e:	e00d      	b.n	800315c <convert_to_us+0x68>
    else
        return (val - middle) * (2000 - 1500) / (max - middle) + 1500;
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800314a:	fb02 f203 	mul.w	r2, r2, r3
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	1acb      	subs	r3, r1, r3
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
	...

08003168 <nRF24_TransmitPacket>:
} nRF24_TXResult;

// Length of received payload

nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	70fb      	strb	r3, [r7, #3]
    volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <nRF24_TransmitPacket+0x80>)
 8003176:	60bb      	str	r3, [r7, #8]
    uint8_t status;
    nRF24_CE_L();
 8003178:	f7ff ff8c 	bl	8003094 <nRF24_CE_L>
    nRF24_WritePayload(pBuf, length);
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ff76 	bl	8003072 <nRF24_WritePayload>
    nRF24_CE_H();
 8003186:	f7ff ff91 	bl	80030ac <nRF24_CE_H>

    do
    {
        status = nRF24_GetStatus();
 800318a:	f7ff ff34 	bl	8002ff6 <nRF24_GetStatus>
 800318e:	4603      	mov	r3, r0
 8003190:	73fb      	strb	r3, [r7, #15]
        if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT))
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <nRF24_TransmitPacket+0x40>
        {
            break;
        }
    } while (wait--);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	1e5a      	subs	r2, r3, #1
 80031a0:	60ba      	str	r2, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f1      	bne.n	800318a <nRF24_TransmitPacket+0x22>
 80031a6:	e000      	b.n	80031aa <nRF24_TransmitPacket+0x42>
            break;
 80031a8:	bf00      	nop
    nRF24_CE_L();
 80031aa:	f7ff ff73 	bl	8003094 <nRF24_CE_L>

    if (!wait)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <nRF24_TransmitPacket+0x50>
        return nRF24_TX_TIMEOUT;
 80031b4:	2302      	movs	r3, #2
 80031b6:	e012      	b.n	80031de <nRF24_TransmitPacket+0x76>

    nRF24_ClearIRQFlags();
 80031b8:	f7ff ff46 	bl	8003048 <nRF24_ClearIRQFlags>

    if (status & nRF24_FLAG_MAX_RT)
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <nRF24_TransmitPacket+0x62>
        return nRF24_TX_MAXRT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e009      	b.n	80031de <nRF24_TransmitPacket+0x76>

    if (status & nRF24_FLAG_TX_DS)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <nRF24_TransmitPacket+0x70>
        return nRF24_TX_SUCCESS;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e002      	b.n	80031de <nRF24_TransmitPacket+0x76>

    nRF24_FlushTX();
 80031d8:	f7ff ff26 	bl	8003028 <nRF24_FlushTX>

    return nRF24_TX_ERROR;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	000fffff 	.word	0x000fffff

080031ec <reset_controller>:
void reset_controller(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
    payload_packet.throttle = 0;
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <reset_controller+0x30>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    payload_packet.yaw = 127;
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <reset_controller+0x30>)
 80031f8:	227f      	movs	r2, #127	; 0x7f
 80031fa:	605a      	str	r2, [r3, #4]
    payload_packet.pitch = 127;
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <reset_controller+0x30>)
 80031fe:	227f      	movs	r2, #127	; 0x7f
 8003200:	609a      	str	r2, [r3, #8]
    payload_packet.roll = 127;
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <reset_controller+0x30>)
 8003204:	227f      	movs	r2, #127	; 0x7f
 8003206:	60da      	str	r2, [r3, #12]
    payload_packet.button = 0;
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <reset_controller+0x30>)
 800320a:	2200      	movs	r2, #0
 800320c:	611a      	str	r2, [r3, #16]
    payload_packet.button_1 = 0;
 800320e:	4b03      	ldr	r3, [pc, #12]	; (800321c <reset_controller+0x30>)
 8003210:	2200      	movs	r2, #0
 8003212:	615a      	str	r2, [r3, #20]
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	20000124 	.word	0x20000124

08003220 <runRadio>:

#endif // DEMO_TX_

int runRadio(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
#if (DEBUG_FC)
    printf("\r\nSTM32 is online.\r\n");
#endif // debug
    nRF24_CE_L();
 8003226:	f7ff ff35 	bl	8003094 <nRF24_CE_L>
#if (DEBUG_FC)
    printf("nRF24L01+ check: ");
#endif
    if (!nRF24_Check())
 800322a:	f7ff fd79 	bl	8002d20 <nRF24_Check>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <runRadio+0x20>
    {
        while (1)
        {
            Toggle_LED();
 8003234:	f7ff ff52 	bl	80030dc <Toggle_LED>
            Delay_ms(50);
 8003238:	2032      	movs	r0, #50	; 0x32
 800323a:	f7ff ff43 	bl	80030c4 <Delay_ms>
            Toggle_LED();
 800323e:	e7f9      	b.n	8003234 <runRadio+0x14>
#if (DEBUG_FC)
            printf("FAIL\r\n");
#endif
        }
    }
    nRF24_Init();
 8003240:	f7ff fd21 	bl	8002c86 <nRF24_Init>

    /***************************************************************************/

#if (TX_SINGLE)

    nRF24_SetRFChannel(40);
 8003244:	2028      	movs	r0, #40	; 0x28
 8003246:	f7ff fdfa 	bl	8002e3e <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 800324a:	2008      	movs	r0, #8
 800324c:	f7ff fe9b 	bl	8002f86 <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8003250:	200c      	movs	r0, #12
 8003252:	f7ff fdd3 	bl	8002dfc <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 8003256:	2003      	movs	r0, #3
 8003258:	f7ff fe1a 	bl	8002e90 <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 800325c:	493c      	ldr	r1, [pc, #240]	; (8003350 <runRadio+0x130>)
 800325e:	2006      	movs	r0, #6
 8003260:	f7ff fe26 	bl	8002eb0 <nRF24_SetAddr>
    nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR);
 8003264:	493a      	ldr	r1, [pc, #232]	; (8003350 <runRadio+0x130>)
 8003266:	2000      	movs	r0, #0
 8003268:	f7ff fe22 	bl	8002eb0 <nRF24_SetAddr>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 800326c:	2006      	movs	r0, #6
 800326e:	f7ff fe6f 	bl	8002f50 <nRF24_SetTXPower>
    nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 8003272:	210a      	movs	r1, #10
 8003274:	2009      	movs	r0, #9
 8003276:	f7ff fdf0 	bl	8002e5a <nRF24_SetAutoRetr>
    nRF24_EnableAA(nRF24_PIPE0);
 800327a:	2000      	movs	r0, #0
 800327c:	f7ff fe9e 	bl	8002fbc <nRF24_EnableAA>
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8003280:	2000      	movs	r0, #0
 8003282:	f7ff fd9a 	bl	8002dba <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 8003286:	f7ff fedf 	bl	8003048 <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 800328a:	2002      	movs	r0, #2
 800328c:	f7ff fd76 	bl	8002d7c <nRF24_SetPowerMode>

    // payload_length = sizeof(payload_packet);
    reset_controller();
 8003290:	f7ff ffac 	bl	80031ec <reset_controller>
    while (1)
    {

        payload_packet.throttle = convert_to_us(value[0], 700, 1697, 4095);
 8003294:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <runRadio+0x134>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	f640 73ff 	movw	r3, #4095	; 0xfff
 800329c:	f240 62a1 	movw	r2, #1697	; 0x6a1
 80032a0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80032a4:	f7ff ff26 	bl	80030f4 <convert_to_us>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <runRadio+0x138>)
 80032ac:	601a      	str	r2, [r3, #0]
        payload_packet.roll = convert_to_us(value[1], 800, 2530, 4095);
 80032ae:	4b29      	ldr	r3, [pc, #164]	; (8003354 <runRadio+0x134>)
 80032b0:	6858      	ldr	r0, [r3, #4]
 80032b2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80032b6:	f640 12e2 	movw	r2, #2530	; 0x9e2
 80032ba:	f44f 7148 	mov.w	r1, #800	; 0x320
 80032be:	f7ff ff19 	bl	80030f4 <convert_to_us>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <runRadio+0x138>)
 80032c6:	60da      	str	r2, [r3, #12]
        payload_packet.pitch = convert_to_us(value[2], 250, 2370, 4095);
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <runRadio+0x134>)
 80032ca:	6898      	ldr	r0, [r3, #8]
 80032cc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80032d0:	f640 1242 	movw	r2, #2370	; 0x942
 80032d4:	21fa      	movs	r1, #250	; 0xfa
 80032d6:	f7ff ff0d 	bl	80030f4 <convert_to_us>
 80032da:	4602      	mov	r2, r0
 80032dc:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <runRadio+0x138>)
 80032de:	609a      	str	r2, [r3, #8]
        payload_packet.yaw = convert_to_us(value[3], 0, 2570, 4095);
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <runRadio+0x134>)
 80032e2:	68d8      	ldr	r0, [r3, #12]
 80032e4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80032e8:	f640 220a 	movw	r2, #2570	; 0xa0a
 80032ec:	2100      	movs	r1, #0
 80032ee:	f7ff ff01 	bl	80030f4 <convert_to_us>
 80032f2:	4602      	mov	r2, r0
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <runRadio+0x138>)
 80032f6:	605a      	str	r2, [r3, #4]
#if (DEBUG_FC)
<<<<<<< HEAD
        printf("value: %ld  %ld  %ld  %ld\n", payload_packet.throttle, payload_packet.roll, payload_packet.pitch, payload_packet.yaw);
        printf("value: %ld  %ld  %ld  %ld\n", value[0], value[1], value[2], value[3]);
=======
       printf("value: %ld  %ld  %ld  %ld\n", payload_packet.throttle, payload_packet.roll, payload_packet.pitch, payload_packet.yaw);
 80031e8:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <runRadio+0x16c>)
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <runRadio+0x16c>)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <runRadio+0x16c>)
 80031f2:	6898      	ldr	r0, [r3, #8]
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <runRadio+0x16c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	4603      	mov	r3, r0
 80031fc:	481a      	ldr	r0, [pc, #104]	; (8003268 <runRadio+0x170>)
 80031fe:	f000 fa8d 	bl	800371c <iprintf>
       printf("value: %ld  %ld  %ld  %ld\n", value[0], value[1], value[2], value[3]);
 8003202:	4b17      	ldr	r3, [pc, #92]	; (8003260 <runRadio+0x168>)
 8003204:	6819      	ldr	r1, [r3, #0]
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <runRadio+0x168>)
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <runRadio+0x168>)
 800320c:	6898      	ldr	r0, [r3, #8]
 800320e:	4b14      	ldr	r3, [pc, #80]	; (8003260 <runRadio+0x168>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	4603      	mov	r3, r0
 8003216:	4814      	ldr	r0, [pc, #80]	; (8003268 <runRadio+0x170>)
 8003218:	f000 fa80 	bl	800371c <iprintf>
>>>>>>> parent of d4df473 (optimizing PID)
#endif // debug

        nRF24_TXResult result = nRF24_TransmitPacket((uint8_t *)&payload_packet, payload_length);
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <runRadio+0x13c>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4816      	ldr	r0, [pc, #88]	; (8003358 <runRadio+0x138>)
 8003300:	f7ff ff32 	bl	8003168 <nRF24_TransmitPacket>
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]

        switch (result)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d005      	beq.n	800331a <runRadio+0xfa>
 800330e:	2b03      	cmp	r3, #3
 8003310:	d000      	beq.n	8003314 <runRadio+0xf4>
            nRF24_ResetPLOS();
            break;
        case nRF24_TX_TIMEOUT:
        default:
            // todo: Bị lỗi khi truyền đi
            break;
 8003312:	e003      	b.n	800331c <runRadio+0xfc>
            nRF24_ResetPLOS();
 8003314:	f7ff fe77 	bl	8003006 <nRF24_ResetPLOS>
            break;
 8003318:	e000      	b.n	800331c <runRadio+0xfc>
            break;
 800331a:	bf00      	nop
        }

        sprintf((char*)data,"%d%d", (uint16_t)payload_packet.throttle, (uint16_t)payload_packet.roll);
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <runRadio+0x138>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <runRadio+0x138>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	b29b      	uxth	r3, r3
 800332a:	490d      	ldr	r1, [pc, #52]	; (8003360 <runRadio+0x140>)
 800332c:	480d      	ldr	r0, [pc, #52]	; (8003364 <runRadio+0x144>)
 800332e:	f000 fa8f 	bl	8003850 <siprintf>
        SendFrameData(data, FRAME_DATA_TX, pdest,&len );
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <runRadio+0x148>)
 8003334:	4a0d      	ldr	r2, [pc, #52]	; (800336c <runRadio+0x14c>)
 8003336:	2108      	movs	r1, #8
 8003338:	480a      	ldr	r0, [pc, #40]	; (8003364 <runRadio+0x144>)
 800333a:	f7ff f955 	bl	80025e8 <SendFrameData>
        HAL_UART_Transmit(&huart1, pdest, len, 1000);
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <runRadio+0x148>)
 8003340:	881a      	ldrh	r2, [r3, #0]
 8003342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003346:	4909      	ldr	r1, [pc, #36]	; (800336c <runRadio+0x14c>)
 8003348:	4809      	ldr	r0, [pc, #36]	; (8003370 <runRadio+0x150>)
 800334a:	f7fe ffc2 	bl	80022d2 <HAL_UART_Transmit>
    {
 800334e:	e7a1      	b.n	8003294 <runRadio+0x74>
 8003350:	08004bd0 	.word	0x08004bd0
 8003354:	200001c4 	.word	0x200001c4
 8003358:	20000124 	.word	0x20000124
 800335c:	20000005 	.word	0x20000005
 8003360:	080049c0 	.word	0x080049c0
 8003364:	200001d8 	.word	0x200001d8
 8003368:	200001f4 	.word	0x200001f4
 800336c:	200001e0 	.word	0x200001e0
 8003370:	2000013c 	.word	0x2000013c

08003374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <HAL_MspInit+0x5c>)
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <HAL_MspInit+0x5c>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	6193      	str	r3, [r2, #24]
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_MspInit+0x5c>)
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <HAL_MspInit+0x5c>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4a0e      	ldr	r2, [pc, #56]	; (80033d0 <HAL_MspInit+0x5c>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	61d3      	str	r3, [r2, #28]
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <HAL_MspInit+0x5c>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_MspInit+0x60>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <HAL_MspInit+0x60>)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40010000 	.word	0x40010000

080033d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 0318 	add.w	r3, r7, #24
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a33      	ldr	r2, [pc, #204]	; (80034c0 <HAL_ADC_MspInit+0xe8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d15f      	bne.n	80034b8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033f8:	4b32      	ldr	r3, [pc, #200]	; (80034c4 <HAL_ADC_MspInit+0xec>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	4a31      	ldr	r2, [pc, #196]	; (80034c4 <HAL_ADC_MspInit+0xec>)
 80033fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003402:	6193      	str	r3, [r2, #24]
 8003404:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <HAL_ADC_MspInit+0xec>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003410:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <HAL_ADC_MspInit+0xec>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4a2b      	ldr	r2, [pc, #172]	; (80034c4 <HAL_ADC_MspInit+0xec>)
 8003416:	f043 0304 	orr.w	r3, r3, #4
 800341a:	6193      	str	r3, [r2, #24]
 800341c:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <HAL_ADC_MspInit+0xec>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003428:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <HAL_ADC_MspInit+0xec>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	4a25      	ldr	r2, [pc, #148]	; (80034c4 <HAL_ADC_MspInit+0xec>)
 800342e:	f043 0308 	orr.w	r3, r3, #8
 8003432:	6193      	str	r3, [r2, #24]
 8003434:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_ADC_MspInit+0xec>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6;
 8003440:	2363      	movs	r3, #99	; 0x63
 8003442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003444:	2303      	movs	r3, #3
 8003446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003448:	f107 0318 	add.w	r3, r7, #24
 800344c:	4619      	mov	r1, r3
 800344e:	481e      	ldr	r0, [pc, #120]	; (80034c8 <HAL_ADC_MspInit+0xf0>)
 8003450:	f7fd fdc8 	bl	8000fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003454:	2302      	movs	r3, #2
 8003456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003458:	2303      	movs	r3, #3
 800345a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f107 0318 	add.w	r3, r7, #24
 8003460:	4619      	mov	r1, r3
 8003462:	481a      	ldr	r0, [pc, #104]	; (80034cc <HAL_ADC_MspInit+0xf4>)
 8003464:	f7fd fdbe 	bl	8000fe4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 800346a:	4a1a      	ldr	r2, [pc, #104]	; (80034d4 <HAL_ADC_MspInit+0xfc>)
 800346c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 8003470:	2200      	movs	r2, #0
 8003472:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003480:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 8003482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003486:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 800348a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800348e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 8003492:	2220      	movs	r2, #32
 8003494:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 8003498:	2200      	movs	r2, #0
 800349a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800349c:	480c      	ldr	r0, [pc, #48]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 800349e:	f7fd fbb3 	bl	8000c08 <HAL_DMA_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80034a8:	f7ff fb1e 	bl	8002ae8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 80034b0:	621a      	str	r2, [r3, #32]
 80034b2:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <HAL_ADC_MspInit+0xf8>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034b8:	bf00      	nop
 80034ba:	3728      	adds	r7, #40	; 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40012400 	.word	0x40012400
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40010800 	.word	0x40010800
 80034cc:	40010c00 	.word	0x40010c00
 80034d0:	20000180 	.word	0x20000180
 80034d4:	40020008 	.word	0x40020008

080034d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0310 	add.w	r3, r7, #16
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <HAL_SPI_MspInit+0x8c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d131      	bne.n	800355c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_SPI_MspInit+0x90>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_SPI_MspInit+0x90>)
 80034fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003502:	61d3      	str	r3, [r2, #28]
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_SPI_MspInit+0x90>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_SPI_MspInit+0x90>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <HAL_SPI_MspInit+0x90>)
 8003516:	f043 0308 	orr.w	r3, r3, #8
 800351a:	6193      	str	r3, [r2, #24]
 800351c:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_SPI_MspInit+0x90>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 8003528:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800352c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003532:	2303      	movs	r3, #3
 8003534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003536:	f107 0310 	add.w	r3, r7, #16
 800353a:	4619      	mov	r1, r3
 800353c:	480b      	ldr	r0, [pc, #44]	; (800356c <HAL_SPI_MspInit+0x94>)
 800353e:	f7fd fd51 	bl	8000fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8003542:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	4619      	mov	r1, r3
 8003556:	4805      	ldr	r0, [pc, #20]	; (800356c <HAL_SPI_MspInit+0x94>)
 8003558:	f7fd fd44 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800355c:	bf00      	nop
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40003800 	.word	0x40003800
 8003568:	40021000 	.word	0x40021000
 800356c:	40010c00 	.word	0x40010c00

08003570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 0310 	add.w	r3, r7, #16
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <HAL_UART_MspInit+0x8c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d131      	bne.n	80035f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_UART_MspInit+0x90>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <HAL_UART_MspInit+0x90>)
 8003596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800359a:	6193      	str	r3, [r2, #24]
 800359c:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_UART_MspInit+0x90>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a8:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_UART_MspInit+0x90>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <HAL_UART_MspInit+0x90>)
 80035ae:	f043 0304 	orr.w	r3, r3, #4
 80035b2:	6193      	str	r3, [r2, #24]
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_UART_MspInit+0x90>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ce:	f107 0310 	add.w	r3, r7, #16
 80035d2:	4619      	mov	r1, r3
 80035d4:	480b      	ldr	r0, [pc, #44]	; (8003604 <HAL_UART_MspInit+0x94>)
 80035d6:	f7fd fd05 	bl	8000fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	4619      	mov	r1, r3
 80035ee:	4805      	ldr	r0, [pc, #20]	; (8003604 <HAL_UART_MspInit+0x94>)
 80035f0:	f7fd fcf8 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035f4:	bf00      	nop
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40013800 	.word	0x40013800
 8003600:	40021000 	.word	0x40021000
 8003604:	40010800 	.word	0x40010800

08003608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003618:	e7fe      	b.n	8003618 <HardFault_Handler+0x4>

0800361a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800361e:	e7fe      	b.n	800361e <MemManage_Handler+0x4>

08003620 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003624:	e7fe      	b.n	8003624 <BusFault_Handler+0x4>

08003626 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800362a:	e7fe      	b.n	800362a <UsageFault_Handler+0x4>

0800362c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003654:	f7fc fdc0 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003658:	bf00      	nop
 800365a:	bd80      	pop	{r7, pc}

0800365c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <DMA1_Channel1_IRQHandler+0x10>)
 8003662:	f7fd fb8b 	bl	8000d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000180 	.word	0x20000180

08003670 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e00a      	b.n	8003698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003682:	f3af 8000 	nop.w
 8003686:	4601      	mov	r1, r0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	60ba      	str	r2, [r7, #8]
 800368e:	b2ca      	uxtb	r2, r1
 8003690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	3301      	adds	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	429a      	cmp	r2, r3
 800369e:	dbf0      	blt.n	8003682 <_read+0x12>
	}

return len;
 80036a0:	687b      	ldr	r3, [r7, #4]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
	return -1;
 80036b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036d0:	605a      	str	r2, [r3, #4]
	return 0;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <_isatty>:

int _isatty(int file)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
	return 1;
 80036e6:	2301      	movs	r3, #1
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
	return 0;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
	...

0800370c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <_sbrk+0x50>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <_sbrk+0x16>
		heap_end = &end;
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <_sbrk+0x50>)
 800371e:	4a10      	ldr	r2, [pc, #64]	; (8003760 <_sbrk+0x54>)
 8003720:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <_sbrk+0x50>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <_sbrk+0x50>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4413      	add	r3, r2
 8003730:	466a      	mov	r2, sp
 8003732:	4293      	cmp	r3, r2
 8003734:	d907      	bls.n	8003746 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003736:	f000 f841 	bl	80037bc <__errno>
 800373a:	4602      	mov	r2, r0
 800373c:	230c      	movs	r3, #12
 800373e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	e006      	b.n	8003754 <_sbrk+0x48>
	}

	heap_end += incr;
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <_sbrk+0x50>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	4a03      	ldr	r2, [pc, #12]	; (800375c <_sbrk+0x50>)
 8003750:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	2000008c 	.word	0x2000008c
 8003760:	20000200 	.word	0x20000200

08003764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003770:	480c      	ldr	r0, [pc, #48]	; (80037a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003772:	490d      	ldr	r1, [pc, #52]	; (80037a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003774:	4a0d      	ldr	r2, [pc, #52]	; (80037ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003778:	e002      	b.n	8003780 <LoopCopyDataInit>

0800377a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800377a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800377c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800377e:	3304      	adds	r3, #4

08003780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003784:	d3f9      	bcc.n	800377a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003788:	4c0a      	ldr	r4, [pc, #40]	; (80037b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800378c:	e001      	b.n	8003792 <LoopFillZerobss>

0800378e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800378e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003790:	3204      	adds	r2, #4

08003792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003794:	d3fb      	bcc.n	800378e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003796:	f7ff ffe5 	bl	8003764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800379a:	f000 f815 	bl	80037c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800379e:	f7fe ff9d 	bl	80026dc <main>
  bx lr
 80037a2:	4770      	bx	lr
  ldr r0, =_sdata
 80037a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80037ac:	08004c8c 	.word	0x08004c8c
  ldr r2, =_sbss
 80037b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80037b4:	200001fc 	.word	0x200001fc

080037b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037b8:	e7fe      	b.n	80037b8 <ADC1_2_IRQHandler>
	...

080037bc <__errno>:
 80037bc:	4b01      	ldr	r3, [pc, #4]	; (80037c4 <__errno+0x8>)
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	2000000c 	.word	0x2000000c

080037c8 <__libc_init_array>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	2500      	movs	r5, #0
 80037cc:	4e0c      	ldr	r6, [pc, #48]	; (8003800 <__libc_init_array+0x38>)
 80037ce:	4c0d      	ldr	r4, [pc, #52]	; (8003804 <__libc_init_array+0x3c>)
 80037d0:	1ba4      	subs	r4, r4, r6
 80037d2:	10a4      	asrs	r4, r4, #2
 80037d4:	42a5      	cmp	r5, r4
 80037d6:	d109      	bne.n	80037ec <__libc_init_array+0x24>
 80037d8:	f001 f8d4 	bl	8004984 <_init>
 80037dc:	2500      	movs	r5, #0
 80037de:	4e0a      	ldr	r6, [pc, #40]	; (8003808 <__libc_init_array+0x40>)
 80037e0:	4c0a      	ldr	r4, [pc, #40]	; (800380c <__libc_init_array+0x44>)
 80037e2:	1ba4      	subs	r4, r4, r6
 80037e4:	10a4      	asrs	r4, r4, #2
 80037e6:	42a5      	cmp	r5, r4
 80037e8:	d105      	bne.n	80037f6 <__libc_init_array+0x2e>
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037f0:	4798      	blx	r3
 80037f2:	3501      	adds	r5, #1
 80037f4:	e7ee      	b.n	80037d4 <__libc_init_array+0xc>
 80037f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037fa:	4798      	blx	r3
 80037fc:	3501      	adds	r5, #1
 80037fe:	e7f2      	b.n	80037e6 <__libc_init_array+0x1e>
 8003800:	08004c84 	.word	0x08004c84
 8003804:	08004c84 	.word	0x08004c84
 8003808:	08004c84 	.word	0x08004c84
 800380c:	08004c88 	.word	0x08004c88

08003810 <memset>:
 8003810:	4603      	mov	r3, r0
 8003812:	4402      	add	r2, r0
 8003814:	4293      	cmp	r3, r2
 8003816:	d100      	bne.n	800381a <memset+0xa>
 8003818:	4770      	bx	lr
 800381a:	f803 1b01 	strb.w	r1, [r3], #1
 800381e:	e7f9      	b.n	8003814 <memset+0x4>

08003820 <iprintf>:
 8003820:	b40f      	push	{r0, r1, r2, r3}
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <iprintf+0x2c>)
 8003824:	b513      	push	{r0, r1, r4, lr}
 8003826:	681c      	ldr	r4, [r3, #0]
 8003828:	b124      	cbz	r4, 8003834 <iprintf+0x14>
 800382a:	69a3      	ldr	r3, [r4, #24]
 800382c:	b913      	cbnz	r3, 8003834 <iprintf+0x14>
 800382e:	4620      	mov	r0, r4
 8003830:	f000 f86e 	bl	8003910 <__sinit>
 8003834:	ab05      	add	r3, sp, #20
 8003836:	9a04      	ldr	r2, [sp, #16]
 8003838:	68a1      	ldr	r1, [r4, #8]
 800383a:	4620      	mov	r0, r4
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	f000 fac5 	bl	8003dcc <_vfiprintf_r>
 8003842:	b002      	add	sp, #8
 8003844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003848:	b004      	add	sp, #16
 800384a:	4770      	bx	lr
 800384c:	2000000c 	.word	0x2000000c

08003850 <siprintf>:
 8003850:	b40e      	push	{r1, r2, r3}
 8003852:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003856:	b500      	push	{lr}
 8003858:	b09c      	sub	sp, #112	; 0x70
 800385a:	ab1d      	add	r3, sp, #116	; 0x74
 800385c:	9002      	str	r0, [sp, #8]
 800385e:	9006      	str	r0, [sp, #24]
 8003860:	9107      	str	r1, [sp, #28]
 8003862:	9104      	str	r1, [sp, #16]
 8003864:	4808      	ldr	r0, [pc, #32]	; (8003888 <siprintf+0x38>)
 8003866:	4909      	ldr	r1, [pc, #36]	; (800388c <siprintf+0x3c>)
 8003868:	f853 2b04 	ldr.w	r2, [r3], #4
 800386c:	9105      	str	r1, [sp, #20]
 800386e:	6800      	ldr	r0, [r0, #0]
 8003870:	a902      	add	r1, sp, #8
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	f000 f98a 	bl	8003b8c <_svfiprintf_r>
 8003878:	2200      	movs	r2, #0
 800387a:	9b02      	ldr	r3, [sp, #8]
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	b01c      	add	sp, #112	; 0x70
 8003880:	f85d eb04 	ldr.w	lr, [sp], #4
 8003884:	b003      	add	sp, #12
 8003886:	4770      	bx	lr
 8003888:	2000000c 	.word	0x2000000c
 800388c:	ffff0208 	.word	0xffff0208

08003890 <std>:
 8003890:	2300      	movs	r3, #0
 8003892:	b510      	push	{r4, lr}
 8003894:	4604      	mov	r4, r0
 8003896:	e9c0 3300 	strd	r3, r3, [r0]
 800389a:	6083      	str	r3, [r0, #8]
 800389c:	8181      	strh	r1, [r0, #12]
 800389e:	6643      	str	r3, [r0, #100]	; 0x64
 80038a0:	81c2      	strh	r2, [r0, #14]
 80038a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038a6:	6183      	str	r3, [r0, #24]
 80038a8:	4619      	mov	r1, r3
 80038aa:	2208      	movs	r2, #8
 80038ac:	305c      	adds	r0, #92	; 0x5c
 80038ae:	f7ff ffaf 	bl	8003810 <memset>
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <std+0x38>)
 80038b4:	6224      	str	r4, [r4, #32]
 80038b6:	6263      	str	r3, [r4, #36]	; 0x24
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <std+0x3c>)
 80038ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <std+0x40>)
 80038be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <std+0x44>)
 80038c2:	6323      	str	r3, [r4, #48]	; 0x30
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	bf00      	nop
 80038c8:	08004329 	.word	0x08004329
 80038cc:	0800434b 	.word	0x0800434b
 80038d0:	08004383 	.word	0x08004383
 80038d4:	080043a7 	.word	0x080043a7

080038d8 <_cleanup_r>:
 80038d8:	4901      	ldr	r1, [pc, #4]	; (80038e0 <_cleanup_r+0x8>)
 80038da:	f000 b885 	b.w	80039e8 <_fwalk_reent>
 80038de:	bf00      	nop
 80038e0:	08004681 	.word	0x08004681

080038e4 <__sfmoreglue>:
 80038e4:	b570      	push	{r4, r5, r6, lr}
 80038e6:	2568      	movs	r5, #104	; 0x68
 80038e8:	1e4a      	subs	r2, r1, #1
 80038ea:	4355      	muls	r5, r2
 80038ec:	460e      	mov	r6, r1
 80038ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038f2:	f000 f897 	bl	8003a24 <_malloc_r>
 80038f6:	4604      	mov	r4, r0
 80038f8:	b140      	cbz	r0, 800390c <__sfmoreglue+0x28>
 80038fa:	2100      	movs	r1, #0
 80038fc:	e9c0 1600 	strd	r1, r6, [r0]
 8003900:	300c      	adds	r0, #12
 8003902:	60a0      	str	r0, [r4, #8]
 8003904:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003908:	f7ff ff82 	bl	8003810 <memset>
 800390c:	4620      	mov	r0, r4
 800390e:	bd70      	pop	{r4, r5, r6, pc}

08003910 <__sinit>:
 8003910:	6983      	ldr	r3, [r0, #24]
 8003912:	b510      	push	{r4, lr}
 8003914:	4604      	mov	r4, r0
 8003916:	bb33      	cbnz	r3, 8003966 <__sinit+0x56>
 8003918:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800391c:	6503      	str	r3, [r0, #80]	; 0x50
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <__sinit+0x58>)
 8003920:	4a12      	ldr	r2, [pc, #72]	; (800396c <__sinit+0x5c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6282      	str	r2, [r0, #40]	; 0x28
 8003926:	4298      	cmp	r0, r3
 8003928:	bf04      	itt	eq
 800392a:	2301      	moveq	r3, #1
 800392c:	6183      	streq	r3, [r0, #24]
 800392e:	f000 f81f 	bl	8003970 <__sfp>
 8003932:	6060      	str	r0, [r4, #4]
 8003934:	4620      	mov	r0, r4
 8003936:	f000 f81b 	bl	8003970 <__sfp>
 800393a:	60a0      	str	r0, [r4, #8]
 800393c:	4620      	mov	r0, r4
 800393e:	f000 f817 	bl	8003970 <__sfp>
 8003942:	2200      	movs	r2, #0
 8003944:	60e0      	str	r0, [r4, #12]
 8003946:	2104      	movs	r1, #4
 8003948:	6860      	ldr	r0, [r4, #4]
 800394a:	f7ff ffa1 	bl	8003890 <std>
 800394e:	2201      	movs	r2, #1
 8003950:	2109      	movs	r1, #9
 8003952:	68a0      	ldr	r0, [r4, #8]
 8003954:	f7ff ff9c 	bl	8003890 <std>
 8003958:	2202      	movs	r2, #2
 800395a:	2112      	movs	r1, #18
 800395c:	68e0      	ldr	r0, [r4, #12]
 800395e:	f7ff ff97 	bl	8003890 <std>
 8003962:	2301      	movs	r3, #1
 8003964:	61a3      	str	r3, [r4, #24]
 8003966:	bd10      	pop	{r4, pc}
 8003968:	08004bec 	.word	0x08004bec
 800396c:	080038d9 	.word	0x080038d9

08003970 <__sfp>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <__sfp+0x70>)
 8003974:	4607      	mov	r7, r0
 8003976:	681e      	ldr	r6, [r3, #0]
 8003978:	69b3      	ldr	r3, [r6, #24]
 800397a:	b913      	cbnz	r3, 8003982 <__sfp+0x12>
 800397c:	4630      	mov	r0, r6
 800397e:	f7ff ffc7 	bl	8003910 <__sinit>
 8003982:	3648      	adds	r6, #72	; 0x48
 8003984:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003988:	3b01      	subs	r3, #1
 800398a:	d503      	bpl.n	8003994 <__sfp+0x24>
 800398c:	6833      	ldr	r3, [r6, #0]
 800398e:	b133      	cbz	r3, 800399e <__sfp+0x2e>
 8003990:	6836      	ldr	r6, [r6, #0]
 8003992:	e7f7      	b.n	8003984 <__sfp+0x14>
 8003994:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003998:	b16d      	cbz	r5, 80039b6 <__sfp+0x46>
 800399a:	3468      	adds	r4, #104	; 0x68
 800399c:	e7f4      	b.n	8003988 <__sfp+0x18>
 800399e:	2104      	movs	r1, #4
 80039a0:	4638      	mov	r0, r7
 80039a2:	f7ff ff9f 	bl	80038e4 <__sfmoreglue>
 80039a6:	6030      	str	r0, [r6, #0]
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d1f1      	bne.n	8003990 <__sfp+0x20>
 80039ac:	230c      	movs	r3, #12
 80039ae:	4604      	mov	r4, r0
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	4620      	mov	r0, r4
 80039b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <__sfp+0x74>)
 80039b8:	6665      	str	r5, [r4, #100]	; 0x64
 80039ba:	e9c4 5500 	strd	r5, r5, [r4]
 80039be:	60a5      	str	r5, [r4, #8]
 80039c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80039c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80039c8:	2208      	movs	r2, #8
 80039ca:	4629      	mov	r1, r5
 80039cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039d0:	f7ff ff1e 	bl	8003810 <memset>
 80039d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039dc:	e7e9      	b.n	80039b2 <__sfp+0x42>
 80039de:	bf00      	nop
 80039e0:	08004bec 	.word	0x08004bec
 80039e4:	ffff0001 	.word	0xffff0001

080039e8 <_fwalk_reent>:
 80039e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ec:	4680      	mov	r8, r0
 80039ee:	4689      	mov	r9, r1
 80039f0:	2600      	movs	r6, #0
 80039f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039f6:	b914      	cbnz	r4, 80039fe <_fwalk_reent+0x16>
 80039f8:	4630      	mov	r0, r6
 80039fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003a02:	3f01      	subs	r7, #1
 8003a04:	d501      	bpl.n	8003a0a <_fwalk_reent+0x22>
 8003a06:	6824      	ldr	r4, [r4, #0]
 8003a08:	e7f5      	b.n	80039f6 <_fwalk_reent+0xe>
 8003a0a:	89ab      	ldrh	r3, [r5, #12]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d907      	bls.n	8003a20 <_fwalk_reent+0x38>
 8003a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a14:	3301      	adds	r3, #1
 8003a16:	d003      	beq.n	8003a20 <_fwalk_reent+0x38>
 8003a18:	4629      	mov	r1, r5
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	47c8      	blx	r9
 8003a1e:	4306      	orrs	r6, r0
 8003a20:	3568      	adds	r5, #104	; 0x68
 8003a22:	e7ee      	b.n	8003a02 <_fwalk_reent+0x1a>

08003a24 <_malloc_r>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	1ccd      	adds	r5, r1, #3
 8003a28:	f025 0503 	bic.w	r5, r5, #3
 8003a2c:	3508      	adds	r5, #8
 8003a2e:	2d0c      	cmp	r5, #12
 8003a30:	bf38      	it	cc
 8003a32:	250c      	movcc	r5, #12
 8003a34:	2d00      	cmp	r5, #0
 8003a36:	4606      	mov	r6, r0
 8003a38:	db01      	blt.n	8003a3e <_malloc_r+0x1a>
 8003a3a:	42a9      	cmp	r1, r5
 8003a3c:	d903      	bls.n	8003a46 <_malloc_r+0x22>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	6033      	str	r3, [r6, #0]
 8003a42:	2000      	movs	r0, #0
 8003a44:	bd70      	pop	{r4, r5, r6, pc}
 8003a46:	f000 feed 	bl	8004824 <__malloc_lock>
 8003a4a:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <_malloc_r+0xac>)
 8003a4c:	6814      	ldr	r4, [r2, #0]
 8003a4e:	4621      	mov	r1, r4
 8003a50:	b991      	cbnz	r1, 8003a78 <_malloc_r+0x54>
 8003a52:	4c20      	ldr	r4, [pc, #128]	; (8003ad4 <_malloc_r+0xb0>)
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	b91b      	cbnz	r3, 8003a60 <_malloc_r+0x3c>
 8003a58:	4630      	mov	r0, r6
 8003a5a:	f000 fc55 	bl	8004308 <_sbrk_r>
 8003a5e:	6020      	str	r0, [r4, #0]
 8003a60:	4629      	mov	r1, r5
 8003a62:	4630      	mov	r0, r6
 8003a64:	f000 fc50 	bl	8004308 <_sbrk_r>
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d124      	bne.n	8003ab6 <_malloc_r+0x92>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	4630      	mov	r0, r6
 8003a70:	6033      	str	r3, [r6, #0]
 8003a72:	f000 fed8 	bl	8004826 <__malloc_unlock>
 8003a76:	e7e4      	b.n	8003a42 <_malloc_r+0x1e>
 8003a78:	680b      	ldr	r3, [r1, #0]
 8003a7a:	1b5b      	subs	r3, r3, r5
 8003a7c:	d418      	bmi.n	8003ab0 <_malloc_r+0x8c>
 8003a7e:	2b0b      	cmp	r3, #11
 8003a80:	d90f      	bls.n	8003aa2 <_malloc_r+0x7e>
 8003a82:	600b      	str	r3, [r1, #0]
 8003a84:	18cc      	adds	r4, r1, r3
 8003a86:	50cd      	str	r5, [r1, r3]
 8003a88:	4630      	mov	r0, r6
 8003a8a:	f000 fecc 	bl	8004826 <__malloc_unlock>
 8003a8e:	f104 000b 	add.w	r0, r4, #11
 8003a92:	1d23      	adds	r3, r4, #4
 8003a94:	f020 0007 	bic.w	r0, r0, #7
 8003a98:	1ac3      	subs	r3, r0, r3
 8003a9a:	d0d3      	beq.n	8003a44 <_malloc_r+0x20>
 8003a9c:	425a      	negs	r2, r3
 8003a9e:	50e2      	str	r2, [r4, r3]
 8003aa0:	e7d0      	b.n	8003a44 <_malloc_r+0x20>
 8003aa2:	684b      	ldr	r3, [r1, #4]
 8003aa4:	428c      	cmp	r4, r1
 8003aa6:	bf16      	itet	ne
 8003aa8:	6063      	strne	r3, [r4, #4]
 8003aaa:	6013      	streq	r3, [r2, #0]
 8003aac:	460c      	movne	r4, r1
 8003aae:	e7eb      	b.n	8003a88 <_malloc_r+0x64>
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	6849      	ldr	r1, [r1, #4]
 8003ab4:	e7cc      	b.n	8003a50 <_malloc_r+0x2c>
 8003ab6:	1cc4      	adds	r4, r0, #3
 8003ab8:	f024 0403 	bic.w	r4, r4, #3
 8003abc:	42a0      	cmp	r0, r4
 8003abe:	d005      	beq.n	8003acc <_malloc_r+0xa8>
 8003ac0:	1a21      	subs	r1, r4, r0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f000 fc20 	bl	8004308 <_sbrk_r>
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d0cf      	beq.n	8003a6c <_malloc_r+0x48>
 8003acc:	6025      	str	r5, [r4, #0]
 8003ace:	e7db      	b.n	8003a88 <_malloc_r+0x64>
 8003ad0:	20000090 	.word	0x20000090
 8003ad4:	20000094 	.word	0x20000094

08003ad8 <__ssputs_r>:
 8003ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003adc:	688e      	ldr	r6, [r1, #8]
 8003ade:	4682      	mov	sl, r0
 8003ae0:	429e      	cmp	r6, r3
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	4690      	mov	r8, r2
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	d837      	bhi.n	8003b5a <__ssputs_r+0x82>
 8003aea:	898a      	ldrh	r2, [r1, #12]
 8003aec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003af0:	d031      	beq.n	8003b56 <__ssputs_r+0x7e>
 8003af2:	2302      	movs	r3, #2
 8003af4:	6825      	ldr	r5, [r4, #0]
 8003af6:	6909      	ldr	r1, [r1, #16]
 8003af8:	1a6f      	subs	r7, r5, r1
 8003afa:	6965      	ldr	r5, [r4, #20]
 8003afc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b00:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b04:	f109 0301 	add.w	r3, r9, #1
 8003b08:	443b      	add	r3, r7
 8003b0a:	429d      	cmp	r5, r3
 8003b0c:	bf38      	it	cc
 8003b0e:	461d      	movcc	r5, r3
 8003b10:	0553      	lsls	r3, r2, #21
 8003b12:	d530      	bpl.n	8003b76 <__ssputs_r+0x9e>
 8003b14:	4629      	mov	r1, r5
 8003b16:	f7ff ff85 	bl	8003a24 <_malloc_r>
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	b950      	cbnz	r0, 8003b34 <__ssputs_r+0x5c>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	f8ca 3000 	str.w	r3, [sl]
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b2e:	81a3      	strh	r3, [r4, #12]
 8003b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b34:	463a      	mov	r2, r7
 8003b36:	6921      	ldr	r1, [r4, #16]
 8003b38:	f000 fe50 	bl	80047dc <memcpy>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	6126      	str	r6, [r4, #16]
 8003b4a:	443e      	add	r6, r7
 8003b4c:	6026      	str	r6, [r4, #0]
 8003b4e:	464e      	mov	r6, r9
 8003b50:	6165      	str	r5, [r4, #20]
 8003b52:	1bed      	subs	r5, r5, r7
 8003b54:	60a5      	str	r5, [r4, #8]
 8003b56:	454e      	cmp	r6, r9
 8003b58:	d900      	bls.n	8003b5c <__ssputs_r+0x84>
 8003b5a:	464e      	mov	r6, r9
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	4641      	mov	r1, r8
 8003b60:	6820      	ldr	r0, [r4, #0]
 8003b62:	f000 fe46 	bl	80047f2 <memmove>
 8003b66:	68a3      	ldr	r3, [r4, #8]
 8003b68:	2000      	movs	r0, #0
 8003b6a:	1b9b      	subs	r3, r3, r6
 8003b6c:	60a3      	str	r3, [r4, #8]
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	441e      	add	r6, r3
 8003b72:	6026      	str	r6, [r4, #0]
 8003b74:	e7dc      	b.n	8003b30 <__ssputs_r+0x58>
 8003b76:	462a      	mov	r2, r5
 8003b78:	f000 fea2 	bl	80048c0 <_realloc_r>
 8003b7c:	4606      	mov	r6, r0
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d1e2      	bne.n	8003b48 <__ssputs_r+0x70>
 8003b82:	6921      	ldr	r1, [r4, #16]
 8003b84:	4650      	mov	r0, sl
 8003b86:	f000 fe4f 	bl	8004828 <_free_r>
 8003b8a:	e7c8      	b.n	8003b1e <__ssputs_r+0x46>

08003b8c <_svfiprintf_r>:
 8003b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b90:	461d      	mov	r5, r3
 8003b92:	898b      	ldrh	r3, [r1, #12]
 8003b94:	b09d      	sub	sp, #116	; 0x74
 8003b96:	061f      	lsls	r7, r3, #24
 8003b98:	4680      	mov	r8, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	4616      	mov	r6, r2
 8003b9e:	d50f      	bpl.n	8003bc0 <_svfiprintf_r+0x34>
 8003ba0:	690b      	ldr	r3, [r1, #16]
 8003ba2:	b96b      	cbnz	r3, 8003bc0 <_svfiprintf_r+0x34>
 8003ba4:	2140      	movs	r1, #64	; 0x40
 8003ba6:	f7ff ff3d 	bl	8003a24 <_malloc_r>
 8003baa:	6020      	str	r0, [r4, #0]
 8003bac:	6120      	str	r0, [r4, #16]
 8003bae:	b928      	cbnz	r0, 8003bbc <_svfiprintf_r+0x30>
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	f8c8 3000 	str.w	r3, [r8]
 8003bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bba:	e0c8      	b.n	8003d4e <_svfiprintf_r+0x1c2>
 8003bbc:	2340      	movs	r3, #64	; 0x40
 8003bbe:	6163      	str	r3, [r4, #20]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bca:	2330      	movs	r3, #48	; 0x30
 8003bcc:	f04f 0b01 	mov.w	fp, #1
 8003bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bd4:	9503      	str	r5, [sp, #12]
 8003bd6:	4637      	mov	r7, r6
 8003bd8:	463d      	mov	r5, r7
 8003bda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bde:	b10b      	cbz	r3, 8003be4 <_svfiprintf_r+0x58>
 8003be0:	2b25      	cmp	r3, #37	; 0x25
 8003be2:	d13e      	bne.n	8003c62 <_svfiprintf_r+0xd6>
 8003be4:	ebb7 0a06 	subs.w	sl, r7, r6
 8003be8:	d00b      	beq.n	8003c02 <_svfiprintf_r+0x76>
 8003bea:	4653      	mov	r3, sl
 8003bec:	4632      	mov	r2, r6
 8003bee:	4621      	mov	r1, r4
 8003bf0:	4640      	mov	r0, r8
 8003bf2:	f7ff ff71 	bl	8003ad8 <__ssputs_r>
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	f000 80a4 	beq.w	8003d44 <_svfiprintf_r+0x1b8>
 8003bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bfe:	4453      	add	r3, sl
 8003c00:	9309      	str	r3, [sp, #36]	; 0x24
 8003c02:	783b      	ldrb	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 809d 	beq.w	8003d44 <_svfiprintf_r+0x1b8>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c14:	9304      	str	r3, [sp, #16]
 8003c16:	9307      	str	r3, [sp, #28]
 8003c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8003c1e:	462f      	mov	r7, r5
 8003c20:	2205      	movs	r2, #5
 8003c22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003c26:	4850      	ldr	r0, [pc, #320]	; (8003d68 <_svfiprintf_r+0x1dc>)
 8003c28:	f000 fdca 	bl	80047c0 <memchr>
 8003c2c:	9b04      	ldr	r3, [sp, #16]
 8003c2e:	b9d0      	cbnz	r0, 8003c66 <_svfiprintf_r+0xda>
 8003c30:	06d9      	lsls	r1, r3, #27
 8003c32:	bf44      	itt	mi
 8003c34:	2220      	movmi	r2, #32
 8003c36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c3a:	071a      	lsls	r2, r3, #28
 8003c3c:	bf44      	itt	mi
 8003c3e:	222b      	movmi	r2, #43	; 0x2b
 8003c40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c44:	782a      	ldrb	r2, [r5, #0]
 8003c46:	2a2a      	cmp	r2, #42	; 0x2a
 8003c48:	d015      	beq.n	8003c76 <_svfiprintf_r+0xea>
 8003c4a:	462f      	mov	r7, r5
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	250a      	movs	r5, #10
 8003c50:	9a07      	ldr	r2, [sp, #28]
 8003c52:	4639      	mov	r1, r7
 8003c54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c58:	3b30      	subs	r3, #48	; 0x30
 8003c5a:	2b09      	cmp	r3, #9
 8003c5c:	d94d      	bls.n	8003cfa <_svfiprintf_r+0x16e>
 8003c5e:	b1b8      	cbz	r0, 8003c90 <_svfiprintf_r+0x104>
 8003c60:	e00f      	b.n	8003c82 <_svfiprintf_r+0xf6>
 8003c62:	462f      	mov	r7, r5
 8003c64:	e7b8      	b.n	8003bd8 <_svfiprintf_r+0x4c>
 8003c66:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <_svfiprintf_r+0x1dc>)
 8003c68:	463d      	mov	r5, r7
 8003c6a:	1a80      	subs	r0, r0, r2
 8003c6c:	fa0b f000 	lsl.w	r0, fp, r0
 8003c70:	4318      	orrs	r0, r3
 8003c72:	9004      	str	r0, [sp, #16]
 8003c74:	e7d3      	b.n	8003c1e <_svfiprintf_r+0x92>
 8003c76:	9a03      	ldr	r2, [sp, #12]
 8003c78:	1d11      	adds	r1, r2, #4
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	9103      	str	r1, [sp, #12]
 8003c7e:	2a00      	cmp	r2, #0
 8003c80:	db01      	blt.n	8003c86 <_svfiprintf_r+0xfa>
 8003c82:	9207      	str	r2, [sp, #28]
 8003c84:	e004      	b.n	8003c90 <_svfiprintf_r+0x104>
 8003c86:	4252      	negs	r2, r2
 8003c88:	f043 0302 	orr.w	r3, r3, #2
 8003c8c:	9207      	str	r2, [sp, #28]
 8003c8e:	9304      	str	r3, [sp, #16]
 8003c90:	783b      	ldrb	r3, [r7, #0]
 8003c92:	2b2e      	cmp	r3, #46	; 0x2e
 8003c94:	d10c      	bne.n	8003cb0 <_svfiprintf_r+0x124>
 8003c96:	787b      	ldrb	r3, [r7, #1]
 8003c98:	2b2a      	cmp	r3, #42	; 0x2a
 8003c9a:	d133      	bne.n	8003d04 <_svfiprintf_r+0x178>
 8003c9c:	9b03      	ldr	r3, [sp, #12]
 8003c9e:	3702      	adds	r7, #2
 8003ca0:	1d1a      	adds	r2, r3, #4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	9203      	str	r2, [sp, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bfb8      	it	lt
 8003caa:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cae:	9305      	str	r3, [sp, #20]
 8003cb0:	4d2e      	ldr	r5, [pc, #184]	; (8003d6c <_svfiprintf_r+0x1e0>)
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	7839      	ldrb	r1, [r7, #0]
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f000 fd82 	bl	80047c0 <memchr>
 8003cbc:	b138      	cbz	r0, 8003cce <_svfiprintf_r+0x142>
 8003cbe:	2340      	movs	r3, #64	; 0x40
 8003cc0:	1b40      	subs	r0, r0, r5
 8003cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8003cc6:	9b04      	ldr	r3, [sp, #16]
 8003cc8:	3701      	adds	r7, #1
 8003cca:	4303      	orrs	r3, r0
 8003ccc:	9304      	str	r3, [sp, #16]
 8003cce:	7839      	ldrb	r1, [r7, #0]
 8003cd0:	2206      	movs	r2, #6
 8003cd2:	4827      	ldr	r0, [pc, #156]	; (8003d70 <_svfiprintf_r+0x1e4>)
 8003cd4:	1c7e      	adds	r6, r7, #1
 8003cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cda:	f000 fd71 	bl	80047c0 <memchr>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d038      	beq.n	8003d54 <_svfiprintf_r+0x1c8>
 8003ce2:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <_svfiprintf_r+0x1e8>)
 8003ce4:	bb13      	cbnz	r3, 8003d2c <_svfiprintf_r+0x1a0>
 8003ce6:	9b03      	ldr	r3, [sp, #12]
 8003ce8:	3307      	adds	r3, #7
 8003cea:	f023 0307 	bic.w	r3, r3, #7
 8003cee:	3308      	adds	r3, #8
 8003cf0:	9303      	str	r3, [sp, #12]
 8003cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cf4:	444b      	add	r3, r9
 8003cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf8:	e76d      	b.n	8003bd6 <_svfiprintf_r+0x4a>
 8003cfa:	fb05 3202 	mla	r2, r5, r2, r3
 8003cfe:	2001      	movs	r0, #1
 8003d00:	460f      	mov	r7, r1
 8003d02:	e7a6      	b.n	8003c52 <_svfiprintf_r+0xc6>
 8003d04:	2300      	movs	r3, #0
 8003d06:	250a      	movs	r5, #10
 8003d08:	4619      	mov	r1, r3
 8003d0a:	3701      	adds	r7, #1
 8003d0c:	9305      	str	r3, [sp, #20]
 8003d0e:	4638      	mov	r0, r7
 8003d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d14:	3a30      	subs	r2, #48	; 0x30
 8003d16:	2a09      	cmp	r2, #9
 8003d18:	d903      	bls.n	8003d22 <_svfiprintf_r+0x196>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0c8      	beq.n	8003cb0 <_svfiprintf_r+0x124>
 8003d1e:	9105      	str	r1, [sp, #20]
 8003d20:	e7c6      	b.n	8003cb0 <_svfiprintf_r+0x124>
 8003d22:	fb05 2101 	mla	r1, r5, r1, r2
 8003d26:	2301      	movs	r3, #1
 8003d28:	4607      	mov	r7, r0
 8003d2a:	e7f0      	b.n	8003d0e <_svfiprintf_r+0x182>
 8003d2c:	ab03      	add	r3, sp, #12
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	4622      	mov	r2, r4
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <_svfiprintf_r+0x1ec>)
 8003d34:	a904      	add	r1, sp, #16
 8003d36:	4640      	mov	r0, r8
 8003d38:	f3af 8000 	nop.w
 8003d3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d40:	4681      	mov	r9, r0
 8003d42:	d1d6      	bne.n	8003cf2 <_svfiprintf_r+0x166>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	065b      	lsls	r3, r3, #25
 8003d48:	f53f af35 	bmi.w	8003bb6 <_svfiprintf_r+0x2a>
 8003d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d4e:	b01d      	add	sp, #116	; 0x74
 8003d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d54:	ab03      	add	r3, sp, #12
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	4622      	mov	r2, r4
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <_svfiprintf_r+0x1ec>)
 8003d5c:	a904      	add	r1, sp, #16
 8003d5e:	4640      	mov	r0, r8
 8003d60:	f000 f9c0 	bl	80040e4 <_printf_i>
 8003d64:	e7ea      	b.n	8003d3c <_svfiprintf_r+0x1b0>
 8003d66:	bf00      	nop
 8003d68:	08004c50 	.word	0x08004c50
 8003d6c:	08004c56 	.word	0x08004c56
 8003d70:	08004c5a 	.word	0x08004c5a
 8003d74:	00000000 	.word	0x00000000
 8003d78:	08003ad9 	.word	0x08003ad9

08003d7c <__sfputc_r>:
 8003d7c:	6893      	ldr	r3, [r2, #8]
 8003d7e:	b410      	push	{r4}
 8003d80:	3b01      	subs	r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	6093      	str	r3, [r2, #8]
 8003d86:	da07      	bge.n	8003d98 <__sfputc_r+0x1c>
 8003d88:	6994      	ldr	r4, [r2, #24]
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	db01      	blt.n	8003d92 <__sfputc_r+0x16>
 8003d8e:	290a      	cmp	r1, #10
 8003d90:	d102      	bne.n	8003d98 <__sfputc_r+0x1c>
 8003d92:	bc10      	pop	{r4}
 8003d94:	f000 bb0c 	b.w	80043b0 <__swbuf_r>
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	1c58      	adds	r0, r3, #1
 8003d9c:	6010      	str	r0, [r2, #0]
 8003d9e:	7019      	strb	r1, [r3, #0]
 8003da0:	4608      	mov	r0, r1
 8003da2:	bc10      	pop	{r4}
 8003da4:	4770      	bx	lr

08003da6 <__sfputs_r>:
 8003da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da8:	4606      	mov	r6, r0
 8003daa:	460f      	mov	r7, r1
 8003dac:	4614      	mov	r4, r2
 8003dae:	18d5      	adds	r5, r2, r3
 8003db0:	42ac      	cmp	r4, r5
 8003db2:	d101      	bne.n	8003db8 <__sfputs_r+0x12>
 8003db4:	2000      	movs	r0, #0
 8003db6:	e007      	b.n	8003dc8 <__sfputs_r+0x22>
 8003db8:	463a      	mov	r2, r7
 8003dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	f7ff ffdc 	bl	8003d7c <__sfputc_r>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d1f3      	bne.n	8003db0 <__sfputs_r+0xa>
 8003dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003dcc <_vfiprintf_r>:
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	b09d      	sub	sp, #116	; 0x74
 8003dd4:	4617      	mov	r7, r2
 8003dd6:	461d      	mov	r5, r3
 8003dd8:	4606      	mov	r6, r0
 8003dda:	b118      	cbz	r0, 8003de4 <_vfiprintf_r+0x18>
 8003ddc:	6983      	ldr	r3, [r0, #24]
 8003dde:	b90b      	cbnz	r3, 8003de4 <_vfiprintf_r+0x18>
 8003de0:	f7ff fd96 	bl	8003910 <__sinit>
 8003de4:	4b7c      	ldr	r3, [pc, #496]	; (8003fd8 <_vfiprintf_r+0x20c>)
 8003de6:	429c      	cmp	r4, r3
 8003de8:	d158      	bne.n	8003e9c <_vfiprintf_r+0xd0>
 8003dea:	6874      	ldr	r4, [r6, #4]
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	0718      	lsls	r0, r3, #28
 8003df0:	d55e      	bpl.n	8003eb0 <_vfiprintf_r+0xe4>
 8003df2:	6923      	ldr	r3, [r4, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d05b      	beq.n	8003eb0 <_vfiprintf_r+0xe4>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8003dfc:	2320      	movs	r3, #32
 8003dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e02:	2330      	movs	r3, #48	; 0x30
 8003e04:	f04f 0b01 	mov.w	fp, #1
 8003e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e0c:	9503      	str	r5, [sp, #12]
 8003e0e:	46b8      	mov	r8, r7
 8003e10:	4645      	mov	r5, r8
 8003e12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e16:	b10b      	cbz	r3, 8003e1c <_vfiprintf_r+0x50>
 8003e18:	2b25      	cmp	r3, #37	; 0x25
 8003e1a:	d154      	bne.n	8003ec6 <_vfiprintf_r+0xfa>
 8003e1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e20:	d00b      	beq.n	8003e3a <_vfiprintf_r+0x6e>
 8003e22:	4653      	mov	r3, sl
 8003e24:	463a      	mov	r2, r7
 8003e26:	4621      	mov	r1, r4
 8003e28:	4630      	mov	r0, r6
 8003e2a:	f7ff ffbc 	bl	8003da6 <__sfputs_r>
 8003e2e:	3001      	adds	r0, #1
 8003e30:	f000 80c2 	beq.w	8003fb8 <_vfiprintf_r+0x1ec>
 8003e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e36:	4453      	add	r3, sl
 8003e38:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3a:	f898 3000 	ldrb.w	r3, [r8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80ba 	beq.w	8003fb8 <_vfiprintf_r+0x1ec>
 8003e44:	2300      	movs	r3, #0
 8003e46:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e4e:	9304      	str	r3, [sp, #16]
 8003e50:	9307      	str	r3, [sp, #28]
 8003e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e56:	931a      	str	r3, [sp, #104]	; 0x68
 8003e58:	46a8      	mov	r8, r5
 8003e5a:	2205      	movs	r2, #5
 8003e5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003e60:	485e      	ldr	r0, [pc, #376]	; (8003fdc <_vfiprintf_r+0x210>)
 8003e62:	f000 fcad 	bl	80047c0 <memchr>
 8003e66:	9b04      	ldr	r3, [sp, #16]
 8003e68:	bb78      	cbnz	r0, 8003eca <_vfiprintf_r+0xfe>
 8003e6a:	06d9      	lsls	r1, r3, #27
 8003e6c:	bf44      	itt	mi
 8003e6e:	2220      	movmi	r2, #32
 8003e70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e74:	071a      	lsls	r2, r3, #28
 8003e76:	bf44      	itt	mi
 8003e78:	222b      	movmi	r2, #43	; 0x2b
 8003e7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e7e:	782a      	ldrb	r2, [r5, #0]
 8003e80:	2a2a      	cmp	r2, #42	; 0x2a
 8003e82:	d02a      	beq.n	8003eda <_vfiprintf_r+0x10e>
 8003e84:	46a8      	mov	r8, r5
 8003e86:	2000      	movs	r0, #0
 8003e88:	250a      	movs	r5, #10
 8003e8a:	9a07      	ldr	r2, [sp, #28]
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e92:	3b30      	subs	r3, #48	; 0x30
 8003e94:	2b09      	cmp	r3, #9
 8003e96:	d969      	bls.n	8003f6c <_vfiprintf_r+0x1a0>
 8003e98:	b360      	cbz	r0, 8003ef4 <_vfiprintf_r+0x128>
 8003e9a:	e024      	b.n	8003ee6 <_vfiprintf_r+0x11a>
 8003e9c:	4b50      	ldr	r3, [pc, #320]	; (8003fe0 <_vfiprintf_r+0x214>)
 8003e9e:	429c      	cmp	r4, r3
 8003ea0:	d101      	bne.n	8003ea6 <_vfiprintf_r+0xda>
 8003ea2:	68b4      	ldr	r4, [r6, #8]
 8003ea4:	e7a2      	b.n	8003dec <_vfiprintf_r+0x20>
 8003ea6:	4b4f      	ldr	r3, [pc, #316]	; (8003fe4 <_vfiprintf_r+0x218>)
 8003ea8:	429c      	cmp	r4, r3
 8003eaa:	bf08      	it	eq
 8003eac:	68f4      	ldreq	r4, [r6, #12]
 8003eae:	e79d      	b.n	8003dec <_vfiprintf_r+0x20>
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f000 fae0 	bl	8004478 <__swsetup_r>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d09d      	beq.n	8003df8 <_vfiprintf_r+0x2c>
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec0:	b01d      	add	sp, #116	; 0x74
 8003ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec6:	46a8      	mov	r8, r5
 8003ec8:	e7a2      	b.n	8003e10 <_vfiprintf_r+0x44>
 8003eca:	4a44      	ldr	r2, [pc, #272]	; (8003fdc <_vfiprintf_r+0x210>)
 8003ecc:	4645      	mov	r5, r8
 8003ece:	1a80      	subs	r0, r0, r2
 8003ed0:	fa0b f000 	lsl.w	r0, fp, r0
 8003ed4:	4318      	orrs	r0, r3
 8003ed6:	9004      	str	r0, [sp, #16]
 8003ed8:	e7be      	b.n	8003e58 <_vfiprintf_r+0x8c>
 8003eda:	9a03      	ldr	r2, [sp, #12]
 8003edc:	1d11      	adds	r1, r2, #4
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	9103      	str	r1, [sp, #12]
 8003ee2:	2a00      	cmp	r2, #0
 8003ee4:	db01      	blt.n	8003eea <_vfiprintf_r+0x11e>
 8003ee6:	9207      	str	r2, [sp, #28]
 8003ee8:	e004      	b.n	8003ef4 <_vfiprintf_r+0x128>
 8003eea:	4252      	negs	r2, r2
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	9207      	str	r2, [sp, #28]
 8003ef2:	9304      	str	r3, [sp, #16]
 8003ef4:	f898 3000 	ldrb.w	r3, [r8]
 8003ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8003efa:	d10e      	bne.n	8003f1a <_vfiprintf_r+0x14e>
 8003efc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003f00:	2b2a      	cmp	r3, #42	; 0x2a
 8003f02:	d138      	bne.n	8003f76 <_vfiprintf_r+0x1aa>
 8003f04:	9b03      	ldr	r3, [sp, #12]
 8003f06:	f108 0802 	add.w	r8, r8, #2
 8003f0a:	1d1a      	adds	r2, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	9203      	str	r2, [sp, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bfb8      	it	lt
 8003f14:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f18:	9305      	str	r3, [sp, #20]
 8003f1a:	4d33      	ldr	r5, [pc, #204]	; (8003fe8 <_vfiprintf_r+0x21c>)
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	f898 1000 	ldrb.w	r1, [r8]
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 fc4c 	bl	80047c0 <memchr>
 8003f28:	b140      	cbz	r0, 8003f3c <_vfiprintf_r+0x170>
 8003f2a:	2340      	movs	r3, #64	; 0x40
 8003f2c:	1b40      	subs	r0, r0, r5
 8003f2e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f32:	9b04      	ldr	r3, [sp, #16]
 8003f34:	f108 0801 	add.w	r8, r8, #1
 8003f38:	4303      	orrs	r3, r0
 8003f3a:	9304      	str	r3, [sp, #16]
 8003f3c:	f898 1000 	ldrb.w	r1, [r8]
 8003f40:	2206      	movs	r2, #6
 8003f42:	482a      	ldr	r0, [pc, #168]	; (8003fec <_vfiprintf_r+0x220>)
 8003f44:	f108 0701 	add.w	r7, r8, #1
 8003f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f4c:	f000 fc38 	bl	80047c0 <memchr>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d037      	beq.n	8003fc4 <_vfiprintf_r+0x1f8>
 8003f54:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <_vfiprintf_r+0x224>)
 8003f56:	bb1b      	cbnz	r3, 8003fa0 <_vfiprintf_r+0x1d4>
 8003f58:	9b03      	ldr	r3, [sp, #12]
 8003f5a:	3307      	adds	r3, #7
 8003f5c:	f023 0307 	bic.w	r3, r3, #7
 8003f60:	3308      	adds	r3, #8
 8003f62:	9303      	str	r3, [sp, #12]
 8003f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f66:	444b      	add	r3, r9
 8003f68:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6a:	e750      	b.n	8003e0e <_vfiprintf_r+0x42>
 8003f6c:	fb05 3202 	mla	r2, r5, r2, r3
 8003f70:	2001      	movs	r0, #1
 8003f72:	4688      	mov	r8, r1
 8003f74:	e78a      	b.n	8003e8c <_vfiprintf_r+0xc0>
 8003f76:	2300      	movs	r3, #0
 8003f78:	250a      	movs	r5, #10
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f108 0801 	add.w	r8, r8, #1
 8003f80:	9305      	str	r3, [sp, #20]
 8003f82:	4640      	mov	r0, r8
 8003f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f88:	3a30      	subs	r2, #48	; 0x30
 8003f8a:	2a09      	cmp	r2, #9
 8003f8c:	d903      	bls.n	8003f96 <_vfiprintf_r+0x1ca>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0c3      	beq.n	8003f1a <_vfiprintf_r+0x14e>
 8003f92:	9105      	str	r1, [sp, #20]
 8003f94:	e7c1      	b.n	8003f1a <_vfiprintf_r+0x14e>
 8003f96:	fb05 2101 	mla	r1, r5, r1, r2
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	e7f0      	b.n	8003f82 <_vfiprintf_r+0x1b6>
 8003fa0:	ab03      	add	r3, sp, #12
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <_vfiprintf_r+0x228>)
 8003fa8:	a904      	add	r1, sp, #16
 8003faa:	4630      	mov	r0, r6
 8003fac:	f3af 8000 	nop.w
 8003fb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003fb4:	4681      	mov	r9, r0
 8003fb6:	d1d5      	bne.n	8003f64 <_vfiprintf_r+0x198>
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	065b      	lsls	r3, r3, #25
 8003fbc:	f53f af7e 	bmi.w	8003ebc <_vfiprintf_r+0xf0>
 8003fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc2:	e77d      	b.n	8003ec0 <_vfiprintf_r+0xf4>
 8003fc4:	ab03      	add	r3, sp, #12
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	4622      	mov	r2, r4
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <_vfiprintf_r+0x228>)
 8003fcc:	a904      	add	r1, sp, #16
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 f888 	bl	80040e4 <_printf_i>
 8003fd4:	e7ec      	b.n	8003fb0 <_vfiprintf_r+0x1e4>
 8003fd6:	bf00      	nop
 8003fd8:	08004c10 	.word	0x08004c10
 8003fdc:	08004c50 	.word	0x08004c50
 8003fe0:	08004c30 	.word	0x08004c30
 8003fe4:	08004bf0 	.word	0x08004bf0
 8003fe8:	08004c56 	.word	0x08004c56
 8003fec:	08004c5a 	.word	0x08004c5a
 8003ff0:	00000000 	.word	0x00000000
 8003ff4:	08003da7 	.word	0x08003da7

08003ff8 <_printf_common>:
 8003ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	4691      	mov	r9, r2
 8003ffe:	461f      	mov	r7, r3
 8004000:	688a      	ldr	r2, [r1, #8]
 8004002:	690b      	ldr	r3, [r1, #16]
 8004004:	4606      	mov	r6, r0
 8004006:	4293      	cmp	r3, r2
 8004008:	bfb8      	it	lt
 800400a:	4613      	movlt	r3, r2
 800400c:	f8c9 3000 	str.w	r3, [r9]
 8004010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004014:	460c      	mov	r4, r1
 8004016:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800401a:	b112      	cbz	r2, 8004022 <_printf_common+0x2a>
 800401c:	3301      	adds	r3, #1
 800401e:	f8c9 3000 	str.w	r3, [r9]
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	0699      	lsls	r1, r3, #26
 8004026:	bf42      	ittt	mi
 8004028:	f8d9 3000 	ldrmi.w	r3, [r9]
 800402c:	3302      	addmi	r3, #2
 800402e:	f8c9 3000 	strmi.w	r3, [r9]
 8004032:	6825      	ldr	r5, [r4, #0]
 8004034:	f015 0506 	ands.w	r5, r5, #6
 8004038:	d107      	bne.n	800404a <_printf_common+0x52>
 800403a:	f104 0a19 	add.w	sl, r4, #25
 800403e:	68e3      	ldr	r3, [r4, #12]
 8004040:	f8d9 2000 	ldr.w	r2, [r9]
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	42ab      	cmp	r3, r5
 8004048:	dc29      	bgt.n	800409e <_printf_common+0xa6>
 800404a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800404e:	6822      	ldr	r2, [r4, #0]
 8004050:	3300      	adds	r3, #0
 8004052:	bf18      	it	ne
 8004054:	2301      	movne	r3, #1
 8004056:	0692      	lsls	r2, r2, #26
 8004058:	d42e      	bmi.n	80040b8 <_printf_common+0xc0>
 800405a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800405e:	4639      	mov	r1, r7
 8004060:	4630      	mov	r0, r6
 8004062:	47c0      	blx	r8
 8004064:	3001      	adds	r0, #1
 8004066:	d021      	beq.n	80040ac <_printf_common+0xb4>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	68e5      	ldr	r5, [r4, #12]
 800406c:	f003 0306 	and.w	r3, r3, #6
 8004070:	2b04      	cmp	r3, #4
 8004072:	bf18      	it	ne
 8004074:	2500      	movne	r5, #0
 8004076:	f8d9 2000 	ldr.w	r2, [r9]
 800407a:	f04f 0900 	mov.w	r9, #0
 800407e:	bf08      	it	eq
 8004080:	1aad      	subeq	r5, r5, r2
 8004082:	68a3      	ldr	r3, [r4, #8]
 8004084:	6922      	ldr	r2, [r4, #16]
 8004086:	bf08      	it	eq
 8004088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800408c:	4293      	cmp	r3, r2
 800408e:	bfc4      	itt	gt
 8004090:	1a9b      	subgt	r3, r3, r2
 8004092:	18ed      	addgt	r5, r5, r3
 8004094:	341a      	adds	r4, #26
 8004096:	454d      	cmp	r5, r9
 8004098:	d11a      	bne.n	80040d0 <_printf_common+0xd8>
 800409a:	2000      	movs	r0, #0
 800409c:	e008      	b.n	80040b0 <_printf_common+0xb8>
 800409e:	2301      	movs	r3, #1
 80040a0:	4652      	mov	r2, sl
 80040a2:	4639      	mov	r1, r7
 80040a4:	4630      	mov	r0, r6
 80040a6:	47c0      	blx	r8
 80040a8:	3001      	adds	r0, #1
 80040aa:	d103      	bne.n	80040b4 <_printf_common+0xbc>
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b4:	3501      	adds	r5, #1
 80040b6:	e7c2      	b.n	800403e <_printf_common+0x46>
 80040b8:	2030      	movs	r0, #48	; 0x30
 80040ba:	18e1      	adds	r1, r4, r3
 80040bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040c6:	4422      	add	r2, r4
 80040c8:	3302      	adds	r3, #2
 80040ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ce:	e7c4      	b.n	800405a <_printf_common+0x62>
 80040d0:	2301      	movs	r3, #1
 80040d2:	4622      	mov	r2, r4
 80040d4:	4639      	mov	r1, r7
 80040d6:	4630      	mov	r0, r6
 80040d8:	47c0      	blx	r8
 80040da:	3001      	adds	r0, #1
 80040dc:	d0e6      	beq.n	80040ac <_printf_common+0xb4>
 80040de:	f109 0901 	add.w	r9, r9, #1
 80040e2:	e7d8      	b.n	8004096 <_printf_common+0x9e>

080040e4 <_printf_i>:
 80040e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80040ec:	460c      	mov	r4, r1
 80040ee:	7e09      	ldrb	r1, [r1, #24]
 80040f0:	b085      	sub	sp, #20
 80040f2:	296e      	cmp	r1, #110	; 0x6e
 80040f4:	4617      	mov	r7, r2
 80040f6:	4606      	mov	r6, r0
 80040f8:	4698      	mov	r8, r3
 80040fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040fc:	f000 80b3 	beq.w	8004266 <_printf_i+0x182>
 8004100:	d822      	bhi.n	8004148 <_printf_i+0x64>
 8004102:	2963      	cmp	r1, #99	; 0x63
 8004104:	d036      	beq.n	8004174 <_printf_i+0x90>
 8004106:	d80a      	bhi.n	800411e <_printf_i+0x3a>
 8004108:	2900      	cmp	r1, #0
 800410a:	f000 80b9 	beq.w	8004280 <_printf_i+0x19c>
 800410e:	2958      	cmp	r1, #88	; 0x58
 8004110:	f000 8083 	beq.w	800421a <_printf_i+0x136>
 8004114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004118:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800411c:	e032      	b.n	8004184 <_printf_i+0xa0>
 800411e:	2964      	cmp	r1, #100	; 0x64
 8004120:	d001      	beq.n	8004126 <_printf_i+0x42>
 8004122:	2969      	cmp	r1, #105	; 0x69
 8004124:	d1f6      	bne.n	8004114 <_printf_i+0x30>
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	6813      	ldr	r3, [r2, #0]
 800412a:	0605      	lsls	r5, r0, #24
 800412c:	f103 0104 	add.w	r1, r3, #4
 8004130:	d52a      	bpl.n	8004188 <_printf_i+0xa4>
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6011      	str	r1, [r2, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	da03      	bge.n	8004142 <_printf_i+0x5e>
 800413a:	222d      	movs	r2, #45	; 0x2d
 800413c:	425b      	negs	r3, r3
 800413e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004142:	486f      	ldr	r0, [pc, #444]	; (8004300 <_printf_i+0x21c>)
 8004144:	220a      	movs	r2, #10
 8004146:	e039      	b.n	80041bc <_printf_i+0xd8>
 8004148:	2973      	cmp	r1, #115	; 0x73
 800414a:	f000 809d 	beq.w	8004288 <_printf_i+0x1a4>
 800414e:	d808      	bhi.n	8004162 <_printf_i+0x7e>
 8004150:	296f      	cmp	r1, #111	; 0x6f
 8004152:	d020      	beq.n	8004196 <_printf_i+0xb2>
 8004154:	2970      	cmp	r1, #112	; 0x70
 8004156:	d1dd      	bne.n	8004114 <_printf_i+0x30>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	f043 0320 	orr.w	r3, r3, #32
 800415e:	6023      	str	r3, [r4, #0]
 8004160:	e003      	b.n	800416a <_printf_i+0x86>
 8004162:	2975      	cmp	r1, #117	; 0x75
 8004164:	d017      	beq.n	8004196 <_printf_i+0xb2>
 8004166:	2978      	cmp	r1, #120	; 0x78
 8004168:	d1d4      	bne.n	8004114 <_printf_i+0x30>
 800416a:	2378      	movs	r3, #120	; 0x78
 800416c:	4865      	ldr	r0, [pc, #404]	; (8004304 <_printf_i+0x220>)
 800416e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004172:	e055      	b.n	8004220 <_printf_i+0x13c>
 8004174:	6813      	ldr	r3, [r2, #0]
 8004176:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800417a:	1d19      	adds	r1, r3, #4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6011      	str	r1, [r2, #0]
 8004180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004184:	2301      	movs	r3, #1
 8004186:	e08c      	b.n	80042a2 <_printf_i+0x1be>
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800418e:	6011      	str	r1, [r2, #0]
 8004190:	bf18      	it	ne
 8004192:	b21b      	sxthne	r3, r3
 8004194:	e7cf      	b.n	8004136 <_printf_i+0x52>
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	6825      	ldr	r5, [r4, #0]
 800419a:	1d18      	adds	r0, r3, #4
 800419c:	6010      	str	r0, [r2, #0]
 800419e:	0628      	lsls	r0, r5, #24
 80041a0:	d501      	bpl.n	80041a6 <_printf_i+0xc2>
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	e002      	b.n	80041ac <_printf_i+0xc8>
 80041a6:	0668      	lsls	r0, r5, #25
 80041a8:	d5fb      	bpl.n	80041a2 <_printf_i+0xbe>
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	296f      	cmp	r1, #111	; 0x6f
 80041ae:	bf14      	ite	ne
 80041b0:	220a      	movne	r2, #10
 80041b2:	2208      	moveq	r2, #8
 80041b4:	4852      	ldr	r0, [pc, #328]	; (8004300 <_printf_i+0x21c>)
 80041b6:	2100      	movs	r1, #0
 80041b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041bc:	6865      	ldr	r5, [r4, #4]
 80041be:	2d00      	cmp	r5, #0
 80041c0:	60a5      	str	r5, [r4, #8]
 80041c2:	f2c0 8095 	blt.w	80042f0 <_printf_i+0x20c>
 80041c6:	6821      	ldr	r1, [r4, #0]
 80041c8:	f021 0104 	bic.w	r1, r1, #4
 80041cc:	6021      	str	r1, [r4, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d13d      	bne.n	800424e <_printf_i+0x16a>
 80041d2:	2d00      	cmp	r5, #0
 80041d4:	f040 808e 	bne.w	80042f4 <_printf_i+0x210>
 80041d8:	4665      	mov	r5, ip
 80041da:	2a08      	cmp	r2, #8
 80041dc:	d10b      	bne.n	80041f6 <_printf_i+0x112>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	07db      	lsls	r3, r3, #31
 80041e2:	d508      	bpl.n	80041f6 <_printf_i+0x112>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	6862      	ldr	r2, [r4, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	bfde      	ittt	le
 80041ec:	2330      	movle	r3, #48	; 0x30
 80041ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041f6:	ebac 0305 	sub.w	r3, ip, r5
 80041fa:	6123      	str	r3, [r4, #16]
 80041fc:	f8cd 8000 	str.w	r8, [sp]
 8004200:	463b      	mov	r3, r7
 8004202:	aa03      	add	r2, sp, #12
 8004204:	4621      	mov	r1, r4
 8004206:	4630      	mov	r0, r6
 8004208:	f7ff fef6 	bl	8003ff8 <_printf_common>
 800420c:	3001      	adds	r0, #1
 800420e:	d14d      	bne.n	80042ac <_printf_i+0x1c8>
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	b005      	add	sp, #20
 8004216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800421a:	4839      	ldr	r0, [pc, #228]	; (8004300 <_printf_i+0x21c>)
 800421c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004220:	6813      	ldr	r3, [r2, #0]
 8004222:	6821      	ldr	r1, [r4, #0]
 8004224:	1d1d      	adds	r5, r3, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6015      	str	r5, [r2, #0]
 800422a:	060a      	lsls	r2, r1, #24
 800422c:	d50b      	bpl.n	8004246 <_printf_i+0x162>
 800422e:	07ca      	lsls	r2, r1, #31
 8004230:	bf44      	itt	mi
 8004232:	f041 0120 	orrmi.w	r1, r1, #32
 8004236:	6021      	strmi	r1, [r4, #0]
 8004238:	b91b      	cbnz	r3, 8004242 <_printf_i+0x15e>
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	f022 0220 	bic.w	r2, r2, #32
 8004240:	6022      	str	r2, [r4, #0]
 8004242:	2210      	movs	r2, #16
 8004244:	e7b7      	b.n	80041b6 <_printf_i+0xd2>
 8004246:	064d      	lsls	r5, r1, #25
 8004248:	bf48      	it	mi
 800424a:	b29b      	uxthmi	r3, r3
 800424c:	e7ef      	b.n	800422e <_printf_i+0x14a>
 800424e:	4665      	mov	r5, ip
 8004250:	fbb3 f1f2 	udiv	r1, r3, r2
 8004254:	fb02 3311 	mls	r3, r2, r1, r3
 8004258:	5cc3      	ldrb	r3, [r0, r3]
 800425a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800425e:	460b      	mov	r3, r1
 8004260:	2900      	cmp	r1, #0
 8004262:	d1f5      	bne.n	8004250 <_printf_i+0x16c>
 8004264:	e7b9      	b.n	80041da <_printf_i+0xf6>
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	6825      	ldr	r5, [r4, #0]
 800426a:	1d18      	adds	r0, r3, #4
 800426c:	6961      	ldr	r1, [r4, #20]
 800426e:	6010      	str	r0, [r2, #0]
 8004270:	0628      	lsls	r0, r5, #24
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	d501      	bpl.n	800427a <_printf_i+0x196>
 8004276:	6019      	str	r1, [r3, #0]
 8004278:	e002      	b.n	8004280 <_printf_i+0x19c>
 800427a:	066a      	lsls	r2, r5, #25
 800427c:	d5fb      	bpl.n	8004276 <_printf_i+0x192>
 800427e:	8019      	strh	r1, [r3, #0]
 8004280:	2300      	movs	r3, #0
 8004282:	4665      	mov	r5, ip
 8004284:	6123      	str	r3, [r4, #16]
 8004286:	e7b9      	b.n	80041fc <_printf_i+0x118>
 8004288:	6813      	ldr	r3, [r2, #0]
 800428a:	1d19      	adds	r1, r3, #4
 800428c:	6011      	str	r1, [r2, #0]
 800428e:	681d      	ldr	r5, [r3, #0]
 8004290:	6862      	ldr	r2, [r4, #4]
 8004292:	2100      	movs	r1, #0
 8004294:	4628      	mov	r0, r5
 8004296:	f000 fa93 	bl	80047c0 <memchr>
 800429a:	b108      	cbz	r0, 80042a0 <_printf_i+0x1bc>
 800429c:	1b40      	subs	r0, r0, r5
 800429e:	6060      	str	r0, [r4, #4]
 80042a0:	6863      	ldr	r3, [r4, #4]
 80042a2:	6123      	str	r3, [r4, #16]
 80042a4:	2300      	movs	r3, #0
 80042a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042aa:	e7a7      	b.n	80041fc <_printf_i+0x118>
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	462a      	mov	r2, r5
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	47c0      	blx	r8
 80042b6:	3001      	adds	r0, #1
 80042b8:	d0aa      	beq.n	8004210 <_printf_i+0x12c>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	079b      	lsls	r3, r3, #30
 80042be:	d413      	bmi.n	80042e8 <_printf_i+0x204>
 80042c0:	68e0      	ldr	r0, [r4, #12]
 80042c2:	9b03      	ldr	r3, [sp, #12]
 80042c4:	4298      	cmp	r0, r3
 80042c6:	bfb8      	it	lt
 80042c8:	4618      	movlt	r0, r3
 80042ca:	e7a3      	b.n	8004214 <_printf_i+0x130>
 80042cc:	2301      	movs	r3, #1
 80042ce:	464a      	mov	r2, r9
 80042d0:	4639      	mov	r1, r7
 80042d2:	4630      	mov	r0, r6
 80042d4:	47c0      	blx	r8
 80042d6:	3001      	adds	r0, #1
 80042d8:	d09a      	beq.n	8004210 <_printf_i+0x12c>
 80042da:	3501      	adds	r5, #1
 80042dc:	68e3      	ldr	r3, [r4, #12]
 80042de:	9a03      	ldr	r2, [sp, #12]
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	42ab      	cmp	r3, r5
 80042e4:	dcf2      	bgt.n	80042cc <_printf_i+0x1e8>
 80042e6:	e7eb      	b.n	80042c0 <_printf_i+0x1dc>
 80042e8:	2500      	movs	r5, #0
 80042ea:	f104 0919 	add.w	r9, r4, #25
 80042ee:	e7f5      	b.n	80042dc <_printf_i+0x1f8>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ac      	bne.n	800424e <_printf_i+0x16a>
 80042f4:	7803      	ldrb	r3, [r0, #0]
 80042f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042fe:	e76c      	b.n	80041da <_printf_i+0xf6>
 8004300:	08004c61 	.word	0x08004c61
 8004304:	08004c72 	.word	0x08004c72

08004308 <_sbrk_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	2300      	movs	r3, #0
 800430c:	4c05      	ldr	r4, [pc, #20]	; (8004324 <_sbrk_r+0x1c>)
 800430e:	4605      	mov	r5, r0
 8004310:	4608      	mov	r0, r1
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	f7ff f9fa 	bl	800370c <_sbrk>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d102      	bne.n	8004322 <_sbrk_r+0x1a>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	b103      	cbz	r3, 8004322 <_sbrk_r+0x1a>
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	200001f8 	.word	0x200001f8

08004328 <__sread>:
 8004328:	b510      	push	{r4, lr}
 800432a:	460c      	mov	r4, r1
 800432c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004330:	f000 faec 	bl	800490c <_read_r>
 8004334:	2800      	cmp	r0, #0
 8004336:	bfab      	itete	ge
 8004338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800433a:	89a3      	ldrhlt	r3, [r4, #12]
 800433c:	181b      	addge	r3, r3, r0
 800433e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004342:	bfac      	ite	ge
 8004344:	6563      	strge	r3, [r4, #84]	; 0x54
 8004346:	81a3      	strhlt	r3, [r4, #12]
 8004348:	bd10      	pop	{r4, pc}

0800434a <__swrite>:
 800434a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800434e:	461f      	mov	r7, r3
 8004350:	898b      	ldrh	r3, [r1, #12]
 8004352:	4605      	mov	r5, r0
 8004354:	05db      	lsls	r3, r3, #23
 8004356:	460c      	mov	r4, r1
 8004358:	4616      	mov	r6, r2
 800435a:	d505      	bpl.n	8004368 <__swrite+0x1e>
 800435c:	2302      	movs	r3, #2
 800435e:	2200      	movs	r2, #0
 8004360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004364:	f000 f9b6 	bl	80046d4 <_lseek_r>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	4632      	mov	r2, r6
 800436c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004376:	463b      	mov	r3, r7
 8004378:	4628      	mov	r0, r5
 800437a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800437e:	f000 b869 	b.w	8004454 <_write_r>

08004382 <__sseek>:
 8004382:	b510      	push	{r4, lr}
 8004384:	460c      	mov	r4, r1
 8004386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438a:	f000 f9a3 	bl	80046d4 <_lseek_r>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	bf15      	itete	ne
 8004394:	6560      	strne	r0, [r4, #84]	; 0x54
 8004396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800439a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800439e:	81a3      	strheq	r3, [r4, #12]
 80043a0:	bf18      	it	ne
 80043a2:	81a3      	strhne	r3, [r4, #12]
 80043a4:	bd10      	pop	{r4, pc}

080043a6 <__sclose>:
 80043a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043aa:	f000 b8d3 	b.w	8004554 <_close_r>
	...

080043b0 <__swbuf_r>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	460e      	mov	r6, r1
 80043b4:	4614      	mov	r4, r2
 80043b6:	4605      	mov	r5, r0
 80043b8:	b118      	cbz	r0, 80043c2 <__swbuf_r+0x12>
 80043ba:	6983      	ldr	r3, [r0, #24]
 80043bc:	b90b      	cbnz	r3, 80043c2 <__swbuf_r+0x12>
 80043be:	f7ff faa7 	bl	8003910 <__sinit>
 80043c2:	4b21      	ldr	r3, [pc, #132]	; (8004448 <__swbuf_r+0x98>)
 80043c4:	429c      	cmp	r4, r3
 80043c6:	d12a      	bne.n	800441e <__swbuf_r+0x6e>
 80043c8:	686c      	ldr	r4, [r5, #4]
 80043ca:	69a3      	ldr	r3, [r4, #24]
 80043cc:	60a3      	str	r3, [r4, #8]
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	071a      	lsls	r2, r3, #28
 80043d2:	d52e      	bpl.n	8004432 <__swbuf_r+0x82>
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	b363      	cbz	r3, 8004432 <__swbuf_r+0x82>
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	6820      	ldr	r0, [r4, #0]
 80043dc:	b2f6      	uxtb	r6, r6
 80043de:	1ac0      	subs	r0, r0, r3
 80043e0:	6963      	ldr	r3, [r4, #20]
 80043e2:	4637      	mov	r7, r6
 80043e4:	4283      	cmp	r3, r0
 80043e6:	dc04      	bgt.n	80043f2 <__swbuf_r+0x42>
 80043e8:	4621      	mov	r1, r4
 80043ea:	4628      	mov	r0, r5
 80043ec:	f000 f948 	bl	8004680 <_fflush_r>
 80043f0:	bb28      	cbnz	r0, 800443e <__swbuf_r+0x8e>
 80043f2:	68a3      	ldr	r3, [r4, #8]
 80043f4:	3001      	adds	r0, #1
 80043f6:	3b01      	subs	r3, #1
 80043f8:	60a3      	str	r3, [r4, #8]
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	6022      	str	r2, [r4, #0]
 8004400:	701e      	strb	r6, [r3, #0]
 8004402:	6963      	ldr	r3, [r4, #20]
 8004404:	4283      	cmp	r3, r0
 8004406:	d004      	beq.n	8004412 <__swbuf_r+0x62>
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	07db      	lsls	r3, r3, #31
 800440c:	d519      	bpl.n	8004442 <__swbuf_r+0x92>
 800440e:	2e0a      	cmp	r6, #10
 8004410:	d117      	bne.n	8004442 <__swbuf_r+0x92>
 8004412:	4621      	mov	r1, r4
 8004414:	4628      	mov	r0, r5
 8004416:	f000 f933 	bl	8004680 <_fflush_r>
 800441a:	b190      	cbz	r0, 8004442 <__swbuf_r+0x92>
 800441c:	e00f      	b.n	800443e <__swbuf_r+0x8e>
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <__swbuf_r+0x9c>)
 8004420:	429c      	cmp	r4, r3
 8004422:	d101      	bne.n	8004428 <__swbuf_r+0x78>
 8004424:	68ac      	ldr	r4, [r5, #8]
 8004426:	e7d0      	b.n	80043ca <__swbuf_r+0x1a>
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <__swbuf_r+0xa0>)
 800442a:	429c      	cmp	r4, r3
 800442c:	bf08      	it	eq
 800442e:	68ec      	ldreq	r4, [r5, #12]
 8004430:	e7cb      	b.n	80043ca <__swbuf_r+0x1a>
 8004432:	4621      	mov	r1, r4
 8004434:	4628      	mov	r0, r5
 8004436:	f000 f81f 	bl	8004478 <__swsetup_r>
 800443a:	2800      	cmp	r0, #0
 800443c:	d0cc      	beq.n	80043d8 <__swbuf_r+0x28>
 800443e:	f04f 37ff 	mov.w	r7, #4294967295
 8004442:	4638      	mov	r0, r7
 8004444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004446:	bf00      	nop
 8004448:	08004c10 	.word	0x08004c10
 800444c:	08004c30 	.word	0x08004c30
 8004450:	08004bf0 	.word	0x08004bf0

08004454 <_write_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4605      	mov	r5, r0
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	2200      	movs	r2, #0
 800445e:	4c05      	ldr	r4, [pc, #20]	; (8004474 <_write_r+0x20>)
 8004460:	6022      	str	r2, [r4, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	f7fe f924 	bl	80026b0 <_write>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d102      	bne.n	8004472 <_write_r+0x1e>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	b103      	cbz	r3, 8004472 <_write_r+0x1e>
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	200001f8 	.word	0x200001f8

08004478 <__swsetup_r>:
 8004478:	4b32      	ldr	r3, [pc, #200]	; (8004544 <__swsetup_r+0xcc>)
 800447a:	b570      	push	{r4, r5, r6, lr}
 800447c:	681d      	ldr	r5, [r3, #0]
 800447e:	4606      	mov	r6, r0
 8004480:	460c      	mov	r4, r1
 8004482:	b125      	cbz	r5, 800448e <__swsetup_r+0x16>
 8004484:	69ab      	ldr	r3, [r5, #24]
 8004486:	b913      	cbnz	r3, 800448e <__swsetup_r+0x16>
 8004488:	4628      	mov	r0, r5
 800448a:	f7ff fa41 	bl	8003910 <__sinit>
 800448e:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <__swsetup_r+0xd0>)
 8004490:	429c      	cmp	r4, r3
 8004492:	d10f      	bne.n	80044b4 <__swsetup_r+0x3c>
 8004494:	686c      	ldr	r4, [r5, #4]
 8004496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800449a:	b29a      	uxth	r2, r3
 800449c:	0715      	lsls	r5, r2, #28
 800449e:	d42c      	bmi.n	80044fa <__swsetup_r+0x82>
 80044a0:	06d0      	lsls	r0, r2, #27
 80044a2:	d411      	bmi.n	80044c8 <__swsetup_r+0x50>
 80044a4:	2209      	movs	r2, #9
 80044a6:	6032      	str	r2, [r6, #0]
 80044a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ac:	81a3      	strh	r3, [r4, #12]
 80044ae:	f04f 30ff 	mov.w	r0, #4294967295
 80044b2:	e03e      	b.n	8004532 <__swsetup_r+0xba>
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <__swsetup_r+0xd4>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d101      	bne.n	80044be <__swsetup_r+0x46>
 80044ba:	68ac      	ldr	r4, [r5, #8]
 80044bc:	e7eb      	b.n	8004496 <__swsetup_r+0x1e>
 80044be:	4b24      	ldr	r3, [pc, #144]	; (8004550 <__swsetup_r+0xd8>)
 80044c0:	429c      	cmp	r4, r3
 80044c2:	bf08      	it	eq
 80044c4:	68ec      	ldreq	r4, [r5, #12]
 80044c6:	e7e6      	b.n	8004496 <__swsetup_r+0x1e>
 80044c8:	0751      	lsls	r1, r2, #29
 80044ca:	d512      	bpl.n	80044f2 <__swsetup_r+0x7a>
 80044cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ce:	b141      	cbz	r1, 80044e2 <__swsetup_r+0x6a>
 80044d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044d4:	4299      	cmp	r1, r3
 80044d6:	d002      	beq.n	80044de <__swsetup_r+0x66>
 80044d8:	4630      	mov	r0, r6
 80044da:	f000 f9a5 	bl	8004828 <_free_r>
 80044de:	2300      	movs	r3, #0
 80044e0:	6363      	str	r3, [r4, #52]	; 0x34
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044e8:	81a3      	strh	r3, [r4, #12]
 80044ea:	2300      	movs	r3, #0
 80044ec:	6063      	str	r3, [r4, #4]
 80044ee:	6923      	ldr	r3, [r4, #16]
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	f043 0308 	orr.w	r3, r3, #8
 80044f8:	81a3      	strh	r3, [r4, #12]
 80044fa:	6923      	ldr	r3, [r4, #16]
 80044fc:	b94b      	cbnz	r3, 8004512 <__swsetup_r+0x9a>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004508:	d003      	beq.n	8004512 <__swsetup_r+0x9a>
 800450a:	4621      	mov	r1, r4
 800450c:	4630      	mov	r0, r6
 800450e:	f000 f917 	bl	8004740 <__smakebuf_r>
 8004512:	89a2      	ldrh	r2, [r4, #12]
 8004514:	f012 0301 	ands.w	r3, r2, #1
 8004518:	d00c      	beq.n	8004534 <__swsetup_r+0xbc>
 800451a:	2300      	movs	r3, #0
 800451c:	60a3      	str	r3, [r4, #8]
 800451e:	6963      	ldr	r3, [r4, #20]
 8004520:	425b      	negs	r3, r3
 8004522:	61a3      	str	r3, [r4, #24]
 8004524:	6923      	ldr	r3, [r4, #16]
 8004526:	b953      	cbnz	r3, 800453e <__swsetup_r+0xc6>
 8004528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800452c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004530:	d1ba      	bne.n	80044a8 <__swsetup_r+0x30>
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	0792      	lsls	r2, r2, #30
 8004536:	bf58      	it	pl
 8004538:	6963      	ldrpl	r3, [r4, #20]
 800453a:	60a3      	str	r3, [r4, #8]
 800453c:	e7f2      	b.n	8004524 <__swsetup_r+0xac>
 800453e:	2000      	movs	r0, #0
 8004540:	e7f7      	b.n	8004532 <__swsetup_r+0xba>
 8004542:	bf00      	nop
 8004544:	2000000c 	.word	0x2000000c
 8004548:	08004c10 	.word	0x08004c10
 800454c:	08004c30 	.word	0x08004c30
 8004550:	08004bf0 	.word	0x08004bf0

08004554 <_close_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	2300      	movs	r3, #0
 8004558:	4c05      	ldr	r4, [pc, #20]	; (8004570 <_close_r+0x1c>)
 800455a:	4605      	mov	r5, r0
 800455c:	4608      	mov	r0, r1
 800455e:	6023      	str	r3, [r4, #0]
 8004560:	f7ff f8a3 	bl	80036aa <_close>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_close_r+0x1a>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	b103      	cbz	r3, 800456e <_close_r+0x1a>
 800456c:	602b      	str	r3, [r5, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	200001f8 	.word	0x200001f8

08004574 <__sflush_r>:
 8004574:	898a      	ldrh	r2, [r1, #12]
 8004576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457a:	4605      	mov	r5, r0
 800457c:	0710      	lsls	r0, r2, #28
 800457e:	460c      	mov	r4, r1
 8004580:	d458      	bmi.n	8004634 <__sflush_r+0xc0>
 8004582:	684b      	ldr	r3, [r1, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	dc05      	bgt.n	8004594 <__sflush_r+0x20>
 8004588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	dc02      	bgt.n	8004594 <__sflush_r+0x20>
 800458e:	2000      	movs	r0, #0
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004596:	2e00      	cmp	r6, #0
 8004598:	d0f9      	beq.n	800458e <__sflush_r+0x1a>
 800459a:	2300      	movs	r3, #0
 800459c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045a0:	682f      	ldr	r7, [r5, #0]
 80045a2:	6a21      	ldr	r1, [r4, #32]
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	d032      	beq.n	800460e <__sflush_r+0x9a>
 80045a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	075a      	lsls	r2, r3, #29
 80045ae:	d505      	bpl.n	80045bc <__sflush_r+0x48>
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	1ac0      	subs	r0, r0, r3
 80045b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045b6:	b10b      	cbz	r3, 80045bc <__sflush_r+0x48>
 80045b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ba:	1ac0      	subs	r0, r0, r3
 80045bc:	2300      	movs	r3, #0
 80045be:	4602      	mov	r2, r0
 80045c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045c2:	6a21      	ldr	r1, [r4, #32]
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b0      	blx	r6
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	d106      	bne.n	80045dc <__sflush_r+0x68>
 80045ce:	6829      	ldr	r1, [r5, #0]
 80045d0:	291d      	cmp	r1, #29
 80045d2:	d848      	bhi.n	8004666 <__sflush_r+0xf2>
 80045d4:	4a29      	ldr	r2, [pc, #164]	; (800467c <__sflush_r+0x108>)
 80045d6:	40ca      	lsrs	r2, r1
 80045d8:	07d6      	lsls	r6, r2, #31
 80045da:	d544      	bpl.n	8004666 <__sflush_r+0xf2>
 80045dc:	2200      	movs	r2, #0
 80045de:	6062      	str	r2, [r4, #4]
 80045e0:	6922      	ldr	r2, [r4, #16]
 80045e2:	04d9      	lsls	r1, r3, #19
 80045e4:	6022      	str	r2, [r4, #0]
 80045e6:	d504      	bpl.n	80045f2 <__sflush_r+0x7e>
 80045e8:	1c42      	adds	r2, r0, #1
 80045ea:	d101      	bne.n	80045f0 <__sflush_r+0x7c>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	b903      	cbnz	r3, 80045f2 <__sflush_r+0x7e>
 80045f0:	6560      	str	r0, [r4, #84]	; 0x54
 80045f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f4:	602f      	str	r7, [r5, #0]
 80045f6:	2900      	cmp	r1, #0
 80045f8:	d0c9      	beq.n	800458e <__sflush_r+0x1a>
 80045fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045fe:	4299      	cmp	r1, r3
 8004600:	d002      	beq.n	8004608 <__sflush_r+0x94>
 8004602:	4628      	mov	r0, r5
 8004604:	f000 f910 	bl	8004828 <_free_r>
 8004608:	2000      	movs	r0, #0
 800460a:	6360      	str	r0, [r4, #52]	; 0x34
 800460c:	e7c0      	b.n	8004590 <__sflush_r+0x1c>
 800460e:	2301      	movs	r3, #1
 8004610:	4628      	mov	r0, r5
 8004612:	47b0      	blx	r6
 8004614:	1c41      	adds	r1, r0, #1
 8004616:	d1c8      	bne.n	80045aa <__sflush_r+0x36>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0c5      	beq.n	80045aa <__sflush_r+0x36>
 800461e:	2b1d      	cmp	r3, #29
 8004620:	d001      	beq.n	8004626 <__sflush_r+0xb2>
 8004622:	2b16      	cmp	r3, #22
 8004624:	d101      	bne.n	800462a <__sflush_r+0xb6>
 8004626:	602f      	str	r7, [r5, #0]
 8004628:	e7b1      	b.n	800458e <__sflush_r+0x1a>
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	e7ad      	b.n	8004590 <__sflush_r+0x1c>
 8004634:	690f      	ldr	r7, [r1, #16]
 8004636:	2f00      	cmp	r7, #0
 8004638:	d0a9      	beq.n	800458e <__sflush_r+0x1a>
 800463a:	0793      	lsls	r3, r2, #30
 800463c:	bf18      	it	ne
 800463e:	2300      	movne	r3, #0
 8004640:	680e      	ldr	r6, [r1, #0]
 8004642:	bf08      	it	eq
 8004644:	694b      	ldreq	r3, [r1, #20]
 8004646:	eba6 0807 	sub.w	r8, r6, r7
 800464a:	600f      	str	r7, [r1, #0]
 800464c:	608b      	str	r3, [r1, #8]
 800464e:	f1b8 0f00 	cmp.w	r8, #0
 8004652:	dd9c      	ble.n	800458e <__sflush_r+0x1a>
 8004654:	4643      	mov	r3, r8
 8004656:	463a      	mov	r2, r7
 8004658:	6a21      	ldr	r1, [r4, #32]
 800465a:	4628      	mov	r0, r5
 800465c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800465e:	47b0      	blx	r6
 8004660:	2800      	cmp	r0, #0
 8004662:	dc06      	bgt.n	8004672 <__sflush_r+0xfe>
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	e78e      	b.n	8004590 <__sflush_r+0x1c>
 8004672:	4407      	add	r7, r0
 8004674:	eba8 0800 	sub.w	r8, r8, r0
 8004678:	e7e9      	b.n	800464e <__sflush_r+0xda>
 800467a:	bf00      	nop
 800467c:	20400001 	.word	0x20400001

08004680 <_fflush_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	690b      	ldr	r3, [r1, #16]
 8004684:	4605      	mov	r5, r0
 8004686:	460c      	mov	r4, r1
 8004688:	b1db      	cbz	r3, 80046c2 <_fflush_r+0x42>
 800468a:	b118      	cbz	r0, 8004694 <_fflush_r+0x14>
 800468c:	6983      	ldr	r3, [r0, #24]
 800468e:	b90b      	cbnz	r3, 8004694 <_fflush_r+0x14>
 8004690:	f7ff f93e 	bl	8003910 <__sinit>
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <_fflush_r+0x48>)
 8004696:	429c      	cmp	r4, r3
 8004698:	d109      	bne.n	80046ae <_fflush_r+0x2e>
 800469a:	686c      	ldr	r4, [r5, #4]
 800469c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046a0:	b17b      	cbz	r3, 80046c2 <_fflush_r+0x42>
 80046a2:	4621      	mov	r1, r4
 80046a4:	4628      	mov	r0, r5
 80046a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046aa:	f7ff bf63 	b.w	8004574 <__sflush_r>
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <_fflush_r+0x4c>)
 80046b0:	429c      	cmp	r4, r3
 80046b2:	d101      	bne.n	80046b8 <_fflush_r+0x38>
 80046b4:	68ac      	ldr	r4, [r5, #8]
 80046b6:	e7f1      	b.n	800469c <_fflush_r+0x1c>
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <_fflush_r+0x50>)
 80046ba:	429c      	cmp	r4, r3
 80046bc:	bf08      	it	eq
 80046be:	68ec      	ldreq	r4, [r5, #12]
 80046c0:	e7ec      	b.n	800469c <_fflush_r+0x1c>
 80046c2:	2000      	movs	r0, #0
 80046c4:	bd38      	pop	{r3, r4, r5, pc}
 80046c6:	bf00      	nop
 80046c8:	08004c10 	.word	0x08004c10
 80046cc:	08004c30 	.word	0x08004c30
 80046d0:	08004bf0 	.word	0x08004bf0

080046d4 <_lseek_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4605      	mov	r5, r0
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	2200      	movs	r2, #0
 80046de:	4c05      	ldr	r4, [pc, #20]	; (80046f4 <_lseek_r+0x20>)
 80046e0:	6022      	str	r2, [r4, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f7ff f805 	bl	80036f2 <_lseek>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_lseek_r+0x1e>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_lseek_r+0x1e>
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	200001f8 	.word	0x200001f8

080046f8 <__swhatbuf_r>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	460e      	mov	r6, r1
 80046fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004700:	b096      	sub	sp, #88	; 0x58
 8004702:	2900      	cmp	r1, #0
 8004704:	4614      	mov	r4, r2
 8004706:	461d      	mov	r5, r3
 8004708:	da07      	bge.n	800471a <__swhatbuf_r+0x22>
 800470a:	2300      	movs	r3, #0
 800470c:	602b      	str	r3, [r5, #0]
 800470e:	89b3      	ldrh	r3, [r6, #12]
 8004710:	061a      	lsls	r2, r3, #24
 8004712:	d410      	bmi.n	8004736 <__swhatbuf_r+0x3e>
 8004714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004718:	e00e      	b.n	8004738 <__swhatbuf_r+0x40>
 800471a:	466a      	mov	r2, sp
 800471c:	f000 f908 	bl	8004930 <_fstat_r>
 8004720:	2800      	cmp	r0, #0
 8004722:	dbf2      	blt.n	800470a <__swhatbuf_r+0x12>
 8004724:	9a01      	ldr	r2, [sp, #4]
 8004726:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800472a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800472e:	425a      	negs	r2, r3
 8004730:	415a      	adcs	r2, r3
 8004732:	602a      	str	r2, [r5, #0]
 8004734:	e7ee      	b.n	8004714 <__swhatbuf_r+0x1c>
 8004736:	2340      	movs	r3, #64	; 0x40
 8004738:	2000      	movs	r0, #0
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	b016      	add	sp, #88	; 0x58
 800473e:	bd70      	pop	{r4, r5, r6, pc}

08004740 <__smakebuf_r>:
 8004740:	898b      	ldrh	r3, [r1, #12]
 8004742:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004744:	079d      	lsls	r5, r3, #30
 8004746:	4606      	mov	r6, r0
 8004748:	460c      	mov	r4, r1
 800474a:	d507      	bpl.n	800475c <__smakebuf_r+0x1c>
 800474c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	6123      	str	r3, [r4, #16]
 8004754:	2301      	movs	r3, #1
 8004756:	6163      	str	r3, [r4, #20]
 8004758:	b002      	add	sp, #8
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	ab01      	add	r3, sp, #4
 800475e:	466a      	mov	r2, sp
 8004760:	f7ff ffca 	bl	80046f8 <__swhatbuf_r>
 8004764:	9900      	ldr	r1, [sp, #0]
 8004766:	4605      	mov	r5, r0
 8004768:	4630      	mov	r0, r6
 800476a:	f7ff f95b 	bl	8003a24 <_malloc_r>
 800476e:	b948      	cbnz	r0, 8004784 <__smakebuf_r+0x44>
 8004770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004774:	059a      	lsls	r2, r3, #22
 8004776:	d4ef      	bmi.n	8004758 <__smakebuf_r+0x18>
 8004778:	f023 0303 	bic.w	r3, r3, #3
 800477c:	f043 0302 	orr.w	r3, r3, #2
 8004780:	81a3      	strh	r3, [r4, #12]
 8004782:	e7e3      	b.n	800474c <__smakebuf_r+0xc>
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <__smakebuf_r+0x7c>)
 8004786:	62b3      	str	r3, [r6, #40]	; 0x28
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	6020      	str	r0, [r4, #0]
 800478c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	9b00      	ldr	r3, [sp, #0]
 8004794:	6120      	str	r0, [r4, #16]
 8004796:	6163      	str	r3, [r4, #20]
 8004798:	9b01      	ldr	r3, [sp, #4]
 800479a:	b15b      	cbz	r3, 80047b4 <__smakebuf_r+0x74>
 800479c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047a0:	4630      	mov	r0, r6
 80047a2:	f000 f8d7 	bl	8004954 <_isatty_r>
 80047a6:	b128      	cbz	r0, 80047b4 <__smakebuf_r+0x74>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	431d      	orrs	r5, r3
 80047b8:	81a5      	strh	r5, [r4, #12]
 80047ba:	e7cd      	b.n	8004758 <__smakebuf_r+0x18>
 80047bc:	080038d9 	.word	0x080038d9

080047c0 <memchr>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	b2c9      	uxtb	r1, r1
 80047c4:	4402      	add	r2, r0
 80047c6:	4290      	cmp	r0, r2
 80047c8:	4603      	mov	r3, r0
 80047ca:	d101      	bne.n	80047d0 <memchr+0x10>
 80047cc:	2300      	movs	r3, #0
 80047ce:	e003      	b.n	80047d8 <memchr+0x18>
 80047d0:	781c      	ldrb	r4, [r3, #0]
 80047d2:	3001      	adds	r0, #1
 80047d4:	428c      	cmp	r4, r1
 80047d6:	d1f6      	bne.n	80047c6 <memchr+0x6>
 80047d8:	4618      	mov	r0, r3
 80047da:	bd10      	pop	{r4, pc}

080047dc <memcpy>:
 80047dc:	b510      	push	{r4, lr}
 80047de:	1e43      	subs	r3, r0, #1
 80047e0:	440a      	add	r2, r1
 80047e2:	4291      	cmp	r1, r2
 80047e4:	d100      	bne.n	80047e8 <memcpy+0xc>
 80047e6:	bd10      	pop	{r4, pc}
 80047e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047f0:	e7f7      	b.n	80047e2 <memcpy+0x6>

080047f2 <memmove>:
 80047f2:	4288      	cmp	r0, r1
 80047f4:	b510      	push	{r4, lr}
 80047f6:	eb01 0302 	add.w	r3, r1, r2
 80047fa:	d807      	bhi.n	800480c <memmove+0x1a>
 80047fc:	1e42      	subs	r2, r0, #1
 80047fe:	4299      	cmp	r1, r3
 8004800:	d00a      	beq.n	8004818 <memmove+0x26>
 8004802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004806:	f802 4f01 	strb.w	r4, [r2, #1]!
 800480a:	e7f8      	b.n	80047fe <memmove+0xc>
 800480c:	4283      	cmp	r3, r0
 800480e:	d9f5      	bls.n	80047fc <memmove+0xa>
 8004810:	1881      	adds	r1, r0, r2
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	42d3      	cmn	r3, r2
 8004816:	d100      	bne.n	800481a <memmove+0x28>
 8004818:	bd10      	pop	{r4, pc}
 800481a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800481e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004822:	e7f7      	b.n	8004814 <memmove+0x22>

08004824 <__malloc_lock>:
 8004824:	4770      	bx	lr

08004826 <__malloc_unlock>:
 8004826:	4770      	bx	lr

08004828 <_free_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4605      	mov	r5, r0
 800482c:	2900      	cmp	r1, #0
 800482e:	d043      	beq.n	80048b8 <_free_r+0x90>
 8004830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004834:	1f0c      	subs	r4, r1, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	bfb8      	it	lt
 800483a:	18e4      	addlt	r4, r4, r3
 800483c:	f7ff fff2 	bl	8004824 <__malloc_lock>
 8004840:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <_free_r+0x94>)
 8004842:	6813      	ldr	r3, [r2, #0]
 8004844:	4610      	mov	r0, r2
 8004846:	b933      	cbnz	r3, 8004856 <_free_r+0x2e>
 8004848:	6063      	str	r3, [r4, #4]
 800484a:	6014      	str	r4, [r2, #0]
 800484c:	4628      	mov	r0, r5
 800484e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004852:	f7ff bfe8 	b.w	8004826 <__malloc_unlock>
 8004856:	42a3      	cmp	r3, r4
 8004858:	d90b      	bls.n	8004872 <_free_r+0x4a>
 800485a:	6821      	ldr	r1, [r4, #0]
 800485c:	1862      	adds	r2, r4, r1
 800485e:	4293      	cmp	r3, r2
 8004860:	bf01      	itttt	eq
 8004862:	681a      	ldreq	r2, [r3, #0]
 8004864:	685b      	ldreq	r3, [r3, #4]
 8004866:	1852      	addeq	r2, r2, r1
 8004868:	6022      	streq	r2, [r4, #0]
 800486a:	6063      	str	r3, [r4, #4]
 800486c:	6004      	str	r4, [r0, #0]
 800486e:	e7ed      	b.n	800484c <_free_r+0x24>
 8004870:	4613      	mov	r3, r2
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	b10a      	cbz	r2, 800487a <_free_r+0x52>
 8004876:	42a2      	cmp	r2, r4
 8004878:	d9fa      	bls.n	8004870 <_free_r+0x48>
 800487a:	6819      	ldr	r1, [r3, #0]
 800487c:	1858      	adds	r0, r3, r1
 800487e:	42a0      	cmp	r0, r4
 8004880:	d10b      	bne.n	800489a <_free_r+0x72>
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	4401      	add	r1, r0
 8004886:	1858      	adds	r0, r3, r1
 8004888:	4282      	cmp	r2, r0
 800488a:	6019      	str	r1, [r3, #0]
 800488c:	d1de      	bne.n	800484c <_free_r+0x24>
 800488e:	6810      	ldr	r0, [r2, #0]
 8004890:	6852      	ldr	r2, [r2, #4]
 8004892:	4401      	add	r1, r0
 8004894:	6019      	str	r1, [r3, #0]
 8004896:	605a      	str	r2, [r3, #4]
 8004898:	e7d8      	b.n	800484c <_free_r+0x24>
 800489a:	d902      	bls.n	80048a2 <_free_r+0x7a>
 800489c:	230c      	movs	r3, #12
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	e7d4      	b.n	800484c <_free_r+0x24>
 80048a2:	6820      	ldr	r0, [r4, #0]
 80048a4:	1821      	adds	r1, r4, r0
 80048a6:	428a      	cmp	r2, r1
 80048a8:	bf01      	itttt	eq
 80048aa:	6811      	ldreq	r1, [r2, #0]
 80048ac:	6852      	ldreq	r2, [r2, #4]
 80048ae:	1809      	addeq	r1, r1, r0
 80048b0:	6021      	streq	r1, [r4, #0]
 80048b2:	6062      	str	r2, [r4, #4]
 80048b4:	605c      	str	r4, [r3, #4]
 80048b6:	e7c9      	b.n	800484c <_free_r+0x24>
 80048b8:	bd38      	pop	{r3, r4, r5, pc}
 80048ba:	bf00      	nop
 80048bc:	20000090 	.word	0x20000090

080048c0 <_realloc_r>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	4607      	mov	r7, r0
 80048c4:	4614      	mov	r4, r2
 80048c6:	460e      	mov	r6, r1
 80048c8:	b921      	cbnz	r1, 80048d4 <_realloc_r+0x14>
 80048ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048ce:	4611      	mov	r1, r2
 80048d0:	f7ff b8a8 	b.w	8003a24 <_malloc_r>
 80048d4:	b922      	cbnz	r2, 80048e0 <_realloc_r+0x20>
 80048d6:	f7ff ffa7 	bl	8004828 <_free_r>
 80048da:	4625      	mov	r5, r4
 80048dc:	4628      	mov	r0, r5
 80048de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e0:	f000 f848 	bl	8004974 <_malloc_usable_size_r>
 80048e4:	42a0      	cmp	r0, r4
 80048e6:	d20f      	bcs.n	8004908 <_realloc_r+0x48>
 80048e8:	4621      	mov	r1, r4
 80048ea:	4638      	mov	r0, r7
 80048ec:	f7ff f89a 	bl	8003a24 <_malloc_r>
 80048f0:	4605      	mov	r5, r0
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d0f2      	beq.n	80048dc <_realloc_r+0x1c>
 80048f6:	4631      	mov	r1, r6
 80048f8:	4622      	mov	r2, r4
 80048fa:	f7ff ff6f 	bl	80047dc <memcpy>
 80048fe:	4631      	mov	r1, r6
 8004900:	4638      	mov	r0, r7
 8004902:	f7ff ff91 	bl	8004828 <_free_r>
 8004906:	e7e9      	b.n	80048dc <_realloc_r+0x1c>
 8004908:	4635      	mov	r5, r6
 800490a:	e7e7      	b.n	80048dc <_realloc_r+0x1c>

0800490c <_read_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	4605      	mov	r5, r0
 8004910:	4608      	mov	r0, r1
 8004912:	4611      	mov	r1, r2
 8004914:	2200      	movs	r2, #0
 8004916:	4c05      	ldr	r4, [pc, #20]	; (800492c <_read_r+0x20>)
 8004918:	6022      	str	r2, [r4, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	f7fe fea8 	bl	8003670 <_read>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d102      	bne.n	800492a <_read_r+0x1e>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	b103      	cbz	r3, 800492a <_read_r+0x1e>
 8004928:	602b      	str	r3, [r5, #0]
 800492a:	bd38      	pop	{r3, r4, r5, pc}
 800492c:	200001f8 	.word	0x200001f8

08004930 <_fstat_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	2300      	movs	r3, #0
 8004934:	4c06      	ldr	r4, [pc, #24]	; (8004950 <_fstat_r+0x20>)
 8004936:	4605      	mov	r5, r0
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	f7fe febf 	bl	80036c0 <_fstat>
 8004942:	1c43      	adds	r3, r0, #1
 8004944:	d102      	bne.n	800494c <_fstat_r+0x1c>
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	b103      	cbz	r3, 800494c <_fstat_r+0x1c>
 800494a:	602b      	str	r3, [r5, #0]
 800494c:	bd38      	pop	{r3, r4, r5, pc}
 800494e:	bf00      	nop
 8004950:	200001f8 	.word	0x200001f8

08004954 <_isatty_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	2300      	movs	r3, #0
 8004958:	4c05      	ldr	r4, [pc, #20]	; (8004970 <_isatty_r+0x1c>)
 800495a:	4605      	mov	r5, r0
 800495c:	4608      	mov	r0, r1
 800495e:	6023      	str	r3, [r4, #0]
 8004960:	f7fe febd 	bl	80036de <_isatty>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_isatty_r+0x1a>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	b103      	cbz	r3, 800496e <_isatty_r+0x1a>
 800496c:	602b      	str	r3, [r5, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	200001f8 	.word	0x200001f8

08004974 <_malloc_usable_size_r>:
 8004974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004978:	1f18      	subs	r0, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfbc      	itt	lt
 800497e:	580b      	ldrlt	r3, [r1, r0]
 8004980:	18c0      	addlt	r0, r0, r3
 8004982:	4770      	bx	lr

08004984 <_init>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr

08004990 <_fini>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr
