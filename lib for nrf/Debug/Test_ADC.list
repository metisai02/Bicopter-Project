
Test_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800346c  0800346c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800346c  0800346c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800346c  0800346c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08003480  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003480  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a394  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215a  00000000  00000000  0002a3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0002c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  0002d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176b1  00000000  00000000  0002db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bef5  00000000  00000000  000451e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ce4  00000000  00000000  000510d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dadba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d74  00000000  00000000  000dae0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003418 	.word	0x08003418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003418 	.word	0x08003418

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fd13 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 ff80 	bl	800306c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fd2b 	bl	8000bf2 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fcf3 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <HAL_Delay+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004

08000258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000260:	2300      	movs	r3, #0
 8000262:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d101      	bne.n	800027a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000276:	2301      	movs	r3, #1
 8000278:	e0be      	b.n	80003f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000284:	2b00      	cmp	r3, #0
 8000286:	d109      	bne.n	800029c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f002 ff1a 	bl	80030d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f000 faff 	bl	80008a0 <ADC_ConversionStop_Disable>
 80002a2:	4603      	mov	r3, r0
 80002a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002aa:	f003 0310 	and.w	r3, r3, #16
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8099 	bne.w	80003e6 <HAL_ADC_Init+0x18e>
 80002b4:	7dfb      	ldrb	r3, [r7, #23]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	f040 8095 	bne.w	80003e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c4:	f023 0302 	bic.w	r3, r3, #2
 80002c8:	f043 0202 	orr.w	r2, r3, #2
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	7b1b      	ldrb	r3, [r3, #12]
 80002de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002f0:	d003      	beq.n	80002fa <HAL_ADC_Init+0xa2>
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d102      	bne.n	8000300 <HAL_ADC_Init+0xa8>
 80002fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fe:	e000      	b.n	8000302 <HAL_ADC_Init+0xaa>
 8000300:	2300      	movs	r3, #0
 8000302:	693a      	ldr	r2, [r7, #16]
 8000304:	4313      	orrs	r3, r2
 8000306:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	7d1b      	ldrb	r3, [r3, #20]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d119      	bne.n	8000344 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7b1b      	ldrb	r3, [r3, #12]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d109      	bne.n	800032c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	3b01      	subs	r3, #1
 800031e:	035a      	lsls	r2, r3, #13
 8000320:	693b      	ldr	r3, [r7, #16]
 8000322:	4313      	orrs	r3, r2
 8000324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000328:	613b      	str	r3, [r7, #16]
 800032a:	e00b      	b.n	8000344 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000330:	f043 0220 	orr.w	r2, r3, #32
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033c:	f043 0201 	orr.w	r2, r3, #1
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	430a      	orrs	r2, r1
 8000356:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <HAL_ADC_Init+0x1a8>)
 8000360:	4013      	ands	r3, r2
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	6812      	ldr	r2, [r2, #0]
 8000366:	68b9      	ldr	r1, [r7, #8]
 8000368:	430b      	orrs	r3, r1
 800036a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000374:	d003      	beq.n	800037e <HAL_ADC_Init+0x126>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d104      	bne.n	8000388 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	3b01      	subs	r3, #1
 8000384:	051b      	lsls	r3, r3, #20
 8000386:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	430a      	orrs	r2, r1
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	689a      	ldr	r2, [r3, #8]
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <HAL_ADC_Init+0x1ac>)
 80003a4:	4013      	ands	r3, r2
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d10b      	bne.n	80003c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b6:	f023 0303 	bic.w	r3, r3, #3
 80003ba:	f043 0201 	orr.w	r2, r3, #1
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003c2:	e018      	b.n	80003f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c8:	f023 0312 	bic.w	r3, r3, #18
 80003cc:	f043 0210 	orr.w	r2, r3, #16
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d8:	f043 0201 	orr.w	r2, r3, #1
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003e0:	2301      	movs	r3, #1
 80003e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e4:	e007      	b.n	80003f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ea:	f043 0210 	orr.w	r2, r3, #16
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003f2:	2301      	movs	r3, #1
 80003f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	ffe1f7fd 	.word	0xffe1f7fd
 8000404:	ff1f0efe 	.word	0xff1f0efe

08000408 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000414:	2300      	movs	r3, #0
 8000416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a64      	ldr	r2, [pc, #400]	; (80005b0 <HAL_ADC_Start_DMA+0x1a8>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d004      	beq.n	800042c <HAL_ADC_Start_DMA+0x24>
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a63      	ldr	r2, [pc, #396]	; (80005b4 <HAL_ADC_Start_DMA+0x1ac>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <HAL_ADC_Start_DMA+0x32>
 800042c:	4b60      	ldr	r3, [pc, #384]	; (80005b0 <HAL_ADC_Start_DMA+0x1a8>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000434:	2b00      	cmp	r3, #0
 8000436:	f040 80b3 	bne.w	80005a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000440:	2b01      	cmp	r3, #1
 8000442:	d101      	bne.n	8000448 <HAL_ADC_Start_DMA+0x40>
 8000444:	2302      	movs	r3, #2
 8000446:	e0ae      	b.n	80005a6 <HAL_ADC_Start_DMA+0x19e>
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	2201      	movs	r2, #1
 800044c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000450:	68f8      	ldr	r0, [r7, #12]
 8000452:	f000 f9cb 	bl	80007ec <ADC_Enable>
 8000456:	4603      	mov	r3, r0
 8000458:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800045a:	7dfb      	ldrb	r3, [r7, #23]
 800045c:	2b00      	cmp	r3, #0
 800045e:	f040 809a 	bne.w	8000596 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800046a:	f023 0301 	bic.w	r3, r3, #1
 800046e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a4e      	ldr	r2, [pc, #312]	; (80005b4 <HAL_ADC_Start_DMA+0x1ac>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d105      	bne.n	800048c <HAL_ADC_Start_DMA+0x84>
 8000480:	4b4b      	ldr	r3, [pc, #300]	; (80005b0 <HAL_ADC_Start_DMA+0x1a8>)
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000488:	2b00      	cmp	r3, #0
 800048a:	d115      	bne.n	80004b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000490:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d026      	beq.n	80004f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004b6:	e01d      	b.n	80004f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a39      	ldr	r2, [pc, #228]	; (80005b0 <HAL_ADC_Start_DMA+0x1a8>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d004      	beq.n	80004d8 <HAL_ADC_Start_DMA+0xd0>
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <HAL_ADC_Start_DMA+0x1ac>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d10d      	bne.n	80004f4 <HAL_ADC_Start_DMA+0xec>
 80004d8:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <HAL_ADC_Start_DMA+0x1a8>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d007      	beq.n	80004f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d006      	beq.n	800050e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000504:	f023 0206 	bic.w	r2, r3, #6
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
 800050c:	e002      	b.n	8000514 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2200      	movs	r2, #0
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	4a25      	ldr	r2, [pc, #148]	; (80005b8 <HAL_ADC_Start_DMA+0x1b0>)
 8000522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	6a1b      	ldr	r3, [r3, #32]
 8000528:	4a24      	ldr	r2, [pc, #144]	; (80005bc <HAL_ADC_Start_DMA+0x1b4>)
 800052a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	6a1b      	ldr	r3, [r3, #32]
 8000530:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <HAL_ADC_Start_DMA+0x1b8>)
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f06f 0202 	mvn.w	r2, #2
 800053c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6a18      	ldr	r0, [r3, #32]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	334c      	adds	r3, #76	; 0x4c
 8000558:	4619      	mov	r1, r3
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f000 fbaf 	bl	8000cc0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800056c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000570:	d108      	bne.n	8000584 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	689a      	ldr	r2, [r3, #8]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000580:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000582:	e00f      	b.n	80005a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689a      	ldr	r2, [r3, #8]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000592:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000594:	e006      	b.n	80005a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800059e:	e001      	b.n	80005a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80005a0:	2301      	movs	r3, #1
 80005a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40012400 	.word	0x40012400
 80005b4:	40012800 	.word	0x40012800
 80005b8:	08000923 	.word	0x08000923
 80005bc:	0800099f 	.word	0x0800099f
 80005c0:	080009bb 	.word	0x080009bb

080005c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
	...

080005fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000614:	2b01      	cmp	r3, #1
 8000616:	d101      	bne.n	800061c <HAL_ADC_ConfigChannel+0x20>
 8000618:	2302      	movs	r3, #2
 800061a:	e0dc      	b.n	80007d6 <HAL_ADC_ConfigChannel+0x1da>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2201      	movs	r2, #1
 8000620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	2b06      	cmp	r3, #6
 800062a:	d81c      	bhi.n	8000666 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	4613      	mov	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4413      	add	r3, r2
 800063c:	3b05      	subs	r3, #5
 800063e:	221f      	movs	r2, #31
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	43db      	mvns	r3, r3
 8000646:	4019      	ands	r1, r3
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685a      	ldr	r2, [r3, #4]
 8000650:	4613      	mov	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	3b05      	subs	r3, #5
 8000658:	fa00 f203 	lsl.w	r2, r0, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	430a      	orrs	r2, r1
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
 8000664:	e03c      	b.n	80006e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	2b0c      	cmp	r3, #12
 800066c:	d81c      	bhi.n	80006a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	4613      	mov	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	3b23      	subs	r3, #35	; 0x23
 8000680:	221f      	movs	r2, #31
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	4019      	ands	r1, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	4613      	mov	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	3b23      	subs	r3, #35	; 0x23
 800069a:	fa00 f203 	lsl.w	r2, r0, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	631a      	str	r2, [r3, #48]	; 0x30
 80006a6:	e01b      	b.n	80006e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	4613      	mov	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	3b41      	subs	r3, #65	; 0x41
 80006ba:	221f      	movs	r2, #31
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	43db      	mvns	r3, r3
 80006c2:	4019      	ands	r1, r3
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	685a      	ldr	r2, [r3, #4]
 80006cc:	4613      	mov	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	3b41      	subs	r3, #65	; 0x41
 80006d4:	fa00 f203 	lsl.w	r2, r0, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	430a      	orrs	r2, r1
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	d91c      	bls.n	8000722 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68d9      	ldr	r1, [r3, #12]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	4613      	mov	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	3b1e      	subs	r3, #30
 80006fa:	2207      	movs	r2, #7
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	43db      	mvns	r3, r3
 8000702:	4019      	ands	r1, r3
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	6898      	ldr	r0, [r3, #8]
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	3b1e      	subs	r3, #30
 8000714:	fa00 f203 	lsl.w	r2, r0, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	430a      	orrs	r2, r1
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	e019      	b.n	8000756 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6919      	ldr	r1, [r3, #16]
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	2207      	movs	r2, #7
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	4019      	ands	r1, r3
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	6898      	ldr	r0, [r3, #8]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	fa00 f203 	lsl.w	r2, r0, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	430a      	orrs	r2, r1
 8000754:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b10      	cmp	r3, #16
 800075c:	d003      	beq.n	8000766 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000762:	2b11      	cmp	r3, #17
 8000764:	d132      	bne.n	80007cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d125      	bne.n	80007bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d126      	bne.n	80007cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	689a      	ldr	r2, [r3, #8]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800078c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b10      	cmp	r3, #16
 8000794:	d11a      	bne.n	80007cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800079c:	fba2 2303 	umull	r2, r3, r2, r3
 80007a0:	0c9a      	lsrs	r2, r3, #18
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007ac:	e002      	b.n	80007b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f9      	bne.n	80007ae <HAL_ADC_ConfigChannel+0x1b2>
 80007ba:	e007      	b.n	80007cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c0:	f043 0220 	orr.w	r2, r3, #32
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40012400 	.word	0x40012400
 80007e4:	20000008 	.word	0x20000008
 80007e8:	431bde83 	.word	0x431bde83

080007ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	2b01      	cmp	r3, #1
 8000808:	d040      	beq.n	800088c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f042 0201 	orr.w	r2, r2, #1
 8000818:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <ADC_Enable+0xac>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a1f      	ldr	r2, [pc, #124]	; (800089c <ADC_Enable+0xb0>)
 8000820:	fba2 2303 	umull	r2, r3, r2, r3
 8000824:	0c9b      	lsrs	r3, r3, #18
 8000826:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000828:	e002      	b.n	8000830 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	3b01      	subs	r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f9      	bne.n	800082a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000836:	f7ff fce1 	bl	80001fc <HAL_GetTick>
 800083a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800083c:	e01f      	b.n	800087e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800083e:	f7ff fcdd 	bl	80001fc <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	2b02      	cmp	r3, #2
 800084a:	d918      	bls.n	800087e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	2b01      	cmp	r3, #1
 8000858:	d011      	beq.n	800087e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085e:	f043 0210 	orr.w	r2, r3, #16
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	f043 0201 	orr.w	r2, r3, #1
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e007      	b.n	800088e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	2b01      	cmp	r3, #1
 800088a:	d1d8      	bne.n	800083e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	431bde83 	.word	0x431bde83

080008a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d12e      	bne.n	8000918 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f022 0201 	bic.w	r2, r2, #1
 80008c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80008ca:	f7ff fc97 	bl	80001fc <HAL_GetTick>
 80008ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80008d0:	e01b      	b.n	800090a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80008d2:	f7ff fc93 	bl	80001fc <HAL_GetTick>
 80008d6:	4602      	mov	r2, r0
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d914      	bls.n	800090a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d10d      	bne.n	800090a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f2:	f043 0210 	orr.w	r2, r3, #16
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fe:	f043 0201 	orr.w	r2, r3, #1
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e007      	b.n	800091a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b01      	cmp	r3, #1
 8000916:	d0dc      	beq.n	80008d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000938:	2b00      	cmp	r3, #0
 800093a:	d127      	bne.n	800098c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000940:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000952:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000956:	d115      	bne.n	8000984 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800095c:	2b00      	cmp	r3, #0
 800095e:	d111      	bne.n	8000984 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000964:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d105      	bne.n	8000984 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097c:	f043 0201 	orr.w	r2, r3, #1
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff fe1d 	bl	80005c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800098a:	e004      	b.n	8000996 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6a1b      	ldr	r3, [r3, #32]
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	4798      	blx	r3
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009aa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f7ff fe12 	bl	80005d6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b084      	sub	sp, #16
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d8:	f043 0204 	orr.w	r2, r3, #4
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f7ff fe01 	bl	80005e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4906      	ldr	r1, [pc, #24]	; (8000a88 <__NVIC_EnableIRQ+0x34>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f7ff ff90 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff2d 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff42 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff90 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5f 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff35 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffa2 	bl	8000b44 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e043      	b.n	8000caa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <HAL_DMA_Init+0xa8>)
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <HAL_DMA_Init+0xac>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	091b      	lsrs	r3, r3, #4
 8000c34:	009a      	lsls	r2, r3, #2
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <HAL_DMA_Init+0xb0>)
 8000c3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2202      	movs	r2, #2
 8000c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c56:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	bffdfff8 	.word	0xbffdfff8
 8000cb8:	cccccccd 	.word	0xcccccccd
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d101      	bne.n	8000ce0 <HAL_DMA_Start_IT+0x20>
 8000cdc:	2302      	movs	r3, #2
 8000cde:	e04a      	b.n	8000d76 <HAL_DMA_Start_IT+0xb6>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d13a      	bne.n	8000d68 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0201 	bic.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f000 f938 	bl	8000f8c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d008      	beq.n	8000d36 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 020e 	orr.w	r2, r2, #14
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	e00f      	b.n	8000d56 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0204 	bic.w	r2, r2, #4
 8000d44:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f042 020a 	orr.w	r2, r2, #10
 8000d54:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f042 0201 	orr.w	r2, r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e005      	b.n	8000d74 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d70:	2302      	movs	r3, #2
 8000d72:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d04f      	beq.n	8000e48 <HAL_DMA_IRQHandler+0xc8>
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d04a      	beq.n	8000e48 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0320 	and.w	r3, r3, #32
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d107      	bne.n	8000dd0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0204 	bic.w	r2, r2, #4
 8000dce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a66      	ldr	r2, [pc, #408]	; (8000f70 <HAL_DMA_IRQHandler+0x1f0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d029      	beq.n	8000e2e <HAL_DMA_IRQHandler+0xae>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a65      	ldr	r2, [pc, #404]	; (8000f74 <HAL_DMA_IRQHandler+0x1f4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d022      	beq.n	8000e2a <HAL_DMA_IRQHandler+0xaa>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a63      	ldr	r2, [pc, #396]	; (8000f78 <HAL_DMA_IRQHandler+0x1f8>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d01a      	beq.n	8000e24 <HAL_DMA_IRQHandler+0xa4>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a62      	ldr	r2, [pc, #392]	; (8000f7c <HAL_DMA_IRQHandler+0x1fc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d012      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x9e>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a60      	ldr	r2, [pc, #384]	; (8000f80 <HAL_DMA_IRQHandler+0x200>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00a      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x98>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a5f      	ldr	r2, [pc, #380]	; (8000f84 <HAL_DMA_IRQHandler+0x204>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d102      	bne.n	8000e12 <HAL_DMA_IRQHandler+0x92>
 8000e0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e10:	e00e      	b.n	8000e30 <HAL_DMA_IRQHandler+0xb0>
 8000e12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e16:	e00b      	b.n	8000e30 <HAL_DMA_IRQHandler+0xb0>
 8000e18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e1c:	e008      	b.n	8000e30 <HAL_DMA_IRQHandler+0xb0>
 8000e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e22:	e005      	b.n	8000e30 <HAL_DMA_IRQHandler+0xb0>
 8000e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e28:	e002      	b.n	8000e30 <HAL_DMA_IRQHandler+0xb0>
 8000e2a:	2340      	movs	r3, #64	; 0x40
 8000e2c:	e000      	b.n	8000e30 <HAL_DMA_IRQHandler+0xb0>
 8000e2e:	2304      	movs	r3, #4
 8000e30:	4a55      	ldr	r2, [pc, #340]	; (8000f88 <HAL_DMA_IRQHandler+0x208>)
 8000e32:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 8094 	beq.w	8000f66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e46:	e08e      	b.n	8000f66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d056      	beq.n	8000f06 <HAL_DMA_IRQHandler+0x186>
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d051      	beq.n	8000f06 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10b      	bne.n	8000e88 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 020a 	bic.w	r2, r2, #10
 8000e7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a38      	ldr	r2, [pc, #224]	; (8000f70 <HAL_DMA_IRQHandler+0x1f0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d029      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0x166>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a37      	ldr	r2, [pc, #220]	; (8000f74 <HAL_DMA_IRQHandler+0x1f4>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d022      	beq.n	8000ee2 <HAL_DMA_IRQHandler+0x162>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a35      	ldr	r2, [pc, #212]	; (8000f78 <HAL_DMA_IRQHandler+0x1f8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d01a      	beq.n	8000edc <HAL_DMA_IRQHandler+0x15c>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a34      	ldr	r2, [pc, #208]	; (8000f7c <HAL_DMA_IRQHandler+0x1fc>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d012      	beq.n	8000ed6 <HAL_DMA_IRQHandler+0x156>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <HAL_DMA_IRQHandler+0x200>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d00a      	beq.n	8000ed0 <HAL_DMA_IRQHandler+0x150>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a31      	ldr	r2, [pc, #196]	; (8000f84 <HAL_DMA_IRQHandler+0x204>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d102      	bne.n	8000eca <HAL_DMA_IRQHandler+0x14a>
 8000ec4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ec8:	e00e      	b.n	8000ee8 <HAL_DMA_IRQHandler+0x168>
 8000eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ece:	e00b      	b.n	8000ee8 <HAL_DMA_IRQHandler+0x168>
 8000ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed4:	e008      	b.n	8000ee8 <HAL_DMA_IRQHandler+0x168>
 8000ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eda:	e005      	b.n	8000ee8 <HAL_DMA_IRQHandler+0x168>
 8000edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee0:	e002      	b.n	8000ee8 <HAL_DMA_IRQHandler+0x168>
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	e000      	b.n	8000ee8 <HAL_DMA_IRQHandler+0x168>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <HAL_DMA_IRQHandler+0x208>)
 8000eea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d034      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f04:	e02f      	b.n	8000f66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d028      	beq.n	8000f68 <HAL_DMA_IRQHandler+0x1e8>
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	f003 0308 	and.w	r3, r3, #8
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d023      	beq.n	8000f68 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 020e 	bic.w	r2, r2, #14
 8000f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	4798      	blx	r3
    }
  }
  return;
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
}
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40020008 	.word	0x40020008
 8000f74:	4002001c 	.word	0x4002001c
 8000f78:	40020030 	.word	0x40020030
 8000f7c:	40020044 	.word	0x40020044
 8000f80:	40020058 	.word	0x40020058
 8000f84:	4002006c 	.word	0x4002006c
 8000f88:	40020000 	.word	0x40020000

08000f8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b10      	cmp	r3, #16
 8000fb8:	d108      	bne.n	8000fcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fca:	e007      	b.n	8000fdc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	60da      	str	r2, [r3, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b08b      	sub	sp, #44	; 0x2c
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffa:	e169      	b.n	80012d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	429a      	cmp	r2, r3
 8001016:	f040 8158 	bne.w	80012ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a9a      	ldr	r2, [pc, #616]	; (8001288 <HAL_GPIO_Init+0x2a0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d05e      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001024:	4a98      	ldr	r2, [pc, #608]	; (8001288 <HAL_GPIO_Init+0x2a0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d875      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 800102a:	4a98      	ldr	r2, [pc, #608]	; (800128c <HAL_GPIO_Init+0x2a4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d058      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001030:	4a96      	ldr	r2, [pc, #600]	; (800128c <HAL_GPIO_Init+0x2a4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d86f      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 8001036:	4a96      	ldr	r2, [pc, #600]	; (8001290 <HAL_GPIO_Init+0x2a8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d052      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 800103c:	4a94      	ldr	r2, [pc, #592]	; (8001290 <HAL_GPIO_Init+0x2a8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d869      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 8001042:	4a94      	ldr	r2, [pc, #592]	; (8001294 <HAL_GPIO_Init+0x2ac>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d04c      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001048:	4a92      	ldr	r2, [pc, #584]	; (8001294 <HAL_GPIO_Init+0x2ac>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d863      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 800104e:	4a92      	ldr	r2, [pc, #584]	; (8001298 <HAL_GPIO_Init+0x2b0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d046      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001054:	4a90      	ldr	r2, [pc, #576]	; (8001298 <HAL_GPIO_Init+0x2b0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d85d      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 800105a:	2b12      	cmp	r3, #18
 800105c:	d82a      	bhi.n	80010b4 <HAL_GPIO_Init+0xcc>
 800105e:	2b12      	cmp	r3, #18
 8001060:	d859      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 8001062:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <HAL_GPIO_Init+0x80>)
 8001064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001068:	080010e3 	.word	0x080010e3
 800106c:	080010bd 	.word	0x080010bd
 8001070:	080010cf 	.word	0x080010cf
 8001074:	08001111 	.word	0x08001111
 8001078:	08001117 	.word	0x08001117
 800107c:	08001117 	.word	0x08001117
 8001080:	08001117 	.word	0x08001117
 8001084:	08001117 	.word	0x08001117
 8001088:	08001117 	.word	0x08001117
 800108c:	08001117 	.word	0x08001117
 8001090:	08001117 	.word	0x08001117
 8001094:	08001117 	.word	0x08001117
 8001098:	08001117 	.word	0x08001117
 800109c:	08001117 	.word	0x08001117
 80010a0:	08001117 	.word	0x08001117
 80010a4:	08001117 	.word	0x08001117
 80010a8:	08001117 	.word	0x08001117
 80010ac:	080010c5 	.word	0x080010c5
 80010b0:	080010d9 	.word	0x080010d9
 80010b4:	4a79      	ldr	r2, [pc, #484]	; (800129c <HAL_GPIO_Init+0x2b4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ba:	e02c      	b.n	8001116 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	623b      	str	r3, [r7, #32]
          break;
 80010c2:	e029      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	3304      	adds	r3, #4
 80010ca:	623b      	str	r3, [r7, #32]
          break;
 80010cc:	e024      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	3308      	adds	r3, #8
 80010d4:	623b      	str	r3, [r7, #32]
          break;
 80010d6:	e01f      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	330c      	adds	r3, #12
 80010de:	623b      	str	r3, [r7, #32]
          break;
 80010e0:	e01a      	b.n	8001118 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ea:	2304      	movs	r3, #4
 80010ec:	623b      	str	r3, [r7, #32]
          break;
 80010ee:	e013      	b.n	8001118 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d105      	bne.n	8001104 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f8:	2308      	movs	r3, #8
 80010fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	611a      	str	r2, [r3, #16]
          break;
 8001102:	e009      	b.n	8001118 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001104:	2308      	movs	r3, #8
 8001106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	615a      	str	r2, [r3, #20]
          break;
 800110e:	e003      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
          break;
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x130>
          break;
 8001116:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2bff      	cmp	r3, #255	; 0xff
 800111c:	d801      	bhi.n	8001122 <HAL_GPIO_Init+0x13a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	e001      	b.n	8001126 <HAL_GPIO_Init+0x13e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3304      	adds	r3, #4
 8001126:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2bff      	cmp	r3, #255	; 0xff
 800112c:	d802      	bhi.n	8001134 <HAL_GPIO_Init+0x14c>
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0x152>
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	3b08      	subs	r3, #8
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	210f      	movs	r1, #15
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	401a      	ands	r2, r3
 800114c:	6a39      	ldr	r1, [r7, #32]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	431a      	orrs	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80b1 	beq.w	80012ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001168:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <HAL_GPIO_Init+0x2b8>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a4c      	ldr	r2, [pc, #304]	; (80012a0 <HAL_GPIO_Init+0x2b8>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_GPIO_Init+0x2b8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001180:	4a48      	ldr	r2, [pc, #288]	; (80012a4 <HAL_GPIO_Init+0x2bc>)
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a40      	ldr	r2, [pc, #256]	; (80012a8 <HAL_GPIO_Init+0x2c0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d013      	beq.n	80011d4 <HAL_GPIO_Init+0x1ec>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a3f      	ldr	r2, [pc, #252]	; (80012ac <HAL_GPIO_Init+0x2c4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d00d      	beq.n	80011d0 <HAL_GPIO_Init+0x1e8>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a3e      	ldr	r2, [pc, #248]	; (80012b0 <HAL_GPIO_Init+0x2c8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d007      	beq.n	80011cc <HAL_GPIO_Init+0x1e4>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a3d      	ldr	r2, [pc, #244]	; (80012b4 <HAL_GPIO_Init+0x2cc>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d101      	bne.n	80011c8 <HAL_GPIO_Init+0x1e0>
 80011c4:	2303      	movs	r3, #3
 80011c6:	e006      	b.n	80011d6 <HAL_GPIO_Init+0x1ee>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e004      	b.n	80011d6 <HAL_GPIO_Init+0x1ee>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e002      	b.n	80011d6 <HAL_GPIO_Init+0x1ee>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HAL_GPIO_Init+0x1ee>
 80011d4:	2300      	movs	r3, #0
 80011d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d8:	f002 0203 	and.w	r2, r2, #3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4093      	lsls	r3, r2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011e6:	492f      	ldr	r1, [pc, #188]	; (80012a4 <HAL_GPIO_Init+0x2bc>)
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	492c      	ldr	r1, [pc, #176]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	43db      	mvns	r3, r3
 8001216:	4928      	ldr	r1, [pc, #160]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001218:	4013      	ands	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d006      	beq.n	8001236 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4922      	ldr	r1, [pc, #136]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	43db      	mvns	r3, r3
 800123e:	491e      	ldr	r1, [pc, #120]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001240:	4013      	ands	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	4918      	ldr	r1, [pc, #96]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	608b      	str	r3, [r1, #8]
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	43db      	mvns	r3, r3
 8001266:	4914      	ldr	r1, [pc, #80]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001268:	4013      	ands	r3, r2
 800126a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d021      	beq.n	80012bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	490e      	ldr	r1, [pc, #56]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	60cb      	str	r3, [r1, #12]
 8001284:	e021      	b.n	80012ca <HAL_GPIO_Init+0x2e2>
 8001286:	bf00      	nop
 8001288:	10320000 	.word	0x10320000
 800128c:	10310000 	.word	0x10310000
 8001290:	10220000 	.word	0x10220000
 8001294:	10210000 	.word	0x10210000
 8001298:	10120000 	.word	0x10120000
 800129c:	10110000 	.word	0x10110000
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40010c00 	.word	0x40010c00
 80012b0:	40011000 	.word	0x40011000
 80012b4:	40011400 	.word	0x40011400
 80012b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_GPIO_Init+0x304>)
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4909      	ldr	r1, [pc, #36]	; (80012ec <HAL_GPIO_Init+0x304>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	3301      	adds	r3, #1
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	fa22 f303 	lsr.w	r3, r2, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f47f ae8e 	bne.w	8000ffc <HAL_GPIO_Init+0x14>
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	372c      	adds	r7, #44	; 0x2c
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40010400 	.word	0x40010400

080012f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
 80012fc:	4613      	mov	r3, r2
 80012fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800130c:	e003      	b.n	8001316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	041a      	lsls	r2, r3, #16
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	611a      	str	r2, [r3, #16]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4013      	ands	r3, r2
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43d9      	mvns	r1, r3
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	400b      	ands	r3, r1
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	611a      	str	r2, [r3, #16]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
	...

08001354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e272      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8087 	beq.w	8001482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001374:	4b92      	ldr	r3, [pc, #584]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b04      	cmp	r3, #4
 800137e:	d00c      	beq.n	800139a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001380:	4b8f      	ldr	r3, [pc, #572]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d112      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5e>
 800138c:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d10b      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139a:	4b89      	ldr	r3, [pc, #548]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d06c      	beq.n	8001480 <HAL_RCC_OscConfig+0x12c>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d168      	bne.n	8001480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e24c      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x76>
 80013bc:	4b80      	ldr	r3, [pc, #512]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a7f      	ldr	r2, [pc, #508]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e02e      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x98>
 80013d2:	4b7b      	ldr	r3, [pc, #492]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a7a      	ldr	r2, [pc, #488]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a77      	ldr	r2, [pc, #476]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0xbc>
 80013f6:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a71      	ldr	r2, [pc, #452]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a6e      	ldr	r2, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 8001410:	4b6b      	ldr	r3, [pc, #428]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a6a      	ldr	r2, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a67      	ldr	r2, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7fe fee4 	bl	80001fc <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7fe fee0 	bl	80001fc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e200      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0xe4>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7fe fed0 	bl	80001fc <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7fe fecc 	bl	80001fc <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e1ec      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x10c>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d063      	beq.n	8001556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148e:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800149a:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d11c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x18c>
 80014a6:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d116      	bne.n	80014e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x176>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e1c0      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4939      	ldr	r1, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	e03a      	b.n	8001556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <HAL_RCC_OscConfig+0x270>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7fe fe85 	bl	80001fc <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f6:	f7fe fe81 	bl	80001fc <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1a1      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4927      	ldr	r1, [pc, #156]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_RCC_OscConfig+0x270>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7fe fe64 	bl	80001fc <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001538:	f7fe fe60 	bl	80001fc <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e180      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d03a      	beq.n	80015d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d019      	beq.n	800159e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_RCC_OscConfig+0x274>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001570:	f7fe fe44 	bl	80001fc <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7fe fe40 	bl	80001fc <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e160      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f000 fad8 	bl	8001b4c <RCC_Delay>
 800159c:	e01c      	b.n	80015d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_RCC_OscConfig+0x274>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7fe fe2a 	bl	80001fc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015aa:	e00f      	b.n	80015cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7fe fe26 	bl	80001fc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d908      	bls.n	80015cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e146      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	42420000 	.word	0x42420000
 80015c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	4b92      	ldr	r3, [pc, #584]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1e9      	bne.n	80015ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80a6 	beq.w	8001732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b8b      	ldr	r3, [pc, #556]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10d      	bne.n	8001612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b88      	ldr	r3, [pc, #544]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a87      	ldr	r2, [pc, #540]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b85      	ldr	r3, [pc, #532]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b82      	ldr	r3, [pc, #520]	; (800181c <HAL_RCC_OscConfig+0x4c8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d118      	bne.n	8001650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161e:	4b7f      	ldr	r3, [pc, #508]	; (800181c <HAL_RCC_OscConfig+0x4c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a7e      	ldr	r2, [pc, #504]	; (800181c <HAL_RCC_OscConfig+0x4c8>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162a:	f7fe fde7 	bl	80001fc <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001632:	f7fe fde3 	bl	80001fc <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b64      	cmp	r3, #100	; 0x64
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e103      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	4b75      	ldr	r3, [pc, #468]	; (800181c <HAL_RCC_OscConfig+0x4c8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x312>
 8001658:	4b6f      	ldr	r3, [pc, #444]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a6e      	ldr	r2, [pc, #440]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e02d      	b.n	80016c2 <HAL_RCC_OscConfig+0x36e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x334>
 800166e:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a69      	ldr	r2, [pc, #420]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	4b67      	ldr	r3, [pc, #412]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a66      	ldr	r2, [pc, #408]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	e01c      	b.n	80016c2 <HAL_RCC_OscConfig+0x36e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b05      	cmp	r3, #5
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0x356>
 8001690:	4b61      	ldr	r3, [pc, #388]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a60      	ldr	r2, [pc, #384]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a5d      	ldr	r2, [pc, #372]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	e00b      	b.n	80016c2 <HAL_RCC_OscConfig+0x36e>
 80016aa:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a5a      	ldr	r2, [pc, #360]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6213      	str	r3, [r2, #32]
 80016b6:	4b58      	ldr	r3, [pc, #352]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a57      	ldr	r2, [pc, #348]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d015      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7fe fd97 	bl	80001fc <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7fe fd93 	bl	80001fc <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0b1      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e8:	4b4b      	ldr	r3, [pc, #300]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ee      	beq.n	80016d2 <HAL_RCC_OscConfig+0x37e>
 80016f4:	e014      	b.n	8001720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7fe fd81 	bl	80001fc <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7fe fd7d 	bl	80001fc <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e09b      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	4b40      	ldr	r3, [pc, #256]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ee      	bne.n	80016fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d105      	bne.n	8001732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001726:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a3b      	ldr	r2, [pc, #236]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8087 	beq.w	800184a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173c:	4b36      	ldr	r3, [pc, #216]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d061      	beq.n	800180c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d146      	bne.n	80017de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7fe fd51 	bl	80001fc <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175e:	f7fe fd4d 	bl	80001fc <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e06d      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001784:	d108      	bne.n	8001798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	4921      	ldr	r1, [pc, #132]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a19      	ldr	r1, [r3, #32]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	430b      	orrs	r3, r1
 80017aa:	491b      	ldr	r1, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7fe fd21 	bl	80001fc <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017be:	f7fe fd1d 	bl	80001fc <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e03d      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x46a>
 80017dc:	e035      	b.n	800184a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7fe fd0a 	bl	80001fc <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7fe fd06 	bl	80001fc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e026      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x498>
 800180a:	e01e      	b.n	800184a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d107      	bne.n	8001824 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e019      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
 8001818:	40021000 	.word	0x40021000
 800181c:	40007000 	.word	0x40007000
 8001820:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_OscConfig+0x500>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	429a      	cmp	r2, r3
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d001      	beq.n	800184a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0d0      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d910      	bls.n	800189c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 0207 	bic.w	r2, r3, #7
 8001882:	4965      	ldr	r1, [pc, #404]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0b8      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	494d      	ldr	r1, [pc, #308]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d040      	beq.n	8001978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d115      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e07f      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e073      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e06b      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f023 0203 	bic.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4936      	ldr	r1, [pc, #216]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001948:	f7fe fc58 	bl	80001fc <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7fe fc54 	bl	80001fc <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e053      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 020c 	and.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1eb      	bne.n	8001950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d210      	bcs.n	80019a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0207 	bic.w	r2, r3, #7
 800198e:	4922      	ldr	r1, [pc, #136]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e032      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4916      	ldr	r1, [pc, #88]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	490e      	ldr	r1, [pc, #56]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e6:	f000 f821 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	490a      	ldr	r1, [pc, #40]	; (8001a20 <HAL_RCC_ClockConfig+0x1c8>)
 80019f8:	5ccb      	ldrb	r3, [r1, r3]
 80019fa:	fa22 f303 	lsr.w	r3, r2, r3
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1cc>)
 8001a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1d0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fbb6 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40022000 	.word	0x40022000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	08003454 	.word	0x08003454
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	b490      	push	{r4, r7}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a32:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a34:	1d3c      	adds	r4, r7, #4
 8001a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a3c:	f240 2301 	movw	r3, #513	; 0x201
 8001a40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a56:	4b21      	ldr	r3, [pc, #132]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d002      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x40>
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0x46>
 8001a6a:	e02b      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a6e:	623b      	str	r3, [r7, #32]
      break;
 8001a70:	e02b      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3328      	adds	r3, #40	; 0x28
 8001a7c:	443b      	add	r3, r7
 8001a7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a82:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d012      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	0c5b      	lsrs	r3, r3, #17
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	3328      	adds	r3, #40	; 0x28
 8001a9a:	443b      	add	r3, r7
 8001a9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001aa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aa6:	fb03 f202 	mul.w	r2, r3, r2
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	e004      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	623b      	str	r3, [r7, #32]
      break;
 8001ac2:	e002      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ac6:	623b      	str	r3, [r7, #32]
      break;
 8001ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3728      	adds	r7, #40	; 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc90      	pop	{r4, r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	08003430 	.word	0x08003430
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	007a1200 	.word	0x007a1200
 8001ae4:	003d0900 	.word	0x003d0900

08001ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000008 	.word	0x20000008

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff2 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08003464 	.word	0x08003464

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0adb      	lsrs	r3, r3, #11
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08003464 	.word	0x08003464

08001b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <RCC_Delay+0x34>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <RCC_Delay+0x38>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0a5b      	lsrs	r3, r3, #9
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b68:	bf00      	nop
  }
  while (Delay --);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	60fa      	str	r2, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f9      	bne.n	8001b68 <RCC_Delay+0x1c>
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000008 	.word	0x20000008
 8001b84:	10624dd3 	.word	0x10624dd3

08001b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d07d      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	4a4b      	ldr	r2, [pc, #300]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	61d3      	str	r3, [r2, #28]
 8001bc0:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d118      	bne.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a42      	ldr	r2, [pc, #264]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be8:	f7fe fb08 	bl	80001fc <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	e008      	b.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf0:	f7fe fb04 	bl	80001fc <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e06d      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c0e:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02e      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d027      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c36:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c42:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d014      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7fe fad3 	bl	80001fc <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe facf 	bl	80001fc <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e036      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ee      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4917      	ldr	r1, [pc, #92]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d105      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	490b      	ldr	r1, [pc, #44]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	4904      	ldr	r1, [pc, #16]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	42420440 	.word	0x42420440

08001cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e076      	b.n	8001df4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d108      	bne.n	8001d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d16:	d009      	beq.n	8001d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
 8001d1e:	e005      	b.n	8001d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f001 fa42 	bl	80031d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	ea42 0103 	orr.w	r1, r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	0c1a      	lsrs	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f002 0204 	and.w	r2, r2, #4
 8001dd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_SPI_TransmitReceive+0x26>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e18a      	b.n	8002138 <HAL_SPI_TransmitReceive+0x33c>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e2a:	f7fe f9e7 	bl	80001fc <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d00f      	beq.n	8001e6c <HAL_SPI_TransmitReceive+0x70>
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e52:	d107      	bne.n	8001e64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d103      	bne.n	8001e64 <HAL_SPI_TransmitReceive+0x68>
 8001e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d003      	beq.n	8001e6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
 8001e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e6a:	e15b      	b.n	8002124 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_SPI_TransmitReceive+0x82>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_SPI_TransmitReceive+0x82>
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e84:	e14e      	b.n	8002124 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d003      	beq.n	8001e9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2205      	movs	r2, #5
 8001e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	887a      	ldrh	r2, [r7, #2]
 8001eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	887a      	ldrh	r2, [r7, #2]
 8001ec2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d007      	beq.n	8001eee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ef6:	d178      	bne.n	8001fea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_SPI_TransmitReceive+0x10a>
 8001f00:	8b7b      	ldrh	r3, [r7, #26]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d166      	bne.n	8001fd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	881a      	ldrh	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	1c9a      	adds	r2, r3, #2
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f2a:	e053      	b.n	8001fd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d11b      	bne.n	8001f72 <HAL_SPI_TransmitReceive+0x176>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d016      	beq.n	8001f72 <HAL_SPI_TransmitReceive+0x176>
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d113      	bne.n	8001f72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	881a      	ldrh	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	1c9a      	adds	r2, r3, #2
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d119      	bne.n	8001fb4 <HAL_SPI_TransmitReceive+0x1b8>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d014      	beq.n	8001fb4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	b292      	uxth	r2, r2
 8001f96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	1c9a      	adds	r2, r3, #2
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fb4:	f7fe f922 	bl	80001fc <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d807      	bhi.n	8001fd4 <HAL_SPI_TransmitReceive+0x1d8>
 8001fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fca:	d003      	beq.n	8001fd4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fd2:	e0a7      	b.n	8002124 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1a6      	bne.n	8001f2c <HAL_SPI_TransmitReceive+0x130>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1a1      	bne.n	8001f2c <HAL_SPI_TransmitReceive+0x130>
 8001fe8:	e07c      	b.n	80020e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_SPI_TransmitReceive+0x1fc>
 8001ff2:	8b7b      	ldrh	r3, [r7, #26]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d16b      	bne.n	80020d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	330c      	adds	r3, #12
 8002002:	7812      	ldrb	r2, [r2, #0]
 8002004:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800201e:	e057      	b.n	80020d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b02      	cmp	r3, #2
 800202c:	d11c      	bne.n	8002068 <HAL_SPI_TransmitReceive+0x26c>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d017      	beq.n	8002068 <HAL_SPI_TransmitReceive+0x26c>
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	2b01      	cmp	r3, #1
 800203c:	d114      	bne.n	8002068 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	330c      	adds	r3, #12
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d119      	bne.n	80020aa <HAL_SPI_TransmitReceive+0x2ae>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d014      	beq.n	80020aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020a6:	2301      	movs	r3, #1
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020aa:	f7fe f8a7 	bl	80001fc <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d803      	bhi.n	80020c2 <HAL_SPI_TransmitReceive+0x2c6>
 80020ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d102      	bne.n	80020c8 <HAL_SPI_TransmitReceive+0x2cc>
 80020c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020ce:	e029      	b.n	8002124 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1a2      	bne.n	8002020 <HAL_SPI_TransmitReceive+0x224>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d19d      	bne.n	8002020 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f8b1 	bl	8002250 <SPI_EndRxTxTransaction>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2220      	movs	r2, #32
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002100:	e010      	b.n	8002124 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10b      	bne.n	8002122 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	e000      	b.n	8002124 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002122:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002134:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002138:	4618      	mov	r0, r3
 800213a:	3730      	adds	r7, #48	; 0x30
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002150:	f7fe f854 	bl	80001fc <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4413      	add	r3, r2
 800215e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002160:	f7fe f84c 	bl	80001fc <HAL_GetTick>
 8002164:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002166:	4b39      	ldr	r3, [pc, #228]	; (800224c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	015b      	lsls	r3, r3, #5
 800216c:	0d1b      	lsrs	r3, r3, #20
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002176:	e054      	b.n	8002222 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d050      	beq.n	8002222 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002180:	f7fe f83c 	bl	80001fc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	429a      	cmp	r2, r3
 800218e:	d902      	bls.n	8002196 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d13d      	bne.n	8002212 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ae:	d111      	bne.n	80021d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021b8:	d004      	beq.n	80021c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d107      	bne.n	80021d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021dc:	d10f      	bne.n	80021fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e017      	b.n	8002242 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3b01      	subs	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4013      	ands	r3, r2
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	bf0c      	ite	eq
 8002232:	2301      	moveq	r3, #1
 8002234:	2300      	movne	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	429a      	cmp	r2, r3
 800223e:	d19b      	bne.n	8002178 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000008 	.word	0x20000008

08002250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2200      	movs	r2, #0
 8002264:	2180      	movs	r1, #128	; 0x80
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7ff ff6a 	bl	8002140 <SPI_WaitFlagStateUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f043 0220 	orr.w	r2, r3, #32
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e000      	b.n	8002284 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e03f      	b.n	800231e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 ffd8 	bl	8003268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2224      	movs	r2, #36	; 0x24
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f829 	bl	8002328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002304:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002362:	f023 030c 	bic.w	r3, r3, #12
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	430b      	orrs	r3, r1
 800236e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2c      	ldr	r2, [pc, #176]	; (800243c <UART_SetConfig+0x114>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d103      	bne.n	8002398 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002390:	f7ff fbc8 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	e002      	b.n	800239e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002398:	f7ff fbb0 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 800239c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	009a      	lsls	r2, r3, #2
 80023a8:	441a      	add	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	4a22      	ldr	r2, [pc, #136]	; (8002440 <UART_SetConfig+0x118>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	0119      	lsls	r1, r3, #4
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009a      	lsls	r2, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <UART_SetConfig+0x118>)
 80023d6:	fba3 0302 	umull	r0, r3, r3, r2
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2064      	movs	r0, #100	; 0x64
 80023de:	fb00 f303 	mul.w	r3, r0, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	3332      	adds	r3, #50	; 0x32
 80023e8:	4a15      	ldr	r2, [pc, #84]	; (8002440 <UART_SetConfig+0x118>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f4:	4419      	add	r1, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	009a      	lsls	r2, r3, #2
 8002400:	441a      	add	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fbb2 f2f3 	udiv	r2, r2, r3
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <UART_SetConfig+0x118>)
 800240e:	fba3 0302 	umull	r0, r3, r3, r2
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2064      	movs	r0, #100	; 0x64
 8002416:	fb00 f303 	mul.w	r3, r0, r3
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	3332      	adds	r3, #50	; 0x32
 8002420:	4a07      	ldr	r2, [pc, #28]	; (8002440 <UART_SetConfig+0x118>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	440a      	add	r2, r1
 8002432:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013800 	.word	0x40013800
 8002440:	51eb851f 	.word	0x51eb851f

08002444 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002448:	f7fd fe80 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800244c:	f000 f816 	bl	800247c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002450:	f000 f968 	bl	8002724 <MX_GPIO_Init>
  MX_DMA_Init();
 8002454:	f000 f948 	bl	80026e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002458:	f000 f86c 	bl	8002534 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800245c:	f000 f91a 	bl	8002694 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002460:	f000 f8e2 	bl	8002628 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)value, 5);
 8002464:	2205      	movs	r2, #5
 8002466:	4903      	ldr	r1, [pc, #12]	; (8002474 <main+0x30>)
 8002468:	4803      	ldr	r0, [pc, #12]	; (8002478 <main+0x34>)
 800246a:	f7fd ffcd 	bl	8000408 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    runRadio();
 800246e:	f000 fd75 	bl	8002f5c <runRadio>
 8002472:	e7fc      	b.n	800246e <main+0x2a>
 8002474:	2000013c 	.word	0x2000013c
 8002478:	2000002c 	.word	0x2000002c

0800247c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b094      	sub	sp, #80	; 0x50
 8002480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002486:	2228      	movs	r2, #40	; 0x28
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f000 ffbc 	bl	8003408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024b6:	2300      	movs	r3, #0
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ba:	2301      	movs	r3, #1
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024be:	2302      	movs	r3, #2
 80024c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80024c8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80024cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe ff3e 	bl	8001354 <HAL_RCC_OscConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80024de:	f000 f9a7 	bl	8002830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024e2:	230f      	movs	r3, #15
 80024e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024e6:	2302      	movs	r3, #2
 80024e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2102      	movs	r1, #2
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f9aa 	bl	8001858 <HAL_RCC_ClockConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800250a:	f000 f991 	bl	8002830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800250e:	2302      	movs	r3, #2
 8002510:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002516:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fb34 	bl	8001b88 <HAL_RCCEx_PeriphCLKConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002526:	f000 f983 	bl	8002830 <Error_Handler>
  }
}
 800252a:	bf00      	nop
 800252c:	3750      	adds	r7, #80	; 0x50
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
   */
  hadc1.Instance = ADC1;
 8002544:	4b36      	ldr	r3, [pc, #216]	; (8002620 <MX_ADC1_Init+0xec>)
 8002546:	4a37      	ldr	r2, [pc, #220]	; (8002624 <MX_ADC1_Init+0xf0>)
 8002548:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800254a:	4b35      	ldr	r3, [pc, #212]	; (8002620 <MX_ADC1_Init+0xec>)
 800254c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002550:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002552:	4b33      	ldr	r3, [pc, #204]	; (8002620 <MX_ADC1_Init+0xec>)
 8002554:	2201      	movs	r2, #1
 8002556:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002558:	4b31      	ldr	r3, [pc, #196]	; (8002620 <MX_ADC1_Init+0xec>)
 800255a:	2200      	movs	r2, #0
 800255c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800255e:	4b30      	ldr	r3, [pc, #192]	; (8002620 <MX_ADC1_Init+0xec>)
 8002560:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002564:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002566:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <MX_ADC1_Init+0xec>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 800256c:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <MX_ADC1_Init+0xec>)
 800256e:	2205      	movs	r2, #5
 8002570:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002572:	482b      	ldr	r0, [pc, #172]	; (8002620 <MX_ADC1_Init+0xec>)
 8002574:	f7fd fe70 	bl	8000258 <HAL_ADC_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800257e:	f000 f957 	bl	8002830 <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002586:	2301      	movs	r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4823      	ldr	r0, [pc, #140]	; (8002620 <MX_ADC1_Init+0xec>)
 8002594:	f7fe f832 	bl	80005fc <HAL_ADC_ConfigChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800259e:	f000 f947 	bl	8002830 <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025a6:	2302      	movs	r3, #2
 80025a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80025aa:	2307      	movs	r3, #7
 80025ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	481b      	ldr	r0, [pc, #108]	; (8002620 <MX_ADC1_Init+0xec>)
 80025b4:	f7fe f822 	bl	80005fc <HAL_ADC_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80025be:	f000 f937 	bl	8002830 <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_5;
 80025c2:	2305      	movs	r3, #5
 80025c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80025c6:	2303      	movs	r3, #3
 80025c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4814      	ldr	r0, [pc, #80]	; (8002620 <MX_ADC1_Init+0xec>)
 80025d0:	f7fe f814 	bl	80005fc <HAL_ADC_ConfigChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80025da:	f000 f929 	bl	8002830 <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_6;
 80025de:	2306      	movs	r3, #6
 80025e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80025e2:	2304      	movs	r3, #4
 80025e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	480d      	ldr	r0, [pc, #52]	; (8002620 <MX_ADC1_Init+0xec>)
 80025ec:	f7fe f806 	bl	80005fc <HAL_ADC_ConfigChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80025f6:	f000 f91b 	bl	8002830 <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_9;
 80025fa:	2309      	movs	r3, #9
 80025fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80025fe:	2305      	movs	r3, #5
 8002600:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4806      	ldr	r0, [pc, #24]	; (8002620 <MX_ADC1_Init+0xec>)
 8002608:	f7fd fff8 	bl	80005fc <HAL_ADC_ConfigChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002612:	f000 f90d 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000002c 	.word	0x2000002c
 8002624:	40012400 	.word	0x40012400

08002628 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800262c:	4b17      	ldr	r3, [pc, #92]	; (800268c <MX_SPI2_Init+0x64>)
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <MX_SPI2_Init+0x68>)
 8002630:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <MX_SPI2_Init+0x64>)
 8002634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002638:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <MX_SPI2_Init+0x64>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <MX_SPI2_Init+0x64>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <MX_SPI2_Init+0x64>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <MX_SPI2_Init+0x64>)
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <MX_SPI2_Init+0x64>)
 8002654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002658:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <MX_SPI2_Init+0x64>)
 800265c:	2200      	movs	r2, #0
 800265e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <MX_SPI2_Init+0x64>)
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_SPI2_Init+0x64>)
 8002668:	2200      	movs	r2, #0
 800266a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <MX_SPI2_Init+0x64>)
 800266e:	2200      	movs	r2, #0
 8002670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_SPI2_Init+0x64>)
 8002674:	220a      	movs	r2, #10
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002678:	4804      	ldr	r0, [pc, #16]	; (800268c <MX_SPI2_Init+0x64>)
 800267a:	f7ff fb3b 	bl	8001cf4 <HAL_SPI_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002684:	f000 f8d4 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200000a0 	.word	0x200000a0
 8002690:	40003800 	.word	0x40003800

08002694 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 800269a:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <MX_USART1_UART_Init+0x50>)
 800269c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026ba:	220c      	movs	r2, #12
 80026bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026cc:	f7ff fdde 	bl	800228c <HAL_UART_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026d6:	f000 f8ab 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200000f8 	.word	0x200000f8
 80026e4:	40013800 	.word	0x40013800

080026e8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <MX_DMA_Init+0x38>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <MX_DMA_Init+0x38>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6153      	str	r3, [r2, #20]
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <MX_DMA_Init+0x38>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	200b      	movs	r0, #11
 800270c:	f7fe fa47 	bl	8000b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002710:	200b      	movs	r0, #11
 8002712:	f7fe fa60 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000

08002724 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002738:	4b39      	ldr	r3, [pc, #228]	; (8002820 <MX_GPIO_Init+0xfc>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a38      	ldr	r2, [pc, #224]	; (8002820 <MX_GPIO_Init+0xfc>)
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b36      	ldr	r3, [pc, #216]	; (8002820 <MX_GPIO_Init+0xfc>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002750:	4b33      	ldr	r3, [pc, #204]	; (8002820 <MX_GPIO_Init+0xfc>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4a32      	ldr	r2, [pc, #200]	; (8002820 <MX_GPIO_Init+0xfc>)
 8002756:	f043 0320 	orr.w	r3, r3, #32
 800275a:	6193      	str	r3, [r2, #24]
 800275c:	4b30      	ldr	r3, [pc, #192]	; (8002820 <MX_GPIO_Init+0xfc>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <MX_GPIO_Init+0xfc>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	4a2c      	ldr	r2, [pc, #176]	; (8002820 <MX_GPIO_Init+0xfc>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	6193      	str	r3, [r2, #24]
 8002774:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <MX_GPIO_Init+0xfc>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <MX_GPIO_Init+0xfc>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a26      	ldr	r2, [pc, #152]	; (8002820 <MX_GPIO_Init+0xfc>)
 8002786:	f043 0308 	orr.w	r3, r3, #8
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <MX_GPIO_Init+0xfc>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800279e:	4821      	ldr	r0, [pc, #132]	; (8002824 <MX_GPIO_Init+0x100>)
 80027a0:	f7fe fda6 	bl	80012f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027aa:	481f      	ldr	r0, [pc, #124]	; (8002828 <MX_GPIO_Init+0x104>)
 80027ac:	f7fe fda0 	bl	80012f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80027b0:	2200      	movs	r2, #0
 80027b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027b6:	481d      	ldr	r0, [pc, #116]	; (800282c <MX_GPIO_Init+0x108>)
 80027b8:	f7fe fd9a 	bl	80012f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80027bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c2:	2301      	movs	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2302      	movs	r3, #2
 80027cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f107 0310 	add.w	r3, r7, #16
 80027d2:	4619      	mov	r1, r3
 80027d4:	4813      	ldr	r0, [pc, #76]	; (8002824 <MX_GPIO_Init+0x100>)
 80027d6:	f7fe fc07 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 80027da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e0:	2301      	movs	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2302      	movs	r3, #2
 80027ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	4619      	mov	r1, r3
 80027f2:	480d      	ldr	r0, [pc, #52]	; (8002828 <MX_GPIO_Init+0x104>)
 80027f4:	f7fe fbf8 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 80027f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fe:	2301      	movs	r3, #1
 8002800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	2302      	movs	r3, #2
 8002808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 800280a:	f107 0310 	add.w	r3, r7, #16
 800280e:	4619      	mov	r1, r3
 8002810:	4806      	ldr	r0, [pc, #24]	; (800282c <MX_GPIO_Init+0x108>)
 8002812:	f7fe fbe9 	bl	8000fe8 <HAL_GPIO_Init>
}
 8002816:	bf00      	nop
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	40011000 	.word	0x40011000
 8002828:	40010c00 	.word	0x40010c00
 800282c:	40010800 	.word	0x40010800

08002830 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8002840:	2200      	movs	r2, #0
 8002842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002846:	4802      	ldr	r0, [pc, #8]	; (8002850 <nRF24_CSN_L+0x14>)
 8002848:	f7fe fd52 	bl	80012f0 <HAL_GPIO_WritePin>
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40010c00 	.word	0x40010c00

08002854 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800285e:	4802      	ldr	r0, [pc, #8]	; (8002868 <nRF24_CSN_H+0x14>)
 8002860:	f7fe fd46 	bl	80012f0 <HAL_GPIO_WritePin>
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40010c00 	.word	0x40010c00

0800286c <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af02      	add	r7, sp, #8
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi2,&data,&result,1,2000)!=HAL_OK) {
 8002876:	f107 020f 	add.w	r2, r7, #15
 800287a:	1df9      	adds	r1, r7, #7
 800287c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2301      	movs	r3, #1
 8002884:	4806      	ldr	r0, [pc, #24]	; (80028a0 <nRF24_LL_RW+0x34>)
 8002886:	f7ff fab9 	bl	8001dfc <HAL_SPI_TransmitReceive>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <nRF24_LL_RW+0x28>
        Error_Handler();
 8002890:	f7ff ffce 	bl	8002830 <Error_Handler>
    };
    return result;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200000a0 	.word	0x200000a0

080028a4 <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80028ae:	f7ff ffc5 	bl	800283c <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ffd6 	bl	800286c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80028c0:	20ff      	movs	r0, #255	; 0xff
 80028c2:	f7ff ffd3 	bl	800286c <nRF24_LL_RW>
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80028ca:	f7ff ffc3 	bl	8002854 <nRF24_CSN_H>

	return value;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	460a      	mov	r2, r1
 80028e2:	71fb      	strb	r3, [r7, #7]
 80028e4:	4613      	mov	r3, r2
 80028e6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80028e8:	f7ff ffa8 	bl	800283c <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	2b1f      	cmp	r3, #31
 80028f0:	d810      	bhi.n	8002914 <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	f043 0320 	orr.w	r3, r3, #32
 8002900:	b25b      	sxtb	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ffb1 	bl	800286c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800290a:	79bb      	ldrb	r3, [r7, #6]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ffad 	bl	800286c <nRF24_LL_RW>
 8002912:	e013      	b.n	800293c <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ffa8 	bl	800286c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	2be1      	cmp	r3, #225	; 0xe1
 8002920:	d00c      	beq.n	800293c <nRF24_WriteReg+0x64>
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	2be2      	cmp	r3, #226	; 0xe2
 8002926:	d009      	beq.n	800293c <nRF24_WriteReg+0x64>
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	2be3      	cmp	r3, #227	; 0xe3
 800292c:	d006      	beq.n	800293c <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	2bff      	cmp	r3, #255	; 0xff
 8002932:	d003      	beq.n	800293c <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 8002934:	79bb      	ldrb	r3, [r7, #6]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff98 	bl	800286c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800293c:	f7ff ff8a 	bl	8002854 <nRF24_CSN_H>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
 8002954:	4613      	mov	r3, r2
 8002956:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002958:	f7ff ff70 	bl	800283c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff84 	bl	800286c <nRF24_LL_RW>
	while (count--)
 8002964:	e007      	b.n	8002976 <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8002966:	683c      	ldr	r4, [r7, #0]
 8002968:	1c63      	adds	r3, r4, #1
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	20ff      	movs	r0, #255	; 0xff
 800296e:	f7ff ff7d 	bl	800286c <nRF24_LL_RW>
 8002972:	4603      	mov	r3, r0
 8002974:	7023      	strb	r3, [r4, #0]
	while (count--)
 8002976:	79bb      	ldrb	r3, [r7, #6]
 8002978:	1e5a      	subs	r2, r3, #1
 800297a:	71ba      	strb	r2, [r7, #6]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f2      	bne.n	8002966 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8002980:	f7ff ff68 	bl	8002854 <nRF24_CSN_H>
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bd90      	pop	{r4, r7, pc}

0800298c <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
 8002998:	4613      	mov	r3, r2
 800299a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800299c:	f7ff ff4e 	bl	800283c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff62 	bl	800286c <nRF24_LL_RW>
	while (count--)
 80029a8:	e006      	b.n	80029b8 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	603a      	str	r2, [r7, #0]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff5a 	bl	800286c <nRF24_LL_RW>
	while (count--)
 80029b8:	79bb      	ldrb	r3, [r7, #6]
 80029ba:	1e5a      	subs	r2, r3, #1
 80029bc:	71ba      	strb	r2, [r7, #6]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f3      	bne.n	80029aa <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80029c2:	f7ff ff47 	bl	8002854 <nRF24_CSN_H>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 80029d2:	2108      	movs	r1, #8
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7ff ff7f 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 80029da:	213f      	movs	r1, #63	; 0x3f
 80029dc:	2001      	movs	r0, #1
 80029de:	f7ff ff7b 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 80029e2:	2103      	movs	r1, #3
 80029e4:	2002      	movs	r0, #2
 80029e6:	f7ff ff77 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 80029ea:	2103      	movs	r1, #3
 80029ec:	2003      	movs	r0, #3
 80029ee:	f7ff ff73 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 80029f2:	2103      	movs	r1, #3
 80029f4:	2004      	movs	r0, #4
 80029f6:	f7ff ff6f 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 80029fa:	2102      	movs	r1, #2
 80029fc:	2005      	movs	r0, #5
 80029fe:	f7ff ff6b 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 8002a02:	210e      	movs	r1, #14
 8002a04:	2006      	movs	r0, #6
 8002a06:	f7ff ff67 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	2007      	movs	r0, #7
 8002a0e:	f7ff ff63 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8002a12:	2100      	movs	r1, #0
 8002a14:	2011      	movs	r0, #17
 8002a16:	f7ff ff5f 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2012      	movs	r0, #18
 8002a1e:	f7ff ff5b 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8002a22:	2100      	movs	r1, #0
 8002a24:	2013      	movs	r0, #19
 8002a26:	f7ff ff57 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2014      	movs	r0, #20
 8002a2e:	f7ff ff53 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002a32:	2100      	movs	r1, #0
 8002a34:	2015      	movs	r0, #21
 8002a36:	f7ff ff4f 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	2016      	movs	r0, #22
 8002a3e:	f7ff ff4b 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8002a42:	2100      	movs	r1, #0
 8002a44:	201c      	movs	r0, #28
 8002a46:	f7ff ff47 	bl	80028d8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	201d      	movs	r0, #29
 8002a4e:	f7ff ff43 	bl	80028d8 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 8002a52:	f000 f98f 	bl	8002d74 <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 8002a56:	f000 f985 	bl	8002d64 <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 8002a5a:	f000 f993 	bl	8002d84 <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 8002a5e:	f7ff fef9 	bl	8002854 <nRF24_CSN_H>
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <nRF24_Check+0x58>)
 8002a70:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8002a72:	2205      	movs	r2, #5
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	2030      	movs	r0, #48	; 0x30
 8002a78:	f7ff ff88 	bl	800298c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8002a7c:	463b      	mov	r3, r7
 8002a7e:	2205      	movs	r2, #5
 8002a80:	4619      	mov	r1, r3
 8002a82:	2010      	movs	r0, #16
 8002a84:	f7ff ff60 	bl	8002948 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
 8002a8c:	e00f      	b.n	8002aae <nRF24_Check+0x46>
	{
		if (rxbuf[i] != *ptr++)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	3310      	adds	r3, #16
 8002a92:	443b      	add	r3, r7
 8002a94:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <nRF24_Check+0x40>
			return 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e006      	b.n	8002ab6 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d9ec      	bls.n	8002a8e <nRF24_Check+0x26>
	}

	return 1;
 8002ab4:	2301      	movs	r3, #1
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	08003440 	.word	0x08003440

08002ac4 <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7ff fee8 	bl	80028a4 <nRF24_ReadReg>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d104      	bne.n	8002ae8 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e003      	b.n	8002af0 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	f023 0302 	bic.w	r3, r3, #2
 8002aee:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	4619      	mov	r1, r3
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7ff feef 	bl	80028d8 <nRF24_WriteReg>
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7ff fec9 	bl	80028a4 <nRF24_ReadReg>
 8002b12:	4603      	mov	r3, r0
 8002b14:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	b25a      	sxtb	r2, r3
 8002b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	4619      	mov	r1, r3
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff fece 	bl	80028d8 <nRF24_WriteReg>
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7ff fea8 	bl	80028a4 <nRF24_ReadReg>
 8002b54:	4603      	mov	r3, r0
 8002b56:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	f023 030c 	bic.w	r3, r3, #12
 8002b5e:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	b25a      	sxtb	r2, r3
 8002b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	b25b      	sxtb	r3, r3
 8002b72:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	4619      	mov	r1, r3
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7ff fead 	bl	80028d8 <nRF24_WriteReg>
}
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	4619      	mov	r1, r3
 8002b94:	2005      	movs	r0, #5
 8002b96:	f7ff fe9f 	bl	80028d8 <nRF24_WriteReg>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <nRF24_SetAutoRetr>:
// input:
//   ard -Thời gian giữa những lần truyền lại
//   arc - Số lần truyện lại (tối đa 15)
// note: 0x00 có nghĩa là tắt chức năng truyền lại
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	460a      	mov	r2, r1
 8002bac:	71fb      	strb	r3, [r7, #7]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	b25a      	sxtb	r2, r3
 8002bb8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b25b      	sxtb	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	4619      	mov	r1, r3
 8002bca:	2004      	movs	r0, #4
 8002bcc:	f7ff fe84 	bl	80028d8 <nRF24_WriteReg>
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	3b02      	subs	r3, #2
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	4619      	mov	r1, r3
 8002bea:	2003      	movs	r0, #3
 8002bec:	f7ff fe74 	bl	80028d8 <nRF24_WriteReg>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d00a      	beq.n	8002c20 <nRF24_SetAddr+0x28>
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	dc36      	bgt.n	8002c7c <nRF24_SetAddr+0x84>
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	dc02      	bgt.n	8002c18 <nRF24_SetAddr+0x20>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	da04      	bge.n	8002c20 <nRF24_SetAddr+0x28>
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
		break;
	default:
		break;
 8002c16:	e031      	b.n	8002c7c <nRF24_SetAddr+0x84>
 8002c18:	3b02      	subs	r3, #2
	switch (pipe)
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d82e      	bhi.n	8002c7c <nRF24_SetAddr+0x84>
 8002c1e:	e023      	b.n	8002c68 <nRF24_SetAddr+0x70>
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8002c20:	2003      	movs	r0, #3
 8002c22:	f7ff fe3f 	bl	80028a4 <nRF24_ReadReg>
 8002c26:	4603      	mov	r3, r0
 8002c28:	3301      	adds	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
		addr += addr_width;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 8002c34:	f7ff fe02 	bl	800283c <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <nRF24_SetAddr+0x90>)
 8002c3c:	5cd3      	ldrb	r3, [r2, r3]
 8002c3e:	f043 0320 	orr.w	r3, r3, #32
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fe11 	bl	800286c <nRF24_LL_RW>
			nRF24_LL_RW(*addr--);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	1e5a      	subs	r2, r3, #1
 8002c4e:	603a      	str	r2, [r7, #0]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fe0a 	bl	800286c <nRF24_LL_RW>
		} while (addr_width--);
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	1e5a      	subs	r2, r3, #1
 8002c5c:	73fa      	strb	r2, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f3      	bne.n	8002c4a <nRF24_SetAddr+0x52>
		nRF24_CSN_H();
 8002c62:	f7ff fdf7 	bl	8002854 <nRF24_CSN_H>
		break;
 8002c66:	e00a      	b.n	8002c7e <nRF24_SetAddr+0x86>
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <nRF24_SetAddr+0x90>)
 8002c6c:	5cd2      	ldrb	r2, [r2, r3]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4619      	mov	r1, r3
 8002c74:	4610      	mov	r0, r2
 8002c76:	f7ff fe2f 	bl	80028d8 <nRF24_WriteReg>
		break;
 8002c7a:	e000      	b.n	8002c7e <nRF24_SetAddr+0x86>
		break;
 8002c7c:	bf00      	nop
	}
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	08003448 	.word	0x08003448

08002c8c <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002c96:	2006      	movs	r0, #6
 8002c98:	f7ff fe04 	bl	80028a4 <nRF24_ReadReg>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	f023 0306 	bic.w	r3, r3, #6
 8002ca6:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	2006      	movs	r0, #6
 8002cb6:	f7ff fe0f 	bl	80028d8 <nRF24_WriteReg>
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002ccc:	2006      	movs	r0, #6
 8002cce:	f7ff fde9 	bl	80028a4 <nRF24_ReadReg>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002cdc:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	2006      	movs	r0, #6
 8002cec:	f7ff fdf4 	bl	80028d8 <nRF24_WriteReg>
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <nRF24_EnableAA>:
 * @brief CHo phép auto retransmit cho từng pipe
 *
 * @param pipe pipe cần cấu hình
 */
void nRF24_EnableAA(uint8_t pipe)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002d02:	2001      	movs	r0, #1
 8002d04:	f7ff fdce 	bl	80028a4 <nRF24_ReadReg>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	b25a      	sxtb	r2, r3
 8002d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	4619      	mov	r1, r3
 8002d24:	2001      	movs	r0, #1
 8002d26:	f7ff fdd7 	bl	80028d8 <nRF24_WriteReg>
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <nRF24_GetStatus>:
 * @brief lấy giá trị STATUS register
 *
 * @return uint8_t Giá trị của STATUS
 */
uint8_t nRF24_GetStatus(void)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8002d36:	2007      	movs	r0, #7
 8002d38:	f7ff fdb4 	bl	80028a4 <nRF24_ReadReg>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <nRF24_ResetPLOS>:
/**
 * @brief Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
 *
 */
void nRF24_ResetPLOS(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 8002d48:	2005      	movs	r0, #5
 8002d4a:	f7ff fdab 	bl	80028a4 <nRF24_ReadReg>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	4619      	mov	r1, r3
 8002d56:	2005      	movs	r0, #5
 8002d58:	f7ff fdbe 	bl	80028d8 <nRF24_WriteReg>
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8002d68:	21ff      	movs	r1, #255	; 0xff
 8002d6a:	20e1      	movs	r0, #225	; 0xe1
 8002d6c:	f7ff fdb4 	bl	80028d8 <nRF24_WriteReg>
}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8002d78:	21ff      	movs	r1, #255	; 0xff
 8002d7a:	20e2      	movs	r0, #226	; 0xe2
 8002d7c:	f7ff fdac 	bl	80028d8 <nRF24_WriteReg>
}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8002d8a:	2007      	movs	r0, #7
 8002d8c:	f7ff fd8a 	bl	80028a4 <nRF24_ReadReg>
 8002d90:	4603      	mov	r3, r0
 8002d92:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d9a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	2007      	movs	r0, #7
 8002da2:	f7ff fd99 	bl	80028d8 <nRF24_WriteReg>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <nRF24_WritePayload>:
 *
 * @param pBuf con trỏ , trỏ tới buffer chứa paylaod
 * @param length độ dài của paylaod
 */
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	20a0      	movs	r0, #160	; 0xa0
 8002dc2:	f7ff fde3 	bl	800298c <nRF24_WriteMBReg>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dda:	4802      	ldr	r0, [pc, #8]	; (8002de4 <nRF24_CE_L+0x14>)
 8002ddc:	f7fe fa88 	bl	80012f0 <HAL_GPIO_WritePin>
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40010800 	.word	0x40010800

08002de8 <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8002dec:	2201      	movs	r2, #1
 8002dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002df2:	4802      	ldr	r0, [pc, #8]	; (8002dfc <nRF24_CE_H+0x14>)
 8002df4:	f7fe fa7c 	bl	80012f0 <HAL_GPIO_WritePin>
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40010800 	.word	0x40010800

08002e00 <Delay_ms>:


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7fd fa01 	bl	8000210 <HAL_Delay>
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <Toggle_LED>:
uint16_t len;
extern uint32_t value[5];
extern UART_HandleTypeDef huart1;

void Toggle_LED()
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <Toggle_LED+0x14>)
 8002e22:	f7fe fa7d 	bl	8001320 <HAL_GPIO_TogglePin>
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40011000 	.word	0x40011000

08002e30 <convert_to_us>:

NRF_Packet payload_packet;
uint8_t payload_length = sizeof(payload_packet);

uint32_t convert_to_us(uint32_t val, uint32_t min, uint32_t middle, uint32_t max)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
    if (val > max)
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d901      	bls.n	8002e4a <convert_to_us+0x1a>
        val = max;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
    if (val < min)
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d201      	bcs.n	8002e56 <convert_to_us+0x26>
        val = min;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	60fb      	str	r3, [r7, #12]
    if (val < middle)
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d20e      	bcs.n	8002e7c <convert_to_us+0x4c>
        return (val - min) * (1500 - 1000) / (middle - min) + 1000;
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e68:	fb03 f202 	mul.w	r2, r3, r2
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	1acb      	subs	r3, r1, r3
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002e7a:	e00d      	b.n	8002e98 <convert_to_us+0x68>
    else
        return (val - middle) * (2000 - 1500) / (max - middle) + 1500;
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e86:	fb03 f202 	mul.w	r2, r3, r2
 8002e8a:	6839      	ldr	r1, [r7, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	1acb      	subs	r3, r1, r3
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
	...

08002ea4 <nRF24_TransmitPacket>:
} nRF24_TXResult;

// Length of received payload

nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	70fb      	strb	r3, [r7, #3]
    volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <nRF24_TransmitPacket+0x80>)
 8002eb2:	60bb      	str	r3, [r7, #8]
    uint8_t status;
    nRF24_CE_L();
 8002eb4:	f7ff ff8c 	bl	8002dd0 <nRF24_CE_L>
    nRF24_WritePayload(pBuf, length);
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff76 	bl	8002dae <nRF24_WritePayload>
    nRF24_CE_H();
 8002ec2:	f7ff ff91 	bl	8002de8 <nRF24_CE_H>

    do
    {
        status = nRF24_GetStatus();
 8002ec6:	f7ff ff34 	bl	8002d32 <nRF24_GetStatus>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	73fb      	strb	r3, [r7, #15]
        if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT))
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <nRF24_TransmitPacket+0x40>
        {
            break;
        }
    } while (wait--);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	60ba      	str	r2, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f1      	bne.n	8002ec6 <nRF24_TransmitPacket+0x22>
 8002ee2:	e000      	b.n	8002ee6 <nRF24_TransmitPacket+0x42>
            break;
 8002ee4:	bf00      	nop
    nRF24_CE_L();
 8002ee6:	f7ff ff73 	bl	8002dd0 <nRF24_CE_L>

    if (!wait)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <nRF24_TransmitPacket+0x50>
        return nRF24_TX_TIMEOUT;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e012      	b.n	8002f1a <nRF24_TransmitPacket+0x76>

    nRF24_ClearIRQFlags();
 8002ef4:	f7ff ff46 	bl	8002d84 <nRF24_ClearIRQFlags>

    if (status & nRF24_FLAG_MAX_RT)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <nRF24_TransmitPacket+0x62>
        return nRF24_TX_MAXRT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e009      	b.n	8002f1a <nRF24_TransmitPacket+0x76>

    if (status & nRF24_FLAG_TX_DS)
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <nRF24_TransmitPacket+0x70>
        return nRF24_TX_SUCCESS;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e002      	b.n	8002f1a <nRF24_TransmitPacket+0x76>

    nRF24_FlushTX();
 8002f14:	f7ff ff26 	bl	8002d64 <nRF24_FlushTX>

    return nRF24_TX_ERROR;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	000fffff 	.word	0x000fffff

08002f28 <reset_controller>:
void reset_controller(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
    payload_packet.throttle = 0;
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <reset_controller+0x30>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
    payload_packet.yaw = 127;
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <reset_controller+0x30>)
 8002f34:	227f      	movs	r2, #127	; 0x7f
 8002f36:	605a      	str	r2, [r3, #4]
    payload_packet.pitch = 127;
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <reset_controller+0x30>)
 8002f3a:	227f      	movs	r2, #127	; 0x7f
 8002f3c:	609a      	str	r2, [r3, #8]
    payload_packet.roll = 127;
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <reset_controller+0x30>)
 8002f40:	227f      	movs	r2, #127	; 0x7f
 8002f42:	60da      	str	r2, [r3, #12]
    payload_packet.button = 0;
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <reset_controller+0x30>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]
    payload_packet.button_1 = 0;
 8002f4a:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <reset_controller+0x30>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	20000150 	.word	0x20000150

08002f5c <runRadio>:

#endif // DEMO_TX_

int runRadio(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
#if (DEBUG_FC)
    printf("\r\nSTM32 is online.\r\n");
#endif // debug
    nRF24_CE_L();
 8002f62:	f7ff ff35 	bl	8002dd0 <nRF24_CE_L>
#if (DEBUG_FC)
    printf("nRF24L01+ check: ");
#endif
    if (!nRF24_Check())
 8002f66:	f7ff fd7f 	bl	8002a68 <nRF24_Check>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <runRadio+0x20>
    {
        while (1)
        {
            Toggle_LED();
 8002f70:	f7ff ff52 	bl	8002e18 <Toggle_LED>
            Delay_ms(50);
 8002f74:	2032      	movs	r0, #50	; 0x32
 8002f76:	f7ff ff43 	bl	8002e00 <Delay_ms>
            Toggle_LED();
 8002f7a:	e7f9      	b.n	8002f70 <runRadio+0x14>
#if (DEBUG_FC)
            printf("FAIL\r\n");
#endif
        }
    }
    nRF24_Init();
 8002f7c:	f7ff fd27 	bl	80029ce <nRF24_Init>

    /***************************************************************************/

#if (TX_SINGLE)

    nRF24_SetRFChannel(40);
 8002f80:	2028      	movs	r0, #40	; 0x28
 8002f82:	f7ff fe00 	bl	8002b86 <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8002f86:	2008      	movs	r0, #8
 8002f88:	f7ff fe9b 	bl	8002cc2 <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8002f8c:	200c      	movs	r0, #12
 8002f8e:	f7ff fdd9 	bl	8002b44 <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 8002f92:	2003      	movs	r0, #3
 8002f94:	f7ff fe20 	bl	8002bd8 <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 8002f98:	4930      	ldr	r1, [pc, #192]	; (800305c <runRadio+0x100>)
 8002f9a:	2006      	movs	r0, #6
 8002f9c:	f7ff fe2c 	bl	8002bf8 <nRF24_SetAddr>
    nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR);
 8002fa0:	492e      	ldr	r1, [pc, #184]	; (800305c <runRadio+0x100>)
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7ff fe28 	bl	8002bf8 <nRF24_SetAddr>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8002fa8:	2006      	movs	r0, #6
 8002faa:	f7ff fe6f 	bl	8002c8c <nRF24_SetTXPower>
    nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 8002fae:	210a      	movs	r1, #10
 8002fb0:	2009      	movs	r0, #9
 8002fb2:	f7ff fdf6 	bl	8002ba2 <nRF24_SetAutoRetr>
    nRF24_EnableAA(nRF24_PIPE0);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7ff fe9e 	bl	8002cf8 <nRF24_EnableAA>
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7ff fda0 	bl	8002b02 <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 8002fc2:	f7ff fedf 	bl	8002d84 <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f7ff fd7c 	bl	8002ac4 <nRF24_SetPowerMode>

    // payload_length = sizeof(payload_packet);
    reset_controller();
 8002fcc:	f7ff ffac 	bl	8002f28 <reset_controller>
    while (1)
    {

        payload_packet.throttle = convert_to_us(value[0], 700, 1697, 4095);
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <runRadio+0x104>)
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002fd8:	f240 62a1 	movw	r2, #1697	; 0x6a1
 8002fdc:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002fe0:	f7ff ff26 	bl	8002e30 <convert_to_us>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <runRadio+0x108>)
 8002fe8:	6013      	str	r3, [r2, #0]
        payload_packet.roll = convert_to_us(value[1], 800, 2530, 4095);
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <runRadio+0x104>)
 8002fec:	6858      	ldr	r0, [r3, #4]
 8002fee:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002ff2:	f640 12e2 	movw	r2, #2530	; 0x9e2
 8002ff6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002ffa:	f7ff ff19 	bl	8002e30 <convert_to_us>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a18      	ldr	r2, [pc, #96]	; (8003064 <runRadio+0x108>)
 8003002:	60d3      	str	r3, [r2, #12]
        payload_packet.pitch = convert_to_us(value[2], 250, 2370, 4095);
 8003004:	4b16      	ldr	r3, [pc, #88]	; (8003060 <runRadio+0x104>)
 8003006:	6898      	ldr	r0, [r3, #8]
 8003008:	f640 73ff 	movw	r3, #4095	; 0xfff
 800300c:	f640 1242 	movw	r2, #2370	; 0x942
 8003010:	21fa      	movs	r1, #250	; 0xfa
 8003012:	f7ff ff0d 	bl	8002e30 <convert_to_us>
 8003016:	4603      	mov	r3, r0
 8003018:	4a12      	ldr	r2, [pc, #72]	; (8003064 <runRadio+0x108>)
 800301a:	6093      	str	r3, [r2, #8]
        payload_packet.yaw = convert_to_us(value[3], 0, 2570, 4095);
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <runRadio+0x104>)
 800301e:	68d8      	ldr	r0, [r3, #12]
 8003020:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003024:	f640 220a 	movw	r2, #2570	; 0xa0a
 8003028:	2100      	movs	r1, #0
 800302a:	f7ff ff01 	bl	8002e30 <convert_to_us>
 800302e:	4603      	mov	r3, r0
 8003030:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <runRadio+0x108>)
 8003032:	6053      	str	r3, [r2, #4]
#if (DEBUG_FC)
        printf("value: %ld  %ld  %ld  %ld\n", payload_packet.throttle, payload_packet.roll, payload_packet.pitch, payload_packet.yaw);
        printf("value: %ld  %ld  %ld  %ld\n", value[0], value[1], value[2], value[3]);
#endif // debug

        nRF24_TXResult result = nRF24_TransmitPacket((uint8_t *)&payload_packet, payload_length);
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <runRadio+0x10c>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	480a      	ldr	r0, [pc, #40]	; (8003064 <runRadio+0x108>)
 800303c:	f7ff ff32 	bl	8002ea4 <nRF24_TransmitPacket>
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]

        switch (result)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d005      	beq.n	8003056 <runRadio+0xfa>
 800304a:	2b03      	cmp	r3, #3
 800304c:	d000      	beq.n	8003050 <runRadio+0xf4>
            nRF24_ResetPLOS();
            break;
        case nRF24_TX_TIMEOUT:
        default:
            // todo: Bị lỗi khi truyền đi
            break;
 800304e:	e003      	b.n	8003058 <runRadio+0xfc>
            nRF24_ResetPLOS();
 8003050:	f7ff fe77 	bl	8002d42 <nRF24_ResetPLOS>
            break;
 8003054:	e000      	b.n	8003058 <runRadio+0xfc>
            break;
 8003056:	bf00      	nop
    {
 8003058:	e7ba      	b.n	8002fd0 <runRadio+0x74>
 800305a:	bf00      	nop
 800305c:	08003450 	.word	0x08003450
 8003060:	2000013c 	.word	0x2000013c
 8003064:	20000150 	.word	0x20000150
 8003068:	20000005 	.word	0x20000005

0800306c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_MspInit+0x5c>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <HAL_MspInit+0x5c>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6193      	str	r3, [r2, #24]
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_MspInit+0x5c>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_MspInit+0x5c>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <HAL_MspInit+0x5c>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	61d3      	str	r3, [r2, #28]
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_MspInit+0x5c>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_MspInit+0x60>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	4a04      	ldr	r2, [pc, #16]	; (80030cc <HAL_MspInit+0x60>)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40010000 	.word	0x40010000

080030d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 0318 	add.w	r3, r7, #24
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a33      	ldr	r2, [pc, #204]	; (80031b8 <HAL_ADC_MspInit+0xe8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d15f      	bne.n	80031b0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030f0:	4b32      	ldr	r3, [pc, #200]	; (80031bc <HAL_ADC_MspInit+0xec>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	4a31      	ldr	r2, [pc, #196]	; (80031bc <HAL_ADC_MspInit+0xec>)
 80030f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fa:	6193      	str	r3, [r2, #24]
 80030fc:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_ADC_MspInit+0xec>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <HAL_ADC_MspInit+0xec>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	4a2b      	ldr	r2, [pc, #172]	; (80031bc <HAL_ADC_MspInit+0xec>)
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	6193      	str	r3, [r2, #24]
 8003114:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_ADC_MspInit+0xec>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <HAL_ADC_MspInit+0xec>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	4a25      	ldr	r2, [pc, #148]	; (80031bc <HAL_ADC_MspInit+0xec>)
 8003126:	f043 0308 	orr.w	r3, r3, #8
 800312a:	6193      	str	r3, [r2, #24]
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_ADC_MspInit+0xec>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6;
 8003138:	2363      	movs	r3, #99	; 0x63
 800313a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800313c:	2303      	movs	r3, #3
 800313e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003140:	f107 0318 	add.w	r3, r7, #24
 8003144:	4619      	mov	r1, r3
 8003146:	481e      	ldr	r0, [pc, #120]	; (80031c0 <HAL_ADC_MspInit+0xf0>)
 8003148:	f7fd ff4e 	bl	8000fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800314c:	2302      	movs	r3, #2
 800314e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003150:	2303      	movs	r3, #3
 8003152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003154:	f107 0318 	add.w	r3, r7, #24
 8003158:	4619      	mov	r1, r3
 800315a:	481a      	ldr	r0, [pc, #104]	; (80031c4 <HAL_ADC_MspInit+0xf4>)
 800315c:	f7fd ff44 	bl	8000fe8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 8003162:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <HAL_ADC_MspInit+0xfc>)
 8003164:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 8003168:	2200      	movs	r2, #0
 800316a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 800317a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 8003182:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003186:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 800318a:	2220      	movs	r2, #32
 800318c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800318e:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 8003190:	2200      	movs	r2, #0
 8003192:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003194:	480c      	ldr	r0, [pc, #48]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 8003196:	f7fd fd39 	bl	8000c0c <HAL_DMA_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80031a0:	f7ff fb46 	bl	8002830 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 80031a8:	621a      	str	r2, [r3, #32]
 80031aa:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <HAL_ADC_MspInit+0xf8>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031b0:	bf00      	nop
 80031b2:	3728      	adds	r7, #40	; 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40012400 	.word	0x40012400
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40010800 	.word	0x40010800
 80031c4:	40010c00 	.word	0x40010c00
 80031c8:	2000005c 	.word	0x2000005c
 80031cc:	40020008 	.word	0x40020008

080031d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0310 	add.w	r3, r7, #16
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1c      	ldr	r2, [pc, #112]	; (800325c <HAL_SPI_MspInit+0x8c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d131      	bne.n	8003254 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_SPI_MspInit+0x90>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <HAL_SPI_MspInit+0x90>)
 80031f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031fa:	61d3      	str	r3, [r2, #28]
 80031fc:	4b18      	ldr	r3, [pc, #96]	; (8003260 <HAL_SPI_MspInit+0x90>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003208:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_SPI_MspInit+0x90>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <HAL_SPI_MspInit+0x90>)
 800320e:	f043 0308 	orr.w	r3, r3, #8
 8003212:	6193      	str	r3, [r2, #24]
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_SPI_MspInit+0x90>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MOSI_Pin;
 8003220:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003224:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800322a:	2303      	movs	r3, #3
 800322c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	f107 0310 	add.w	r3, r7, #16
 8003232:	4619      	mov	r1, r3
 8003234:	480b      	ldr	r0, [pc, #44]	; (8003264 <HAL_SPI_MspInit+0x94>)
 8003236:	f7fd fed7 	bl	8000fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 800323a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800323e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	4619      	mov	r1, r3
 800324e:	4805      	ldr	r0, [pc, #20]	; (8003264 <HAL_SPI_MspInit+0x94>)
 8003250:	f7fd feca 	bl	8000fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003254:	bf00      	nop
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40003800 	.word	0x40003800
 8003260:	40021000 	.word	0x40021000
 8003264:	40010c00 	.word	0x40010c00

08003268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <HAL_UART_MspInit+0x8c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d131      	bne.n	80032ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <HAL_UART_MspInit+0x90>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <HAL_UART_MspInit+0x90>)
 800328e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003292:	6193      	str	r3, [r2, #24]
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <HAL_UART_MspInit+0x90>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_UART_MspInit+0x90>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <HAL_UART_MspInit+0x90>)
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	6193      	str	r3, [r2, #24]
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_UART_MspInit+0x90>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032c2:	2303      	movs	r3, #3
 80032c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c6:	f107 0310 	add.w	r3, r7, #16
 80032ca:	4619      	mov	r1, r3
 80032cc:	480b      	ldr	r0, [pc, #44]	; (80032fc <HAL_UART_MspInit+0x94>)
 80032ce:	f7fd fe8b 	bl	8000fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	4619      	mov	r1, r3
 80032e6:	4805      	ldr	r0, [pc, #20]	; (80032fc <HAL_UART_MspInit+0x94>)
 80032e8:	f7fd fe7e 	bl	8000fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80032ec:	bf00      	nop
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40010800 	.word	0x40010800

08003300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003310:	e7fe      	b.n	8003310 <HardFault_Handler+0x4>

08003312 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003316:	e7fe      	b.n	8003316 <MemManage_Handler+0x4>

08003318 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800331c:	e7fe      	b.n	800331c <BusFault_Handler+0x4>

0800331e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003322:	e7fe      	b.n	8003322 <UsageFault_Handler+0x4>

08003324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800334c:	f7fc ff44 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <DMA1_Channel1_IRQHandler+0x10>)
 800335a:	f7fd fd11 	bl	8000d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	2000005c 	.word	0x2000005c

08003368 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003374:	480c      	ldr	r0, [pc, #48]	; (80033a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003376:	490d      	ldr	r1, [pc, #52]	; (80033ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003378:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800337a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800337c:	e002      	b.n	8003384 <LoopCopyDataInit>

0800337e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800337e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003382:	3304      	adds	r3, #4

08003384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003388:	d3f9      	bcc.n	800337e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800338c:	4c0a      	ldr	r4, [pc, #40]	; (80033b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800338e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003390:	e001      	b.n	8003396 <LoopFillZerobss>

08003392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003394:	3204      	adds	r2, #4

08003396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003398:	d3fb      	bcc.n	8003392 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800339a:	f7ff ffe5 	bl	8003368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800339e:	f000 f80f 	bl	80033c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033a2:	f7ff f84f 	bl	8002444 <main>
  bx lr
 80033a6:	4770      	bx	lr
  ldr r0, =_sdata
 80033a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80033b0:	08003474 	.word	0x08003474
  ldr r2, =_sbss
 80033b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80033b8:	20000168 	.word	0x20000168

080033bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033bc:	e7fe      	b.n	80033bc <ADC1_2_IRQHandler>
	...

080033c0 <__libc_init_array>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2600      	movs	r6, #0
 80033c4:	4d0c      	ldr	r5, [pc, #48]	; (80033f8 <__libc_init_array+0x38>)
 80033c6:	4c0d      	ldr	r4, [pc, #52]	; (80033fc <__libc_init_array+0x3c>)
 80033c8:	1b64      	subs	r4, r4, r5
 80033ca:	10a4      	asrs	r4, r4, #2
 80033cc:	42a6      	cmp	r6, r4
 80033ce:	d109      	bne.n	80033e4 <__libc_init_array+0x24>
 80033d0:	f000 f822 	bl	8003418 <_init>
 80033d4:	2600      	movs	r6, #0
 80033d6:	4d0a      	ldr	r5, [pc, #40]	; (8003400 <__libc_init_array+0x40>)
 80033d8:	4c0a      	ldr	r4, [pc, #40]	; (8003404 <__libc_init_array+0x44>)
 80033da:	1b64      	subs	r4, r4, r5
 80033dc:	10a4      	asrs	r4, r4, #2
 80033de:	42a6      	cmp	r6, r4
 80033e0:	d105      	bne.n	80033ee <__libc_init_array+0x2e>
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e8:	4798      	blx	r3
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7ee      	b.n	80033cc <__libc_init_array+0xc>
 80033ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f2:	4798      	blx	r3
 80033f4:	3601      	adds	r6, #1
 80033f6:	e7f2      	b.n	80033de <__libc_init_array+0x1e>
 80033f8:	0800346c 	.word	0x0800346c
 80033fc:	0800346c 	.word	0x0800346c
 8003400:	0800346c 	.word	0x0800346c
 8003404:	08003470 	.word	0x08003470

08003408 <memset>:
 8003408:	4603      	mov	r3, r0
 800340a:	4402      	add	r2, r0
 800340c:	4293      	cmp	r3, r2
 800340e:	d100      	bne.n	8003412 <memset+0xa>
 8003410:	4770      	bx	lr
 8003412:	f803 1b01 	strb.w	r1, [r3], #1
 8003416:	e7f9      	b.n	800340c <memset+0x4>

08003418 <_init>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr

08003424 <_fini>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr
