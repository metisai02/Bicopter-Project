
Test_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004058  08004058  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004058  08004058  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004058  08004058  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  080040d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080040d0  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a882  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ef  00000000  00000000  0002a91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002cb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002d690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018465  00000000  00000000  0002e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1f2  00000000  00000000  0004659d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089fca  00000000  00000000  0005278f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c0  00000000  00000000  000dc7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fb8 	.word	0x08003fb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003fb8 	.word	0x08003fb8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 fd13 	bl	8000b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f003 f890 	bl	800329c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 fd2b 	bl	8000c02 <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295
 80001c4:	f000 fcf3 	bl	8000bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	2000008c 	.word	0x2000008c

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	2000008c 	.word	0x2000008c

08000220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
 800022c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000238:	d005      	beq.n	8000246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <HAL_Delay+0x44>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000246:	bf00      	nop
 8000248:	f7ff ffe0 	bl	800020c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d8f7      	bhi.n	8000248 <HAL_Delay+0x28>
  {
  }
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004

08000268 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000270:	2300      	movs	r3, #0
 8000272:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000274:	2300      	movs	r3, #0
 8000276:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000278:	2300      	movs	r3, #0
 800027a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d101      	bne.n	800028a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000286:	2301      	movs	r3, #1
 8000288:	e0be      	b.n	8000408 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000294:	2b00      	cmp	r3, #0
 8000296:	d109      	bne.n	80002ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2200      	movs	r2, #0
 80002a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002a6:	6878      	ldr	r0, [r7, #4]
 80002a8:	f003 f82a 	bl	8003300 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f000 faff 	bl	80008b0 <ADC_ConversionStop_Disable>
 80002b2:	4603      	mov	r3, r0
 80002b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ba:	f003 0310 	and.w	r3, r3, #16
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f040 8099 	bne.w	80003f6 <HAL_ADC_Init+0x18e>
 80002c4:	7dfb      	ldrb	r3, [r7, #23]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	f040 8095 	bne.w	80003f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002d4:	f023 0302 	bic.w	r3, r3, #2
 80002d8:	f043 0202 	orr.w	r2, r3, #2
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	7b1b      	ldrb	r3, [r3, #12]
 80002ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000300:	d003      	beq.n	800030a <HAL_ADC_Init+0xa2>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d102      	bne.n	8000310 <HAL_ADC_Init+0xa8>
 800030a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800030e:	e000      	b.n	8000312 <HAL_ADC_Init+0xaa>
 8000310:	2300      	movs	r3, #0
 8000312:	693a      	ldr	r2, [r7, #16]
 8000314:	4313      	orrs	r3, r2
 8000316:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	7d1b      	ldrb	r3, [r3, #20]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d119      	bne.n	8000354 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	7b1b      	ldrb	r3, [r3, #12]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d109      	bne.n	800033c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	3b01      	subs	r3, #1
 800032e:	035a      	lsls	r2, r3, #13
 8000330:	693b      	ldr	r3, [r7, #16]
 8000332:	4313      	orrs	r3, r2
 8000334:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000338:	613b      	str	r3, [r7, #16]
 800033a:	e00b      	b.n	8000354 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000340:	f043 0220 	orr.w	r2, r3, #32
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034c:	f043 0201 	orr.w	r2, r3, #1
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	693a      	ldr	r2, [r7, #16]
 8000364:	430a      	orrs	r2, r1
 8000366:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	689a      	ldr	r2, [r3, #8]
 800036e:	4b28      	ldr	r3, [pc, #160]	; (8000410 <HAL_ADC_Init+0x1a8>)
 8000370:	4013      	ands	r3, r2
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	68b9      	ldr	r1, [r7, #8]
 8000378:	430b      	orrs	r3, r1
 800037a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000384:	d003      	beq.n	800038e <HAL_ADC_Init+0x126>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d104      	bne.n	8000398 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	691b      	ldr	r3, [r3, #16]
 8000392:	3b01      	subs	r3, #1
 8000394:	051b      	lsls	r3, r3, #20
 8000396:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800039e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	430a      	orrs	r2, r1
 80003aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	689a      	ldr	r2, [r3, #8]
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <HAL_ADC_Init+0x1ac>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	68ba      	ldr	r2, [r7, #8]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d10b      	bne.n	80003d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c6:	f023 0303 	bic.w	r3, r3, #3
 80003ca:	f043 0201 	orr.w	r2, r3, #1
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003d2:	e018      	b.n	8000406 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d8:	f023 0312 	bic.w	r3, r3, #18
 80003dc:	f043 0210 	orr.w	r2, r3, #16
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e8:	f043 0201 	orr.w	r2, r3, #1
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003f0:	2301      	movs	r3, #1
 80003f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003f4:	e007      	b.n	8000406 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003fa:	f043 0210 	orr.w	r2, r3, #16
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000402:	2301      	movs	r3, #1
 8000404:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000406:	7dfb      	ldrb	r3, [r7, #23]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	ffe1f7fd 	.word	0xffe1f7fd
 8000414:	ff1f0efe 	.word	0xff1f0efe

08000418 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000424:	2300      	movs	r3, #0
 8000426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a64      	ldr	r2, [pc, #400]	; (80005c0 <HAL_ADC_Start_DMA+0x1a8>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d004      	beq.n	800043c <HAL_ADC_Start_DMA+0x24>
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a63      	ldr	r2, [pc, #396]	; (80005c4 <HAL_ADC_Start_DMA+0x1ac>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <HAL_ADC_Start_DMA+0x32>
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <HAL_ADC_Start_DMA+0x1a8>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000444:	2b00      	cmp	r3, #0
 8000446:	f040 80b3 	bne.w	80005b0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000450:	2b01      	cmp	r3, #1
 8000452:	d101      	bne.n	8000458 <HAL_ADC_Start_DMA+0x40>
 8000454:	2302      	movs	r3, #2
 8000456:	e0ae      	b.n	80005b6 <HAL_ADC_Start_DMA+0x19e>
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	2201      	movs	r2, #1
 800045c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000460:	68f8      	ldr	r0, [r7, #12]
 8000462:	f000 f9cb 	bl	80007fc <ADC_Enable>
 8000466:	4603      	mov	r3, r0
 8000468:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800046a:	7dfb      	ldrb	r3, [r7, #23]
 800046c:	2b00      	cmp	r3, #0
 800046e:	f040 809a 	bne.w	80005a6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000476:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800047a:	f023 0301 	bic.w	r3, r3, #1
 800047e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a4e      	ldr	r2, [pc, #312]	; (80005c4 <HAL_ADC_Start_DMA+0x1ac>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d105      	bne.n	800049c <HAL_ADC_Start_DMA+0x84>
 8000490:	4b4b      	ldr	r3, [pc, #300]	; (80005c0 <HAL_ADC_Start_DMA+0x1a8>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000498:	2b00      	cmp	r3, #0
 800049a:	d115      	bne.n	80004c8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d026      	beq.n	8000504 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004c6:	e01d      	b.n	8000504 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a39      	ldr	r2, [pc, #228]	; (80005c0 <HAL_ADC_Start_DMA+0x1a8>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d004      	beq.n	80004e8 <HAL_ADC_Start_DMA+0xd0>
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a38      	ldr	r2, [pc, #224]	; (80005c4 <HAL_ADC_Start_DMA+0x1ac>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d10d      	bne.n	8000504 <HAL_ADC_Start_DMA+0xec>
 80004e8:	4b35      	ldr	r3, [pc, #212]	; (80005c0 <HAL_ADC_Start_DMA+0x1a8>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d007      	beq.n	8000504 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800050c:	2b00      	cmp	r3, #0
 800050e:	d006      	beq.n	800051e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000514:	f023 0206 	bic.w	r2, r3, #6
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
 800051c:	e002      	b.n	8000524 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	6a1b      	ldr	r3, [r3, #32]
 8000530:	4a25      	ldr	r2, [pc, #148]	; (80005c8 <HAL_ADC_Start_DMA+0x1b0>)
 8000532:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	6a1b      	ldr	r3, [r3, #32]
 8000538:	4a24      	ldr	r2, [pc, #144]	; (80005cc <HAL_ADC_Start_DMA+0x1b4>)
 800053a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	6a1b      	ldr	r3, [r3, #32]
 8000540:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <HAL_ADC_Start_DMA+0x1b8>)
 8000542:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f06f 0202 	mvn.w	r2, #2
 800054c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	689a      	ldr	r2, [r3, #8]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6a18      	ldr	r0, [r3, #32]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	334c      	adds	r3, #76	; 0x4c
 8000568:	4619      	mov	r1, r3
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f000 fbaf 	bl	8000cd0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800057c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000580:	d108      	bne.n	8000594 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	689a      	ldr	r2, [r3, #8]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000590:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000592:	e00f      	b.n	80005b4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80005a2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80005a4:	e006      	b.n	80005b4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80005ae:	e001      	b.n	80005b4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80005b0:	2301      	movs	r3, #1
 80005b2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40012400 	.word	0x40012400
 80005c4:	40012800 	.word	0x40012800
 80005c8:	08000933 	.word	0x08000933
 80005cc:	080009af 	.word	0x080009af
 80005d0:	080009cb 	.word	0x080009cb

080005d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
	...

0800060c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000624:	2b01      	cmp	r3, #1
 8000626:	d101      	bne.n	800062c <HAL_ADC_ConfigChannel+0x20>
 8000628:	2302      	movs	r3, #2
 800062a:	e0dc      	b.n	80007e6 <HAL_ADC_ConfigChannel+0x1da>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2201      	movs	r2, #1
 8000630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2b06      	cmp	r3, #6
 800063a:	d81c      	bhi.n	8000676 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	4613      	mov	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	3b05      	subs	r3, #5
 800064e:	221f      	movs	r2, #31
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	43db      	mvns	r3, r3
 8000656:	4019      	ands	r1, r3
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	6818      	ldr	r0, [r3, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	4613      	mov	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	3b05      	subs	r3, #5
 8000668:	fa00 f203 	lsl.w	r2, r0, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	430a      	orrs	r2, r1
 8000672:	635a      	str	r2, [r3, #52]	; 0x34
 8000674:	e03c      	b.n	80006f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	2b0c      	cmp	r3, #12
 800067c:	d81c      	bhi.n	80006b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	685a      	ldr	r2, [r3, #4]
 8000688:	4613      	mov	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	3b23      	subs	r3, #35	; 0x23
 8000690:	221f      	movs	r2, #31
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	4019      	ands	r1, r3
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	3b23      	subs	r3, #35	; 0x23
 80006aa:	fa00 f203 	lsl.w	r2, r0, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	430a      	orrs	r2, r1
 80006b4:	631a      	str	r2, [r3, #48]	; 0x30
 80006b6:	e01b      	b.n	80006f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	4613      	mov	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	3b41      	subs	r3, #65	; 0x41
 80006ca:	221f      	movs	r2, #31
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	43db      	mvns	r3, r3
 80006d2:	4019      	ands	r1, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	685a      	ldr	r2, [r3, #4]
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	3b41      	subs	r3, #65	; 0x41
 80006e4:	fa00 f203 	lsl.w	r2, r0, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	430a      	orrs	r2, r1
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b09      	cmp	r3, #9
 80006f6:	d91c      	bls.n	8000732 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68d9      	ldr	r1, [r3, #12]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	3b1e      	subs	r3, #30
 800070a:	2207      	movs	r2, #7
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	43db      	mvns	r3, r3
 8000712:	4019      	ands	r1, r3
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	6898      	ldr	r0, [r3, #8]
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	3b1e      	subs	r3, #30
 8000724:	fa00 f203 	lsl.w	r2, r0, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	430a      	orrs	r2, r1
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	e019      	b.n	8000766 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6919      	ldr	r1, [r3, #16]
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	2207      	movs	r2, #7
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	43db      	mvns	r3, r3
 800074a:	4019      	ands	r1, r3
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	6898      	ldr	r0, [r3, #8]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	fa00 f203 	lsl.w	r2, r0, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	430a      	orrs	r2, r1
 8000764:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b10      	cmp	r3, #16
 800076c:	d003      	beq.n	8000776 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000772:	2b11      	cmp	r3, #17
 8000774:	d132      	bne.n	80007dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a1d      	ldr	r2, [pc, #116]	; (80007f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d125      	bne.n	80007cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d126      	bne.n	80007dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800079c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b10      	cmp	r3, #16
 80007a4:	d11a      	bne.n	80007dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80007ac:	fba2 2303 	umull	r2, r3, r2, r3
 80007b0:	0c9a      	lsrs	r2, r3, #18
 80007b2:	4613      	mov	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007bc:	e002      	b.n	80007c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f9      	bne.n	80007be <HAL_ADC_ConfigChannel+0x1b2>
 80007ca:	e007      	b.n	80007dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d0:	f043 0220 	orr.w	r2, r3, #32
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	40012400 	.word	0x40012400
 80007f4:	20000008 	.word	0x20000008
 80007f8:	431bde83 	.word	0x431bde83

080007fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	2b01      	cmp	r3, #1
 8000818:	d040      	beq.n	800089c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f042 0201 	orr.w	r2, r2, #1
 8000828:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <ADC_Enable+0xac>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <ADC_Enable+0xb0>)
 8000830:	fba2 2303 	umull	r2, r3, r2, r3
 8000834:	0c9b      	lsrs	r3, r3, #18
 8000836:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000838:	e002      	b.n	8000840 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3b01      	subs	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f9      	bne.n	800083a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000846:	f7ff fce1 	bl	800020c <HAL_GetTick>
 800084a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800084c:	e01f      	b.n	800088e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800084e:	f7ff fcdd 	bl	800020c <HAL_GetTick>
 8000852:	4602      	mov	r2, r0
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	2b02      	cmp	r3, #2
 800085a:	d918      	bls.n	800088e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	2b01      	cmp	r3, #1
 8000868:	d011      	beq.n	800088e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800086e:	f043 0210 	orr.w	r2, r3, #16
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087a:	f043 0201 	orr.w	r2, r3, #1
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e007      	b.n	800089e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	2b01      	cmp	r3, #1
 800089a:	d1d8      	bne.n	800084e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008
 80008ac:	431bde83 	.word	0x431bde83

080008b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d12e      	bne.n	8000928 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f022 0201 	bic.w	r2, r2, #1
 80008d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80008da:	f7ff fc97 	bl	800020c <HAL_GetTick>
 80008de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80008e0:	e01b      	b.n	800091a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80008e2:	f7ff fc93 	bl	800020c <HAL_GetTick>
 80008e6:	4602      	mov	r2, r0
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d914      	bls.n	800091a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10d      	bne.n	800091a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000902:	f043 0210 	orr.w	r2, r3, #16
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090e:	f043 0201 	orr.w	r2, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e007      	b.n	800092a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	2b01      	cmp	r3, #1
 8000926:	d0dc      	beq.n	80008e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b084      	sub	sp, #16
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000948:	2b00      	cmp	r3, #0
 800094a:	d127      	bne.n	800099c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000950:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000962:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000966:	d115      	bne.n	8000994 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800096c:	2b00      	cmp	r3, #0
 800096e:	d111      	bne.n	8000994 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000974:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d105      	bne.n	8000994 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098c:	f043 0201 	orr.w	r2, r3, #1
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f7ff fe1d 	bl	80005d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800099a:	e004      	b.n	80009a6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	6a1b      	ldr	r3, [r3, #32]
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	4798      	blx	r3
}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff fe12 	bl	80005e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e8:	f043 0204 	orr.w	r2, r3, #4
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff fe01 	bl	80005f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db0b      	blt.n	8000a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f003 021f 	and.w	r2, r3, #31
 8000a7c:	4906      	ldr	r1, [pc, #24]	; (8000a98 <__NVIC_EnableIRQ+0x34>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	095b      	lsrs	r3, r3, #5
 8000a84:	2001      	movs	r0, #1
 8000a86:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b64:	d301      	bcc.n	8000b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00f      	b.n	8000b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <SysTick_Config+0x40>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b72:	210f      	movs	r1, #15
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f7ff ff90 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <SysTick_Config+0x40>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <SysTick_Config+0x40>)
 8000b84:	2207      	movs	r2, #7
 8000b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	e000e010 	.word	0xe000e010

08000b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ff2d 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
 8000bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc0:	f7ff ff42 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	6978      	ldr	r0, [r7, #20]
 8000bcc:	f7ff ff90 	bl	8000af0 <NVIC_EncodePriority>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff5f 	bl	8000a9c <__NVIC_SetPriority>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff35 	bl	8000a64 <__NVIC_EnableIRQ>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ffa2 	bl	8000b54 <SysTick_Config>
 8000c10:	4603      	mov	r3, r0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e043      	b.n	8000cba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <HAL_DMA_Init+0xa8>)
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <HAL_DMA_Init+0xac>)
 8000c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	009a      	lsls	r2, r3, #2
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <HAL_DMA_Init+0xb0>)
 8000c4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2202      	movs	r2, #2
 8000c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	bffdfff8 	.word	0xbffdfff8
 8000cc8:	cccccccd 	.word	0xcccccccd
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d101      	bne.n	8000cf0 <HAL_DMA_Start_IT+0x20>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e04a      	b.n	8000d86 <HAL_DMA_Start_IT+0xb6>
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d13a      	bne.n	8000d78 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2202      	movs	r2, #2
 8000d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0201 	bic.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f000 f938 	bl	8000f9c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d008      	beq.n	8000d46 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 020e 	orr.w	r2, r2, #14
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e00f      	b.n	8000d66 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0204 	bic.w	r2, r2, #4
 8000d54:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f042 020a 	orr.w	r2, r2, #10
 8000d64:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f042 0201 	orr.w	r2, r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e005      	b.n	8000d84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d80:	2302      	movs	r3, #2
 8000d82:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	2204      	movs	r2, #4
 8000dae:	409a      	lsls	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d04f      	beq.n	8000e58 <HAL_DMA_IRQHandler+0xc8>
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d04a      	beq.n	8000e58 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0320 	and.w	r3, r3, #32
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d107      	bne.n	8000de0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0204 	bic.w	r2, r2, #4
 8000dde:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a66      	ldr	r2, [pc, #408]	; (8000f80 <HAL_DMA_IRQHandler+0x1f0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d029      	beq.n	8000e3e <HAL_DMA_IRQHandler+0xae>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a65      	ldr	r2, [pc, #404]	; (8000f84 <HAL_DMA_IRQHandler+0x1f4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d022      	beq.n	8000e3a <HAL_DMA_IRQHandler+0xaa>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a63      	ldr	r2, [pc, #396]	; (8000f88 <HAL_DMA_IRQHandler+0x1f8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d01a      	beq.n	8000e34 <HAL_DMA_IRQHandler+0xa4>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a62      	ldr	r2, [pc, #392]	; (8000f8c <HAL_DMA_IRQHandler+0x1fc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d012      	beq.n	8000e2e <HAL_DMA_IRQHandler+0x9e>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a60      	ldr	r2, [pc, #384]	; (8000f90 <HAL_DMA_IRQHandler+0x200>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00a      	beq.n	8000e28 <HAL_DMA_IRQHandler+0x98>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a5f      	ldr	r2, [pc, #380]	; (8000f94 <HAL_DMA_IRQHandler+0x204>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d102      	bne.n	8000e22 <HAL_DMA_IRQHandler+0x92>
 8000e1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e20:	e00e      	b.n	8000e40 <HAL_DMA_IRQHandler+0xb0>
 8000e22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e26:	e00b      	b.n	8000e40 <HAL_DMA_IRQHandler+0xb0>
 8000e28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e2c:	e008      	b.n	8000e40 <HAL_DMA_IRQHandler+0xb0>
 8000e2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e32:	e005      	b.n	8000e40 <HAL_DMA_IRQHandler+0xb0>
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	e002      	b.n	8000e40 <HAL_DMA_IRQHandler+0xb0>
 8000e3a:	2340      	movs	r3, #64	; 0x40
 8000e3c:	e000      	b.n	8000e40 <HAL_DMA_IRQHandler+0xb0>
 8000e3e:	2304      	movs	r3, #4
 8000e40:	4a55      	ldr	r2, [pc, #340]	; (8000f98 <HAL_DMA_IRQHandler+0x208>)
 8000e42:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 8094 	beq.w	8000f76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e56:	e08e      	b.n	8000f76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d056      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x186>
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d051      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0320 	and.w	r3, r3, #32
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10b      	bne.n	8000e98 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 020a 	bic.w	r2, r2, #10
 8000e8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a38      	ldr	r2, [pc, #224]	; (8000f80 <HAL_DMA_IRQHandler+0x1f0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d029      	beq.n	8000ef6 <HAL_DMA_IRQHandler+0x166>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a37      	ldr	r2, [pc, #220]	; (8000f84 <HAL_DMA_IRQHandler+0x1f4>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d022      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0x162>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a35      	ldr	r2, [pc, #212]	; (8000f88 <HAL_DMA_IRQHandler+0x1f8>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d01a      	beq.n	8000eec <HAL_DMA_IRQHandler+0x15c>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a34      	ldr	r2, [pc, #208]	; (8000f8c <HAL_DMA_IRQHandler+0x1fc>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d012      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0x156>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a32      	ldr	r2, [pc, #200]	; (8000f90 <HAL_DMA_IRQHandler+0x200>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00a      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0x150>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a31      	ldr	r2, [pc, #196]	; (8000f94 <HAL_DMA_IRQHandler+0x204>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d102      	bne.n	8000eda <HAL_DMA_IRQHandler+0x14a>
 8000ed4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ed8:	e00e      	b.n	8000ef8 <HAL_DMA_IRQHandler+0x168>
 8000eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ede:	e00b      	b.n	8000ef8 <HAL_DMA_IRQHandler+0x168>
 8000ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee4:	e008      	b.n	8000ef8 <HAL_DMA_IRQHandler+0x168>
 8000ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eea:	e005      	b.n	8000ef8 <HAL_DMA_IRQHandler+0x168>
 8000eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef0:	e002      	b.n	8000ef8 <HAL_DMA_IRQHandler+0x168>
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	e000      	b.n	8000ef8 <HAL_DMA_IRQHandler+0x168>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <HAL_DMA_IRQHandler+0x208>)
 8000efa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d034      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f14:	e02f      	b.n	8000f76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d028      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x1e8>
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d023      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 020e 	bic.w	r2, r2, #14
 8000f3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f48:	2101      	movs	r1, #1
 8000f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	4798      	blx	r3
    }
  }
  return;
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
}
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020008 	.word	0x40020008
 8000f84:	4002001c 	.word	0x4002001c
 8000f88:	40020030 	.word	0x40020030
 8000f8c:	40020044 	.word	0x40020044
 8000f90:	40020058 	.word	0x40020058
 8000f94:	4002006c 	.word	0x4002006c
 8000f98:	40020000 	.word	0x40020000

08000f9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b10      	cmp	r3, #16
 8000fc8:	d108      	bne.n	8000fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fda:	e007      	b.n	8000fec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	60da      	str	r2, [r3, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
	...

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b08b      	sub	sp, #44	; 0x2c
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	e169      	b.n	80012e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800100c:	2201      	movs	r2, #1
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	429a      	cmp	r2, r3
 8001026:	f040 8158 	bne.w	80012da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a9a      	ldr	r2, [pc, #616]	; (8001298 <HAL_GPIO_Init+0x2a0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d05e      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001034:	4a98      	ldr	r2, [pc, #608]	; (8001298 <HAL_GPIO_Init+0x2a0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d875      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 800103a:	4a98      	ldr	r2, [pc, #608]	; (800129c <HAL_GPIO_Init+0x2a4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d058      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001040:	4a96      	ldr	r2, [pc, #600]	; (800129c <HAL_GPIO_Init+0x2a4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d86f      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 8001046:	4a96      	ldr	r2, [pc, #600]	; (80012a0 <HAL_GPIO_Init+0x2a8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d052      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 800104c:	4a94      	ldr	r2, [pc, #592]	; (80012a0 <HAL_GPIO_Init+0x2a8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d869      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 8001052:	4a94      	ldr	r2, [pc, #592]	; (80012a4 <HAL_GPIO_Init+0x2ac>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d04c      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001058:	4a92      	ldr	r2, [pc, #584]	; (80012a4 <HAL_GPIO_Init+0x2ac>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d863      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 800105e:	4a92      	ldr	r2, [pc, #584]	; (80012a8 <HAL_GPIO_Init+0x2b0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d046      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001064:	4a90      	ldr	r2, [pc, #576]	; (80012a8 <HAL_GPIO_Init+0x2b0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d85d      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 800106a:	2b12      	cmp	r3, #18
 800106c:	d82a      	bhi.n	80010c4 <HAL_GPIO_Init+0xcc>
 800106e:	2b12      	cmp	r3, #18
 8001070:	d859      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <HAL_GPIO_Init+0x80>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	080010f3 	.word	0x080010f3
 800107c:	080010cd 	.word	0x080010cd
 8001080:	080010df 	.word	0x080010df
 8001084:	08001121 	.word	0x08001121
 8001088:	08001127 	.word	0x08001127
 800108c:	08001127 	.word	0x08001127
 8001090:	08001127 	.word	0x08001127
 8001094:	08001127 	.word	0x08001127
 8001098:	08001127 	.word	0x08001127
 800109c:	08001127 	.word	0x08001127
 80010a0:	08001127 	.word	0x08001127
 80010a4:	08001127 	.word	0x08001127
 80010a8:	08001127 	.word	0x08001127
 80010ac:	08001127 	.word	0x08001127
 80010b0:	08001127 	.word	0x08001127
 80010b4:	08001127 	.word	0x08001127
 80010b8:	08001127 	.word	0x08001127
 80010bc:	080010d5 	.word	0x080010d5
 80010c0:	080010e9 	.word	0x080010e9
 80010c4:	4a79      	ldr	r2, [pc, #484]	; (80012ac <HAL_GPIO_Init+0x2b4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ca:	e02c      	b.n	8001126 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	623b      	str	r3, [r7, #32]
          break;
 80010d2:	e029      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	3304      	adds	r3, #4
 80010da:	623b      	str	r3, [r7, #32]
          break;
 80010dc:	e024      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	3308      	adds	r3, #8
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e01f      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	330c      	adds	r3, #12
 80010ee:	623b      	str	r3, [r7, #32]
          break;
 80010f0:	e01a      	b.n	8001128 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010fa:	2304      	movs	r3, #4
 80010fc:	623b      	str	r3, [r7, #32]
          break;
 80010fe:	e013      	b.n	8001128 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d105      	bne.n	8001114 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001108:	2308      	movs	r3, #8
 800110a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	611a      	str	r2, [r3, #16]
          break;
 8001112:	e009      	b.n	8001128 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001114:	2308      	movs	r3, #8
 8001116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	615a      	str	r2, [r3, #20]
          break;
 800111e:	e003      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
          break;
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x130>
          break;
 8001126:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2bff      	cmp	r3, #255	; 0xff
 800112c:	d801      	bhi.n	8001132 <HAL_GPIO_Init+0x13a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	e001      	b.n	8001136 <HAL_GPIO_Init+0x13e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3304      	adds	r3, #4
 8001136:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2bff      	cmp	r3, #255	; 0xff
 800113c:	d802      	bhi.n	8001144 <HAL_GPIO_Init+0x14c>
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	e002      	b.n	800114a <HAL_GPIO_Init+0x152>
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	3b08      	subs	r3, #8
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	210f      	movs	r1, #15
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	401a      	ands	r2, r3
 800115c:	6a39      	ldr	r1, [r7, #32]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	431a      	orrs	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80b1 	beq.w	80012da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001178:	4b4d      	ldr	r3, [pc, #308]	; (80012b0 <HAL_GPIO_Init+0x2b8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a4c      	ldr	r2, [pc, #304]	; (80012b0 <HAL_GPIO_Init+0x2b8>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <HAL_GPIO_Init+0x2b8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001190:	4a48      	ldr	r2, [pc, #288]	; (80012b4 <HAL_GPIO_Init+0x2bc>)
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a40      	ldr	r2, [pc, #256]	; (80012b8 <HAL_GPIO_Init+0x2c0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d013      	beq.n	80011e4 <HAL_GPIO_Init+0x1ec>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a3f      	ldr	r2, [pc, #252]	; (80012bc <HAL_GPIO_Init+0x2c4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d00d      	beq.n	80011e0 <HAL_GPIO_Init+0x1e8>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a3e      	ldr	r2, [pc, #248]	; (80012c0 <HAL_GPIO_Init+0x2c8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x1e4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <HAL_GPIO_Init+0x2cc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d101      	bne.n	80011d8 <HAL_GPIO_Init+0x1e0>
 80011d4:	2303      	movs	r3, #3
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011d8:	2304      	movs	r3, #4
 80011da:	e004      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011dc:	2302      	movs	r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011e4:	2300      	movs	r3, #0
 80011e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e8:	f002 0203 	and.w	r2, r2, #3
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4093      	lsls	r3, r2
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011f6:	492f      	ldr	r1, [pc, #188]	; (80012b4 <HAL_GPIO_Init+0x2bc>)
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001210:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	492c      	ldr	r1, [pc, #176]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	43db      	mvns	r3, r3
 8001226:	4928      	ldr	r1, [pc, #160]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001228:	4013      	ands	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4922      	ldr	r1, [pc, #136]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	43db      	mvns	r3, r3
 800124e:	491e      	ldr	r1, [pc, #120]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001250:	4013      	ands	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	4918      	ldr	r1, [pc, #96]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	608b      	str	r3, [r1, #8]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	4914      	ldr	r1, [pc, #80]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001278:	4013      	ands	r3, r2
 800127a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d021      	beq.n	80012cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	490e      	ldr	r1, [pc, #56]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	60cb      	str	r3, [r1, #12]
 8001294:	e021      	b.n	80012da <HAL_GPIO_Init+0x2e2>
 8001296:	bf00      	nop
 8001298:	10320000 	.word	0x10320000
 800129c:	10310000 	.word	0x10310000
 80012a0:	10220000 	.word	0x10220000
 80012a4:	10210000 	.word	0x10210000
 80012a8:	10120000 	.word	0x10120000
 80012ac:	10110000 	.word	0x10110000
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	40010800 	.word	0x40010800
 80012bc:	40010c00 	.word	0x40010c00
 80012c0:	40011000 	.word	0x40011000
 80012c4:	40011400 	.word	0x40011400
 80012c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_GPIO_Init+0x304>)
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	4909      	ldr	r1, [pc, #36]	; (80012fc <HAL_GPIO_Init+0x304>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	3301      	adds	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f47f ae8e 	bne.w	800100c <HAL_GPIO_Init+0x14>
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	372c      	adds	r7, #44	; 0x2c
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	611a      	str	r2, [r3, #16]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4013      	ands	r3, r2
 8001348:	041a      	lsls	r2, r3, #16
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43d9      	mvns	r1, r3
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	400b      	ands	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	611a      	str	r2, [r3, #16]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
	...

08001364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e272      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8087 	beq.w	8001492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001384:	4b92      	ldr	r3, [pc, #584]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b04      	cmp	r3, #4
 800138e:	d00c      	beq.n	80013aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001390:	4b8f      	ldr	r3, [pc, #572]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b08      	cmp	r3, #8
 800139a:	d112      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5e>
 800139c:	4b8c      	ldr	r3, [pc, #560]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d10b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	4b89      	ldr	r3, [pc, #548]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d06c      	beq.n	8001490 <HAL_RCC_OscConfig+0x12c>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d168      	bne.n	8001490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e24c      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x76>
 80013cc:	4b80      	ldr	r3, [pc, #512]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a7f      	ldr	r2, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e02e      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x98>
 80013e2:	4b7b      	ldr	r3, [pc, #492]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a7a      	ldr	r2, [pc, #488]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a77      	ldr	r2, [pc, #476]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e01d      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0xbc>
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a71      	ldr	r2, [pc, #452]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 8001420:	4b6b      	ldr	r3, [pc, #428]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6a      	ldr	r2, [pc, #424]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b68      	ldr	r3, [pc, #416]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a67      	ldr	r2, [pc, #412]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7fe fee4 	bl	800020c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7fe fee0 	bl	800020c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e200      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0xe4>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7fe fed0 	bl	800020c <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7fe fecc 	bl	800020c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1ec      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x10c>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d063      	beq.n	8001566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d11c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x18c>
 80014b6:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d116      	bne.n	80014f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x176>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e1c0      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4939      	ldr	r1, [pc, #228]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	e03a      	b.n	8001566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d020      	beq.n	800153a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f8:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7fe fe85 	bl	800020c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001506:	f7fe fe81 	bl	800020c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e1a1      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4927      	ldr	r1, [pc, #156]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7fe fe64 	bl	800020c <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7fe fe60 	bl	800020c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e180      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d03a      	beq.n	80015e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d019      	beq.n	80015ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7fe fe44 	bl	800020c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001588:	f7fe fe40 	bl	800020c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e160      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f000 fad8 	bl	8001b5c <RCC_Delay>
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7fe fe2a 	bl	800020c <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ba:	e00f      	b.n	80015dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7fe fe26 	bl	800020c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d908      	bls.n	80015dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e146      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	42420000 	.word	0x42420000
 80015d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b92      	ldr	r3, [pc, #584]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e9      	bne.n	80015bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a6 	beq.w	8001742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fa:	4b8b      	ldr	r3, [pc, #556]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10d      	bne.n	8001622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b88      	ldr	r3, [pc, #544]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a87      	ldr	r2, [pc, #540]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b85      	ldr	r3, [pc, #532]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b82      	ldr	r3, [pc, #520]	; (800182c <HAL_RCC_OscConfig+0x4c8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d118      	bne.n	8001660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162e:	4b7f      	ldr	r3, [pc, #508]	; (800182c <HAL_RCC_OscConfig+0x4c8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a7e      	ldr	r2, [pc, #504]	; (800182c <HAL_RCC_OscConfig+0x4c8>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163a:	f7fe fde7 	bl	800020c <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7fe fde3 	bl	800020c <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b64      	cmp	r3, #100	; 0x64
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e103      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b75      	ldr	r3, [pc, #468]	; (800182c <HAL_RCC_OscConfig+0x4c8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x312>
 8001668:	4b6f      	ldr	r3, [pc, #444]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a6e      	ldr	r2, [pc, #440]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	e02d      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x334>
 800167e:	4b6a      	ldr	r3, [pc, #424]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a69      	ldr	r2, [pc, #420]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	4b67      	ldr	r3, [pc, #412]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a66      	ldr	r2, [pc, #408]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	e01c      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d10c      	bne.n	80016ba <HAL_RCC_OscConfig+0x356>
 80016a0:	4b61      	ldr	r3, [pc, #388]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a60      	ldr	r2, [pc, #384]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	4b5e      	ldr	r3, [pc, #376]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4a5d      	ldr	r2, [pc, #372]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	e00b      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 80016ba:	4b5b      	ldr	r3, [pc, #364]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a5a      	ldr	r2, [pc, #360]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	4b58      	ldr	r3, [pc, #352]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a57      	ldr	r2, [pc, #348]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d015      	beq.n	8001706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7fe fd97 	bl	800020c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7fe fd93 	bl	800020c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0b1      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f8:	4b4b      	ldr	r3, [pc, #300]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ee      	beq.n	80016e2 <HAL_RCC_OscConfig+0x37e>
 8001704:	e014      	b.n	8001730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7fe fd81 	bl	800020c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170e:	f7fe fd7d 	bl	800020c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	; 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e09b      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001724:	4b40      	ldr	r3, [pc, #256]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1ee      	bne.n	800170e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d105      	bne.n	8001742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001736:	4b3c      	ldr	r3, [pc, #240]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a3b      	ldr	r2, [pc, #236]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 8087 	beq.w	800185a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174c:	4b36      	ldr	r3, [pc, #216]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d061      	beq.n	800181c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d146      	bne.n	80017ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001760:	4b33      	ldr	r3, [pc, #204]	; (8001830 <HAL_RCC_OscConfig+0x4cc>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7fe fd51 	bl	800020c <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7fe fd4d 	bl	800020c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e06d      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d108      	bne.n	80017a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	4921      	ldr	r1, [pc, #132]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a19      	ldr	r1, [r3, #32]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	430b      	orrs	r3, r1
 80017ba:	491b      	ldr	r1, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_RCC_OscConfig+0x4cc>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7fe fd21 	bl	800020c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ce:	f7fe fd1d 	bl	800020c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e03d      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x46a>
 80017ec:	e035      	b.n	800185a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_RCC_OscConfig+0x4cc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7fe fd0a 	bl	800020c <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7fe fd06 	bl	800020c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e026      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x498>
 800181a:	e01e      	b.n	800185a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e019      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
 8001828:	40021000 	.word	0x40021000
 800182c:	40007000 	.word	0x40007000
 8001830:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_OscConfig+0x500>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	429a      	cmp	r2, r3
 8001846:	d106      	bne.n	8001856 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0d0      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b6a      	ldr	r3, [pc, #424]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d910      	bls.n	80018ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b67      	ldr	r3, [pc, #412]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 0207 	bic.w	r2, r3, #7
 8001892:	4965      	ldr	r1, [pc, #404]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0b8      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	494d      	ldr	r1, [pc, #308]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d040      	beq.n	8001988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d115      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e07f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e073      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e06b      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001946:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f023 0203 	bic.w	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4936      	ldr	r1, [pc, #216]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001958:	f7fe fc58 	bl	800020c <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	e00a      	b.n	8001976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7fe fc54 	bl	800020c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e053      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 020c 	and.w	r2, r3, #12
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1eb      	bne.n	8001960 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d210      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4922      	ldr	r1, [pc, #136]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e032      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4916      	ldr	r1, [pc, #88]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	490e      	ldr	r1, [pc, #56]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019f6:	f000 f821 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1cc>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1d0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fbb6 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	0800400c 	.word	0x0800400c
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000000 	.word	0x20000000

08001a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	b490      	push	{r4, r7}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a44:	1d3c      	adds	r4, r7, #4
 8001a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a4c:	f240 2301 	movw	r3, #513	; 0x201
 8001a50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d002      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x40>
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x46>
 8001a7a:	e02b      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a7e:	623b      	str	r3, [r7, #32]
      break;
 8001a80:	e02b      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	0c9b      	lsrs	r3, r3, #18
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3328      	adds	r3, #40	; 0x28
 8001a8c:	443b      	add	r3, r7
 8001a8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a92:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d012      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	0c5b      	lsrs	r3, r3, #17
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	3328      	adds	r3, #40	; 0x28
 8001aaa:	443b      	add	r3, r7
 8001aac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ab0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ab6:	fb03 f202 	mul.w	r2, r3, r2
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	e004      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	623b      	str	r3, [r7, #32]
      break;
 8001ad2:	e002      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ad6:	623b      	str	r3, [r7, #32]
      break;
 8001ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ada:	6a3b      	ldr	r3, [r7, #32]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc90      	pop	{r4, r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	08003fd0 	.word	0x08003fd0
 8001aec:	40021000 	.word	0x40021000
 8001af0:	007a1200 	.word	0x007a1200
 8001af4:	003d0900 	.word	0x003d0900

08001af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001afc:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	20000008 	.word	0x20000008

08001b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b10:	f7ff fff2 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	0800401c 	.word	0x0800401c

08001b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b38:	f7ff ffde 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	0adb      	lsrs	r3, r3, #11
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	0800401c 	.word	0x0800401c

08001b5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <RCC_Delay+0x34>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <RCC_Delay+0x38>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a5b      	lsrs	r3, r3, #9
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b78:	bf00      	nop
  }
  while (Delay --);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	60fa      	str	r2, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f9      	bne.n	8001b78 <RCC_Delay+0x1c>
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000008 	.word	0x20000008
 8001b94:	10624dd3 	.word	0x10624dd3

08001b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d07d      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb8:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bce:	61d3      	str	r3, [r2, #28]
 8001bd0:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d118      	bne.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bec:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a42      	ldr	r2, [pc, #264]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf8:	f7fe fb08 	bl	800020c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	e008      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c00:	f7fe fb04 	bl	800020c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e06d      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d02e      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d027      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c46:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c4c:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c52:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d014      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe fad3 	bl	800020c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7fe facf 	bl	800020c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e036      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ee      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4917      	ldr	r1, [pc, #92]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	490b      	ldr	r1, [pc, #44]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4904      	ldr	r1, [pc, #16]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	42420440 	.word	0x42420440

08001d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e076      	b.n	8001e04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d108      	bne.n	8001d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d26:	d009      	beq.n	8001d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
 8001d2e:	e005      	b.n	8001d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f001 fb52 	bl	8003400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc0:	ea42 0103 	orr.w	r1, r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	0c1a      	lsrs	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f002 0204 	and.w	r2, r2, #4
 8001de2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	; 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_SPI_TransmitReceive+0x26>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e18a      	b.n	8002148 <HAL_SPI_TransmitReceive+0x33c>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e3a:	f7fe f9e7 	bl	800020c <HAL_GetTick>
 8001e3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d00f      	beq.n	8001e7c <HAL_SPI_TransmitReceive+0x70>
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e62:	d107      	bne.n	8001e74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d103      	bne.n	8001e74 <HAL_SPI_TransmitReceive+0x68>
 8001e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d003      	beq.n	8001e7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
 8001e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e7a:	e15b      	b.n	8002134 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_SPI_TransmitReceive+0x82>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_SPI_TransmitReceive+0x82>
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e94:	e14e      	b.n	8002134 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d003      	beq.n	8001eaa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	887a      	ldrh	r2, [r7, #2]
 8001eba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	887a      	ldrh	r2, [r7, #2]
 8001ed2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d007      	beq.n	8001efe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f06:	d178      	bne.n	8001ffa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_SPI_TransmitReceive+0x10a>
 8001f10:	8b7b      	ldrh	r3, [r7, #26]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d166      	bne.n	8001fe4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	881a      	ldrh	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	1c9a      	adds	r2, r3, #2
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f3a:	e053      	b.n	8001fe4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d11b      	bne.n	8001f82 <HAL_SPI_TransmitReceive+0x176>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d016      	beq.n	8001f82 <HAL_SPI_TransmitReceive+0x176>
 8001f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d113      	bne.n	8001f82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	1c9a      	adds	r2, r3, #2
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d119      	bne.n	8001fc4 <HAL_SPI_TransmitReceive+0x1b8>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d014      	beq.n	8001fc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	1c9a      	adds	r2, r3, #2
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fc4:	f7fe f922 	bl	800020c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d807      	bhi.n	8001fe4 <HAL_SPI_TransmitReceive+0x1d8>
 8001fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fda:	d003      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fe2:	e0a7      	b.n	8002134 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1a6      	bne.n	8001f3c <HAL_SPI_TransmitReceive+0x130>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1a1      	bne.n	8001f3c <HAL_SPI_TransmitReceive+0x130>
 8001ff8:	e07c      	b.n	80020f4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_SPI_TransmitReceive+0x1fc>
 8002002:	8b7b      	ldrh	r3, [r7, #26]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d16b      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	330c      	adds	r3, #12
 8002012:	7812      	ldrb	r2, [r2, #0]
 8002014:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800202e:	e057      	b.n	80020e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b02      	cmp	r3, #2
 800203c:	d11c      	bne.n	8002078 <HAL_SPI_TransmitReceive+0x26c>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d017      	beq.n	8002078 <HAL_SPI_TransmitReceive+0x26c>
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d114      	bne.n	8002078 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	330c      	adds	r3, #12
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d119      	bne.n	80020ba <HAL_SPI_TransmitReceive+0x2ae>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d014      	beq.n	80020ba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020b6:	2301      	movs	r3, #1
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020ba:	f7fe f8a7 	bl	800020c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d803      	bhi.n	80020d2 <HAL_SPI_TransmitReceive+0x2c6>
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d102      	bne.n	80020d8 <HAL_SPI_TransmitReceive+0x2cc>
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d103      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020de:	e029      	b.n	8002134 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1a2      	bne.n	8002030 <HAL_SPI_TransmitReceive+0x224>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d19d      	bne.n	8002030 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f8b1 	bl	8002260 <SPI_EndRxTxTransaction>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2220      	movs	r2, #32
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002110:	e010      	b.n	8002134 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10b      	bne.n	8002132 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	e000      	b.n	8002134 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002132:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002144:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002148:	4618      	mov	r0, r3
 800214a:	3730      	adds	r7, #48	; 0x30
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002160:	f7fe f854 	bl	800020c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	4413      	add	r3, r2
 800216e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002170:	f7fe f84c 	bl	800020c <HAL_GetTick>
 8002174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	015b      	lsls	r3, r3, #5
 800217c:	0d1b      	lsrs	r3, r3, #20
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002186:	e054      	b.n	8002232 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d050      	beq.n	8002232 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002190:	f7fe f83c 	bl	800020c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	429a      	cmp	r2, r3
 800219e:	d902      	bls.n	80021a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d13d      	bne.n	8002222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021be:	d111      	bne.n	80021e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c8:	d004      	beq.n	80021d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d2:	d107      	bne.n	80021e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ec:	d10f      	bne.n	800220e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800220c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e017      	b.n	8002252 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3b01      	subs	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	429a      	cmp	r2, r3
 8002240:	bf0c      	ite	eq
 8002242:	2301      	moveq	r3, #1
 8002244:	2300      	movne	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	429a      	cmp	r2, r3
 800224e:	d19b      	bne.n	8002188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000008 	.word	0x20000008

08002260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2200      	movs	r2, #0
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f7ff ff6a 	bl	8002150 <SPI_WaitFlagStateUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	f043 0220 	orr.w	r2, r3, #32
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e000      	b.n	8002294 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e03f      	b.n	800232e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f001 f8f6 	bl	80034b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	; 0x24
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f905 	bl	80024f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b08a      	sub	sp, #40	; 0x28
 800233a:	af02      	add	r7, sp, #8
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	d17c      	bne.n	8002450 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_UART_Transmit+0x2c>
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e075      	b.n	8002452 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_UART_Transmit+0x3e>
 8002370:	2302      	movs	r3, #2
 8002372:	e06e      	b.n	8002452 <HAL_UART_Transmit+0x11c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2221      	movs	r2, #33	; 0x21
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238a:	f7fd ff3f 	bl	800020c <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	88fa      	ldrh	r2, [r7, #6]
 800239a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a4:	d108      	bne.n	80023b8 <HAL_UART_Transmit+0x82>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023c8:	e02a      	b.n	8002420 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f840 	bl	800245a <UART_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e036      	b.n	8002452 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10b      	bne.n	8002402 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	3302      	adds	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e007      	b.n	8002412 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3301      	adds	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1cf      	bne.n	80023ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2200      	movs	r2, #0
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f810 	bl	800245a <UART_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e006      	b.n	8002452 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800246a:	e02c      	b.n	80024c6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002472:	d028      	beq.n	80024c6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <UART_WaitOnFlagUntilTimeout+0x30>
 800247a:	f7fd fec7 	bl	800020c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	429a      	cmp	r2, r3
 8002488:	d21d      	bcs.n	80024c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002498:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e00f      	b.n	80024e6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d0c3      	beq.n	800246c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800252a:	f023 030c 	bic.w	r3, r3, #12
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	430b      	orrs	r3, r1
 8002536:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2c      	ldr	r2, [pc, #176]	; (8002604 <UART_SetConfig+0x114>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d103      	bne.n	8002560 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002558:	f7ff faec 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	e002      	b.n	8002566 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002560:	f7ff fad4 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 8002564:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	009a      	lsls	r2, r3, #2
 8002570:	441a      	add	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	4a22      	ldr	r2, [pc, #136]	; (8002608 <UART_SetConfig+0x118>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	0119      	lsls	r1, r3, #4
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	009a      	lsls	r2, r3, #2
 8002590:	441a      	add	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	fbb2 f2f3 	udiv	r2, r2, r3
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <UART_SetConfig+0x118>)
 800259e:	fba3 0302 	umull	r0, r3, r3, r2
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2064      	movs	r0, #100	; 0x64
 80025a6:	fb00 f303 	mul.w	r3, r0, r3
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	3332      	adds	r3, #50	; 0x32
 80025b0:	4a15      	ldr	r2, [pc, #84]	; (8002608 <UART_SetConfig+0x118>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025bc:	4419      	add	r1, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	009a      	lsls	r2, r3, #2
 80025c8:	441a      	add	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <UART_SetConfig+0x118>)
 80025d6:	fba3 0302 	umull	r0, r3, r3, r2
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2064      	movs	r0, #100	; 0x64
 80025de:	fb00 f303 	mul.w	r3, r0, r3
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	3332      	adds	r3, #50	; 0x32
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <UART_SetConfig+0x118>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	f003 020f 	and.w	r2, r3, #15
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	440a      	add	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40013800 	.word	0x40013800
 8002608:	51eb851f 	.word	0x51eb851f

0800260c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002610:	f7fd fda4 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002614:	f000 f816 	bl	8002644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002618:	f000 f968 	bl	80028ec <MX_GPIO_Init>
  MX_DMA_Init();
 800261c:	f000 f948 	bl	80028b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8002620:	f000 f86c 	bl	80026fc <MX_ADC1_Init>
  MX_SPI1_Init();
 8002624:	f000 f8e4 	bl	80027f0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002628:	f000 f918 	bl	800285c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)value, 5);
 800262c:	2205      	movs	r2, #5
 800262e:	4903      	ldr	r1, [pc, #12]	; (800263c <main+0x30>)
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <main+0x34>)
 8002632:	f7fd fef1 	bl	8000418 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    runRadio();
 8002636:	f000 fd83 	bl	8003140 <runRadio>
 800263a:	e7fc      	b.n	8002636 <main+0x2a>
 800263c:	200001a0 	.word	0x200001a0
 8002640:	20000090 	.word	0x20000090

08002644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b094      	sub	sp, #80	; 0x50
 8002648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800264a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800264e:	2228      	movs	r2, #40	; 0x28
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f001 f82e 	bl	80036b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002674:	2301      	movs	r3, #1
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800267e:	2300      	movs	r3, #0
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002682:	2301      	movs	r3, #1
 8002684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002686:	2302      	movs	r3, #2
 8002688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800268a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002690:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fe62 	bl	8001364 <HAL_RCC_OscConfig>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80026a6:	f000 f9a3 	bl	80029f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026aa:	230f      	movs	r3, #15
 80026ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2102      	movs	r1, #2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f8ce 	bl	8001868 <HAL_RCC_ClockConfig>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80026d2:	f000 f98d 	bl	80029f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026d6:	2302      	movs	r3, #2
 80026d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fa58 	bl	8001b98 <HAL_RCCEx_PeriphCLKConfig>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80026ee:	f000 f97f 	bl	80029f0 <Error_Handler>
  }
}
 80026f2:	bf00      	nop
 80026f4:	3750      	adds	r7, #80	; 0x50
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800270c:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <MX_ADC1_Init+0xec>)
 800270e:	4a37      	ldr	r2, [pc, #220]	; (80027ec <MX_ADC1_Init+0xf0>)
 8002710:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002712:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <MX_ADC1_Init+0xec>)
 8002714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002718:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800271a:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <MX_ADC1_Init+0xec>)
 800271c:	2201      	movs	r2, #1
 800271e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <MX_ADC1_Init+0xec>)
 8002722:	2200      	movs	r2, #0
 8002724:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <MX_ADC1_Init+0xec>)
 8002728:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800272c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800272e:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <MX_ADC1_Init+0xec>)
 8002730:	2200      	movs	r2, #0
 8002732:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8002734:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <MX_ADC1_Init+0xec>)
 8002736:	2205      	movs	r2, #5
 8002738:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800273a:	482b      	ldr	r0, [pc, #172]	; (80027e8 <MX_ADC1_Init+0xec>)
 800273c:	f7fd fd94 	bl	8000268 <HAL_ADC_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002746:	f000 f953 	bl	80029f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800274e:	2301      	movs	r3, #1
 8002750:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4823      	ldr	r0, [pc, #140]	; (80027e8 <MX_ADC1_Init+0xec>)
 800275c:	f7fd ff56 	bl	800060c <HAL_ADC_ConfigChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002766:	f000 f943 	bl	80029f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800276a:	2301      	movs	r3, #1
 800276c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800276e:	2302      	movs	r3, #2
 8002770:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002772:	2307      	movs	r3, #7
 8002774:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	4619      	mov	r1, r3
 800277a:	481b      	ldr	r0, [pc, #108]	; (80027e8 <MX_ADC1_Init+0xec>)
 800277c:	f7fd ff46 	bl	800060c <HAL_ADC_ConfigChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002786:	f000 f933 	bl	80029f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800278a:	2305      	movs	r3, #5
 800278c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800278e:	2303      	movs	r3, #3
 8002790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	4619      	mov	r1, r3
 8002796:	4814      	ldr	r0, [pc, #80]	; (80027e8 <MX_ADC1_Init+0xec>)
 8002798:	f7fd ff38 	bl	800060c <HAL_ADC_ConfigChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80027a2:	f000 f925 	bl	80029f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80027a6:	2306      	movs	r3, #6
 80027a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80027aa:	2304      	movs	r3, #4
 80027ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	480d      	ldr	r0, [pc, #52]	; (80027e8 <MX_ADC1_Init+0xec>)
 80027b4:	f7fd ff2a 	bl	800060c <HAL_ADC_ConfigChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80027be:	f000 f917 	bl	80029f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80027c2:	2309      	movs	r3, #9
 80027c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80027c6:	2305      	movs	r3, #5
 80027c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4806      	ldr	r0, [pc, #24]	; (80027e8 <MX_ADC1_Init+0xec>)
 80027d0:	f7fd ff1c 	bl	800060c <HAL_ADC_ConfigChannel>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80027da:	f000 f909 	bl	80029f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000090 	.word	0x20000090
 80027ec:	40012400 	.word	0x40012400

080027f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <MX_SPI1_Init+0x64>)
 80027f6:	4a18      	ldr	r2, [pc, #96]	; (8002858 <MX_SPI1_Init+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <MX_SPI1_Init+0x64>)
 80027fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <MX_SPI1_Init+0x64>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <MX_SPI1_Init+0x64>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_SPI1_Init+0x64>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <MX_SPI1_Init+0x64>)
 8002816:	2200      	movs	r2, #0
 8002818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_SPI1_Init+0x64>)
 800281c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_SPI1_Init+0x64>)
 8002824:	2210      	movs	r2, #16
 8002826:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <MX_SPI1_Init+0x64>)
 800282a:	2200      	movs	r2, #0
 800282c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_SPI1_Init+0x64>)
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <MX_SPI1_Init+0x64>)
 8002836:	2200      	movs	r2, #0
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_SPI1_Init+0x64>)
 800283c:	220a      	movs	r2, #10
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002840:	4804      	ldr	r0, [pc, #16]	; (8002854 <MX_SPI1_Init+0x64>)
 8002842:	f7ff fa5f 	bl	8001d04 <HAL_SPI_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800284c:	f000 f8d0 	bl	80029f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000104 	.word	0x20000104
 8002858:	40013000 	.word	0x40013000

0800285c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <MX_USART2_UART_Init+0x4c>)
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <MX_USART2_UART_Init+0x50>)
 8002864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <MX_USART2_UART_Init+0x4c>)
 8002868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800286c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_USART2_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_USART2_UART_Init+0x4c>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <MX_USART2_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MX_USART2_UART_Init+0x4c>)
 8002882:	220c      	movs	r2, #12
 8002884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <MX_USART2_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <MX_USART2_UART_Init+0x4c>)
 800288e:	2200      	movs	r2, #0
 8002890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002892:	4805      	ldr	r0, [pc, #20]	; (80028a8 <MX_USART2_UART_Init+0x4c>)
 8002894:	f7ff fd02 	bl	800229c <HAL_UART_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800289e:	f000 f8a7 	bl	80029f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	2000015c 	.word	0x2000015c
 80028ac:	40004400 	.word	0x40004400

080028b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <MX_DMA_Init+0x38>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <MX_DMA_Init+0x38>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6153      	str	r3, [r2, #20]
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <MX_DMA_Init+0x38>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	200b      	movs	r0, #11
 80028d4:	f7fe f96b 	bl	8000bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028d8:	200b      	movs	r0, #11
 80028da:	f7fe f984 	bl	8000be6 <HAL_NVIC_EnableIRQ>

}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000

080028ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f2:	f107 0310 	add.w	r3, r7, #16
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002900:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <MX_GPIO_Init+0xf4>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	4a36      	ldr	r2, [pc, #216]	; (80029e0 <MX_GPIO_Init+0xf4>)
 8002906:	f043 0310 	orr.w	r3, r3, #16
 800290a:	6193      	str	r3, [r2, #24]
 800290c:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <MX_GPIO_Init+0xf4>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002918:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <MX_GPIO_Init+0xf4>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a30      	ldr	r2, [pc, #192]	; (80029e0 <MX_GPIO_Init+0xf4>)
 800291e:	f043 0320 	orr.w	r3, r3, #32
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <MX_GPIO_Init+0xf4>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <MX_GPIO_Init+0xf4>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a2a      	ldr	r2, [pc, #168]	; (80029e0 <MX_GPIO_Init+0xf4>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <MX_GPIO_Init+0xf4>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <MX_GPIO_Init+0xf4>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <MX_GPIO_Init+0xf4>)
 800294e:	f043 0308 	orr.w	r3, r3, #8
 8002952:	6193      	str	r3, [r2, #24]
 8002954:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <MX_GPIO_Init+0xf4>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002960:	2200      	movs	r2, #0
 8002962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002966:	481f      	ldr	r0, [pc, #124]	; (80029e4 <MX_GPIO_Init+0xf8>)
 8002968:	f7fe fcca 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 800296c:	2200      	movs	r2, #0
 800296e:	2110      	movs	r1, #16
 8002970:	481d      	ldr	r0, [pc, #116]	; (80029e8 <MX_GPIO_Init+0xfc>)
 8002972:	f7fe fcc5 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8002976:	2200      	movs	r2, #0
 8002978:	2101      	movs	r1, #1
 800297a:	481c      	ldr	r0, [pc, #112]	; (80029ec <MX_GPIO_Init+0x100>)
 800297c:	f7fe fcc0 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002986:	2301      	movs	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2302      	movs	r3, #2
 8002990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	4619      	mov	r1, r3
 8002998:	4812      	ldr	r0, [pc, #72]	; (80029e4 <MX_GPIO_Init+0xf8>)
 800299a:	f7fe fb2d 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 800299e:	2310      	movs	r3, #16
 80029a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a2:	2301      	movs	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2302      	movs	r3, #2
 80029ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4619      	mov	r1, r3
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <MX_GPIO_Init+0xfc>)
 80029b6:	f7fe fb1f 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 80029ba:	2301      	movs	r3, #1
 80029bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029be:	2301      	movs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	4619      	mov	r1, r3
 80029d0:	4806      	ldr	r0, [pc, #24]	; (80029ec <MX_GPIO_Init+0x100>)
 80029d2:	f7fe fb11 	bl	8000ff8 <HAL_GPIO_Init>

}
 80029d6:	bf00      	nop
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40010800 	.word	0x40010800
 80029ec:	40010c00 	.word	0x40010c00

080029f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2110      	movs	r1, #16
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <nRF24_CSN_L+0x14>)
 8002a06:	f7fe fc7b 	bl	8001300 <HAL_GPIO_WritePin>
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40010800 	.word	0x40010800

08002a14 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	2110      	movs	r1, #16
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <nRF24_CSN_H+0x14>)
 8002a1e:	f7fe fc6f 	bl	8001300 <HAL_GPIO_WritePin>
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40010800 	.word	0x40010800

08002a2c <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 8002a36:	f107 020f 	add.w	r2, r7, #15
 8002a3a:	1df9      	adds	r1, r7, #7
 8002a3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	2301      	movs	r3, #1
 8002a44:	4806      	ldr	r0, [pc, #24]	; (8002a60 <nRF24_LL_RW+0x34>)
 8002a46:	f7ff f9e1 	bl	8001e0c <HAL_SPI_TransmitReceive>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <nRF24_LL_RW+0x28>
        Error_Handler();
 8002a50:	f7ff ffce 	bl	80029f0 <Error_Handler>
    };
    return result;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000104 	.word	0x20000104

08002a64 <nRF24_ReadReg>:
 *
 * @param reg Địa chỉ của thanh ghi cần đọc
 * @return uint8_t Giá trị của thanh ghi
 */
static uint8_t nRF24_ReadReg(uint8_t reg)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8002a6e:	f7ff ffc5 	bl	80029fc <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ffd6 	bl	8002a2c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8002a80:	20ff      	movs	r0, #255	; 0xff
 8002a82:	f7ff ffd3 	bl	8002a2c <nRF24_LL_RW>
 8002a86:	4603      	mov	r3, r0
 8002a88:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8002a8a:	f7ff ffc3 	bl	8002a14 <nRF24_CSN_H>

	return value;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <nRF24_WriteReg>:
 *
 * @param reg Địa chỉ của thanh ghi
 * @param value Giá trị cần viết
 */
static void nRF24_WriteReg(uint8_t reg, uint8_t value)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	71fb      	strb	r3, [r7, #7]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002aa8:	f7ff ffa8 	bl	80029fc <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	2b1f      	cmp	r3, #31
 8002ab0:	d810      	bhi.n	8002ad4 <nRF24_WriteReg+0x3c>
	{
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	b25b      	sxtb	r3, r3
 8002abc:	f043 0320 	orr.w	r3, r3, #32
 8002ac0:	b25b      	sxtb	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ffb1 	bl	8002a2c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8002aca:	79bb      	ldrb	r3, [r7, #6]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ffad 	bl	8002a2c <nRF24_LL_RW>
 8002ad2:	e013      	b.n	8002afc <nRF24_WriteReg+0x64>
	}
	else
	{
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ffa8 	bl	8002a2c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) &&
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2be1      	cmp	r3, #225	; 0xe1
 8002ae0:	d00c      	beq.n	8002afc <nRF24_WriteReg+0x64>
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2be2      	cmp	r3, #226	; 0xe2
 8002ae6:	d009      	beq.n	8002afc <nRF24_WriteReg+0x64>
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	2be3      	cmp	r3, #227	; 0xe3
 8002aec:	d006      	beq.n	8002afc <nRF24_WriteReg+0x64>
			(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	2bff      	cmp	r3, #255	; 0xff
 8002af2:	d003      	beq.n	8002afc <nRF24_WriteReg+0x64>
		{
			// Send register value
			nRF24_LL_RW(value);
 8002af4:	79bb      	ldrb	r3, [r7, #6]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff98 	bl	8002a2c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8002afc:	f7ff ff8a 	bl	8002a14 <nRF24_CSN_H>
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <nRF24_ReadMBReg>:
 * @param reg Địa chỉ thanh ghi
 * @param pBuf Con trỏ , trỏ vào buffer cần lưu
 * @param count Số lượng byte
 */
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	4613      	mov	r3, r2
 8002b16:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002b18:	f7ff ff70 	bl	80029fc <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff84 	bl	8002a2c <nRF24_LL_RW>
	while (count--)
 8002b24:	e007      	b.n	8002b36 <nRF24_ReadMBReg+0x2e>
	{
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8002b26:	683c      	ldr	r4, [r7, #0]
 8002b28:	1c63      	adds	r3, r4, #1
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	20ff      	movs	r0, #255	; 0xff
 8002b2e:	f7ff ff7d 	bl	8002a2c <nRF24_LL_RW>
 8002b32:	4603      	mov	r3, r0
 8002b34:	7023      	strb	r3, [r4, #0]
	while (count--)
 8002b36:	79bb      	ldrb	r3, [r7, #6]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	71ba      	strb	r2, [r7, #6]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f2      	bne.n	8002b26 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8002b40:	f7ff ff68 	bl	8002a14 <nRF24_CSN_H>
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd90      	pop	{r4, r7, pc}

08002b4c <nRF24_WriteMBReg>:
 * @param reg Địa chỉ của thanh ghi
 * @param pBuf Trỏ đến buffer lưu giá trị
 * @param count số lượng byte
 */
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002b5c:	f7ff ff4e 	bl	80029fc <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff62 	bl	8002a2c <nRF24_LL_RW>
	while (count--)
 8002b68:	e006      	b.n	8002b78 <nRF24_WriteMBReg+0x2c>
	{
		nRF24_LL_RW(*pBuf++);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	603a      	str	r2, [r7, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ff5a 	bl	8002a2c <nRF24_LL_RW>
	while (count--)
 8002b78:	79bb      	ldrb	r3, [r7, #6]
 8002b7a:	1e5a      	subs	r2, r3, #1
 8002b7c:	71ba      	strb	r2, [r7, #6]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f3      	bne.n	8002b6a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8002b82:	f7ff ff47 	bl	8002a14 <nRF24_CSN_H>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <nRF24_Init>:
 * @brief Init bộ Transmit và Receive
 * note: RX/TX chưa cấu hình đại chỉ pipe
 *
 */
void nRF24_Init(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	af00      	add	r7, sp, #0

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);		// Bật tính CRC
 8002b92:	2108      	movs	r1, #8
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7ff ff7f 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);		// Cho phép phản hồi ACK cho pipe0 -> pipe5
 8002b9a:	213f      	movs	r1, #63	; 0x3f
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f7ff ff7b 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);	// Cho phép truyền pipe0 và pipe1
 8002ba2:	2103      	movs	r1, #3
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	f7ff ff77 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);	// Độ dài địa chỉ là 5 byte
 8002baa:	2103      	movs	r1, #3
 8002bac:	2003      	movs	r0, #3
 8002bae:	f7ff ff73 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03); // 0000 0011 , Cho phép gửi lại 3 lần(reTransmit) và mỗi lần gửi cách nhau 250us
 8002bb2:	2103      	movs	r1, #3
 8002bb4:	2004      	movs	r0, #4
 8002bb6:	f7ff ff6f 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);		// 2400 + 2 (hz)
 8002bba:	2102      	movs	r1, #2
 8002bbc:	2005      	movs	r0, #5
 8002bbe:	f7ff ff6b 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);	// tốc độ truyền 2Mbps , và công suất độ lợi tối đa 0dm
 8002bc2:	210e      	movs	r1, #14
 8002bc4:	2006      	movs	r0, #6
 8002bc6:	f7ff ff67 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8002bca:	2100      	movs	r1, #0
 8002bcc:	2007      	movs	r0, #7
 8002bce:	f7ff ff63 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	2011      	movs	r0, #17
 8002bd6:	f7ff ff5f 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2012      	movs	r0, #18
 8002bde:	f7ff ff5b 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8002be2:	2100      	movs	r1, #0
 8002be4:	2013      	movs	r0, #19
 8002be6:	f7ff ff57 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8002bea:	2100      	movs	r1, #0
 8002bec:	2014      	movs	r0, #20
 8002bee:	f7ff ff53 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	2015      	movs	r0, #21
 8002bf6:	f7ff ff4f 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	2016      	movs	r0, #22
 8002bfe:	f7ff ff4b 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8002c02:	2100      	movs	r1, #0
 8002c04:	201c      	movs	r0, #28
 8002c06:	f7ff ff47 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	201d      	movs	r0, #29
 8002c0e:	f7ff ff43 	bl	8002a98 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX(); //  xóa bộ đệm RX
 8002c12:	f000 f98f 	bl	8002f34 <nRF24_FlushRX>
	nRF24_FlushTX(); //  xóa bộ đệm TX
 8002c16:	f000 f985 	bl	8002f24 <nRF24_FlushTX>

	// Xóa hết những sự kiện vào ngắt
	nRF24_ClearIRQFlags();
 8002c1a:	f000 f993 	bl	8002f44 <nRF24_ClearIRQFlags>

	// (chip release)
	nRF24_CSN_H();
 8002c1e:	f7ff fef9 	bl	8002a14 <nRF24_CSN_H>
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <nRF24_Check>:
 * @return 1 - nRF24L01 đang hoạt động
 * @return 0 - No đéo hoạt động
 *
 */
uint8_t nRF24_Check(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <nRF24_Check+0x58>)
 8002c30:	60bb      	str	r3, [r7, #8]

	// Viết Địa chỉ giả để test TX và RX
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8002c32:	2205      	movs	r2, #5
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	2030      	movs	r0, #48	; 0x30
 8002c38:	f7ff ff88 	bl	8002b4c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	2205      	movs	r2, #5
 8002c40:	4619      	mov	r1, r3
 8002c42:	2010      	movs	r0, #16
 8002c44:	f7ff ff60 	bl	8002b08 <nRF24_ReadMBReg>

	// So sánh hai giá trị , sai thì return 0
	for (i = 0; i < 5; i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	e00f      	b.n	8002c6e <nRF24_Check+0x46>
	{
		if (rxbuf[i] != *ptr++)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	3310      	adds	r3, #16
 8002c52:	443b      	add	r3, r7
 8002c54:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <nRF24_Check+0x40>
			return 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e006      	b.n	8002c76 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d9ec      	bls.n	8002c4e <nRF24_Check+0x26>
	}

	return 1;
 8002c74:	2301      	movs	r3, #1
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	08003fe0 	.word	0x08003fe0

08002c84 <nRF24_SetPowerMode>:
 * @brief Điều chình transceiver power mode
 *
 * @param mode trạng thát mới của power mode , Power up và Power down , tương ứng TX hay RX
 */
void nRF24_SetPowerMode(uint8_t mode)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f7ff fee8 	bl	8002a64 <nRF24_ReadReg>
 8002c94:	4603      	mov	r3, r0
 8002c96:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d104      	bne.n	8002ca8 <nRF24_SetPowerMode+0x24>
	{
		// kích hoạt transmit
		reg |= nRF24_CONFIG_PWR_UP;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	e003      	b.n	8002cb0 <nRF24_SetPowerMode+0x2c>
	}
	else
	{
		// kích hoạt receive
		reg &= ~nRF24_CONFIG_PWR_UP;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	f023 0302 	bic.w	r3, r3, #2
 8002cae:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7ff feef 	bl	8002a98 <nRF24_WriteReg>
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <nRF24_SetOperationalMode>:
 * @brief et chế động hoạt động
 *
 * @param mode mode hoạt động , TX hay RX
 */
void nRF24_SetOperationalMode(uint8_t mode)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// cấu PRIM_RX bit để chọn chế độ
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7ff fec9 	bl	8002a64 <nRF24_ReadReg>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	b25a      	sxtb	r2, r3
 8002ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7ff fece 	bl	8002a98 <nRF24_WriteReg>
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <nRF24_SetCRCScheme>:
 *
 * @param scheme Cơ chế CRC
 * @note: Bộ transReceier BẮT BUỘC bật CRC nếu có ít nhất một cổng pipe bật autoACK
 */
void nRF24_SetCRCScheme(uint8_t scheme)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7ff fea8 	bl	8002a64 <nRF24_ReadReg>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	f023 030c 	bic.w	r3, r3, #12
 8002d1e:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8002d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	b25a      	sxtb	r2, r3
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	b25b      	sxtb	r3, r3
 8002d32:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	4619      	mov	r1, r3
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7ff fead 	bl	8002a98 <nRF24_WriteReg>
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <nRF24_SetRFChannel>:
 * @param channel Giá trị tần số 0 to 127
 * @Note: Tần số  =  (2400 + channel)MHz
 * @Note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be rese
 */
void nRF24_SetRFChannel(uint8_t channel)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	4619      	mov	r1, r3
 8002d54:	2005      	movs	r0, #5
 8002d56:	f7ff fe9f 	bl	8002a98 <nRF24_WriteReg>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <nRF24_SetAutoRetr>:
// input:
//   ard -Thời gian giữa những lần truyền lại
//   arc - Số lần truyện lại (tối đa 15)
// note: 0x00 có nghĩa là tắt chức năng truyền lại
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	460a      	mov	r2, r1
 8002d6c:	71fb      	strb	r3, [r7, #7]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	b25a      	sxtb	r2, r3
 8002d78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	b25b      	sxtb	r3, r3
 8002d82:	4313      	orrs	r3, r2
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	4619      	mov	r1, r3
 8002d8a:	2004      	movs	r0, #4
 8002d8c:	f7ff fe84 	bl	8002a98 <nRF24_WriteReg>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <nRF24_SetAddrWidth>:
 *
 * @param addr_width addr_width - độ dài RX/TX address (3 to 5)
 * @Note: cài đặt cho tất cả các pipe
 */
void nRF24_SetAddrWidth(uint8_t addr_width)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	3b02      	subs	r3, #2
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4619      	mov	r1, r3
 8002daa:	2003      	movs	r0, #3
 8002dac:	f7ff fe74 	bl	8002a98 <nRF24_WriteReg>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <nRF24_SetAddr>:
 * @note: pipe có giá trị 0 to 5 (RX pipes) và 6 (TX pipe)
 * @note: buffer length must be equal to current address width of transceiver
 * @note: Với pipes[2..5] Chỉ có byte đầu tên được GHI vì những byte còn lại giống pipe1
 */
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d00a      	beq.n	8002de0 <nRF24_SetAddr+0x28>
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	dc36      	bgt.n	8002e3c <nRF24_SetAddr+0x84>
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	dc02      	bgt.n	8002dd8 <nRF24_SetAddr+0x20>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da04      	bge.n	8002de0 <nRF24_SetAddr+0x28>
	case nRF24_PIPE5:
		// Chỉ viết byte đầu tiên (vì những byte còn lại gióng pipe1)
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
		break;
	default:
		break;
 8002dd6:	e031      	b.n	8002e3c <nRF24_SetAddr+0x84>
 8002dd8:	3b02      	subs	r3, #2
	switch (pipe)
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d82e      	bhi.n	8002e3c <nRF24_SetAddr+0x84>
 8002dde:	e023      	b.n	8002e28 <nRF24_SetAddr+0x70>
		addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8002de0:	2003      	movs	r0, #3
 8002de2:	f7ff fe3f 	bl	8002a64 <nRF24_ReadReg>
 8002de6:	4603      	mov	r3, r0
 8002de8:	3301      	adds	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
		addr += addr_width;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	4413      	add	r3, r2
 8002df2:	603b      	str	r3, [r7, #0]
		nRF24_CSN_L();
 8002df4:	f7ff fe02 	bl	80029fc <nRF24_CSN_L>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <nRF24_SetAddr+0x90>)
 8002dfc:	5cd3      	ldrb	r3, [r2, r3]
 8002dfe:	f043 0320 	orr.w	r3, r3, #32
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fe11 	bl	8002a2c <nRF24_LL_RW>
			nRF24_LL_RW(*addr--);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	603a      	str	r2, [r7, #0]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fe0a 	bl	8002a2c <nRF24_LL_RW>
		} while (addr_width--);
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	1e5a      	subs	r2, r3, #1
 8002e1c:	73fa      	strb	r2, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f3      	bne.n	8002e0a <nRF24_SetAddr+0x52>
		nRF24_CSN_H();
 8002e22:	f7ff fdf7 	bl	8002a14 <nRF24_CSN_H>
		break;
 8002e26:	e00a      	b.n	8002e3e <nRF24_SetAddr+0x86>
		nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <nRF24_SetAddr+0x90>)
 8002e2c:	5cd2      	ldrb	r2, [r2, r3]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4610      	mov	r0, r2
 8002e36:	f7ff fe2f 	bl	8002a98 <nRF24_WriteReg>
		break;
 8002e3a:	e000      	b.n	8002e3e <nRF24_SetAddr+0x86>
		break;
 8002e3c:	bf00      	nop
	}
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	08004000 	.word	0x08004000

08002e4c <nRF24_SetTXPower>:
 * @brief Cấu hình TX mode
 *
 * @param tx_pwr Công suất của RF , (0db,1db ,2db)
 */
void nRF24_SetTXPower(uint8_t tx_pwr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002e56:	2006      	movs	r0, #6
 8002e58:	f7ff fe04 	bl	8002a64 <nRF24_ReadReg>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	f023 0306 	bic.w	r3, r3, #6
 8002e66:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	4619      	mov	r1, r3
 8002e74:	2006      	movs	r0, #6
 8002e76:	f7ff fe0f 	bl	8002a98 <nRF24_WriteReg>
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <nRF24_SetDataRate>:
 * @brief Cấu hinhd RX mode
 *
 * @param data_rate Tốc độ của data
 */
void nRF24_SetDataRate(uint8_t data_rate)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002e8c:	2006      	movs	r0, #6
 8002e8e:	f7ff fde9 	bl	8002a64 <nRF24_ReadReg>
 8002e92:	4603      	mov	r3, r0
 8002e94:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002e9c:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	2006      	movs	r0, #6
 8002eac:	f7ff fdf4 	bl	8002a98 <nRF24_WriteReg>
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <nRF24_EnableAA>:
 * @brief CHo phép auto retransmit cho từng pipe
 *
 * @param pipe pipe cần cấu hình
 */
void nRF24_EnableAA(uint8_t pipe)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f7ff fdce 	bl	8002a64 <nRF24_ReadReg>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	b25a      	sxtb	r2, r3
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f7ff fdd7 	bl	8002a98 <nRF24_WriteReg>
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <nRF24_GetStatus>:
 * @brief lấy giá trị STATUS register
 *
 * @return uint8_t Giá trị của STATUS
 */
uint8_t nRF24_GetStatus(void)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8002ef6:	2007      	movs	r0, #7
 8002ef8:	f7ff fdb4 	bl	8002a64 <nRF24_ReadReg>
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <nRF24_ResetPLOS>:
/**
 * @brief Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
 *
 */
void nRF24_ResetPLOS(void)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 8002f08:	2005      	movs	r0, #5
 8002f0a:	f7ff fdab 	bl	8002a64 <nRF24_ReadReg>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	4619      	mov	r1, r3
 8002f16:	2005      	movs	r0, #5
 8002f18:	f7ff fdbe 	bl	8002a98 <nRF24_WriteReg>
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <nRF24_FlushTX>:
/**
 * @brief xóa TX FIFO
 *
 */
void nRF24_FlushTX(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8002f28:	21ff      	movs	r1, #255	; 0xff
 8002f2a:	20e1      	movs	r0, #225	; 0xe1
 8002f2c:	f7ff fdb4 	bl	8002a98 <nRF24_WriteReg>
}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <nRF24_FlushRX>:
/**
 * @brief xóa RX FIFO
 *
 */
void nRF24_FlushRX(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8002f38:	21ff      	movs	r1, #255	; 0xff
 8002f3a:	20e2      	movs	r0, #226	; 0xe2
 8002f3c:	f7ff fdac 	bl	8002a98 <nRF24_WriteReg>
}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <nRF24_ClearIRQFlags>:
/**
 * @brief xóa bất kỳ pending IRQ flags
 *
 */
void nRF24_ClearIRQFlags(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits của thanh STATUS
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8002f4a:	2007      	movs	r0, #7
 8002f4c:	f7ff fd8a 	bl	8002a64 <nRF24_ReadReg>
 8002f50:	4603      	mov	r3, r0
 8002f52:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002f5a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	2007      	movs	r0, #7
 8002f62:	f7ff fd99 	bl	8002a98 <nRF24_WriteReg>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <nRF24_WritePayload>:
 *
 * @param pBuf con trỏ , trỏ tới buffer chứa paylaod
 * @param length độ dài của paylaod
 */
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	20a0      	movs	r0, #160	; 0xa0
 8002f82:	f7ff fde3 	bl	8002b4c <nRF24_WriteMBReg>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2101      	movs	r1, #1
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <nRF24_CE_L+0x14>)
 8002f9a:	f7fe f9b1 	bl	8001300 <HAL_GPIO_WritePin>
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40010c00 	.word	0x40010c00

08002fa8 <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8002fac:	2201      	movs	r2, #1
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <nRF24_CE_H+0x14>)
 8002fb2:	f7fe f9a5 	bl	8001300 <HAL_GPIO_WritePin>
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40010c00 	.word	0x40010c00

08002fc0 <Delay_ms>:


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7fd f929 	bl	8000220 <HAL_Delay>
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <Toggle_LED>:

extern uint32_t value[5];
extern UART_HandleTypeDef huart2;

void Toggle_LED()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <Toggle_LED+0x14>)
 8002fe2:	f7fe f9a5 	bl	8001330 <HAL_GPIO_TogglePin>
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40011000 	.word	0x40011000

08002ff0 <UART_SendStr>:
void UART_SendStr(char *string)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)string, (uint16_t)strlen(string), 200);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fd f8a7 	bl	800014c <strlen>
 8002ffe:	4603      	mov	r3, r0
 8003000:	b29a      	uxth	r2, r3
 8003002:	23c8      	movs	r3, #200	; 0xc8
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4803      	ldr	r0, [pc, #12]	; (8003014 <UART_SendStr+0x24>)
 8003008:	f7ff f995 	bl	8002336 <HAL_UART_Transmit>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2000015c 	.word	0x2000015c

08003018 <convert_to_8bits>:

NRF_Packet payload_packet;
uint8_t payload_length;

uint8_t convert_to_8bits(uint32_t val, uint32_t min, uint32_t middle, uint32_t max)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
    if (val > max)
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d901      	bls.n	8003032 <convert_to_8bits+0x1a>
        val = max;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	60fb      	str	r3, [r7, #12]
    if (val < min)
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	d201      	bcs.n	800303e <convert_to_8bits+0x26>
        val = min;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	60fb      	str	r3, [r7, #12]
    if (val < middle)
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	d20c      	bcs.n	8003060 <convert_to_8bits+0x48>
        return (val - min) * (127 - 0) / (middle - min) + 0;
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	1ad2      	subs	r2, r2, r3
 800304c:	4613      	mov	r3, r2
 800304e:	01db      	lsls	r3, r3, #7
 8003050:	1a9a      	subs	r2, r3, r2
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	1acb      	subs	r3, r1, r3
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e00d      	b.n	800307c <convert_to_8bits+0x64>
    else
        return (val - middle) * (255 - 128) / (max - middle) + 128;
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	4613      	mov	r3, r2
 8003068:	01db      	lsls	r3, r3, #7
 800306a:	1a9a      	subs	r2, r3, r2
 800306c:	6839      	ldr	r1, [r7, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	1acb      	subs	r3, r1, r3
 8003072:	fbb2 f3f3 	udiv	r3, r2, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	3b80      	subs	r3, #128	; 0x80
 800307a:	b2db      	uxtb	r3, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
	...

08003088 <nRF24_TransmitPacket>:
} nRF24_TXResult;

// Length of received payload

nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
    volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8003094:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <nRF24_TransmitPacket+0x80>)
 8003096:	60bb      	str	r3, [r7, #8]
    uint8_t status;
    nRF24_CE_L();
 8003098:	f7ff ff7a 	bl	8002f90 <nRF24_CE_L>
    nRF24_WritePayload(pBuf, length);
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff64 	bl	8002f6e <nRF24_WritePayload>
    nRF24_CE_H();
 80030a6:	f7ff ff7f 	bl	8002fa8 <nRF24_CE_H>

    do
    {
        status = nRF24_GetStatus();
 80030aa:	f7ff ff22 	bl	8002ef2 <nRF24_GetStatus>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
        if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT))
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <nRF24_TransmitPacket+0x40>
        {
            break;
        }
    } while (wait--);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	60ba      	str	r2, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f1      	bne.n	80030aa <nRF24_TransmitPacket+0x22>
 80030c6:	e000      	b.n	80030ca <nRF24_TransmitPacket+0x42>
            break;
 80030c8:	bf00      	nop
    nRF24_CE_L();
 80030ca:	f7ff ff61 	bl	8002f90 <nRF24_CE_L>

    if (!wait)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <nRF24_TransmitPacket+0x50>
        return nRF24_TX_TIMEOUT;
 80030d4:	2302      	movs	r3, #2
 80030d6:	e012      	b.n	80030fe <nRF24_TransmitPacket+0x76>

    nRF24_ClearIRQFlags();
 80030d8:	f7ff ff34 	bl	8002f44 <nRF24_ClearIRQFlags>

    if (status & nRF24_FLAG_MAX_RT)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <nRF24_TransmitPacket+0x62>
        return nRF24_TX_MAXRT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e009      	b.n	80030fe <nRF24_TransmitPacket+0x76>

    if (status & nRF24_FLAG_TX_DS)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <nRF24_TransmitPacket+0x70>
        return nRF24_TX_SUCCESS;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e002      	b.n	80030fe <nRF24_TransmitPacket+0x76>

    nRF24_FlushTX();
 80030f8:	f7ff ff14 	bl	8002f24 <nRF24_FlushTX>

    return nRF24_TX_ERROR;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	000fffff 	.word	0x000fffff

0800310c <reset_controller>:
void reset_controller(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
    payload_packet.throttle = 0;
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <reset_controller+0x30>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
    payload_packet.yaw = 127;
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <reset_controller+0x30>)
 8003118:	227f      	movs	r2, #127	; 0x7f
 800311a:	705a      	strb	r2, [r3, #1]
    payload_packet.pitch = 127;
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <reset_controller+0x30>)
 800311e:	227f      	movs	r2, #127	; 0x7f
 8003120:	709a      	strb	r2, [r3, #2]
    payload_packet.roll = 127;
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <reset_controller+0x30>)
 8003124:	227f      	movs	r2, #127	; 0x7f
 8003126:	70da      	strb	r2, [r3, #3]
    payload_packet.button = 0;
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <reset_controller+0x30>)
 800312a:	2200      	movs	r2, #0
 800312c:	711a      	strb	r2, [r3, #4]
    payload_packet.button_1 = 0;
 800312e:	4b03      	ldr	r3, [pc, #12]	; (800313c <reset_controller+0x30>)
 8003130:	2200      	movs	r2, #0
 8003132:	715a      	strb	r2, [r3, #5]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	200001b4 	.word	0x200001b4

08003140 <runRadio>:

#endif // DEMO_TX_

int runRadio(void)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b08b      	sub	sp, #44	; 0x2c
 8003144:	af02      	add	r7, sp, #8
    nRF24_CE_L();
 8003146:	f7ff ff23 	bl	8002f90 <nRF24_CE_L>
    if (!nRF24_Check())
 800314a:	f7ff fd6d 	bl	8002c28 <nRF24_Check>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <runRadio+0x20>
    {
        while (1)
        {
            Toggle_LED();
 8003154:	f7ff ff40 	bl	8002fd8 <Toggle_LED>
            Delay_ms(50);
 8003158:	2032      	movs	r0, #50	; 0x32
 800315a:	f7ff ff31 	bl	8002fc0 <Delay_ms>
            Toggle_LED();
 800315e:	e7f9      	b.n	8003154 <runRadio+0x14>
        }
    }
    nRF24_Init();
 8003160:	f7ff fd15 	bl	8002b8e <nRF24_Init>

    /***************************************************************************/

#if (TX_SINGLE)

    nRF24_SetRFChannel(40);
 8003164:	2028      	movs	r0, #40	; 0x28
 8003166:	f7ff fdee 	bl	8002d46 <nRF24_SetRFChannel>
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 800316a:	2008      	movs	r0, #8
 800316c:	f7ff fe89 	bl	8002e82 <nRF24_SetDataRate>
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8003170:	200c      	movs	r0, #12
 8003172:	f7ff fdc7 	bl	8002d04 <nRF24_SetCRCScheme>
    nRF24_SetAddrWidth(3);
 8003176:	2003      	movs	r0, #3
 8003178:	f7ff fe0e 	bl	8002d98 <nRF24_SetAddrWidth>
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 800317c:	4942      	ldr	r1, [pc, #264]	; (8003288 <runRadio+0x148>)
 800317e:	2006      	movs	r0, #6
 8003180:	f7ff fe1a 	bl	8002db8 <nRF24_SetAddr>
    nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR);
 8003184:	4940      	ldr	r1, [pc, #256]	; (8003288 <runRadio+0x148>)
 8003186:	2000      	movs	r0, #0
 8003188:	f7ff fe16 	bl	8002db8 <nRF24_SetAddr>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 800318c:	2006      	movs	r0, #6
 800318e:	f7ff fe5d 	bl	8002e4c <nRF24_SetTXPower>
    nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 8003192:	210a      	movs	r1, #10
 8003194:	2009      	movs	r0, #9
 8003196:	f7ff fde4 	bl	8002d62 <nRF24_SetAutoRetr>
    nRF24_EnableAA(nRF24_PIPE0);
 800319a:	2000      	movs	r0, #0
 800319c:	f7ff fe8c 	bl	8002eb8 <nRF24_EnableAA>
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7ff fd8e 	bl	8002cc2 <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 80031a6:	f7ff fecd 	bl	8002f44 <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 80031aa:	2002      	movs	r0, #2
 80031ac:	f7ff fd6a 	bl	8002c84 <nRF24_SetPowerMode>

    payload_length = sizeof(payload_packet);
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <runRadio+0x14c>)
 80031b2:	2206      	movs	r2, #6
 80031b4:	701a      	strb	r2, [r3, #0]
    uint8_t data_char[30];
    reset_controller();
 80031b6:	f7ff ffa9 	bl	800310c <reset_controller>
    while (1)
    {

        payload_packet.throttle = convert_to_8bits(value[0], 450, 1585, 3620);
 80031ba:	4b35      	ldr	r3, [pc, #212]	; (8003290 <runRadio+0x150>)
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	f640 6324 	movw	r3, #3620	; 0xe24
 80031c2:	f240 6231 	movw	r2, #1585	; 0x631
 80031c6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80031ca:	f7ff ff25 	bl	8003018 <convert_to_8bits>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b30      	ldr	r3, [pc, #192]	; (8003294 <runRadio+0x154>)
 80031d4:	701a      	strb	r2, [r3, #0]
        payload_packet.roll = convert_to_8bits(value[1], 450, 1585, 3620);
 80031d6:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <runRadio+0x150>)
 80031d8:	6858      	ldr	r0, [r3, #4]
 80031da:	f640 6324 	movw	r3, #3620	; 0xe24
 80031de:	f240 6231 	movw	r2, #1585	; 0x631
 80031e2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80031e6:	f7ff ff17 	bl	8003018 <convert_to_8bits>
 80031ea:	4603      	mov	r3, r0
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <runRadio+0x154>)
 80031f0:	70da      	strb	r2, [r3, #3]
        payload_packet.pitch = convert_to_8bits(value[2], 450, 1585, 3620);
 80031f2:	4b27      	ldr	r3, [pc, #156]	; (8003290 <runRadio+0x150>)
 80031f4:	6898      	ldr	r0, [r3, #8]
 80031f6:	f640 6324 	movw	r3, #3620	; 0xe24
 80031fa:	f240 6231 	movw	r2, #1585	; 0x631
 80031fe:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003202:	f7ff ff09 	bl	8003018 <convert_to_8bits>
 8003206:	4603      	mov	r3, r0
 8003208:	461a      	mov	r2, r3
 800320a:	4b22      	ldr	r3, [pc, #136]	; (8003294 <runRadio+0x154>)
 800320c:	709a      	strb	r2, [r3, #2]
        payload_packet.yaw = convert_to_8bits(value[3], 450, 1585, 3620);
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <runRadio+0x150>)
 8003210:	68d8      	ldr	r0, [r3, #12]
 8003212:	f640 6324 	movw	r3, #3620	; 0xe24
 8003216:	f240 6231 	movw	r2, #1585	; 0x631
 800321a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800321e:	f7ff fefb 	bl	8003018 <convert_to_8bits>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <runRadio+0x154>)
 8003228:	705a      	strb	r2, [r3, #1]

        sprintf((char *)data_char, "value: %u  %u  %u  %u\n", (size_t)payload_packet.throttle, (size_t)payload_packet.roll, (size_t)payload_packet.pitch,(size_t)payload_packet.yaw);
 800322a:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <runRadio+0x154>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	4b18      	ldr	r3, [pc, #96]	; (8003294 <runRadio+0x154>)
 8003232:	78db      	ldrb	r3, [r3, #3]
 8003234:	461c      	mov	r4, r3
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <runRadio+0x154>)
 8003238:	789b      	ldrb	r3, [r3, #2]
 800323a:	461a      	mov	r2, r3
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <runRadio+0x154>)
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	4638      	mov	r0, r7
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	4623      	mov	r3, r4
 8003248:	460a      	mov	r2, r1
 800324a:	4913      	ldr	r1, [pc, #76]	; (8003298 <runRadio+0x158>)
 800324c:	f000 fa3a 	bl	80036c4 <siprintf>
        UART_SendStr((char *)data_char);
 8003250:	463b      	mov	r3, r7
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fecc 	bl	8002ff0 <UART_SendStr>
        // HAL_UART_Transmit(&huart2, &payload_packet.throttle, 1, 1000);
        // HAL_UART_Transmit(&huart2,(uint8_t*)value[0],sizeof(value[0]),1000);
        //       HAL_UART_Transmit(&huart2,(uint8_t*)&payload_packet,payload_length,1000);
        nRF24_TXResult result = nRF24_TransmitPacket((uint8_t *)&payload_packet, payload_length);
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <runRadio+0x14c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	480d      	ldr	r0, [pc, #52]	; (8003294 <runRadio+0x154>)
 8003260:	f7ff ff12 	bl	8003088 <nRF24_TransmitPacket>
 8003264:	4603      	mov	r3, r0
 8003266:	77fb      	strb	r3, [r7, #31]
        switch (result)
 8003268:	7ffb      	ldrb	r3, [r7, #31]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d005      	beq.n	800327a <runRadio+0x13a>
 800326e:	2b03      	cmp	r3, #3
 8003270:	d000      	beq.n	8003274 <runRadio+0x134>
        case nRF24_TX_MAXRT:
            nRF24_ResetPLOS();
        case nRF24_TX_TIMEOUT:
        default:
            // todo: Bị lỗi khi truyền đi
            break;
 8003272:	e003      	b.n	800327c <runRadio+0x13c>
            nRF24_ResetPLOS();
 8003274:	f7ff fe45 	bl	8002f02 <nRF24_ResetPLOS>
            break;
 8003278:	e000      	b.n	800327c <runRadio+0x13c>
            break;
 800327a:	bf00      	nop
        }
        Toggle_LED();
 800327c:	f7ff feac 	bl	8002fd8 <Toggle_LED>
        Delay_ms(100);
 8003280:	2064      	movs	r0, #100	; 0x64
 8003282:	f7ff fe9d 	bl	8002fc0 <Delay_ms>
    {
 8003286:	e798      	b.n	80031ba <runRadio+0x7a>
 8003288:	08004008 	.word	0x08004008
 800328c:	200001ba 	.word	0x200001ba
 8003290:	200001a0 	.word	0x200001a0
 8003294:	200001b4 	.word	0x200001b4
 8003298:	08003fe8 	.word	0x08003fe8

0800329c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_MspInit+0x5c>)
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <HAL_MspInit+0x5c>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6193      	str	r3, [r2, #24]
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_MspInit+0x5c>)
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <HAL_MspInit+0x5c>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <HAL_MspInit+0x5c>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	61d3      	str	r3, [r2, #28]
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_MspInit+0x5c>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_MspInit+0x60>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <HAL_MspInit+0x60>)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40010000 	.word	0x40010000

08003300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 0318 	add.w	r3, r7, #24
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <HAL_ADC_MspInit+0xe8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d15f      	bne.n	80033e0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003320:	4b32      	ldr	r3, [pc, #200]	; (80033ec <HAL_ADC_MspInit+0xec>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	4a31      	ldr	r2, [pc, #196]	; (80033ec <HAL_ADC_MspInit+0xec>)
 8003326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332a:	6193      	str	r3, [r2, #24]
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_ADC_MspInit+0xec>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003338:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <HAL_ADC_MspInit+0xec>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	4a2b      	ldr	r2, [pc, #172]	; (80033ec <HAL_ADC_MspInit+0xec>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6193      	str	r3, [r2, #24]
 8003344:	4b29      	ldr	r3, [pc, #164]	; (80033ec <HAL_ADC_MspInit+0xec>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003350:	4b26      	ldr	r3, [pc, #152]	; (80033ec <HAL_ADC_MspInit+0xec>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4a25      	ldr	r2, [pc, #148]	; (80033ec <HAL_ADC_MspInit+0xec>)
 8003356:	f043 0308 	orr.w	r3, r3, #8
 800335a:	6193      	str	r3, [r2, #24]
 800335c:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_ADC_MspInit+0xec>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6;
 8003368:	2363      	movs	r3, #99	; 0x63
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800336c:	2303      	movs	r3, #3
 800336e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003370:	f107 0318 	add.w	r3, r7, #24
 8003374:	4619      	mov	r1, r3
 8003376:	481e      	ldr	r0, [pc, #120]	; (80033f0 <HAL_ADC_MspInit+0xf0>)
 8003378:	f7fd fe3e 	bl	8000ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800337c:	2302      	movs	r3, #2
 800337e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003380:	2303      	movs	r3, #3
 8003382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	f107 0318 	add.w	r3, r7, #24
 8003388:	4619      	mov	r1, r3
 800338a:	481a      	ldr	r0, [pc, #104]	; (80033f4 <HAL_ADC_MspInit+0xf4>)
 800338c:	f7fd fe34 	bl	8000ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 8003392:	4a1a      	ldr	r2, [pc, #104]	; (80033fc <HAL_ADC_MspInit+0xfc>)
 8003394:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 8003398:	2200      	movs	r2, #0
 800339a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800339c:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 80033aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 80033b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 80033ba:	2220      	movs	r2, #32
 80033bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033c4:	480c      	ldr	r0, [pc, #48]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 80033c6:	f7fd fc29 	bl	8000c1c <HAL_DMA_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80033d0:	f7ff fb0e 	bl	80029f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 80033d8:	621a      	str	r2, [r3, #32]
 80033da:	4a07      	ldr	r2, [pc, #28]	; (80033f8 <HAL_ADC_MspInit+0xf8>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033e0:	bf00      	nop
 80033e2:	3728      	adds	r7, #40	; 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40012400 	.word	0x40012400
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40010800 	.word	0x40010800
 80033f4:	40010c00 	.word	0x40010c00
 80033f8:	200000c0 	.word	0x200000c0
 80033fc:	40020008 	.word	0x40020008

08003400 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <HAL_SPI_MspInit+0xa4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d13d      	bne.n	800349c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003420:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <HAL_SPI_MspInit+0xa8>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <HAL_SPI_MspInit+0xa8>)
 8003426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800342a:	6193      	str	r3, [r2, #24]
 800342c:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_SPI_MspInit+0xa8>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_SPI_MspInit+0xa8>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	4a1a      	ldr	r2, [pc, #104]	; (80034a8 <HAL_SPI_MspInit+0xa8>)
 800343e:	f043 0308 	orr.w	r3, r3, #8
 8003442:	6193      	str	r3, [r2, #24]
 8003444:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <HAL_SPI_MspInit+0xa8>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003450:	2328      	movs	r3, #40	; 0x28
 8003452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003458:	2303      	movs	r3, #3
 800345a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	4619      	mov	r1, r3
 8003462:	4812      	ldr	r0, [pc, #72]	; (80034ac <HAL_SPI_MspInit+0xac>)
 8003464:	f7fd fdc8 	bl	8000ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003468:	2310      	movs	r3, #16
 800346a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	4619      	mov	r1, r3
 800347a:	480c      	ldr	r0, [pc, #48]	; (80034ac <HAL_SPI_MspInit+0xac>)
 800347c:	f7fd fdbc 	bl	8000ff8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_SPI_MspInit+0xb0>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
 8003496:	4a06      	ldr	r2, [pc, #24]	; (80034b0 <HAL_SPI_MspInit+0xb0>)
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800349c:	bf00      	nop
 800349e:	3728      	adds	r7, #40	; 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40013000 	.word	0x40013000
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40010c00 	.word	0x40010c00
 80034b0:	40010000 	.word	0x40010000

080034b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 0310 	add.w	r3, r7, #16
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1b      	ldr	r2, [pc, #108]	; (800353c <HAL_UART_MspInit+0x88>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d12f      	bne.n	8003534 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_UART_MspInit+0x8c>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_UART_MspInit+0x8c>)
 80034da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034de:	61d3      	str	r3, [r2, #28]
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_UART_MspInit+0x8c>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ec:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_UART_MspInit+0x8c>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <HAL_UART_MspInit+0x8c>)
 80034f2:	f043 0304 	orr.w	r3, r3, #4
 80034f6:	6193      	str	r3, [r2, #24]
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_UART_MspInit+0x8c>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003504:	2304      	movs	r3, #4
 8003506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800350c:	2303      	movs	r3, #3
 800350e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003510:	f107 0310 	add.w	r3, r7, #16
 8003514:	4619      	mov	r1, r3
 8003516:	480b      	ldr	r0, [pc, #44]	; (8003544 <HAL_UART_MspInit+0x90>)
 8003518:	f7fd fd6e 	bl	8000ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800351c:	2308      	movs	r3, #8
 800351e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003528:	f107 0310 	add.w	r3, r7, #16
 800352c:	4619      	mov	r1, r3
 800352e:	4805      	ldr	r0, [pc, #20]	; (8003544 <HAL_UART_MspInit+0x90>)
 8003530:	f7fd fd62 	bl	8000ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003534:	bf00      	nop
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40004400 	.word	0x40004400
 8003540:	40021000 	.word	0x40021000
 8003544:	40010800 	.word	0x40010800

08003548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003558:	e7fe      	b.n	8003558 <HardFault_Handler+0x4>

0800355a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800355a:	b480      	push	{r7}
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800355e:	e7fe      	b.n	800355e <MemManage_Handler+0x4>

08003560 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003564:	e7fe      	b.n	8003564 <BusFault_Handler+0x4>

08003566 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800356a:	e7fe      	b.n	800356a <UsageFault_Handler+0x4>

0800356c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003594:	f7fc fe28 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}

0800359c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <DMA1_Channel1_IRQHandler+0x10>)
 80035a2:	f7fd fbf5 	bl	8000d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200000c0 	.word	0x200000c0

080035b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <_sbrk+0x50>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <_sbrk+0x16>
		heap_end = &end;
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <_sbrk+0x50>)
 80035c2:	4a10      	ldr	r2, [pc, #64]	; (8003604 <_sbrk+0x54>)
 80035c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <_sbrk+0x50>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <_sbrk+0x50>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	466a      	mov	r2, sp
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d907      	bls.n	80035ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80035da:	f000 f841 	bl	8003660 <__errno>
 80035de:	4603      	mov	r3, r0
 80035e0:	220c      	movs	r2, #12
 80035e2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
 80035e8:	e006      	b.n	80035f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <_sbrk+0x50>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a03      	ldr	r2, [pc, #12]	; (8003600 <_sbrk+0x50>)
 80035f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	200001bc 	.word	0x200001bc
 8003604:	200001d0 	.word	0x200001d0

08003608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003616:	490d      	ldr	r1, [pc, #52]	; (800364c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003618:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800361c:	e002      	b.n	8003624 <LoopCopyDataInit>

0800361e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800361e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003622:	3304      	adds	r3, #4

08003624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003628:	d3f9      	bcc.n	800361e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800362c:	4c0a      	ldr	r4, [pc, #40]	; (8003658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003630:	e001      	b.n	8003636 <LoopFillZerobss>

08003632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003634:	3204      	adds	r2, #4

08003636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003638:	d3fb      	bcc.n	8003632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800363a:	f7ff ffe5 	bl	8003608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800363e:	f000 f815 	bl	800366c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003642:	f7fe ffe3 	bl	800260c <main>
  bx lr
 8003646:	4770      	bx	lr
  ldr r0, =_sdata
 8003648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800364c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003650:	08004060 	.word	0x08004060
  ldr r2, =_sbss
 8003654:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003658:	200001d0 	.word	0x200001d0

0800365c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800365c:	e7fe      	b.n	800365c <ADC1_2_IRQHandler>
	...

08003660 <__errno>:
 8003660:	4b01      	ldr	r3, [pc, #4]	; (8003668 <__errno+0x8>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	2000000c 	.word	0x2000000c

0800366c <__libc_init_array>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	2600      	movs	r6, #0
 8003670:	4d0c      	ldr	r5, [pc, #48]	; (80036a4 <__libc_init_array+0x38>)
 8003672:	4c0d      	ldr	r4, [pc, #52]	; (80036a8 <__libc_init_array+0x3c>)
 8003674:	1b64      	subs	r4, r4, r5
 8003676:	10a4      	asrs	r4, r4, #2
 8003678:	42a6      	cmp	r6, r4
 800367a:	d109      	bne.n	8003690 <__libc_init_array+0x24>
 800367c:	f000 fc9c 	bl	8003fb8 <_init>
 8003680:	2600      	movs	r6, #0
 8003682:	4d0a      	ldr	r5, [pc, #40]	; (80036ac <__libc_init_array+0x40>)
 8003684:	4c0a      	ldr	r4, [pc, #40]	; (80036b0 <__libc_init_array+0x44>)
 8003686:	1b64      	subs	r4, r4, r5
 8003688:	10a4      	asrs	r4, r4, #2
 800368a:	42a6      	cmp	r6, r4
 800368c:	d105      	bne.n	800369a <__libc_init_array+0x2e>
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	f855 3b04 	ldr.w	r3, [r5], #4
 8003694:	4798      	blx	r3
 8003696:	3601      	adds	r6, #1
 8003698:	e7ee      	b.n	8003678 <__libc_init_array+0xc>
 800369a:	f855 3b04 	ldr.w	r3, [r5], #4
 800369e:	4798      	blx	r3
 80036a0:	3601      	adds	r6, #1
 80036a2:	e7f2      	b.n	800368a <__libc_init_array+0x1e>
 80036a4:	08004058 	.word	0x08004058
 80036a8:	08004058 	.word	0x08004058
 80036ac:	08004058 	.word	0x08004058
 80036b0:	0800405c 	.word	0x0800405c

080036b4 <memset>:
 80036b4:	4603      	mov	r3, r0
 80036b6:	4402      	add	r2, r0
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d100      	bne.n	80036be <memset+0xa>
 80036bc:	4770      	bx	lr
 80036be:	f803 1b01 	strb.w	r1, [r3], #1
 80036c2:	e7f9      	b.n	80036b8 <memset+0x4>

080036c4 <siprintf>:
 80036c4:	b40e      	push	{r1, r2, r3}
 80036c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036ca:	b500      	push	{lr}
 80036cc:	b09c      	sub	sp, #112	; 0x70
 80036ce:	ab1d      	add	r3, sp, #116	; 0x74
 80036d0:	9002      	str	r0, [sp, #8]
 80036d2:	9006      	str	r0, [sp, #24]
 80036d4:	9107      	str	r1, [sp, #28]
 80036d6:	9104      	str	r1, [sp, #16]
 80036d8:	4808      	ldr	r0, [pc, #32]	; (80036fc <siprintf+0x38>)
 80036da:	4909      	ldr	r1, [pc, #36]	; (8003700 <siprintf+0x3c>)
 80036dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80036e0:	9105      	str	r1, [sp, #20]
 80036e2:	6800      	ldr	r0, [r0, #0]
 80036e4:	a902      	add	r1, sp, #8
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	f000 f868 	bl	80037bc <_svfiprintf_r>
 80036ec:	2200      	movs	r2, #0
 80036ee:	9b02      	ldr	r3, [sp, #8]
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	b01c      	add	sp, #112	; 0x70
 80036f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f8:	b003      	add	sp, #12
 80036fa:	4770      	bx	lr
 80036fc:	2000000c 	.word	0x2000000c
 8003700:	ffff0208 	.word	0xffff0208

08003704 <__ssputs_r>:
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	688e      	ldr	r6, [r1, #8]
 800370a:	4682      	mov	sl, r0
 800370c:	429e      	cmp	r6, r3
 800370e:	460c      	mov	r4, r1
 8003710:	4690      	mov	r8, r2
 8003712:	461f      	mov	r7, r3
 8003714:	d838      	bhi.n	8003788 <__ssputs_r+0x84>
 8003716:	898a      	ldrh	r2, [r1, #12]
 8003718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800371c:	d032      	beq.n	8003784 <__ssputs_r+0x80>
 800371e:	6825      	ldr	r5, [r4, #0]
 8003720:	6909      	ldr	r1, [r1, #16]
 8003722:	3301      	adds	r3, #1
 8003724:	eba5 0901 	sub.w	r9, r5, r1
 8003728:	6965      	ldr	r5, [r4, #20]
 800372a:	444b      	add	r3, r9
 800372c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003734:	106d      	asrs	r5, r5, #1
 8003736:	429d      	cmp	r5, r3
 8003738:	bf38      	it	cc
 800373a:	461d      	movcc	r5, r3
 800373c:	0553      	lsls	r3, r2, #21
 800373e:	d531      	bpl.n	80037a4 <__ssputs_r+0xa0>
 8003740:	4629      	mov	r1, r5
 8003742:	f000 fb6f 	bl	8003e24 <_malloc_r>
 8003746:	4606      	mov	r6, r0
 8003748:	b950      	cbnz	r0, 8003760 <__ssputs_r+0x5c>
 800374a:	230c      	movs	r3, #12
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	f8ca 3000 	str.w	r3, [sl]
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800375a:	81a3      	strh	r3, [r4, #12]
 800375c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003760:	464a      	mov	r2, r9
 8003762:	6921      	ldr	r1, [r4, #16]
 8003764:	f000 face 	bl	8003d04 <memcpy>
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800376e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003772:	81a3      	strh	r3, [r4, #12]
 8003774:	6126      	str	r6, [r4, #16]
 8003776:	444e      	add	r6, r9
 8003778:	6026      	str	r6, [r4, #0]
 800377a:	463e      	mov	r6, r7
 800377c:	6165      	str	r5, [r4, #20]
 800377e:	eba5 0509 	sub.w	r5, r5, r9
 8003782:	60a5      	str	r5, [r4, #8]
 8003784:	42be      	cmp	r6, r7
 8003786:	d900      	bls.n	800378a <__ssputs_r+0x86>
 8003788:	463e      	mov	r6, r7
 800378a:	4632      	mov	r2, r6
 800378c:	4641      	mov	r1, r8
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	f000 fac6 	bl	8003d20 <memmove>
 8003794:	68a3      	ldr	r3, [r4, #8]
 8003796:	2000      	movs	r0, #0
 8003798:	1b9b      	subs	r3, r3, r6
 800379a:	60a3      	str	r3, [r4, #8]
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	4433      	add	r3, r6
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	e7db      	b.n	800375c <__ssputs_r+0x58>
 80037a4:	462a      	mov	r2, r5
 80037a6:	f000 fbb1 	bl	8003f0c <_realloc_r>
 80037aa:	4606      	mov	r6, r0
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d1e1      	bne.n	8003774 <__ssputs_r+0x70>
 80037b0:	4650      	mov	r0, sl
 80037b2:	6921      	ldr	r1, [r4, #16]
 80037b4:	f000 face 	bl	8003d54 <_free_r>
 80037b8:	e7c7      	b.n	800374a <__ssputs_r+0x46>
	...

080037bc <_svfiprintf_r>:
 80037bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c0:	4698      	mov	r8, r3
 80037c2:	898b      	ldrh	r3, [r1, #12]
 80037c4:	4607      	mov	r7, r0
 80037c6:	061b      	lsls	r3, r3, #24
 80037c8:	460d      	mov	r5, r1
 80037ca:	4614      	mov	r4, r2
 80037cc:	b09d      	sub	sp, #116	; 0x74
 80037ce:	d50e      	bpl.n	80037ee <_svfiprintf_r+0x32>
 80037d0:	690b      	ldr	r3, [r1, #16]
 80037d2:	b963      	cbnz	r3, 80037ee <_svfiprintf_r+0x32>
 80037d4:	2140      	movs	r1, #64	; 0x40
 80037d6:	f000 fb25 	bl	8003e24 <_malloc_r>
 80037da:	6028      	str	r0, [r5, #0]
 80037dc:	6128      	str	r0, [r5, #16]
 80037de:	b920      	cbnz	r0, 80037ea <_svfiprintf_r+0x2e>
 80037e0:	230c      	movs	r3, #12
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	e0d1      	b.n	800398e <_svfiprintf_r+0x1d2>
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	616b      	str	r3, [r5, #20]
 80037ee:	2300      	movs	r3, #0
 80037f0:	9309      	str	r3, [sp, #36]	; 0x24
 80037f2:	2320      	movs	r3, #32
 80037f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037f8:	2330      	movs	r3, #48	; 0x30
 80037fa:	f04f 0901 	mov.w	r9, #1
 80037fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003802:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80039a8 <_svfiprintf_r+0x1ec>
 8003806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800380a:	4623      	mov	r3, r4
 800380c:	469a      	mov	sl, r3
 800380e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003812:	b10a      	cbz	r2, 8003818 <_svfiprintf_r+0x5c>
 8003814:	2a25      	cmp	r2, #37	; 0x25
 8003816:	d1f9      	bne.n	800380c <_svfiprintf_r+0x50>
 8003818:	ebba 0b04 	subs.w	fp, sl, r4
 800381c:	d00b      	beq.n	8003836 <_svfiprintf_r+0x7a>
 800381e:	465b      	mov	r3, fp
 8003820:	4622      	mov	r2, r4
 8003822:	4629      	mov	r1, r5
 8003824:	4638      	mov	r0, r7
 8003826:	f7ff ff6d 	bl	8003704 <__ssputs_r>
 800382a:	3001      	adds	r0, #1
 800382c:	f000 80aa 	beq.w	8003984 <_svfiprintf_r+0x1c8>
 8003830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003832:	445a      	add	r2, fp
 8003834:	9209      	str	r2, [sp, #36]	; 0x24
 8003836:	f89a 3000 	ldrb.w	r3, [sl]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80a2 	beq.w	8003984 <_svfiprintf_r+0x1c8>
 8003840:	2300      	movs	r3, #0
 8003842:	f04f 32ff 	mov.w	r2, #4294967295
 8003846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800384a:	f10a 0a01 	add.w	sl, sl, #1
 800384e:	9304      	str	r3, [sp, #16]
 8003850:	9307      	str	r3, [sp, #28]
 8003852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003856:	931a      	str	r3, [sp, #104]	; 0x68
 8003858:	4654      	mov	r4, sl
 800385a:	2205      	movs	r2, #5
 800385c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003860:	4851      	ldr	r0, [pc, #324]	; (80039a8 <_svfiprintf_r+0x1ec>)
 8003862:	f000 fa41 	bl	8003ce8 <memchr>
 8003866:	9a04      	ldr	r2, [sp, #16]
 8003868:	b9d8      	cbnz	r0, 80038a2 <_svfiprintf_r+0xe6>
 800386a:	06d0      	lsls	r0, r2, #27
 800386c:	bf44      	itt	mi
 800386e:	2320      	movmi	r3, #32
 8003870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003874:	0711      	lsls	r1, r2, #28
 8003876:	bf44      	itt	mi
 8003878:	232b      	movmi	r3, #43	; 0x2b
 800387a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800387e:	f89a 3000 	ldrb.w	r3, [sl]
 8003882:	2b2a      	cmp	r3, #42	; 0x2a
 8003884:	d015      	beq.n	80038b2 <_svfiprintf_r+0xf6>
 8003886:	4654      	mov	r4, sl
 8003888:	2000      	movs	r0, #0
 800388a:	f04f 0c0a 	mov.w	ip, #10
 800388e:	9a07      	ldr	r2, [sp, #28]
 8003890:	4621      	mov	r1, r4
 8003892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003896:	3b30      	subs	r3, #48	; 0x30
 8003898:	2b09      	cmp	r3, #9
 800389a:	d94e      	bls.n	800393a <_svfiprintf_r+0x17e>
 800389c:	b1b0      	cbz	r0, 80038cc <_svfiprintf_r+0x110>
 800389e:	9207      	str	r2, [sp, #28]
 80038a0:	e014      	b.n	80038cc <_svfiprintf_r+0x110>
 80038a2:	eba0 0308 	sub.w	r3, r0, r8
 80038a6:	fa09 f303 	lsl.w	r3, r9, r3
 80038aa:	4313      	orrs	r3, r2
 80038ac:	46a2      	mov	sl, r4
 80038ae:	9304      	str	r3, [sp, #16]
 80038b0:	e7d2      	b.n	8003858 <_svfiprintf_r+0x9c>
 80038b2:	9b03      	ldr	r3, [sp, #12]
 80038b4:	1d19      	adds	r1, r3, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	9103      	str	r1, [sp, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bfbb      	ittet	lt
 80038be:	425b      	neglt	r3, r3
 80038c0:	f042 0202 	orrlt.w	r2, r2, #2
 80038c4:	9307      	strge	r3, [sp, #28]
 80038c6:	9307      	strlt	r3, [sp, #28]
 80038c8:	bfb8      	it	lt
 80038ca:	9204      	strlt	r2, [sp, #16]
 80038cc:	7823      	ldrb	r3, [r4, #0]
 80038ce:	2b2e      	cmp	r3, #46	; 0x2e
 80038d0:	d10c      	bne.n	80038ec <_svfiprintf_r+0x130>
 80038d2:	7863      	ldrb	r3, [r4, #1]
 80038d4:	2b2a      	cmp	r3, #42	; 0x2a
 80038d6:	d135      	bne.n	8003944 <_svfiprintf_r+0x188>
 80038d8:	9b03      	ldr	r3, [sp, #12]
 80038da:	3402      	adds	r4, #2
 80038dc:	1d1a      	adds	r2, r3, #4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	9203      	str	r2, [sp, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bfb8      	it	lt
 80038e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80038ea:	9305      	str	r3, [sp, #20]
 80038ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80039ac <_svfiprintf_r+0x1f0>
 80038f0:	2203      	movs	r2, #3
 80038f2:	4650      	mov	r0, sl
 80038f4:	7821      	ldrb	r1, [r4, #0]
 80038f6:	f000 f9f7 	bl	8003ce8 <memchr>
 80038fa:	b140      	cbz	r0, 800390e <_svfiprintf_r+0x152>
 80038fc:	2340      	movs	r3, #64	; 0x40
 80038fe:	eba0 000a 	sub.w	r0, r0, sl
 8003902:	fa03 f000 	lsl.w	r0, r3, r0
 8003906:	9b04      	ldr	r3, [sp, #16]
 8003908:	3401      	adds	r4, #1
 800390a:	4303      	orrs	r3, r0
 800390c:	9304      	str	r3, [sp, #16]
 800390e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003912:	2206      	movs	r2, #6
 8003914:	4826      	ldr	r0, [pc, #152]	; (80039b0 <_svfiprintf_r+0x1f4>)
 8003916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800391a:	f000 f9e5 	bl	8003ce8 <memchr>
 800391e:	2800      	cmp	r0, #0
 8003920:	d038      	beq.n	8003994 <_svfiprintf_r+0x1d8>
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <_svfiprintf_r+0x1f8>)
 8003924:	bb1b      	cbnz	r3, 800396e <_svfiprintf_r+0x1b2>
 8003926:	9b03      	ldr	r3, [sp, #12]
 8003928:	3307      	adds	r3, #7
 800392a:	f023 0307 	bic.w	r3, r3, #7
 800392e:	3308      	adds	r3, #8
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003934:	4433      	add	r3, r6
 8003936:	9309      	str	r3, [sp, #36]	; 0x24
 8003938:	e767      	b.n	800380a <_svfiprintf_r+0x4e>
 800393a:	460c      	mov	r4, r1
 800393c:	2001      	movs	r0, #1
 800393e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003942:	e7a5      	b.n	8003890 <_svfiprintf_r+0xd4>
 8003944:	2300      	movs	r3, #0
 8003946:	f04f 0c0a 	mov.w	ip, #10
 800394a:	4619      	mov	r1, r3
 800394c:	3401      	adds	r4, #1
 800394e:	9305      	str	r3, [sp, #20]
 8003950:	4620      	mov	r0, r4
 8003952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003956:	3a30      	subs	r2, #48	; 0x30
 8003958:	2a09      	cmp	r2, #9
 800395a:	d903      	bls.n	8003964 <_svfiprintf_r+0x1a8>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0c5      	beq.n	80038ec <_svfiprintf_r+0x130>
 8003960:	9105      	str	r1, [sp, #20]
 8003962:	e7c3      	b.n	80038ec <_svfiprintf_r+0x130>
 8003964:	4604      	mov	r4, r0
 8003966:	2301      	movs	r3, #1
 8003968:	fb0c 2101 	mla	r1, ip, r1, r2
 800396c:	e7f0      	b.n	8003950 <_svfiprintf_r+0x194>
 800396e:	ab03      	add	r3, sp, #12
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	462a      	mov	r2, r5
 8003974:	4638      	mov	r0, r7
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <_svfiprintf_r+0x1fc>)
 8003978:	a904      	add	r1, sp, #16
 800397a:	f3af 8000 	nop.w
 800397e:	1c42      	adds	r2, r0, #1
 8003980:	4606      	mov	r6, r0
 8003982:	d1d6      	bne.n	8003932 <_svfiprintf_r+0x176>
 8003984:	89ab      	ldrh	r3, [r5, #12]
 8003986:	065b      	lsls	r3, r3, #25
 8003988:	f53f af2c 	bmi.w	80037e4 <_svfiprintf_r+0x28>
 800398c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800398e:	b01d      	add	sp, #116	; 0x74
 8003990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003994:	ab03      	add	r3, sp, #12
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	462a      	mov	r2, r5
 800399a:	4638      	mov	r0, r7
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <_svfiprintf_r+0x1fc>)
 800399e:	a904      	add	r1, sp, #16
 80039a0:	f000 f87c 	bl	8003a9c <_printf_i>
 80039a4:	e7eb      	b.n	800397e <_svfiprintf_r+0x1c2>
 80039a6:	bf00      	nop
 80039a8:	08004024 	.word	0x08004024
 80039ac:	0800402a 	.word	0x0800402a
 80039b0:	0800402e 	.word	0x0800402e
 80039b4:	00000000 	.word	0x00000000
 80039b8:	08003705 	.word	0x08003705

080039bc <_printf_common>:
 80039bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039c0:	4616      	mov	r6, r2
 80039c2:	4699      	mov	r9, r3
 80039c4:	688a      	ldr	r2, [r1, #8]
 80039c6:	690b      	ldr	r3, [r1, #16]
 80039c8:	4607      	mov	r7, r0
 80039ca:	4293      	cmp	r3, r2
 80039cc:	bfb8      	it	lt
 80039ce:	4613      	movlt	r3, r2
 80039d0:	6033      	str	r3, [r6, #0]
 80039d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039d6:	460c      	mov	r4, r1
 80039d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039dc:	b10a      	cbz	r2, 80039e2 <_printf_common+0x26>
 80039de:	3301      	adds	r3, #1
 80039e0:	6033      	str	r3, [r6, #0]
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	0699      	lsls	r1, r3, #26
 80039e6:	bf42      	ittt	mi
 80039e8:	6833      	ldrmi	r3, [r6, #0]
 80039ea:	3302      	addmi	r3, #2
 80039ec:	6033      	strmi	r3, [r6, #0]
 80039ee:	6825      	ldr	r5, [r4, #0]
 80039f0:	f015 0506 	ands.w	r5, r5, #6
 80039f4:	d106      	bne.n	8003a04 <_printf_common+0x48>
 80039f6:	f104 0a19 	add.w	sl, r4, #25
 80039fa:	68e3      	ldr	r3, [r4, #12]
 80039fc:	6832      	ldr	r2, [r6, #0]
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	42ab      	cmp	r3, r5
 8003a02:	dc28      	bgt.n	8003a56 <_printf_common+0x9a>
 8003a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a08:	1e13      	subs	r3, r2, #0
 8003a0a:	6822      	ldr	r2, [r4, #0]
 8003a0c:	bf18      	it	ne
 8003a0e:	2301      	movne	r3, #1
 8003a10:	0692      	lsls	r2, r2, #26
 8003a12:	d42d      	bmi.n	8003a70 <_printf_common+0xb4>
 8003a14:	4649      	mov	r1, r9
 8003a16:	4638      	mov	r0, r7
 8003a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a1c:	47c0      	blx	r8
 8003a1e:	3001      	adds	r0, #1
 8003a20:	d020      	beq.n	8003a64 <_printf_common+0xa8>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	68e5      	ldr	r5, [r4, #12]
 8003a26:	f003 0306 	and.w	r3, r3, #6
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	bf18      	it	ne
 8003a2e:	2500      	movne	r5, #0
 8003a30:	6832      	ldr	r2, [r6, #0]
 8003a32:	f04f 0600 	mov.w	r6, #0
 8003a36:	68a3      	ldr	r3, [r4, #8]
 8003a38:	bf08      	it	eq
 8003a3a:	1aad      	subeq	r5, r5, r2
 8003a3c:	6922      	ldr	r2, [r4, #16]
 8003a3e:	bf08      	it	eq
 8003a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a44:	4293      	cmp	r3, r2
 8003a46:	bfc4      	itt	gt
 8003a48:	1a9b      	subgt	r3, r3, r2
 8003a4a:	18ed      	addgt	r5, r5, r3
 8003a4c:	341a      	adds	r4, #26
 8003a4e:	42b5      	cmp	r5, r6
 8003a50:	d11a      	bne.n	8003a88 <_printf_common+0xcc>
 8003a52:	2000      	movs	r0, #0
 8003a54:	e008      	b.n	8003a68 <_printf_common+0xac>
 8003a56:	2301      	movs	r3, #1
 8003a58:	4652      	mov	r2, sl
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	47c0      	blx	r8
 8003a60:	3001      	adds	r0, #1
 8003a62:	d103      	bne.n	8003a6c <_printf_common+0xb0>
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6c:	3501      	adds	r5, #1
 8003a6e:	e7c4      	b.n	80039fa <_printf_common+0x3e>
 8003a70:	2030      	movs	r0, #48	; 0x30
 8003a72:	18e1      	adds	r1, r4, r3
 8003a74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a7e:	4422      	add	r2, r4
 8003a80:	3302      	adds	r3, #2
 8003a82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a86:	e7c5      	b.n	8003a14 <_printf_common+0x58>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	4638      	mov	r0, r7
 8003a90:	47c0      	blx	r8
 8003a92:	3001      	adds	r0, #1
 8003a94:	d0e6      	beq.n	8003a64 <_printf_common+0xa8>
 8003a96:	3601      	adds	r6, #1
 8003a98:	e7d9      	b.n	8003a4e <_printf_common+0x92>
	...

08003a9c <_printf_i>:
 8003a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa0:	7e0f      	ldrb	r7, [r1, #24]
 8003aa2:	4691      	mov	r9, r2
 8003aa4:	2f78      	cmp	r7, #120	; 0x78
 8003aa6:	4680      	mov	r8, r0
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	469a      	mov	sl, r3
 8003aac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003aae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ab2:	d807      	bhi.n	8003ac4 <_printf_i+0x28>
 8003ab4:	2f62      	cmp	r7, #98	; 0x62
 8003ab6:	d80a      	bhi.n	8003ace <_printf_i+0x32>
 8003ab8:	2f00      	cmp	r7, #0
 8003aba:	f000 80d9 	beq.w	8003c70 <_printf_i+0x1d4>
 8003abe:	2f58      	cmp	r7, #88	; 0x58
 8003ac0:	f000 80a4 	beq.w	8003c0c <_printf_i+0x170>
 8003ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003acc:	e03a      	b.n	8003b44 <_printf_i+0xa8>
 8003ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ad2:	2b15      	cmp	r3, #21
 8003ad4:	d8f6      	bhi.n	8003ac4 <_printf_i+0x28>
 8003ad6:	a101      	add	r1, pc, #4	; (adr r1, 8003adc <_printf_i+0x40>)
 8003ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003adc:	08003b35 	.word	0x08003b35
 8003ae0:	08003b49 	.word	0x08003b49
 8003ae4:	08003ac5 	.word	0x08003ac5
 8003ae8:	08003ac5 	.word	0x08003ac5
 8003aec:	08003ac5 	.word	0x08003ac5
 8003af0:	08003ac5 	.word	0x08003ac5
 8003af4:	08003b49 	.word	0x08003b49
 8003af8:	08003ac5 	.word	0x08003ac5
 8003afc:	08003ac5 	.word	0x08003ac5
 8003b00:	08003ac5 	.word	0x08003ac5
 8003b04:	08003ac5 	.word	0x08003ac5
 8003b08:	08003c57 	.word	0x08003c57
 8003b0c:	08003b79 	.word	0x08003b79
 8003b10:	08003c39 	.word	0x08003c39
 8003b14:	08003ac5 	.word	0x08003ac5
 8003b18:	08003ac5 	.word	0x08003ac5
 8003b1c:	08003c79 	.word	0x08003c79
 8003b20:	08003ac5 	.word	0x08003ac5
 8003b24:	08003b79 	.word	0x08003b79
 8003b28:	08003ac5 	.word	0x08003ac5
 8003b2c:	08003ac5 	.word	0x08003ac5
 8003b30:	08003c41 	.word	0x08003c41
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	1d1a      	adds	r2, r3, #4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	602a      	str	r2, [r5, #0]
 8003b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0a4      	b.n	8003c92 <_printf_i+0x1f6>
 8003b48:	6820      	ldr	r0, [r4, #0]
 8003b4a:	6829      	ldr	r1, [r5, #0]
 8003b4c:	0606      	lsls	r6, r0, #24
 8003b4e:	f101 0304 	add.w	r3, r1, #4
 8003b52:	d50a      	bpl.n	8003b6a <_printf_i+0xce>
 8003b54:	680e      	ldr	r6, [r1, #0]
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	2e00      	cmp	r6, #0
 8003b5a:	da03      	bge.n	8003b64 <_printf_i+0xc8>
 8003b5c:	232d      	movs	r3, #45	; 0x2d
 8003b5e:	4276      	negs	r6, r6
 8003b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b64:	230a      	movs	r3, #10
 8003b66:	485e      	ldr	r0, [pc, #376]	; (8003ce0 <_printf_i+0x244>)
 8003b68:	e019      	b.n	8003b9e <_printf_i+0x102>
 8003b6a:	680e      	ldr	r6, [r1, #0]
 8003b6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b70:	602b      	str	r3, [r5, #0]
 8003b72:	bf18      	it	ne
 8003b74:	b236      	sxthne	r6, r6
 8003b76:	e7ef      	b.n	8003b58 <_printf_i+0xbc>
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	6820      	ldr	r0, [r4, #0]
 8003b7c:	1d19      	adds	r1, r3, #4
 8003b7e:	6029      	str	r1, [r5, #0]
 8003b80:	0601      	lsls	r1, r0, #24
 8003b82:	d501      	bpl.n	8003b88 <_printf_i+0xec>
 8003b84:	681e      	ldr	r6, [r3, #0]
 8003b86:	e002      	b.n	8003b8e <_printf_i+0xf2>
 8003b88:	0646      	lsls	r6, r0, #25
 8003b8a:	d5fb      	bpl.n	8003b84 <_printf_i+0xe8>
 8003b8c:	881e      	ldrh	r6, [r3, #0]
 8003b8e:	2f6f      	cmp	r7, #111	; 0x6f
 8003b90:	bf0c      	ite	eq
 8003b92:	2308      	moveq	r3, #8
 8003b94:	230a      	movne	r3, #10
 8003b96:	4852      	ldr	r0, [pc, #328]	; (8003ce0 <_printf_i+0x244>)
 8003b98:	2100      	movs	r1, #0
 8003b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b9e:	6865      	ldr	r5, [r4, #4]
 8003ba0:	2d00      	cmp	r5, #0
 8003ba2:	bfa8      	it	ge
 8003ba4:	6821      	ldrge	r1, [r4, #0]
 8003ba6:	60a5      	str	r5, [r4, #8]
 8003ba8:	bfa4      	itt	ge
 8003baa:	f021 0104 	bicge.w	r1, r1, #4
 8003bae:	6021      	strge	r1, [r4, #0]
 8003bb0:	b90e      	cbnz	r6, 8003bb6 <_printf_i+0x11a>
 8003bb2:	2d00      	cmp	r5, #0
 8003bb4:	d04d      	beq.n	8003c52 <_printf_i+0x1b6>
 8003bb6:	4615      	mov	r5, r2
 8003bb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bbc:	fb03 6711 	mls	r7, r3, r1, r6
 8003bc0:	5dc7      	ldrb	r7, [r0, r7]
 8003bc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bc6:	4637      	mov	r7, r6
 8003bc8:	42bb      	cmp	r3, r7
 8003bca:	460e      	mov	r6, r1
 8003bcc:	d9f4      	bls.n	8003bb8 <_printf_i+0x11c>
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d10b      	bne.n	8003bea <_printf_i+0x14e>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	07de      	lsls	r6, r3, #31
 8003bd6:	d508      	bpl.n	8003bea <_printf_i+0x14e>
 8003bd8:	6923      	ldr	r3, [r4, #16]
 8003bda:	6861      	ldr	r1, [r4, #4]
 8003bdc:	4299      	cmp	r1, r3
 8003bde:	bfde      	ittt	le
 8003be0:	2330      	movle	r3, #48	; 0x30
 8003be2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003be6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bea:	1b52      	subs	r2, r2, r5
 8003bec:	6122      	str	r2, [r4, #16]
 8003bee:	464b      	mov	r3, r9
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	f8cd a000 	str.w	sl, [sp]
 8003bf8:	aa03      	add	r2, sp, #12
 8003bfa:	f7ff fedf 	bl	80039bc <_printf_common>
 8003bfe:	3001      	adds	r0, #1
 8003c00:	d14c      	bne.n	8003c9c <_printf_i+0x200>
 8003c02:	f04f 30ff 	mov.w	r0, #4294967295
 8003c06:	b004      	add	sp, #16
 8003c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c0c:	4834      	ldr	r0, [pc, #208]	; (8003ce0 <_printf_i+0x244>)
 8003c0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c12:	6829      	ldr	r1, [r5, #0]
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c1a:	6029      	str	r1, [r5, #0]
 8003c1c:	061d      	lsls	r5, r3, #24
 8003c1e:	d514      	bpl.n	8003c4a <_printf_i+0x1ae>
 8003c20:	07df      	lsls	r7, r3, #31
 8003c22:	bf44      	itt	mi
 8003c24:	f043 0320 	orrmi.w	r3, r3, #32
 8003c28:	6023      	strmi	r3, [r4, #0]
 8003c2a:	b91e      	cbnz	r6, 8003c34 <_printf_i+0x198>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	f023 0320 	bic.w	r3, r3, #32
 8003c32:	6023      	str	r3, [r4, #0]
 8003c34:	2310      	movs	r3, #16
 8003c36:	e7af      	b.n	8003b98 <_printf_i+0xfc>
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	f043 0320 	orr.w	r3, r3, #32
 8003c3e:	6023      	str	r3, [r4, #0]
 8003c40:	2378      	movs	r3, #120	; 0x78
 8003c42:	4828      	ldr	r0, [pc, #160]	; (8003ce4 <_printf_i+0x248>)
 8003c44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c48:	e7e3      	b.n	8003c12 <_printf_i+0x176>
 8003c4a:	0659      	lsls	r1, r3, #25
 8003c4c:	bf48      	it	mi
 8003c4e:	b2b6      	uxthmi	r6, r6
 8003c50:	e7e6      	b.n	8003c20 <_printf_i+0x184>
 8003c52:	4615      	mov	r5, r2
 8003c54:	e7bb      	b.n	8003bce <_printf_i+0x132>
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	6826      	ldr	r6, [r4, #0]
 8003c5a:	1d18      	adds	r0, r3, #4
 8003c5c:	6961      	ldr	r1, [r4, #20]
 8003c5e:	6028      	str	r0, [r5, #0]
 8003c60:	0635      	lsls	r5, r6, #24
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	d501      	bpl.n	8003c6a <_printf_i+0x1ce>
 8003c66:	6019      	str	r1, [r3, #0]
 8003c68:	e002      	b.n	8003c70 <_printf_i+0x1d4>
 8003c6a:	0670      	lsls	r0, r6, #25
 8003c6c:	d5fb      	bpl.n	8003c66 <_printf_i+0x1ca>
 8003c6e:	8019      	strh	r1, [r3, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	4615      	mov	r5, r2
 8003c74:	6123      	str	r3, [r4, #16]
 8003c76:	e7ba      	b.n	8003bee <_printf_i+0x152>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	602a      	str	r2, [r5, #0]
 8003c80:	681d      	ldr	r5, [r3, #0]
 8003c82:	6862      	ldr	r2, [r4, #4]
 8003c84:	4628      	mov	r0, r5
 8003c86:	f000 f82f 	bl	8003ce8 <memchr>
 8003c8a:	b108      	cbz	r0, 8003c90 <_printf_i+0x1f4>
 8003c8c:	1b40      	subs	r0, r0, r5
 8003c8e:	6060      	str	r0, [r4, #4]
 8003c90:	6863      	ldr	r3, [r4, #4]
 8003c92:	6123      	str	r3, [r4, #16]
 8003c94:	2300      	movs	r3, #0
 8003c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c9a:	e7a8      	b.n	8003bee <_printf_i+0x152>
 8003c9c:	462a      	mov	r2, r5
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	6923      	ldr	r3, [r4, #16]
 8003ca4:	47d0      	blx	sl
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d0ab      	beq.n	8003c02 <_printf_i+0x166>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	079b      	lsls	r3, r3, #30
 8003cae:	d413      	bmi.n	8003cd8 <_printf_i+0x23c>
 8003cb0:	68e0      	ldr	r0, [r4, #12]
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	4298      	cmp	r0, r3
 8003cb6:	bfb8      	it	lt
 8003cb8:	4618      	movlt	r0, r3
 8003cba:	e7a4      	b.n	8003c06 <_printf_i+0x16a>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	47d0      	blx	sl
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d09b      	beq.n	8003c02 <_printf_i+0x166>
 8003cca:	3501      	adds	r5, #1
 8003ccc:	68e3      	ldr	r3, [r4, #12]
 8003cce:	9903      	ldr	r1, [sp, #12]
 8003cd0:	1a5b      	subs	r3, r3, r1
 8003cd2:	42ab      	cmp	r3, r5
 8003cd4:	dcf2      	bgt.n	8003cbc <_printf_i+0x220>
 8003cd6:	e7eb      	b.n	8003cb0 <_printf_i+0x214>
 8003cd8:	2500      	movs	r5, #0
 8003cda:	f104 0619 	add.w	r6, r4, #25
 8003cde:	e7f5      	b.n	8003ccc <_printf_i+0x230>
 8003ce0:	08004035 	.word	0x08004035
 8003ce4:	08004046 	.word	0x08004046

08003ce8 <memchr>:
 8003ce8:	4603      	mov	r3, r0
 8003cea:	b510      	push	{r4, lr}
 8003cec:	b2c9      	uxtb	r1, r1
 8003cee:	4402      	add	r2, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	d101      	bne.n	8003cfa <memchr+0x12>
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	e003      	b.n	8003d02 <memchr+0x1a>
 8003cfa:	7804      	ldrb	r4, [r0, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	428c      	cmp	r4, r1
 8003d00:	d1f6      	bne.n	8003cf0 <memchr+0x8>
 8003d02:	bd10      	pop	{r4, pc}

08003d04 <memcpy>:
 8003d04:	440a      	add	r2, r1
 8003d06:	4291      	cmp	r1, r2
 8003d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d0c:	d100      	bne.n	8003d10 <memcpy+0xc>
 8003d0e:	4770      	bx	lr
 8003d10:	b510      	push	{r4, lr}
 8003d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d16:	4291      	cmp	r1, r2
 8003d18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d1c:	d1f9      	bne.n	8003d12 <memcpy+0xe>
 8003d1e:	bd10      	pop	{r4, pc}

08003d20 <memmove>:
 8003d20:	4288      	cmp	r0, r1
 8003d22:	b510      	push	{r4, lr}
 8003d24:	eb01 0402 	add.w	r4, r1, r2
 8003d28:	d902      	bls.n	8003d30 <memmove+0x10>
 8003d2a:	4284      	cmp	r4, r0
 8003d2c:	4623      	mov	r3, r4
 8003d2e:	d807      	bhi.n	8003d40 <memmove+0x20>
 8003d30:	1e43      	subs	r3, r0, #1
 8003d32:	42a1      	cmp	r1, r4
 8003d34:	d008      	beq.n	8003d48 <memmove+0x28>
 8003d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d3e:	e7f8      	b.n	8003d32 <memmove+0x12>
 8003d40:	4601      	mov	r1, r0
 8003d42:	4402      	add	r2, r0
 8003d44:	428a      	cmp	r2, r1
 8003d46:	d100      	bne.n	8003d4a <memmove+0x2a>
 8003d48:	bd10      	pop	{r4, pc}
 8003d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d52:	e7f7      	b.n	8003d44 <memmove+0x24>

08003d54 <_free_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4605      	mov	r5, r0
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	d040      	beq.n	8003dde <_free_r+0x8a>
 8003d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d60:	1f0c      	subs	r4, r1, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bfb8      	it	lt
 8003d66:	18e4      	addlt	r4, r4, r3
 8003d68:	f000 f910 	bl	8003f8c <__malloc_lock>
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <_free_r+0x8c>)
 8003d6e:	6813      	ldr	r3, [r2, #0]
 8003d70:	b933      	cbnz	r3, 8003d80 <_free_r+0x2c>
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	6014      	str	r4, [r2, #0]
 8003d76:	4628      	mov	r0, r5
 8003d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d7c:	f000 b90c 	b.w	8003f98 <__malloc_unlock>
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	d908      	bls.n	8003d96 <_free_r+0x42>
 8003d84:	6820      	ldr	r0, [r4, #0]
 8003d86:	1821      	adds	r1, r4, r0
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	bf01      	itttt	eq
 8003d8c:	6819      	ldreq	r1, [r3, #0]
 8003d8e:	685b      	ldreq	r3, [r3, #4]
 8003d90:	1809      	addeq	r1, r1, r0
 8003d92:	6021      	streq	r1, [r4, #0]
 8003d94:	e7ed      	b.n	8003d72 <_free_r+0x1e>
 8003d96:	461a      	mov	r2, r3
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	b10b      	cbz	r3, 8003da0 <_free_r+0x4c>
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	d9fa      	bls.n	8003d96 <_free_r+0x42>
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	1850      	adds	r0, r2, r1
 8003da4:	42a0      	cmp	r0, r4
 8003da6:	d10b      	bne.n	8003dc0 <_free_r+0x6c>
 8003da8:	6820      	ldr	r0, [r4, #0]
 8003daa:	4401      	add	r1, r0
 8003dac:	1850      	adds	r0, r2, r1
 8003dae:	4283      	cmp	r3, r0
 8003db0:	6011      	str	r1, [r2, #0]
 8003db2:	d1e0      	bne.n	8003d76 <_free_r+0x22>
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4401      	add	r1, r0
 8003dba:	6011      	str	r1, [r2, #0]
 8003dbc:	6053      	str	r3, [r2, #4]
 8003dbe:	e7da      	b.n	8003d76 <_free_r+0x22>
 8003dc0:	d902      	bls.n	8003dc8 <_free_r+0x74>
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	602b      	str	r3, [r5, #0]
 8003dc6:	e7d6      	b.n	8003d76 <_free_r+0x22>
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	1821      	adds	r1, r4, r0
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	bf01      	itttt	eq
 8003dd0:	6819      	ldreq	r1, [r3, #0]
 8003dd2:	685b      	ldreq	r3, [r3, #4]
 8003dd4:	1809      	addeq	r1, r1, r0
 8003dd6:	6021      	streq	r1, [r4, #0]
 8003dd8:	6063      	str	r3, [r4, #4]
 8003dda:	6054      	str	r4, [r2, #4]
 8003ddc:	e7cb      	b.n	8003d76 <_free_r+0x22>
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
 8003de0:	200001c0 	.word	0x200001c0

08003de4 <sbrk_aligned>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	4e0e      	ldr	r6, [pc, #56]	; (8003e20 <sbrk_aligned+0x3c>)
 8003de8:	460c      	mov	r4, r1
 8003dea:	6831      	ldr	r1, [r6, #0]
 8003dec:	4605      	mov	r5, r0
 8003dee:	b911      	cbnz	r1, 8003df6 <sbrk_aligned+0x12>
 8003df0:	f000 f8bc 	bl	8003f6c <_sbrk_r>
 8003df4:	6030      	str	r0, [r6, #0]
 8003df6:	4621      	mov	r1, r4
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 f8b7 	bl	8003f6c <_sbrk_r>
 8003dfe:	1c43      	adds	r3, r0, #1
 8003e00:	d00a      	beq.n	8003e18 <sbrk_aligned+0x34>
 8003e02:	1cc4      	adds	r4, r0, #3
 8003e04:	f024 0403 	bic.w	r4, r4, #3
 8003e08:	42a0      	cmp	r0, r4
 8003e0a:	d007      	beq.n	8003e1c <sbrk_aligned+0x38>
 8003e0c:	1a21      	subs	r1, r4, r0
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f000 f8ac 	bl	8003f6c <_sbrk_r>
 8003e14:	3001      	adds	r0, #1
 8003e16:	d101      	bne.n	8003e1c <sbrk_aligned+0x38>
 8003e18:	f04f 34ff 	mov.w	r4, #4294967295
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	bd70      	pop	{r4, r5, r6, pc}
 8003e20:	200001c4 	.word	0x200001c4

08003e24 <_malloc_r>:
 8003e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e28:	1ccd      	adds	r5, r1, #3
 8003e2a:	f025 0503 	bic.w	r5, r5, #3
 8003e2e:	3508      	adds	r5, #8
 8003e30:	2d0c      	cmp	r5, #12
 8003e32:	bf38      	it	cc
 8003e34:	250c      	movcc	r5, #12
 8003e36:	2d00      	cmp	r5, #0
 8003e38:	4607      	mov	r7, r0
 8003e3a:	db01      	blt.n	8003e40 <_malloc_r+0x1c>
 8003e3c:	42a9      	cmp	r1, r5
 8003e3e:	d905      	bls.n	8003e4c <_malloc_r+0x28>
 8003e40:	230c      	movs	r3, #12
 8003e42:	2600      	movs	r6, #0
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	4630      	mov	r0, r6
 8003e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e4c:	4e2e      	ldr	r6, [pc, #184]	; (8003f08 <_malloc_r+0xe4>)
 8003e4e:	f000 f89d 	bl	8003f8c <__malloc_lock>
 8003e52:	6833      	ldr	r3, [r6, #0]
 8003e54:	461c      	mov	r4, r3
 8003e56:	bb34      	cbnz	r4, 8003ea6 <_malloc_r+0x82>
 8003e58:	4629      	mov	r1, r5
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	f7ff ffc2 	bl	8003de4 <sbrk_aligned>
 8003e60:	1c43      	adds	r3, r0, #1
 8003e62:	4604      	mov	r4, r0
 8003e64:	d14d      	bne.n	8003f02 <_malloc_r+0xde>
 8003e66:	6834      	ldr	r4, [r6, #0]
 8003e68:	4626      	mov	r6, r4
 8003e6a:	2e00      	cmp	r6, #0
 8003e6c:	d140      	bne.n	8003ef0 <_malloc_r+0xcc>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	4631      	mov	r1, r6
 8003e72:	4638      	mov	r0, r7
 8003e74:	eb04 0803 	add.w	r8, r4, r3
 8003e78:	f000 f878 	bl	8003f6c <_sbrk_r>
 8003e7c:	4580      	cmp	r8, r0
 8003e7e:	d13a      	bne.n	8003ef6 <_malloc_r+0xd2>
 8003e80:	6821      	ldr	r1, [r4, #0]
 8003e82:	3503      	adds	r5, #3
 8003e84:	1a6d      	subs	r5, r5, r1
 8003e86:	f025 0503 	bic.w	r5, r5, #3
 8003e8a:	3508      	adds	r5, #8
 8003e8c:	2d0c      	cmp	r5, #12
 8003e8e:	bf38      	it	cc
 8003e90:	250c      	movcc	r5, #12
 8003e92:	4638      	mov	r0, r7
 8003e94:	4629      	mov	r1, r5
 8003e96:	f7ff ffa5 	bl	8003de4 <sbrk_aligned>
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d02b      	beq.n	8003ef6 <_malloc_r+0xd2>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	442b      	add	r3, r5
 8003ea2:	6023      	str	r3, [r4, #0]
 8003ea4:	e00e      	b.n	8003ec4 <_malloc_r+0xa0>
 8003ea6:	6822      	ldr	r2, [r4, #0]
 8003ea8:	1b52      	subs	r2, r2, r5
 8003eaa:	d41e      	bmi.n	8003eea <_malloc_r+0xc6>
 8003eac:	2a0b      	cmp	r2, #11
 8003eae:	d916      	bls.n	8003ede <_malloc_r+0xba>
 8003eb0:	1961      	adds	r1, r4, r5
 8003eb2:	42a3      	cmp	r3, r4
 8003eb4:	6025      	str	r5, [r4, #0]
 8003eb6:	bf18      	it	ne
 8003eb8:	6059      	strne	r1, [r3, #4]
 8003eba:	6863      	ldr	r3, [r4, #4]
 8003ebc:	bf08      	it	eq
 8003ebe:	6031      	streq	r1, [r6, #0]
 8003ec0:	5162      	str	r2, [r4, r5]
 8003ec2:	604b      	str	r3, [r1, #4]
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f104 060b 	add.w	r6, r4, #11
 8003eca:	f000 f865 	bl	8003f98 <__malloc_unlock>
 8003ece:	f026 0607 	bic.w	r6, r6, #7
 8003ed2:	1d23      	adds	r3, r4, #4
 8003ed4:	1af2      	subs	r2, r6, r3
 8003ed6:	d0b6      	beq.n	8003e46 <_malloc_r+0x22>
 8003ed8:	1b9b      	subs	r3, r3, r6
 8003eda:	50a3      	str	r3, [r4, r2]
 8003edc:	e7b3      	b.n	8003e46 <_malloc_r+0x22>
 8003ede:	6862      	ldr	r2, [r4, #4]
 8003ee0:	42a3      	cmp	r3, r4
 8003ee2:	bf0c      	ite	eq
 8003ee4:	6032      	streq	r2, [r6, #0]
 8003ee6:	605a      	strne	r2, [r3, #4]
 8003ee8:	e7ec      	b.n	8003ec4 <_malloc_r+0xa0>
 8003eea:	4623      	mov	r3, r4
 8003eec:	6864      	ldr	r4, [r4, #4]
 8003eee:	e7b2      	b.n	8003e56 <_malloc_r+0x32>
 8003ef0:	4634      	mov	r4, r6
 8003ef2:	6876      	ldr	r6, [r6, #4]
 8003ef4:	e7b9      	b.n	8003e6a <_malloc_r+0x46>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	4638      	mov	r0, r7
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	f000 f84c 	bl	8003f98 <__malloc_unlock>
 8003f00:	e7a1      	b.n	8003e46 <_malloc_r+0x22>
 8003f02:	6025      	str	r5, [r4, #0]
 8003f04:	e7de      	b.n	8003ec4 <_malloc_r+0xa0>
 8003f06:	bf00      	nop
 8003f08:	200001c0 	.word	0x200001c0

08003f0c <_realloc_r>:
 8003f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f10:	4680      	mov	r8, r0
 8003f12:	4614      	mov	r4, r2
 8003f14:	460e      	mov	r6, r1
 8003f16:	b921      	cbnz	r1, 8003f22 <_realloc_r+0x16>
 8003f18:	4611      	mov	r1, r2
 8003f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1e:	f7ff bf81 	b.w	8003e24 <_malloc_r>
 8003f22:	b92a      	cbnz	r2, 8003f30 <_realloc_r+0x24>
 8003f24:	f7ff ff16 	bl	8003d54 <_free_r>
 8003f28:	4625      	mov	r5, r4
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f30:	f000 f838 	bl	8003fa4 <_malloc_usable_size_r>
 8003f34:	4284      	cmp	r4, r0
 8003f36:	4607      	mov	r7, r0
 8003f38:	d802      	bhi.n	8003f40 <_realloc_r+0x34>
 8003f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f3e:	d812      	bhi.n	8003f66 <_realloc_r+0x5a>
 8003f40:	4621      	mov	r1, r4
 8003f42:	4640      	mov	r0, r8
 8003f44:	f7ff ff6e 	bl	8003e24 <_malloc_r>
 8003f48:	4605      	mov	r5, r0
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d0ed      	beq.n	8003f2a <_realloc_r+0x1e>
 8003f4e:	42bc      	cmp	r4, r7
 8003f50:	4622      	mov	r2, r4
 8003f52:	4631      	mov	r1, r6
 8003f54:	bf28      	it	cs
 8003f56:	463a      	movcs	r2, r7
 8003f58:	f7ff fed4 	bl	8003d04 <memcpy>
 8003f5c:	4631      	mov	r1, r6
 8003f5e:	4640      	mov	r0, r8
 8003f60:	f7ff fef8 	bl	8003d54 <_free_r>
 8003f64:	e7e1      	b.n	8003f2a <_realloc_r+0x1e>
 8003f66:	4635      	mov	r5, r6
 8003f68:	e7df      	b.n	8003f2a <_realloc_r+0x1e>
	...

08003f6c <_sbrk_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	2300      	movs	r3, #0
 8003f70:	4d05      	ldr	r5, [pc, #20]	; (8003f88 <_sbrk_r+0x1c>)
 8003f72:	4604      	mov	r4, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	602b      	str	r3, [r5, #0]
 8003f78:	f7ff fb1a 	bl	80035b0 <_sbrk>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d102      	bne.n	8003f86 <_sbrk_r+0x1a>
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	b103      	cbz	r3, 8003f86 <_sbrk_r+0x1a>
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	200001c8 	.word	0x200001c8

08003f8c <__malloc_lock>:
 8003f8c:	4801      	ldr	r0, [pc, #4]	; (8003f94 <__malloc_lock+0x8>)
 8003f8e:	f000 b811 	b.w	8003fb4 <__retarget_lock_acquire_recursive>
 8003f92:	bf00      	nop
 8003f94:	200001cc 	.word	0x200001cc

08003f98 <__malloc_unlock>:
 8003f98:	4801      	ldr	r0, [pc, #4]	; (8003fa0 <__malloc_unlock+0x8>)
 8003f9a:	f000 b80c 	b.w	8003fb6 <__retarget_lock_release_recursive>
 8003f9e:	bf00      	nop
 8003fa0:	200001cc 	.word	0x200001cc

08003fa4 <_malloc_usable_size_r>:
 8003fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fa8:	1f18      	subs	r0, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bfbc      	itt	lt
 8003fae:	580b      	ldrlt	r3, [r1, r0]
 8003fb0:	18c0      	addlt	r0, r0, r3
 8003fb2:	4770      	bx	lr

08003fb4 <__retarget_lock_acquire_recursive>:
 8003fb4:	4770      	bx	lr

08003fb6 <__retarget_lock_release_recursive>:
 8003fb6:	4770      	bx	lr

08003fb8 <_init>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_fini>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr
